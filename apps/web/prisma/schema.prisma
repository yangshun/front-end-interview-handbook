generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model EmailSubscriber {
  id        String    @id(map: "EmailSubscribers_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String    @unique(map: "EmailSubscribers_email_key")
  createdAt DateTime? @default(now()) @db.Timestamp(6)
}

model FeedbackMessage {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message   String    @db.VarChar
  email     String?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  resolved  Boolean   @default(false)
  owner     String?   @default("yangshun")
  userEmail String?
  comments  String?   @db.VarChar
  metadata  Json?     @db.Json
}

model Profile {
  id               String    @id(map: "profile_pkey") @db.Uuid
  username         String    @unique @default(dbgenerated("SUBSTRING((gen_random_uuid())::text FROM 1 FOR 8)")) @db.Citext
  name             String?
  avatarUrl        String?
  title            String?
  company          String?
  bio              String?
  githubUsername   String?
  linkedInUsername String?
  website          String?
  startWorkDate    DateTime?
  currentStatus    String?

  stripeCustomer   String?
  premium          Boolean @default(false)
  plan             String?
  mailjetContactId String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  learningSessions                        LearningSession[]
  questionProgress                        QuestionProgress[]
  guideProgress                           GuideProgress[]
  questionDiscussionPosts                 QuestionDiscussionPost[]
  questionJavaScriptSubmissions           QuestionJavaScriptSubmission[]
  questionJavaScriptCommunitySolutions    QuestionJavaScriptCommunitySolution[]
  questionUserInterfaceSaves              QuestionUserInterfaceSave[]
  questionUserInterfaceCommunitySolutions QuestionUserInterfaceCommunitySolution[]
  projectsProfile                         ProjectsProfile?
  rewardsTaskCompletions                  RewardsTaskCompletion[]

  @@index([username])
  @@index([stripeCustomer])
}

model QuestionProgress {
  id        String   @id(map: "question_progress_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format    String
  slug      String
  status    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String   @db.Uuid
  profile   Profile  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([format, slug, status, userId])
  @@index([userId]) // User's progress across all qns
  @@index([userId, format, slug]) // Single qn for user
  @@index([slug, format]) // Global completed for qn
}

enum GuideProgressStatus {
  COMPLETED
}

enum GuidebookItem {
  BEHAVIORAL_INTERVIEW_PLAYBOOK
  FRONT_END_INTERVIEW_PLAYBOOK
  FRONT_END_SYSTEM_DESIGN_PLAYBOOK
  REACT_INTERVIEW_PLAYBOOK
}

model GuideProgress {
  id        String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  book      GuidebookItem
  slug      String
  status    GuideProgressStatus
  createdAt DateTime            @default(now()) @db.Timestamptz(6)
  userId    String              @db.Uuid
  profile   Profile             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([book, slug, status, userId])
  @@index([userId]) // User's progress across all guides
  @@index([userId, book, slug]) // Single guide for a user
}

model QuestionDiscussionPost {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format    String
  slug      String
  contents  String
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  profile Profile @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum QuestionSubmissionResult {
  CORRECT
  WRONG
}

enum QuestionWorkingLanguage {
  JS
  TS
}

model QuestionJavaScriptSubmission {
  id        String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  code      String
  language  QuestionWorkingLanguage
  result    QuestionSubmissionResult
  userId    String                   @db.Uuid
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)

  profile Profile @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId, slug]) // Submissions for user
}

enum QuestionUserInterfaceFramework {
  REACT
  VANILLA
  ANGULAR
  SVELTE
  VUE
}

model QuestionUserInterfaceSave {
  id        String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  slug      String
  files     String
  framework QuestionUserInterfaceFramework
  userId    String                         @db.Uuid
  createdAt DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                       @default(now()) @updatedAt
  profile   Profile                        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId, slug]) // Saves for user
}

model QuestionJavaScriptCommunitySolution {
  id        String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  title     String
  writeup   String
  code      String
  language  QuestionWorkingLanguage
  userId    String                  @db.Uuid
  createdAt DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                @default(now()) @updatedAt

  profile Profile @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([slug]) // Solutions submitted for a qn
}

model QuestionUserInterfaceCommunitySolution {
  id        String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug      String
  title     String
  writeup   String
  files     String
  framework QuestionUserInterfaceFramework
  userId    String                         @db.Uuid
  createdAt DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                       @default(now()) @updatedAt

  profile Profile @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([slug]) // Solutions submitted for a qn
}

enum LearningSessionStatus {
  IN_PROGRESS
  STOPPED
}

model LearningSession {
  id        String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String                @db.Uuid
  key       String
  status    LearningSessionStatus @default(IN_PROGRESS)
  createdAt DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt DateTime              @default(now()) @updatedAt
  stoppedAt DateTime?             @db.Timestamptz(6)

  profile  Profile?                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  progress LearningSessionProgress[]

  @@index([userId]) // All sessions for user
  @@index([userId, key]) // Specific session for type
}

enum LearningSessionProgressStatus {
  COMPLETED
}

model LearningSessionProgress {
  id        String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key       String
  sessionId String                        @db.Uuid
  status    LearningSessionProgressStatus
  createdAt DateTime                      @default(now()) @db.Timestamptz(6)
  session   LearningSession               @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, key])
  @@index([sessionId])
}

enum ProjectsSubscriptionPlan {
  MONTH
  ANNUAL
}

model ProjectsProfile {
  id                    String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                String                    @unique @db.Uuid
  points                Int                       @default(0)
  motivations           String[]
  skillsProficient      String[]
  skillsToGrow          String[]
  premium               Boolean                   @default(false)
  plan                  ProjectsSubscriptionPlan?
  credits               Int                       @default(0)
  creditsAtStartOfCycle Int                       @default(0)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  userProfile        Profile                              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sessions           ProjectsChallengeSession[]
  submissions        ProjectsChallengeSubmission[]
  votesGiven         ProjectsChallengeSubmissionVote[]
  pins               ProjectsChallengeSubmissionPin[]
  reputation         ProjectsReputationPoint[]
  comments           ProjectsDiscussionComment[]
  commentVotes       ProjectsDiscussionCommentVote[]
  challengesUnlocked ProjectsChallengeAccess[]
  creditTransactions ProjectsChallengeCreditTransaction[]
  notifications      ProjectsNotification[]

  lastSeenNotification DateTime @default(now()) @db.Timestamptz(6)

  @@index([userId])
}

enum ProjectsChallengeSessionStatus {
  IN_PROGRESS
  STOPPED
  COMPLETED
}

model ProjectsChallengeSession {
  id              String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId       String                         @db.Uuid
  slug            String
  status          ProjectsChallengeSessionStatus @default(IN_PROGRESS)
  roadmapSkills   String[]
  techStackSkills String[]

  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt
  stoppedAt DateTime? @db.Timestamptz(6)

  challengeDetails ProjectsChallengeDetails? @relation(fields: [slug], references: [slug])
  projectsProfile  ProjectsProfile           @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([profileId, slug])
}

// This model only exists to allow models that are connected to a challenge
// to sort by certain fields e.g. difficulty.
model ProjectsChallengeDetails {
  slug       String @id @unique
  difficulty Int

  sessions    ProjectsChallengeSession[]
  submissions ProjectsChallengeSubmission[]
}

model ProjectsChallengeAccess {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId     String   @db.Uuid
  slug          String
  transactionId String?  @unique @db.Uuid
  createdAt     DateTime @default(now()) @db.Timestamptz(6)

  transaction     ProjectsChallengeCreditTransaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectsProfile ProjectsProfile                     @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profileId, slug])
}

enum ProjectsChallengeCreditType {
  CREDIT
  DEBIT
}

model ProjectsChallengeCreditTransaction {
  id              String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId       String                      @db.Uuid
  type            ProjectsChallengeCreditType
  amount          Int
  stripeInvoiceId String?
  createdAt       DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime                    @default(now()) @updatedAt

  projectsProfile ProjectsProfile          @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  access          ProjectsChallengeAccess?

  @@index([profileId])
}

enum ProjectsChallengeSubmissionScreenshotStatus {
  PENDING
  COMPLETED
  FAILED
}

model ProjectsChallengeSubmission {
  id               String                                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  shortId          String                                      @unique @default(dbgenerated("SUBSTRING((gen_random_uuid())::text FROM 1 FOR 8)")) @db.Citext
  profileId        String                                      @db.Uuid
  slug             String
  title            String
  summary          String
  repositoryUrl    String
  deploymentUrls   Json
  implementation   String
  views            Int                                         @default(0)
  roadmapSkills    String[]
  techStackSkills  String[]
  screenshotStatus ProjectsChallengeSubmissionScreenshotStatus @default(PENDING)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt
  editedAt  DateTime @default(now()) @db.Timestamptz(6) // Manually edited by the user.

  challengeDetails     ProjectsChallengeDetails?                        @relation(fields: [slug], references: [slug])
  projectsProfile      ProjectsProfile?                                 @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  votes                ProjectsChallengeSubmissionVote[]
  pins                 ProjectsChallengeSubmissionPin[]
  recommendationAll    ProjectsChallengeSubmissionRecommendationAll?
  recommendationLearn  ProjectsChallengeSubmissionRecommendationLearn?
  recommendationMentor ProjectsChallengeSubmissionRecommendationMentor?
  notifications        ProjectsNotification[]

  @@index([shortId])
  @@index([profileId])
  @@index([slug])
}

model ProjectsChallengeSubmissionPin {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissionId String   @db.Uuid
  profileId    String   @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  submission      ProjectsChallengeSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectsProfile ProjectsProfile             @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([submissionId, profileId])
  @@index([profileId])
}

model ProjectsChallengeSubmissionVote {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submissionId String   @db.Uuid
  profileId    String   @db.Uuid
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  submission      ProjectsChallengeSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectsProfile ProjectsProfile             @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([submissionId, profileId])
  @@index([submissionId])
}

model ProjectsReputationPoint {
  id        Int      @id @default(autoincrement())
  profileId String   @db.Uuid
  key       String
  points    Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  projectsProfile ProjectsProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profileId, key])
  @@index([profileId])
}

view ProjectsChallengeSubmissionRecommendationAll {
  id    String @id @db.Uuid
  score Int

  submission ProjectsChallengeSubmission @relation(fields: [id], references: [id])
}

view ProjectsChallengeSubmissionRecommendationLearn {
  id    String @id @db.Uuid
  score Int

  submission ProjectsChallengeSubmission @relation(fields: [id], references: [id])
}

view ProjectsChallengeSubmissionRecommendationMentor {
  id    String @id @db.Uuid
  score Int

  submission ProjectsChallengeSubmission @relation(fields: [id], references: [id])
}

enum ProjectsDiscussionCommentDomain {
  PROJECTS_CHALLENGE
  PROJECTS_SUBMISSION
}

model ProjectsDiscussionComment {
  id              String                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityId        String
  domain          ProjectsDiscussionCommentDomain
  parentCommentId String?                         @db.Uuid

  body      String
  category  String?
  profileId String  @db.Uuid

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  author        ProjectsProfile                 @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parentComment ProjectsDiscussionComment?      @relation("DiscussionThread", fields: [parentCommentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies       ProjectsDiscussionComment[]     @relation("DiscussionThread")
  votes         ProjectsDiscussionCommentVote[]
  notifications ProjectsNotification[]

  @@index([entityId])
  @@index([profileId])
}

model ProjectsDiscussionCommentVote {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  commentId String   @db.Uuid
  profileId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  comment ProjectsDiscussionComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author  ProjectsProfile           @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([commentId, profileId])
  @@index([commentId])
  @@index([profileId])
}

model ProjectsNotification {
  id              String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profileId       String                       @db.Uuid
  createdAt       DateTime                     @default(now()) @db.Timestamptz(6)
  category        String
  read            Boolean                      @default(false)
  data            Json?
  submissionId    String?                      @db.Uuid
  submission      ProjectsChallengeSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  commentId       String?                      @db.Uuid
  comment         ProjectsDiscussionComment?   @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectsProfile ProjectsProfile              @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([profileId])
}

model RewardsTaskCompletion {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String   @db.Uuid
  campaign   String
  action     String
  identifier String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  profile Profile @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, campaign, action])
  @@index([userId])
}

model RoadmapItem {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String
  dueDate     DateTime @db.Timestamptz(6)
  tags        String[]
  launched    Boolean  @default(false)
  url         String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt
}

enum SponsorsAdRequestStatus {
  PENDING
  REJECTED
  APPROVED
}

model SponsorsAdRequest {
  id             String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  emails         String[]
  sponsorName    String
  legalName      String
  taxNumber      String?
  address        Json                    @db.Json
  signatoryName  String
  signatoryTitle String
  agreement      String
  status         SponsorsAdRequestStatus @default(PENDING)

  ads SponsorsAd[]
}

enum SponsorsAdFormat {
  GLOBAL_BANNER
  IN_CONTENT
  SPOTLIGHT
}

model SponsorsAd {
  id          String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  format      SponsorsAdFormat
  sponsorName String
  title       String
  body        String?
  url         String
  imageUrl    String?
  requestId   String           @db.Uuid

  request SponsorsAdRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  slots   SponsorsAdSlot[]

  @@unique([format, requestId])
}

model SponsorsAdSlot {
  id   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  year Int
  week Int
  adId String @db.Uuid

  ad SponsorsAd @relation(fields: [adId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([year, week, adId])
}
