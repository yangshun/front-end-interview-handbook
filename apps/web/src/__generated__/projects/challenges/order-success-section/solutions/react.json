{
  "files": {
    "/index.css": {
      "code": "@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family:\n    'Noto Sans',\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    'Open Sans',\n    'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  background: linear-gradient(147.52deg, #f9fafb 8.89%, #d2d6db 100.48%);\n}\n\n/* Custom z-index */\n.z-sticky {\n  z-index: 1020;\n}\n.z-fixed {\n  z-index: 1030;\n}\n.z-dropdown {\n  z-index: 1000;\n}\n.z-modal {\n  z-index: 1055;\n}\n.z-toast {\n  z-index: 1090;\n}\n\n/* Custom box shadow */\n.shadow-custom {\n  box-shadow:\n    0px 1px 2px 0 rgb(0 0 0 / 0.06),\n    0px 1px 3px 0 rgb(0 0 0 / 0.1);\n}\n"
    },
    "/jsconfig.json": {
      "code": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  },\n  \"include\": [\"src\"]\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-challenges/order-success-section-solution\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"clsx\": \"^2.1.1\",\n    \"react-icons\": \"5.3.0\",\n    \"react-router-dom\": \"^6.23.1\",\n    \"usehooks-ts\": \"^3.1.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\" />\n    <title>Order success section</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { Route, Routes } from 'react-router-dom';\n\nimport Layout from './Layout';\nimport CartPage from './pages/Cart';\nimport CheckoutPage from './pages/Checkout';\nimport OrderSuccessPage from './pages/OrderSuccess';\n\nimport CartContextProvider from './context/CartContext';\nimport ToastContextProvider from './context/ToastContext';\n\nfunction App() {\n  return (\n    <ToastContextProvider>\n      <CartContextProvider>\n        <Routes>\n          <Route path=\"/\" element={<Layout />}>\n            <Route path=\"/cart\" element={<CartPage />} />\n            <Route path=\"/checkout\" element={<CheckoutPage />} />\n            <Route path=\"/\" element={<OrderSuccessPage />} />\n          </Route>\n        </Routes>\n      </CartContextProvider>\n    </ToastContextProvider>\n  );\n}\n\nexport default App;\n"
    },
    "/src/components/CartControl/CartControl.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiAddFill, RiSubtractFill } from 'react-icons/ri';\n\nimport Tooltip from '../ui/Tooltip';\n\nconst CartControl = ({ quantity, decrement, increment, availableStock }) => {\n  const disabledDecrement = quantity === 1;\n  const disabledIncrement = quantity >= availableStock;\n\n  return (\n    <div\n      className={clsx(\n        'h-9 w-[125px]',\n        'flex items-center justify-center gap-3',\n        'px-[5px] py-0.5',\n        'rounded-md border border-neutral-200 bg-neutral-50',\n      )}\n      role=\"group\"\n      aria-label=\"Product Quantity control\">\n      <button\n        type=\"button\"\n        className={clsx(\n          'flex items-center justify-center rounded',\n          'text-neutral-600 disabled:text-neutral-400',\n          'cursor-pointer disabled:pointer-events-none',\n        )}\n        disabled={disabledDecrement}\n        onClick={decrement}\n        aria-label=\"Decrease quantity\">\n        <RiSubtractFill className=\"size-5 shrink-0 p-0.5\" />\n      </button>\n      <span\n        className=\"flex-1 text-center text-sm font-medium text-neutral-600\"\n        aria-live=\"polite\">\n        {quantity}\n      </span>\n      <Tooltip content=\"Insufficient stock\" show={disabledIncrement}>\n        <button\n          type=\"button\"\n          className={clsx(\n            'flex items-center justify-center rounded',\n            'text-neutral-600 disabled:text-neutral-400',\n            'cursor-pointer disabled:pointer-events-none',\n          )}\n          disabled={disabledIncrement}\n          onClick={increment}\n          aria-label=\"Increase quantity\">\n          <RiAddFill className=\"size-5 shrink-0 p-0.5\" />\n        </button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default CartControl;\n"
    },
    "/src/components/CartControl/index.js": {
      "code": "import CartControl from './CartControl';\n\nexport default CartControl;\n"
    },
    "/src/components/OrderAmountSummary/index.js": {
      "code": "import OrderAmountSummary from './OrderAmountSummary';\n\nexport default OrderAmountSummary;\n"
    },
    "/src/components/OrderAmountSummary/OrderAmountSummary.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Badge from 'src/components/ui/Badge';\n\nconst OrderAmountSummary = ({\n  subtotal,\n  discountCode,\n  discountAmount,\n  discountPercentage,\n  className,\n  type = 'cart',\n}) => {\n  const isCartView = type === 'cart';\n\n  return (\n    <dl className={clsx('flex flex-col gap-4', className)}>\n      <div className=\"flex items-center justify-between gap-2\">\n        <span className=\"text-neutral-600\">Subtotal</span>\n        <span className=\"text-lg font-semibold\">${subtotal.toFixed(2)}</span>\n      </div>\n      <div className=\"flex items-center justify-between gap-2\">\n        <span className=\"text-neutral-600\">Shipping</span>\n        <span className=\"text-lg font-semibold\">FREE</span>\n      </div>\n      {discountCode && (\n        <div className=\"flex justify-between gap-2 md:items-center\">\n          <div\n            className={clsx(\n              'flex flex-col items-center md:flex-row',\n              isCartView ? 'gap-x-8 gap-y-2' : 'gap-4',\n            )}>\n            <span className=\"text-neutral-600\">Coupon discount</span>\n            <Badge label={discountCode} variant=\"brand\" size=\"lg\" />\n          </div>\n          <span className=\"text-lg font-semibold\">\n            -\n            {discountAmount\n              ? `$${discountAmount.toFixed(2)}`\n              : `${discountPercentage}%`}\n          </span>\n        </div>\n      )}\n    </dl>\n  );\n};\n\nexport default OrderAmountSummary;\n"
    },
    "/src/components/OrderProductCard/index.js": {
      "code": "import OrderProductCard from './OrderProductCard';\n\nexport default OrderProductCard;\n"
    },
    "/src/components/OrderProductCard/OrderProductCard.jsx": {
      "code": "import clsx from 'clsx';\n\nimport { COLORS, SIZE } from 'src/constants';\nimport { formatPrice } from 'src/utils';\n\nconst OrderProductCard = ({ data, type = 'cart' }) => {\n  const { unit, quantity, product, total_list_price, total_sale_price } = data;\n  const hasDiscount =\n    !!total_sale_price && total_sale_price !== total_list_price;\n\n  const isCartView = type === 'cart';\n\n  return (\n    <div className={clsx('flex gap-6', isCartView && 'flex-col md:flex-row')}>\n      <div className=\"flex flex-1 gap-6\">\n        <img\n          src={unit.image_url}\n          className={clsx(\n            'shrink-0 rounded-lg object-cover',\n            isCartView ? 'size-14 md:size-20' : 'size-20',\n          )}\n          alt={`${SIZE[unit.size]?.long ?? unit.size} ${product.name} in ${\n            unit.color\n          }`}\n        />\n        <div className={clsx('flex flex-col gap-2', 'font-medium')}>\n          <span className={clsx(isCartView ? 'md:text-xl' : 'text-xl')}>\n            {product.name}\n          </span>\n          <span className=\"text-neutral-600\">\n            {COLORS[unit.color].label}\n            {unit.size && (\n              <>\n                {' â€¢ '}\n                {SIZE[unit.size]?.long ?? unit.size}\n              </>\n            )}\n          </span>\n          <span className=\"text-neutral-600\">Quantity: {quantity}</span>\n        </div>\n      </div>\n      <div className=\"flex flex-col items-end gap-2\">\n        <span className=\"text-lg font-semibold\">\n          $\n          {hasDiscount\n            ? formatPrice(total_sale_price)\n            : formatPrice(total_list_price)}\n        </span>\n        {hasDiscount && (\n          <span className=\"text-lg text-neutral-600  line-through\">\n            ${formatPrice(total_list_price)}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OrderProductCard;\n"
    },
    "/src/components/ui/Badge/Badge.jsx": {
      "code": "import clsx from 'clsx';\n\nconst sizeClasses = {\n  sm: clsx('h-5', 'py px-[5px]', 'text-xs'),\n  md: clsx('h-6', 'py px-[7px]', 'text-sm'),\n  lg: clsx('h-7', 'py-[3px] px-[9px]', 'text-sm'),\n};\n\nconst variantClasses = {\n  neutral: clsx('bg-gray-50', 'border-neutral-200', 'text-neutral-600'),\n  danger: clsx('bg-red-50', 'border-red-200', 'text-red-600'),\n  warning: clsx('bg-amber-50', 'border-amber-200', 'text-amber-700'),\n  success: clsx('bg-green-50', 'border-green-200', 'text-green-700'),\n  brand: clsx('bg-indigo-50', 'border-indigo-200', 'text-indigo-700'),\n};\n\nconst Badge = ({ label, size = 'md', variant = 'neutral', className }) => {\n  const commonClasses = clsx('rounded-full text-center border');\n  return (\n    <div\n      className={clsx(\n        commonClasses,\n        sizeClasses[size],\n        variantClasses[variant],\n        className,\n      )}>\n      {label}\n    </div>\n  );\n};\n\nexport default Badge;\n"
    },
    "/src/components/ui/Badge/index.js": {
      "code": "import Badge from './Badge';\n\nexport default Badge;\n"
    },
    "/src/components/ui/Button/Button.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Link from '../Link';\n\nconst paddingClasses = {\n  md: 'px-3.5 py-2.5',\n  lg: 'px-4 py-2.5',\n  xl: 'px-5 py-3',\n  '2xl': 'px-6 py-4',\n};\n\n// We need this because secondary button has border\nconst secondaryVariantPaddingClasses = {\n  md: 'px-[13px] py-[9px]',\n  lg: 'px-[15px] py-[9px]',\n  xl: 'px-[19px] py-[11px]',\n  '2xl': 'px-[23px] py-[15px]',\n};\n\nconst fontSizeClasses = {\n  md: 'text-sm',\n  lg: 'text-base',\n  xl: 'text-base',\n  '2xl': 'text-lg',\n};\n\nconst spacingClasses = {\n  md: 'gap-x-1.5',\n  lg: 'gap-x-2',\n  xl: 'gap-x-2',\n  '2xl': 'gap-x-3',\n};\n\nconst heightClasses = {\n  md: 'h-10',\n  lg: 'h-11',\n  xl: 'h-12',\n  '2xl': 'h-15',\n};\n\nconst iconOnlySizeClasses = {\n  md: 'size-10',\n  lg: 'size-11',\n  xl: 'size-12',\n  '2xl': 'size-14',\n};\n\nconst iconSizeClasses = {\n  md: 'size-5',\n  lg: 'size-5',\n  xl: 'size-5',\n  '2xl': 'size-6',\n};\n\nconst variantClasses = {\n  primary: clsx(\n    'border-none',\n    'bg-indigo-700',\n    'shadow-custom',\n    'text-white',\n    'hover:bg-indigo-800 focus:bg-indigo-800',\n  ),\n  secondary: clsx(\n    'border border-neutral-200',\n    'bg-white',\n    'shadow-custom',\n    'text-neutral-900',\n    'hover:bg-neutral-50 focus:bg-neutral-50',\n  ),\n  tertiary: clsx(\n    'border-none',\n    'text-indigo-700',\n    'hover:bg-neutral-50 focus:bg-neutral-50',\n  ),\n  danger: clsx(\n    'border-none',\n    'bg-red-600',\n    'text-white',\n    'hover:bg-red-700 focus:bg-red-700 focus:outline-none focus-visible:ring-4 focus-visible:ring-red-600/[.12]',\n  ),\n  link: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n  ),\n  'gray-link': clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5',\n  ),\n};\n\nconst variantDisabledClasses = {\n  primary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none',\n  ),\n  secondary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none',\n  ),\n  tertiary: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  danger: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  link: clsx('disabled:text-neutral-400'),\n  'gray-link': clsx('disabled:text-neutral-400'),\n};\n\nconst Button = ({\n  label,\n  className,\n  isDisabled,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  isLabelHidden,\n  size = 'md',\n  variant = 'primary',\n  iconClassName,\n  href,\n  ...props\n}) => {\n  const isLinkVariant = ['link', 'gray-link'].includes(variant);\n\n  const commonClasses = clsx(\n    'inline-flex items-center justify-center rounded font-medium outline-none cursor-pointer',\n    'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'transition-colors',\n    'text-nowrap',\n    !isLinkVariant && heightClasses[size],\n    !isLinkVariant &&\n      (variant === 'secondary'\n        ? secondaryVariantPaddingClasses[size]\n        : paddingClasses[size]),\n    fontSizeClasses[size],\n    spacingClasses[size],\n    isLabelHidden && iconOnlySizeClasses[size],\n    variantClasses[variant],\n    variantDisabledClasses[variant],\n    isDisabled && 'pointer-events-none',\n  );\n\n  if (href) {\n    return (\n      <Link\n        to={href}\n        variant=\"unstyled\"\n        disabled={isDisabled}\n        className={clsx(commonClasses, className)}\n        {...props}>\n        {StartIcon && (\n          <StartIcon\n            className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n        {label}\n        {EndIcon && (\n          <EndIcon\n            className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n      </Link>\n    );\n  }\n\n  const children = isLabelHidden ? (\n    (\n      <StartIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    ) || (\n      <EndIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    )\n  ) : (\n    <>\n      {StartIcon && (\n        <StartIcon\n          className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n      {label}\n      {EndIcon && (\n        <EndIcon\n          className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n    </>\n  );\n\n  return (\n    <button\n      type=\"button\"\n      className={clsx(commonClasses, className)}\n      disabled={isDisabled}\n      {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n"
    },
    "/src/components/ui/Button/index.js": {
      "code": "import Button from './Button';\n\nexport default Button;\n"
    },
    "/src/components/ui/ConfirmModal/ConfirmModal.jsx": {
      "code": "import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { RiCloseLine } from 'react-icons/ri';\n\nimport Button from '../Button';\n\nconst ConfirmModal = ({\n  isOpen,\n  onClose,\n  onAction,\n  title,\n  description,\n  children,\n  primaryActionLabel,\n  secondaryActionLabel,\n  actionBtnSize = 'lg',\n  className,\n}) => {\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return createPortal(\n    <div\n      className={clsx(\n        'z-modal fixed  inset-0',\n        'bg-neutral-950 bg-opacity-70',\n        'flex items-center justify-center',\n      )}\n      role=\"dialog\"\n      aria-modal=\"true\">\n      <div\n        className={clsx(\n          'rounded-lg bg-white',\n          'w-[343px]',\n          'p-6',\n          'flex flex-col gap-8',\n          className,\n        )}>\n        {children ? (\n          children\n        ) : (\n          <div className=\"flex flex-col gap-1\">\n            <div className={clsx('flex items-center justify-between gap-4')}>\n              <div className=\"text-lg font-semibold\">{title}</div>\n              <button\n                aria-label=\"Close modal\"\n                className=\"text-xl font-semibold text-black\"\n                onClick={onClose}>\n                <RiCloseLine className=\"size-6\" />\n              </button>\n            </div>\n\n            <p className=\"text-sm text-neutral-600\">{description}</p>\n          </div>\n        )}\n        <div className={clsx('flex gap-3')}>\n          {secondaryActionLabel && (\n            <Button\n              label={secondaryActionLabel}\n              variant=\"secondary\"\n              size={actionBtnSize}\n              className=\"flex-1\"\n              onClick={onClose}\n            />\n          )}\n          <Button\n            label={primaryActionLabel}\n            size={actionBtnSize}\n            className=\"flex-1\"\n            onClick={onAction}\n          />\n        </div>\n      </div>\n    </div>,\n    document.body,\n  );\n};\n\nexport default ConfirmModal;\n"
    },
    "/src/components/ui/ConfirmModal/index.js": {
      "code": "import ConfirmModal from './ConfirmModal';\n\nexport default ConfirmModal;\n"
    },
    "/src/components/ui/Link/index.js": {
      "code": "import Link from './Link';\n\nexport default Link;\n"
    },
    "/src/components/ui/Link/Link.jsx": {
      "code": "import clsx from 'clsx';\nimport { NavLink, Link as RouterLink } from 'react-router-dom';\n\nconst linkVariantClasses = {\n  primary: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5',\n  ),\n  gray: clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5',\n  ),\n  unstyled: '',\n};\n\nconst activeLinkClasses = {\n  primary: 'text-indigo-800',\n  gray: 'text-neutral-900',\n  unstyled: '',\n};\n\nconst Link = ({\n  children,\n  disabled,\n  className,\n  type = 'default',\n  variant = 'primary',\n  ...props\n}) => {\n  const commonClassName = clsx(\n    'font-medium rounded',\n    linkVariantClasses[variant],\n    {\n      'pointer-events-none text-neutral-400': disabled,\n    },\n    className,\n  );\n\n  if (type === 'nav') {\n    return (\n      <NavLink\n        {...props}\n        className={({ isActive }) =>\n          clsx(commonClassName, isActive && activeLinkClasses[variant])\n        }>\n        {children}\n      </NavLink>\n    );\n  }\n  return (\n    <RouterLink {...props} className={clsx(commonClassName)}>\n      {children}\n    </RouterLink>\n  );\n};\n\nexport default Link;\n"
    },
    "/src/components/ui/Tag/index.js": {
      "code": "import Tag from './Tag';\n\nexport default Tag;\n"
    },
    "/src/components/ui/Tag/Tag.jsx": {
      "code": "import clsx from 'clsx';\n\nconst Tag = ({ label, onAction, actionIcon: Icon }) => {\n  return (\n    <div\n      className={clsx(\n        'flex items-center justify-center gap-1',\n        'rounded bg-gray-200',\n        'px-[7px] py-[3px]',\n        'border-[0.5px] border-[#e6e6e6]',\n      )}>\n      <span className=\"px-0.5 text-sm font-medium\">{label}</span>\n      {Icon && (\n        <Icon\n          className={clsx(\n            'siz-5 text-black',\n            Icon ? 'cursor-pointer' : 'pointer-events-none',\n          )}\n          onClick={onAction}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Tag;\n"
    },
    "/src/components/ui/TextInput/index.js": {
      "code": "import TextInput from './TextInput';\n\nexport default TextInput;\n"
    },
    "/src/components/ui/TextInput/TextInput.jsx": {
      "code": "import clsx from 'clsx';\nimport { useId } from 'react';\n\nconst TextInput = ({\n  isLabelHidden,\n  label,\n  placeholder,\n  value,\n  onChange,\n  type,\n  id: idParam,\n  required,\n  isDisabled,\n  errorMessage,\n  hintMessage,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  startIconClassName,\n  endIconClassName,\n  className,\n  ...props\n}) => {\n  const generateId = useId();\n  const id = idParam ?? generateId;\n  const hasError = !!errorMessage;\n\n  const messageId = useId();\n\n  const hasBottomSection = !!errorMessage || !!hintMessage;\n\n  return (\n    <div className={clsx('flex w-full flex-col gap-1.5', 'relative')}>\n      {label && (\n        <label\n          className={clsx(\n            isLabelHidden ? 'sr-only' : 'text-sm font-medium text-neutral-700',\n          )}\n          htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"relative\">\n        {StartIcon && (\n          <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3.5\">\n            <StartIcon\n              aria-hidden=\"true\"\n              className={clsx('text-neutral-400', 'size-5', startIconClassName)}\n            />\n          </div>\n        )}\n\n        <input\n          id={id}\n          aria-describedby={hasError ? messageId : undefined}\n          aria-invalid={hasError ? true : undefined}\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={(event) => onChange?.(event.target.value, event)}\n          required={required}\n          disabled={isDisabled}\n          {...props}\n          className={clsx(\n            'block w-full',\n            'px-[13px] py-[9px]',\n            'outline:none',\n            'border border-neutral-200 disabled:border-neutral-100',\n            'bg-neutral-50',\n            'rounded',\n            'text-sm text-neutral-900 placeholder:text-neutral-500 disabled:text-neutral-400 disabled:placeholder:text-neutral-400',\n            'focus:outline-none',\n            'focus:border-indigo-600 focus:ring-4 focus:ring-indigo-600/[.12] focus:ring-offset-0',\n            hasError && 'focus:border-red-600 focus:ring-red-600/[.12]',\n            'disabled:pointer-events-none',\n            StartIcon && 'pl-[41px]',\n            EndIcon && 'pr-[38px]',\n            className,\n          )}\n        />\n\n        {EndIcon && (\n          <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3.5\">\n            <EndIcon\n              aria-hidden=\"true\"\n              className={clsx('text-neutral-400', 'size-4', endIconClassName)}\n            />\n          </div>\n        )}\n      </div>\n\n      {hasBottomSection && (\n        <div\n          id={messageId}\n          className={clsx(\n            'text-sm text-neutral-500',\n            hasError && 'text-red-600',\n          )}>\n          {errorMessage || hintMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextInput;\n"
    },
    "/src/components/ui/Toast/index.js": {
      "code": "import Toast from './Toast';\n\nexport default Toast;\n"
    },
    "/src/components/ui/Toast/Toast.jsx": {
      "code": "import clsx from 'clsx';\nimport React from 'react';\n\nconst Toast = ({ type, message }) => {\n  const badge = (\n    <div\n      className={clsx(\n        'flex items-center',\n        'px-2.5 py-0.5',\n        'h-6',\n        'bg-white',\n        'shadow',\n        'rounded-full',\n        'text-sm',\n        type === 'error' && 'text-red-800',\n        type === 'success' && 'text-green-700',\n      )}>\n      {type === 'error' ? 'Error' : 'Success'}\n    </div>\n  );\n\n  return (\n    <div className={clsx('z-toast fixed inset-x-0 top-10')}>\n      <div\n        className={clsx(\n          'mx-4 md:mx-auto md:w-max',\n          'flex items-center gap-3',\n          'p-1 pr-2.5',\n          'rounded-full',\n          'text-sm font-medium',\n          type === 'success' && 'bg-green-50 text-green-700',\n          type === 'error' && 'bg-red-50 text-red-600',\n        )}>\n        {badge}\n        <span>{message}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Toast;\n"
    },
    "/src/components/ui/Tooltip/index.js": {
      "code": "import Tooltip from './Tooltip';\n\nexport default Tooltip;\n"
    },
    "/src/components/ui/Tooltip/Tooltip.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nconst Tooltip = ({ children, content, position = 'top', show = true }) => {\n  const [visible, setVisible] = useState(false);\n\n  const positions = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n  };\n\n  const arrowPositions = {\n    top: 'bottom-[-4px] left-1/2 transform -translate-x-1/2 border-t-neutral-950 border-t-8 border-x-8 border-x-transparent',\n    bottom:\n      'top-[-4px] left-1/2 transform -translate-x-1/2 border-b-neutral-950 border-b-8 border-x-8 border-x-transparent',\n    left: 'right-[-4px] top-1/2 transform -translate-y-1/2 border-l-neutral-950 border-l-8 border-y-8 border-y-transparent',\n    right:\n      'left-[-4px] top-1/2 transform -translate-y-1/2 border-r-neutral-950 border-r-8 border-y-8 border-y-transparent',\n  };\n\n  return (\n    <div\n      className=\"relative flex items-center\"\n      onMouseEnter={() => show && setVisible(true)}\n      onMouseLeave={() => show && setVisible(false)}>\n      {children}\n      {visible && (\n        <div\n          className={clsx(\n            'absolute min-w-max max-w-xs rounded-lg px-3 py-2 shadow-lg',\n            'bg-neutral-950',\n            'text-xs font-medium text-white',\n            positions[position],\n          )}>\n          {content}\n          <div className={clsx('absolute', arrowPositions[position])} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tooltip;\n"
    },
    "/src/constants.js": {
      "code": "export const COLORS = {\n  white: { value: '#fff', label: 'White' },\n  black: { value: '#000', label: 'Black' },\n  red: { value: '#DC2626', label: 'Red' },\n  orange: { value: '#EA580C', label: 'Orange' },\n  yellow: { value: '#F59E0B', label: 'Yellow' },\n  green: { value: '#10B981', label: 'Green' },\n  blue: { value: '#4F46E5', label: 'Blue' },\n  brown: { value: '#CA8A04', label: 'Brown' },\n  beige: { value: '#d2b08a', label: 'Beige' },\n  pink: { value: '#EC4899', label: 'Pink' },\n};\n\nexport const SIZE = {\n  xs: { short: 'XS', long: 'Extra Small' },\n  sm: { short: 'S', long: 'Small' },\n  md: { short: 'M', long: 'Medium' },\n  lg: { short: 'L', long: 'Large' },\n  xl: { short: 'XL', long: 'Extra Large' },\n};\n\nexport const FIELD_NAME = {\n  email: 'Email',\n  country: 'Country',\n  firstName: 'First name',\n  lastName: 'Last name',\n  address1: 'Address',\n  address2: '',\n  city: 'City',\n  state: 'State',\n  zip: 'Zip',\n  deliveryMethod: 'Delivery method',\n  cardNumber: 'Card number',\n  nameOnCard: 'Name on card',\n  cardExpiry: 'Expiry',\n  cardCvv: 'CVV',\n};\n"
    },
    "/src/context/CartContext.jsx": {
      "code": "import {\n  createContext,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getStockChangedData, mergeSampleAndStorageCartItems } from 'src/utils';\n\nconst CartContext = createContext();\n\nexport const useCartContext = () => useContext(CartContext);\n\nconst CartContextProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const [cartItems, setCartItems] = useState([]);\n  const [stockChangedItems, setStockChangedItems] = useState([]);\n  const [discount, setDiscount] = useState({\n    coupon_code: 'GR8FRNTND24',\n    discount_amount: 5,\n    discount_percentage: null,\n  });\n  const [isFetching, setIsFetching] = useState(true);\n  const [checkingStock, setCheckingStock] = useState(false);\n  const [showStockChangedModal, setShowStockChangedModal] = useState(false);\n  const [isCartEmptyAfterStockChanged, setIsCartEmptyAfterStockChanged] =\n    useState(false);\n\n  const updateCartItems = (items) => {\n    setCartItems(items);\n    localStorage.setItem('cart', JSON.stringify(items));\n  };\n\n  const checkForStockChanged = useCallback(async (cartItems) => {\n    setCheckingStock(true);\n    const { products: data, isCartEmpty } =\n      await getStockChangedData(cartItems);\n    setStockChangedItems(data);\n    setShowStockChangedModal(data.length > 0);\n    setCheckingStock(false);\n    setIsCartEmptyAfterStockChanged(isCartEmpty);\n    return data.length > 0;\n  }, []);\n\n  const getCartItems = useCallback(async () => {\n    setIsFetching(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/cart-sample`,\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      const finalCartItems = mergeSampleAndStorageCartItems(result.items);\n      updateCartItems(finalCartItems);\n      checkForStockChanged(finalCartItems);\n    }\n    setIsFetching(false);\n  }, [checkForStockChanged]);\n\n  useEffect(() => {\n    getCartItems();\n  }, [getCartItems]);\n\n  const removeFromCart = useCallback(\n    (item) => {\n      const updatedCart = cartItems.filter(\n        (cartItem) =>\n          !(\n            cartItem.product.product_id === item.product.product_id &&\n            cartItem.unit.color === item.unit.color &&\n            cartItem.unit.size === item.unit.size\n          ),\n      );\n      updateCartItems(updatedCart);\n    },\n    [cartItems],\n  );\n\n  const changeQuantity = useCallback(\n    (item, increment = true) => {\n      let updatedCart;\n\n      updatedCart = cartItems.map((cartItem) => {\n        if (\n          cartItem.product.product_id === item.product.product_id &&\n          cartItem.unit.color === item.unit.color &&\n          cartItem.unit.size === item.unit.size\n        ) {\n          const finalQuantity = increment\n            ? item.quantity + 1\n            : item.quantity - 1;\n\n          return {\n            ...cartItem,\n            quantity: finalQuantity,\n            total_list_price: finalQuantity * cartItem.unit.list_price,\n            total_sale_price: finalQuantity * cartItem.unit.sale_price,\n          };\n        }\n        return cartItem;\n      });\n\n      updateCartItems(updatedCart);\n    },\n    [cartItems],\n  );\n\n  const acknowledgeStockChanged = useCallback(\n    (cartItems, currentStockItems, isCartEmptyAfterStockChanged) => {\n      const updatedCartItems = cartItems.reduce((acc, item) => {\n        const product = currentStockItems.find(\n          (cartItem) =>\n            cartItem.product.product_id === item.product.product_id &&\n            cartItem.unit.sku === item.unit.sku,\n        );\n\n        if (product) {\n          // if there is stock then update the quantity, otherwise remove it\n          if (product.stock > 0) {\n            acc.push({\n              ...item,\n              quantity: product.stock,\n            });\n          }\n        } else {\n          acc.push(item);\n        }\n\n        setShowStockChangedModal(false);\n\n        return acc;\n      }, []);\n\n      updateCartItems(updatedCartItems);\n      if (isCartEmptyAfterStockChanged) {\n        navigate('/cart');\n      }\n    },\n    [navigate],\n  );\n\n  const value = useMemo(\n    () => ({\n      cartItems,\n      isFetching,\n      discount,\n      stockChangedItems,\n      checkingStock,\n      showStockChangedModal,\n      isCartEmptyAfterStockChanged,\n      setShowStockChangedModal,\n      acknowledgeStockChanged,\n      checkForStockChanged,\n      setDiscount,\n      removeFromCart,\n      incrementQuantity: (item) => changeQuantity(item, true),\n      decrementQuantity: (item) => changeQuantity(item, false),\n    }),\n    [\n      cartItems,\n      isFetching,\n      discount,\n      stockChangedItems,\n      checkingStock,\n      showStockChangedModal,\n      isCartEmptyAfterStockChanged,\n      setShowStockChangedModal,\n      acknowledgeStockChanged,\n      checkForStockChanged,\n      setDiscount,\n      removeFromCart,\n      changeQuantity,\n    ],\n  );\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n\nexport default CartContextProvider;\n"
    },
    "/src/context/ToastContext.jsx": {
      "code": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\n\nconst ToastContext = createContext({\n  toast: {\n    show: false,\n    type: '',\n    message: '',\n  },\n  showToast: () => {},\n});\n\nexport const useToast = () => {\n  const { showToast } = useContext(ToastContext);\n\n  const error = (message) => showToast('error', message);\n  const success = (message) => showToast('success', message);\n\n  return { error, success };\n};\n\nexport const useToastContext = () => useContext(ToastContext);\n\nconst ToastContextProvider = ({ children }) => {\n  const [toast, setToast] = useState({\n    show: false,\n    type: '',\n    message: '',\n  });\n\n  const showToast = useCallback((type, message) => {\n    setToast({\n      show: true,\n      type,\n      message,\n    });\n    setTimeout(() => {\n      setToast({\n        show: false,\n        type: '',\n        message: '',\n      });\n    }, 10000);\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      toast,\n      showToast,\n    };\n  }, [toast, showToast]);\n\n  return (\n    <ToastContext.Provider value={value}>{children}</ToastContext.Provider>\n  );\n};\n\nexport default ToastContextProvider;\n"
    },
    "/src/index.css": {
      "code": "@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family:\n    'Noto Sans',\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    'Open Sans',\n    'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  background: linear-gradient(147.52deg, #f9fafb 8.89%, #d2d6db 100.48%);\n}\n\n/* Custom z-index */\n.z-sticky {\n  z-index: 1020;\n}\n.z-fixed {\n  z-index: 1030;\n}\n.z-dropdown {\n  z-index: 1000;\n}\n.z-modal {\n  z-index: 1055;\n}\n.z-toast {\n  z-index: 1090;\n}\n\n/* Custom box shadow */\n.shadow-custom {\n  box-shadow:\n    0px 1px 2px 0 rgb(0 0 0 / 0.06),\n    0px 1px 3px 0 rgb(0 0 0 / 0.1);\n}\n"
    },
    "/src/index.js": {
      "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n);\n"
    },
    "/src/Layout.jsx": {
      "code": "import clsx from 'clsx';\nimport { Outlet } from 'react-router-dom';\n\nimport Toast from 'src/components/ui/Toast';\n\nimport { useToastContext } from 'src/context/ToastContext';\n\nconst Layout = () => {\n  const { toast } = useToastContext();\n  return (\n    <>\n      <main className=\"mx-auto min-h-screen max-w-[1440px] p-4\">\n        {toast.show && <Toast type={toast.type} message={toast.message} />}\n        <div\n          className={clsx(\n            'min-h-[calc(100vh_-_32px)] rounded-md bg-white',\n            'shadow-sm md:shadow-md lg:shadow-lg',\n            'text-neutral-900',\n          )}>\n          <Outlet />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Layout;\n"
    },
    "/src/pages/Cart/CartPage.jsx": {
      "code": "import clsx from 'clsx';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useCartContext } from 'src/context/CartContext';\nimport CartItemsSection from './components/CartItemsSection';\nimport OrderSummarySection from './components/OrderSummarySection';\nimport EmptyCart from './components/EmptyCart';\n\nconst CartPage = () => {\n  const navigate = useNavigate();\n  const { isFetching, checkForStockChanged, cartItems } = useCartContext();\n\n  const onSubmitCart = async (e) => {\n    e.preventDefault();\n    const hasStockChanged = await checkForStockChanged(cartItems);\n\n    if (!hasStockChanged) {\n      navigate('/checkout');\n    }\n  };\n\n  return (\n    <div\n      className={clsx('px-4 py-12 md:py-16 lg:p-24', 'flex flex-col gap-16')}>\n      <h2 className=\"text-3xl font-semibold md:text-5xl\">Shopping Cart</h2>\n\n      {isFetching ? (\n        <div>Loading...</div>\n      ) : cartItems.length === 0 ? (\n        <EmptyCart />\n      ) : (\n        <form\n          onSubmit={onSubmitCart}\n          className={clsx(\n            'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n            'gap-x-4 gap-y-16 md:gap-x-8',\n          )}>\n          <CartItemsSection className=\"col-span-4 md:col-span-6 lg:col-span-8\" />\n          <OrderSummarySection className=\"col-span-4 md:col-span-6 lg:col-span-4\" />\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default CartPage;\n"
    },
    "/src/pages/Cart/components/CartItemsSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nimport CartControl from 'src/components/CartControl';\nimport Button from 'src/components/ui/Button';\nimport Link from 'src/components/ui/Link';\nimport ConfirmModal from 'src/components/ui/ConfirmModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { COLORS, SIZE } from 'src/constants';\nimport { formatPrice } from '../../../utils';\n\nconst CartItemsSection = ({ className }) => {\n  const { cartItems, incrementQuantity, decrementQuantity, removeFromCart } =\n    useCartContext();\n  const [removalConfirmation, setRemovalConfirmation] = useState({\n    show: false,\n    onAction: () => {},\n  });\n\n  const closeRemovalConfirmation = () => {\n    setRemovalConfirmation({\n      show: false,\n      onAction: () => {},\n    });\n  };\n\n  const openRemovalConfirmation = (item) => {\n    setRemovalConfirmation({\n      show: true,\n      onAction: () => {\n        removeFromCart(item);\n        closeRemovalConfirmation();\n      },\n    });\n  };\n\n  return (\n    <section aria-describedby=\"cart-items-section\" className={clsx(className)}>\n      <h2 className=\"sr-only\">Items in your shopping cart</h2>\n      <ul\n        className={clsx(\n          'divide-y divide-dashed divide-neutral-300',\n          className,\n        )}>\n        {cartItems.map((item) => {\n          const productUrl = `/products/${item.product.product_id}`;\n          const { unit, product, total_list_price, total_sale_price } = item;\n          const hasDiscount =\n            !!total_sale_price && total_sale_price !== total_list_price;\n\n          return (\n            <li\n              key={product.product_id + unit.size + unit.color}\n              className={clsx(\n                'flex flex-col gap-4 md:flex-row md:gap-8',\n                'py-[31.5px] first:pt-0 last:pb-0',\n              )}>\n              <div className=\"relative\">\n                <img\n                  src={unit.image_url}\n                  alt={`${SIZE[unit.size]?.long ?? unit.size} ${\n                    product.name\n                  } in ${unit.color}`}\n                  className=\"h-[200px] w-full rounded-lg object-cover md:min-w-[280px]\"\n                />\n                <Link\n                  to={productUrl}\n                  variant=\"unstyled\"\n                  className=\"absolute inset-0\"\n                />\n              </div>\n\n              <div className=\"flex flex-col gap-4\">\n                <Link\n                  to={productUrl}\n                  className=\"text-2xl font-medium\"\n                  variant=\"unstyled\">\n                  {product.name}\n                </Link>\n                <span className=\"font-medium text-neutral-600\">\n                  {COLORS[unit.color].label}\n                  {unit.size && (\n                    <>\n                      {' â€¢ '}\n                      {SIZE[unit.size]?.long ?? unit.size}\n                    </>\n                  )}\n                </span>\n                <span className=\"text-sm text-neutral-600\">\n                  {product.description}\n                </span>\n                <div className=\"flex items-center justify-between gap-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <CartControl\n                      quantity={item.quantity}\n                      increment={() => incrementQuantity(item)}\n                      decrement={() => decrementQuantity(item)}\n                      availableStock={unit.stock}\n                    />\n                    <Button\n                      label=\"Remove\"\n                      variant=\"gray-link\"\n                      onClick={() => openRemovalConfirmation(item)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-end gap-2\">\n                    <span className=\"text-right text-lg font-medium text-neutral-900\">\n                      $\n                      {hasDiscount\n                        ? formatPrice(total_sale_price)\n                        : formatPrice(total_list_price)}\n                    </span>\n                    {hasDiscount && (\n                      <span className=\"text-xs text-neutral-600 line-through\">\n                        ${formatPrice(total_list_price)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n      {removalConfirmation.show && (\n        <ConfirmModal\n          isOpen={removalConfirmation.show}\n          title=\"Confirm Item Removal\"\n          description=\"Are you sure you want to remove this item from your shopping cart?\"\n          primaryActionLabel=\"Yes\"\n          secondaryActionLabel=\"Cancel\"\n          onClose={closeRemovalConfirmation}\n          onAction={removalConfirmation.onAction}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default CartItemsSection;\n"
    },
    "/src/pages/Cart/components/CouponCode.jsx": {
      "code": "import { useState } from 'react';\nimport { RiCloseFill, RiCouponLine } from 'react-icons/ri';\nimport Badge from 'src/components/ui/Badge';\n\nimport Button from 'src/components/ui/Button';\nimport Tag from 'src/components/ui/Tag';\nimport TextInput from 'src/components/ui/TextInput';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nconst CouponCode = () => {\n  const { setDiscount, discount } = useCartContext();\n  const [showAddCoupon, setShowAddCoupon] = useState(false);\n  const [couponCode, setCouponCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isChecking, setIsChecking] = useState(false);\n\n  const checkCoupon = async () => {\n    if (!couponCode) {\n      setErrorMessage('Please enter a valid code.');\n      return;\n    }\n    const requestOptions = {\n      method: 'PUT',\n      body: JSON.stringify({\n        coupon_code: couponCode,\n      }),\n    };\n\n    setIsChecking(true);\n    const response = await fetch(\n      'https://www.greatfrontend.com/api/projects/challenges/e-commerce/coupons/apply',\n      requestOptions,\n    );\n    const result = await response.json();\n    if (result.error) {\n      setErrorMessage(\"Sorry, but this coupon doesn't exist.\");\n    } else {\n      setDiscount(result);\n      setCouponCode('');\n      setErrorMessage('');\n    }\n    setIsChecking(false);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {discount && (\n        <div className=\"flex items-center justify-between gap-2\">\n          <Badge label={discount.coupon_code} variant=\"brand\" size=\"lg\" />\n          <span className=\"text-right text-lg font-semibold text-neutral-900\">\n            -\n            {discount.discount_amount\n              ? `$${discount.discount_amount.toFixed(2)}`\n              : `${discount.discount_percentage}%`}\n          </span>\n        </div>\n      )}\n      {showAddCoupon || discount ? (\n        <div className=\"flex flex-col items-start gap-2 py-1\">\n          <div className=\"flex w-full gap-2\">\n            <TextInput\n              placeholder=\"Enter coupon code\"\n              label=\"Coupon Code\"\n              value={couponCode}\n              errorMessage={errorMessage}\n              onChange={(value) => setCouponCode(value)}\n            />\n            <Button\n              label=\"Apply\"\n              variant=\"secondary\"\n              className=\"mt-[26px] w-20 shrink-0\"\n              onClick={checkCoupon}\n              isDisabled={isChecking}\n            />\n          </div>\n          {discount && (\n            <Tag\n              label={discount.coupon_code}\n              actionIcon={RiCloseFill}\n              onAction={() => setDiscount(null)}\n            />\n          )}\n        </div>\n      ) : (\n        <div className=\"flex justify-end\">\n          <Button\n            onClick={() => setShowAddCoupon(true)}\n            label=\"Add coupon code\"\n            variant=\"link\"\n            size=\"lg\"\n            startIcon={RiCouponLine}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CouponCode;\n"
    },
    "/src/pages/Cart/components/EmptyCart.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowRightLine, RiShoppingCart2Line } from 'react-icons/ri';\nimport Button from 'src/components/ui/Button';\n\nconst EmptyCart = () => {\n  return (\n    <div\n      className={clsx(\n        'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n        'gap-x-4 gap-y-8 md:gap-x-8',\n      )}>\n      <div\n        className={clsx(\n          'col-span-4 md:col-span-6 lg:col-span-5',\n          'h-[372px] md:h-[400px] lg:h-full',\n          'flex flex-col items-center justify-center gap-5',\n        )}>\n        <div\n          className={clsx(\n            'shadow-custom size-12 rounded-full bg-white',\n            'flex items-center justify-center',\n          )}>\n          <RiShoppingCart2Line className=\"size-6 text-indigo-700\" />\n        </div>\n        <div\n          className={clsx('flex flex-col items-center gap-2', 'text-center')}>\n          <span className=\"text-xl font-medium\">Your cart is empty</span>\n          <span>Let's go explore some products</span>\n        </div>\n        <Button\n          size=\"xl\"\n          label=\"Explore products\"\n          endIcon={RiArrowRightLine}\n          href=\"/products\"\n        />\n      </div>\n      <img\n        src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/empty-cart.jpg\"\n        alt=\"Empty cart\"\n        className={clsx(\n          'w-full object-cover',\n          'h-[180px] md:h-80 lg:h-full',\n          'col-span-4 md:col-span-6 lg:col-span-7',\n        )}\n      />\n    </div>\n  );\n};\n\nexport default EmptyCart;\n"
    },
    "/src/pages/Cart/components/OrderSummarySection.jsx": {
      "code": "import { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useMediaQuery } from 'usehooks-ts';\n\nimport Button from 'src/components/ui/Button';\nimport CouponCode from './CouponCode';\nimport StockChangedModal from './StockChangedModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { getFinalAmount, getSubtotal } from '../../../utils';\n\nconst OrderSummarySection = ({ className }) => {\n  const isMobileAndBelow = useMediaQuery('(max-width: 767px)');\n  const { cartItems, discount, checkingStock } = useCartContext();\n\n  const subtotal = useMemo(() => getSubtotal(cartItems), [cartItems]);\n  const finalAmount = useMemo(\n    () => getFinalAmount(subtotal, discount),\n    [subtotal, discount],\n  );\n\n  return (\n    <section\n      aria-describedby=\"cart-summary\"\n      className={clsx(\n        'flex flex-col gap-8',\n        'h-fit w-full',\n        'bg-white',\n        'rounded-lg p-[15px] md:p-[31px]',\n        'border border-neutral-200',\n        className,\n      )}>\n      <h2 className=\"text-2xl font-semibold text-neutral-900\">Order Summary</h2>\n\n      <div\n        className={clsx(\n          'flex flex-col',\n          'divide-y divide-dashed divide-neutral-300',\n        )}>\n        <dl className={clsx('flex flex-col gap-4', 'pb-[31.5px]')}>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className=\"text-neutral-600\">Subtotal</span>\n            <span className=\"text-lg font-semibold\">${subtotal}</span>\n          </div>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className=\"text-neutral-600\">Shipping</span>\n            <span className=\"text-lg font-semibold\">FREE</span>\n          </div>\n\n          <CouponCode />\n        </dl>\n\n        <div className={clsx('flex flex-col gap-8', 'pt-[31.5px]')}>\n          <div className=\"flex justify-between gap-4\">\n            <span className=\"text-2xl font-medium\">Total</span>\n            <span className=\"text-4xl font-semibold\">${finalAmount}</span>\n          </div>\n          <Button\n            type=\"submit\"\n            label=\"Checkout\"\n            isDisabled={checkingStock}\n            size={isMobileAndBelow ? 'xl' : '2xl'}\n          />\n        </div>\n      </div>\n\n      <StockChangedModal />\n    </section>\n  );\n};\n\nexport default OrderSummarySection;\n"
    },
    "/src/pages/Cart/components/StockChangedModal.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowRightLine } from 'react-icons/ri';\n\nimport ConfirmModal from 'src/components/ui/ConfirmModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { COLORS, SIZE } from 'src/constants';\n\nconst StockChangedModal = () => {\n  const {\n    stockChangedItems,\n    cartItems,\n    showStockChangedModal,\n    acknowledgeStockChanged,\n    isCartEmptyAfterStockChanged,\n  } = useCartContext();\n\n  if (!showStockChangedModal) {\n    return null;\n  }\n\n  return (\n    <ConfirmModal\n      isOpen={showStockChangedModal}\n      className={clsx('p-8', 'w-[592px]')}\n      actionBtnSize=\"xl\"\n      primaryActionLabel={\n        isCartEmptyAfterStockChanged ? 'Go back to cart' : 'Ok'\n      }\n      onAction={() =>\n        acknowledgeStockChanged(\n          cartItems,\n          stockChangedItems,\n          isCartEmptyAfterStockChanged,\n        )\n      }>\n      <div className=\"flex flex-col gap-8\">\n        <div className={clsx('flex flex-col gap-2')}>\n          <h2 className=\"text-xl font-semibold\">Change of stock</h2>\n          <span className=\"text-sm text-neutral-600\">\n            While you were browsing, certain stocks have become unavailable:\n          </span>\n        </div>\n        <ul\n          className={clsx(\n            'divide-y divide-dashed divide-neutral-300',\n            'max-h-[500px] overflow-y-auto',\n          )}>\n          {stockChangedItems.map((item) => {\n            const { unit, product, stock, cartQuantity } = item;\n            return (\n              <li\n                key={unit.sku}\n                className={clsx(\n                  'flex gap-6',\n                  'py-[31.5px] first:pt-0 last:pb-0',\n                )}>\n                <img\n                  src={unit.image_url}\n                  className=\"size-20 rounded-lg object-cover\"\n                  alt={`${SIZE[unit.size]?.long ?? unit.size} ${\n                    product.name\n                  } in ${unit.color}`}\n                />\n                <div className={clsx('flex flex-col gap-2', 'font-medium')}>\n                  <span className=\"text-xl\">{product.name}</span>\n                  <span className=\"text-neutral-600\">\n                    {COLORS[unit.color].label}\n                    {unit.size && (\n                      <>\n                        {' â€¢ '}\n                        {SIZE[unit.size]?.long ?? unit.size}\n                      </>\n                    )}\n                  </span>\n                  <div\n                    className={clsx(\n                      'flex items-center gap-2',\n                      'text-neutral-600',\n                    )}>\n                    <span>Quantity: {cartQuantity}</span>\n                    <RiArrowRightLine className=\"size-3\" />\n                    <span>{stock}</span>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        {isCartEmptyAfterStockChanged && (\n          <span className=\"text-sm\">\n            Since there are no more items in your order, you will be brought\n            back to cart.\n          </span>\n        )}\n      </div>\n    </ConfirmModal>\n  );\n};\n\nexport default StockChangedModal;\n"
    },
    "/src/pages/Cart/index.js": {
      "code": "import CartPage from './CartPage';\n\nexport default CartPage;\n"
    },
    "/src/pages/Checkout/CheckoutPage.jsx": {
      "code": "import { useState } from 'react';\nimport clsx from 'clsx';\nimport { useNavigate } from 'react-router-dom';\nimport { RiArrowLeftSLine } from 'react-icons/ri';\n\nimport Button from 'src/components/ui/Button';\nimport CheckoutFormSection from './components/CheckoutFormSection';\nimport CheckoutOrderSummary from './components/CheckoutOrderSummary';\nimport StockChangedModal from '../Cart/components/StockChangedModal';\n\nimport { useToast } from 'src/context/ToastContext';\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { FIELD_NAME } from 'src/constants';\n\nconst CheckoutPage = () => {\n  const navigate = useNavigate();\n  const { checkForStockChanged, cartItems } = useCartContext();\n  const toast = useToast();\n\n  const [formData, setFormData] = useState({\n    email: { value: '', error: '', required: true },\n    country: { value: 'United States', error: '', required: true },\n    firstName: { value: '', error: '', required: true },\n    lastName: { value: '', error: '', required: true },\n    address1: { value: '', error: '', required: true },\n    address2: { value: '', error: '', required: false },\n    city: { value: '', error: '', required: true },\n    state: { value: '', error: '', required: true },\n    zip: { value: '', error: '', required: true },\n    deliveryMethod: { value: 'standard', error: '', required: true },\n    cardNumber: { value: '', error: '', required: true },\n    nameOnCard: { value: '', error: '', required: true },\n    cardExpiry: { value: '', error: '', required: true },\n    cardCvv: { value: '', error: '', required: true },\n  });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const hasStockedChanged = await checkForStockChanged(cartItems);\n    if (hasStockedChanged) {\n      return;\n    }\n    const newFormData = { ...formData };\n    let hasErrors = false;\n\n    // Check for empty fields\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key].value && formData[key].required) {\n        newFormData[key].error = `${FIELD_NAME[key]} is required`;\n        hasErrors = true;\n      }\n    });\n    if (hasErrors) {\n      toast.error(\n        'We faced a problem processing your checkout. Please try again or contact us.',\n      );\n    } else {\n      navigate('/');\n    }\n  };\n\n  return (\n    <div\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'flex flex-col justify-start gap-8',\n      )}>\n      <Button\n        label=\"Back to Shopping Cart\"\n        href=\"/cart\"\n        variant=\"link\"\n        startIcon={RiArrowLeftSLine}\n        className=\"w-fit\"\n      />\n\n      <h2 className=\"text-2xl font-semibold md:text-3xl lg:text-4xl\">\n        Checkout\n      </h2>\n\n      <form\n        onSubmit={onSubmit}\n        className={clsx(\n          'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n          'gap-x-4 gap-y-8 md:gap-x-8',\n        )}>\n        <CheckoutFormSection\n          className=\"col-span-4 md:col-span-6 lg:col-span-6\"\n          formData={formData}\n          setFormData={setFormData}\n        />\n        <CheckoutOrderSummary className=\"col-span-4 md:col-span-6 lg:col-span-6\" />\n      </form>\n      <StockChangedModal />\n    </div>\n  );\n};\n\nexport default CheckoutPage;\n"
    },
    "/src/pages/Checkout/components/CheckoutFormContentSection.jsx": {
      "code": "import clsx from 'clsx';\n\nconst CheckoutFormContentSection = ({ className, title, children }) => {\n  return (\n    <div className={clsx('flex flex-col gap-6', className)}>\n      <h3 className=\"text-lg font-medium text-neutral-600\">{title}</h3>\n      {children}\n    </div>\n  );\n};\n\nexport default CheckoutFormContentSection;\n"
    },
    "/src/pages/Checkout/components/CheckoutFormSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowDownSLine } from 'react-icons/ri';\n\nimport TextInput from 'src/components/ui/TextInput';\nimport CheckoutFormContentSection from './CheckoutFormContentSection';\nimport DeliveryMethodCard from './DeliveryMethodCard';\nimport { MasterCard } from './PaymentCard';\n\nimport { FIELD_NAME } from 'src/constants';\n\nconst CheckoutFormSection = ({ className, formData, setFormData }) => {\n  const {\n    email,\n    country,\n    firstName,\n    lastName,\n    address1,\n    address2,\n    city,\n    state,\n    zip,\n    deliveryMethod,\n    cardNumber,\n    nameOnCard,\n    cardExpiry,\n    cardCvv,\n  } = formData;\n\n  const onChange = (value, e) => {\n    const { name, required } = e.target;\n\n    if (['cardNumber', 'zip', 'cardCvv'].includes(name) && isNaN(value)) {\n      return;\n    }\n    let errorMessage = '';\n    if (name === 'email' && !e.target.validity.valid) {\n      errorMessage = 'Please enter a valid email address.';\n    }\n\n    if (name === 'cardExpiry') {\n      const expiryDatePattern = /^(0[1-9]|1[0-2])\\/(\\d{2})$/;\n      const match = value.match(expiryDatePattern);\n      if (!match) {\n        errorMessage = 'Invalid expiry date format';\n      } else {\n        const month = parseInt(match[1], 10);\n        const year = parseInt(match[2], 10);\n\n        // check if the month is correct format\n        if (month < 1 || month > 12) {\n          errorMessage = 'Invalid expiry date format';\n        }\n\n        const currentYear = new Date().getFullYear() % 100;\n        const currentMonth = new Date().getMonth() + 1;\n\n        // check if th expiry date is in future\n        if (\n          year < currentYear ||\n          (year === currentYear && month < currentMonth)\n        ) {\n          errorMessage = 'Invalid expiry date format';\n        }\n      }\n    }\n\n    if (required && !value) {\n      errorMessage = `${FIELD_NAME[name]} is required`;\n    }\n\n    setFormData((prevState) => ({\n      ...prevState,\n      [name]: {\n        value,\n        error: errorMessage,\n      },\n    }));\n  };\n\n  const onSelectDeliveryMethod = (value) => {\n    setFormData((prevState) => ({\n      ...prevState,\n      deliveryMethod: { value },\n    }));\n  };\n\n  return (\n    <section\n      aria-describedby=\"checkout-form\"\n      className={clsx('divide-y divide-neutral-300', className)}>\n      <CheckoutFormContentSection title=\"Contact Information\" className=\"pb-10\">\n        <TextInput\n          placeholder=\"user@example\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={email.value}\n          errorMessage={email.error}\n          onChange={onChange}\n          required={email.required}\n        />\n      </CheckoutFormContentSection>\n\n      <CheckoutFormContentSection\n        title=\"Shipping Information\"\n        className=\"py-10\">\n        <TextInput\n          value={country.value}\n          label=\"Country / Region\"\n          name=\"country\"\n          onChange={onChange}\n          endIcon={RiArrowDownSLine}\n          isDisabled={true}\n          required={country.required}\n        />\n        <div className=\"flex flex-col gap-6 md:flex-row md:gap-8\">\n          <TextInput\n            placeholder=\"john\"\n            label=\"First name\"\n            name=\"firstName\"\n            onChange={onChange}\n            value={firstName.value}\n            required={firstName.required}\n            errorMessage={firstName.error}\n          />\n          <TextInput\n            placeholder=\"Appleseed\"\n            label=\"Last name\"\n            name=\"lastName\"\n            value={lastName.value}\n            errorMessage={lastName.error}\n            onChange={onChange}\n            required={lastName.required}\n          />\n        </div>\n\n        <div className=\"flex flex-col gap-4\">\n          <TextInput\n            placeholder=\"Street address\"\n            label=\"Address\"\n            name=\"address1\"\n            onChange={onChange}\n            value={address1.value}\n            errorMessage={address1.error}\n            required={address1.required}\n          />\n          <TextInput\n            placeholder=\"Apartment, suite, etc (optional)\"\n            label=\"optional address\"\n            name=\"address2\"\n            onChange={onChange}\n            value={address2.value}\n            required={address2.required}\n            isLabelHidden\n          />\n        </div>\n        <div className=\"flex flex-col gap-6 md:flex-row md:gap-8\">\n          <TextInput\n            placeholder=\"City\"\n            label=\"City\"\n            name=\"city\"\n            onChange={onChange}\n            value={city.value}\n            errorMessage={city.error}\n            required={city.required}\n          />\n          <TextInput\n            endIcon={RiArrowDownSLine}\n            placeholder=\"State\"\n            label=\"State\"\n            name=\"state\"\n            onChange={onChange}\n            value={state.value}\n            errorMessage={state.error}\n            required\n          />\n          <TextInput\n            placeholder=\"12345\"\n            label=\"Zip\"\n            name=\"zip\"\n            onChange={onChange}\n            value={zip.value}\n            errorMessage={zip.error}\n            maxLength={9}\n            required={zip.required}\n          />\n        </div>\n      </CheckoutFormContentSection>\n\n      <CheckoutFormContentSection title=\"Delivery Method\" className=\"py-10\">\n        <div className=\"flex flex-col gap-4 md:flex-row\" role=\"radiogroup\">\n          <DeliveryMethodCard\n            method=\"standard\"\n            isSelected={deliveryMethod.value === 'standard'}\n            onSelect={onSelectDeliveryMethod}\n          />\n          <DeliveryMethodCard\n            method=\"express\"\n            isSelected={deliveryMethod.value === 'express'}\n            onSelect={onSelectDeliveryMethod}\n          />\n        </div>\n      </CheckoutFormContentSection>\n\n      <CheckoutFormContentSection title=\"Payment Method\" className=\"pt-10\">\n        <TextInput\n          placeholder=\"1234 1234 1234 1234\"\n          label=\"Card number\"\n          name=\"cardNumber\"\n          onChange={onChange}\n          value={cardNumber.value}\n          errorMessage={cardNumber.error}\n          maxLength={12}\n          startIcon={MasterCard}\n          startIconClassName=\"!h-6 w-[34px]\"\n          className=\"!py-[11px] !pl-14\"\n          required={cardNumber.required}\n        />\n        <TextInput\n          placeholder=\"Full name on card\"\n          label=\"Name on card\"\n          name=\"nameOnCard\"\n          onChange={onChange}\n          value={nameOnCard.value}\n          errorMessage={nameOnCard.error}\n          required={nameOnCard.required}\n        />\n\n        <div className=\"flex gap-8\">\n          <TextInput\n            placeholder=\"MM/YY\"\n            label=\"Expiry\"\n            name=\"cardExpiry\"\n            onChange={onChange}\n            value={cardExpiry.value}\n            errorMessage={cardExpiry.error}\n            maxLength={5}\n            required={cardExpiry.required}\n          />\n          <TextInput\n            placeholder=\"123\"\n            label=\"CVV\"\n            name=\"cardCvv\"\n            onChange={onChange}\n            value={cardCvv.value}\n            errorMessage={cardCvv.error}\n            maxLength={3}\n            required={cardCvv.required}\n          />\n        </div>\n      </CheckoutFormContentSection>\n    </section>\n  );\n};\n\nexport default CheckoutFormSection;\n"
    },
    "/src/pages/Checkout/components/CheckoutOrderSummary.jsx": {
      "code": "import clsx from 'clsx';\nimport { useMemo } from 'react';\nimport { RiLockLine } from 'react-icons/ri';\n\nimport Button from 'src/components/ui/Button';\nimport OrderProductCard from 'src/components/OrderProductCard';\nimport OrderAmountSummary from 'src/components/OrderAmountSummary';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { getFinalAmount, getSubtotal } from 'src/utils';\n\nconst CheckoutOrderSummary = ({ className }) => {\n  const { cartItems, discount, checkingStock } = useCartContext();\n\n  const subtotal = useMemo(() => getSubtotal(cartItems), [cartItems]);\n  const finalAmount = useMemo(\n    () => getFinalAmount(subtotal, discount),\n    [subtotal, discount],\n  );\n\n  return (\n    <section\n      aria-describedby=\"checkout-form\"\n      className={clsx(\n        'rounded-lg',\n        'border border-neutral-200',\n        'p-[15px] md:p-[31px]',\n        'flex flex-col gap-8',\n        className,\n      )}>\n      <h3 className=\"text-xl font-semibold\">Order Summary</h3>\n      <div\n        className={clsx('divide-y divide-neutral-300', 'flex flex-1 flex-col')}>\n        <ul\n          className={clsx('divide-y divide-dashed divide-neutral-300', 'pb-8')}>\n          {cartItems.map((item) => (\n            <li\n              key={item.unit.sku}\n              className={clsx('py-8 first:pt-0 last:pb-0')}>\n              <OrderProductCard data={item} />\n            </li>\n          ))}\n        </ul>\n\n        <OrderAmountSummary\n          subtotal={subtotal}\n          discountCode={discount.coupon_code}\n          discountAmount={discount.discount_amount}\n          discountPercentage={discount.discount_percentage}\n          className={clsx('py-8', 'lg:flex-1', 'h-full md:h-[247px] lg:h-full')}\n        />\n\n        <div className={clsx('flex justify-between gap-4', 'pt-8')}>\n          <span className=\"text-2xl font-medium\">Total</span>\n          <span className=\"text-4xl font-semibold\">${finalAmount}</span>\n        </div>\n      </div>\n\n      <Button\n        type=\"submit\"\n        label=\"Confirm order\"\n        size=\"xl\"\n        isDisabled={checkingStock}\n        startIcon={RiLockLine}\n      />\n    </section>\n  );\n};\n\nexport default CheckoutOrderSummary;\n"
    },
    "/src/pages/Checkout/components/DeliveryMethodCard.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback } from 'react';\nimport { RiCheckboxCircleFill } from 'react-icons/ri';\n\nconst DELIVERY_METHOD = {\n  standard: {\n    title: 'Standard',\n    days: '4-10',\n    price: null,\n  },\n  express: {\n    title: 'Express',\n    days: '2-5',\n    price: '15.00',\n  },\n};\n\nconst DeliveryMethodCard = ({ method, isSelected, onSelect }) => {\n  const { title, days, price } = DELIVERY_METHOD[method];\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        onSelect(method);\n      }\n    },\n    [method, onSelect],\n  );\n\n  return (\n    <div\n      aria-label={title}\n      tabIndex={0}\n      role=\"radio\"\n      aria-checked={isSelected}\n      onKeyDown={handleKeyDown}\n      onClick={() => onSelect(method)}\n      className={clsx(\n        'flex grow flex-col gap-2',\n        'min-h-[120px]',\n        'bg-white hover:bg-neutral-50',\n        'rounded-lg p-[15px]',\n        'flex-1',\n        isSelected\n          ? 'border border-indigo-600'\n          : 'border border-neutral-200 hover:border-[#e6e6e6]',\n        isSelected && 'outline outline-1 -outline-offset-2 outline-indigo-600',\n        'focus:outline-none',\n        'focus:ring-4 focus:ring-indigo-600/[.12] focus:ring-offset-0',\n        'cursor-pointer',\n      )}>\n      <div className=\"flex grow gap-2 self-stretch\">\n        <div className=\"flex grow flex-col\">\n          <span className=\"font-medium\">{title}</span>\n          <span className=\"text-sm text-neutral-600\">{days} business days</span>\n        </div>\n\n        {isSelected && (\n          <RiCheckboxCircleFill\n            className=\"size-6 text-indigo-500\"\n            aria-hidden\n          />\n        )}\n      </div>\n      <span className=\"font-medium\">{price ? `$${price}` : 'FREE'}</span>\n    </div>\n  );\n};\n\nexport default DeliveryMethodCard;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/Amex.jsx": {
      "code": "const Amex = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"58\" height=\"40\" rx=\"6\" fill=\"#1F72CD\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M10.1593 14.1665L4.85742 26.2444H11.2045L11.9913 24.3187H13.7899L14.5767 26.2444H21.5631V24.7746L22.1856 26.2444H25.7995L26.422 24.7436V26.2444H40.9517L42.7184 24.3687L44.3727 26.2444L51.8355 26.2599L46.5169 20.2392L51.8355 14.1665H44.4885L42.7686 16.0076L41.1664 14.1665H25.3601L24.0028 17.2839L22.6136 14.1665H16.2798V15.5863L15.5752 14.1665H10.1593ZM11.388 15.8813H14.4818L17.9985 24.0714V15.8813H21.3877L24.104 21.7536L26.6073 15.8813H29.9796V24.548H27.9276L27.9109 17.7569L24.9193 24.548H23.0838L20.0755 17.7569V24.548H15.8542L15.0539 22.6051H10.7303L9.93165 24.5463H7.66992L11.388 15.8813ZM40.1991 15.8813H31.8555V24.5429H40.0699L42.7175 21.6723L45.2695 24.5429H47.9371L44.0597 20.2372L47.9371 15.8813H45.3852L42.751 18.719L40.1991 15.8813ZM12.8932 17.3481L11.4688 20.8094H14.316L12.8932 17.3481ZM33.916 19.2579V17.6758V17.6743H39.1222L41.3939 20.2045L39.0215 22.7485H33.916V21.0213H38.4678V19.2579H33.916Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport default Amex;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/Card.jsx": {
      "code": "const Card = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" fill=\"white\" />\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" stroke=\"#E5E5E5\" />\n      <path\n        d=\"M20.0049 11H38.0049C38.5572 11 39.0049 11.4477 39.0049 12V28C39.0049 28.5523 38.5572 29 38.0049 29H20.0049C19.4526 29 19.0049 28.5523 19.0049 28V12C19.0049 11.4477 19.4526 11 20.0049 11ZM37.0049 19H21.0049V27H37.0049V19ZM37.0049 17V13H21.0049V17H37.0049ZM31.0049 23H35.0049V25H31.0049V23Z\"\n        fill=\"#6366F1\"\n      />\n    </svg>\n  );\n};\n\nexport default Card;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/index.js": {
      "code": "import Amex from './Amex';\nimport MasterCard from './MasterCard';\nimport Visa from './Visa';\nimport Card from './Card';\n\nexport { Amex, MasterCard, Visa, Card };\n"
    },
    "/src/pages/Checkout/components/PaymentCard/MasterCard.jsx": {
      "code": "const MasterCard = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" fill=\"white\" />\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" stroke=\"#E5E5E5\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M28.6312 28.0494C26.6579 29.7126 24.0982 30.7166 21.3011 30.7166C15.0597 30.7166 10 25.7171 10 19.55C10 13.3828 15.0597 8.3833 21.3011 8.3833C24.0982 8.3833 26.6579 9.38733 28.6312 11.0505C30.6046 9.38733 33.1643 8.3833 35.9613 8.3833C42.2028 8.3833 47.2625 13.3828 47.2625 19.55C47.2625 25.7171 42.2028 30.7166 35.9613 30.7166C33.1643 30.7166 30.6046 29.7126 28.6312 28.0494Z\"\n        fill=\"#ED0006\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M28.6313 28.0494C31.0615 26.0012 32.6024 22.9534 32.6024 19.55C32.6024 16.1465 31.0615 13.0987 28.6313 11.0505C30.6047 9.38733 33.1644 8.3833 35.9614 8.3833C42.2029 8.3833 47.2626 13.3828 47.2626 19.55C47.2626 25.7171 42.2029 30.7166 35.9614 30.7166C33.1644 30.7166 30.6047 29.7126 28.6313 28.0494Z\"\n        fill=\"#F9A000\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M28.6311 28.0495C31.0613 26.0013 32.6023 22.9534 32.6023 19.5499C32.6023 16.1466 31.0614 13.0988 28.6313 11.0506C26.2011 13.0988 24.6602 16.1466 24.6602 19.5501C24.6602 22.9535 26.2011 26.0013 28.6311 28.0495Z\"\n        fill=\"#FF5E00\"\n      />\n    </svg>\n  );\n};\n\nexport default MasterCard;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/Visa.jsx": {
      "code": "const Visa = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" fill=\"white\" />\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" stroke=\"#E5E5E5\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M17.9171 26.4304H14.4842L11.9099 16.3206C11.7877 15.8556 11.5283 15.4444 11.1467 15.2507C10.1943 14.7637 9.14486 14.3762 8 14.1807V13.7915H13.5301C14.2934 13.7915 14.8658 14.3762 14.9612 15.0552L16.2969 22.3477L19.7281 13.7915H23.0656L17.9171 26.4304ZM24.9745 26.4304H21.7324L24.4021 13.7915H27.6442L24.9745 26.4304ZM31.8372 17.2929C31.9326 16.6121 32.505 16.2229 33.1729 16.2229C34.2223 16.1252 35.3655 16.3206 36.3196 16.8059L36.892 14.0847C35.9379 13.6955 34.8885 13.5 33.9361 13.5C30.7894 13.5 28.4997 15.2507 28.4997 17.6804C28.4997 19.5288 30.1216 20.4993 31.2665 21.084C32.505 21.667 32.9821 22.0563 32.8867 22.6393C32.8867 23.5137 31.9326 23.903 30.9802 23.903C29.8354 23.903 28.6905 23.6115 27.6427 23.1245L27.0703 25.8474C28.2152 26.3327 29.4538 26.5281 30.5986 26.5281C34.1269 26.6242 36.3196 24.8752 36.3196 22.25C36.3196 18.9441 31.8372 18.7504 31.8372 17.2929ZM47.6667 26.4304L45.0924 13.7915H42.3273C41.7549 13.7915 41.1825 14.1807 40.9917 14.7637L36.2248 26.4304H39.5623L40.2284 24.5837H44.3292L44.7108 26.4304H47.6667ZM42.8052 17.1953L43.7576 21.9587H41.0879L42.8052 17.1953Z\"\n        fill=\"#172B85\"\n      />\n    </svg>\n  );\n};\n\nexport default Visa;\n"
    },
    "/src/pages/Checkout/index.js": {
      "code": "import CheckoutPage from './CheckoutPage';\n\nexport default CheckoutPage;\n"
    },
    "/src/pages/OrderSuccess/index.js": {
      "code": "import OrderSuccessPage from './OrderSuccessPage';\n\nexport default OrderSuccessPage;\n"
    },
    "/src/pages/OrderSuccess/OrderSuccessPage.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback, useEffect, useState } from 'react';\nimport { RiArrowRightLine, RiFileCopy2Line } from 'react-icons/ri';\n\nimport OrderAmountSummary from 'src/components/OrderAmountSummary';\nimport OrderProductCard from 'src/components/OrderProductCard';\n\nimport Button from 'src/components/ui/Button';\nimport { Visa } from '../Checkout/components/PaymentCard';\nimport { formatInternationalPhoneNumber } from 'src/utils';\n\nconst OrderSuccessPage = () => {\n  const [orderData, setOrderData] = useState(null);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const getOrder = useCallback(async () => {\n    setIsFetching(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/order-sample`,\n    );\n    const result = await data.json();\n    if (!result.error) {\n      setOrderData(result);\n    }\n    setIsFetching(false);\n  }, []);\n\n  useEffect(() => {\n    getOrder();\n  }, [getOrder]);\n\n  return (\n    <div\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n        'gap-x-4 gap-y-12 md:gap-x-8',\n      )}>\n      {isFetching ? (\n        <div>Loading....</div>\n      ) : (\n        <>\n          <img\n            src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/order-success-desktop.jpg\"\n            alt=\"Order success banner\"\n            className={clsx('hidden lg:block', 'col-span-6', 'h-full w-full')}\n          />\n          <img\n            src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/order-success-tablet.jpg\"\n            alt=\"Order success banner\"\n            className={clsx(\n              'hidden md:block lg:hidden',\n              'col-span-6',\n              'h-full w-full',\n            )}\n          />\n          <img\n            src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/order-success-mobile.jpg\"\n            alt=\"Order success banner\"\n            className={clsx(\n              'block md:hidden',\n              'col-span-4 md:col-span-6',\n              'h-[196px] w-full',\n            )}\n          />\n          <div\n            className={clsx(\n              'col-span-4 md:col-span-6',\n              'flex flex-col gap-12',\n            )}>\n            <div className=\"flex flex-col justify-center gap-4\">\n              <h2 className=\"text-3xl font-semibold md:text-4xl\">\n                Your order is confirmed.\n              </h2>\n              <span className=\"text-neutral-600\">\n                Your order is now in the queue and being processed. We'll let\n                you know when we ship it out!\n              </span>\n            </div>\n\n            <div className=\"flex flex-col items-start justify-center gap-1\">\n              <span className=\"text-neutral-600\">Order Number</span>\n              <Button\n                label={orderData.order_id}\n                variant=\"link\"\n                size=\"lg\"\n                endIcon={RiFileCopy2Line}\n                iconClassName=\"!p-0\"\n                onClick={() => {\n                  try {\n                    navigator.clipboard.writeText(orderData.order_id);\n                  } catch (error) {\n                    console.error('Copy failed', error);\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"flex flex-col gap-8\">\n              <div\n                className={clsx('divide-y divide-dashed divide-neutral-300')}>\n                <ul\n                  className={clsx(\n                    'divide-y divide-dashed divide-neutral-300',\n                    'pb-[31.5px]',\n                  )}>\n                  {orderData.items.map((item) => (\n                    <li\n                      key={item.unit.sku}\n                      className={clsx('py-[31.5px] first:pt-0 last:pb-0')}>\n                      <OrderProductCard data={item} type=\"order\" />\n                    </li>\n                  ))}\n                </ul>\n                <OrderAmountSummary\n                  subtotal={orderData.summary.subtotal}\n                  discountCode={orderData.summary.discount_code}\n                  discountAmount={orderData.summary.discount}\n                  className={clsx('gap-6 py-[31.5px]')}\n                  type=\"order\"\n                />\n\n                <div\n                  className={clsx('flex justify-between gap-4', 'pt-[31.5px]')}>\n                  <span>Total</span>\n                  <span className=\"text-2xl font-semibold\">\n                    ${orderData.summary.total.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex flex-col gap-8 md:flex-row\">\n                <div\n                  className={clsx(\n                    'flex flex-col gap-4',\n                    'flex-1',\n                    'md:h-[164px]',\n                    'text-neutral-600',\n                  )}>\n                  <span>Shipping address</span>\n                  <div className={clsx('flex flex-col', 'text-sm')}>\n                    <span>\n                      {formatInternationalPhoneNumber(\n                        orderData.shipping_details.phone,\n                      )}\n                    </span>\n                    <span>{orderData.shipping_details.address.line1}</span>\n                    {orderData.shipping_details.address.line2 && (\n                      <span>{orderData.shipping_details.address.line2}</span>\n                    )}\n                    <span>\n                      {orderData.shipping_details.address.city},{' '}\n                      {orderData.shipping_details.address.state}{' '}\n                      {orderData.shipping_details.address.zip}\n                    </span>\n                    <span>United States</span>\n                  </div>\n                </div>\n                <div className=\"flex flex-1 flex-col gap-4\">\n                  <span className=\"text-neutral-600\">Payment</span>\n                  <div className=\"flex items-center gap-4\">\n                    <Visa className=\"h-12 w-[70px]\" />\n                    <div className=\"flex flex-col gap-0.5\">\n                      <span className=\"text-sm\">\n                        Ending with {orderData.payment_method.last_4}\n                      </span>\n                      <span className=\"text-sm text-neutral-600\">\n                        Expires {orderData.payment_method.exp_month} /{' '}\n                        {orderData.payment_method.exp_year.toString().slice(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Button\n              variant=\"secondary\"\n              size=\"lg\"\n              label=\"Continue Shopping\"\n              endIcon={RiArrowRightLine}\n              href=\"/products\"\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default OrderSuccessPage;\n"
    },
    "/src/utils.js": {
      "code": "export const getSubtotal = (items) => {\n  const totalAmount = items.reduce((acc, item) => {\n    const price = !!item.total_sale_price\n      ? item.total_sale_price\n      : item.total_list_price;\n    return acc + price;\n  }, 0);\n\n  return totalAmount.toFixed(2);\n};\n\nexport const getFinalAmount = (subtotal, discount) => {\n  if (discount) {\n    const discountAmount = discount.discount_amount\n      ? discount.discount_amount\n      : subtotal * (discount.discount_percentage / 100);\n\n    return (subtotal - discountAmount).toFixed(2);\n  }\n\n  return subtotal;\n};\n\n// Fake stock change data\nexport const getStockChangedData = (items) => {\n  const products = [\n    {\n      product: {\n        product_id: 'stepsoft-socks',\n        name: 'StepSoft Socks',\n      },\n      unit: {\n        sku: 'ss-orange-xs',\n        size: 'xs',\n        color: 'orange',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/stepsoft-socks/stepsoft-socks-1.jpg',\n      },\n      stock: 5,\n    },\n    {\n      product: {\n        product_id: 'elemental-sneakers',\n        name: 'Elemental Sneakers',\n      },\n      unit: {\n        sku: 'es-beige-6',\n        size: '6',\n        color: 'beige',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/elemental-sneakers/elemental-sneakers-3.jpg',\n      },\n      stock: 20,\n    },\n    {\n      product: {\n        product_id: 'azure-attitude-shades',\n        name: 'Azure Attitude Shades',\n      },\n      unit: {\n        sku: 'aas-blue',\n        size: null,\n        color: 'blue',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/azure-attitude-shades/azure-attitude-shades-1.jpg',\n      },\n      stock: 10,\n    },\n  ];\n\n  // To check if the cart is completely empty after stock changed\n  let isCartEmpty = true;\n  const filteredProducts = items.reduce((acc, item) => {\n    const product = products.find(\n      (product) =>\n        product.product.product_id === item.product.product_id &&\n        product.unit.sku === item.unit.sku &&\n        item.quantity > product.stock,\n    );\n    if (product) {\n      acc.push({\n        ...product,\n        cartQuantity: item.quantity,\n      });\n      if (isCartEmpty) {\n        isCartEmpty = product.stock === 0;\n      }\n    } else {\n      isCartEmpty = false;\n    }\n    return acc;\n  }, []);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve({ products: filteredProducts, isCartEmpty }), 250);\n  });\n};\n\nexport const mergeSampleAndStorageCartItems = (sampleCartItems) => {\n  // Retrieve cart from localStorage\n  const storedCartItems = JSON.parse(localStorage.getItem('cart')) || [];\n  const mergedMap = new Map();\n\n  // Add items from the sample cart items to the map\n  sampleCartItems.forEach((item) => {\n    mergedMap.set(item.unit.sku, item);\n  });\n\n  // Add items from the local storage to the map (overwrites duplicates from sampleCartItems)\n  storedCartItems.forEach((item) => {\n    mergedMap.set(item.unit.sku, item);\n  });\n\n  // Convert the map back to an array\n  return Array.from(mergedMap.values());\n};\n\nexport const formatPrice = (price) =>\n  Number.isInteger(price) ? price : price.toFixed(2);\n\nexport const formatInternationalPhoneNumber = (phoneNumber) => {\n  // Remove all non-digit characters\n  phoneNumber = phoneNumber.replace(/\\D/g, '');\n\n  // Check if the number has a country code\n  if (phoneNumber.length > 10) {\n    // Extract country code and the rest of the number\n    const countryCode = phoneNumber.slice(0, phoneNumber.length - 10);\n    const mainNumber = phoneNumber.slice(-10);\n\n    // Format the main number\n    const formattedMainNumber = mainNumber.replace(\n      /(\\d{3})(\\d{3})(\\d{4})/,\n      '($1) $2-$3',\n    );\n\n    return `+${countryCode} ${formattedMainNumber}`;\n  } else if (phoneNumber.length === 10) {\n    // Format the number\n    return phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3');\n  } else {\n    // If the number is not 10 digits or does not include a valid country code, return the original input\n    return phoneNumber;\n  }\n};\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/index.css",
      "/src/pages/OrderSuccess/OrderSuccessPage.jsx"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app",
    "externalResources": [
      "https://cdn.tailwindcss.com"
    ]
  }
}