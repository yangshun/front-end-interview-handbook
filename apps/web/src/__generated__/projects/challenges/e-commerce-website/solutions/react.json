{
  "files": {
    "/jsconfig.json": {
      "code": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  },\n  \"include\": [\"src\"]\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-challenges/e-commerce-website-solution\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"clsx\": \"^2.1.1\",\n    \"react-icons\": \"5.3.0\",\n    \"react-router-dom\": \"^6.23.1\",\n    \"usehooks-ts\": \"^3.1.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\" />\n    <title>StyleNest</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { Route, Routes } from 'react-router-dom';\n\nimport Layout from './Layout';\nimport CartPage from './pages/Cart';\nimport CheckoutPage from './pages/Checkout';\nimport OrderSuccessPage from './pages/OrderSuccess';\nimport StorefrontPage from './pages/Storefront';\nimport ProductListingPage from './pages/ProductListing';\nimport LatestArrivalsPage from './pages/LatestArrivals';\nimport ProductDetailPage from './pages/ProductDetail';\n\nimport CartContextProvider from './context/CartContext';\nimport ToastContextProvider from './context/ToastContext';\n\nfunction App() {\n  return (\n    <ToastContextProvider>\n      <CartContextProvider>\n        <Routes>\n          <Route path=\"/\" element={<Layout />}>\n            <Route path=\"/\" element={<StorefrontPage />} />\n            <Route path=\"/products\" element={<ProductListingPage />} />\n            <Route path=\"/latest\" element={<LatestArrivalsPage />} />\n            <Route\n              path=\"/products/:productId\"\n              element={<ProductDetailPage />}\n            />\n            <Route path=\"/cart\" element={<CartPage />} />\n            <Route path=\"/checkout\" element={<CheckoutPage />} />\n            <Route path=\"/order-success\" element={<OrderSuccessPage />} />\n          </Route>\n        </Routes>\n      </CartContextProvider>\n    </ToastContextProvider>\n  );\n}\n\nexport default App;\n"
    },
    "/src/components/CartButton/CartButton.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiShoppingBag3Line } from 'react-icons/ri';\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nconst CartButton = ({ disabled }) => {\n  const { cartItems } = useCartContext();\n  const count = cartItems.length;\n\n  return (\n    <RouterLink\n      to=\"/cart\"\n      aria-label=\"Cart button\"\n      className={clsx(\n        'relative rounded text-neutral-600',\n        'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n        {\n          'pointer-events-none text-neutral-400': disabled,\n        },\n      )}>\n      <RiShoppingBag3Line className=\"size-6\" aria-hidden=\"true\" />\n\n      {count > 0 && (\n        <div\n          className={clsx(\n            'absolute -right-1.5 -top-1.5 h-[18px] w-[18px] rounded-full text-center text-xs font-semibold',\n            'flex items-center justify-center',\n            {\n              'bg-indigo-700 text-white': !disabled,\n              'bg-neutral-100 text-neutral-400': disabled,\n            },\n          )}>\n          {count}\n        </div>\n      )}\n    </RouterLink>\n  );\n};\n\nexport default CartButton;\n"
    },
    "/src/components/CartButton/index.js": {
      "code": "import CartButton from './CartButton';\n\nexport default CartButton;\n"
    },
    "/src/components/CartControl/CartControl.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiAddFill, RiSubtractFill } from 'react-icons/ri';\n\nimport Tooltip from '../ui/Tooltip';\n\nconst CartControl = ({ quantity, decrement, increment, availableStock }) => {\n  const disabledDecrement = quantity === 1;\n  const disabledIncrement = quantity >= availableStock;\n\n  return (\n    <div\n      className={clsx(\n        'h-9 w-[125px]',\n        'flex items-center justify-center gap-3',\n        'px-[5px] py-0.5',\n        'rounded-md border border-neutral-200 bg-neutral-50',\n      )}\n      role=\"group\"\n      aria-label=\"Product Quantity control\">\n      <button\n        type=\"button\"\n        className={clsx(\n          'flex items-center justify-center rounded',\n          'text-neutral-600 disabled:text-neutral-400',\n          'cursor-pointer disabled:pointer-events-none',\n        )}\n        disabled={disabledDecrement}\n        onClick={decrement}\n        aria-label=\"Decrease quantity\">\n        <RiSubtractFill className=\"size-5 shrink-0 p-0.5\" />\n      </button>\n      <span\n        className=\"flex-1 text-center text-sm font-medium text-neutral-600\"\n        aria-live=\"polite\">\n        {quantity}\n      </span>\n      <Tooltip content=\"Insufficient stock\" show={disabledIncrement}>\n        <button\n          type=\"button\"\n          className={clsx(\n            'flex items-center justify-center rounded',\n            'text-neutral-600 disabled:text-neutral-400',\n            'cursor-pointer disabled:pointer-events-none',\n          )}\n          disabled={disabledIncrement}\n          onClick={increment}\n          aria-label=\"Increase quantity\">\n          <RiAddFill className=\"size-5 shrink-0 p-0.5\" />\n        </button>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default CartControl;\n"
    },
    "/src/components/CartControl/index.js": {
      "code": "import CartControl from './CartControl';\n\nexport default CartControl;\n"
    },
    "/src/components/CollectionCard/CollectionCard.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Link from 'src/components/ui/Link';\n\nconst variantClasses = {\n  primary: clsx('w-full lg:max-w-[594px] h-[580px]'),\n  secondary: clsx('w-full lg:max-w-[594px] h-[337px] md:h-[276px]'),\n};\n\nconst CollectionCard = ({\n  imageUrl,\n  name,\n  description,\n  id,\n  variant = 'primary',\n}) => {\n  const navigate = useNavigate();\n\n  const redirectUrl = `/products?collectionId=${id}`;\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        navigate(redirectUrl);\n      }\n    },\n    [navigate, redirectUrl],\n  );\n\n  return (\n    <div\n      className={clsx(\n        'relative',\n        'group',\n        'overflow-hidden rounded-lg',\n        'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n      )}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}>\n      <img\n        loading=\"lazy\"\n        src={imageUrl}\n        alt={`${name}'s banner`}\n        className={clsx('w-full object-cover', variantClasses[variant])}\n      />\n      <Link\n        tabIndex={-1}\n        to={redirectUrl}\n        variant=\"unstyled\"\n        className=\"bg-collection hover:bg-collection-hover absolute inset-0 transition-all duration-300\">\n        <div\n          className={clsx(\n            'absolute inset-x-4 bottom-4',\n            'flex flex-col',\n            'text-white',\n          )}>\n          <span className=\"text-sm\">{name}</span>\n          <span className=\"text-lg font-medium\">{description}</span>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default CollectionCard;\n"
    },
    "/src/components/CollectionCard/index.js": {
      "code": "import CollectionCard from './CollectionCard';\n\nexport default CollectionCard;\n"
    },
    "/src/components/Footer/Footer.jsx": {
      "code": "import clsx from 'clsx';\nimport {\n  RiFacebookBoxLine,\n  RiGithubLine,\n  RiInstagramLine,\n  RiTwitterXLine,\n  RiYoutubeLine,\n} from 'react-icons/ri';\n\nimport Link from '../ui/Link';\nimport NewsletterForm from './NewsletterForm';\nimport { CATEGORY_OPTIONS, COLLECTIONS_OPTIONS } from 'src/constants';\n\nconst footerSocials = [\n  {\n    icon: RiYoutubeLine,\n    url: 'https://youtube.com',\n    name: \"Link to Stylenest's youtube profile\",\n  },\n  {\n    icon: RiInstagramLine,\n    url: 'https://instagram.com',\n    name: \"Link to Stylenest's instagram profile\",\n  },\n  {\n    icon: RiFacebookBoxLine,\n    url: 'https://facebook.com',\n    name: \"Link to Stylenest's facebook profile\",\n  },\n  {\n    icon: RiGithubLine,\n    url: 'https://github.com',\n    name: \"Link to Stylenest's github profile\",\n  },\n  {\n    icon: RiTwitterXLine,\n    url: 'https://twitter.com',\n    name: \"Link to Stylenest's twitter profile\",\n  },\n];\n\nconst Footer = () => {\n  return (\n    <footer\n      className={clsx(\n        '',\n        'flex flex-col gap-12 md:gap-16',\n        'px-4 py-12 md:py-16 lg:p-24',\n      )}>\n      <div className=\"grid grid-cols-4 gap-x-4 md:grid-cols-6 md:gap-x-8 lg:grid-cols-12 lg:gap-y-[66px]\">\n        <div\n          className={clsx(\n            'flex flex-col gap-2',\n            'col-span-4 md:col-span-6 lg:col-span-8',\n          )}>\n          <div className=\"text-xl font-semibold text-neutral-900\">\n            Join our newsletter\n          </div>\n          <div className=\"text-neutral-600\">\n            Weâ€™ll send you a nice letter once per week. No spam.\n          </div>\n        </div>\n\n        <div className=\"col-span-4 mt-8 md:col-span-6 md:mt-5 lg:col-span-4 lg:mt-0\">\n          <NewsletterForm />\n        </div>\n\n        <div\n          className={clsx(\n            'flex flex-col gap-6 md:gap-8',\n            'col-span-4 mt-12 md:col-span-3 md:mt-16 lg:col-span-4 lg:mt-0',\n          )}>\n          <div>\n            <img\n              src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/logo.svg\"\n              alt=\"Stylenest's Logo\"\n              className=\"block h-8 w-auto\"\n            />\n          </div>\n          <div className=\"text-neutral-600\">\n            Craft stunning style journeys that weave more joy into every thread.\n          </div>\n        </div>\n\n        <div className=\"col-span-3 hidden md:block lg:hidden\" />\n\n        <div\n          className={clsx(\n            'flex flex-col gap-4',\n            'col-span-4 mt-8 md:col-span-3 md:mt-12 lg:col-start-7 lg:mt-0',\n          )}>\n          <div className=\"text-sm text-neutral-500\">SHOP CATEGORIES</div>\n          <div className=\"flex flex-col gap-3\">\n            {CATEGORY_OPTIONS.items.map((category) => (\n              <Link to={category.href} key={category.name} variant=\"gray\">\n                {category.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n\n        <div\n          className={clsx(\n            'flex flex-col gap-4',\n            'col-span-4 mt-8 md:col-span-3 md:mt-12 lg:mt-0',\n          )}>\n          <div className=\"text-sm text-neutral-500\">SHOP COLLECTIONS</div>\n          <div className=\"flex flex-col gap-3\">\n            {COLLECTIONS_OPTIONS.items.map((collection) => (\n              <Link to={collection.href} key={collection.name} variant=\"gray\">\n                {collection.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div\n        className={clsx(\n          'flex flex-col gap-8 md:flex-row md:items-center lg:justify-between',\n          'border-t border-neutral-200 pt-[31px]',\n        )}>\n        <div className=\"text-neutral-500\">\n          &copy; {new Date().getFullYear()} StyleNest, Inc. All rights reserved.\n        </div>\n        <div className=\"flex gap-6\">\n          {footerSocials.map(({ icon: Icon, url, name }) => (\n            <Link\n              key={name}\n              to={url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"!px-0 !text-neutral-400\">\n              <Icon className=\"size-6\" aria-hidden=\"true\" />\n            </Link>\n          ))}\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n"
    },
    "/src/components/Footer/index.js": {
      "code": "import Footer from './Footer';\n\nexport default Footer;\n"
    },
    "/src/components/Footer/NewsletterForm.jsx": {
      "code": "import { useState } from 'react';\n\nimport Button from 'src/components/ui/Button';\nimport TextInput from 'src/components/ui/TextInput';\n\nimport { useToast } from 'src/context/ToastContext';\n\nconst EMAIL_REGEX = /^[^@]+@[^@]+\\.[^@]+$/;\n\nconst NewsletterForm = () => {\n  const toast = useToast();\n\n  const [email, setEmail] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!email.match(EMAIL_REGEX)) {\n      setErrorMessage('Please enter a valid email address.');\n      return;\n    } else if (!email) {\n      setErrorMessage('Email address is required.');\n      return;\n    } else {\n      setErrorMessage('');\n    }\n\n    setSubmitting(true);\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email,\n      }), // Send the data in JSON format\n    };\n\n    // Make the request\n    const res = await fetch(\n      'https://www.greatfrontend.com/api/projects/challenges/newsletter',\n      requestOptions,\n    );\n    const result = await res.json();\n\n    if (result) {\n      setEmail('');\n      if (result.message) {\n        toast.success(result.message);\n      } else if (result.error) {\n        toast.error(result.error);\n      }\n    }\n    setSubmitting(false);\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n      className=\"flex w-full flex-col gap-4 md:flex-row\">\n      <TextInput\n        placeholder=\"Enter your email\"\n        errorMessage={errorMessage}\n        onChange={(value) => setEmail(value)}\n        value={email}\n        required\n      />\n      <Button label=\"Subscribe\" type=\"submit\" isDisabled={submitting} />\n    </form>\n  );\n};\n\nexport default NewsletterForm;\n"
    },
    "/src/components/IconWrapper/IconWrapper.jsx": {
      "code": "import clsx from 'clsx';\n\nconst IconWrapper = ({ icon: Icon }) => {\n  return (\n    <div\n      className={clsx(\n        'shadow-custom size-12 rounded-full bg-white',\n        'flex items-center justify-center',\n        'shrink-0',\n      )}>\n      <Icon className=\"size-6 text-indigo-700\" />\n    </div>\n  );\n};\n\nexport default IconWrapper;\n"
    },
    "/src/components/IconWrapper/index.js": {
      "code": "import IconWrapper from './IconWrapper';\n\nexport default IconWrapper;\n"
    },
    "/src/components/Navbar/index.js": {
      "code": "import Navbar from './Navbar';\n\nexport default Navbar;\n"
    },
    "/src/components/Navbar/MobileNavMenu.jsx": {
      "code": "import { useState } from 'react';\nimport clsx from 'clsx';\nimport { createPortal } from 'react-dom';\nimport { RiCloseLine, RiMenuLine } from 'react-icons/ri';\n\nimport Link from 'src/components/ui/Link';\n\nconst MobileNavMenu = ({ links }) => {\n  const [openMenu, setOpenMenu] = useState(false);\n\n  return (\n    <>\n      <button\n        onClick={() => setOpenMenu(!openMenu)}\n        aria-label=\"Open mobile menu\"\n        aria-expanded={openMenu ? 'true' : 'false'}\n        aria-controls=\"nav-slideout-menu\"\n        type=\"button\"\n        className={clsx(\n          'block rounded text-neutral-600 lg:hidden',\n          'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n        )}>\n        <RiMenuLine className=\"size-5\" aria-hidden=\"true\" />\n      </button>\n\n      {/* Mobile nav menu */}\n      {openMenu &&\n        createPortal(\n          <nav\n            id=\"nav-slideout-menu\"\n            className={clsx(\n              'z-fixed fixed inset-0 max-w-[400px] bg-white px-4 py-6 lg:hidden',\n              'flex flex-col gap-6',\n              'animate-slideout',\n            )}>\n            <div className=\"flex items-center justify-between\">\n              <img\n                src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/logo.svg\"\n                alt=\"StyleNest's logo\"\n              />\n              <button\n                onClick={() => setOpenMenu(false)}\n                aria-label=\"Close mobile menu\"\n                type=\"button\"\n                className={clsx(\n                  'rounded text-neutral-600',\n                  'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n                )}>\n                <RiCloseLine className=\"size-5\" />\n              </button>\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              {links.map((link) => (\n                <Link\n                  key={link.href}\n                  to={link.href}\n                  onClick={() => setOpenMenu(false)}\n                  className=\"px-3 py-2 text-sm\"\n                  variant=\"gray\"\n                  type=\"nav\">\n                  {link.name}\n                </Link>\n              ))}\n            </div>\n          </nav>,\n          document.body,\n        )}\n    </>\n  );\n};\n\nexport default MobileNavMenu;\n"
    },
    "/src/components/Navbar/Navbar.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Link from 'src/components/ui/Link';\nimport CartButton from 'src/components/CartButton';\nimport MobileNavMenu from 'src/components/Navbar/MobileNavMenu';\n\nconst links = [\n  {\n    name: 'Shop all',\n    href: '/products',\n  },\n  {\n    name: 'Latest arrivals',\n    href: '/latest',\n  },\n];\n\nconst Navbar = ({ className }) => {\n  return (\n    <div\n      className={clsx(\n        'z-sticky sticky top-0',\n        'mx-auto max-w-[1216px]',\n        'h-[68px] lg:h-14',\n        'px-4 py-3 md:px-8 xl:px-0',\n        'flex items-center justify-between gap-4 lg:gap-[103px]',\n        className,\n      )}>\n      <Link variant=\"unstyled\" to=\"/\">\n        <img\n          src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/logo.svg\"\n          alt=\"Stylenest's Logo\"\n        />\n      </Link>\n      <nav className={clsx('hidden flex-1 gap-8', 'lg:flex')}>\n        {links.map((link) => (\n          <Link key={link.href} to={link.href} variant=\"gray\" type=\"nav\" end>\n            {link.name}\n          </Link>\n        ))}\n      </nav>\n      <div className=\"flex items-center gap-4\">\n        <CartButton />\n        <MobileNavMenu links={links} />\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n"
    },
    "/src/components/OrderAmountSummary/index.js": {
      "code": "import OrderAmountSummary from './OrderAmountSummary';\n\nexport default OrderAmountSummary;\n"
    },
    "/src/components/OrderAmountSummary/OrderAmountSummary.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Badge from 'src/components/ui/Badge';\n\nconst OrderAmountSummary = ({\n  subtotal,\n  discountCode,\n  discountAmount,\n  discountPercentage,\n  className,\n  type = 'cart',\n}) => {\n  const isCartView = type === 'cart';\n\n  return (\n    <dl className={clsx('flex flex-col gap-4', className)}>\n      <div className=\"flex items-center justify-between gap-2\">\n        <span className=\"text-neutral-600\">Subtotal</span>\n        <span className=\"text-lg font-semibold\">${subtotal}</span>\n      </div>\n      <div className=\"flex items-center justify-between gap-2\">\n        <span className=\"text-neutral-600\">Shipping</span>\n        <span className=\"text-lg font-semibold\">FREE</span>\n      </div>\n      {discountCode && (\n        <div className=\"flex justify-between gap-2 md:items-center\">\n          <div\n            className={clsx(\n              'flex flex-col items-center md:flex-row',\n              isCartView ? 'gap-x-8 gap-y-2' : 'gap-4',\n            )}>\n            <span className=\"text-neutral-600\">Coupon discount</span>\n            <Badge label={discountCode} variant=\"brand\" size=\"lg\" />\n          </div>\n          <span className=\"text-lg font-semibold\">\n            -{discountAmount ? `$${discountAmount}` : `${discountPercentage}%`}\n          </span>\n        </div>\n      )}\n    </dl>\n  );\n};\n\nexport default OrderAmountSummary;\n"
    },
    "/src/components/OrderProductCard/index.js": {
      "code": "import OrderProductCard from './OrderProductCard';\n\nexport default OrderProductCard;\n"
    },
    "/src/components/OrderProductCard/OrderProductCard.jsx": {
      "code": "import clsx from 'clsx';\n\nimport { COLORS, SIZE } from 'src/constants';\nimport { formatPrice } from 'src/utils';\n\nconst OrderProductCard = ({ data, type = 'cart' }) => {\n  const { unit, quantity, product, total_list_price, total_sale_price } = data;\n  const hasDiscount =\n    !!total_sale_price && total_sale_price !== total_list_price;\n\n  const isCartView = type === 'cart';\n\n  return (\n    <div className={clsx('flex gap-6', isCartView && 'flex-col md:flex-row')}>\n      <div className=\"flex flex-1 gap-6\">\n        <img\n          src={unit.image_url}\n          className={clsx(\n            'shrink-0 rounded-lg object-cover',\n            isCartView ? 'size-14 md:size-20' : 'size-20',\n          )}\n          alt={`${SIZE[unit.size]?.long ?? unit.size} ${product.name} in ${\n            unit.color\n          }`}\n        />\n        <div className={clsx('flex flex-col gap-2', 'font-medium')}>\n          <span className={clsx(isCartView ? 'md:text-xl' : 'text-xl')}>\n            {product.name}\n          </span>\n          <span className=\"text-neutral-600\">\n            {COLORS[unit.color].label}\n            {unit.size && (\n              <>\n                {' â€¢ '}\n                {SIZE[unit.size]?.long ?? unit.size}\n              </>\n            )}\n          </span>\n          <span className=\"text-neutral-600\">Quantity: {quantity}</span>\n        </div>\n      </div>\n      <div className=\"flex flex-col items-end gap-2\">\n        <span className=\"text-lg font-semibold\">\n          $\n          {hasDiscount\n            ? formatPrice(total_sale_price)\n            : formatPrice(total_list_price)}\n        </span>\n        {hasDiscount && (\n          <span className=\"text-lg text-neutral-600  line-through\">\n            ${formatPrice(total_list_price)}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OrderProductCard;\n"
    },
    "/src/components/ProductCard/index.js": {
      "code": "import ProductCard from './ProductCard';\n\nexport default ProductCard;\n"
    },
    "/src/components/ProductCard/ProductCard.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Link from 'src/components/ui/Link';\nimport ColorSwatches from 'src/components/ui/ColorSwatches';\n\nimport { COLORS } from 'src/constants';\n\nimport { getUnavailableColors } from 'src/pages/ProductDetail/utils';\n\nconst ProductCard = ({ product }) => {\n  const navigate = useNavigate();\n  const { images, name, inventory, colors } = product;\n  const { discount_percentage, sale_price, list_price, color } = inventory[0];\n\n  const hasDiscount = !!discount_percentage;\n\n  const unavailableColors = useMemo(\n    () => getUnavailableColors(product),\n    [product],\n  );\n\n  const redirectUrl = `/products/${product.product_id}`;\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        navigate(redirectUrl);\n      }\n    },\n    [navigate, redirectUrl],\n  );\n\n  return (\n    <div\n      tabIndex={0}\n      onKeyDown={handleKeyDown}\n      className={clsx(\n        'relative w-full',\n        'group',\n        'flex flex-col gap-4',\n        'rounded-lg',\n        'outline-none',\n        'focus:ring-4 focus:ring-indigo-600/[.12]',\n      )}>\n      <img\n        src={images[0].image_url}\n        alt={`${name}'s product preview`}\n        loading=\"lazy\"\n        className={clsx(\n          'h-[225px] w-full rounded-lg object-cover md:h-[300px]',\n        )}\n      />\n      <div className={clsx('flex flex-col', 'min-h-[152px]')}>\n        <span className=\"mb-0.5 text-xs text-neutral-600\">\n          {COLORS[color]?.label}\n        </span>\n        <Link\n          to={redirectUrl}\n          tabIndex={-1}\n          variant=\"unstyled\"\n          className={clsx(\n            'text-lg font-medium text-neutral-900',\n            'group-hover:text-indigo-700',\n          )}>\n          <span aria-hidden={true} className=\"absolute inset-0\" />\n          {name}\n        </Link>\n        <div className=\"mt-3 flex items-center gap-2\">\n          <span className=\"text-lg text-neutral-500\">\n            ${hasDiscount ? sale_price : list_price}\n          </span>\n          {hasDiscount && (\n            <span className=\"text-xs text-neutral-600 line-through\">\n              ${list_price}\n            </span>\n          )}\n        </div>\n        <div className=\"mt-3 flex flex-wrap gap-1\">\n          {colors.map((color) => (\n            <ColorSwatches\n              key={color}\n              color={COLORS[color].value}\n              size=\"sm\"\n              outOfStock={unavailableColors.includes(color)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductCard;\n"
    },
    "/src/components/ProductGridSection/index.js": {
      "code": "import ProductGridSection from './ProductGridSection';\n\nexport default ProductGridSection;\n"
    },
    "/src/components/ProductGridSection/ProductGridSection.jsx": {
      "code": "import clsx from 'clsx';\nimport ProductCard from 'src/components/ProductCard';\n\nconst ProductGridSection = ({ products }) => {\n  return (\n    <div className=\"grid grid-cols-4 gap-x-4 gap-y-8 md:grid-cols-6 md:gap-x-8 lg:grid-cols-12\">\n      {products.map((product) => (\n        <div\n          key={product.product_id}\n          className={clsx('col-span-4 md:col-span-3')}>\n          <ProductCard product={product} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ProductGridSection;\n"
    },
    "/src/components/ProductSpecificationSection/index.js": {
      "code": "import ProductSpecificationSection from './ProductSpecificationSection';\n\nexport default ProductSpecificationSection;\n"
    },
    "/src/components/ProductSpecificationSection/ProductSpecificationSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\nimport {\n  RiColorFilterLine,\n  RiHandHeartLine,\n  RiInfinityFill,\n  RiPaintLine,\n  RiPlantLine,\n  RiPriceTag2Line,\n  RiRainbowLine,\n  RiRecycleLine,\n  RiScales2Line,\n  RiShapesLine,\n  RiShieldStarLine,\n  RiShirtLine,\n  RiStackLine,\n  RiTShirtLine,\n  RiWaterFlashLine,\n  RiWindyLine,\n} from 'react-icons/ri';\n\nimport Tabs from '../ui/Tabs';\nimport IconWrapper from '../IconWrapper';\n\nconst TABS = [\n  { label: 'Sustainability', value: 'sustainability' },\n  { label: 'Comfort', value: 'comfort' },\n  { label: 'Durability', value: 'durability' },\n  { label: 'Versatility', value: 'versatility' },\n];\n\nconst specifications = [\n  {\n    value: 'sustainability',\n    title: 'Eco-Friendly Choice',\n    description:\n      'With our sustainable approach, we curate clothing that makes a statement of careâ€”care for the planet, and for the art of fashion.',\n    img: {\n      desktop:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/yellow-desktop.jpg',\n      tablet:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/yellow-tablet.jpg',\n      mobile:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/yellow-mobile.jpg',\n    },\n    items: [\n      {\n        label: 'Recycled Materials',\n        icon: RiRecycleLine,\n      },\n      {\n        label: 'Low Impact Dye',\n        icon: RiPaintLine,\n      },\n      {\n        label: 'Carbon Neutral',\n        icon: RiPlantLine,\n      },\n      {\n        label: 'Water Conservation',\n        icon: RiWaterFlashLine,\n      },\n    ],\n  },\n  {\n    value: 'comfort',\n    title: 'Uncompromised Comfort',\n    description:\n      'Our garments are a sanctuary of softness, tailored to drape gracefully and allow for freedom of movement.',\n    img: {\n      desktop:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/black-desktop.jpg',\n      tablet:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/black-tablet.jpg',\n      mobile:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/black-mobile.jpg',\n    },\n    items: [\n      {\n        label: 'Ergonomic Fits',\n        icon: RiTShirtLine,\n      },\n      {\n        label: 'Soft-to-the-Touch Fabrics',\n        icon: RiHandHeartLine,\n      },\n      {\n        label: 'Breathable Weaves',\n        icon: RiWindyLine,\n      },\n      {\n        label: 'Thoughtful Design',\n        icon: RiColorFilterLine,\n      },\n    ],\n  },\n  {\n    value: 'durability',\n    title: 'Built to Last',\n    description:\n      'Hereâ€™s to apparel that you can trust to look as good as new, wear after wear, year after year.',\n    img: {\n      desktop:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/chair-desktop.jpg',\n      tablet:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/chair-tablet.jpg',\n      mobile:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/chair-mobile.jpg',\n    },\n    items: [\n      {\n        label: 'Reinforced Construction',\n        icon: RiStackLine,\n      },\n      {\n        label: 'Quality Control',\n        icon: RiScales2Line,\n      },\n      {\n        label: 'Material Resilience',\n        icon: RiShieldStarLine,\n      },\n      {\n        label: 'Warranty and Repair',\n        icon: RiPriceTag2Line,\n      },\n    ],\n  },\n  {\n    value: 'versatility',\n    title: 'Versatile by Design',\n    description:\n      'Our pieces are a celebration of versatility, offering a range of styles that are as perfect for a business meeting as they are for a casual brunch. ',\n    img: {\n      desktop:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/clothes-desktop.jpg',\n      tablet:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/clothes-tablet.jpg',\n      mobile:\n        'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/product-specifications-section/clothes-mobile.jpg',\n    },\n    items: [\n      {\n        label: 'Adaptive Styles',\n        icon: RiRainbowLine,\n      },\n      {\n        label: 'Functional Fashion',\n        icon: RiShirtLine,\n      },\n      {\n        label: 'Timeless Aesthetics',\n        icon: RiInfinityFill,\n      },\n      {\n        label: 'Mix-and-Match Potential',\n        icon: RiShapesLine,\n      },\n    ],\n  },\n];\n\nconst ProductSpecificationSection = () => {\n  const [selectedSpecification, setSelectedSpecification] =\n    useState('sustainability');\n\n  const data = specifications.find(\n    (specification) => specification.value === selectedSpecification,\n  );\n\n  return (\n    <section\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:px-28 lg:py-24',\n        'flex flex-col gap-16',\n      )}>\n      <div className=\"flex flex-col gap-6\">\n        <h2 className=\"text-3xl font-semibold text-neutral-900 md:text-5xl\">\n          Discover timeless elegance\n        </h2>\n        <p className=\"text-lg text-neutral-600\">\n          Step into a world where quality meets quintessential charm with our\n          collection. Every thread weaves a promise of unparalleled quality,\n          ensuring that each garment is not just a part of your wardrobe, but a\n          piece of art. Here's the essence of what makes our apparel the\n          hallmark for those with an eye for excellence and a heart for the\n          environment.\n        </p>\n      </div>\n\n      <div className=\"flex flex-col gap-8\">\n        <Tabs\n          label=\"Select specification\"\n          value={selectedSpecification}\n          tabs={TABS}\n          onSelect={setSelectedSpecification}\n        />\n        <div className=\"flex flex-col gap-8 lg:flex-row\">\n          <picture className=\"shrink-0\">\n            <source srcSet={data.img.desktop} media=\"(min-width: 1024px)\" />\n            <source srcSet={data.img.tablet} media=\"(min-width: 768px)\" />\n            <img\n              loading=\"lazy\"\n              src={data.img.mobile}\n              className={clsx(\n                'h-[180px] md:h-96 lg:h-64',\n                'w-full lg:w-[367px]',\n                'rounded-lg object-cover',\n              )}\n              alt={`${selectedSpecification}'s banner`}\n            />\n          </picture>\n\n          <div className=\"flex flex-col gap-8\">\n            <div className=\"flex flex-col gap-2\">\n              <h3 className=\"text-2xl font-medium text-neutral-900\">\n                {data.title}\n              </h3>\n              <p className=\" text-neutral-600\">{data.description}</p>\n            </div>\n            <div\n              className={clsx(\n                'flex flex-wrap',\n                'gap-4 md:gap-x-12 md:gap-y-8 lg:gap-8',\n              )}>\n              {data.items.map(({ label, icon: Icon }) => (\n                <div\n                  className=\"flex w-full items-center gap-2 md:w-80 md:gap-4 lg:w-[282px]\"\n                  key={label}>\n                  <IconWrapper icon={Icon} />\n                  <span className=\"text-neutral-600\">{label}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ProductSpecificationSection;\n"
    },
    "/src/components/Reviews/index.js": {
      "code": "import Reviews from './Reviews';\n\nexport default Reviews;\n"
    },
    "/src/components/Reviews/OverallRating.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Rating from 'src/components/ui/Rating';\nimport ProgressBar from 'src/components/ui/ProgressBar';\nimport Button from 'src/components/ui/Button';\n\nimport { useProductReviewsContext } from './ProductReviewsContext';\n\nconst OverallRating = () => {\n  const { aggregateRating, onRatingSelect, selectedRating } =\n    useProductReviewsContext();\n  const hasReviews = !!aggregateRating.total;\n\n  const ratingData = [\n    {\n      name: 'Excellent',\n      color: '#16A34A',\n      value: aggregateRating.counts.find((item) => item.rating === 5).count,\n      rating: 5,\n    },\n    {\n      name: 'Good',\n      color: '#22C55E',\n      value: aggregateRating.counts.find((item) => item.rating === 4).count,\n      rating: 4,\n    },\n    {\n      name: 'Average',\n      color: '#FDE047',\n      value: aggregateRating.counts.find((item) => item.rating === 3).count,\n      rating: 3,\n    },\n    {\n      name: 'Below Average',\n      color: '#EAB308',\n      value: aggregateRating.counts.find((item) => item.rating === 2).count,\n      rating: 2,\n    },\n    {\n      name: 'Poor',\n      color: '#FACC15',\n      value: aggregateRating.counts.find((item) => item.rating === 1).count,\n      rating: 1,\n    },\n  ];\n  return (\n    <div className={clsx('flex flex-col gap-6')}>\n      <div className=\"flex flex-col gap-2\">\n        <div className=\"text-xl font-semibold text-neutral-900\">\n          Overall Rating\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-base font-semibold text-neutral-900\">\n            {aggregateRating.rating}\n          </span>\n          <Rating value={4.5} className=\"gap-2\" />\n          {hasReviews && (\n            <span className=\"text-nowrap text-sm text-neutral-600\">\n              Based on {aggregateRating.total} reviews\n            </span>\n          )}\n        </div>\n      </div>\n\n      <fieldset className={clsx('flex flex-col gap-4', 'py-4')}>\n        <legend id=\"rating-filter\" className=\"sr-only\">\n          Filter by Rating\n        </legend>\n        {ratingData.map(({ name, color, value, rating }) => {\n          const ratingPercentage =\n            aggregateRating.total === 0\n              ? 0\n              : Math.floor((value / aggregateRating.total) * 100);\n\n          return (\n            <button\n              className={clsx(\n                'flex items-center gap-2 self-stretch',\n                'text-neutral-600 disabled:text-neutral-400',\n                'cursor-pointer disabled:pointer-events-none',\n              )}\n              key={rating}\n              disabled={!hasReviews}\n              aria-pressed={selectedRating === rating ? 'true' : 'false'}\n              aria-label={`Filter by ${rating} stars`}\n              onClick={() => onRatingSelect(rating)}>\n              <span\n                className={clsx(\n                  'w-[120px]',\n                  'px-0.5',\n                  'text-left font-medium',\n                )}>\n                {name}\n              </span>\n              <ProgressBar value={ratingPercentage} color={color} />\n              <span className=\"w-[42px] text-right\">{ratingPercentage}%</span>\n            </button>\n          );\n        })}\n      </fieldset>\n\n      <div className=\"flex justify-center gap-6\">\n        {selectedRating && (\n          <div className=\"flex-1\">\n            <Button\n              label=\"Clear Filter\"\n              variant=\"tertiary\"\n              size=\"xl\"\n              className=\"w-full\"\n              onClick={() => onRatingSelect(null)}\n            />\n          </div>\n        )}\n        <div className={clsx(selectedRating ? 'flex-1' : 'w-[153px]')}>\n          <Button\n            label=\"Write a review\"\n            variant=\"secondary\"\n            size=\"xl\"\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OverallRating;\n"
    },
    "/src/components/Reviews/ProductReviewsContext.jsx": {
      "code": "import { useParams } from 'react-router-dom';\nimport { useMediaQuery } from 'usehooks-ts';\n\nimport {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\n\nconst ProductReviewsContext = createContext();\n\nexport const useProductReviewsContext = () => useContext(ProductReviewsContext);\n\nconst ProductReviewsContextProvider = ({ children }) => {\n  const { productId } = useParams();\n  const isDesktopView = useMediaQuery('(min-width: 1024px)');\n  const [reviews, setReviews] = useState([]);\n  const [isInitialLoading, setIsInitialLoading] = useState(true);\n  const [isFetchingMore, setIsFetchingMore] = useState(false);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pagination, setPagination] = useState({\n    hasMore: false,\n    total: 0,\n  });\n  const [aggregateRating, setAggregateRating] = useState(null);\n  const [selectedRating, setSelectedRating] = useState(null);\n  const limit = isDesktopView ? 12 : 10;\n\n  const getReviews = useCallback(\n    async (initialFetching = false) => {\n      if (initialFetching) {\n        setIsInitialLoading(true);\n      } else {\n        setIsFetchingMore(true);\n      }\n\n      const response = await fetch(\n        `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products/${productId}/reviews?page=${currentPage}&per_page=${limit}${\n          selectedRating ? `&rating=${selectedRating}` : ''\n        }`,\n      );\n\n      const result = await response.json();\n\n      if (result) {\n        setReviews(\n          currentPage === 1 ? result.data : (prev) => [...prev, ...result.data],\n        );\n        setAggregateRating(result.aggregate);\n        setPagination({\n          hasMore: result.pagination.has_more,\n          total: result.pagination.total,\n        });\n        setCurrentPage(result.pagination.page);\n      }\n      setIsInitialLoading(false);\n      setIsFetchingMore(false);\n    },\n    [currentPage, limit, selectedRating, productId],\n  );\n\n  useEffect(() => {\n    getReviews(isInitialLoading);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage, selectedRating]);\n\n  const loadMoreReviews = useCallback(() => {\n    if (pagination.hasMore) {\n      setCurrentPage((prev) => prev + 1);\n    }\n  }, [pagination.hasMore]);\n\n  const onRatingSelect = useCallback((value) => {\n    setSelectedRating(value);\n    setCurrentPage(1);\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      reviews,\n      pagination,\n      isInitialLoading,\n      isFetchingMore,\n      currentPage,\n      aggregateRating,\n      selectedRating,\n      loadMoreReviews,\n      onRatingSelect,\n    };\n  }, [\n    reviews,\n    pagination,\n    isInitialLoading,\n    isFetchingMore,\n    currentPage,\n    aggregateRating,\n    selectedRating,\n    loadMoreReviews,\n    onRatingSelect,\n  ]);\n\n  return (\n    <ProductReviewsContext.Provider value={value}>\n      {children}\n    </ProductReviewsContext.Provider>\n  );\n};\n\nexport default ProductReviewsContextProvider;\n"
    },
    "/src/components/Reviews/Reviews.jsx": {
      "code": "import clsx from 'clsx';\n\nimport OverallRating from './OverallRating';\nimport ReviewsList from './ReviewsList';\n\nimport { useProductReviewsContext } from './ProductReviewsContext';\n\nconst Reviews = () => {\n  const { isInitialLoading, reviews } = useProductReviewsContext();\n\n  return (\n    <div\n      className={clsx(\n        'h-[calc(100vh_-_232px)]',\n        'flex flex-col gap-10 lg:flex-row lg:gap-8',\n      )}>\n      {isInitialLoading || !reviews ? (\n        <div className=\"flex h-full w-full items-center justify-center\">\n          Loading...\n        </div>\n      ) : (\n        <>\n          <div className={clsx('w-full self-stretch lg:w-96', 'px-6 md:px-8')}>\n            <OverallRating />\n          </div>\n          <div\n            className={clsx(\n              'w-full flex-1',\n              'px-4 md:px-8 lg:pl-0 lg:pr-8',\n              'lg:overflow-y-auto',\n            )}>\n            <ReviewsList />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"
    },
    "/src/components/Reviews/ReviewsList.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiChatSmile3Line } from 'react-icons/ri';\n\nimport Avatar from 'src/components/ui/Avatar';\nimport Rating from 'src/components/ui/Rating';\nimport Button from 'src/components/ui/Button';\nimport IconWrapper from 'src/components/IconWrapper';\n\nimport { useProductReviewsContext } from './ProductReviewsContext';\n\nimport { formatDate } from 'src/utils';\n\nconst ReviewsList = () => {\n  const { reviews, pagination, loadMoreReviews, isFetchingMore, currentPage } =\n    useProductReviewsContext();\n  const moreReviewsCount = pagination.total - reviews.length;\n\n  if (reviews.length === 0) {\n    return (\n      <div class=\"flex h-full flex-col items-center justify-center gap-5\">\n        <IconWrapper icon={RiChatSmile3Line} />\n        <div\n          class={clsx(\n            \"gap-2', 'text-neutral-900 flex flex-col items-center text-center\",\n          )}>\n          <span class=\"text-xl font-medium\">No reviews yet!</span>\n          <span>Be the first to review this product</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentPage === 1 && isFetchingMore) {\n    return (\n      <div className=\"flex h-full flex-col items-center justify-center gap-5\">\n        Loading...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col gap-12 pb-6\">\n      <div className=\"flex flex-col gap-6 md:gap-8\">\n        {reviews.map((review) => (\n          <div\n            key={review.user.user_id + review.created_at}\n            className={clsx('flex flex-col gap-4', 'text-neutral-600')}>\n            <div className=\"flex items-center gap-4\">\n              <Avatar src={review.user.avatar_url} name={review.user.name} />\n              <div className=\"flex grow flex-col gap-1\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"text-base font-semibold text-neutral-900\">\n                    {review.user.name}\n                  </h4>\n                  <span className=\"text-nowrap text-xs\">\n                    {formatDate(new Date(review.created_at))}\n                  </span>\n                </div>\n                <Rating value={review.rating} />\n              </div>\n            </div>\n            {review.content && <p>{review.content}</p>}\n          </div>\n        ))}\n      </div>\n      {pagination.hasMore && (\n        <Button\n          label={`See ${moreReviewsCount} more reviews`}\n          variant=\"secondary\"\n          size=\"lg\"\n          onClick={loadMoreReviews}\n          isDisabled={isFetchingMore}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ReviewsList;\n"
    },
    "/src/components/ScrollToTop/index.js": {
      "code": "import ScrollToTop from './ScrollToTop';\n\nexport default ScrollToTop;\n"
    },
    "/src/components/ScrollToTop/ScrollToTop.jsx": {
      "code": "import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n"
    },
    "/src/components/ui/Accordion/Accordion.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState, useRef, createContext, useContext } from 'react';\nimport { RiAddCircleLine, RiIndeterminateCircleLine } from 'react-icons/ri';\n\nconst AccordionItemContext = createContext();\n\nconst AccordionItem = ({ children, id }) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div>\n      <AccordionItemContext.Provider value={{ id, isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </div>\n  );\n};\n\nconst AccordionTrigger = ({ children }) => {\n  const { id, isOpen, setIsOpen } = useContext(AccordionItemContext);\n  const Icon = isOpen ? RiIndeterminateCircleLine : RiAddCircleLine;\n  return (\n    <button\n      className={clsx(\n        'w-full',\n        'flex items-center justify-between gap-6',\n        'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n        'text-left text-lg font-medium text-neutral-900',\n      )}\n      onClick={() => setIsOpen(!isOpen)}\n      aria-expanded={isOpen}\n      aria-controls={`accordion-content-${id}`}\n      id={`accordion-header-${id}`}>\n      <span>{children}</span>\n      <Icon className=\"size-6 text-neutral-400\" />\n    </button>\n  );\n};\n\nconst AccordionContent = ({ children }) => {\n  const contentRef = useRef(null);\n  const { id, isOpen } = useContext(AccordionItemContext);\n\n  return (\n    <div\n      id={`accordion-content-${id}`}\n      role=\"region\"\n      aria-labelledby={`accordion-header-${id}`}\n      className={clsx(\n        'transition-max-height overflow-hidden duration-300',\n        'pr-12',\n        isOpen && 'mt-2',\n      )}\n      style={{\n        maxHeight: isOpen ? `${contentRef.current?.scrollHeight}px` : '0',\n      }}\n      ref={contentRef}>\n      {children}\n    </div>\n  );\n};\n\nconst Accordion = ({ children }) => {\n  return (\n    <div className=\"w-full\">\n      {children.map((item, index) => (\n        <div key={item.props.id}>\n          {item}\n          {index !== children.length - 1 && (\n            <div className=\"mb-[23px] mt-8 h-[1px] bg-neutral-200\" />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n"
    },
    "/src/components/ui/Accordion/index.js": {
      "code": "import * as Accordion from './Accordion';\n\nexport * from './Accordion';\nexport default Accordion;\n"
    },
    "/src/components/ui/Autocomplete/Autocomplete.jsx": {
      "code": "import clsx from 'clsx';\nimport { useEffect, useId, useRef, useState } from 'react';\n\nimport TextInput from '../TextInput';\n\nconst Autocomplete = ({ value, onSelect, options, ...props }) => {\n  const id = useId();\n  const autocompleteRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        autocompleteRef.current &&\n        !autocompleteRef.current.contains(event.target)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleOptionClick = (item) => {\n    setIsOpen(false);\n    if (onSelect) {\n      onSelect(item);\n    }\n  };\n\n  return (\n    <div className=\"relative w-full\" ref={autocompleteRef}>\n      <TextInput\n        {...props}\n        value={value}\n        id={id}\n        onFocus={() => setIsOpen(true)}\n      />\n      {options.length > 0 && (\n        <div\n          className={clsx(\n            'z-dropdown max-h-50 absolute right-0 mt-2 w-full origin-top-right overflow-y-auto',\n            'border border-[#e6e6e6]',\n            'rounded-lg bg-white shadow-lg',\n            'origin-top transform transition duration-300 ease-in-out',\n            isOpen ? 'scale-y-100 opacity-100' : 'scale-y-0 opacity-0',\n          )}\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n          aria-labelledby={id}\n          tabIndex={-1}>\n          <div className=\"flex flex-col gap-2 p-2\" role=\"none\">\n            {options.map((item) => (\n              <div\n                key={item.id}\n                onClick={() => handleOptionClick(item)}\n                className={clsx(\n                  'block text-sm',\n                  'cursor-pointer',\n                  'rounded',\n                  'hover:bg-neutral-50',\n                  'border-none outline-none',\n                  'focus:ring focus:ring-indigo-200',\n                  'p-2',\n                  value === item.id || value === item.name\n                    ? 'font-medium text-indigo-700'\n                    : 'text-neutral-600',\n                )}\n                role=\"menuitem\"\n                tabIndex={isOpen ? 0 : -1}\n                id=\"menu-item-0\">\n                {item.name}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n"
    },
    "/src/components/ui/Autocomplete/index.js": {
      "code": "import Autocomplete from './Autocomplete';\n\nexport default Autocomplete;\n"
    },
    "/src/components/ui/Avatar/Avatar.jsx": {
      "code": "import clsx from 'clsx';\n\nimport { getNameInitials } from 'src/utils';\n\nconst Avatar = ({ src, name, className }) => {\n  const nameInitials = name ? getNameInitials(name) : '';\n\n  const commonClasses = clsx('size-12 shrink-0 rounded-full', className);\n  return src ? (\n    <img\n      src={src}\n      alt={`${name}'s avatar`}\n      loading=\"lazy\"\n      className={clsx('object-cover', commonClasses)}\n    />\n  ) : (\n    <div\n      className={clsx(\n        'bg-gray-200',\n        'text-center text-xl font-medium text-neutral-600',\n        'flex items-center justify-center',\n        commonClasses,\n      )}>\n      {nameInitials}\n    </div>\n  );\n};\n\nexport default Avatar;\n"
    },
    "/src/components/ui/Avatar/index.js": {
      "code": "import Avatar from './Avatar';\n\nexport default Avatar;\n"
    },
    "/src/components/ui/Badge/Badge.jsx": {
      "code": "import clsx from 'clsx';\n\nconst sizeClasses = {\n  sm: clsx('h-5', 'py px-[5px]', 'text-xs'),\n  md: clsx('h-6', 'py px-[7px]', 'text-sm'),\n  lg: clsx('h-7', 'py-[3px] px-[9px]', 'text-sm'),\n};\n\nconst variantClasses = {\n  neutral: clsx('bg-gray-50', 'border-neutral-200', 'text-neutral-600'),\n  danger: clsx('bg-red-50', 'border-red-200', 'text-red-600'),\n  warning: clsx('bg-amber-50', 'border-amber-200', 'text-amber-700'),\n  success: clsx('bg-green-50', 'border-green-200', 'text-green-700'),\n  brand: clsx('bg-indigo-50', 'border-indigo-200', 'text-indigo-700'),\n};\n\nconst Badge = ({ label, size = 'md', variant = 'neutral', className }) => {\n  const commonClasses = clsx('rounded-full text-center border');\n  return (\n    <div\n      className={clsx(\n        commonClasses,\n        sizeClasses[size],\n        variantClasses[variant],\n        className,\n      )}>\n      {label}\n    </div>\n  );\n};\n\nexport default Badge;\n"
    },
    "/src/components/ui/Badge/index.js": {
      "code": "import Badge from './Badge';\n\nexport default Badge;\n"
    },
    "/src/components/ui/Button/Button.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Link from '../Link';\n\nconst paddingClasses = {\n  md: 'px-3.5 py-2.5',\n  lg: 'px-4 py-2.5',\n  xl: 'px-5 py-3',\n  '2xl': 'px-6 py-4',\n};\n\n// We need this because secondary button has border\nconst secondaryVariantPaddingClasses = {\n  md: 'px-[13px] py-[9px]',\n  lg: 'px-[15px] py-[9px]',\n  xl: 'px-[19px] py-[11px]',\n  '2xl': 'px-[23px] py-[15px]',\n};\n\nconst fontSizeClasses = {\n  md: 'text-sm',\n  lg: 'text-base',\n  xl: 'text-base',\n  '2xl': 'text-lg',\n};\n\nconst spacingClasses = {\n  md: 'gap-x-1.5',\n  lg: 'gap-x-2',\n  xl: 'gap-x-2',\n  '2xl': 'gap-x-3',\n};\n\nconst heightClasses = {\n  md: 'h-10',\n  lg: 'h-11',\n  xl: 'h-12',\n  '2xl': 'h-15',\n};\n\nconst iconOnlySizeClasses = {\n  md: 'size-10',\n  lg: 'size-11',\n  xl: 'size-12',\n  '2xl': 'size-14',\n};\n\nconst iconSizeClasses = {\n  md: 'size-5',\n  lg: 'size-5',\n  xl: 'size-5',\n  '2xl': 'size-6',\n};\n\nconst variantClasses = {\n  primary: clsx(\n    'border-none',\n    'bg-indigo-700',\n    'shadow-custom',\n    'text-white',\n    'hover:bg-indigo-800 focus:bg-indigo-800',\n  ),\n  secondary: clsx(\n    'border border-neutral-200',\n    'bg-white',\n    'shadow-custom',\n    'text-neutral-900',\n    'hover:bg-neutral-50 focus:bg-neutral-50',\n  ),\n  tertiary: clsx(\n    'border-none',\n    'text-indigo-700',\n    'hover:bg-neutral-50 focus:bg-neutral-50',\n  ),\n  danger: clsx(\n    'border-none',\n    'bg-red-600',\n    'text-white',\n    'hover:bg-red-700 focus:bg-red-700 focus:outline-none focus-visible:ring-4 focus-visible:ring-red-600/[.12]',\n  ),\n  link: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n  ),\n  'gray-link': clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5',\n  ),\n};\n\nconst variantDisabledClasses = {\n  primary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none',\n  ),\n  secondary: clsx(\n    'disabled:bg-neutral-100',\n    'disabled:text-neutral-400',\n    'disabled:shadow-none',\n  ),\n  tertiary: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  danger: clsx('disabled:bg-none', 'disabled:text-neutral-400'),\n  link: clsx('disabled:text-neutral-400'),\n  'gray-link': clsx('disabled:text-neutral-400'),\n};\n\nconst Button = ({\n  label,\n  className,\n  isDisabled,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  isLabelHidden,\n  size = 'md',\n  variant = 'primary',\n  iconClassName,\n  href,\n  ...props\n}) => {\n  const isLinkVariant = ['link', 'gray-link'].includes(variant);\n\n  const commonClasses = clsx(\n    'inline-flex items-center justify-center rounded font-medium outline-none cursor-pointer',\n    'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'transition-colors',\n    'text-nowrap',\n    !isLinkVariant && heightClasses[size],\n    !isLinkVariant &&\n      (variant === 'secondary'\n        ? secondaryVariantPaddingClasses[size]\n        : paddingClasses[size]),\n    fontSizeClasses[size],\n    spacingClasses[size],\n    isLabelHidden && iconOnlySizeClasses[size],\n    variantClasses[variant],\n    variantDisabledClasses[variant],\n    isDisabled && 'pointer-events-none',\n  );\n\n  if (href) {\n    return (\n      <Link\n        to={href}\n        variant=\"unstyled\"\n        disabled={isDisabled}\n        className={clsx(commonClasses, className)}\n        {...props}>\n        {StartIcon && (\n          <StartIcon\n            className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n        {label}\n        {EndIcon && (\n          <EndIcon\n            className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n            aria-hidden=\"true\"\n          />\n        )}\n      </Link>\n    );\n  }\n\n  const children = isLabelHidden ? (\n    (\n      <StartIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    ) || (\n      <EndIcon\n        className={clsx('shrink-0', iconSizeClasses[size], iconClassName)}\n        aria-hidden=\"true\"\n      />\n    )\n  ) : (\n    <>\n      {StartIcon && (\n        <StartIcon\n          className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n      {label}\n      {EndIcon && (\n        <EndIcon\n          className={clsx('size-5 shrink-0 p-0.5', iconClassName)}\n          aria-hidden=\"true\"\n        />\n      )}\n    </>\n  );\n\n  return (\n    <button\n      type=\"button\"\n      className={clsx(commonClasses, className)}\n      disabled={isDisabled}\n      {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n"
    },
    "/src/components/ui/Button/index.js": {
      "code": "import Button from './Button';\n\nexport default Button;\n"
    },
    "/src/components/ui/CheckboxInput/CheckboxInput.jsx": {
      "code": "import { useId } from 'react';\nimport clsx from 'clsx';\n\nconst CheckboxInput = ({ value, defaultValue, disabled, label, onChange }) => {\n  const id = useId();\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <div className=\"flex size-6 items-center justify-center\">\n        <input\n          checked={value}\n          className={clsx(\n            'size-4',\n            'rounded',\n            'text-indigo-600',\n            'border border-neutral-300',\n            'bg-transparent',\n            ['disabled:!bg-neutral-200', 'disabled:cursor-not-allowed'],\n            'focus:border-indigo-600 focus:outline-none focus:ring-4 focus:ring-indigo-600/[.12] focus:ring-offset-0',\n          )}\n          defaultChecked={defaultValue}\n          disabled={disabled}\n          id={id}\n          type=\"checkbox\"\n          onChange={(event) => {\n            if (!onChange) {\n              return;\n            }\n\n            onChange(event.target.checked, event);\n          }}\n        />\n      </div>\n      <label\n        htmlFor={id}\n        className={clsx(\n          'block',\n          disabled ? 'text-neutral-400' : 'text-neutral-600',\n        )}>\n        {label}\n      </label>\n    </div>\n  );\n};\n\nexport default CheckboxInput;\n"
    },
    "/src/components/ui/CheckboxInput/index.js": {
      "code": "import CheckboxInput from './CheckboxInput';\n\nexport default CheckboxInput;\n"
    },
    "/src/components/ui/ColorSwatches/ColorSwatches.jsx": {
      "code": "import clsx from 'clsx';\n\nconst outerSizeClasses = {\n  md: 'size-[56.67px]',\n  sm: 'size-6',\n};\n\nconst innerSizeClasses = {\n  md: 'size-[38px]',\n  sm: 'size-4',\n};\n\nconst ringSizeClasses = {\n  md: 'focus:ring-[9.33px]',\n  sm: 'focus:ring-4',\n};\n\nconst strokeLineClasses = {\n  md: 'h-0.5 w-11',\n  sm: 'h-px w-5',\n};\n\nconst ColorSwatches = ({\n  color,\n  selected,\n  onClick,\n  outOfStock,\n  size = 'md',\n  type = 'radio',\n}) => {\n  const readOnly = !onClick || outOfStock;\n\n  return (\n    <label\n      key={color}\n      aria-label={color}\n      className={clsx(\n        'flex items-center justify-center',\n        'rounded-full',\n        outerSizeClasses[size],\n        readOnly ? 'pointer-events-none' : 'cursor-pointer',\n      )}>\n      <input\n        type={type}\n        name=\"color-choice\"\n        value={color}\n        checked={selected}\n        className=\"sr-only\"\n        onChange={() => {\n          if (!onClick) {\n            return;\n          }\n          onClick(color);\n        }}\n        tabIndex={-1}\n        disabled={outOfStock}\n      />\n      <div\n        aria-hidden=\"true\"\n        className={clsx(\n          'relative',\n          'flex items-center justify-center',\n          'rounded-full',\n          innerSizeClasses[size],\n          color === '#fff' && 'border border-neutral-200',\n          selected\n            ? 'border-2 border-white outline outline-1 outline-indigo-600'\n            : !readOnly && [\n                'hover:border-2 hover:border-indigo-200',\n                'focus:border-none focus:outline-none focus:ring-indigo-600/[.12]',\n                ringSizeClasses[size],\n              ],\n        )}\n        style={{ backgroundColor: color }}\n        tabIndex={selected || outOfStock || readOnly ? -1 : 0}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            onClick(color);\n          }\n        }}>\n        {selected && !outOfStock && (\n          <svg\n            width=\"28\"\n            height=\"28\"\n            viewBox=\"0 0 28 28\"\n            fill=\"none\"\n            className={clsx(color === '#fff' ? 'fill-black' : 'fill-white')}\n            xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M11.6673 17.6993L22.3918 6.97485L24.0417 8.62477L11.6673 20.9991L4.24268 13.5745L5.89259 11.9246L11.6673 17.6993Z\" />\n          </svg>\n        )}\n        {outOfStock && (\n          <div\n            className={clsx(\n              'absolute -rotate-45 bg-neutral-600',\n              strokeLineClasses[size],\n            )}\n          />\n        )}\n      </div>\n    </label>\n  );\n};\n\nexport default ColorSwatches;\n"
    },
    "/src/components/ui/ColorSwatches/index.js": {
      "code": "import ColorSwatches from './ColorSwatches';\n\nexport default ColorSwatches;\n"
    },
    "/src/components/ui/ConfirmModal/ConfirmModal.jsx": {
      "code": "import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { RiCloseLine } from 'react-icons/ri';\n\nimport Button from '../Button';\n\nconst ConfirmModal = ({\n  isOpen,\n  onClose,\n  onAction,\n  title,\n  description,\n  children,\n  primaryActionLabel,\n  secondaryActionLabel,\n  actionBtnSize = 'lg',\n  className,\n}) => {\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return createPortal(\n    <div\n      className={clsx(\n        'z-modal fixed  inset-0',\n        'bg-neutral-950 bg-opacity-70',\n        'flex items-center justify-center',\n      )}\n      role=\"dialog\"\n      aria-modal=\"true\">\n      <div\n        className={clsx(\n          'rounded-lg bg-white',\n          'w-[343px]',\n          'p-6',\n          'flex flex-col gap-8',\n          className,\n        )}>\n        {children ? (\n          children\n        ) : (\n          <div className=\"flex flex-col gap-1\">\n            <div className={clsx('flex items-center justify-between gap-4')}>\n              <div className=\"text-lg font-semibold\">{title}</div>\n              <button\n                aria-label=\"Close modal\"\n                className=\"text-xl font-semibold text-black\"\n                onClick={onClose}>\n                <RiCloseLine className=\"size-6\" />\n              </button>\n            </div>\n\n            <p className=\"text-sm text-neutral-600\">{description}</p>\n          </div>\n        )}\n        <div className={clsx('flex gap-3')}>\n          {secondaryActionLabel && (\n            <Button\n              label={secondaryActionLabel}\n              variant=\"secondary\"\n              size={actionBtnSize}\n              className=\"flex-1\"\n              onClick={onClose}\n            />\n          )}\n          <Button\n            label={primaryActionLabel}\n            size={actionBtnSize}\n            className=\"flex-1\"\n            onClick={onAction}\n          />\n        </div>\n      </div>\n    </div>,\n    document.body,\n  );\n};\n\nexport default ConfirmModal;\n"
    },
    "/src/components/ui/ConfirmModal/index.js": {
      "code": "import ConfirmModal from './ConfirmModal';\n\nexport default ConfirmModal;\n"
    },
    "/src/components/ui/Dropdown/Dropdown.jsx": {
      "code": "import clsx from 'clsx';\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react';\nimport { RiArrowDownSLine } from 'react-icons/ri';\n\nimport Button from '../Button';\n\nconst DropdownContext = createContext();\n\nconst DropdownItem = ({ children, isSelected, onSelect }) => {\n  const { setIsOpen, isOpen } = useContext(DropdownContext);\n  const handleOptionClick = () => {\n    setIsOpen(false);\n    if (onSelect) {\n      onSelect();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleOptionClick}\n      className={clsx(\n        'block text-sm',\n        'cursor-pointer',\n        'rounded',\n        'hover:bg-neutral-50',\n        'border-none outline-none',\n        'focus:ring focus:ring-indigo-200',\n        'p-2',\n        isSelected ? 'font-medium text-indigo-700' : 'text-neutral-600',\n      )}\n      role=\"menuitem\"\n      tabIndex={isOpen ? 0 : -1}\n      id=\"menu-item-0\">\n      {children}\n    </div>\n  );\n};\n\nconst Dropdown = ({ children }) => {\n  const id = useId();\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\n      <div>\n        <Button\n          type=\"button\"\n          label=\"Sort by\"\n          onClick={() => setIsOpen(!isOpen)}\n          id={id}\n          aria-expanded=\"true\"\n          aria-haspopup=\"true\"\n          variant=\"secondary\"\n          endIcon={RiArrowDownSLine}\n        />\n      </div>\n\n      <div\n        className={clsx(\n          'z-dropdown max-h-50 absolute right-0 mt-2 w-56 origin-top-right',\n          'border border-[#e6e6e6]',\n          'rounded-lg bg-white shadow-lg',\n          'origin-top transform transition duration-300 ease-in-out',\n          isOpen ? 'scale-y-100 opacity-100' : 'scale-y-0 opacity-0',\n        )}\n        role=\"menu\"\n        aria-orientation=\"vertical\"\n        aria-labelledby={id}\n        tabIndex={-1}>\n        <div className=\"flex flex-col gap-2 p-2\" role=\"none\">\n          <DropdownContext.Provider value={{ isOpen, setIsOpen }}>\n            {children}\n          </DropdownContext.Provider>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Dropdown, DropdownItem };\n"
    },
    "/src/components/ui/Dropdown/index.js": {
      "code": "import * as Dropdown from './Dropdown';\n\nexport * from './Dropdown';\nexport default Dropdown;\n"
    },
    "/src/components/ui/Link/index.js": {
      "code": "import Link from './Link';\n\nexport default Link;\n"
    },
    "/src/components/ui/Link/Link.jsx": {
      "code": "import clsx from 'clsx';\nimport { NavLink, Link as RouterLink } from 'react-router-dom';\n\nconst linkVariantClasses = {\n  primary: clsx(\n    'text-indigo-700',\n    'hover:text-indigo-800 focus:text-indigo-800',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5',\n  ),\n  gray: clsx(\n    'text-neutral-600',\n    'hover:text-neutral-900 focus:text-neutral-900',\n    'rounded focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n    'px-0.5',\n  ),\n  unstyled: '',\n};\n\nconst activeLinkClasses = {\n  primary: 'text-indigo-800',\n  gray: 'text-neutral-900',\n  unstyled: '',\n};\n\nconst Link = ({\n  children,\n  disabled,\n  className,\n  type = 'default',\n  variant = 'primary',\n  ...props\n}) => {\n  const commonClassName = clsx(\n    'font-medium rounded',\n    linkVariantClasses[variant],\n    {\n      'pointer-events-none text-neutral-400': disabled,\n    },\n    className,\n  );\n\n  if (type === 'nav') {\n    return (\n      <NavLink\n        {...props}\n        className={({ isActive }) =>\n          clsx(commonClassName, isActive && activeLinkClasses[variant])\n        }>\n        {children}\n      </NavLink>\n    );\n  }\n  return (\n    <RouterLink {...props} className={clsx(commonClassName)}>\n      {children}\n    </RouterLink>\n  );\n};\n\nexport default Link;\n"
    },
    "/src/components/ui/Modal/index.js": {
      "code": "import Modal from './Modal';\n\nexport default Modal;\n"
    },
    "/src/components/ui/Modal/Modal.jsx": {
      "code": "import clsx from 'clsx';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { RiCloseLine } from 'react-icons/ri';\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return createPortal(\n    <div\n      className={clsx(\n        'z-modal fixed  inset-0',\n        'bg-neutral-950 bg-opacity-70',\n        'flex items-center justify-center',\n        'py-20',\n      )}\n      role=\"dialog\"\n      aria-modal=\"true\">\n      <div\n        className={clsx(\n          'rounded-lg bg-white',\n          'w-full max-w-[343px] md:max-w-[522px] lg:max-w-[1008px]',\n        )}>\n        <div\n          className={clsx(\n            'flex flex-col items-end justify-center gap-4 self-stretch',\n            'p-6 lg:px-8',\n          )}>\n          <button\n            aria-label=\"Close modal\"\n            className=\"text-xl font-semibold text-black\"\n            onClick={onClose}>\n            <RiCloseLine className=\"size-6\" />\n          </button>\n        </div>\n        <div className={clsx('max-h-[calc(100vh_-_160px)]', 'overflow-y-auto')}>\n          {children}\n        </div>\n      </div>\n    </div>,\n    document.body,\n  );\n};\n\nexport default Modal;\n"
    },
    "/src/components/ui/ProgressBar/index.js": {
      "code": "import ProgressBar from './ProgressBar';\n\nexport default ProgressBar;\n"
    },
    "/src/components/ui/ProgressBar/ProgressBar.jsx": {
      "code": "import clsx from 'clsx';\n\nconst ProgressBar = ({ value, color, className }) => {\n  return (\n    <div\n      role=\"progressbar\"\n      aria-valuenow={value}\n      aria-valuemin=\"0\"\n      aria-valuemax={100}\n      className={clsx('h-2 grow rounded-lg bg-gray-200', className)}>\n      <div\n        className=\"h-full rounded-lg\"\n        style={{\n          width: `${value}%`,\n          backgroundColor: color || 'bg-orange-500',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ProgressBar;\n"
    },
    "/src/components/ui/Rating/index.js": {
      "code": "import Rating from './Rating';\n\nexport default Rating;\n"
    },
    "/src/components/ui/Rating/Rating.jsx": {
      "code": "import { useState } from 'react';\nimport clsx from 'clsx';\n\nimport Star from './Star';\n\nconst Rating = ({ value, max = 5, onChange, selected, showHover }) => {\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n\n  const readOnlyMode = !onChange;\n\n  return (\n    <div className=\"star-rating group flex items-center gap-1\">\n      {Array.from({ length: max }).map((_, index) => (\n        <span\n          key={index}\n          tabIndex={readOnlyMode ? -1 : 0}\n          onMouseEnter={() => !readOnlyMode && setHoveredIndex(index)}\n          onMouseLeave={() => !readOnlyMode && setHoveredIndex(null)}\n          className={clsx(\n            !readOnlyMode && 'cursor-pointer',\n            selected ? 'text-yellow-500' : 'text-yellow-400',\n          )}\n          onClick={() => onChange?.(index + 1)}>\n          <Star\n            filled={\n              hoveredIndex != null ? index <= hoveredIndex : value >= index + 1\n            }\n            halfFilled={value < index + 1 && value > index}\n            className={clsx(showHover && 'group-hover:stroke-indigo-200')}\n          />\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Rating;\n"
    },
    "/src/components/ui/Rating/Star.jsx": {
      "code": "import clsx from 'clsx';\n\nconst Star = ({ filled, halfFilled, className }) => {\n  return filled ? (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      className={clsx('fill-current stroke-current', className)}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        className=\"star-icon\"\n        d=\"M9 0.80198L11.0661 5.76946C11.2101 6.11569 11.5357 6.35226 11.9095 6.38223L17.2723 6.81216L13.1864 10.3122C12.9016 10.5561 12.7773 10.9389 12.8643 11.3037L14.1126 16.5368L9.52125 13.7325C9.20124 13.537 8.79876 13.537 8.47874 13.7325L3.88743 16.5368L5.13574 11.3037C5.22275 10.9389 5.09838 10.5561 4.81359 10.3122L0.727691 6.81216L6.0905 6.38223C6.46429 6.35226 6.7899 6.11569 6.93391 5.76946L9 0.80198Z\"\n      />\n    </svg>\n  ) : halfFilled ? (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <g clipPath=\"url(#clip0_3052_704)\">\n        <path\n          d=\"M9.53834 1.60996C9.70914 1.19932 10.2909 1.19932 10.4617 1.60996L12.5278 6.57744C12.5998 6.75056 12.7626 6.86885 12.9495 6.88383L18.3123 7.31376C18.7556 7.3493 18.9354 7.90256 18.5976 8.19189L14.5117 11.6919C14.3693 11.8139 14.3071 12.0053 14.3506 12.1876L15.5989 17.4208C15.7021 17.8534 15.2315 18.1954 14.8519 17.9635L10.2606 15.1592C10.1006 15.0615 9.89938 15.0615 9.73937 15.1592L5.14806 17.9635C4.76851 18.1954 4.29788 17.8534 4.40108 17.4208L5.64939 12.1876C5.69289 12.0053 5.6307 11.8139 5.48831 11.6919L1.40241 8.19189C1.06464 7.90256 1.24441 7.3493 1.68773 7.31376L7.05054 6.88383C7.23744 6.86885 7.40024 6.75056 7.47225 6.57744L9.53834 1.60996Z\"\n          fill=\"#E5E7EB\"\n        />\n        <g clipPath=\"url(#clip1_3052_704)\">\n          <path\n            d=\"M9.53834 1.60996C9.70914 1.19932 10.2909 1.19932 10.4617 1.60996L12.5278 6.57744C12.5998 6.75056 12.7626 6.86885 12.9495 6.88383L18.3123 7.31376C18.7556 7.3493 18.9354 7.90256 18.5976 8.19189L14.5117 11.6919C14.3693 11.8139 14.3071 12.0053 14.3506 12.1876L15.5989 17.4208C15.7021 17.8534 15.2315 18.1954 14.8519 17.9635L10.2606 15.1592C10.1006 15.0615 9.89938 15.0615 9.73937 15.1592L5.14806 17.9635C4.76851 18.1954 4.29788 17.8534 4.40108 17.4208L5.64939 12.1876C5.69289 12.0053 5.6307 11.8139 5.48831 11.6919L1.40241 8.19189C1.06464 7.90256 1.24441 7.3493 1.68773 7.31376L7.05054 6.88383C7.23744 6.86885 7.40024 6.75056 7.47225 6.57744L9.53834 1.60996Z\"\n            fill=\"#FACC15\"\n          />\n        </g>\n      </g>\n      <defs>\n        <clipPath id=\"clip0_3052_704\">\n          <rect width=\"20\" height=\"20\" fill=\"white\" />\n        </clipPath>\n        <clipPath id=\"clip1_3052_704\">\n          <rect width=\"10\" height=\"20\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  ) : (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      className={clsx('fill-gray-200 stroke-gray-200', className)}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M9 0.80198L11.0661 5.76946C11.2101 6.11569 11.5357 6.35226 11.9095 6.38223L17.2723 6.81216L13.1864 10.3122C12.9016 10.5561 12.7773 10.9389 12.8643 11.3037L14.1126 16.5368L9.52125 13.7325C9.20124 13.537 8.79876 13.537 8.47874 13.7325L3.88743 16.5368L5.13574 11.3037C5.22275 10.9389 5.09838 10.5561 4.81359 10.3122L0.727691 6.81216L6.0905 6.38223C6.46429 6.35226 6.7899 6.11569 6.93391 5.76946L9 0.80198Z\" />\n    </svg>\n  );\n};\n\nexport default Star;\n"
    },
    "/src/components/ui/SlideOut/index.js": {
      "code": "import SlideOut from './SlideOut';\n\nexport default SlideOut;\n"
    },
    "/src/components/ui/SlideOut/SlideOut.jsx": {
      "code": "import { createPortal } from 'react-dom';\nimport clsx from 'clsx';\nimport { RiCloseLine } from 'react-icons/ri';\nimport { useEffect } from 'react';\n\nconst SlideOut = ({\n  children,\n  isShown,\n  trigger,\n  title,\n  onClose,\n  className,\n}) => {\n  useEffect(() => {\n    if (isShown) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isShown]);\n\n  return (\n    <>\n      {trigger}\n\n      {isShown &&\n        createPortal(\n          <div\n            className={clsx(\n              'z-modal fixed  inset-0 lg:hidden',\n              'bg-neutral-950 bg-opacity-70',\n              'flex items-center justify-center',\n            )}\n            role=\"dialog\"\n            aria-modal=\"true\">\n            <div\n              id=\"slideout\"\n              className={clsx(\n                'z-fixed fixed inset-0 max-w-[360px] bg-white',\n                'animate-slideout',\n                'overflow-auto',\n                className,\n              )}>\n              <div\n                className={clsx(\n                  'z-sticky sticky top-0 bg-white p-6',\n                  'flex flex-col gap-6',\n                )}>\n                <div\n                  className={clsx(\n                    'flex items-center',\n                    !!title ? 'justify-between' : 'justify-end',\n                  )}>\n                  {title}\n                  <button\n                    onClick={onClose}\n                    aria-label=\"Close sideout\"\n                    type=\"button\"\n                    className={clsx(\n                      'rounded text-neutral-600',\n                      'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n                    )}>\n                    <RiCloseLine className=\"size-5\" />\n                  </button>\n                </div>\n                <div className=\"h-[1px] w-full bg-neutral-200\" />\n              </div>\n              <div className=\"px-6 pb-6\">{children}</div>\n            </div>\n          </div>,\n          document.body,\n        )}\n    </>\n  );\n};\n\nexport default SlideOut;\n"
    },
    "/src/components/ui/Tabs/index.js": {
      "code": "import Tabs from './Tabs';\n\nexport default Tabs;\n"
    },
    "/src/components/ui/Tabs/Tabs.jsx": {
      "code": "import clsx from 'clsx';\n\nconst Tabs = ({ label, tabs, value, onSelect }) => {\n  return (\n    <div className=\"isolate w-full overflow-x-auto overflow-y-hidden\">\n      <div\n        className={clsx('flex items-center', ['border-b border-neutral-300'])}>\n        <nav aria-label={label} className={clsx('flex grow gap-6')}>\n          {tabs.map((tabItem) => {\n            const { label: tabItemLabel, value: tabItemValue } = tabItem;\n            const isSelected = tabItemValue === value;\n            const commonProps = {\n              children: (\n                <span\n                  className={clsx(\n                    'flex items-center transition-all',\n                    'font-medium',\n                    isSelected ? 'text-indigo-700' : 'text-neutral-600',\n                  )}>\n                  {tabItemLabel}\n                </span>\n              ),\n              className: clsx(\n                'px-2 pb-[11px] whitespace-nowrap z-10 transition',\n                isSelected ? '-mb-px' : '',\n                isSelected &&\n                  'border border-x-0 border-t-0 border-b-indigo-600',\n              ),\n              onClick: () => onSelect?.(tabItemValue),\n            };\n\n            return (\n              <button\n                key={String(tabItemValue)}\n                type=\"button\"\n                {...commonProps}\n              />\n            );\n          })}\n        </nav>\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;\n"
    },
    "/src/components/ui/Tag/index.js": {
      "code": "import Tag from './Tag';\n\nexport default Tag;\n"
    },
    "/src/components/ui/Tag/Tag.jsx": {
      "code": "import clsx from 'clsx';\n\nconst Tag = ({ label, onAction, actionIcon: Icon }) => {\n  return (\n    <div\n      className={clsx(\n        'flex items-center justify-center gap-1',\n        'rounded bg-gray-200',\n        'px-[7px] py-[3px]',\n        'border-[0.5px] border-[#e6e6e6]',\n      )}>\n      <span className=\"px-0.5 text-sm font-medium\">{label}</span>\n      {Icon && (\n        <Icon\n          className={clsx(\n            'siz-5 text-black',\n            Icon ? 'cursor-pointer' : 'pointer-events-none',\n          )}\n          onClick={onAction}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Tag;\n"
    },
    "/src/components/ui/TextInput/index.js": {
      "code": "import TextInput from './TextInput';\n\nexport default TextInput;\n"
    },
    "/src/components/ui/TextInput/TextInput.jsx": {
      "code": "import clsx from 'clsx';\nimport { useId } from 'react';\n\nconst TextInput = ({\n  isLabelHidden,\n  label,\n  placeholder,\n  value,\n  onChange,\n  type,\n  id: idParam,\n  required,\n  isDisabled,\n  errorMessage,\n  hintMessage,\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  startIconClassName,\n  endIconClassName,\n  className,\n  ...props\n}) => {\n  const generateId = useId();\n  const id = idParam ?? generateId;\n  const hasError = !!errorMessage;\n\n  const messageId = useId();\n\n  const hasBottomSection = !!errorMessage || !!hintMessage;\n\n  return (\n    <div className={clsx('flex w-full flex-col gap-1.5', 'relative')}>\n      {label && (\n        <label\n          className={clsx(\n            isLabelHidden ? 'sr-only' : 'text-sm font-medium text-neutral-700',\n          )}\n          htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"relative\">\n        {StartIcon && (\n          <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3.5\">\n            <StartIcon\n              aria-hidden=\"true\"\n              className={clsx('text-neutral-400', 'size-5', startIconClassName)}\n            />\n          </div>\n        )}\n\n        <input\n          id={id}\n          aria-describedby={hasError ? messageId : undefined}\n          aria-invalid={hasError ? true : undefined}\n          type={type}\n          placeholder={placeholder}\n          value={value}\n          onChange={(event) => onChange?.(event.target.value, event)}\n          required={required}\n          disabled={isDisabled}\n          {...props}\n          className={clsx(\n            'block w-full',\n            'px-[13px] py-[9px]',\n            'outline:none',\n            'border border-neutral-200 disabled:border-neutral-100',\n            'bg-neutral-50',\n            'rounded',\n            'text-sm text-neutral-900 placeholder:text-neutral-500 disabled:text-neutral-400 disabled:placeholder:text-neutral-400',\n            'focus:outline-none',\n            'focus:border-indigo-600 focus:ring-4 focus:ring-indigo-600/[.12] focus:ring-offset-0',\n            hasError && 'focus:border-red-600 focus:ring-red-600/[.12]',\n            'disabled:pointer-events-none',\n            StartIcon && 'pl-[41px]',\n            EndIcon && 'pr-[38px]',\n            className,\n          )}\n        />\n\n        {EndIcon && (\n          <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3.5\">\n            <EndIcon\n              aria-hidden=\"true\"\n              className={clsx('text-neutral-400', 'size-4', endIconClassName)}\n            />\n          </div>\n        )}\n      </div>\n\n      {hasBottomSection && (\n        <div\n          id={messageId}\n          className={clsx(\n            'text-sm text-neutral-500',\n            hasError && 'text-red-600',\n          )}>\n          {errorMessage || hintMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextInput;\n"
    },
    "/src/components/ui/Toast/index.js": {
      "code": "import Toast from './Toast';\n\nexport default Toast;\n"
    },
    "/src/components/ui/Toast/Toast.jsx": {
      "code": "import clsx from 'clsx';\nimport React from 'react';\n\nconst Toast = ({ type, message }) => {\n  const badge = (\n    <div\n      className={clsx(\n        'flex items-center',\n        'px-2.5 py-0.5',\n        'h-6',\n        'bg-white',\n        'shadow',\n        'rounded-full',\n        'text-sm',\n        type === 'error' && 'text-red-800',\n        type === 'success' && 'text-green-700',\n      )}>\n      {type === 'error' ? 'Error' : 'Success'}\n    </div>\n  );\n\n  return (\n    <div className={clsx('z-toast fixed inset-x-0 top-10')}>\n      <div\n        className={clsx(\n          'mx-4 md:mx-auto md:w-max',\n          'flex items-center gap-3',\n          'p-1 pr-2.5',\n          'rounded-full',\n          'text-sm font-medium',\n          type === 'success' && 'bg-green-50 text-green-700',\n          type === 'error' && 'bg-red-50 text-red-600',\n        )}>\n        {badge}\n        <span>{message}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Toast;\n"
    },
    "/src/components/ui/Tooltip/index.js": {
      "code": "import Tooltip from './Tooltip';\n\nexport default Tooltip;\n"
    },
    "/src/components/ui/Tooltip/Tooltip.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nconst Tooltip = ({ children, content, position = 'top', show = true }) => {\n  const [visible, setVisible] = useState(false);\n\n  const positions = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',\n  };\n\n  const arrowPositions = {\n    top: 'bottom-[-4px] left-1/2 transform -translate-x-1/2 border-t-neutral-950 border-t-8 border-x-8 border-x-transparent',\n    bottom:\n      'top-[-4px] left-1/2 transform -translate-x-1/2 border-b-neutral-950 border-b-8 border-x-8 border-x-transparent',\n    left: 'right-[-4px] top-1/2 transform -translate-y-1/2 border-l-neutral-950 border-l-8 border-y-8 border-y-transparent',\n    right:\n      'left-[-4px] top-1/2 transform -translate-y-1/2 border-r-neutral-950 border-r-8 border-y-8 border-y-transparent',\n  };\n\n  return (\n    <div\n      className=\"relative flex items-center\"\n      onMouseEnter={() => show && setVisible(true)}\n      onMouseLeave={() => show && setVisible(false)}>\n      {children}\n      {visible && (\n        <div\n          className={clsx(\n            'absolute min-w-max max-w-xs rounded-lg px-3 py-2 shadow-lg',\n            'bg-neutral-950',\n            'text-xs font-medium text-white',\n            positions[position],\n          )}>\n          {content}\n          <div className={clsx('absolute', arrowPositions[position])} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Tooltip;\n"
    },
    "/src/constants.js": {
      "code": "export const COLORS = {\n  white: { value: '#fff', label: 'White' },\n  black: { value: '#000', label: 'Black' },\n  red: { value: '#DC2626', label: 'Red' },\n  orange: { value: '#EA580C', label: 'Orange' },\n  yellow: { value: '#F59E0B', label: 'Yellow' },\n  green: { value: '#10B981', label: 'Green' },\n  blue: { value: '#4F46E5', label: 'Blue' },\n  brown: { value: '#CA8A04', label: 'Brown' },\n  beige: { value: '#d2b08a', label: 'Beige' },\n  pink: { value: '#EC4899', label: 'Pink' },\n};\n\nexport const SIZE = {\n  xs: { short: 'XS', long: 'Extra Small' },\n  sm: { short: 'S', long: 'Small' },\n  md: { short: 'M', long: 'Medium' },\n  lg: { short: 'L', long: 'Large' },\n  xl: { short: 'XL', long: 'Extra Large' },\n};\n\nexport const COLLECTIONS_OPTIONS = {\n  title: 'Collections',\n  key: 'collection',\n  items: [\n    {\n      name: 'Latest arrivals',\n      value: 'latest',\n      href: '/products?collectionId=latest',\n    },\n    {\n      name: 'Urban Oasis',\n      value: 'urban',\n      href: '/products?collectionId=urban',\n    },\n    {\n      name: 'Cozy Comfort',\n      value: 'cozy',\n      href: '/products?collectionId=cozy',\n    },\n    {\n      name: 'Fresh Fusion',\n      value: 'fresh',\n      href: '/products?collectionId=fresh',\n    },\n  ],\n};\n\nexport const COLORS_OPTIONS = {\n  title: 'Colors',\n  key: 'color',\n  items: [\n    {\n      color: COLORS.white.value,\n      value: 'white',\n    },\n    {\n      color: COLORS.black.value,\n      value: 'black',\n    },\n    {\n      color: COLORS.red.value,\n      value: 'red',\n    },\n    {\n      color: COLORS.orange.value,\n      value: 'orange',\n    },\n    {\n      color: COLORS.yellow.value,\n      value: 'yellow',\n    },\n    {\n      color: COLORS.green.value,\n      value: 'green',\n    },\n    {\n      color: COLORS.blue.value,\n      value: 'blue',\n    },\n    {\n      color: COLORS.brown.value,\n      value: 'brown',\n    },\n    {\n      color: COLORS.beige.value,\n      value: 'beige',\n    },\n    {\n      color: COLORS.pink.value,\n      value: 'pink',\n    },\n  ],\n};\n\nexport const CATEGORY_OPTIONS = {\n  title: 'Category',\n  key: 'category',\n  items: [\n    {\n      name: 'Unisex',\n      value: 'unisex',\n      href: '/products?categoryId=unisex',\n    },\n    {\n      name: 'Women',\n      value: 'women',\n      href: '/products?categoryId=women',\n    },\n    {\n      name: 'Men',\n      value: 'men',\n      href: '/products?categoryId=men',\n    },\n  ],\n};\n\nexport const RATING_OPTIONS = {\n  title: 'Rating',\n  key: 'rating',\n  items: [\n    {\n      value: 5,\n      name: '5 star rating',\n    },\n    {\n      value: 4,\n      name: '4 star rating',\n    },\n    {\n      value: 3,\n      name: '3 star rating',\n    },\n    {\n      value: 2,\n      name: '2 star rating',\n    },\n    {\n      value: 1,\n      name: '1 star rating',\n    },\n  ],\n};\n\nexport const SORT_OPTIONS = [\n  {\n    name: 'Newest',\n    value: 'created',\n    direction: 'desc',\n  },\n  {\n    name: 'Best rating',\n    value: 'rating',\n    direction: 'desc',\n  },\n  {\n    name: 'Most popular',\n    value: 'popularity',\n    direction: 'desc',\n  },\n  {\n    name: 'Price: Low to high',\n    value: 'price',\n    direction: 'asc',\n  },\n  {\n    name: 'Price: High to low',\n    value: 'price',\n    direction: 'desc',\n  },\n];\n\nexport const FIELD_NAME = {\n  email: 'Email',\n  country: 'Country',\n  firstName: 'First name',\n  lastName: 'Last name',\n  address1: 'Address',\n  address2: '',\n  city: 'City',\n  state: 'State',\n  zip: 'Zip',\n  deliveryMethod: 'Delivery method',\n  cardNumber: 'Card number',\n  nameOnCard: 'Name on card',\n  cardExpiry: 'Expiry',\n  cardCvv: 'CVV',\n};\n\nexport const COUNTRIES = [\n  {\n    id: 'US',\n    name: 'United States',\n  },\n  {\n    id: 'IN',\n    name: 'India',\n  },\n];\n\nexport const STATES = {\n  US: [\n    {\n      id: 'AZ',\n      name: 'Arizona',\n    },\n    {\n      id: 'CA',\n      name: 'California',\n    },\n    {\n      id: 'FL',\n      name: 'Florida',\n    },\n    {\n      id: 'IA',\n      name: 'Iowa',\n    },\n  ],\n  IN: [\n    {\n      id: 'AP',\n      name: 'Andhra Pradesh',\n    },\n    {\n      id: 'AS',\n      name: 'Assam',\n    },\n    {\n      id: 'JH',\n      name: 'Jharkhand',\n    },\n    {\n      id: 'KA',\n      name: 'Karnataka',\n    },\n  ],\n};\n"
    },
    "/src/context/CartContext.jsx": {
      "code": "import {\n  createContext,\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getStockChangedData, mergeSampleAndStorageCartItems } from 'src/utils';\n\nconst CartContext = createContext();\n\nexport const useCartContext = () => useContext(CartContext);\n\nconst CartContextProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const [cartItems, setCartItems] = useState([]);\n  const [stockChangedItems, setStockChangedItems] = useState([]);\n  const [discount, setDiscount] = useState();\n  const [isFetching, setIsFetching] = useState(true);\n  const [checkingStock, setCheckingStock] = useState(false);\n  const [showStockChangedModal, setShowStockChangedModal] = useState(false);\n  const [isCartEmptyAfterStockChanged, setIsCartEmptyAfterStockChanged] =\n    useState(false);\n\n  const updateCartItems = (items) => {\n    setCartItems(items);\n    localStorage.setItem('cart', JSON.stringify(items));\n  };\n\n  const checkForStockChanged = useCallback(async (cartItems) => {\n    setCheckingStock(true);\n    const { products: data, isCartEmpty } =\n      await getStockChangedData(cartItems);\n    setStockChangedItems(data);\n    setShowStockChangedModal(data.length > 0);\n    setCheckingStock(false);\n    setIsCartEmptyAfterStockChanged(isCartEmpty);\n    return data.length > 0;\n  }, []);\n\n  const getCartItems = useCallback(async () => {\n    setIsFetching(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/cart-sample`,\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      const finalCartItems = mergeSampleAndStorageCartItems(result.items);\n      updateCartItems(finalCartItems);\n      checkForStockChanged(finalCartItems);\n    }\n    setIsFetching(false);\n  }, [checkForStockChanged]);\n\n  useEffect(() => {\n    getCartItems();\n  }, [getCartItems]);\n\n  const addToCart = useCallback(\n    (item) => {\n      const existingItem = cartItems.find(\n        (cartItem) =>\n          cartItem.product.product_id === item.product.product_id &&\n          cartItem.unit.sku === item.unit.sku,\n      );\n\n      let updatedCart;\n      if (existingItem) {\n        updatedCart = cartItems.map((cartItem) =>\n          cartItem.product.product_id === item.product.product_id &&\n          cartItem.unit.sku === item.unit.sku\n            ? item\n            : cartItem,\n        );\n      } else {\n        updatedCart = [...cartItems, item];\n      }\n      console.log(updatedCart);\n      updateCartItems(updatedCart);\n    },\n    [cartItems],\n  );\n\n  const removeFromCart = useCallback(\n    (item) => {\n      const updatedCart = cartItems.filter(\n        (cartItem) =>\n          !(\n            cartItem.product.product_id === item.product.product_id &&\n            cartItem.unit.color === item.unit.color &&\n            cartItem.unit.size === item.unit.size\n          ),\n      );\n      updateCartItems(updatedCart);\n    },\n    [cartItems],\n  );\n\n  const changeQuantity = useCallback(\n    (item, increment = true) => {\n      let updatedCart;\n\n      updatedCart = cartItems.map((cartItem) => {\n        if (\n          cartItem.product.product_id === item.product.product_id &&\n          cartItem.unit.sku === item.unit.sku\n        ) {\n          const finalQuantity = increment\n            ? item.quantity + 1\n            : item.quantity - 1;\n\n          return {\n            ...cartItem,\n            quantity: finalQuantity,\n            total_list_price: finalQuantity * cartItem.unit.list_price,\n            total_sale_price: finalQuantity * cartItem.unit.sale_price,\n          };\n        }\n        return cartItem;\n      });\n\n      updateCartItems(updatedCart);\n    },\n    [cartItems],\n  );\n\n  const acknowledgeStockChanged = useCallback(\n    (cartItems, currentStockItems, isCartEmptyAfterStockChanged) => {\n      const updatedCartItems = cartItems.reduce((acc, item) => {\n        const product = currentStockItems.find(\n          (cartItem) =>\n            cartItem.product.product_id === item.product.product_id &&\n            cartItem.unit.sku === item.unit.sku,\n        );\n\n        if (product) {\n          // if there is stock then update the quantity, otherwise remove it\n          if (product.stock > 0) {\n            acc.push({\n              ...item,\n              quantity: product.stock,\n            });\n          }\n        } else {\n          acc.push(item);\n        }\n\n        setShowStockChangedModal(false);\n\n        return acc;\n      }, []);\n\n      updateCartItems(updatedCartItems);\n      if (isCartEmptyAfterStockChanged) {\n        navigate('/cart');\n      }\n    },\n    [navigate],\n  );\n\n  const value = useMemo(\n    () => ({\n      cartItems,\n      isFetching,\n      discount,\n      stockChangedItems,\n      checkingStock,\n      showStockChangedModal,\n      isCartEmptyAfterStockChanged,\n      setShowStockChangedModal,\n      acknowledgeStockChanged,\n      checkForStockChanged,\n      setDiscount,\n      addToCart,\n      removeFromCart,\n      incrementQuantity: (item) => changeQuantity(item, true),\n      decrementQuantity: (item) => changeQuantity(item, false),\n    }),\n    [\n      cartItems,\n      isFetching,\n      discount,\n      stockChangedItems,\n      checkingStock,\n      showStockChangedModal,\n      isCartEmptyAfterStockChanged,\n      setShowStockChangedModal,\n      acknowledgeStockChanged,\n      checkForStockChanged,\n      setDiscount,\n      addToCart,\n      removeFromCart,\n      changeQuantity,\n    ],\n  );\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n\nexport default CartContextProvider;\n"
    },
    "/src/context/ToastContext.jsx": {
      "code": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\n\nconst ToastContext = createContext({\n  toast: {\n    show: false,\n    type: '',\n    message: '',\n  },\n  showToast: () => {},\n});\n\nexport const useToast = () => {\n  const { showToast } = useContext(ToastContext);\n\n  const error = (message) => showToast('error', message);\n  const success = (message) => showToast('success', message);\n\n  return { error, success };\n};\n\nexport const useToastContext = () => useContext(ToastContext);\n\nconst ToastContextProvider = ({ children }) => {\n  const [toast, setToast] = useState({\n    show: false,\n    type: '',\n    message: '',\n  });\n\n  const showToast = useCallback((type, message) => {\n    setToast({\n      show: true,\n      type,\n      message,\n    });\n    setTimeout(() => {\n      setToast({\n        show: false,\n        type: '',\n        message: '',\n      });\n    }, 10000);\n  }, []);\n\n  const value = useMemo(() => {\n    return {\n      toast,\n      showToast,\n    };\n  }, [toast, showToast]);\n\n  return (\n    <ToastContext.Provider value={value}>{children}</ToastContext.Provider>\n  );\n};\n\nexport default ToastContextProvider;\n"
    },
    "/src/index.css": {
      "code": "@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family:\n    'Noto Sans',\n    system-ui,\n    -apple-system,\n    BlinkMacSystemFont,\n    'Segoe UI',\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    'Open Sans',\n    'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  background: linear-gradient(147.52deg, #f9fafb 8.89%, #d2d6db 100.48%);\n}\n\n/* Custom z-index */\n.z-sticky {\n  z-index: 1020;\n}\n.z-fixed {\n  z-index: 1030;\n}\n.z-dropdown {\n  z-index: 1000;\n}\n.z-modal {\n  z-index: 1055;\n}\n.z-toast {\n  z-index: 1090;\n}\n\n/* Custom animations and keyframes */\n@keyframes slideout {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n\n.animate-slideout {\n  animation: slideout 0.4s ease-out;\n}\n\n/* Custom box shadow */\n.shadow-custom {\n  box-shadow:\n    0px 1px 2px 0 rgb(0 0 0 / 0.06),\n    0px 1px 3px 0 rgb(0 0 0 / 0.1);\n}\n\n/* Custom background */\n.bg-collection {\n  background: linear-gradient(\n    60deg,\n    rgba(0, 0, 0, 0.4) -9.37%,\n    rgba(0, 0, 0, 0.132) 100%\n  );\n}\n.bg-collection-hover {\n  background: linear-gradient(\n    360deg,\n    rgba(0, 0, 0, 0.6) -9.37%,\n    rgba(0, 0, 0, 0.198) 100%\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport ScrollToTop from './components/ScrollToTop';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Router>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </React.StrictMode>,\n);\n"
    },
    "/src/Layout.jsx": {
      "code": "import clsx from 'clsx';\nimport { Outlet } from 'react-router-dom';\n\nimport Toast from 'src/components/ui/Toast';\nimport Navbar from 'src/components/Navbar';\nimport Footer from 'src/components/Footer';\n\nimport { useToastContext } from 'src/context/ToastContext';\n\nconst Layout = () => {\n  const { toast } = useToastContext();\n  return (\n    <>\n      <Navbar className=\"mt-4\" />\n      <main className=\"mx-auto min-h-screen max-w-[1440px] p-4\">\n        {toast.show && <Toast type={toast.type} message={toast.message} />}\n        <div\n          className={clsx(\n            'min-h-[calc(100vh_-_32px)] rounded-md bg-white',\n            'shadow-sm md:shadow-md lg:shadow-lg',\n            'text-neutral-900',\n          )}>\n          <Outlet />\n          <Footer />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Layout;\n"
    },
    "/src/pages/App.js": {
      "code": "import { Route, Routes } from 'react-router-dom';\n\nimport './App.css';\n\nimport Layout from './Layout';\nimport ProductListingPage from 'src/pages/ProductListing';\nimport ProductDetailPage from './pages/ProductDetail';\n\nimport ToastContextProvider from './context/ToastContext';\nimport LatestArrivalsPage from './pages/LatestArrivals';\nimport CartContextProvider from './context/CartContext';\nimport StorefrontPage from './pages/Storefront';\n\nfunction App() {\n  return (\n    <ToastContextProvider>\n      <CartContextProvider>\n        <Routes>\n          <Route path=\"/\" element={<Layout />}>\n            <Route path=\"/\" element={<StorefrontPage />} />\n            <Route path=\"/products\" element={<ProductListingPage />} />\n            <Route path=\"/latest\" element={<LatestArrivalsPage />} />\n            <Route\n              path=\"/products/:productId\"\n              element={<ProductDetailPage />}\n            />\n          </Route>\n        </Routes>\n      </CartContextProvider>\n    </ToastContextProvider>\n  );\n}\n\nexport default App;\n"
    },
    "/src/pages/Cart/CartPage.jsx": {
      "code": "import clsx from 'clsx';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useCartContext } from 'src/context/CartContext';\nimport CartItemsSection from './components/CartItemsSection';\nimport OrderSummarySection from './components/OrderSummarySection';\nimport EmptyCart from './components/EmptyCart';\n\nconst CartPage = () => {\n  const navigate = useNavigate();\n  const { isFetching, checkForStockChanged, cartItems } = useCartContext();\n\n  const onSubmitCart = async (e) => {\n    e.preventDefault();\n    const hasStockChanged = await checkForStockChanged(cartItems);\n\n    if (!hasStockChanged) {\n      navigate('/checkout');\n    }\n  };\n\n  return (\n    <div\n      className={clsx('px-4 py-12 md:py-16 lg:p-24', 'flex flex-col gap-16')}>\n      <h2 className=\"text-3xl font-semibold md:text-5xl\">Shopping Cart</h2>\n\n      {isFetching ? (\n        <div>Loading...</div>\n      ) : cartItems.length === 0 ? (\n        <EmptyCart />\n      ) : (\n        <form\n          onSubmit={onSubmitCart}\n          className={clsx(\n            'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n            'gap-x-4 gap-y-16 md:gap-x-8',\n          )}>\n          <CartItemsSection className=\"col-span-4 md:col-span-6 lg:col-span-8\" />\n          <OrderSummarySection className=\"col-span-4 md:col-span-6 lg:col-span-4\" />\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default CartPage;\n"
    },
    "/src/pages/Cart/components/CartItemsSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nimport CartControl from 'src/components/CartControl';\nimport Button from 'src/components/ui/Button';\nimport Link from 'src/components/ui/Link';\nimport ConfirmModal from 'src/components/ui/ConfirmModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { COLORS, SIZE } from 'src/constants';\nimport { formatPrice } from '../../../utils';\n\nconst CartItemsSection = ({ className }) => {\n  const { cartItems, incrementQuantity, decrementQuantity, removeFromCart } =\n    useCartContext();\n  const [removalConfirmation, setRemovalConfirmation] = useState({\n    show: false,\n    onAction: () => {},\n  });\n\n  const closeRemovalConfirmation = () => {\n    setRemovalConfirmation({\n      show: false,\n      onAction: () => {},\n    });\n  };\n\n  const openRemovalConfirmation = (item) => {\n    setRemovalConfirmation({\n      show: true,\n      onAction: () => {\n        removeFromCart(item);\n        closeRemovalConfirmation();\n      },\n    });\n  };\n\n  return (\n    <section aria-describedby=\"cart-items-section\" className={clsx(className)}>\n      <h2 className=\"sr-only\">Items in your shopping cart</h2>\n      <ul\n        className={clsx(\n          'divide-y divide-dashed divide-neutral-300',\n          className,\n        )}>\n        {cartItems.map((item) => {\n          const productUrl = `/products/${item.product.product_id}`;\n          const { unit, product, total_list_price, total_sale_price } = item;\n          const hasDiscount =\n            !!total_sale_price && total_sale_price !== total_list_price;\n\n          return (\n            <li\n              key={product.product_id + unit.size + unit.color}\n              className={clsx(\n                'flex flex-col gap-4 md:flex-row md:gap-8',\n                'py-[31.5px] first:pt-0 last:pb-0',\n              )}>\n              <div className=\"relative\">\n                <img\n                  src={unit.image_url}\n                  alt={`${SIZE[unit.size]?.long ?? unit.size} ${\n                    product.name\n                  } in ${unit.color}`}\n                  className=\"h-[200px] w-full rounded-lg object-cover md:min-w-[280px]\"\n                />\n                <Link\n                  to={productUrl}\n                  variant=\"unstyled\"\n                  className=\"absolute inset-0\"\n                />\n              </div>\n\n              <div className=\"flex flex-col gap-4\">\n                <Link\n                  to={productUrl}\n                  className=\"text-2xl font-medium\"\n                  variant=\"unstyled\">\n                  {product.name}\n                </Link>\n                <span className=\"font-medium text-neutral-600\">\n                  {COLORS[unit.color].label}\n                  {unit.size && (\n                    <>\n                      {' â€¢ '}\n                      {SIZE[unit.size]?.long ?? unit.size}\n                    </>\n                  )}\n                </span>\n                <span className=\"text-sm text-neutral-600\">\n                  {product.description}\n                </span>\n                <div className=\"flex items-center justify-between gap-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <CartControl\n                      quantity={item.quantity}\n                      increment={() => incrementQuantity(item)}\n                      decrement={() => decrementQuantity(item)}\n                      availableStock={unit.stock}\n                    />\n                    <Button\n                      label=\"Remove\"\n                      variant=\"gray-link\"\n                      onClick={() => openRemovalConfirmation(item)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-end gap-2\">\n                    <span className=\"text-right text-lg font-medium text-neutral-900\">\n                      $\n                      {hasDiscount\n                        ? formatPrice(total_sale_price)\n                        : formatPrice(total_list_price)}\n                    </span>\n                    {hasDiscount && (\n                      <span className=\"text-xs text-neutral-600 line-through\">\n                        ${formatPrice(total_list_price)}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n      {removalConfirmation.show && (\n        <ConfirmModal\n          isOpen={removalConfirmation.show}\n          title=\"Confirm Item Removal\"\n          description=\"Are you sure you want to remove this item from your shopping cart?\"\n          primaryActionLabel=\"Yes\"\n          secondaryActionLabel=\"Cancel\"\n          onClose={closeRemovalConfirmation}\n          onAction={removalConfirmation.onAction}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default CartItemsSection;\n"
    },
    "/src/pages/Cart/components/CouponCode.jsx": {
      "code": "import { useState } from 'react';\nimport { RiCloseFill, RiCouponLine } from 'react-icons/ri';\nimport Badge from 'src/components/ui/Badge';\n\nimport Button from 'src/components/ui/Button';\nimport Tag from 'src/components/ui/Tag';\nimport TextInput from 'src/components/ui/TextInput';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nconst CouponCode = () => {\n  const { setDiscount, discount } = useCartContext();\n  const [showAddCoupon, setShowAddCoupon] = useState(false);\n  const [couponCode, setCouponCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isChecking, setIsChecking] = useState(false);\n\n  const checkCoupon = async () => {\n    if (!couponCode) {\n      setErrorMessage('Please enter a valid code.');\n      return;\n    }\n    const requestOptions = {\n      method: 'PUT',\n      body: JSON.stringify({\n        coupon_code: couponCode,\n      }),\n    };\n\n    setIsChecking(true);\n    const response = await fetch(\n      'https://www.greatfrontend.com/api/projects/challenges/e-commerce/coupons/apply',\n      requestOptions,\n    );\n    const result = await response.json();\n    if (result.error) {\n      setErrorMessage(\"Sorry, but this coupon doesn't exist.\");\n    } else {\n      setDiscount(result);\n      setCouponCode('');\n      setErrorMessage('');\n    }\n    setIsChecking(false);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {discount && (\n        <div className=\"flex items-center justify-between gap-2\">\n          <Badge label={discount.coupon_code} variant=\"brand\" size=\"lg\" />\n          <span className=\"text-right text-lg font-semibold text-neutral-900\">\n            -\n            {discount.discount_amount\n              ? `$${discount.discount_amount.toFixed(2)}`\n              : `${discount.discount_percentage}%`}\n          </span>\n        </div>\n      )}\n      {showAddCoupon || discount ? (\n        <div className=\"flex flex-col items-start gap-2 py-1\">\n          <div className=\"flex w-full gap-2\">\n            <TextInput\n              placeholder=\"Enter coupon code\"\n              label=\"Coupon Code\"\n              value={couponCode}\n              errorMessage={errorMessage}\n              onChange={(value) => setCouponCode(value)}\n            />\n            <Button\n              label=\"Apply\"\n              variant=\"secondary\"\n              className=\"mt-[26px] w-20 shrink-0\"\n              onClick={checkCoupon}\n              isDisabled={isChecking}\n            />\n          </div>\n          {discount && (\n            <Tag\n              label={discount.coupon_code}\n              actionIcon={RiCloseFill}\n              onAction={() => setDiscount(null)}\n            />\n          )}\n        </div>\n      ) : (\n        <div className=\"flex justify-end\">\n          <Button\n            onClick={() => setShowAddCoupon(true)}\n            label=\"Add coupon code\"\n            variant=\"link\"\n            size=\"lg\"\n            startIcon={RiCouponLine}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CouponCode;\n"
    },
    "/src/pages/Cart/components/EmptyCart.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowRightLine, RiShoppingCart2Line } from 'react-icons/ri';\n\nimport IconWrapper from 'src/components/IconWrapper';\nimport Button from 'src/components/ui/Button';\n\nconst EmptyCart = () => {\n  return (\n    <div\n      className={clsx(\n        'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n        'gap-x-4 gap-y-8 md:gap-x-8',\n      )}>\n      <div\n        className={clsx(\n          'col-span-4 md:col-span-6 lg:col-span-5',\n          'h-[372px] md:h-[400px] lg:h-full',\n          'flex flex-col items-center justify-center gap-5',\n        )}>\n        <IconWrapper icon={RiShoppingCart2Line} />\n        <div\n          className={clsx('flex flex-col items-center gap-2', 'text-center')}>\n          <span className=\"text-xl font-medium\">Your cart is empty</span>\n          <span>Let's go explore some products</span>\n        </div>\n        <Button\n          size=\"xl\"\n          label=\"Explore products\"\n          endIcon={RiArrowRightLine}\n          href=\"/products\"\n        />\n      </div>\n      <img\n        src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/empty-cart.jpg\"\n        alt=\"Empty cart\"\n        className={clsx(\n          'w-full object-cover',\n          'h-[180px] md:h-80 lg:h-full',\n          'col-span-4 md:col-span-6 lg:col-span-7',\n        )}\n      />\n    </div>\n  );\n};\n\nexport default EmptyCart;\n"
    },
    "/src/pages/Cart/components/OrderSummarySection.jsx": {
      "code": "import { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useMediaQuery } from 'usehooks-ts';\n\nimport Button from 'src/components/ui/Button';\nimport CouponCode from './CouponCode';\nimport StockChangedModal from './StockChangedModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { getFinalAmount, getSubtotal } from '../../../utils';\n\nconst OrderSummarySection = ({ className }) => {\n  const isMobileAndBelow = useMediaQuery('(max-width: 767px)');\n  const { cartItems, discount, checkingStock } = useCartContext();\n\n  const subtotal = useMemo(() => getSubtotal(cartItems), [cartItems]);\n  const finalAmount = useMemo(\n    () => getFinalAmount(subtotal, discount),\n    [subtotal, discount],\n  );\n\n  return (\n    <section\n      aria-describedby=\"cart-summary\"\n      className={clsx(\n        'flex flex-col gap-8',\n        'h-fit w-full',\n        'bg-white',\n        'rounded-lg p-[15px] md:p-[31px]',\n        'border border-neutral-200',\n        className,\n      )}>\n      <h2 className=\"text-2xl font-semibold text-neutral-900\">Order Summary</h2>\n\n      <div\n        className={clsx(\n          'flex flex-col',\n          'divide-y divide-dashed divide-neutral-300',\n        )}>\n        <dl className={clsx('flex flex-col gap-4', 'pb-[31.5px]')}>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className=\"text-neutral-600\">Subtotal</span>\n            <span className=\"text-lg font-semibold\">${subtotal}</span>\n          </div>\n          <div className=\"flex items-center justify-between gap-2\">\n            <span className=\"text-neutral-600\">Shipping</span>\n            <span className=\"text-lg font-semibold\">FREE</span>\n          </div>\n\n          <CouponCode />\n        </dl>\n\n        <div className={clsx('flex flex-col gap-8', 'pt-[31.5px]')}>\n          <div className=\"flex justify-between gap-4\">\n            <span className=\"text-2xl font-medium\">Total</span>\n            <span className=\"text-4xl font-semibold\">${finalAmount}</span>\n          </div>\n          <Button\n            type=\"submit\"\n            label=\"Checkout\"\n            isDisabled={checkingStock}\n            size={isMobileAndBelow ? 'xl' : '2xl'}\n          />\n        </div>\n      </div>\n\n      <StockChangedModal />\n    </section>\n  );\n};\n\nexport default OrderSummarySection;\n"
    },
    "/src/pages/Cart/components/StockChangedModal.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowRightLine } from 'react-icons/ri';\n\nimport ConfirmModal from 'src/components/ui/ConfirmModal';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { COLORS, SIZE } from 'src/constants';\n\nconst StockChangedModal = () => {\n  const {\n    stockChangedItems,\n    cartItems,\n    showStockChangedModal,\n    acknowledgeStockChanged,\n    isCartEmptyAfterStockChanged,\n  } = useCartContext();\n\n  if (!showStockChangedModal) {\n    return null;\n  }\n\n  return (\n    <ConfirmModal\n      isOpen={showStockChangedModal}\n      className={clsx('p-8', 'w-[592px]')}\n      actionBtnSize=\"xl\"\n      primaryActionLabel={\n        isCartEmptyAfterStockChanged ? 'Go back to cart' : 'Ok'\n      }\n      onAction={() =>\n        acknowledgeStockChanged(\n          cartItems,\n          stockChangedItems,\n          isCartEmptyAfterStockChanged,\n        )\n      }>\n      <div className=\"flex flex-col gap-8\">\n        <div className={clsx('flex flex-col gap-2')}>\n          <h2 className=\"text-xl font-semibold\">Change of stock</h2>\n          <span className=\"text-sm text-neutral-600\">\n            While you were browsing, certain stocks have become unavailable:\n          </span>\n        </div>\n        <ul\n          className={clsx(\n            'divide-y divide-dashed divide-neutral-300',\n            'max-h-[500px] overflow-y-auto',\n          )}>\n          {stockChangedItems.map((item) => {\n            const { unit, product, stock, cartQuantity } = item;\n            return (\n              <li\n                key={unit.sku}\n                className={clsx(\n                  'flex gap-6',\n                  'py-[31.5px] first:pt-0 last:pb-0',\n                )}>\n                <img\n                  src={unit.image_url}\n                  className=\"size-20 rounded-lg object-cover\"\n                  alt={`${SIZE[unit.size]?.long ?? unit.size} ${\n                    product.name\n                  } in ${unit.color}`}\n                />\n                <div className={clsx('flex flex-col gap-2', 'font-medium')}>\n                  <span className=\"text-xl\">{product.name}</span>\n                  <span className=\"text-neutral-600\">\n                    {COLORS[unit.color].label}\n                    {unit.size && (\n                      <>\n                        {' â€¢ '}\n                        {SIZE[unit.size]?.long ?? unit.size}\n                      </>\n                    )}\n                  </span>\n                  <div\n                    className={clsx(\n                      'flex items-center gap-2',\n                      'text-neutral-600',\n                    )}>\n                    <span>Quantity: {cartQuantity}</span>\n                    <RiArrowRightLine className=\"size-3\" />\n                    <span>{stock}</span>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        {isCartEmptyAfterStockChanged && (\n          <span className=\"text-sm\">\n            Since there are no more items in your order, you will be brought\n            back to cart.\n          </span>\n        )}\n      </div>\n    </ConfirmModal>\n  );\n};\n\nexport default StockChangedModal;\n"
    },
    "/src/pages/Cart/index.js": {
      "code": "import CartPage from './CartPage';\n\nexport default CartPage;\n"
    },
    "/src/pages/Checkout/CheckoutPage.jsx": {
      "code": "import { useState } from 'react';\nimport clsx from 'clsx';\nimport { useNavigate } from 'react-router-dom';\nimport { RiArrowLeftSLine } from 'react-icons/ri';\n\nimport Button from 'src/components/ui/Button';\nimport CheckoutFormSection from './components/CheckoutFormSection';\nimport CheckoutOrderSummary from './components/CheckoutOrderSummary';\nimport StockChangedModal from '../Cart/components/StockChangedModal';\n\nimport { useToast } from 'src/context/ToastContext';\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { FIELD_NAME } from 'src/constants';\n\nconst CheckoutPage = () => {\n  const navigate = useNavigate();\n  const { checkForStockChanged, cartItems } = useCartContext();\n  const toast = useToast();\n\n  const [formData, setFormData] = useState({\n    email: { value: '', error: '', required: true },\n    country: { value: 'US', error: '', required: true },\n    firstName: { value: '', error: '', required: true },\n    lastName: { value: '', error: '', required: true },\n    address1: { value: '', error: '', required: true },\n    address2: { value: '', error: '', required: false },\n    city: { value: '', error: '', required: true },\n    state: { value: '', error: '', required: true },\n    zip: { value: '', error: '', required: true },\n    deliveryMethod: { value: 'standard', error: '', required: true },\n    cardNumber: { value: '', error: '', required: true },\n    nameOnCard: { value: '', error: '', required: true },\n    cardExpiry: { value: '', error: '', required: true },\n    cardCvv: { value: '', error: '', required: true },\n  });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const hasStockedChanged = await checkForStockChanged(cartItems);\n    if (hasStockedChanged) {\n      return;\n    }\n    const newFormData = { ...formData };\n    let hasErrors = false;\n\n    // Check for empty fields\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key].value && formData[key].required) {\n        newFormData[key].error = `${FIELD_NAME[key]} is required`;\n        hasErrors = true;\n      }\n    });\n    if (hasErrors) {\n      toast.error(\n        'We faced a problem processing your checkout. Please try again or contact us.',\n      );\n    } else {\n      navigate('/order-success');\n    }\n  };\n\n  return (\n    <div\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'flex flex-col justify-start gap-8',\n      )}>\n      <Button\n        label=\"Back to Shopping Cart\"\n        href=\"/cart\"\n        variant=\"link\"\n        startIcon={RiArrowLeftSLine}\n        className=\"w-fit\"\n      />\n\n      <h2 className=\"text-2xl font-semibold md:text-3xl lg:text-4xl\">\n        Checkout\n      </h2>\n\n      <form\n        onSubmit={onSubmit}\n        className={clsx(\n          'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n          'gap-x-4 gap-y-8 md:gap-x-8',\n        )}>\n        <CheckoutFormSection\n          className=\"col-span-4 md:col-span-6 lg:col-span-6\"\n          formData={formData}\n          setFormData={setFormData}\n        />\n        <CheckoutOrderSummary className=\"col-span-4 md:col-span-6 lg:col-span-6\" />\n      </form>\n      <StockChangedModal />\n    </div>\n  );\n};\n\nexport default CheckoutPage;\n"
    },
    "/src/pages/Checkout/components/CheckoutFormContentSection.jsx": {
      "code": "import clsx from 'clsx';\n\nconst CheckoutFormContentSection = ({ className, title, children }) => {\n  return (\n    <div className={clsx('flex flex-col gap-6', className)}>\n      <h3 className=\"text-lg font-medium text-neutral-600\">{title}</h3>\n      {children}\n    </div>\n  );\n};\n\nexport default CheckoutFormContentSection;\n"
    },
    "/src/pages/Checkout/components/CheckoutFormSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiArrowDownSLine } from 'react-icons/ri';\n\nimport TextInput from 'src/components/ui/TextInput';\nimport CheckoutFormContentSection from './CheckoutFormContentSection';\nimport CountriesStatesAutocomplete from './CountriesStatesAutocomplete';\nimport DeliveryMethodCard from './DeliveryMethodCard';\nimport { MasterCard } from './PaymentCard';\n\nimport { COUNTRIES, FIELD_NAME, STATES } from 'src/constants';\n\nconst CheckoutFormSection = ({ className, formData, setFormData }) => {\n  const {\n    email,\n    country,\n    firstName,\n    lastName,\n    address1,\n    address2,\n    city,\n    state,\n    zip,\n    deliveryMethod,\n    cardNumber,\n    nameOnCard,\n    cardExpiry,\n    cardCvv,\n  } = formData;\n\n  const onChange = (value, e) => {\n    const { name, required } = e.target;\n\n    if (['cardNumber', 'zip', 'cardCvv'].includes(name) && isNaN(value)) {\n      return;\n    }\n    let errorMessage = '';\n    if (name === 'email' && !e.target.validity.valid) {\n      errorMessage = 'Please enter a valid email address.';\n    }\n\n    if (name === 'cardExpiry') {\n      const expiryDatePattern = /^(0[1-9]|1[0-2])\\/(\\d{2})$/;\n      const match = value.match(expiryDatePattern);\n      if (!match) {\n        errorMessage = 'Invalid expiry date format';\n      } else {\n        const month = parseInt(match[1], 10);\n        const year = parseInt(match[2], 10);\n\n        // check if the month is correct format\n        if (month < 1 || month > 12) {\n          errorMessage = 'Invalid expiry date format';\n        }\n\n        const currentYear = new Date().getFullYear() % 100;\n        const currentMonth = new Date().getMonth() + 1;\n\n        // check if th expiry date is in future\n        if (\n          year < currentYear ||\n          (year === currentYear && month < currentMonth)\n        ) {\n          errorMessage = 'Invalid expiry date format';\n        }\n      }\n    }\n\n    if (required && !value) {\n      errorMessage = `${FIELD_NAME[name]} is required`;\n    }\n\n    setFormData((prevState) => ({\n      ...prevState,\n      [name]: {\n        value,\n        error: errorMessage,\n      },\n    }));\n  };\n\n  const onSelectDeliveryMethod = (value) => {\n    setFormData((prevState) => ({\n      ...prevState,\n      deliveryMethod: { value },\n    }));\n  };\n\n  const onSelectCountry = (value) => {\n    setFormData((prevState) => ({\n      ...prevState,\n      country: { value },\n    }));\n  };\n  const onSelectState = (value) => {\n    setFormData((prevState) => ({\n      ...prevState,\n      state: { value },\n    }));\n  };\n\n  return (\n    <section\n      aria-describedby=\"checkout-form\"\n      className={clsx('divide-y divide-neutral-300', className)}>\n      <CheckoutFormContentSection title=\"Contact Information\" className=\"pb-10\">\n        <TextInput\n          placeholder=\"user@example\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={email.value}\n          errorMessage={email.error}\n          onChange={onChange}\n          required={email.required}\n        />\n      </CheckoutFormContentSection>\n\n      <CheckoutFormContentSection\n        title=\"Shipping Information\"\n        className=\"py-10\">\n        <CountriesStatesAutocomplete\n          value={country.value}\n          OPTIONS={COUNTRIES}\n          label=\"Country / Region\"\n          name=\"country\"\n          onSelect={(item) => onSelectCountry(item.id)}\n          endIcon={RiArrowDownSLine}\n          required={country.required}\n        />\n        <div className=\"flex flex-col gap-6 md:flex-row md:gap-8\">\n          <TextInput\n            placeholder=\"john\"\n            label=\"First name\"\n            name=\"firstName\"\n            onChange={onChange}\n            value={firstName.value}\n            required={firstName.required}\n            errorMessage={firstName.error}\n          />\n          <TextInput\n            placeholder=\"Appleseed\"\n            label=\"Last name\"\n            name=\"lastName\"\n            value={lastName.value}\n            errorMessage={lastName.error}\n            onChange={onChange}\n            required={lastName.required}\n          />\n        </div>\n\n        <div className=\"flex flex-col gap-4\">\n          <TextInput\n            placeholder=\"Street address\"\n            label=\"Address\"\n            name=\"address1\"\n            onChange={onChange}\n            value={address1.value}\n            errorMessage={address1.error}\n            required={address1.required}\n          />\n          <TextInput\n            placeholder=\"Apartment, suite, etc (optional)\"\n            label=\"optional address\"\n            name=\"address2\"\n            onChange={onChange}\n            value={address2.value}\n            required={address2.required}\n            isLabelHidden\n          />\n        </div>\n        <div className=\"flex flex-col gap-6 md:flex-row md:gap-8\">\n          <TextInput\n            placeholder=\"City\"\n            label=\"City\"\n            name=\"city\"\n            onChange={onChange}\n            value={city.value}\n            errorMessage={city.error}\n            required={city.required}\n          />\n          <CountriesStatesAutocomplete\n            OPTIONS={STATES[country.value] ?? []}\n            endIcon={RiArrowDownSLine}\n            placeholder=\"State\"\n            label=\"State\"\n            name=\"state\"\n            onSelect={(item) => onSelectState(item.name)}\n            value={state.value}\n            errorMessage={state.error}\n            required={state.required}\n            isDisabled={!country}\n          />\n          <TextInput\n            placeholder=\"12345\"\n            label=\"Zip\"\n            name=\"zip\"\n            onChange={onChange}\n            value={zip.value}\n            errorMessage={zip.error}\n            maxLength={9}\n            required={zip.required}\n          />\n        </div>\n      </CheckoutFormContentSection>\n\n      <CheckoutFormContentSection title=\"Delivery Method\" className=\"py-10\">\n        <div className=\"flex flex-col gap-4 md:flex-row\" role=\"radiogroup\">\n          <DeliveryMethodCard\n            method=\"standard\"\n            isSelected={deliveryMethod.value === 'standard'}\n            onSelect={onSelectDeliveryMethod}\n          />\n          <DeliveryMethodCard\n            method=\"express\"\n            isSelected={deliveryMethod.value === 'express'}\n            onSelect={onSelectDeliveryMethod}\n          />\n        </div>\n      </CheckoutFormContentSection>\n\n      <CheckoutFormContentSection title=\"Payment Method\" className=\"pt-10\">\n        <TextInput\n          placeholder=\"1234 1234 1234 1234\"\n          label=\"Card number\"\n          name=\"cardNumber\"\n          onChange={onChange}\n          value={cardNumber.value}\n          errorMessage={cardNumber.error}\n          maxLength={12}\n          startIcon={MasterCard}\n          startIconClassName=\"!h-6 w-[34px]\"\n          className=\"!py-[11px] !pl-14\"\n          required={cardNumber.required}\n        />\n        <TextInput\n          placeholder=\"Full name on card\"\n          label=\"Name on card\"\n          name=\"nameOnCard\"\n          onChange={onChange}\n          value={nameOnCard.value}\n          errorMessage={nameOnCard.error}\n          required={nameOnCard.required}\n        />\n\n        <div className=\"flex gap-8\">\n          <TextInput\n            placeholder=\"MM/YY\"\n            label=\"Expiry\"\n            name=\"cardExpiry\"\n            onChange={onChange}\n            value={cardExpiry.value}\n            errorMessage={cardExpiry.error}\n            maxLength={5}\n            required={cardExpiry.required}\n          />\n          <TextInput\n            placeholder=\"123\"\n            label=\"CVV\"\n            name=\"cardCvv\"\n            onChange={onChange}\n            value={cardCvv.value}\n            errorMessage={cardCvv.error}\n            maxLength={3}\n            required={cardCvv.required}\n          />\n        </div>\n      </CheckoutFormContentSection>\n    </section>\n  );\n};\n\nexport default CheckoutFormSection;\n"
    },
    "/src/pages/Checkout/components/CheckoutOrderSummary.jsx": {
      "code": "import clsx from 'clsx';\nimport { useMemo } from 'react';\nimport { RiLockLine } from 'react-icons/ri';\n\nimport Button from 'src/components/ui/Button';\nimport OrderProductCard from 'src/components/OrderProductCard';\nimport OrderAmountSummary from 'src/components/OrderAmountSummary';\n\nimport { useCartContext } from 'src/context/CartContext';\n\nimport { getFinalAmount, getSubtotal } from 'src/utils';\n\nconst CheckoutOrderSummary = ({ className }) => {\n  const { cartItems, discount, checkingStock } = useCartContext();\n\n  const subtotal = useMemo(() => getSubtotal(cartItems), [cartItems]);\n  const finalAmount = useMemo(\n    () => getFinalAmount(subtotal, discount),\n    [subtotal, discount],\n  );\n\n  return (\n    <section\n      aria-describedby=\"checkout-form\"\n      className={clsx(\n        'rounded-lg',\n        'border border-neutral-200',\n        'p-[15px] md:p-[31px]',\n        'flex flex-col gap-8',\n        className,\n      )}>\n      <h3 className=\"text-xl font-semibold\">Order Summary</h3>\n      <div\n        className={clsx('divide-y divide-neutral-300', 'flex flex-1 flex-col')}>\n        <ul\n          className={clsx('divide-y divide-dashed divide-neutral-300', 'pb-8')}>\n          {cartItems.map((item) => (\n            <li\n              key={item.unit.sku}\n              className={clsx('py-8 first:pt-0 last:pb-0')}>\n              <OrderProductCard data={item} />\n            </li>\n          ))}\n        </ul>\n\n        <OrderAmountSummary\n          subtotal={subtotal}\n          discountCode={discount?.coupon_code}\n          discountAmount={discount?.discount_amount?.toFixed(2)}\n          discountPercentage={discount?.discount_percentage}\n          className={clsx('py-8', 'lg:flex-1', 'h-full md:h-[247px] lg:h-full')}\n        />\n\n        <div className={clsx('flex justify-between gap-4', 'pt-8')}>\n          <span className=\"text-2xl font-medium\">Total</span>\n          <span className=\"text-4xl font-semibold\">${finalAmount}</span>\n        </div>\n      </div>\n\n      <Button\n        type=\"submit\"\n        label=\"Confirm order\"\n        size=\"xl\"\n        isDisabled={checkingStock}\n        startIcon={RiLockLine}\n      />\n    </section>\n  );\n};\n\nexport default CheckoutOrderSummary;\n"
    },
    "/src/pages/Checkout/components/CountriesStatesAutocomplete.jsx": {
      "code": "import { useEffect, useState } from 'react';\n\nimport Autocomplete from 'src/components/ui/Autocomplete';\n\nconst CountriesStatesAutocomplete = ({\n  onSelect,\n  value,\n  OPTIONS,\n  ...props\n}) => {\n  const [options, setOptions] = useState(OPTIONS);\n  const [selectedValue, setSelectedValue] = useState(\n    OPTIONS.find((option) => option.id === value)?.name ?? value ?? '',\n  );\n\n  useEffect(() => {\n    if (selectedValue) {\n      setOptions(\n        OPTIONS.filter((option) =>\n          option.name.toLowerCase().includes(selectedValue.toLowerCase()),\n        ),\n      );\n    } else {\n      setOptions(OPTIONS);\n    }\n  }, [selectedValue, OPTIONS]);\n\n  const handleSelect = (item) => {\n    onSelect(item);\n    setSelectedValue(\n      OPTIONS.find((option) => option.id === item.id)?.name ?? '',\n    );\n  };\n\n  return (\n    <Autocomplete\n      {...props}\n      onChange={setSelectedValue}\n      value={selectedValue}\n      onSelect={handleSelect}\n      options={options}\n    />\n  );\n};\n\nexport default CountriesStatesAutocomplete;\n"
    },
    "/src/pages/Checkout/components/DeliveryMethodCard.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback } from 'react';\nimport { RiCheckboxCircleFill } from 'react-icons/ri';\n\nconst DELIVERY_METHOD = {\n  standard: {\n    title: 'Standard',\n    days: '4-10',\n    price: null,\n  },\n  express: {\n    title: 'Express',\n    days: '2-5',\n    price: '15.00',\n  },\n};\n\nconst DeliveryMethodCard = ({ method, isSelected, onSelect }) => {\n  const { title, days, price } = DELIVERY_METHOD[method];\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        onSelect(method);\n      }\n    },\n    [method, onSelect],\n  );\n\n  return (\n    <div\n      aria-label={title}\n      tabIndex={0}\n      role=\"radio\"\n      aria-checked={isSelected}\n      onKeyDown={handleKeyDown}\n      onClick={() => onSelect(method)}\n      className={clsx(\n        'flex grow flex-col gap-2',\n        'min-h-[120px]',\n        'bg-white hover:bg-neutral-50',\n        'rounded-lg p-[15px]',\n        'flex-1',\n        isSelected\n          ? 'border border-indigo-600'\n          : 'border border-neutral-200 hover:border-[#e6e6e6]',\n        isSelected && 'outline outline-1 -outline-offset-2 outline-indigo-600',\n        'focus:outline-none',\n        'focus:ring-4 focus:ring-indigo-600/[.12] focus:ring-offset-0',\n        'cursor-pointer',\n      )}>\n      <div className=\"flex grow gap-2 self-stretch\">\n        <div className=\"flex grow flex-col\">\n          <span className=\"font-medium\">{title}</span>\n          <span className=\"text-sm text-neutral-600\">{days} business days</span>\n        </div>\n\n        {isSelected && (\n          <RiCheckboxCircleFill\n            className=\"size-6 text-indigo-500\"\n            aria-hidden\n          />\n        )}\n      </div>\n      <span className=\"font-medium\">{price ? `$${price}` : 'FREE'}</span>\n    </div>\n  );\n};\n\nexport default DeliveryMethodCard;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/Amex.jsx": {
      "code": "const Amex = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"58\" height=\"40\" rx=\"6\" fill=\"#1F72CD\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M10.1593 14.1665L4.85742 26.2444H11.2045L11.9913 24.3187H13.7899L14.5767 26.2444H21.5631V24.7746L22.1856 26.2444H25.7995L26.422 24.7436V26.2444H40.9517L42.7184 24.3687L44.3727 26.2444L51.8355 26.2599L46.5169 20.2392L51.8355 14.1665H44.4885L42.7686 16.0076L41.1664 14.1665H25.3601L24.0028 17.2839L22.6136 14.1665H16.2798V15.5863L15.5752 14.1665H10.1593ZM11.388 15.8813H14.4818L17.9985 24.0714V15.8813H21.3877L24.104 21.7536L26.6073 15.8813H29.9796V24.548H27.9276L27.9109 17.7569L24.9193 24.548H23.0838L20.0755 17.7569V24.548H15.8542L15.0539 22.6051H10.7303L9.93165 24.5463H7.66992L11.388 15.8813ZM40.1991 15.8813H31.8555V24.5429H40.0699L42.7175 21.6723L45.2695 24.5429H47.9371L44.0597 20.2372L47.9371 15.8813H45.3852L42.751 18.719L40.1991 15.8813ZM12.8932 17.3481L11.4688 20.8094H14.316L12.8932 17.3481ZM33.916 19.2579V17.6758V17.6743H39.1222L41.3939 20.2045L39.0215 22.7485H33.916V21.0213H38.4678V19.2579H33.916Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n\nexport default Amex;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/Card.jsx": {
      "code": "const Card = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" fill=\"white\" />\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" stroke=\"#E5E5E5\" />\n      <path\n        d=\"M20.0049 11H38.0049C38.5572 11 39.0049 11.4477 39.0049 12V28C39.0049 28.5523 38.5572 29 38.0049 29H20.0049C19.4526 29 19.0049 28.5523 19.0049 28V12C19.0049 11.4477 19.4526 11 20.0049 11ZM37.0049 19H21.0049V27H37.0049V19ZM37.0049 17V13H21.0049V17H37.0049ZM31.0049 23H35.0049V25H31.0049V23Z\"\n        fill=\"#6366F1\"\n      />\n    </svg>\n  );\n};\n\nexport default Card;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/index.js": {
      "code": "import Amex from './Amex';\nimport MasterCard from './MasterCard';\nimport Visa from './Visa';\nimport Card from './Card';\n\nexport { Amex, MasterCard, Visa, Card };\n"
    },
    "/src/pages/Checkout/components/PaymentCard/MasterCard.jsx": {
      "code": "const MasterCard = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" fill=\"white\" />\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" stroke=\"#E5E5E5\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M28.6312 28.0494C26.6579 29.7126 24.0982 30.7166 21.3011 30.7166C15.0597 30.7166 10 25.7171 10 19.55C10 13.3828 15.0597 8.3833 21.3011 8.3833C24.0982 8.3833 26.6579 9.38733 28.6312 11.0505C30.6046 9.38733 33.1643 8.3833 35.9613 8.3833C42.2028 8.3833 47.2625 13.3828 47.2625 19.55C47.2625 25.7171 42.2028 30.7166 35.9613 30.7166C33.1643 30.7166 30.6046 29.7126 28.6312 28.0494Z\"\n        fill=\"#ED0006\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M28.6313 28.0494C31.0615 26.0012 32.6024 22.9534 32.6024 19.55C32.6024 16.1465 31.0615 13.0987 28.6313 11.0505C30.6047 9.38733 33.1644 8.3833 35.9614 8.3833C42.2029 8.3833 47.2626 13.3828 47.2626 19.55C47.2626 25.7171 42.2029 30.7166 35.9614 30.7166C33.1644 30.7166 30.6047 29.7126 28.6313 28.0494Z\"\n        fill=\"#F9A000\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M28.6311 28.0495C31.0613 26.0013 32.6023 22.9534 32.6023 19.5499C32.6023 16.1466 31.0614 13.0988 28.6313 11.0506C26.2011 13.0988 24.6602 16.1466 24.6602 19.5501C24.6602 22.9535 26.2011 26.0013 28.6311 28.0495Z\"\n        fill=\"#FF5E00\"\n      />\n    </svg>\n  );\n};\n\nexport default MasterCard;\n"
    },
    "/src/pages/Checkout/components/PaymentCard/Visa.jsx": {
      "code": "const Visa = ({ className, ...props }) => {\n  return (\n    <svg\n      width=\"58\"\n      height=\"40\"\n      viewBox=\"0 0 58 40\"\n      fill=\"none\"\n      className={className}\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" fill=\"white\" />\n      <rect x=\"0.5\" y=\"0.5\" width=\"57\" height=\"39\" rx=\"5.5\" stroke=\"#E5E5E5\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M17.9171 26.4304H14.4842L11.9099 16.3206C11.7877 15.8556 11.5283 15.4444 11.1467 15.2507C10.1943 14.7637 9.14486 14.3762 8 14.1807V13.7915H13.5301C14.2934 13.7915 14.8658 14.3762 14.9612 15.0552L16.2969 22.3477L19.7281 13.7915H23.0656L17.9171 26.4304ZM24.9745 26.4304H21.7324L24.4021 13.7915H27.6442L24.9745 26.4304ZM31.8372 17.2929C31.9326 16.6121 32.505 16.2229 33.1729 16.2229C34.2223 16.1252 35.3655 16.3206 36.3196 16.8059L36.892 14.0847C35.9379 13.6955 34.8885 13.5 33.9361 13.5C30.7894 13.5 28.4997 15.2507 28.4997 17.6804C28.4997 19.5288 30.1216 20.4993 31.2665 21.084C32.505 21.667 32.9821 22.0563 32.8867 22.6393C32.8867 23.5137 31.9326 23.903 30.9802 23.903C29.8354 23.903 28.6905 23.6115 27.6427 23.1245L27.0703 25.8474C28.2152 26.3327 29.4538 26.5281 30.5986 26.5281C34.1269 26.6242 36.3196 24.8752 36.3196 22.25C36.3196 18.9441 31.8372 18.7504 31.8372 17.2929ZM47.6667 26.4304L45.0924 13.7915H42.3273C41.7549 13.7915 41.1825 14.1807 40.9917 14.7637L36.2248 26.4304H39.5623L40.2284 24.5837H44.3292L44.7108 26.4304H47.6667ZM42.8052 17.1953L43.7576 21.9587H41.0879L42.8052 17.1953Z\"\n        fill=\"#172B85\"\n      />\n    </svg>\n  );\n};\n\nexport default Visa;\n"
    },
    "/src/pages/Checkout/index.js": {
      "code": "import CheckoutPage from './CheckoutPage';\n\nexport default CheckoutPage;\n"
    },
    "/src/pages/LatestArrivals/components/LatestArrivalsSection.jsx": {
      "code": "import { useEffect, useState } from 'react';\n\nimport Button from 'src/components/ui/Button';\nimport ProductGridSection from 'src/components/ProductGridSection';\nimport clsx from 'clsx';\n\nconst LatestArrivalsSection = ({ className }) => {\n  const [products, setProducts] = useState([]);\n  const [isProductsLoading, setIsProductsLoading] = useState(true);\n\n  const getLatestArrivalProducts = async () => {\n    setIsProductsLoading(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products?collection=latest`,\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      setProducts(result.data);\n    }\n    setIsProductsLoading(false);\n  };\n\n  useEffect(() => {\n    getLatestArrivalProducts();\n  }, []);\n\n  return (\n    <section\n      aria-describedby=\"latest-arrivals-section\"\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'flex flex-col gap-8',\n        'h-full',\n        className,\n      )}>\n      <div className=\"flex items-center justify-between md:items-start\">\n        <div className=\"text-2xl font-semibold md:text-3xl\">\n          Latest Arrivals\n        </div>\n        <Button label=\"View all\" variant=\"secondary\" href=\"/latest\" size=\"lg\" />\n      </div>\n      {isProductsLoading ? (\n        <div className=\"flex h-full w-full items-center justify-center\">\n          Loading...\n        </div>\n      ) : (\n        <ProductGridSection products={products} />\n      )}\n    </section>\n  );\n};\n\nexport default LatestArrivalsSection;\n"
    },
    "/src/pages/LatestArrivals/index.js": {
      "code": "import LatestArrivalsPage from './LatestArrivalsPage';\n\nexport default LatestArrivalsPage;\n"
    },
    "/src/pages/LatestArrivals/LatestArrivalsPage.jsx": {
      "code": "import LatestArrivalsSection from './components/LatestArrivalsSection';\n\nconst LatestArrivalsPage = () => {\n  return <LatestArrivalsSection className=\"md:py-[72px] lg:py-[104px]\" />;\n};\n\nexport default LatestArrivalsPage;\n"
    },
    "/src/pages/OrderSuccess/index.js": {
      "code": "import OrderSuccessPage from './OrderSuccessPage';\n\nexport default OrderSuccessPage;\n"
    },
    "/src/pages/OrderSuccess/OrderSuccessPage.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback, useEffect, useState } from 'react';\nimport { RiArrowRightLine, RiFileCopy2Line } from 'react-icons/ri';\nimport OrderAmountSummary from 'src/components/OrderAmountSummary';\nimport OrderProductCard from 'src/components/OrderProductCard';\n\nimport Button from 'src/components/ui/Button';\nimport { Visa } from '../Checkout/components/PaymentCard';\nimport { formatInternationalPhoneNumber } from 'src/utils';\n\nconst OrderSuccessPage = () => {\n  const [orderData, setOrderData] = useState(null);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const getOrder = useCallback(async () => {\n    setIsFetching(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/order-sample`,\n    );\n    const result = await data.json();\n    if (!result.error) {\n      setOrderData(result);\n    }\n    setIsFetching(false);\n  }, []);\n\n  useEffect(() => {\n    getOrder();\n  }, [getOrder]);\n\n  return (\n    <div\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n        'gap-x-4 gap-y-12 md:gap-x-8',\n      )}>\n      {isFetching ? (\n        <div>Loading....</div>\n      ) : (\n        <>\n          <img\n            src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/order-success-desktop.jpg\"\n            alt=\"Order success banner\"\n            className={clsx('hidden lg:block', 'col-span-6', 'h-full w-full')}\n          />\n          <img\n            src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/order-success-tablet.jpg\"\n            alt=\"Order success banner\"\n            className={clsx(\n              'hidden md:block lg:hidden',\n              'col-span-6',\n              'h-full w-full',\n            )}\n          />\n          <img\n            src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/order-success-mobile.jpg\"\n            alt=\"Order success banner\"\n            className={clsx(\n              'block md:hidden',\n              'col-span-4 md:col-span-6',\n              'h-[196px] w-full',\n            )}\n          />\n          <div\n            className={clsx(\n              'col-span-4 md:col-span-6',\n              'flex flex-col gap-12',\n            )}>\n            <div className=\"flex flex-col justify-center gap-4\">\n              <h2 className=\"text-3xl font-semibold md:text-4xl\">\n                Your order is confirmed.\n              </h2>\n              <span className=\"text-neutral-600\">\n                Your order is now in the queue and being processed. We'll let\n                you know when we ship it out!\n              </span>\n            </div>\n\n            <div className=\"flex flex-col items-start justify-center gap-1\">\n              <span className=\"text-neutral-600\">Order Number</span>\n              <Button\n                label={orderData.order_id}\n                variant=\"link\"\n                size=\"lg\"\n                endIcon={RiFileCopy2Line}\n                iconClassName=\"!p-0\"\n                onClick={() => {\n                  try {\n                    navigator.clipboard.writeText(orderData.order_id);\n                  } catch (error) {\n                    console.error('Copy failed', error);\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"flex flex-col gap-8\">\n              <div\n                className={clsx('divide-y divide-dashed divide-neutral-300')}>\n                <ul\n                  className={clsx(\n                    'divide-y divide-dashed divide-neutral-300',\n                    'pb-[31.5px]',\n                  )}>\n                  {orderData.items.map((item) => (\n                    <li\n                      key={item.unit.sku}\n                      className={clsx('py-[31.5px] first:pt-0 last:pb-0')}>\n                      <OrderProductCard data={item} type=\"order\" />\n                    </li>\n                  ))}\n                </ul>\n                <OrderAmountSummary\n                  subtotal={orderData.summary.subtotal.toFixed(2)}\n                  discountCode={orderData.summary?.discount_code}\n                  discountAmount={orderData.summary?.discount?.toFixed(2)}\n                  className={clsx('gap-6 py-[31.5px]')}\n                  type=\"order\"\n                />\n\n                <div\n                  className={clsx('flex justify-between gap-4', 'pt-[31.5px]')}>\n                  <span>Total</span>\n                  <span className=\"text-2xl font-semibold\">\n                    ${orderData.summary.total.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex flex-col gap-8 md:flex-row\">\n                <div\n                  className={clsx(\n                    'flex flex-col gap-4',\n                    'flex-1',\n                    'md:h-[164px]',\n                    'text-neutral-600',\n                  )}>\n                  <span>Shipping address</span>\n                  <div className={clsx('flex flex-col', 'text-sm')}>\n                    <span>\n                      {formatInternationalPhoneNumber(\n                        orderData.shipping_details.phone,\n                      )}\n                    </span>\n                    <span>{orderData.shipping_details.address.line1}</span>\n                    {orderData.shipping_details.address.line2 && (\n                      <span>{orderData.shipping_details.address.line2}</span>\n                    )}\n                    <span>\n                      {orderData.shipping_details.address.city},{' '}\n                      {orderData.shipping_details.address.state}{' '}\n                      {orderData.shipping_details.address.zip}\n                    </span>\n                    <span>United States</span>\n                  </div>\n                </div>\n                <div className=\"flex flex-1 flex-col gap-4\">\n                  <span className=\"text-neutral-600\">Payment</span>\n                  <div className=\"flex items-center gap-4\">\n                    <Visa className=\"h-12 w-[70px]\" />\n                    <div className=\"flex flex-col gap-0.5\">\n                      <span className=\"text-sm\">\n                        Ending with {orderData.payment_method.last_4}\n                      </span>\n                      <span className=\"text-sm text-neutral-600\">\n                        Expires {orderData.payment_method.exp_month} /{' '}\n                        {orderData.payment_method.exp_year.toString().slice(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Button\n              variant=\"secondary\"\n              size=\"lg\"\n              label=\"Continue Shopping\"\n              endIcon={RiArrowRightLine}\n              href=\"/products\"\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default OrderSuccessPage;\n"
    },
    "/src/pages/ProductDetail/components/AvailableColors.jsx": {
      "code": "import { useMemo } from 'react';\n\nimport ColorSwatches from 'src/components/ui/ColorSwatches';\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { COLORS } from 'src/constants';\nimport { getUnavailableColors } from '../utils';\n\nconst AvailableColors = () => {\n  const { selectedColor, setSelectedColor, product } =\n    useProductDetailsContext();\n  const { colors } = product;\n  const unavailableColors = useMemo(\n    () => getUnavailableColors(product),\n    [product],\n  );\n\n  return (\n    <fieldset aria-label=\"Choose a color\">\n      <legend className=\"text-sm text-neutral-500\">Available Colors</legend>\n      <div className=\"mt-4 flex flex-wrap gap-4\">\n        {colors.map((color) => (\n          <ColorSwatches\n            key={color}\n            color={COLORS[color].value}\n            outOfStock={unavailableColors.includes(color)}\n            selected={selectedColor === color}\n            onClick={() => setSelectedColor(color)}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n};\n\nexport default AvailableColors;\n"
    },
    "/src/pages/ProductDetail/components/AvailableSizes.jsx": {
      "code": "import clsx from 'clsx';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { getUnavailableSizes } from '../utils';\n\nconst SIZE_MAP = {\n  xs: 'XS',\n  sm: 'S',\n  md: 'M',\n  lg: 'L',\n  xl: 'XL',\n};\n\nconst AvailableSizes = () => {\n  const { selectedSize, setSelectedSize, selectedColor, product } =\n    useProductDetailsContext();\n  const { sizes } = product;\n  const unavailableSizes = getUnavailableSizes({\n    product,\n    color: selectedColor,\n  });\n\n  return (\n    <fieldset aria-label=\"Choose a size\">\n      <legend className=\"text-sm text-neutral-500\">Available Sizes</legend>\n\n      <div className={clsx('mt-4', 'flex flex-wrap gap-4')}>\n        {sizes.map((size) => {\n          const outOfStock = unavailableSizes.includes(size);\n\n          return (\n            <label\n              key={size}\n              aria-label={size}\n              className={clsx(\n                outOfStock ? 'pointer-events-none' : 'cursor-pointer',\n              )}>\n              <input\n                type=\"radio\"\n                name=\"size-choice\"\n                value={size}\n                className=\"sr-only\"\n                disabled={outOfStock}\n                tabIndex={-1}\n                aria-checked={selectedSize === size}\n                onChange={() => setSelectedSize(size)}\n              />\n              <span\n                aria-hidden=\"true\"\n                tabIndex={selectedSize === size || outOfStock ? -1 : 0}\n                className={clsx(\n                  'h-12 w-16',\n                  'flex items-center justify-center gap-1.5',\n                  'px-5 py-3',\n                  'font-medium uppercase',\n                  'rounded border',\n                  'focus:outline-none',\n                  outOfStock\n                    ? [\n                        'text-neutral-400',\n                        'pointer-events-none',\n                        'bg-neutral-100',\n                      ]\n                    : [\n                        'text-neutral-900',\n                        'cursor-pointer',\n                        'bg-white hover:bg-neutral-50 focus:bg-neutral-50',\n                      ],\n                  selectedSize === size\n                    ? 'border-indigo-600'\n                    : 'border-neutral-200',\n                  outOfStock && selectedSize !== size && 'border-none',\n                )}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    setSelectedSize(size);\n                  }\n                }}>\n                {SIZE_MAP[size] ? SIZE_MAP[size] : size}\n              </span>\n            </label>\n          );\n        })}\n      </div>\n    </fieldset>\n  );\n};\n\nexport default AvailableSizes;\n"
    },
    "/src/pages/ProductDetail/components/InfoSection.jsx": {
      "code": "import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/components/ui/Accordion';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\n\nconst InfoSection = () => {\n  const { product } = useProductDetailsContext();\n  const { info } = product;\n\n  return (\n    <section aria-labelledby=\"product-faq\" className=\"mt-10\">\n      <Accordion>\n        {info.map((item) => (\n          <AccordionItem key={item.title} id={item.title}>\n            <AccordionTrigger>{item.title}</AccordionTrigger>\n            <AccordionContent>\n              <ul className=\"ml-4 list-disc pl-2 text-neutral-600\">\n                {item.description.map((descItem) => (\n                  <li key={descItem}>{descItem}</li>\n                ))}\n              </ul>\n            </AccordionContent>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </section>\n  );\n};\n\nexport default InfoSection;\n"
    },
    "/src/pages/ProductDetail/components/ProductCollectionSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ProductGridSection from 'src/components/ProductGridSection';\n\nconst ProductCollectionSection = () => {\n  const { productId } = useParams();\n  const [collectionProducts, setCollectionsProducts] = useState([]);\n  const [isCollectionProductsLoading, setIsCollectionProductsLoading] =\n    useState(true);\n\n  const getCollectionsProducts = useCallback(async () => {\n    setIsCollectionProductsLoading(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products?collection=latest`,\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      setCollectionsProducts(\n        result.data.filter((item) => item.product_id !== productId).slice(0, 4),\n      );\n    }\n    setIsCollectionProductsLoading(false);\n  }, [productId]);\n\n  useEffect(() => {\n    getCollectionsProducts();\n  }, [getCollectionsProducts]);\n\n  return (\n    <section\n      className={clsx('px-4 py-12 md:py-16 lg:p-24', 'flex flex-col gap-8')}>\n      <span className=\"text-2xl font-semibold md:text-3xl\">\n        In this collection\n      </span>\n      {isCollectionProductsLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <ProductGridSection products={collectionProducts} />\n      )}\n    </section>\n  );\n};\n\nexport default ProductCollectionSection;\n"
    },
    "/src/pages/ProductDetail/components/ProductDetailsContext.jsx": {
      "code": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getUnavailableSizes } from '../utils';\n\nconst ProductDetailsContext = createContext();\n\nexport const useProductDetailsContext = () => useContext(ProductDetailsContext);\n\nconst ProductDetailsContextProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const { productId } = useParams();\n  const [product, setProduct] = useState(null);\n  const [isProductLoading, setIsProductLoading] = useState(false);\n  const [selectedColor, setSelectedColor] = useState(null);\n  const [selectedSize, setSelectedSize] = useState(null);\n  const [itemQuantity, setItemQuantity] = useState(1);\n\n  const getProduct = useCallback(async () => {\n    setIsProductLoading(true);\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products/${productId}`,\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      setProduct(result);\n      setSelectedColor(result.colors[0]);\n    } else {\n      return navigate('/not-found');\n    }\n    setIsProductLoading(false);\n  }, [productId, navigate]);\n\n  const decrementQuantity = useCallback(() => {\n    setItemQuantity((prev) => (prev > 1 ? prev - 1 : 1));\n  }, []);\n\n  const incrementQuantity = useCallback(() => {\n    setItemQuantity((prev) => prev + 1);\n  }, []);\n\n  useEffect(() => {\n    getProduct();\n  }, [getProduct]);\n\n  // Set first available size as the initial selected size\n  useEffect(() => {\n    if (!product || !selectedColor) {\n      return;\n    }\n\n    const unavailableSizes = getUnavailableSizes({\n      product,\n      color: selectedColor,\n    });\n    const availableSizes = [...product.sizes].filter(\n      (size) => !unavailableSizes.includes(size),\n    );\n    if (availableSizes.length > 0) {\n      setSelectedSize(availableSizes[0]);\n    }\n  }, [selectedColor, product]);\n\n  // Reset item quantity to 1 when we change color or size\n  useEffect(() => {\n    setItemQuantity(1);\n  }, [selectedColor, selectedSize]);\n\n  const value = useMemo(() => {\n    return {\n      product,\n      isProductLoading,\n      selectedColor,\n      selectedSize,\n      itemQuantity,\n      setSelectedColor,\n      setSelectedSize,\n      incrementQuantity,\n      decrementQuantity,\n    };\n  }, [\n    product,\n    isProductLoading,\n    selectedColor,\n    setSelectedColor,\n    selectedSize,\n    setSelectedSize,\n    itemQuantity,\n    incrementQuantity,\n    decrementQuantity,\n  ]);\n\n  return (\n    <ProductDetailsContext.Provider value={value}>\n      {children}\n    </ProductDetailsContext.Provider>\n  );\n};\n\nexport default ProductDetailsContextProvider;\n"
    },
    "/src/pages/ProductDetail/components/ProductDetailSection.jsx": {
      "code": "import clsx from 'clsx';\n\nimport ProductImages from './ProductImages';\nimport ProductMetadata from './ProductMetadata';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\n\nconst ProductDetail = () => {\n  const { isProductLoading, product } = useProductDetailsContext();\n\n  return (\n    <section\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'grid grid-cols-4 gap-x-4 gap-y-12 md:grid-cols-6 md:gap-x-8 lg:grid-cols-12',\n      )}>\n      {isProductLoading || !product ? (\n        <div\n          className={clsx(\n            'flex h-full w-full items-center justify-center',\n            'col-span-4 md:col-span-6 lg:col-span-12',\n          )}>\n          Loading...\n        </div>\n      ) : (\n        <>\n          <div className=\"col-span-4 md:col-span-6\">\n            <ProductImages />\n          </div>\n          <div className=\"col-span-4 md:col-span-6\">\n            <ProductMetadata />\n          </div>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default ProductDetail;\n"
    },
    "/src/pages/ProductDetail/components/ProductImages.jsx": {
      "code": "import { useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { getSelectedColorImages } from '../utils';\n\nconst ProductImages = () => {\n  const { product, selectedColor } = useProductDetailsContext();\n  const [selectedPreview, setSelectedPreview] = useState(0);\n\n  const images = getSelectedColorImages({ product, color: selectedColor });\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <img\n        src={product.images[selectedPreview].image_url}\n        alt=\"Selected preview\"\n        loading=\"lazy\"\n        className=\"h-[400px] w-full rounded-lg object-cover md:h-[800px]\"\n      />\n      <div className=\"flex gap-4 overflow-x-auto\">\n        {images.map((image, index) => (\n          <img\n            key={image.image_url + index}\n            src={image.image_url}\n            alt={`Preview ${index + 1}`}\n            loading=\"lazy\"\n            onClick={() => setSelectedPreview(index)}\n            className={clsx(\n              'block shrink-0 rounded-lg',\n              'h-[120px] w-20 object-cover md:h-[190px] md:w-[188px] lg:w-40',\n              'cursor-pointer',\n              index === selectedPreview && 'border-[3px] border-indigo-600',\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductImages;\n"
    },
    "/src/pages/ProductDetail/components/ProductMetadata.jsx": {
      "code": "import { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { useMediaQuery } from 'usehooks-ts';\n\nimport Badge from 'src/components/ui/Badge';\nimport Button from 'src/components/ui/Button';\nimport AvailableColors from './AvailableColors';\nimport AvailableSizes from './AvailableSizes';\nimport ProductQuantity from './ProductQuantity';\nimport InfoSection from './InfoSection';\n\nimport { useProductDetailsContext } from './ProductDetailsContext';\nimport { useCartContext } from 'src/context/CartContext';\nimport { getInventoryData, getSelectedColorImages } from '../utils';\nimport ProductReviews from './ProductReviews';\n\nconst ProductMetadata = () => {\n  const isMobileAndBelow = useMediaQuery('(max-width: 767px)');\n  const { product, selectedColor, selectedSize, itemQuantity } =\n    useProductDetailsContext();\n  const { addToCart } = useCartContext();\n\n  const { name, description, reviews, rating } = product;\n\n  const inventoryData = useMemo(\n    () =>\n      getInventoryData({ product, color: selectedColor, size: selectedSize }),\n    [selectedColor, selectedSize, product],\n  );\n  const images = getSelectedColorImages({ product, color: selectedColor });\n  const { discount_percentage, list_price, sale_price, stock } = inventoryData;\n\n  const roundedRating = Math.round(rating * 10) / 10;\n  const hasDiscount = !!discount_percentage;\n\n  const onAddToCart = (e) => {\n    e.preventDefault();\n\n    const item = {\n      product: {\n        product_id: product.product_id,\n        name: product.name,\n        description: product.description,\n      },\n      quantity: itemQuantity,\n      unit: {\n        color: inventoryData.color,\n        size: inventoryData.size,\n        sku: inventoryData.sku,\n        stock: inventoryData.stock,\n        sale_price: inventoryData.sale_price,\n        list_price: inventoryData.list_price,\n        image_url: images[0].image_url,\n      },\n      total_sale_price: itemQuantity * inventoryData.sale_price,\n      total_list_price: itemQuantity * inventoryData.list_price,\n    };\n    addToCart(item);\n  };\n\n  return (\n    <div>\n      <section\n        className={clsx('flex flex-col gap-8')}\n        aria-labelledby=\"information-heading\">\n        <div className=\"flex flex-col items-start\">\n          <h1 className=\"text-3xl font-semibold md:text-5xl\">{name}</h1>\n          <div className=\"mt-5\">\n            <div className=\"inline-flex items-end gap-2\">\n              <span className=\"text-3xl font-medium text-neutral-600\">\n                ${hasDiscount ? sale_price : list_price}\n              </span>\n              {hasDiscount && (\n                <span className=\"text-lg font-medium text-neutral-400 line-through\">\n                  ${list_price}\n                </span>\n              )}\n            </div>\n          </div>\n          {hasDiscount && (\n            <div className=\"mt-2\">\n              <Badge\n                label={`${discount_percentage}% OFF`}\n                size=\"lg\"\n                variant=\"warning\"\n              />\n            </div>\n          )}\n\n          <ProductReviews rating={roundedRating} reviews={reviews} />\n        </div>\n\n        <p className=\"text-neutral-600\">{description}</p>\n      </section>\n\n      <section aria-labelledby=\"product-options\" className=\"mt-8\">\n        <form className=\"flex flex-col gap-8\" onSubmit={onAddToCart}>\n          <AvailableColors />\n          <AvailableSizes />\n          <ProductQuantity availableStock={stock} />\n\n          {/* Out of stock message */}\n          {stock === 0 && (\n            <div className=\"text-xl font-semibold text-neutral-900\">\n              Sorry, this item is out of stock\n            </div>\n          )}\n\n          <Button\n            label=\"Add to Cart\"\n            type=\"submit\"\n            size={isMobileAndBelow ? 'xl' : '2xl'}\n            isDisabled={itemQuantity === 0 || stock === 0}\n          />\n        </form>\n      </section>\n\n      <InfoSection />\n    </div>\n  );\n};\n\nexport default ProductMetadata;\n"
    },
    "/src/pages/ProductDetail/components/ProductQuantity.jsx": {
      "code": "import CartControl from 'src/components/CartControl';\nimport { useProductDetailsContext } from './ProductDetailsContext';\n\nconst ProductQuantity = ({ availableStock }) => {\n  const { itemQuantity, incrementQuantity, decrementQuantity } =\n    useProductDetailsContext();\n\n  return (\n    <fieldset aria-label=\"Choose a color\">\n      <legend className=\"text-sm text-neutral-500\">Quantity</legend>\n      <div className=\"mt-4\">\n        <CartControl\n          quantity={itemQuantity}\n          decrement={decrementQuantity}\n          increment={incrementQuantity}\n          availableStock={availableStock}\n        />\n      </div>\n    </fieldset>\n  );\n};\n\nexport default ProductQuantity;\n"
    },
    "/src/pages/ProductDetail/components/ProductReviews.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState } from 'react';\n\nimport Button from 'src/components/ui/Button';\nimport Rating from 'src/components/ui/Rating/Rating';\nimport ProductReviewsModal from './ProductReviewsModal';\n\nconst ProductReviews = ({ rating, reviews }) => {\n  const [openReviewsModal, setOpenReviewsModal] = useState(false);\n  return (\n    <div className={clsx('flex flex-wrap items-center gap-2', 'mt-3')}>\n      <div className=\"text-xl text-neutral-900\">{rating ?? 0}</div>\n      <Rating value={rating ?? 0} />\n      {reviews > 0 ? (\n        <Button\n          label={`See all ${reviews} reviews`}\n          onClick={() => setOpenReviewsModal(true)}\n          variant=\"link\"\n          className=\"text-sm\"\n        />\n      ) : (\n        <div className=\"flex gap-[2px]\">\n          <span className=\"text-sm text-neutral-900\">No reviews yet.</span>\n          <Button\n            label=\"Be the first.\"\n            href=\"#\"\n            variant=\"link\"\n            className=\"text-sm\"\n          />\n        </div>\n      )}\n\n      <ProductReviewsModal\n        isOpen={openReviewsModal}\n        onClose={() => setOpenReviewsModal(false)}\n      />\n    </div>\n  );\n};\n\nexport default ProductReviews;\n"
    },
    "/src/pages/ProductDetail/components/ProductReviewsModal.jsx": {
      "code": "import Modal from 'src/components/ui/Modal';\nimport Reviews from 'src/components/Reviews';\nimport ProductReviewsContextProvider from 'src/components/Reviews/ProductReviewsContext';\n\nconst ProductReviewsModal = ({ isOpen, onClose }) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ProductReviewsContextProvider>\n        <Reviews />\n      </ProductReviewsContextProvider>\n    </Modal>\n  );\n};\n\nexport default ProductReviewsModal;\n"
    },
    "/src/pages/ProductDetail/index.js": {
      "code": "import ProductDetailPage from './ProductDetailPage';\n\nexport default ProductDetailPage;\n"
    },
    "/src/pages/ProductDetail/ProductDetailPage.jsx": {
      "code": "import ProductSpecificationSection from 'src/components/ProductSpecificationSection';\n\nimport ProductCollectionSection from './components/ProductCollectionSection';\nimport ProductDetailSection from './components/ProductDetailSection';\nimport ProductDetailsContextProvider from './components/ProductDetailsContext';\n\nconst ProductDetailPage = () => {\n  return (\n    <>\n      <ProductDetailsContextProvider>\n        <ProductDetailSection />\n      </ProductDetailsContextProvider>\n      <ProductSpecificationSection />\n      <ProductCollectionSection />\n    </>\n  );\n};\n\nexport default ProductDetailPage;\n"
    },
    "/src/pages/ProductDetail/utils.js": {
      "code": "export const getUnavailableColors = (product) => {\n  const colorsInStock = new Set();\n  const allColors = new Set(product.colors);\n\n  product.inventory.forEach((item) => {\n    if (item.stock > 0) {\n      colorsInStock.add(item.color);\n    }\n  });\n\n  const unavailableColors = [...allColors].filter(\n    (color) => !colorsInStock.has(color),\n  );\n\n  return unavailableColors;\n};\n\nexport const getUnavailableSizes = ({ product, color }) => {\n  const sizesInStock = new Set();\n  const allSizes = new Set(product.sizes);\n\n  product.inventory.forEach((item) => {\n    if (item.stock > 0 && item.color === color) {\n      sizesInStock.add(item.size);\n    }\n  });\n\n  const unavailableSizes = [...allSizes].filter(\n    (size) => !sizesInStock.has(size),\n  );\n\n  return unavailableSizes;\n};\n\nexport const getInventoryData = ({ product, color, size }) => {\n  let data = {};\n  product.inventory.forEach((item) => {\n    if (item.size === size && item.color === color) {\n      data = item;\n    }\n  });\n\n  return data;\n};\n\nexport const getSelectedColorImages = ({ product, color }) => {\n  const images = product.images?.filter((image) => image.color === color);\n  return images;\n};\n"
    },
    "/src/pages/ProductListing/components/Accordion/Accordion.jsx": {
      "code": "import clsx from 'clsx';\nimport { useState, useRef, createContext, useContext } from 'react';\nimport { RiAddLine, RiSubtractLine } from 'react-icons/ri';\n\nconst AccordionItemContext = createContext();\n\nconst AccordionItem = ({ children, id }) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div>\n      <AccordionItemContext.Provider value={{ id, isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </div>\n  );\n};\n\nconst AccordionTrigger = ({ children }) => {\n  const { id, isOpen, setIsOpen } = useContext(AccordionItemContext);\n  const Icon = isOpen ? RiSubtractLine : RiAddLine;\n  return (\n    <button\n      className={clsx(\n        'w-full',\n        'flex items-center justify-between gap-6',\n        'focus:outline-none focus-visible:ring-4 focus-visible:ring-indigo-600/[.12]',\n        'text-left font-medium text-neutral-900',\n      )}\n      onClick={() => setIsOpen(!isOpen)}\n      aria-expanded={isOpen}\n      aria-controls={`accordion-content-${id}`}\n      id={`accordion-header-${id}`}>\n      <span>{children}</span>\n      <Icon className=\"m-0.5 size-5 text-neutral-600\" aria-hidden={true} />\n    </button>\n  );\n};\n\nconst AccordionContent = ({ children }) => {\n  const contentRef = useRef(null);\n  const { id, isOpen } = useContext(AccordionItemContext);\n\n  return (\n    <div\n      id={`accordion-content-${id}`}\n      role=\"region\"\n      aria-labelledby={`accordion-header-${id}`}\n      className={clsx(\n        'overflow-hidden',\n        'pr-12',\n        isOpen && 'mt-6',\n        'transition-max-height origin-top transform duration-300 ease-in-out',\n        isOpen ? 'scale-y-100 opacity-100' : 'scale-y-0 opacity-0',\n      )}\n      style={{\n        maxHeight: isOpen ? `${contentRef.current?.scrollHeight}px` : '0',\n      }}\n      ref={contentRef}>\n      <div className=\"text-neutral-600\">{children}</div>\n    </div>\n  );\n};\n\nconst Accordion = ({ children }) => {\n  const hasMultipleItem = Array.isArray(children);\n  return (\n    <div className=\"w-full\">\n      {!hasMultipleItem\n        ? children\n        : children.map((item, index) => (\n            <div key={item.props.id}>\n              {item}\n              <div className=\"my-6 h-[1px] bg-neutral-200\" />\n            </div>\n          ))}\n    </div>\n  );\n};\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n"
    },
    "/src/pages/ProductListing/components/Accordion/index.js": {
      "code": "import * as Accordion from './Accordion';\n\nexport * from './Accordion';\nexport default Accordion;\n"
    },
    "/src/pages/ProductListing/components/Filter.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiFilterLine } from 'react-icons/ri';\nimport { useState } from 'react';\n\nimport CheckboxInput from 'src/components/ui/CheckboxInput';\nimport ColorSwatches from 'src/components/ui/ColorSwatches';\nimport SlideOut from 'src/components/ui/SlideOut';\nimport Button from 'src/components/ui/Button';\nimport Rating from 'src/components/ui/Rating/Rating';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from 'src/pages/ProductListing/components/Accordion';\n\nimport { useProductListingContext } from './ProductListingContext';\nimport {\n  CATEGORY_OPTIONS,\n  COLLECTIONS_OPTIONS,\n  COLORS_OPTIONS,\n  RATING_OPTIONS,\n} from 'src/constants';\n\nconst Filter = () => {\n  const {\n    selectedCategory,\n    selectedCollections,\n    selectedColors,\n    selectedRating,\n    filterCount,\n    onSelect,\n    resetFilters,\n  } = useProductListingContext();\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  const filterItems = (\n    <div className=\"flex flex-col items-center\">\n      <Accordion>\n        <AccordionItem id={COLLECTIONS_OPTIONS.key}>\n          <AccordionTrigger>{COLLECTIONS_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-col gap-4 lg:gap-6\">\n              {COLLECTIONS_OPTIONS.items.map(({ name, value }) => (\n                <CheckboxInput\n                  label={name}\n                  key={value}\n                  value={selectedCollections.has(value)}\n                  onChange={() => onSelect(COLLECTIONS_OPTIONS.key, value)}\n                />\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem id={CATEGORY_OPTIONS.key}>\n          <AccordionTrigger>{CATEGORY_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-col gap-4\">\n              {CATEGORY_OPTIONS.items.map(({ name, value }) => (\n                <CheckboxInput\n                  label={name}\n                  key={value}\n                  value={selectedCategory.has(value)}\n                  onChange={() => onSelect(CATEGORY_OPTIONS.key, value)}\n                />\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem id={COLORS_OPTIONS.key}>\n          <AccordionTrigger>{COLORS_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {COLORS_OPTIONS.items.map(({ color, value }) => (\n                <ColorSwatches\n                  key={value}\n                  type=\"checkbox\"\n                  color={color}\n                  selected={selectedColors.has(value)}\n                  onClick={() => onSelect(COLORS_OPTIONS.key, value)}\n                  size=\"sm\"\n                />\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem id={RATING_OPTIONS.key}>\n          <AccordionTrigger>{RATING_OPTIONS.title}</AccordionTrigger>\n          <AccordionContent>\n            <div className=\"flex flex-col items-start gap-4 lg:gap-6\">\n              {RATING_OPTIONS.items.map(({ value }) => (\n                <button\n                  key={value}\n                  type=\"button\"\n                  className={clsx(\n                    'rounded',\n                    'focus:outline-none focus:ring-indigo-600/[.12] focus:ring-offset-0 focus-visible:ring-2',\n                  )}\n                  onClick={() => onSelect(RATING_OPTIONS.key, value)}>\n                  <Rating\n                    value={value}\n                    selected={selectedRating.has(value)}\n                    showHover\n                  />\n                </button>\n              ))}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n      {filterCount > 0 && (\n        <Button\n          onClick={() => {\n            resetFilters();\n            setIsFilterOpen(false);\n          }}\n          label={`Clear All (${filterCount})`}\n          variant=\"link\"\n          size=\"lg\"\n        />\n      )}\n    </div>\n  );\n\n  return (\n    <div>\n      <div className=\"sticky top-10 hidden lg:block\">{filterItems}</div>\n      <div className=\"block lg:hidden\">\n        <SlideOut\n          isShown={isFilterOpen}\n          title={<span className=\"text-xl text-neutral-900\">Filter</span>}\n          onClose={() => setIsFilterOpen(false)}\n          trigger={\n            <Button\n              label=\"Filter\"\n              variant=\"secondary\"\n              startIcon={RiFilterLine}\n              onClick={() => setIsFilterOpen(!isFilterOpen)}\n            />\n          }>\n          {filterItems}\n        </SlideOut>\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n"
    },
    "/src/pages/ProductListing/components/hooks/useProductFilters.js": {
      "code": "import { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  CATEGORY_OPTIONS,\n  COLLECTIONS_OPTIONS,\n  COLORS_OPTIONS,\n  RATING_OPTIONS,\n} from 'src/constants';\n\nexport default function useProductFilters() {\n  const { search } = useLocation();\n  const isMounted = useRef(false);\n\n  const query = new URLSearchParams(search);\n  const collectionId = query.get('collectionId');\n  const categoryId = query.get('categoryId');\n\n  const [selectedCollections, setSelectedCollections] = useState(\n    collectionId ? new Set().add(collectionId) : new Set(),\n  );\n  const [selectedCategory, setSelectedCategory] = useState(\n    categoryId ? new Set().add(categoryId) : new Set(),\n  );\n  const [selectedColors, setSelectedColors] = useState(new Set());\n  const [selectedRating, setSelectedRating] = useState(new Set());\n  const [selectedSort, setSelectedSort] = useState({\n    value: 'created',\n    direction: 'desc',\n  });\n\n  const onSelect = (type, value) => {\n    let newSelectedItems;\n    if (type === COLLECTIONS_OPTIONS.key) {\n      newSelectedItems = new Set(selectedCollections);\n    }\n    if (type === CATEGORY_OPTIONS.key) {\n      newSelectedItems = new Set(selectedCategory);\n    }\n    if (type === COLORS_OPTIONS.key) {\n      newSelectedItems = new Set(selectedColors);\n    }\n    if (type === RATING_OPTIONS.key) {\n      newSelectedItems = new Set(selectedRating);\n    }\n\n    newSelectedItems.has(value)\n      ? newSelectedItems.delete(value)\n      : newSelectedItems.add(value);\n\n    if (type === COLLECTIONS_OPTIONS.key) {\n      setSelectedCollections(newSelectedItems);\n    }\n    if (type === CATEGORY_OPTIONS.key) {\n      setSelectedCategory(newSelectedItems);\n    }\n    if (type === COLORS_OPTIONS.key) {\n      setSelectedColors(newSelectedItems);\n    }\n    if (type === RATING_OPTIONS.key) {\n      setSelectedRating(newSelectedItems);\n    }\n  };\n\n  const resetFilters = () => {\n    setSelectedCollections(new Set());\n    setSelectedCategory(new Set());\n    setSelectedColors(new Set());\n    setSelectedRating(new Set());\n  };\n\n  const filterCount =\n    selectedCollections.size +\n    selectedCategory.size +\n    selectedColors.size +\n    selectedRating.size;\n\n  useEffect(() => {\n    // only run after mounted when the collectionId or categoryId query param change\n    if (isMounted.current) {\n      if (collectionId) {\n        // Reset every filters when we query params is changed\n        resetFilters();\n        setSelectedCollections(new Set().add(collectionId));\n      }\n      if (categoryId) {\n        // Reset every filters when we query params is changed\n        resetFilters();\n        setSelectedCategory(new Set().add(categoryId));\n      }\n    }\n    isMounted.current = true;\n  }, [collectionId, categoryId]);\n\n  return {\n    selectedCollections,\n    selectedCategory,\n    selectedColors,\n    selectedRating,\n    selectedSort,\n    filterCount,\n    onSelect,\n    resetFilters,\n    onSortChange: setSelectedSort,\n  };\n}\n"
    },
    "/src/pages/ProductListing/components/ProductListingContext.jsx": {
      "code": "import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport useProductFilters from './hooks/useProductFilters';\nimport {\n  CATEGORY_OPTIONS,\n  COLLECTIONS_OPTIONS,\n  COLORS_OPTIONS,\n  RATING_OPTIONS,\n} from 'src/constants';\n\nconst ProductListingContext = createContext();\n\nexport const useProductListingContext = () => useContext(ProductListingContext);\n\nconst ProductListingContextProvider = ({ children }) => {\n  const [products, setProducts] = useState(null);\n  const [isProductsLoading, setIsProductsLoading] = useState(true);\n  const {\n    selectedCollections,\n    selectedCategory,\n    selectedColors,\n    selectedRating,\n    selectedSort,\n    filterCount,\n    onSelect,\n    resetFilters,\n    onSortChange,\n  } = useProductFilters();\n\n  const getProducts = useCallback(\n    async ({ colors, collections, ratings, categories, sort }) => {\n      setIsProductsLoading(true);\n\n      let queryString = '';\n      if (\n        colors.size > 0 ||\n        collections.size > 0 ||\n        ratings.size > 0 ||\n        categories.size > 0\n      ) {\n        queryString = [\n          ...Array.from(colors).map(\n            (color) => `${COLORS_OPTIONS.key}=${encodeURIComponent(color)}`,\n          ),\n          ...Array.from(collections).map(\n            (collection) =>\n              `${COLLECTIONS_OPTIONS.key}=${encodeURIComponent(collection)}`,\n          ),\n          ...Array.from(ratings).map(\n            (rating) => `${RATING_OPTIONS.key}=${encodeURIComponent(rating)}`,\n          ),\n          ...Array.from(categories).map(\n            (category) =>\n              `${CATEGORY_OPTIONS.key}=${encodeURIComponent(category)}`,\n          ),\n        ].join('&');\n      }\n\n      queryString = `${queryString ? `${queryString}&` : ''}sort=${\n        sort.value\n      }&direction=${sort.direction}`;\n\n      const data = await fetch(\n        `https://www.greatfrontend.com/api/projects/challenges/e-commerce/products${\n          queryString ? `?${queryString}` : ''\n        }`,\n      );\n      const result = await data.json();\n\n      if (!result.error) {\n        setProducts(result.data);\n      }\n      setIsProductsLoading(false);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    getProducts({\n      colors: selectedColors,\n      categories: selectedCategory,\n      collections: selectedCollections,\n      ratings: selectedRating,\n      sort: selectedSort,\n    });\n  }, [\n    getProducts,\n    selectedColors,\n    selectedCategory,\n    selectedCollections,\n    selectedRating,\n    selectedSort,\n  ]);\n\n  const value = useMemo(() => {\n    return {\n      products,\n      isProductsLoading,\n\n      selectedCollections,\n      selectedCategory,\n      selectedColors,\n      selectedRating,\n      selectedSort,\n      filterCount,\n      onSelect,\n      resetFilters,\n      onSortChange,\n    };\n  }, [\n    products,\n    isProductsLoading,\n\n    selectedCollections,\n    selectedCategory,\n    selectedColors,\n    selectedRating,\n    selectedSort,\n    filterCount,\n    onSelect,\n    resetFilters,\n    onSortChange,\n  ]);\n\n  return (\n    <ProductListingContext.Provider value={value}>\n      {children}\n    </ProductListingContext.Provider>\n  );\n};\n\nexport default ProductListingContextProvider;\n"
    },
    "/src/pages/ProductListing/components/ProductListingSection.jsx": {
      "code": "import { RiTShirt2Line } from 'react-icons/ri';\nimport clsx from 'clsx';\n\nimport ProductCard from 'src/components/ProductCard';\nimport Button from 'src/components/ui/Button';\nimport IconWrapper from 'src/components/IconWrapper';\n\nimport { useProductListingContext } from './ProductListingContext';\n\nconst ProductListingSection = () => {\n  const { products, isProductsLoading, filterCount, resetFilters } =\n    useProductListingContext();\n\n  if (isProductsLoading) {\n    return (\n      <div\n        className={clsx(\n          'col-span-4 md:col-span-6 lg:col-span-9',\n          'flex justify-center',\n        )}>\n        Loading...\n      </div>\n    );\n  }\n\n  if (filterCount > 0 && products.length === 0) {\n    return (\n      <div\n        className={clsx(\n          'h-full w-full',\n          'col-span-4 md:col-span-6 lg:col-span-9',\n          'flex flex-col items-center justify-center gap-5',\n        )}>\n        <IconWrapper icon={RiTShirt2Line} />\n        <div\n          className={clsx(\n            'flex flex-col items-center gap-2',\n            'text-center text-neutral-900',\n          )}>\n          <span className=\"text-xl font-medium\">Nothing found just yet</span>\n          <span>\n            Adjust your filters a bit, and let's see what we can find!\n          </span>\n        </div>\n        <Button label=\"Reset filters\" size=\"lg\" onClick={resetFilters} />\n      </div>\n    );\n  }\n\n  return products.map((product) => (\n    <div key={product.product_id} className={clsx('col-span-4 md:col-span-3')}>\n      <ProductCard product={product} />\n    </div>\n  ));\n};\n\nexport default ProductListingSection;\n"
    },
    "/src/pages/ProductListing/components/SortByFilter.jsx": {
      "code": "import { Dropdown, DropdownItem } from 'src/components/ui/Dropdown';\n\nimport { useProductListingContext } from './ProductListingContext';\nimport { SORT_OPTIONS } from 'src/constants';\n\nconst SortByFilter = () => {\n  const { onSortChange, selectedSort } = useProductListingContext();\n  return (\n    <Dropdown>\n      {SORT_OPTIONS.map((option) => (\n        <DropdownItem\n          key={option.value + option.direction}\n          isSelected={\n            option.value === selectedSort.value &&\n            option.direction === selectedSort.direction\n          }\n          onSelect={() =>\n            onSortChange({ value: option.value, direction: option.direction })\n          }>\n          {option.name}\n        </DropdownItem>\n      ))}\n    </Dropdown>\n  );\n};\n\nexport default SortByFilter;\n"
    },
    "/src/pages/ProductListing/index.js": {
      "code": "import ProductListingPage from './ProductListingPage';\n\nexport default ProductListingPage;\n"
    },
    "/src/pages/ProductListing/ProductListingPage.jsx": {
      "code": "import clsx from 'clsx';\n\nimport Filter from './components/Filter';\nimport ProductListingContextProvider from './components/ProductListingContext';\nimport ProductListingSection from './components/ProductListingSection';\nimport SortByFilter from './components/SortByFilter';\n\nconst ProductListingPage = () => {\n  return (\n    <ProductListingContextProvider>\n      <div\n        className={clsx(\n          'w-full',\n          'px-4 py-12 md:py-[72px] lg:px-24 lg:py-[104px]',\n          'grid grid-cols-4 gap-x-4 gap-y-8 md:grid-cols-6 md:gap-x-8 lg:grid-cols-12',\n        )}>\n        <div\n          className={clsx(\n            'col-span-4 md:col-span-6 lg:col-span-3 lg:pr-12 lg:pt-4',\n            'flex justify-between',\n          )}>\n          <Filter />\n          <div className=\"block lg:hidden\">\n            <SortByFilter />\n          </div>\n        </div>\n\n        <div\n          className={clsx(\n            'col-span-4 md:col-span-6  lg:col-span-9',\n            'flex flex-col items-end gap-8',\n          )}>\n          <div className=\"hidden lg:block\">\n            <SortByFilter />\n          </div>\n\n          <div\n            className={clsx(\n              'h-full w-full',\n              'grid grid-cols-4 gap-8 md:grid-cols-6 lg:grid-cols-9',\n            )}>\n            <ProductListingSection />\n          </div>\n        </div>\n      </div>\n    </ProductListingContextProvider>\n  );\n};\n\nexport default ProductListingPage;\n"
    },
    "/src/pages/Storefront/components/CollectionsGridSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { useEffect, useState } from 'react';\n\nimport CollectionCard from 'src/components/CollectionCard';\n\nconst CollectionsGridSection = () => {\n  const [collections, setCollections] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const getLatestArrivalProducts = async () => {\n    setIsFetching(true);\n\n    const data = await fetch(\n      `https://www.greatfrontend.com/api/projects/challenges/e-commerce/collections`,\n    );\n    const result = await data.json();\n\n    if (!result.error) {\n      setCollections(result.data);\n    }\n    setIsFetching(false);\n  };\n\n  useEffect(() => {\n    getLatestArrivalProducts();\n  }, []);\n\n  return (\n    <section\n      aria-describedby=\"collections-section\"\n      className={clsx('px-4 py-12 md:py-16 lg:p-24', 'flex flex-col gap-8')}>\n      <div className=\"text-3xl font-semibold\">Our Collections</div>\n      {isFetching ? (\n        <div>Loading...</div>\n      ) : (\n        <div className={clsx('flex flex-col gap-7 md:flex-row')}>\n          <div className={clsx('flex-1')}>\n            <CollectionCard\n              imageUrl={collections[0].image_url}\n              name={collections[0].name}\n              description={collections[0].description}\n              id={collections[0].collection_id}\n            />\n          </div>\n          <div className={clsx('flex-1', 'flex flex-col gap-7')}>\n            <div className={clsx('flex-1')}>\n              <CollectionCard\n                imageUrl={collections[1].image_url}\n                name={collections[1].name}\n                description={collections[1].description}\n                id={collections[1].collection_id}\n                variant=\"secondary\"\n              />\n            </div>\n            <div className={clsx('flex-1')}>\n              <CollectionCard\n                imageUrl={collections[2].image_url}\n                name={collections[2].name}\n                description={collections[2].description}\n                id={collections[2].collection_id}\n                variant=\"secondary\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default CollectionsGridSection;\n"
    },
    "/src/pages/Storefront/components/FeaturesGridSection.jsx": {
      "code": "import clsx from 'clsx';\nimport { RiExchangeLine, RiShieldCheckLine, RiTruckLine } from 'react-icons/ri';\n\nconst FEATURES = [\n  {\n    title: 'Complimentary Shipping',\n    description:\n      'Enjoy the convenience of free shipping for all orders. We believe in transparent pricing, and the price you see is the price you payâ€”no surprise fees',\n    icon: RiTruckLine,\n  },\n  {\n    title: '2-Year Quality Promise',\n    description:\n      \"Shop with confidence knowing that we stand behind our products. Should any issue arise within the first two years, rest assured we're here to help with a hassle-free replacement.\",\n    icon: RiShieldCheckLine,\n  },\n  {\n    title: 'Easy Exchanges',\n    description:\n      \"If your purchase isn't quite right, pass it on to a friend who might love it, and let us know. We're happy to facilitate an exchange to ensure you have the perfect item to complement your lifestyle.\",\n    icon: RiExchangeLine,\n  },\n];\n\nconst FeaturesGridSection = () => {\n  return (\n    <section\n      aria-describedby=\"features-section\"\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'flex flex-col gap-12 md:gap-16',\n      )}>\n      <header className={clsx('flex flex-col gap-5 lg:px-40', 'text-center')}>\n        <div className=\"flex flex-col justify-center gap-3 lg:px-10\">\n          <span className=\"font-semibold text-indigo-700\">\n            Elevate Your Experience\n          </span>\n          <h2 className=\"text-3xl font-semibold md:text-5xl\">\n            Our Commitment to Exceptional Service\n          </h2>\n        </div>\n        <p className=\"text-xl text-neutral-600\">\n          We pride ourselves on a foundation of exceptional customer service,\n          where every interaction is a testament to our dedication to\n          excellence.\n        </p>\n      </header>\n      <ul\n        className={clsx(\n          'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n          'gap-x-4 gap-y-8 md:gap-x-8',\n        )}>\n        {FEATURES.map(({ title, description, icon: Icon }) => (\n          <li\n            key={title}\n            className={clsx(\n              'col-span-4 md:col-span-6 lg:col-span-4',\n              'flex flex-col items-center justify-center gap-5',\n            )}>\n            <div\n              aria-hidden=\"true\"\n              className={clsx(\n                'shadow-custom h-12 w-12 rounded-full bg-white',\n                'flex items-center justify-center',\n              )}>\n              <Icon className=\"size-6 text-indigo-700\" />\n            </div>\n            <div className=\"flex flex-col justify-center gap-2 self-stretch\">\n              <span className=\"text-center text-xl font-semibold text-neutral-900\">\n                {title}\n              </span>\n              <span className=\"text-center text-base font-normal text-neutral-600\">\n                {description}\n              </span>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default FeaturesGridSection;\n"
    },
    "/src/pages/Storefront/components/HeroSection.jsx": {
      "code": "import clsx from 'clsx';\nimport Button from 'src/components/ui/Button';\nimport { useMediaQuery } from 'usehooks-ts';\n\nconst HeroSection = () => {\n  const isMobileAndBelow = useMediaQuery('(max-width: 767px)');\n\n  return (\n    <section\n      aria-describedby=\"hero-section\"\n      className={clsx(\n        'px-4 py-12 md:py-16 lg:p-24',\n        'grid grid-cols-4 md:grid-cols-6 lg:grid-cols-12',\n        'gap-x-4 gap-y-12 md:gap-x-8 md:gap-y-8',\n      )}>\n      <div\n        className={clsx(\n          'col-span-4 md:col-span-6 lg:col-span-5',\n          'flex flex-col justify-center gap-8 md:gap-16',\n        )}>\n        <div className=\"flex flex-col justify-center gap-4 md:gap-6\">\n          <span className=\"text-4xl font-semibold md:text-5xl lg:text-6xl\">\n            Summer styles are finally here\n          </span>\n          <span className=\"text-xl text-neutral-600\">\n            This year, our new summer collection will be your haven from the\n            world's harsh elements.\n          </span>\n        </div>\n        <div className=\"w-[151.5px] md:w-[213px] lg:w-[175.5px]\">\n          <Button\n            href=\"/products\"\n            label=\"Shop now\"\n            size={isMobileAndBelow ? 'xl' : '2xl'}\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n      <img\n        src=\"https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/banner.jpg\"\n        alt=\"Storefront hero banner\"\n        className={clsx(\n          'object-cover',\n          'rounded-lg',\n          'col-span-4 md:col-span-6 lg:col-span-7',\n          'h-[264px] w-full md:h-[526px]',\n        )}\n      />\n    </section>\n  );\n};\n\nexport default HeroSection;\n"
    },
    "/src/pages/Storefront/index.js": {
      "code": "import StorefrontPage from './StorefrontPage';\n\nexport default StorefrontPage;\n"
    },
    "/src/pages/Storefront/StorefrontPage.jsx": {
      "code": "import LatestArrivalsSection from '../LatestArrivals/components/LatestArrivalsSection';\nimport HeroSection from './components/HeroSection';\nimport CollectionsGridSection from './components/CollectionsGridSection';\nimport FeaturesGridSection from './components/FeaturesGridSection';\n\nconst StorefrontPage = () => {\n  return (\n    <div>\n      <HeroSection />\n      <LatestArrivalsSection />\n      <CollectionsGridSection />\n      <FeaturesGridSection />\n    </div>\n  );\n};\n\nexport default StorefrontPage;\n"
    },
    "/src/utils.js": {
      "code": "export function getNameInitials(name) {\n  // Extract first and last name initials using regular expressions\n  const initials = name.match(/\\b\\w/g) || [];\n\n  // Return the initials\n  return (\n    (initials[0] ?? '') +\n    (initials.length - 1 === 0 ? '' : initials[initials.length - 1] ?? '')\n  ).toUpperCase();\n}\n\nexport function formatDate(date) {\n  return date.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n}\n\nexport const getSubtotal = (items) => {\n  const totalAmount = items.reduce((acc, item) => {\n    const price = !!item.total_sale_price\n      ? item.total_sale_price\n      : item.total_list_price;\n    return acc + price;\n  }, 0);\n\n  return totalAmount.toFixed(2);\n};\n\nexport const getFinalAmount = (subtotal, discount) => {\n  if (discount) {\n    const discountAmount = discount.discount_amount\n      ? discount.discount_amount\n      : subtotal * (discount.discount_percentage / 100);\n\n    return (subtotal - discountAmount).toFixed(2);\n  }\n\n  return subtotal;\n};\n\n// Fake stock change data\nexport const getStockChangedData = (items) => {\n  const products = [\n    {\n      product: {\n        product_id: 'stepsoft-socks',\n        name: 'StepSoft Socks',\n      },\n      unit: {\n        sku: 'ss-orange-xs',\n        size: 'xs',\n        color: 'orange',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/stepsoft-socks/stepsoft-socks-1.jpg',\n      },\n      stock: 5,\n    },\n    {\n      product: {\n        product_id: 'elemental-sneakers',\n        name: 'Elemental Sneakers',\n      },\n      unit: {\n        sku: 'es-beige-6',\n        size: '6',\n        color: 'beige',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/elemental-sneakers/elemental-sneakers-3.jpg',\n      },\n      stock: 20,\n    },\n    {\n      product: {\n        product_id: 'azure-attitude-shades',\n        name: 'Azure Attitude Shades',\n      },\n      unit: {\n        sku: 'aas-blue',\n        size: null,\n        color: 'blue',\n        image_url:\n          'https://vaqybtnqyonvlwtskzmv.supabase.co/storage/v1/object/public/e-commerce-track-images/azure-attitude-shades/azure-attitude-shades-1.jpg',\n      },\n      stock: 10,\n    },\n  ];\n\n  // To check if the cart is completely empty after stock changed\n  let isCartEmpty = true;\n  const filteredProducts = items.reduce((acc, item) => {\n    const product = products.find(\n      (product) =>\n        product.product.product_id === item.product.product_id &&\n        product.unit.sku === item.unit.sku &&\n        item.quantity > product.stock,\n    );\n    if (product) {\n      acc.push({\n        ...product,\n        cartQuantity: item.quantity,\n      });\n      if (isCartEmpty) {\n        isCartEmpty = product.stock === 0;\n      }\n    } else {\n      isCartEmpty = false;\n    }\n    return acc;\n  }, []);\n  return new Promise((resolve) => {\n    setTimeout(() => resolve({ products: filteredProducts, isCartEmpty }), 250);\n  });\n};\n\nexport const mergeSampleAndStorageCartItems = (sampleCartItems) => {\n  // Retrieve cart from localStorage\n  const storedCartItems = JSON.parse(localStorage.getItem('cart')) || [];\n  const mergedMap = new Map();\n\n  // Add items from the sample cart items to the map\n  sampleCartItems.forEach((item) => {\n    mergedMap.set(item.unit.sku, item);\n  });\n\n  // Add items from the local storage to the map (overwrites duplicates from sampleCartItems)\n  storedCartItems.forEach((item) => {\n    mergedMap.set(item.unit.sku, item);\n  });\n\n  // Convert the map back to an array\n  return Array.from(mergedMap.values());\n};\n\nexport const formatPrice = (price) =>\n  Number.isInteger(price) ? price : price.toFixed(2);\n\nexport const formatInternationalPhoneNumber = (phoneNumber) => {\n  // Remove all non-digit characters\n  phoneNumber = phoneNumber.replace(/\\D/g, '');\n\n  // Check if the number has a country code\n  if (phoneNumber.length > 10) {\n    // Extract country code and the rest of the number\n    const countryCode = phoneNumber.slice(0, phoneNumber.length - 10);\n    const mainNumber = phoneNumber.slice(-10);\n\n    // Format the main number\n    const formattedMainNumber = mainNumber.replace(\n      /(\\d{3})(\\d{3})(\\d{4})/,\n      '($1) $2-$3',\n    );\n\n    return `+${countryCode} ${formattedMainNumber}`;\n  } else if (phoneNumber.length === 10) {\n    // Format the number\n    return phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3');\n  } else {\n    // If the number is not 10 digits or does not include a valid country code, return the original input\n    return phoneNumber;\n  }\n};\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/index.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app",
    "externalResources": [
      "https://cdn.tailwindcss.com"
    ]
  }
}