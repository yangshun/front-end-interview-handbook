{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/union-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/union-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/union-by.run.test.ts": "import unionBy from './union-by';\n\ndescribe('unionBy', () => {\n  test('empty array', () => {\n    expect(unionBy((o: any) => o.x, [])).toEqual([]);\n  });\n\n  test('string iteratee', () => {\n    expect(unionBy((o: any) => o.x, [{ x: 1 }], [{ x: 2 }, { x: 1 }])).toEqual([\n      { x: 1 },\n      { x: 2 },\n    ]);\n  });\n\n  test('function iteratee', () => {\n    const arr1 = [2.1, 1.2];\n    const arr2 = [2.3, 3.4];\n    const arr3 = [4.5, 2.6];\n    const iteratee = Math.floor;\n\n    expect(unionBy(iteratee, arr1, arr2, arr3)).toEqual([2.1, 1.2, 3.4, 4.5]);\n  });\n});\n",
    "/src/union-by.submit.test.ts": "import unionBy from './union-by';\n\ndescribe('unionBy', () => {\n  test('empty arrays', () => {\n    expect(unionBy((o: any) => o.id, [], [])).toEqual([]);\n  });\n\n  test('primitive values with identity iteratee', () => {\n    const arr1 = [1, 2, 3];\n    const arr2 = [3, 4, 5];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('null and undefined values in arrays', () => {\n    const arr1 = [null, undefined, 1];\n    const arr2 = [1, null, 2];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([\n      null,\n      undefined,\n      1,\n      2,\n    ]);\n  });\n\n  test('arrays with mixed types', () => {\n    const arr1 = [1, '1', true];\n    const arr2 = ['1', 2, false];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([\n      1,\n      '1',\n      true,\n      2,\n      false,\n    ]);\n  });\n\n  test('complex objects with custom function iteratee', () => {\n    const arr1 = [\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n    ];\n    const arr2 = [\n      { id: 'a', value: 3 },\n      { id: 'b', value: 2 },\n    ];\n    const iteratee = (obj: any) => obj.id + obj.value;\n    expect(unionBy(iteratee, arr1, arr2)).toEqual([\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n      { id: 'a', value: 3 },\n    ]);\n  });\n\n  test('handling of arrays with different lengths', () => {\n    const arr1 = [1, 2];\n    const arr2 = [3, 4, 5, 6];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([\n      1, 2, 3, 4, 5, 6,\n    ]);\n  });\n\n  test('arrays with complex nesting', () => {\n    const arr1 = [\n      [1, 2],\n      [3, 4],\n    ];\n    const arr2 = [\n      [3, 4],\n      [5, 6],\n    ];\n    expect(unionBy(JSON.stringify, arr1, arr2)).toEqual([\n      [1, 2],\n      [3, 4],\n      [5, 6],\n    ]);\n  });\n});\n",
    "/src/union-by.ts": "export default function unionBy<T>(\r\n  iteratee: (value: T) => any,\r\n  ...arrays: Array<any>\r\n): Array<T> {\r\n  const result: Array<T> = [];\r\n  const compare: Array<T> = [];\r\n\r\n  // Push the unique `item` based on `iteratee` into `result` while keeping the comparison value in `compare`.\r\n  arrays.forEach((array) => {\r\n    array.forEach((item: T) => {\r\n      if (!compare.includes(iteratee(item))) {\r\n        result.push(item);\r\n        compare.push(iteratee(item));\r\n      }\r\n    });\r\n  });\r\n\r\n  return result;\r\n}\r\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {...Array} arrays Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function unionBy(iteratee, ...arrays) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function unionBy<T>(\r\n  iteratee: (value: T) => any,\r\n  ...arrays: Array<any>\r\n): Array<T> {\r\n  throw 'Not implemented!';\r\n}"
  },
  "workspace": {
    "main": "/src/union-by.ts",
    "run": "/src/union-by.run.test.ts",
    "submit": "/src/union-by.submit.test.ts"
  }
}