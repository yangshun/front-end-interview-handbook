{
  "description": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var a in e)o(r,a,{get:e[a],enumerable:!0})},t=(r,e,a,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!p.call(r,i)&&i!==a&&o(r,i,{get:()=>e[i],enumerable:!(c=u(e,i))||c.enumerable});return r};var g=(r,e,a)=>(a=r!=null?d(y(r)):{},t(e||!r||!r.__esModule?o(a,\"default\",{value:r,enumerable:!0}):a,r)),v=r=>t(o({},\"__esModule\",{value:!0}),r);var s=f((M,l)=>{l.exports=_jsx_runtime});var w={};x(w,{default:()=>_,frontmatter:()=>j});var n=g(s()),j={title:\"Union By\",excerpt:\"Implement a function that creates an array of unique values, in order, from all given arrays.\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"unionBy(array)\"}),\" that creates an array of unique values, in order, from all given arrays and accepts \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" which is invoked for each element of each arrays to generate the criterion by which uniqueness is computed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`unionBy(iteratee, arrays);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The iteratee invoked per element. The function is invoked with one argument: (value).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[arrays]\"}),\" \",(0,n.jsx)(e.em,{children:\"(...Array)\"}),\": The arrays to inspect\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(Array)\"})}),\": Returns the new array of combined values.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`unionBy((value: any) => value, [2], [1, 2]); // => [2, 1]\\r\n\\r\nunionBy(Math.floor, [2.1], [1.2, 2.3]); // => [2.1, 1.2]\\r\n\\r\nunionBy((o) => o.x, [{ x: 1 }], [{ x: 2 }, { x: 1 }]); // => [{ 'x': 1 }, { 'x': 2 }]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return an empty array if \",(0,n.jsx)(e.code,{children:\"array\"}),\" is empty and leave the treat false values as-is.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`unionBy((o) => o.m, []); // => []\\r\n\\r\nunionBy((o) => o.m, [{ n: 1 }], [{ m: 2 }]); // => [{ n: 1 }, { m: 2 }]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#unionBy\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.unionBy\"})]})}),`\n`]})]})}function B(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var _=B;return v(w);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/union-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/union-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/union-by.run.test.ts": "import unionBy from './union-by';\n\ndescribe('unionBy', () => {\n  test('empty array', () => {\n    expect(unionBy((o: any) => o.x, [])).toEqual([]);\n  });\n\n  test('string iteratee', () => {\n    expect(unionBy((o: any) => o.x, [{ x: 1 }], [{ x: 2 }, { x: 1 }])).toEqual([\n      { x: 1 },\n      { x: 2 },\n    ]);\n  });\n\n  test('function iteratee', () => {\n    const arr1 = [2.1, 1.2];\n    const arr2 = [2.3, 3.4];\n    const arr3 = [4.5, 2.6];\n    const iteratee = Math.floor;\n\n    expect(unionBy(iteratee, arr1, arr2, arr3)).toEqual([2.1, 1.2, 3.4, 4.5]);\n  });\n});\n",
    "/src/union-by.submit.test.ts": "import unionBy from './union-by';\n\ndescribe('unionBy', () => {\n  test('empty arrays', () => {\n    expect(unionBy((o: any) => o.id, [], [])).toEqual([]);\n  });\n\n  test('primitive values with identity iteratee', () => {\n    const arr1 = [1, 2, 3];\n    const arr2 = [3, 4, 5];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('null and undefined values in arrays', () => {\n    const arr1 = [null, undefined, 1];\n    const arr2 = [1, null, 2];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([\n      null,\n      undefined,\n      1,\n      2,\n    ]);\n  });\n\n  test('arrays with mixed types', () => {\n    const arr1 = [1, '1', true];\n    const arr2 = ['1', 2, false];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([\n      1,\n      '1',\n      true,\n      2,\n      false,\n    ]);\n  });\n\n  test('complex objects with custom function iteratee', () => {\n    const arr1 = [\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n    ];\n    const arr2 = [\n      { id: 'a', value: 3 },\n      { id: 'b', value: 2 },\n    ];\n    const iteratee = (obj: any) => obj.id + obj.value;\n    expect(unionBy(iteratee, arr1, arr2)).toEqual([\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n      { id: 'a', value: 3 },\n    ]);\n  });\n\n  test('handling of arrays with different lengths', () => {\n    const arr1 = [1, 2];\n    const arr2 = [3, 4, 5, 6];\n    expect(unionBy((value: any) => value, arr1, arr2)).toEqual([\n      1, 2, 3, 4, 5, 6,\n    ]);\n  });\n\n  test('arrays with complex nesting', () => {\n    const arr1 = [\n      [1, 2],\n      [3, 4],\n    ];\n    const arr2 = [\n      [3, 4],\n      [5, 6],\n    ];\n    expect(unionBy(JSON.stringify, arr1, arr2)).toEqual([\n      [1, 2],\n      [3, 4],\n      [5, 6],\n    ]);\n  });\n});\n",
    "/src/union-by.ts": "export default function unionBy<T>(\r\n  iteratee: (value: T) => any,\r\n  ...arrays: Array<any>\r\n): Array<T> {\r\n  const result: Array<T> = [];\r\n  const compare: Array<T> = [];\r\n\r\n  // Push the unique `item` based on `iteratee` into `result` while keeping the comparison value in `compare`.\r\n  arrays.forEach((array) => {\r\n    array.forEach((item: T) => {\r\n      if (!compare.includes(iteratee(item))) {\r\n        result.push(item);\r\n        compare.push(iteratee(item));\r\n      }\r\n    });\r\n  });\r\n\r\n  return result;\r\n}\r\n"
  },
  "info": {
    "excerpt": "Implement a function that creates an array of unique values, in order, from all given arrays.",
    "title": "Union By"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1711929600,
    "difficulty": "medium",
    "duration": 15,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/union-by",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "unique-array",
      "union"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "union-by",
    "subtitle": null,
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {...Array} arrays Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function unionBy(iteratee, ...arrays) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function unionBy<T>(\r\n  iteratee: (value: T) => any,\r\n  ...arrays: Array<any>\r\n): Array<T> {\r\n  throw 'Not implemented!';\r\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var A=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!k.call(t,a)&&a!==n&&i(t,a,{get:()=>e[a],enumerable:!(s=g(e,a))||s.enumerable});return t};var v=(t,e,n)=>(n=t!=null?f(T(t)):{},c(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),w=t=>c(i({},\"__esModule\",{value:!0}),t);var u=A((D,l)=>{l.exports=_jsx_runtime});var C={};b(C,{default:()=>_});var r=v(u());var o=MDXCodeBlock;var h=`/**\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {...Array} arrays Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function unionBy(iteratee, ...arrays) {\n  const result = [];\n  const compare = [];\n\n  // Push the unique \\`item\\` based on \\`iteratee\\` into \\`result\\` while keeping the comparison value in \\`compare\\`.\n  arrays.forEach((array) => {\n    array.forEach((item) => {\n      if (!compare.includes(iteratee(item))) {\n        result.push(item);\n        compare.push(iteratee(item));\n      }\n    });\n  });\n\n  return result;\n}\n`;var m=`export default function unionBy<T>(\\r\n  iteratee: (value: T) => any,\\r\n  ...arrays: Array<any>\\r\n): Array<T> {\\r\n  const result: Array<T> = [];\\r\n  const compare: Array<T> = [];\\r\n\\r\n  // Push the unique \\`item\\` based on \\`iteratee\\` into \\`result\\` while keeping the comparison value in \\`compare\\`.\\r\n  arrays.forEach((array) => {\\r\n    array.forEach((item: T) => {\\r\n      if (!compare.includes(iteratee(item))) {\\r\n        result.push(item);\\r\n        compare.push(iteratee(item));\\r\n      }\\r\n    });\\r\n  });\\r\n\\r\n  return result;\\r\n}\\r\n`;var d=`/**\\r\n * @param {Function} iteratee The iteratee invoked per element.\\r\n * @param {...Array} arrays Array from which the elements are all numbers.\\r\n * @return {Array} Returns the new array of combined values.\\r\n */\\r\nexport default function unionBy(iteratee, ...arrays) {\\r\n  const result = [];\\r\n  const compare = new Set();\\r\n\\r\n  // Push the unique \\`item\\` based on \\`iteratee\\` into \\`result\\` while keeping the comparison value in \\`compare\\`.\\r\n  arrays.forEach((array) => {\\r\n    array.forEach((item) => {\\r\n      if (!compare.has(iteratee(item))) {\\r\n        result.push(item);\\r\n        compare.add(iteratee(item));\\r\n      }\\r\n    });\\r\n  });\\r\n\\r\n  return result;\\r\n}\\r\n`;var p=`export default function unionBy<T>(\\r\n  iteratee: (value: T) => any,\\r\n  ...arrays: Array<any>\\r\n): Array<T> {\\r\n  const result: Array<T> = [];\\r\n  const compare = new Set<number>();\\r\n\\r\n  // Push the unique \\`item\\` based on \\`iteratee\\` into \\`result\\` while keeping the comparison value in \\`compare\\`.\\r\n  arrays.forEach((array) => {\\r\n    array.forEach((item: T) => {\\r\n      if (!compare.has(iteratee(item))) {\\r\n        result.push(item);\\r\n        compare.add(iteratee(item));\\r\n      }\\r\n    });\\r\n  });\\r\n\\r\n  return result;\\r\n}\\r\n`;function y(t){let e=Object.assign({h2:\"h2\",h3:\"h3\",ol:\"ol\",li:\"li\",code:\"code\",p:\"p\",ul:\"ul\",a:\"a\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsx)(e.h3,{children:\"Approach 1: Using array to store unique key values\"}),`\n`,(0,r.jsxs)(e.ol,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Create an empty \",(0,r.jsx)(e.code,{children:\"compare\"}),\" array to store the unique keys.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Iterate through \",(0,r.jsx)(e.code,{children:\"array\"}),\" and determine the key for each element by calling \",(0,r.jsx)(e.code,{children:\"iteratee(element)\"}),\". If the key does not exist within \",(0,r.jsx)(e.code,{children:\"compare\"}),\", insert the key into \",(0,r.jsx)(e.code,{children:\"compare\"}),\". Next, append the element into \",(0,r.jsx)(e.code,{children:\"result\"}),\".\"]}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:\"Two variables are used:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"result\"}),\": Tracks the unique elements from \",(0,r.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"compare\"}),\": Tracks the unique computed value of the elements through \",(0,r.jsx)(e.code,{children:\"iteratee\"}),\" to be used for comparison.\"]}),`\n`]}),`\n`,(0,r.jsx)(o,{languages:{jsx:h,tsx:m}}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Approach 2: Use \",(0,r.jsx)(e.code,{children:\"Set\"}),\" for \",(0,r.jsx)(e.code,{children:\"compare\"})]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Another solution will be using a set instead of array for \",(0,r.jsx)(e.code,{children:\"compare\"}),\" as sets can check for existence of items efficiently.\"]}),`\n`,(0,r.jsx)(o,{languages:{jsx:d,tsx:p}}),`\n`,(0,r.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,r.jsx)(e.p,{children:\"If the input arrays are sparse, the function might include undefined in the output for the missing indices. To solve this, we can pre-process arrays to remove or fill sparse elements as appropriate.\"}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#unionBy\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.unionBy\"})]})}),`\n`]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(y,t)})):y(t)}var _=S;return w(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/union-by.ts",
    "run": "/src/union-by.run.test.ts",
    "submit": "/src/union-by.submit.test.ts"
  }
}