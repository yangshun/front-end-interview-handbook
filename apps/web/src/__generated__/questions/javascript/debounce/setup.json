{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/debounce\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/debounce.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/debounce.run.test.ts": "import debounce from './debounce';\n\ndescribe('debounce', () => {\n  test('can be initialized', () => {\n    const increment = debounce(() => {}, 50);\n    expect(increment).toBeTruthy();\n  });\n\n  test('executes after duration', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    expect(i).toBe(0);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n    }, 20);\n  });\n});\n",
    "/src/debounce.submit.test.ts": "import debounce from './debounce';\n\ndescribe('debounce', () => {\n  test('can be initialized', () => {\n    const increment = debounce(() => {}, 50);\n    expect(increment).toBeTruthy();\n  });\n\n  test('executes after duration', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    expect(i).toBe(0);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n    }, 20);\n  });\n\n  describe('uses arguments', () => {\n    test('called once', (done) => {\n      let i = 21;\n      const increment = debounce((a: number, b: number) => {\n        i += a * b;\n      }, 10);\n\n      expect(i).toBe(21);\n      increment(3, 7);\n      expect(i).toBe(21);\n\n      setTimeout(() => {\n        expect(i).toBe(42);\n        done();\n      }, 20);\n    });\n\n    test('uses arguments of latest invocation', (done) => {\n      let i = 21;\n      const increment = debounce((a: number, b: number) => {\n        i += a * b;\n      }, 10);\n\n      expect(i).toBe(21);\n      increment(3, 7);\n      increment(4, 5);\n      expect(i).toBe(21);\n\n      setTimeout(() => {\n        expect(i).toBe(41);\n        done();\n      }, 20);\n    });\n  });\n\n  test('execute once even after calling it multiple times', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 20);\n\n    expect(i).toBe(0);\n    increment();\n    increment();\n    increment();\n    increment();\n    expect(i).toBe(0);\n\n    // Should not fire yet.\n    setTimeout(() => {\n      expect(i).toBe(0);\n    }, 10);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n    }, 30);\n  });\n\n  test('duration extended if called again during window', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 100);\n\n    expect(i).toBe(0);\n    increment();\n    increment();\n    expect(i).toBe(0);\n\n    // Should not fire yet.\n    setTimeout(() => {\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n    }, 50);\n\n    setTimeout(() => {\n      // Still 0 because we fired again at t=50, increment will only happen at t=150\n      expect(i).toBe(0);\n    }, 125);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n      // Add a longer delay because the browser timer is unreliable.\n    }, 1500);\n  });\n\n  test('callbacks can access `this`', (done) => {\n    const increment = debounce(function (this: any, delta: number) {\n      this.val += delta;\n    }, 10);\n\n    const obj = {\n      val: 2,\n      increment,\n    };\n\n    expect(obj.val).toBe(2);\n    obj.increment(3);\n    expect(obj.val).toBe(2);\n\n    setTimeout(() => {\n      expect(obj.val).toBe(5);\n      done();\n    }, 20);\n  });\n});\n",
    "/src/debounce.ts": "export default function debounce(func: Function, wait: number = 0): Function {\n  let timeoutID: ReturnType<typeof setTimeout> | null = null;\n\n  return function (this: any, ...args: any[]) {\n    // Keep a reference to `this` so that\n    // func.apply() can access it.\n    const context = this;\n    clearTimeout(timeoutID ?? undefined);\n\n    timeoutID = setTimeout(function () {\n      timeoutID = null; // Not strictly necessary but good to do this.\n      func.apply(context, args);\n    }, wait);\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} func\n * @param {number} wait\n * @return {Function}\n */\nexport default function debounce(func, wait) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function debounce(func: Function, wait: number): Function {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/debounce.ts",
    "run": "/src/debounce.run.test.ts",
    "submit": "/src/debounce.submit.test.ts"
  }
}