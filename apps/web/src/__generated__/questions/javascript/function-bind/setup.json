{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/function-bind\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/function-bind.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/function-bind.run.test.ts": "import './function-bind';\n\ndescribe('Function.prototype.myBind', () => {\n  const person = {\n    name: 'John',\n    getName() {\n      return this.name;\n    },\n    dummy(a: number, b: number, c: number) {\n      return [a, b, c];\n    },\n    greeting(prefix: string, message: string) {\n      return `${prefix} ${this.name}, ${message}`;\n    },\n  };\n\n  test('Function.prototype.myBind is a function', () => {\n    expect(typeof Function.prototype.myBind).toBe('function');\n  });\n\n  test('`this` is bound', () => {\n    const unboundGetName = person.getName;\n    expect(() => {\n      unboundGetName();\n    }).toThrow();\n\n    const getName = person.getName.myBind(person);\n    expect(getName()).toBe(person.name);\n  });\n\n  test('args can be bound', () => {\n    const dummy = person.dummy.myBind(person, 2, 3, 5);\n    expect(dummy()).toStrictEqual([2, 3, 5]);\n  });\n});\n",
    "/src/function-bind.submit.test.ts": "import './function-bind';\n\ndescribe('Function.prototype.myBind', () => {\n  const person = {\n    name: 'John',\n    getName() {\n      return this.name;\n    },\n    dummy(a: number, b: number, c: number) {\n      return [a, b, c];\n    },\n    greeting(prefix: string, message: string) {\n      return `${prefix} ${this.name}, ${message}`;\n    },\n  };\n\n  test('Function.prototype.myBind is a function', () => {\n    expect(typeof Function.prototype.myBind).toBe('function');\n  });\n\n  test('`this` is bound', () => {\n    const unboundGetName = person.getName;\n    expect(() => {\n      unboundGetName();\n    }).toThrow();\n\n    const getName = person.getName.myBind(person);\n    expect(getName()).toBe(person.name);\n  });\n\n  describe('arguments', () => {\n    test('args can be bound', () => {\n      const dummy = person.dummy.myBind(person, 2, 3, 5);\n      expect(dummy()).toStrictEqual([2, 3, 5]);\n    });\n\n    test('returned function accepts args', () => {\n      const dummy = person.dummy.myBind(person);\n      expect(dummy(2, 3, 5)).toStrictEqual([2, 3, 5]);\n    });\n\n    test('returned function called with bound args and new args', () => {\n      const dummy = person.dummy.myBind(person, 2);\n      expect(dummy(3, 5)).toStrictEqual([2, 3, 5]);\n    });\n  });\n\n  test('integration', () => {\n    const greeting = person.greeting.myBind(person, 'Mr.');\n    expect(greeting('good morning!')).toStrictEqual('Mr. John, good morning!');\n  });\n});\n",
    "/src/function-bind.ts": "interface Function {\n  myBind(this: Function, thisArg: any, ...argArray: any[]): Function;\n}\n\nFunction.prototype.myBind = function (thisArg, ...argArray) {\n  const originalMethod = this;\n  return function (...args: any[]) {\n    return originalMethod.apply(thisArg, [...argArray, ...args]);\n  };\n};\n"
  },
  "skeleton": {
    "js": "/**\n * @param {any} thisArg\n * @param {...*} argArray\n * @return {Function}\n */\nFunction.prototype.myBind = function (thisArg, ...argArray) {\n  throw 'Not implemented!';\n};",
    "ts": "interface Function {\n  myBind(this: Function, thisArg: any, ...argArray: any[]): Function;\n}\n\nFunction.prototype.myBind = function (\n  this: Function,\n  thisArg: any,\n  ...argArray: any[]\n) {\n  throw 'Not implemented!';\n};"
  },
  "workspace": {
    "main": "/src/function-bind.ts",
    "run": "/src/function-bind.run.test.ts",
    "submit": "/src/function-bind.submit.test.ts"
  }
}