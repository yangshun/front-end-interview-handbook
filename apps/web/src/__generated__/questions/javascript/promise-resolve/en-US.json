{
  "description": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var l in e)o(r,l,{get:e[l],enumerable:!0})},t=(r,e,l,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!u.call(r,i)&&i!==l&&o(r,i,{get:()=>e[i],enumerable:!(s=m(e,i))||s.enumerable});return r};var b=(r,e,l)=>(l=r!=null?d(v(r)):{},t(e||!r||!r.__esModule?o(l,\"default\",{value:r,enumerable:!0}):l,r)),w=r=>t(o({},\"__esModule\",{value:!0}),r);var c=f((A,a)=>{a.exports=_jsx_runtime});var R={};g(R,{default:()=>P,frontmatter:()=>j});var n=b(c()),j={title:\"Promise.resolve\",excerpt:\"Implement a function to resolve a given value to a Promise\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",em:\"em\",a:\"a\",h2:\"h2\",pre:\"pre\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Promise.resolve()\"}),' static method \"resolves\" a given value to a ',(0,n.jsx)(e.code,{children:\"Promise\"}),\". If the value is:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"A native promise, return that promise.\"}),`\n`,(0,n.jsx)(e.li,{children:\"A non-thenable, return a promise that is already fulfilled with that value.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"A thenable, \",(0,n.jsx)(e.code,{children:\"Promise.resolve()\"}),\" will call the \",(0,n.jsx)(e.code,{children:\"then()\"}),\" method and pass a pair of resolving functions as arguments. A promise that has the same state as the thenable is returned.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[\"Source: \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\",children:\"Promise.resolve() - JavaScript | MDN\"})]})}),`\n`,(0,n.jsxs)(e.p,{children:['A \"thenable\" is an interface that implements the ',(0,n.jsx)(e.code,{children:\".then()\"}),\" method, which is called with two callbacks: one for when the promise is fulfilled, one for when it's rejected. Promises are also thenables.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Implement the \",(0,n.jsx)(e.code,{children:\"Promise.resolve()\"}),\" function as \",(0,n.jsx)(e.code,{children:\"promiseResolve\"}),\". You can ignore the case where \",(0,n.jsx)(e.code,{children:\"this\"}),\" is referenced within the implemented function.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.p,{children:\"Resolving a non-promise.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const p = promiseResolve(42);\nawait p; // 42\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Resolving a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const original = new Promise((resolve) => resolve(42));\nconst cast = promiseResolve(original);\nawait cast; // 42\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Resolving a thenable.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const resolvedThenable = promiseResolve({\n  then(resolve, reject) {\n    resolve(42);\n  },\n});\nawait resolvedThenable; // 42\n`})})]})}function x(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var P=x;return w(R);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/promise-resolve\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/promise-resolve.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/promise-resolve.run.test.ts": "import promiseResolve from './promise-resolve';\n\ndescribe('promiseResolve', () => {\n  test('returns promise', () => {\n    expect(promiseResolve(1) instanceof Promise).toBe(true);\n  });\n\n  test('returns the value', () => {\n    const p = promiseResolve(42);\n    return expect(p).resolves.toBe(42);\n  });\n\n  test('returns the same promise instance', () => {\n    const p = new Promise((resolve) => resolve(42));\n    expect(promiseResolve(p)).toBe(p);\n  });\n\n  test('thenable', () => {\n    const p = promiseResolve({\n      then(resolve: Function) {\n        resolve(42);\n      },\n    });\n\n    return expect(p).resolves.toBe(42);\n  });\n});\n",
    "/src/promise-resolve.submit.test.ts": "import promiseResolve from './promise-resolve';\n\n// TODO: fix tests passing even if resolved value is incorrect.\ndescribe('promiseResolve', () => {\n  test('returns promise', () => {\n    expect(promiseResolve(1)).toBeInstanceOf(Promise);\n  });\n\n  describe('non-promise', () => {\n    test('returns promise', () => {\n      expect(promiseResolve(1)).toBeInstanceOf(Promise);\n    });\n\n    test('resolves', () => {\n      const p = promiseResolve(42);\n      return expect(p).resolves.toBe(42);\n    });\n  });\n\n  describe('promise', () => {\n    test('returns promise', () => {\n      expect(\n        promiseResolve(new Promise((resolve) => resolve(42))),\n      ).toBeInstanceOf(Promise);\n    });\n\n    test('returns the same promise instance', () => {\n      const p = new Promise((resolve) => resolve(42));\n      expect(promiseResolve(p)).toBe(p);\n    });\n\n    test('resolves', () => {\n      const p = promiseResolve(new Promise((resolve) => resolve(42)));\n      return expect(p).resolves.toBe(42);\n    });\n\n    test('nested', () => {\n      const p = promiseResolve(\n        new Promise((resolve) =>\n          resolve(new Promise((resolve) => resolve(42))),\n        ),\n      );\n      return expect(p).resolves.toBe(42);\n    });\n\n    test('rejects', () => {\n      const p = promiseResolve(new Promise((_, reject) => reject(42)));\n      return expect(p).rejects.toBe(42);\n    });\n\n    test('use with then', (done) => {\n      expect.assertions(1);\n      const p = promiseResolve(new Promise((resolve) => resolve(42)));\n      p.then((result) => {\n        expect(result).toBe(42);\n        done();\n      });\n    });\n  });\n\n  describe('thenable', () => {\n    test('returns promise', () => {\n      expect(\n        promiseResolve({\n          then(resolve: Function) {\n            resolve(42);\n          },\n        }),\n      ).toBeInstanceOf(Promise);\n    });\n\n    test('resolves', () => {\n      const p = promiseResolve({\n        then(resolve: Function) {\n          resolve(42);\n        },\n      });\n      return expect(p).resolves.toBe(42);\n    });\n\n    test('throw', () => {\n      const p = promiseResolve({\n        then() {\n          throw 42;\n        },\n      });\n      return expect(p).rejects.toBe(42);\n    });\n\n    test('throw after resolving', () => {\n      const p = promiseResolve({\n        then(resolve: Function) {\n          resolve(42);\n          throw 42;\n        },\n      });\n      return expect(p).resolves.toBe(42);\n    });\n\n    test('rejects', () => {\n      const p = promiseResolve({\n        then(_, reject: Function) {\n          reject(42);\n        },\n      });\n      return expect(p).rejects.toBe(42);\n    });\n\n    test('use with then', (done) => {\n      expect.assertions(1);\n      const p = promiseResolve({\n        then(resolve: Function) {\n          resolve(42);\n        },\n      });\n      p.then((result) => {\n        expect(result).toBe(42);\n        done();\n      });\n    });\n\n    test('nested', () => {\n      const p = promiseResolve({\n        then(resolve: Function) {\n          resolve({\n            then(resolve: Function) {\n              resolve(42);\n            },\n          });\n        },\n      });\n      return expect(p).resolves.toBe(42);\n    });\n\n    test('can access `this`', () => {\n      const p = promiseResolve({\n        value: 42,\n        then(this: any, resolve: Function) {\n          resolve(this.value);\n        },\n      });\n      return expect(p).resolves.toBe(42);\n    });\n  });\n\n  test('use with Promise.all()', () => {\n    const p0 = promiseResolve(3);\n    const p1 = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve('foo');\n      }, 100);\n    });\n\n    return expect(Promise.all([p0, p1])).resolves.toStrictEqual([3, 'foo']);\n  });\n\n  test('use with Promise.allSettled()', async () => {\n    const p0 = promiseResolve(2);\n    const p1 = promiseResolve(3);\n\n    const res = await Promise.allSettled([p0, p1]);\n    expect(res).toEqual([\n      {\n        status: 'fulfilled',\n        value: 2,\n      },\n      {\n        status: 'fulfilled',\n        value: 3,\n      },\n    ]);\n  });\n\n  test('use with Promise.any()', async () => {\n    const p0 = promiseResolve(2);\n    const p1 = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(3);\n      }, 10);\n    });\n\n    const res = await Promise.any([p0, p1]);\n    expect(res).toEqual(2);\n  });\n\n  test('use with Promise.race()', async () => {\n    const p0 = promiseResolve(2);\n    const p1 = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(3);\n      }, 10);\n    });\n\n    const res = await Promise.race([p0, p1]);\n    expect(res).toEqual(2);\n  });\n});\n",
    "/src/promise-resolve.ts": "export default function promiseResolve<T>(\n  value: T | PromiseLike<T>,\n): Promise<Awaited<T>> {\n  if (value instanceof Promise) {\n    return value;\n  }\n\n  if (typeof (value as PromiseLike<T>).then === 'function') {\n    // Note that the typing can be improved.\n    return new Promise((value as PromiseLike<T>).then.bind(value) as any);\n  }\n\n  return new Promise((resolve) => resolve(value as Awaited<T>));\n}\n"
  },
  "info": {
    "excerpt": "Implement a function to resolve a given value to a Promise",
    "title": "Promise.resolve"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [
      "google",
      "bytedance"
    ],
    "created": 1690329600,
    "difficulty": "medium",
    "duration": 15,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/promise-resolve",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "promise-with-resolvers"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "promise-reject",
      "promise-timeout"
    ],
    "slug": "promise-resolve",
    "subtitle": null,
    "topics": [
      "async"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {*} value\n * @returns Promise\n */\nexport default function promiseResolve(value) {\n  throw 'Not implemented';\n}",
    "ts": "export default function promiseResolve(value: any): Promise<any> {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of P(e))!b.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(s=w(e,r))||s.enumerable});return t};var y=(t,e,o)=>(o=t!=null?p(T(t)):{},l(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),j=t=>l(i({},\"__esModule\",{value:!0}),t);var d=g((D,c)=>{c.exports=_jsx_runtime});var A={};x(A,{default:()=>S});var n=y(d());var a=MDXCodeBlock;var h=`/**\n * @param {*} value\n * @returns Promise\n */\nexport default function promiseResolve(value) {\n  if (value instanceof Promise) {\n    return value;\n  }\n\n  if (typeof value.then === 'function') {\n    return new Promise(value.then.bind(value));\n  }\n\n  return new Promise((resolve) => resolve(value));\n}\n`;var u=`export default function promiseResolve<T>(\n  value: T | PromiseLike<T>,\n): Promise<Awaited<T>> {\n  if (value instanceof Promise) {\n    return value;\n  }\n\n  if (typeof (value as PromiseLike<T>).then === 'function') {\n    // Note that the typing can be improved.\n    return new Promise((value as PromiseLike<T>).then.bind(value) as any);\n  }\n\n  return new Promise((resolve) => resolve(value as Awaited<T>));\n}\n`;var m=`/**\n * @param {*} value\n * @returns Promise\n */\nexport default function promiseResolve(value) {\n  if (value instanceof Promise) {\n    return value;\n  }\n\n  return new Promise((resolve) => resolve(value));\n}\n`;var v=`export default function promiseResolve<T>(\n  value: T | PromiseLike<T>,\n): Promise<Awaited<T>> {\n  if (value instanceof Promise) {\n    return value;\n  }\n\n  return new Promise((resolve) => resolve(value as Awaited<T>));\n}\n`;function f(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ol:\"ol\",li:\"li\",strong:\"strong\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The purpose of \",(0,n.jsx)(e.code,{children:\"Promise.resolve\"}),\" is to add a safe wrapper around any value such that can be used with \",(0,n.jsx)(e.code,{children:\"then()\"}),\" or \",(0,n.jsx)(e.code,{children:\"await\"}),\"-ed.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There are three cases to handle within the static \",(0,n.jsx)(e.code,{children:\"Promise.resolve\"}),\" function:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If the \",(0,n.jsx)(e.code,{children:\"value\"}),\" is a native \",(0,n.jsx)(e.code,{children:\"Promise\"}),\", return it directly without \",(0,n.jsx)(e.strong,{children:\"creating a new instance\"}),\". We can check for this case using \",(0,n.jsx)(e.code,{children:\"value instance of Promise\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the \",(0,n.jsx)(e.code,{children:\"value\"}),\" is not a thenable, return a promise that's fulfilled with the value. We can use a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" constructor that calls \",(0,n.jsx)(e.code,{children:\"resolve\"}),\" with the value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the value is a thenable, the \",(0,n.jsx)(e.code,{children:\"then()\"}),\" method will be called. The \",(0,n.jsx)(e.code,{children:\"then()\"}),\" method has the same signature as a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" constructor.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The first two cases are straightforward. Let's talk a bit about the last case. Since the \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" constructor and \",(0,n.jsx)(e.code,{children:\"then()\"}),\" has the same parameters, one might be tempted to pass \",(0,n.jsx)(e.code,{children:\"value.then\"}),\" to a \",(0,n.jsx)(e.code,{children:\"new Promise\"}),\" e.g. \",(0,n.jsx)(e.code,{children:\"new Promise(value.then)\"}),\" and call it a day. However, the \",(0,n.jsx)(e.code,{children:\"then()\"}),\" will lose the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\". Hence we need to pass in \",(0,n.jsx)(e.code,{children:\"value.then.bind(value)\"}),\" instead.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Nested thenables and promises should also be flattened. This is already handled by the \",(0,n.jsx)(e.code,{children:\"resolve\"}),\" callbacks of a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" constructor, so we don't have to manually attempt to flatten.\"]}),`\n`,(0,n.jsx)(a,{languages:{jsx:h,tsx:u}}),`\n`,(0,n.jsxs)(e.p,{children:[\"In fact, the \",(0,n.jsx)(e.code,{children:\"resolve\"}),\" function can also handle thenables. So we can simplify the code even further.\"]}),`\n`,(0,n.jsx)(a,{languages:{jsx:m,tsx:v}})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var S=M;return j(A);})();\n;return Component;",
  "workspace": {
    "main": "/src/promise-resolve.ts",
    "run": "/src/promise-resolve.run.test.ts",
    "submit": "/src/promise-resolve.submit.test.ts"
  }
}