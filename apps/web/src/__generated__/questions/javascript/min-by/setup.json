{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/min-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/min-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/min-by.run.test.ts": "import minBy from './min-by';\n\ndescribe('minBy', () => {\n  test('empty input array', () => {\n    expect(minBy([], () => {})).toEqual(undefined);\n  });\n\n  test('one element', () => {\n    expect(minBy([{ n: 1 }], (o) => o.n)).toEqual({ n: 1 });\n  });\n\n  test('two elements', () => {\n    expect(minBy([{ n: 1 }, { n: 2 }], (o) => o.n)).toEqual({ n: 1 });\n    expect(\n      minBy(\n        [{ data: { score: 20 } }, { data: { score: 10 } }],\n        (o) => o.data.score,\n      ),\n    ).toEqual({ data: { score: 10 } });\n  });\n});\n",
    "/src/min-by.submit.test.ts": "import minBy from './min-by';\n\ndescribe('minBy', () => {\n  test('empty input array', () => {\n    expect(minBy([], () => {})).toEqual(undefined);\n  });\n\n  test('one element', () => {\n    expect(minBy([{ n: 1 }], (o) => o.n)).toEqual({ n: 1 });\n  });\n\n  test('two elements', () => {\n    expect(minBy([{ n: 1 }, { n: 2 }], (o) => o.n)).toEqual({ n: 1 });\n    expect(\n      minBy(\n        [{ data: { score: 20 } }, { data: { score: 10 } }],\n        (o) => o.data.score,\n      ),\n    ).toEqual({ data: { score: 10 } });\n  });\n\n  test('multiple elements', () => {\n    expect(minBy([2, 3, 1, 4], (num) => num)).toEqual(1);\n    expect(minBy([{ n: 1 }, { n: 2 }, { n: 3 }], (o) => o.n)).toEqual({\n      n: 1,\n    });\n  });\n\n  test('strings comparison', () => {\n    expect(\n      minBy(['apricot', 'pear', 'apple', 'banana'], (fruit) => fruit),\n    ).toEqual('apple');\n    expect(minBy(['apple', 'pear', 'banana'], (fruit) => fruit.length)).toEqual(\n      'pear',\n    );\n  });\n\n  describe('non-existent property', () => {\n    test('no match', () => {\n      expect(minBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual(undefined);\n    });\n\n    test('partial match', () => {\n      expect(minBy([{ n: 1 }, { n: 2, m: 3 }, { m: 4 }], (o) => o.m)).toEqual({\n        n: 2,\n        m: 3,\n      });\n    });\n  });\n\n  test('first minimum occurrence', () => {\n    expect(\n      minBy(\n        [{ n: 1, m: 3 }, { n: 0, m: 2 }, { n: 2 }, { n: 0 }],\n        (o: any) => o.m,\n      ),\n    ).toEqual({ n: 0, m: 2 });\n  });\n\n  test('mixed data types', () => {\n    expect(minBy([1, '2', 3], (item) => Number(item))).toEqual(1);\n    expect(minBy([4, '2', 3, 2], (item) => Number(item))).toEqual('2');\n    expect(minBy(['1', 2, 3, '-1'], (item) => Number(item))).toEqual('-1');\n  });\n});\n",
    "/src/min-by.ts": "export default function minBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => any,\n): any {\n  let result, computed;\n\n  // Iterate through array to find the minimum `result`.\n  for (const value of array) {\n    const current = iteratee(value);\n    // Check whether `computed` is assigned any value yet then compare with `current`, else assign an initial value to `computed` where `current` is not `null`.\n    if (current != null && (computed === undefined || current < computed)) {\n      result = value;\n      computed = current; // Store the computed value of the current `result`.\n    }\n  }\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n */\nexport default function minBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function minBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => any,\n): any {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/min-by.ts",
    "run": "/src/min-by.run.test.ts",
    "submit": "/src/min-by.submit.test.ts"
  }
}