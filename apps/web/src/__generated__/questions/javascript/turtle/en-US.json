{
  "description": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},l=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!p.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(o=u(e,i))||o.enumerable});return n};var v=(n,e,r)=>(r=n!=null?d(m(n)):{},l(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>l(a({},\"__esModule\",{value:!0}),n);var s=f((_,c)=>{c.exports=_jsx_runtime});var P={};w(P,{default:()=>j,frontmatter:()=>y});var t=v(s()),y={title:\"Turtle\",excerpt:\"Implement a Turtle class that moves a turtle on a 2D plane\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Python comes with a \",(0,t.jsx)(e.code,{children:\"turtle\"}),\" module that is a great graphical way for introducing programming to kids. The turtle starts at (0, 0) on an x-y plane, and you can move the turtle around and change the direction its facing. When the turtle moves, it leaves a line trail behind it that appears on a canvas. With these movement APIs, users can draw shapes and even complex ones by leveraging loops.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"Turtle\"}),\" class in JavaScript that simulates the movement of a turtle. The turtle starts at (0, 0) facing north, and has the following methods:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"forward(distance)\"}),\": Moves the turtle forward by \",(0,t.jsx)(e.code,{children:\"distance\"}),\" units in the direction it is facing.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"backward(distance)\"}),\": Moves the turtle backward by \",(0,t.jsx)(e.code,{children:\"distance\"}),\" units while facing the same direction.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"left()\"}),\": Rotates the turtle in-place 90 degrees to the left, changing only the direction it is facing.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"right()\"}),\": Rotates the turtle in-place 90 degrees to the right, changing only the direction it is facing.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"position()\"}),\": Returns the coordinates of the turtle as \",(0,t.jsx)(e.code,{children:\"[x, y]\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const turtle = new Turtle();\nturtle.position(); // [0, 0]\nturtle.forward(1); // Position: [0, 1]\nturtle.backward(1); // Position: [0, 0]\nturtle.right(); // Position remains unchanged\nturtle.forward(2); // Position: [2, 0] because it moved 2 units to the right.\n\n// Methods can also be chained.\nturtle.right().right().forward(5); // Position: [-3, 0] because it turned 180 degrees and moved 5 units forward (towards the left).\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.python.org/3/library/turtle.html\",children:\"Python Turtle graphics\"})}),`\n`]})]})}function b(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var j=b;return x(P);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/turtle\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/turtle.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/turtle.run.test.ts": "import Turtle from './turtle';\n\ndescribe('turtle', () => {\n  test('constructor', () => {\n    const turtle = new Turtle();\n    expect(turtle).toBeInstanceOf(Turtle);\n  });\n\n  test('forward', () => {\n    const turtle = new Turtle();\n    turtle.forward(2);\n    expect(turtle.position()).toEqual([0, 2]);\n  });\n\n  test('turn left', () => {\n    const turtle = new Turtle();\n    turtle.left();\n    turtle.forward(3);\n    expect(turtle.position()).toEqual([-3, 0]);\n  });\n});\n",
    "/src/turtle.submit.test.ts": "import Turtle from './turtle';\n\ndescribe('turtle', () => {\n  test('constructor', () => {\n    const turtle = new Turtle();\n    expect(turtle).toBeInstanceOf(Turtle);\n  });\n\n  describe('movement', () => {\n    test('forward', () => {\n      const turtle = new Turtle();\n      turtle.forward(2);\n      expect(turtle.position()).toEqual([0, 2]);\n      turtle.forward(3);\n      expect(turtle.position()).toEqual([0, 5]);\n    });\n\n    test('backward', () => {\n      const turtle = new Turtle();\n      turtle.backward(2);\n      expect(turtle.position()).toEqual([0, -2]);\n      turtle.backward(3);\n      expect(turtle.position()).toEqual([0, -5]);\n    });\n  });\n\n  describe('turning', () => {\n    test('left', () => {\n      const turtle = new Turtle();\n      turtle.left();\n      turtle.forward(3);\n      expect(turtle.position()).toEqual([-3, 0]);\n      turtle.backward(3);\n      expect(turtle.position()).toEqual([0, 0]);\n      turtle.left();\n      turtle.forward(5);\n      expect(turtle.position()).toEqual([0, -5]);\n      turtle.left();\n      turtle.forward(3);\n      expect(turtle.position()).toEqual([3, -5]);\n    });\n\n    test('right', () => {\n      const turtle = new Turtle();\n      turtle.right();\n      turtle.forward(3);\n      expect(turtle.position()).toEqual([3, 0]);\n      turtle.backward(3);\n      expect(turtle.position()).toEqual([0, 0]);\n      turtle.right();\n      turtle.forward(5);\n      expect(turtle.position()).toEqual([0, -5]);\n      turtle.right();\n      turtle.forward(3);\n      expect(turtle.position()).toEqual([-3, -5]);\n    });\n  });\n\n  test('position', () => {\n    const turtle = new Turtle();\n    expect(turtle.position()).toEqual([0, 0]);\n    turtle.forward(1);\n    expect(turtle.position()).toEqual([0, 1]);\n  });\n\n  describe('method chaining', () => {\n    test('turning', () => {\n      const turtle = new Turtle();\n      turtle.left().left().left().right().right().right().forward(3);\n      expect(turtle.position()).toEqual([0, 3]);\n      turtle.right().right().right().left().left().left().forward(3);\n      expect(turtle.position()).toEqual([0, 6]);\n    });\n\n    test('forward and backward', () => {\n      const turtle = new Turtle();\n      turtle.right().forward(3);\n      expect(turtle.position()).toEqual([3, 0]);\n      turtle.backward(3);\n      expect(turtle.position()).toEqual([0, 0]);\n      turtle.right().forward(5);\n      expect(turtle.position()).toEqual([0, -5]);\n      turtle.left().backward(3);\n      expect(turtle.position()).toEqual([-3, -5]);\n    });\n  });\n});\n",
    "/src/turtle.ts": "enum Direction {\n  North = 0,\n  East = 1,\n  South = 2,\n  West = 3,\n}\n\nconst NUMBER_OF_CARDINAL_DIRECTIONS = 4;\n\nexport default class Turtle {\n  x: number;\n  y: number;\n  direction: Direction;\n\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.direction = Direction.North;\n  }\n\n  forward(distance: number): Turtle {\n    this._move(distance);\n    return this;\n  }\n\n  backward(distance: number): Turtle {\n    this._move(-distance);\n    return this;\n  }\n\n  _move(distance: number): Turtle {\n    switch (this.direction) {\n      case Direction.North:\n        this.y += distance;\n        break;\n      case Direction.East:\n        this.x += distance;\n        break;\n      case Direction.South:\n        this.y -= distance;\n        break;\n      case Direction.West:\n        this.x -= distance;\n        break;\n    }\n    return this;\n  }\n\n  left(): Turtle {\n    // Wrap around behavior.\n    this.direction =\n      (this.direction - 1 + NUMBER_OF_CARDINAL_DIRECTIONS) %\n      NUMBER_OF_CARDINAL_DIRECTIONS;\n    return this;\n  }\n\n  right(): Turtle {\n    // Wrap around behavior.\n    this.direction =\n      (this.direction + 1 + NUMBER_OF_CARDINAL_DIRECTIONS) %\n      NUMBER_OF_CARDINAL_DIRECTIONS;\n    return this;\n  }\n\n  position(): [number, number] {\n    return [this.x, this.y];\n  }\n}\n"
  },
  "info": {
    "excerpt": "Implement a Turtle class that moves a turtle on a 2D plane",
    "title": "Turtle"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1689638400,
    "difficulty": "medium",
    "duration": 15,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/turtle",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "turtle",
    "subtitle": null,
    "topics": [
      "oop"
    ]
  },
  "skeleton": {
    "js": "export default class Turtle {\n  constructor() {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @param {number} distance Distance to move forward while facing the current direction.\n   * @return {Turtle}\n   */\n  forward(distance) {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @param {number} distance Distance to move backward while facing the current direction.\n   * @return {Turtle}\n   */\n  backward(distance) {\n    throw 'Not implemented';\n  }\n\n  /**\n   * Turns the turtle left.\n   * @return {Turtle}\n   */\n  left() {\n    throw 'Not implemented';\n  }\n\n  /**\n   * Turns the turtle right.\n   * @return {Turtle}\n   */\n  right() {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @return {[number, number]} Coordinates [x, y]\n   */\n  position() {\n    throw 'Not implemented';\n  }\n}",
    "ts": "export default class Turtle {\n  constructor() {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @param {number} distance Distance to move forward while facing the current direction.\n   * @return {Turtle}\n   */\n  forward(distance: number): Turtle {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @param {number} distance Distance to move backward while facing the current direction.\n   * @return {Turtle}\n   */\n  backward(distance: number): Turtle {\n    throw 'Not implemented';\n  }\n\n  /**\n   * Turns the turtle left.\n   * @return {Turtle}\n   */\n  left(): Turtle {\n    throw 'Not implemented';\n  }\n\n  /**\n   * Turns the turtle right.\n   * @return {Turtle}\n   */\n  right(): Turtle {\n    throw 'Not implemented';\n  }\n\n  /**\n   * @return {[number, number]} Coordinates [x, y]\n   */\n  position(): [number, number] {\n    throw 'Not implemented';\n  }\n}"
  },
  "solution": "var Component=(()=>{var b=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var w=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),T=(i,e)=>{for(var n in e)o(i,n,{get:e[n],enumerable:!0})},a=(i,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!_.call(i,r)&&r!==n&&o(i,r,{get:()=>e[r],enumerable:!(c=f(e,r))||c.enumerable});return i};var N=(i,e,n)=>(n=i!=null?b(g(i)):{},a(e||!i||!i.__esModule?o(n,\"default\",{value:i,enumerable:!0}):n,i)),D=i=>a(o({},\"__esModule\",{value:!0}),i);var h=w((O,s)=>{s.exports=_jsx_runtime});var x={};T(x,{default:()=>I});var t=N(h());var d=MDXCodeBlock;var l=`const NORTH = 0;\nconst EAST = 1;\nconst SOUTH = 2;\nconst WEST = 3;\nconst NUMBER_OF_CARDINAL_DIRECTIONS = 4;\n\nexport default class Turtle {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.direction = NORTH;\n  }\n\n  /**\n   * @param {number} distance Distance to move forward while facing the current direction.\n   * @return {Turtle}\n   */\n  forward(distance) {\n    this._move(distance);\n    return this;\n  }\n\n  /**\n   * @param {number} distance Distance to move backward while facing the current direction.\n   * @return {Turtle}\n   */\n  backward(distance) {\n    this._move(-distance);\n    return this;\n  }\n\n  _move(distance) {\n    switch (this.direction) {\n      case NORTH:\n        this.y += distance;\n        break;\n      case EAST:\n        this.x += distance;\n        break;\n      case SOUTH:\n        this.y -= distance;\n        break;\n      case WEST:\n        this.x -= distance;\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Turns the turtle left.\n   * @return {Turtle}\n   */\n  left() {\n    // Wrap around behavior.\n    this.direction =\n      (this.direction - 1 + NUMBER_OF_CARDINAL_DIRECTIONS) %\n      NUMBER_OF_CARDINAL_DIRECTIONS;\n    return this;\n  }\n\n  /**\n   * Turns the turtle right.\n   * @return {Turtle}\n   */\n  right() {\n    // Wrap around behavior.\n    this.direction =\n      (this.direction + 1 + NUMBER_OF_CARDINAL_DIRECTIONS) %\n      NUMBER_OF_CARDINAL_DIRECTIONS;\n    return this;\n  }\n\n  /**\n   * @return {[number, number]} Coordinates [x, y]\n   */\n  position() {\n    return [this.x, this.y];\n  }\n}\n`;var u=`enum Direction {\n  North = 0,\n  East = 1,\n  South = 2,\n  West = 3,\n}\n\nconst NUMBER_OF_CARDINAL_DIRECTIONS = 4;\n\nexport default class Turtle {\n  x: number;\n  y: number;\n  direction: Direction;\n\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.direction = Direction.North;\n  }\n\n  forward(distance: number): Turtle {\n    this._move(distance);\n    return this;\n  }\n\n  backward(distance: number): Turtle {\n    this._move(-distance);\n    return this;\n  }\n\n  _move(distance: number): Turtle {\n    switch (this.direction) {\n      case Direction.North:\n        this.y += distance;\n        break;\n      case Direction.East:\n        this.x += distance;\n        break;\n      case Direction.South:\n        this.y -= distance;\n        break;\n      case Direction.West:\n        this.x -= distance;\n        break;\n    }\n    return this;\n  }\n\n  left(): Turtle {\n    // Wrap around behavior.\n    this.direction =\n      (this.direction - 1 + NUMBER_OF_CARDINAL_DIRECTIONS) %\n      NUMBER_OF_CARDINAL_DIRECTIONS;\n    return this;\n  }\n\n  right(): Turtle {\n    // Wrap around behavior.\n    this.direction =\n      (this.direction + 1 + NUMBER_OF_CARDINAL_DIRECTIONS) %\n      NUMBER_OF_CARDINAL_DIRECTIONS;\n    return this;\n  }\n\n  position(): [number, number] {\n    return [this.x, this.y];\n  }\n}\n`;function m(i){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",h4:\"h4\",ul:\"ul\",li:\"li\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To model the state of the turtle, we only need the coordinates and direction. Coordinates are numbers stored in the \",(0,t.jsx)(e.code,{children:\"x\"}),\" and \",(0,t.jsx)(e.code,{children:\"y\"}),\" fields. Since the operations only allow the turtle to turn 90 degrees, which is essentially the cardinal directions North, South, East, West, the \",(0,t.jsx)(e.code,{children:\"direction\"}),\" property can be represented by an enum. For this specific case, an integer from 0 - 3 (corresponding to North, South, East, West respectively) is the best representation. The reasons will be explained in more detail below.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Methods\"}),`\n`,(0,t.jsxs)(e.h4,{children:[\"Turning via \",(0,t.jsx)(e.code,{children:\"left()\"}),\" and \",(0,t.jsx)(e.code,{children:\"right()\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"When the turtle is facing north (0), turning left will make the turtle face west (3). There are a total of 4 cardinal directions. With the use of the modulo operator, we can conveniently calculate the new direction the turtle will be facing by subtracting 1 (turning left), or adding 1 (turning right) and then taking the modulo of 4 on the new value. Using an integer from 0-3 for the \",(0,t.jsx)(e.code,{children:\"direction\"}),\", makes it convenient to implement the turning logic. To improve readability, we define \",(0,t.jsx)(e.code,{children:\"const\"}),\" for these directions.\"]}),`\n`,(0,t.jsxs)(e.h4,{children:[\"Moving \",(0,t.jsx)(e.code,{children:\"forward()\"}),\" and \",(0,t.jsx)(e.code,{children:\"backward()\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The logic for moving forward/backward has large overlap, and \",(0,t.jsx)(e.code,{children:\"backward(distance)\"}),\" is essentially moving \",(0,t.jsx)(e.code,{children:\"forward(-distance)\"}),\". Hence we can create a private helper function to calculate the new x/y coordinates based on the direction the turtle is currently facing:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"While facing north/south, moving forward/backward will increase/decrease the \",(0,t.jsx)(e.code,{children:\"y\"}),\" coordinate respectively.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"While facing east/west, moving forward/backward will increase/decrease the \",(0,t.jsx)(e.code,{children:\"x\"}),\" coordinate respectively.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"_move()\"}),\" helper method is optional and you can simply implement \",(0,t.jsx)(e.code,{children:\"backward()\"}),\" as \",(0,t.jsx)(e.code,{children:\"return this.forward(-distance)\"}),\".\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Method chaining\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Method chaining is a common syntax for invoking multiple methods in one statement on the same instance without requiring variables to store the intermediate results. This can be achieved by returning \",(0,t.jsx)(e.code,{children:\"this\"}),\" in methods that need to be chained.\"]}),`\n`,(0,t.jsx)(d,{languages:{jsx:l,tsx:u}})]})}function y(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(m,i)})):m(i)}var I=y;return D(x);})();\n;return Component;",
  "workspace": {
    "main": "/src/turtle.ts",
    "run": "/src/turtle.run.test.ts",
    "submit": "/src/turtle.submit.test.ts"
  }
}