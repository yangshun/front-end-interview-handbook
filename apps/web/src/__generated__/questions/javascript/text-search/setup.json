{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/text-search\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/text-search.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/text-search.run.test.ts": "import textSearch from './text-search';\n\ndescribe('textSearch', () => {\n  test('empty query', () => {\n    expect(textSearch('', '')).toBe('');\n  });\n\n  test('no matches', () => {\n    expect(textSearch('The quick brown fox jumps over the lazy dog', '')).toBe(\n      'The quick brown fox jumps over the lazy dog',\n    );\n  });\n\n  test('exact match', () => {\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'quick'),\n    ).toBe('The <b>quick</b> brown fox jumps over the lazy dog');\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'jumps'),\n    ).toBe('The quick brown fox <b>jumps</b> over the lazy dog');\n  });\n\n  test('partial match', () => {\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'jump'),\n    ).toBe('The quick brown fox <b>jump</b>s over the lazy dog');\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'he'),\n    ).toBe('T<b>he</b> quick brown fox jumps over t<b>he</b> lazy dog');\n  });\n});\n",
    "/src/text-search.submit.test.ts": "import textSearch from './text-search';\n\ndescribe('textSearch', () => {\n  test('empty string', () => {\n    expect(textSearch('', '')).toBe('');\n    expect(textSearch('', 'xyz')).toBe('');\n  });\n\n  test('empty query', () => {\n    expect(textSearch('', '')).toBe('');\n    expect(textSearch('The quick brown fox jumps over the lazy dog', '')).toBe(\n      'The quick brown fox jumps over the lazy dog',\n    );\n  });\n\n  test('no matches', () => {\n    expect(textSearch('The quick brown fox jumps over the lazy dog', '')).toBe(\n      'The quick brown fox jumps over the lazy dog',\n    );\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'aaa'),\n    ).toBe('The quick brown fox jumps over the lazy dog');\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'abc'),\n    ).toBe('The quick brown fox jumps over the lazy dog');\n    expect(\n      textSearch('The quick brown fox jumps over the lazy dog', 'dogo'),\n    ).toBe('The quick brown fox jumps over the lazy dog');\n  });\n\n  describe('matches', () => {\n    test('exact match', () => {\n      expect(\n        textSearch('The quick brown fox jumps over the lazy dog', 'quick'),\n      ).toBe('The <b>quick</b> brown fox jumps over the lazy dog');\n      expect(\n        textSearch('The quick brown fox jumps over the lazy dog', 'jumps'),\n      ).toBe('The quick brown fox <b>jumps</b> over the lazy dog');\n    });\n\n    test('case-insensitive match', () => {\n      expect(\n        textSearch('The Quick Brown Fox Jumps Over The Lazy Dog', 'fox'),\n      ).toBe('The Quick Brown <b>Fox</b> Jumps Over The Lazy Dog');\n      expect(\n        textSearch('The Quick Brown Fox Jumps Over The Lazy Dog', 'QUICK'),\n      ).toBe('The <b>Quick</b> Brown Fox Jumps Over The Lazy Dog');\n    });\n\n    test('partial match', () => {\n      expect(\n        textSearch('The quick brown fox jumps over the lazy dog', 'jump'),\n      ).toBe('The quick brown fox <b>jump</b>s over the lazy dog');\n      expect(\n        textSearch('The quick brown fox jumps over the lazy dog', 'he'),\n      ).toBe('T<b>he</b> quick brown fox jumps over t<b>he</b> lazy dog');\n    });\n\n    test('characters do not match the same word more than once', () => {\n      expect(textSearch('aaabbcc', 'aa')).toBe('<b>aa</b>abbcc');\n    });\n\n    test('consecutive matches have combined tags', () => {\n      expect(textSearch('aabbcc', 'a')).toBe('<b>aa</b>bbcc');\n      expect(textSearch('aabbbbcc', 'bb')).toBe('aa<b>bbbb</b>cc');\n    });\n  });\n});\n",
    "/src/text-search.ts": "export default function textSearch(text: string, query: string): string {\n  if (text.trim() === '' || query.trim() === '') {\n    return text;\n  }\n\n  const boldChars = Array.from({ length: text.length }, () => 0);\n\n  for (let i = 0; i < text.length; ) {\n    const substr = text.slice(i, i + query.length);\n    if (substr.toLowerCase() === query.toLowerCase()) {\n      boldChars.fill(1, i, i + query.length);\n      // Start from next character if there's a match since one\n      // character cannot match the same query more than once.\n      i = i + query.length;\n    } else {\n      i++;\n    }\n  }\n\n  let highlightedString = '';\n  for (let i = 0; i < text.length; i++) {\n    // When the current character should be bolded\n    // and the previous character should not be bolded,\n    // append an opening tag to the final string.\n    const shouldAddOpeningTag = boldChars[i] === 1 && boldChars[i - 1] !== 1;\n    // When the current character should be bolded\n    // and the next character should not be bolded,\n    // append a closing tag to the final string.\n    const shouldAddClosingTag = boldChars[i] === 1 && boldChars[i + 1] !== 1;\n    let char = text[i];\n\n    if (shouldAddOpeningTag) {\n      char = '<b>' + char;\n    }\n\n    if (shouldAddClosingTag) {\n      char = char + '</b>';\n    }\n    highlightedString += char;\n  }\n\n  return highlightedString;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {string} text\n * @param {string} query\n * @return {string}\n */\nexport default function textSearch(text, query) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function textSearch(text: string, query: string): string {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/text-search.ts",
    "run": "/src/text-search.run.test.ts",
    "submit": "/src/text-search.submit.test.ts"
  }
}