{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/union-with\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/union-with.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/union-with.run.test.ts": "import unionWith from './union-with';\n\ndescribe('unionWith', () => {\n  test('empty array', () => {\n    expect(unionWith((a, b) => a === b, [])).toEqual([]);\n  });\n\n  test('string iteratee', () => {\n    expect(\n      unionWith(\n        (a: any, b: any) => a.x === b.x,\n        [{ x: 1 }],\n        [{ x: 2 }, { x: 1 }],\n      ),\n    ).toEqual([{ x: 1 }, { x: 2 }]);\n  });\n\n  test('function iteratee', () => {\n    const arr1 = [2.1, 1.2];\n    const arr2 = [2.3, 3.4];\n    const arr3 = [4.5, 2.6];\n\n    expect(\n      unionWith(\n        (a: number, b: number) => Math.floor(a) === Math.floor(b),\n        arr1,\n        arr2,\n        arr3,\n      ),\n    ).toEqual([2.1, 1.2, 3.4, 4.5]);\n  });\n});\n",
    "/src/union-with.submit.test.ts": "import unionWith from './union-with';\n\ndescribe('unionWith', () => {\n  test('empty arrays', () => {\n    expect(unionWith((a, b) => a === b, [], [])).toEqual([]);\n  });\n\n  test('primitive values with identity iteratee', () => {\n    const arr1 = [1, 2, 3];\n    const arr2 = [3, 4, 5];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('null and undefined values in arrays', () => {\n    const arr1 = [null, undefined, 1];\n    const arr2 = [1, null, 2];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([\n      null,\n      undefined,\n      1,\n      2,\n    ]);\n  });\n\n  test('arrays with mixed types', () => {\n    const arr1 = [1, '1', true];\n    const arr2 = ['1', 2, false];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([\n      1,\n      '1',\n      true,\n      2,\n      false,\n    ]);\n  });\n\n  test('complex objects with custom function iteratee', () => {\n    const arr1 = [\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n    ];\n    const arr2 = [\n      { id: 'a', value: 3 },\n      { id: 'b', value: 2 },\n    ];\n    expect(\n      unionWith(\n        (a: any, b: any) => a.id + a.value === b.id + b.value,\n        arr1,\n        arr2,\n      ),\n    ).toEqual([\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n      { id: 'a', value: 3 },\n    ]);\n  });\n\n  test('handling of arrays with different lengths', () => {\n    const arr1 = [1, 2];\n    const arr2 = [3, 4, 5, 6];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([\n      1, 2, 3, 4, 5, 6,\n    ]);\n  });\n\n  test('arrays with complex nesting', () => {\n    const arr1 = [\n      [1, 2],\n      [3, 4],\n    ];\n    const arr2 = [\n      [3, 4],\n      [5, 6],\n    ];\n    expect(\n      unionWith((a, b) => JSON.stringify(a) === JSON.stringify(b), arr1, arr2),\n    ).toEqual([\n      [1, 2],\n      [3, 4],\n      [5, 6],\n    ]);\n  });\n});\n",
    "/src/union-with.ts": "export default function unionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<any>\n): Array<T> {\n  const result: Array<T> = [];\n  const compare: Array<T> = [];\n\n  // Push the unique `item` based on `comparator` into `result`.\n  arrays.forEach((array) => {\n    array.forEach((item: T) => {\n      const isUnique =\n        result.findIndex((resultItem) => comparator(item, resultItem)) === -1;\n      if (isUnique) {\n        result.push(item);\n      }\n    });\n  });\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} comparator The comparator invoked per element.\n * @param {...Array} arrays Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function unionWith(comparator, ...arrays) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function unionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<any>\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/union-with.ts",
    "run": "/src/union-with.run.test.ts",
    "submit": "/src/union-with.submit.test.ts"
  }
}