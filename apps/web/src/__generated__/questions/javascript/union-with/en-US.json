{
  "description": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),y=(r,n)=>{for(var a in n)o(r,a,{get:n[a],enumerable:!0})},t=(r,n,a,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of m(n))!f.call(r,i)&&i!==a&&o(r,i,{get:()=>n[i],enumerable:!(c=u(n,i))||c.enumerable});return r};var b=(r,n,a)=>(a=r!=null?d(p(r)):{},t(n||!r||!r.__esModule?o(a,\"default\",{value:r,enumerable:!0}):a,r)),g=r=>t(o({},\"__esModule\",{value:!0}),r);var h=x((M,l)=>{l.exports=_jsx_runtime});var _={};y(_,{default:()=>W,frontmatter:()=>j});var e=b(h()),j={title:\"Union With\",excerpt:\"Implement a function that creates an array of unique values, in order, from all given arrays, based on a specific comparison criteria\"};function s(r){let n=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",ul:\"ul\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Implement a function \",(0,e.jsx)(n.code,{children:\"unionWith(array)\"}),\" that creates an array of unique values, in order, from all given arrays and accepts \",(0,e.jsx)(n.code,{children:\"comparator\"}),\" which is invoked for each pair of elements to check for their uniqueness.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`unionWith(comparator, arrays);\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Arguments\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"comparator\"}),\" \",(0,e.jsx)(n.em,{children:\"(Function)\"}),\": The comparator invoked per element. The function is invoked with two arguments.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"[arrays]\"}),\" \",(0,e.jsx)(n.em,{children:\"(...Array)\"}),\": The arrays to inspect\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Returns\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.em,{children:(0,e.jsx)(n.code,{children:\"(Array)\"})}),\": Returns the new array of combined values.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Examples\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`unionWith((a, b) => a === b, [2], [1, 2]); // => [2, 1]\n\nunionWith((a, b) => Math.floor(a) === Math.floor(b), [2.1], [1.2, 2.3]); // => [2.1, 1.2]\n\nunionWith((a, b) => a.x === b.x, [{ x: 1 }], [{ x: 2 }, { x: 1 }]); // => [{ 'x': 1 }, { 'x': 2 }]\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The function should return an empty array if \",(0,e.jsx)(n.code,{children:\"array\"}),\" is empty and leave the treat false values as-is.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`unionWith((a, b) => a === b, []); // => []\n\nunionWith((a, b) => a.m === b.m, [{ n: 1 }], [{ m: 2 }]); // => [{ n: 1 }, { m: 2 }]\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Resources\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://lodash.com/docs/#unionWith\",children:[\"Lodash \",(0,e.jsx)(n.code,{children:\"_.unionWith\"})]})}),`\n`]})]})}function v(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(s,r)})):s(r)}var W=v;return g(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/union-with\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/union-with.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/src/union-with.run.test.ts": "import unionWith from './union-with';\n\ndescribe('unionWith', () => {\n  test('empty array', () => {\n    expect(unionWith((a, b) => a === b, [])).toEqual([]);\n  });\n\n  test('string iteratee', () => {\n    expect(\n      unionWith(\n        (a: any, b: any) => a.x === b.x,\n        [{ x: 1 }],\n        [{ x: 2 }, { x: 1 }],\n      ),\n    ).toEqual([{ x: 1 }, { x: 2 }]);\n  });\n\n  test('function iteratee', () => {\n    const arr1 = [2.1, 1.2];\n    const arr2 = [2.3, 3.4];\n    const arr3 = [4.5, 2.6];\n\n    expect(\n      unionWith(\n        (a: number, b: number) => Math.floor(a) === Math.floor(b),\n        arr1,\n        arr2,\n        arr3,\n      ),\n    ).toEqual([2.1, 1.2, 3.4, 4.5]);\n  });\n});\n",
    "/src/union-with.submit.test.ts": "import unionWith from './union-with';\n\ndescribe('unionWith', () => {\n  test('empty arrays', () => {\n    expect(unionWith((a, b) => a === b, [], [])).toEqual([]);\n  });\n\n  test('primitive values with identity iteratee', () => {\n    const arr1 = [1, 2, 3];\n    const arr2 = [3, 4, 5];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('null and undefined values in arrays', () => {\n    const arr1 = [null, undefined, 1];\n    const arr2 = [1, null, 2];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([\n      null,\n      undefined,\n      1,\n      2,\n    ]);\n  });\n\n  test('arrays with mixed types', () => {\n    const arr1 = [1, '1', true];\n    const arr2 = ['1', 2, false];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([\n      1,\n      '1',\n      true,\n      2,\n      false,\n    ]);\n  });\n\n  test('complex objects with custom function iteratee', () => {\n    const arr1 = [\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n    ];\n    const arr2 = [\n      { id: 'a', value: 3 },\n      { id: 'b', value: 2 },\n    ];\n    expect(\n      unionWith(\n        (a: any, b: any) => a.id + a.value === b.id + b.value,\n        arr1,\n        arr2,\n      ),\n    ).toEqual([\n      { id: 'a', value: 1 },\n      { id: 'b', value: 2 },\n      { id: 'a', value: 3 },\n    ]);\n  });\n\n  test('handling of arrays with different lengths', () => {\n    const arr1 = [1, 2];\n    const arr2 = [3, 4, 5, 6];\n    expect(unionWith((a, b) => a === b, arr1, arr2)).toEqual([\n      1, 2, 3, 4, 5, 6,\n    ]);\n  });\n\n  test('arrays with complex nesting', () => {\n    const arr1 = [\n      [1, 2],\n      [3, 4],\n    ];\n    const arr2 = [\n      [3, 4],\n      [5, 6],\n    ];\n    expect(\n      unionWith((a, b) => JSON.stringify(a) === JSON.stringify(b), arr1, arr2),\n    ).toEqual([\n      [1, 2],\n      [3, 4],\n      [5, 6],\n    ]);\n  });\n});\n",
    "/src/union-with.ts": "export default function unionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<any>\n): Array<T> {\n  const result: Array<T> = [];\n  const compare: Array<T> = [];\n\n  // Push the unique `item` based on `comparator` into `result`.\n  arrays.forEach((array) => {\n    array.forEach((item: T) => {\n      const isUnique =\n        result.findIndex((resultItem) => comparator(item, resultItem)) === -1;\n      if (isUnique) {\n        result.push(item);\n      }\n    });\n  });\n\n  return result;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1712016000,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a function that creates an array of unique values, in order, from all given arrays, based on a specific comparison criteria",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/union-with",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "uniq-with",
      "union",
      "union-by"
    ],
    "published": false,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "union-with",
    "subtitle": null,
    "title": "Union With",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Function} comparator The comparator invoked per element.\n * @param {...Array} arrays Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function unionWith(comparator, ...arrays) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function unionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<any>\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var T=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var n in e)a(r,n,{get:e[n],enumerable:!0})},s=(r,e,n,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of y(e))!b.call(r,o)&&o!==n&&a(r,o,{get:()=>e[o],enumerable:!(i=f(e,o))||i.enumerable});return r};var j=(r,e,n)=>(n=r!=null?p(x(r)):{},s(e||!r||!r.__esModule?a(n,\"default\",{value:r,enumerable:!0}):n,r)),_=r=>s(a({},\"__esModule\",{value:!0}),r);var u=T((M,c)=>{c.exports=_jsx_runtime});var w={};g(w,{default:()=>q});var t=j(u());var h=MDXCodeBlock;var l=`/**\n * @param {Function} comparator The comparator invoked per element.\n * @param {...Array} arrays Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function unionWith(comparator, ...arrays) {\n  const result = [];\n\n  // Push the unique \\`item\\` based on \\`comparator\\` into \\`result\\`.\n  arrays.forEach((array) => {\n    array.forEach((item) => {\n      const isUnique =\n        result.findIndex((resultItem) => comparator(item, resultItem)) === -1;\n      if (isUnique) {\n        result.push(item);\n      }\n    });\n  });\n\n  return result;\n}\n`;var m=`export default function unionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<any>\n): Array<T> {\n  const result: Array<T> = [];\n  const compare: Array<T> = [];\n\n  // Push the unique \\`item\\` based on \\`comparator\\` into \\`result\\`.\n  arrays.forEach((array) => {\n    array.forEach((item: T) => {\n      const isUnique =\n        result.findIndex((resultItem) => comparator(item, resultItem)) === -1;\n      if (isUnique) {\n        result.push(item);\n      }\n    });\n  });\n\n  return result;\n}\n`;function d(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can use the array function \",(0,t.jsx)(e.code,{children:\"findIndex\"}),\" to iterate through each element in the \",(0,t.jsx)(e.code,{children:\"result\"}),\" array to check if there was the same value when compared by \",(0,t.jsx)(e.code,{children:\"comparator\"}),\".\"]}),`\n`,(0,t.jsx)(h,{languages:{jsx:l,tsx:m}}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To handle mixed data types, the \",(0,t.jsx)(e.code,{children:\"comparator\"}),\" function must be able to process them by either converting the elements to a common type.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#unionWith\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.unionWith\"})]})}),`\n`]})]})}function W(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(d,r)})):d(r)}var q=W;return _(w);})();\n;return Component;",
  "workspace": {
    "main": "/src/union-with.ts",
    "run": "/src/union-with.run.test.ts",
    "submit": "/src/union-with.submit.test.ts"
  }
}