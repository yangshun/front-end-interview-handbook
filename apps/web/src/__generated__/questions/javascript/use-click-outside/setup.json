{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-click-outside\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-click-outside.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-click-outside.run.test.tsx": "import React from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\n\nimport useClickOutside from './use-click-outside';\nimport { useRef } from 'react';\n\ndescribe('useClickOutside', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => {\n      const ref = useRef<HTMLDivElement>(null);\n      return useClickOutside(ref, () => {});\n    });\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click outside', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler);\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-click-outside.submit.test.tsx": "import React from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\n\nimport useClickOutside from './use-click-outside';\nimport { useRef } from 'react';\n\ndescribe('useClickOutside', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => {\n      const ref = useRef<HTMLDivElement>(null);\n      return useClickOutside(ref, () => {});\n    });\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click outside', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler);\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('options', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler, 'mousedown', { once: true });\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('remove listener on unmount', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler);\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    page.unmount();\n    act(() => fireEvent.mouseDown(other));\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-click-outside.ts": "import { RefObject, useEffect, useRef } from 'react';\n\nexport default function useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent | FocusEvent) => void,\n  eventType: 'mousedown' | 'touchstart' = 'mousedown',\n  eventListenerOptions: boolean | AddEventListenerOptions = {},\n) {\n  const latestHandler = useRef(handler);\n  latestHandler.current = handler;\n\n  useEffect(() => {\n    const listener = (event: MouseEvent | TouchEvent | FocusEvent) => {\n      const target = event.target as Node;\n      if (!target || !target.isConnected) {\n        return;\n      }\n\n      const outside = ref.current && !ref.current.contains(target);\n      if (!outside) {\n        return;\n      }\n\n      latestHandler.current(event);\n    };\n\n    window.addEventListener(eventType, listener, eventListenerOptions);\n\n    return () => {\n      window.removeEventListener(eventType, listener, eventListenerOptions);\n    };\n  }, [ref, eventType, eventListenerOptions]);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {import(\"react\").RefObject<T>} ref\n * @param {(event) => void} handler\n * @param {'mousedown' | 'touchstart' | undefined} eventType\n * @param {boolean | AddEventListenerOptions | undefined} eventListenerOptions\n */\nexport default function useClickOutside(\n  ref,\n  handler,\n  eventType = 'mousedown',\n  eventListenerOptions = {},\n) {\n  throw 'Not implemented';\n}",
    "ts": "import { RefObject } from 'react';\n\nexport default function useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent | FocusEvent) => void,\n  eventType: 'mousedown' | 'touchstart' = 'mousedown',\n  eventListenerOptions?: boolean | AddEventListenerOptions,\n) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-click-outside.ts",
    "run": "/src/use-click-outside.run.test.tsx",
    "submit": "/src/use-click-outside.submit.test.tsx"
  }
}