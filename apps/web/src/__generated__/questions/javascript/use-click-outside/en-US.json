{
  "description": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var i in e)c(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!f.call(n,o)&&o!==i&&c(n,o,{get:()=>e[o],enumerable:!(d=u(e,o))||d.enumerable});return n};var x=(n,e,i)=>(i=n!=null?h(m(n)):{},s(e||!n||!n.__esModule?c(i,\"default\",{value:n,enumerable:!0}):i,n)),j=n=>s(c({},\"__esModule\",{value:!0}),n);var l=v((_,r)=>{r.exports=_jsx_runtime});var C={};g(C,{default:()=>O,frontmatter:()=>k});var t=x(l()),k={title:\"useClickOutside\",excerpt:\"Implement a hook that detects clicks outside of a specified element\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useClickOutside\"}),\" hook that detects clicks outside of a specified element.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const target = useRef(null);\n  useClickOutside(target, () => console.log('Clicked outside'));\n\n  return (\n    <div>\n      <div ref={target}>Click outside me</div>\n      <div>Maybe here?</div>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"ref: RefObject<T>\"}),\": The ref object of the element to detect clicks outside of\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"handler: (event) => void\"}),\": The event handler function to call when a click outside is detected\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"eventType: 'mousedown' | 'touchstart'\"}),\": The event type to listen for. Defaults to \",(0,t.jsx)(e.code,{children:\"'mousedown'\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"eventOptions: boolean | AddEventListenerOptions\"}),\": The \",(0,t.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#options\",children:[(0,t.jsx)(e.code,{children:\"AddEventListenerOptions\"}),\" options object\"]}),\" that specifies characteristics about the event listener. This is an optional argument\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"Nothing.\"})]})}function b(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var O=b;return j(C);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-click-outside\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-click-outside.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-click-outside.run.test.tsx": "import React from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\n\nimport useClickOutside from './use-click-outside';\nimport { useRef } from 'react';\n\ndescribe('useClickOutside', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => {\n      const ref = useRef<HTMLDivElement>(null);\n      return useClickOutside(ref, () => {});\n    });\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click outside', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler);\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-click-outside.submit.test.tsx": "import React from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\n\nimport useClickOutside from './use-click-outside';\nimport { useRef } from 'react';\n\ndescribe('useClickOutside', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => {\n      const ref = useRef<HTMLDivElement>(null);\n      return useClickOutside(ref, () => {});\n    });\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click outside', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler);\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('options', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler, 'mousedown', { once: true });\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('remove listener on unmount', () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useClickOutside(ref, handler);\n\n      return (\n        <main>\n          <div ref={ref} data-testid=\"target\">\n            target\n          </div>\n          <div data-testid=\"other\">something else</div>\n        </main>\n      );\n    };\n\n    const page = render(<Component />);\n    const target = page.getByTestId('target');\n    const other = page.getByTestId('other');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseDown(other));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    page.unmount();\n    act(() => fireEvent.mouseDown(other));\n    act(() => fireEvent.mouseDown(target));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-click-outside.ts": "import { RefObject, useEffect, useRef } from 'react';\n\nexport default function useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent | FocusEvent) => void,\n  eventType: 'mousedown' | 'touchstart' = 'mousedown',\n  eventListenerOptions: boolean | AddEventListenerOptions = {},\n) {\n  const latestHandler = useRef(handler);\n  latestHandler.current = handler;\n\n  useEffect(() => {\n    const listener = (event: MouseEvent | TouchEvent | FocusEvent) => {\n      const target = event.target as Node;\n      if (!target || !target.isConnected) {\n        return;\n      }\n\n      const outside = ref.current && !ref.current.contains(target);\n      if (!outside) {\n        return;\n      }\n\n      latestHandler.current(event);\n    };\n\n    window.addEventListener(eventType, listener, eventListenerOptions);\n\n    return () => {\n      window.removeEventListener(eventType, listener, eventListenerOptions);\n    };\n  }, [ref, eventType, eventListenerOptions]);\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that detects clicks outside of a specified element",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-click-outside"
      }
    ],
    "href": "/questions/javascript/use-click-outside",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-click-anywhere"
    ],
    "slug": "use-click-outside",
    "subtitle": null,
    "title": "useClickOutside",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {import(\"react\").RefObject<T>} ref\n * @param {(event) => void} handler\n * @param {'mousedown' | 'touchstart' | undefined} eventType\n * @param {boolean | AddEventListenerOptions | undefined} eventListenerOptions\n */\nexport default function useClickOutside(\n  ref,\n  handler,\n  eventType = 'mousedown',\n  eventListenerOptions = {},\n) {\n  throw 'Not implemented';\n}",
    "ts": "import { RefObject } from 'react';\n\nexport default function useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent | FocusEvent) => void,\n  eventType: 'mousedown' | 'touchstart' = 'mousedown',\n  eventListenerOptions?: boolean | AddEventListenerOptions,\n) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var c=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),O=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!E.call(t,r)&&r!==o&&c(t,r,{get:()=>e[r],enumerable:!(s=v(e,r))||s.enumerable});return t};var x=(t,e,o)=>(o=t!=null?f(p(t)):{},i(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),L=t=>i(c({},\"__esModule\",{value:!0}),t);var a=g((M,d)=>{d.exports=_jsx_runtime});var k={};O(k,{default:()=>j});var n=x(a());var l=MDXCodeBlock;var u=`import { RefObject, useEffect, useRef } from 'react';\n\nexport default function useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent | FocusEvent) => void,\n  eventType: 'mousedown' | 'touchstart' = 'mousedown',\n  eventListenerOptions: boolean | AddEventListenerOptions = {},\n) {\n  const latestHandler = useRef(handler);\n  latestHandler.current = handler;\n\n  useEffect(() => {\n    const listener = (event: MouseEvent | TouchEvent | FocusEvent) => {\n      const target = event.target as Node;\n      if (!target || !target.isConnected) {\n        return;\n      }\n\n      const outside = ref.current && !ref.current.contains(target);\n      if (!outside) {\n        return;\n      }\n\n      latestHandler.current(event);\n    };\n\n    window.addEventListener(eventType, listener, eventListenerOptions);\n\n    return () => {\n      window.removeEventListener(eventType, listener, eventListenerOptions);\n    };\n  }, [ref, eventType, eventListenerOptions]);\n}\n`;function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useClickOutside\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" to attach and detach our outside click event listener to the document with \",(0,n.jsx)(e.code,{children:\"addEventListener\"}),\" and \",(0,n.jsx)(e.code,{children:\"removeEventListener\"}),\", respectively.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To detect if a click is outside of the target element, we can use the \",(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\",children:[(0,n.jsx)(e.code,{children:\"contains\"}),\" method\"]}),\" on the \",(0,n.jsx)(e.code,{children:\"ref\"}),\" element to check if \",(0,n.jsx)(e.code,{children:\"event.target\"}),\" is a descendant of the target element.\"]}),`\n`,(0,n.jsx)(l,{children:u})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var j=w;return L(k);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-click-outside.ts",
    "run": "/src/use-click-outside.run.test.tsx",
    "submit": "/src/use-click-outside.submit.test.tsx"
  }
}