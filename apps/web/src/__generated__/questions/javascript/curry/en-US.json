{
  "description": "var Component=(()=>{var l=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},u=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of h(e))!g.call(n,a)&&a!==r&&c(n,a,{get:()=>e[a],enumerable:!(i=m(e,a))||i.enumerable});return n};var b=(n,e,r)=>(r=n!=null?l(p(n)):{},u(e||!n||!n.__esModule?c(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>u(c({},\"__esModule\",{value:!0}),n);var s=f((N,o)=>{o.exports=_jsx_runtime});var T={};y(T,{default:()=>M,frontmatter:()=>j});var t=b(s()),j={title:\"Curry\",excerpt:\"Implement a function that transforms a function that takes multiple arguments into a function that can be repeatedly called with only one argument at a time\"};function d(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"Currying is the technique of converting a function that takes multiple arguments into a sequence of functions that each takes a single argument.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement the \",(0,t.jsx)(e.code,{children:\"curry\"}),\" function which accepts a function as the only argument and returns a function that accepts single arguments and can be repeatedly called until at least the minimum number of arguments have been provided (determined by how many arguments the original function accepts). The initial function argument is then invoked with the provided arguments.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`function add(a, b) {\n  return a + b;\n}\n\nconst curriedAdd = curry(add);\ncurriedAdd(3)(4); // 7\n\nconst alreadyAddedThree = curriedAdd(3);\nalreadyAddedThree(4); // 7\n`})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`function multiplyThreeNumbers(a, b, c) {\n  return a * b * c;\n}\n\nconst curriedMultiplyThreeNumbers = curry(multiplyThreeNumbers);\ncurriedMultiplyThreeNumbers(4)(5)(6); // 120\n\nconst containsFour = curriedMultiplyThreeNumbers(4);\nconst containsFourMulFive = containsFour(5);\ncontainsFourMulFive(6); // 120\n`})})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var M=F;return x(T);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/curry\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/curry.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/curry.run.test.ts": "import curry from './curry';\n\nconst empty = () => 0;\nconst square = (a: number) => a * a;\nconst mul = (a: number, b: number) => a * b;\n\ndescribe('curry', () => {\n  test('returns function', () => {\n    const curried = curry(square);\n    expect(curried).toBeInstanceOf(Function);\n  });\n\n  test('empty function', () => {\n    const curried = curry(empty);\n    expect(curried()).toBe(0);\n  });\n\n  test('single argument', () => {\n    const curried = curry(square);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(2)).toBe(4);\n  });\n\n  test('two arguments', () => {\n    const curried = curry(mul);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(7)(3)).toBe(21);\n  });\n});\n",
    "/src/curry.submit.test.ts": "import curry from './curry';\n\nconst empty = () => 0;\nconst square = (a: number) => a * a;\nconst mul = (a: number, b: number) => a * b;\nconst mulThree = (a: number, b: number, c: number) => a * b * c;\n\ndescribe('curry', () => {\n  test('returns function', () => {\n    const curried = curry(square);\n    expect(curried).toBeInstanceOf(Function);\n  });\n\n  test('empty function', () => {\n    const curried = curry(empty);\n    expect(curried()).toBe(0);\n  });\n\n  test('single argument', () => {\n    const curried = curry(square);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(2)).toBe(4);\n  });\n\n  test('two arguments', () => {\n    const curried = curry(mul);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(7)(3)).toBe(21);\n  });\n\n  test('multiple arguments', () => {\n    const curried = curry(mulThree);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(7)(3)(2)).toBe(42);\n  });\n\n  test('can be reused', () => {\n    const curried = curry(square);\n    expect(curried()).toBeInstanceOf(Function);\n    expect(curried(2)).toBe(4);\n    expect(curried(3)).toBe(9);\n  });\n\n  test('ignores empty args', () => {\n    const curried = curry(mulThree);\n    expect(curried()(4)()(3)()(2)).toBe(24);\n    expect(curried()()()()(4)(2)(3)).toBe(24);\n  });\n\n  describe('can access this', () => {\n    test('single parameter', () => {\n      const curried = curry(function (this: any, val: number) {\n        return this.multiplier * val;\n      });\n\n      const obj = { multiplier: 5, mul: curried };\n      expect(obj.mul()).toBeInstanceOf(Function);\n      expect(obj.mul(7)).toBe(35);\n    });\n\n    test('multiple arguments', () => {\n      const curried = curry(function (this: any, foo: number, bar: number) {\n        return this.base * foo + bar;\n      });\n\n      const obj = { base: 5, mul: curried };\n      expect(obj.mul()).toBeInstanceOf(Function);\n      expect(obj.mul(3)(2)).toBe(17);\n      expect(obj.mul(3)()(2)).toBe(17);\n      expect(obj.mul()(3)()(2)).toBe(17);\n    });\n  });\n});\n",
    "/src/curry.ts": "export default function curry(func: Function): Function {\n  return function curried(this: any, ...args: Array<any>) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    }\n\n    return (arg: any) =>\n      arg === undefined\n        ? curried.apply(this, args)\n        : curried.apply(this, [...args, arg]);\n  };\n}\n"
  },
  "metadata": {
    "access": "standard",
    "author": "yangshun",
    "companies": [
      "intuit",
      "amazon"
    ],
    "created": 1655510400,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a function that transforms a function that takes multiple arguments into a function that can be repeatedly called with only one argument at a time",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/curry",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "flatten",
      "promise-all",
      "todo-list"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "curry-ii",
      "function-bind"
    ],
    "slug": "curry",
    "subtitle": null,
    "title": "Curry",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Function} func\n * @return {Function}\n */\nexport default function curry(func) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function curry(func: Function): Function {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var w=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),F=(r,n)=>{for(var t in n)c(r,t,{get:n[t],enumerable:!0})},u=(r,n,t,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of b(n))!x.call(r,i)&&i!==t&&c(r,i,{get:()=>n[i],enumerable:!(o=y(n,i))||o.enumerable});return r};var k=(r,n,t)=>(t=r!=null?m(v(r)):{},u(n||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),C=r=>u(c({},\"__esModule\",{value:!0}),r);var l=w((I,s)=>{s.exports=_jsx_runtime});var T={};F(T,{default:()=>S});var e=k(l());var a=MDXCodeBlock;var d=`/**\n * @param {Function} func\n * @return {Function}\n */\nexport default function curry(func) {\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    }\n\n    return (arg) =>\n      arg === undefined\n        ? curried.apply(this, args)\n        : curried.apply(this, [...args, arg]);\n  };\n}\n`;var h=`export default function curry(func: Function): Function {\n  return function curried(this: any, ...args: Array<any>) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    }\n\n    return (arg: any) =>\n      arg === undefined\n        ? curried.apply(this, args)\n        : curried.apply(this, [...args, arg]);\n  };\n}\n`;var f=`/**\n * @param {Function} func\n * @return {Function}\n */\nexport default function curry(func) {\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    }\n\n    return curried.bind(this, ...args);\n  };\n}\n`;var g=`/**\n * @param {Function} func\n * @return {Function}\n */\nexport default function curry(func) {\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.call(this, ...args);\n    }\n\n    return (arg) =>\n      arg === undefined\n        ? curried.call(this, ...args)\n        : curried.call(this, ...args, arg);\n  };\n}\n`;function p(r){let n=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",strong:\"strong\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Currying is not commonly used in real-world development but is a moderately common question for interviews as it tests the candidate's understanding of certain JavaScript fundamentals like arity and closures.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Clarification Questions\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"What value types will \",(0,e.jsx)(n.code,{children:\"curry\"}),\" expect?\"]}),`\n`,(0,e.jsx)(n.li,{children:\"Should the function expect values of different types?\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Solution\"}),`\n`,(0,e.jsx)(n.p,{children:\"We first need to understand a few terms:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Arity\"}),\": The number of arguments or operands taken by a function.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Closure\"}),\": A closure is the combination of a function bundled together with references to its lexical environment (surrounding state).\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"The curried function will stop accepting arguments after the number of arguments that have been passed into the curried function equals the arity of the original function.\"}),`\n`,(0,e.jsx)(n.p,{children:\"We can keep a record of the curried function arguments so far via closures. Each time the curried function is called, we compare the number of arguments so far with the arity of the original function.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"If they're the same, we call the original function with the arguments.\"}),`\n`,(0,e.jsx)(n.li,{children:\"If more arguments are needed, we will return a function that accepts more arguments and invokes the curried function with the new arguments.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Note that the inner function needs to be defined using arrow functions to preserve the same lexical \",(0,e.jsx)(n.code,{children:\"this\"}),\" or manually tracked using a separate variable like in \",(0,e.jsx)(n.a,{href:\"/questions/javascript/debounce\",children:\"Debounce\"}),\".\"]}),`\n`,(0,e.jsx)(a,{languages:{jsx:d,tsx:h}}),`\n`,(0,e.jsxs)(n.p,{children:[\"An alternative solution using \",(0,e.jsx)(n.code,{children:\"Function.prototype.call\"}),\":\"]}),`\n`,(0,e.jsx)(a,{children:g}),`\n`,(0,e.jsxs)(n.p,{children:[\"Since the innermost function is essentially meant for preserving the \",(0,e.jsx)(n.code,{children:\"this\"}),\" scope and passing arguments along, it can be achieved with \",(0,e.jsx)(n.code,{children:\"Function.prototype.bind\"}),\". This solution is also more flexible because it accepts multiple arguments:\"]}),`\n`,(0,e.jsx)(a,{children:f}),`\n`,(0,e.jsx)(n.h2,{children:\"Edge Cases\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Calling the function without any arguments should not have any effect, unless the function does not take in any arguments.\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"Functions which access \",(0,e.jsx)(n.code,{children:\"this\"}),\". Do test this case for curried functions that are meant to receive multiple arguments as well.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Techniques\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Closures.\"}),`\n`,(0,e.jsxs)(n.li,{children:[\"Invoking functions via \",(0,e.jsx)(n.code,{children:\"Function.prototype.apply()\"}),\"/\",(0,e.jsx)(n.code,{children:\"Function.prototype.call()\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Notes\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Intermediate functions should be reusable as seen from the examples in the question description.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Resources\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://blog.logrocket.com/understanding-javascript-currying\",children:\"Understanding JavaScript currying\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://lodash.com/docs/4.17.15#curry\",children:\"Lodash curry\"})}),`\n`]})]})}function M(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(p,r)})):p(r)}var S=M;return C(T);})();\n;return Component;",
  "workspace": {
    "main": "/src/curry.ts",
    "run": "/src/curry.run.test.ts",
    "submit": "/src/curry.submit.test.ts"
  }
}