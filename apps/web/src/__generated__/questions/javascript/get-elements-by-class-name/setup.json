{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/get-elements-by-class-name\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/get-elements-by-class-name.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/get-elements-by-class-name.run.test.ts": "import getElementsByClassName from './get-elements-by-class-name';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByClassName', () => {\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, els);\n  });\n\n  test('non-existent class names', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <span class=\"foo\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByClassName(doc.body, 'asd');\n    const expected = doc.body.getElementsByClassName('asd');\n    checkResults(expected, els);\n  });\n\n  test('multiple matching elements', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <div class=\"fooz\">Fooz</div>\n        <div class=\"foo\">Foo</div>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, divs);\n  });\n});\n",
    "/src/get-elements-by-class-name.submit.test.ts": "import getElementsByClassName from './get-elements-by-class-name';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByClassName', () => {\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, els);\n  });\n\n  test('non-existent class names', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <span class=\"foo\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByClassName(doc.body, 'asd');\n    const expected = doc.body.getElementsByClassName('asd');\n    checkResults(expected, els);\n  });\n\n  describe('single class name', () => {\n    test('multiple matching elements', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\">\n          <div class=\"fooz\">Fooz</div>\n          <div class=\"foo\">Foo</div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, divs);\n    });\n\n    test('ignores comment nodes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\">\n        <!-- Here's a comment -->\n        <div class=\"foo\">Hello</div>\n      </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, els);\n    });\n\n    test(\"doesn't include itself\", () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\"></div>`,\n        'text/html',\n      );\n\n      const body = getElementsByClassName(doc.body.children[0], 'foo');\n      const expected = doc.body.children[0].getElementsByClassName('foo');\n      checkResults(expected, body);\n    });\n\n    test('elements with duplicated classnames', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo foo foo\">\n          <div class=\"bar foo\">Hello</div>\n        </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, els);\n    });\n  });\n\n  describe('multiple class names', () => {\n    test('non-duplicated', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar baz\">\n          <span class=\"bar baz\">Span</span>\n          <p class=\"foo baz\">Paragraph</p>\n          <div class=\"foo bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('duplicated class names in input', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar\">\n          <span class=\"bar baz\">Span</span>\n          <p class=\"foo baz\">Paragraph</p>\n          <div class=\"foo bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('duplicated class names in DOM', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar foo baz\">\n          <span class=\"bar baz bar\">Span</span>\n          <p class=\"foo baz baz\">Paragraph</p>\n          <div class=\"foo bar bar bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n  });\n\n  test('case-sensitivity', () => {\n    const doc = new DOMParser().parseFromString(\n      `<!DOCTYPE html>\n      <div class=\"foo bar foo baz\">\n        <span class=\"bar baz bar\">Span</span>\n        <p class=\"foo baz baz\">Paragraph</p>\n        <div id=\"1\" class=\"FOO BAR\"></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n    const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n    checkResults(expectedEls1, els1);\n\n    const els2 = getElementsByClassName(doc.body, 'FOO BAR');\n    const expectedEls2 = doc.body.getElementsByClassName('FOO BAR');\n    checkResults(expectedEls2, els2);\n  });\n\n  describe('extra whitespace in classes', () => {\n    test('in class attributes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar  foo  baz\">\n          <span class=\"   bar baz  bar\">Span</span>\n          <p class=\"  foo baz  baz \">Paragraph</p>\n          <div class=\" foo bar   bar  bar  \"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('in input class', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar foo baz\">\n          <span class=\"bar baz bar\">Span</span>\n          <p class=\"foo baz baz\">Paragraph</p>\n          <div class=\"foo bar bar bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, '  foo   foo bar ');\n      const expectedEls1 = doc.body.getElementsByClassName('  foo   foo bar ');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, '   bar  bar ');\n      const expectedEls2 = doc.body.getElementsByClassName('   bar  bar ');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, '  bar baz   bar ');\n      const expectedEls3 = doc.body.getElementsByClassName('  bar baz   bar ');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('both attributes and input class', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo  bar  foo  baz\">\n          <span class=\"   bar baz  bar\">Span</span>\n          <p class=\"  foo baz  baz \">Paragraph</p>\n          <div class=\" foo bar   bar  bar  \"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, '  foo   foo bar ');\n      const expectedEls1 = doc.body.getElementsByClassName('  foo   foo bar ');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, '   bar  bar ');\n      const expectedEls2 = doc.body.getElementsByClassName('   bar  bar ');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, '  bar baz   bar ');\n      const expectedEls3 = doc.body.getElementsByClassName('  bar baz   bar ');\n      checkResults(expectedEls3, els3);\n    });\n  });\n});\n",
    "/src/get-elements-by-class-name.ts": "function isSubset(a: Set<string>, b: DOMTokenList) {\n  return Array.from(a).every((value) => b.contains(value));\n}\n\nexport default function getElementsByClassName(\n  element: Element,\n  classNames: string,\n): Array<Element> {\n  const elements: Array<Element> = [];\n  const classNamesSet = new Set(classNames.trim().split(/\\s+/));\n\n  function traverse(el: Element) {\n    if (el == null) {\n      return;\n    }\n\n    if (isSubset(classNamesSet, el.classList)) {\n      elements.push(el);\n    }\n\n    for (const child of el.children) {\n      traverse(child);\n    }\n  }\n\n  for (const child of element.children) {\n    traverse(child);\n  }\n\n  return elements;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Element} element\n * @param {string} classNames\n * @return {Array<Element>}\n */\nexport default function getElementsByClassName(element, classNames) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function getElementsByClassName(\n  element: Element,\n  classNames: string,\n): Array<Element> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/get-elements-by-class-name.ts",
    "run": "/src/get-elements-by-class-name.run.test.ts",
    "submit": "/src/get-elements-by-class-name.submit.test.ts"
  }
}