{
  "description": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var E=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),u=(l,e)=>{for(var c in e)o(l,c,{get:e[c],enumerable:!0})},s=(l,e,c,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!b.call(l,t)&&t!==c&&o(l,t,{get:()=>e[t],enumerable:!(r=h(e,t))||r.enumerable});return l};var f=(l,e,c)=>(c=l!=null?m(g(l)):{},s(e||!l||!l.__esModule?o(c,\"default\",{value:l,enumerable:!0}):c,l)),y=l=>s(o({},\"__esModule\",{value:!0}),l);var a=E((j,d)=>{d.exports=_jsx_runtime});var B={};u(B,{default:()=>x,frontmatter:()=>C});var n=f(a()),C={title:\"getElementsByClassName\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u51FD\\u6570\\uFF0C\\u83B7\\u53D6\\u5305\\u542B\\u6307\\u5B9A\\u7C7B\\u7684\\u6240\\u6709 DOM \\u5143\\u7D20\"};function i(l){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\"},l.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getElementsByClassName()\"}),\" \\u662F HTML \",(0,n.jsx)(e.code,{children:\"Document\"}),\" \\u548C \",(0,n.jsx)(e.code,{children:\"Element\"}),\" \\u4E0A\\u5B58\\u5728\\u7684\\u4E00\\u4E2A\\u65B9\\u6CD5\\uFF0C\\u7528\\u4E8E\\u8FD4\\u56DE \",(0,n.jsx)(e.code,{children:\"Document\"}),\"/\",(0,n.jsx)(e.code,{children:\"Element\"}),\" \\u4E2D\\u5177\\u6709\\u6307\\u5B9A\\u7C7B\\u540D\\u7684\\u540E\\u4EE3\\u5143\\u7D20\\u7684 \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\"\\u3002\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u8BA9\\u6211\\u4EEC\\u5B9E\\u73B0\\u6211\\u4EEC\\u81EA\\u5DF1\\u7684 \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\",children:(0,n.jsx)(e.code,{children:\"Element.getElementsByClassName()\"})}),\"\\uFF0C\\u5B83\\u4E0E\\u6B64\\u7C7B\\u4F3C\\uFF0C\\u4F46\\u7565\\u6709\\u4E0D\\u540C\\uFF1A\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u5B83\\u662F\\u4E00\\u4E2A\\u7EAF\\u51FD\\u6570\\uFF0C\\u5B83\\u63A5\\u53D7\\u4E00\\u4E2A\\u5143\\u7D20\\u548C\\u4E00\\u4E2A \",(0,n.jsx)(e.code,{children:\"classNames\"}),\" \\u5B57\\u7B26\\u4E32\\uFF0C\\u4E00\\u4E2A\\u5305\\u542B\\u4E00\\u4E2A\\u6216\\u591A\\u4E2A\\u8981\\u5339\\u914D\\u7684\\u7C7B\\u540D\\u7684\\u5B57\\u7B26\\u4E32\\uFF0C\\u7528\\u7A7A\\u683C\\u5206\\u9694\\u3002 \\u4F8B\\u5982 \",(0,n.jsx)(e.code,{children:\"getElementsByClassName(document.body, 'foo bar')\"}),\"\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u4E0E \",(0,n.jsx)(e.code,{children:\"Element.getElementsByClassName()\"}),\" \\u7C7B\\u4F3C\\uFF0C\\u53EA\\u641C\\u7D22\\u5143\\u7D20\\u53C2\\u6570\\u7684\\u540E\\u4EE3\\uFF0C\\u800C\\u4E0D\\u662F\\u5143\\u7D20\\u672C\\u8EAB\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u8FD4\\u56DE\\u4E00\\u4E2A \",(0,n.jsx)(e.code,{children:\"Element\"}),\" \\u6570\\u7EC4\\uFF0C\\u800C\\u4E0D\\u662F \",(0,n.jsx)(e.code,{children:\"Element\"}),\" \\u7684 \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\"\\u3002\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u4E0D\\u8981\\u4F7F\\u7528 \",(0,n.jsx)(e.code,{children:\"document.querySelectorAll()\"}),\"\\uFF0C\\u5426\\u5219\\u4F1A\\u4F7F\\u95EE\\u9898\\u53D8\\u5F97\\u5FAE\\u4E0D\\u8DB3\\u9053\\u3002 \\u5728\\u5B9E\\u9645\\u9762\\u8BD5\\u4E2D\\uFF0C\\u60A8\\u5C06\\u4E0D\\u5141\\u8BB8\\u4F7F\\u7528\\u5B83\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u4F8B\\u5B50\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const doc = new DOMParser().parseFromString(\n  \\`<div class=\"foo bar baz\">\n    <span class=\"bar baz\">Span</span>\n    <p class=\"foo baz\">Paragraph</p>\n    <div class=\"foo bar\"></div>\n  </div>\\`,\n  'text/html',\n);\n\ngetElementsByClassName(doc.body, 'foo bar');\n// [div.foo.bar.baz, div.foo.bar] <-- \\u8FD9\\u662F\\u4E00\\u4E2A\\u5143\\u7D20\\u6570\\u7EC4\\u3002\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8D44\\u6E90\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\",children:\"Element: getElementsByClassName() method - Web APIs | MDN\"})}),`\n`]})]})}function N(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,Object.assign({},l,{children:(0,n.jsx)(i,l)})):i(l)}var x=N;return y(B);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/get-elements-by-class-name\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/get-elements-by-class-name.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"esnext\"\n  }\n}\n",
    "/src/get-elements-by-class-name.run.test.ts": "import getElementsByClassName from './get-elements-by-class-name';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByClassName', () => {\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, els);\n  });\n\n  test('non-existent class names', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <span class=\"foo\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByClassName(doc.body, 'asd');\n    const expected = doc.body.getElementsByClassName('asd');\n    checkResults(expected, els);\n  });\n\n  test('multiple matching elements', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <div class=\"fooz\">Fooz</div>\n        <div class=\"foo\">Foo</div>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, divs);\n  });\n});\n",
    "/src/get-elements-by-class-name.submit.test.ts": "import getElementsByClassName from './get-elements-by-class-name';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByClassName', () => {\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByClassName(doc.body, 'foo');\n    const expected = doc.body.getElementsByClassName('foo');\n\n    checkResults(expected, els);\n  });\n\n  test('non-existent class names', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div class=\"foo\">\n        <span class=\"foo\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByClassName(doc.body, 'asd');\n    const expected = doc.body.getElementsByClassName('asd');\n    checkResults(expected, els);\n  });\n\n  describe('single class name', () => {\n    test('multiple matching elements', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\">\n          <div class=\"fooz\">Fooz</div>\n          <div class=\"foo\">Foo</div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, divs);\n    });\n\n    test('ignores comment nodes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\">\n        <!-- Here's a comment -->\n        <div class=\"foo\">Hello</div>\n      </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, els);\n    });\n\n    test(\"doesn't include itself\", () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo\"></div>`,\n        'text/html',\n      );\n\n      const body = getElementsByClassName(doc.body.children[0], 'foo');\n      const expected = doc.body.children[0].getElementsByClassName('foo');\n      checkResults(expected, body);\n    });\n\n    test('elements with duplicated classnames', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo foo foo\">\n          <div class=\"bar foo\">Hello</div>\n        </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByClassName(doc.body, 'foo');\n      const expected = doc.body.getElementsByClassName('foo');\n\n      checkResults(expected, els);\n    });\n  });\n\n  describe('multiple class names', () => {\n    test('non-duplicated', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar baz\">\n          <span class=\"bar baz\">Span</span>\n          <p class=\"foo baz\">Paragraph</p>\n          <div class=\"foo bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('duplicated class names in input', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar\">\n          <span class=\"bar baz\">Span</span>\n          <p class=\"foo baz\">Paragraph</p>\n          <div class=\"foo bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('duplicated class names in DOM', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar foo baz\">\n          <span class=\"bar baz bar\">Span</span>\n          <p class=\"foo baz baz\">Paragraph</p>\n          <div class=\"foo bar bar bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n  });\n\n  test('case-sensitivity', () => {\n    const doc = new DOMParser().parseFromString(\n      `<!DOCTYPE html>\n      <div class=\"foo bar foo baz\">\n        <span class=\"bar baz bar\">Span</span>\n        <p class=\"foo baz baz\">Paragraph</p>\n        <div id=\"1\" class=\"FOO BAR\"></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n    const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n    checkResults(expectedEls1, els1);\n\n    const els2 = getElementsByClassName(doc.body, 'FOO BAR');\n    const expectedEls2 = doc.body.getElementsByClassName('FOO BAR');\n    checkResults(expectedEls2, els2);\n  });\n\n  describe('extra whitespace in classes', () => {\n    test('in class attributes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar  foo  baz\">\n          <span class=\"   bar baz  bar\">Span</span>\n          <p class=\"  foo baz  baz \">Paragraph</p>\n          <div class=\" foo bar   bar  bar  \"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, 'foo foo bar');\n      const expectedEls1 = doc.body.getElementsByClassName('foo foo bar');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, 'bar bar');\n      const expectedEls2 = doc.body.getElementsByClassName('bar bar');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, 'bar baz bar');\n      const expectedEls3 = doc.body.getElementsByClassName('bar baz bar');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('in input class', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo bar foo baz\">\n          <span class=\"bar baz bar\">Span</span>\n          <p class=\"foo baz baz\">Paragraph</p>\n          <div class=\"foo bar bar bar\"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, '  foo   foo bar ');\n      const expectedEls1 = doc.body.getElementsByClassName('  foo   foo bar ');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, '   bar  bar ');\n      const expectedEls2 = doc.body.getElementsByClassName('   bar  bar ');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, '  bar baz   bar ');\n      const expectedEls3 = doc.body.getElementsByClassName('  bar baz   bar ');\n      checkResults(expectedEls3, els3);\n    });\n\n    test('both attributes and input class', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div class=\"foo  bar  foo  baz\">\n          <span class=\"   bar baz  bar\">Span</span>\n          <p class=\"  foo baz  baz \">Paragraph</p>\n          <div class=\" foo bar   bar  bar  \"></div>\n        </div>`,\n        'text/html',\n      );\n\n      const els1 = getElementsByClassName(doc.body, '  foo   foo bar ');\n      const expectedEls1 = doc.body.getElementsByClassName('  foo   foo bar ');\n      checkResults(expectedEls1, els1);\n\n      const els2 = getElementsByClassName(doc.body, '   bar  bar ');\n      const expectedEls2 = doc.body.getElementsByClassName('   bar  bar ');\n      checkResults(expectedEls2, els2);\n\n      const els3 = getElementsByClassName(doc.body, '  bar baz   bar ');\n      const expectedEls3 = doc.body.getElementsByClassName('  bar baz   bar ');\n      checkResults(expectedEls3, els3);\n    });\n  });\n});\n",
    "/src/get-elements-by-class-name.ts": "function isSubset(a: Set<string>, b: DOMTokenList) {\n  return Array.from(a).every((value) => b.contains(value));\n}\n\nexport default function getElementsByClassName(\n  element: Element,\n  classNames: string,\n): Array<Element> {\n  const elements: Array<Element> = [];\n  const classNamesSet = new Set(classNames.trim().split(/\\s+/));\n\n  function traverse(el: Element) {\n    if (el == null) {\n      return;\n    }\n\n    if (isSubset(classNamesSet, el.classList)) {\n      elements.push(el);\n    }\n\n    for (const child of el.children) {\n      traverse(child);\n    }\n  }\n\n  for (const child of element.children) {\n    traverse(child);\n  }\n\n  return elements;\n}\n"
  },
  "metadata": {
    "access": "standard",
    "author": "yangshun",
    "companies": [
      "dropbox",
      "google",
      "linkedin",
      "amazon"
    ],
    "created": 1655337600,
    "difficulty": "medium",
    "duration": 25,
    "excerpt": "实现一个函数，获取包含指定类的所有 DOM 元素",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/get-elements-by-class-name",
    "importance": "medium",
    "languages": [
      "html",
      "css",
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get-elements-by-tag-name",
      "get-elements-by-style"
    ],
    "slug": "get-elements-by-class-name",
    "subtitle": null,
    "title": "getElementsByClassName",
    "topics": [
      "web-api"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {Element} element\n * @param {string} classNames\n * @return {Array<Element>}\n */\nexport default function getElementsByClassName(element, classNames) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function getElementsByClassName(\n  element: Element,\n  classNames: string,\n): Array<Element> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),E=(t,e)=>{for(var l in e)i(t,l,{get:e[l],enumerable:!0})},a=(t,e,l,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of g(e))!b.call(t,s)&&s!==l&&i(t,s,{get:()=>e[s],enumerable:!(r=p(e,s))||r.enumerable});return t};var N=(t,e,l)=>(l=t!=null?f(v(t)):{},a(e||!t||!t.__esModule?i(l,\"default\",{value:t,enumerable:!0}):l,t)),w=t=>a(i({},\"__esModule\",{value:!0}),t);var o=y((L,c)=>{c.exports=_jsx_runtime});var T={};E(T,{default:()=>M});var n=N(o());var h=MDXCodeBlock;var d=`function isSubset(a, b) {\n  return Array.from(a).every((value) => b.contains(value));\n}\n\n/**\n * @param {Element} element\n * @param {string} classNames\n * @return {Array<Element>}\n */\nexport default function getElementsByClassName(element, classNames) {\n  const elements = [];\n  const classNamesSet = new Set(classNames.trim().split(/\\\\s+/));\n\n  function traverse(el) {\n    if (el == null) {\n      return;\n    }\n\n    if (isSubset(classNamesSet, el.classList)) {\n      elements.push(el);\n    }\n\n    for (const child of el.children) {\n      traverse(child);\n    }\n  }\n\n  for (const child of element.children) {\n    traverse(child);\n  }\n\n  return elements;\n}\n`;var m=`function isSubset(a: Set<string>, b: DOMTokenList) {\n  return Array.from(a).every((value) => b.contains(value));\n}\n\nexport default function getElementsByClassName(\n  element: Element,\n  classNames: string,\n): Array<Element> {\n  const elements: Array<Element> = [];\n  const classNamesSet = new Set(classNames.trim().split(/\\\\s+/));\n\n  function traverse(el: Element) {\n    if (el == null) {\n      return;\n    }\n\n    if (isSubset(classNamesSet, el.classList)) {\n      elements.push(el);\n    }\n\n    for (const child of el.children) {\n      traverse(child);\n    }\n  }\n\n  for (const child of element.children) {\n    traverse(child);\n  }\n\n  return elements;\n}\n`;function u(t){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"This question assesses you on the basic DOM traversal APIs, recursion, and knowledge of CSS - how elements are matched according to the element's class name. The approach to solve this question is similar to \",(0,n.jsx)(e.a,{href:\"/questions/javascript/get-elements-by-tag-name\",children:\"getElementsByTagName\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The solution is pretty straightforward if you are familiar with the HTML DOM APIs. In particular, we need to know the following:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\",children:(0,n.jsx)(e.code,{children:\"Element.classList\"})}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"DOMTokenList\"}),\" of class attributes of the element. This is preferred over \",(0,n.jsx)(e.code,{children:\"className\"}),\" because \",(0,n.jsx)(e.code,{children:\"className\"}),\" is a string and needs to be manually parsed.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/children\",children:(0,n.jsx)(e.code,{children:\"Element.children\"})}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" of the child elements. We use this over \",(0,n.jsx)(e.code,{children:\"Node.childNodes\"}),\" which returns a live \",(0,n.jsx)(e.code,{children:\"NodeList\"}),\" of child \",(0,n.jsx)(e.code,{children:\"Node\"}),\"s because \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" will include non-element nodes like text and comment nodes, which are not relevant in this question.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"However \",(0,n.jsx)(e.code,{children:\"HTMLCollection\"}),\" does not have \",(0,n.jsx)(e.code,{children:\".forEach\"}),\", so we have to iterate through it using traditional \",(0,n.jsx)(e.code,{children:\"for\"}),\" loops.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For the class name to match, they have to be a subset of the \",(0,n.jsx)(e.code,{children:\"classList\"}),\" of an element. The matching is also case-sensitive and duplicate class names (in both the input and on the elements) do not matter.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can maintain an \",(0,n.jsx)(e.code,{children:\"elements\"}),\" array to collect the matching elements while recursively traversing the root element. A depth-first traversal is performed.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Remember that the element argument itself is not included in the results.\"}),`\n`,(0,n.jsx)(h,{languages:{jsx:d,tsx:m}}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Element argument is not included in the results even if it matches the tag name.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Duplicate class names in both the input and on the element's \",(0,n.jsx)(e.code,{children:\"class\"}),\" are ignored.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Whitespace in input and on the element's \",(0,n.jsx)(e.code,{children:\"class\"}),\" are handled properly.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Recursion\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"DOM APIs\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"How to get an \",(0,n.jsx)(e.code,{children:\"Element\"}),\"'s class\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"How to traverse an \",(0,n.jsx)(e.code,{children:\"Element\"}),\"'s children\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"CSS: class matching algorithm\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\",children:\"Element.getElementsByClassName() - MDN\"})}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var M=C;return w(T);})();\n;return Component;",
  "workspace": {
    "main": "/src/get-elements-by-class-name.ts",
    "run": "/src/get-elements-by-class-name.run.test.ts",
    "submit": "/src/get-elements-by-class-name.submit.test.ts"
  }
}