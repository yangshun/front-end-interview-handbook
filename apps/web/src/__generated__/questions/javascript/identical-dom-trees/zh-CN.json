{
  "description": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var M=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var d in e)c(n,d,{get:e[d],enumerable:!0})},t=(n,e,d,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!u.call(n,r)&&r!==d&&c(n,r,{get:()=>e[r],enumerable:!(i=m(e,r))||i.enumerable});return n};var O=(n,e,d)=>(d=n!=null?a(D(n)):{},t(e||!n||!n.__esModule?c(d,\"default\",{value:n,enumerable:!0}):d,n)),g=n=>t(c({},\"__esModule\",{value:!0}),n);var h=M((H,o)=>{o.exports=_jsx_runtime});var f={};x(f,{default:()=>_,frontmatter:()=>v});var l=O(h()),v={title:\"\\u76F8\\u540C\\u7684 DOM \\u6811\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u51FD\\u6570\\u6765\\u786E\\u5B9A\\u4E24\\u68F5 DOM \\u6811\\u662F\\u5426\\u76F8\\u540C\"};function s(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",ul:\"ul\",li:\"li\"},n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.p,{children:[\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u51FD\\u6570 \",(0,l.jsx)(e.code,{children:\"identicalDOMTrees\"}),\"\\uFF0C\\u7528\\u4E8E\\u68C0\\u67E5\\u4E24\\u68F5 DOM \\u6811\\u662F\\u5426\\u76F8\\u540C\\u3002\\u8BE5\\u51FD\\u6570\\u63A5\\u53D7\\u4E24\\u4E2A DOM \\u8282\\u70B9\\u4F5C\\u4E3A\\u4E24\\u68F5 DOM \\u6811\\u7684\\u6839\\u8282\\u70B9\\uFF0C\\u5E76\\u8FD4\\u56DE\\u4E00\\u4E2A\\u5E03\\u5C14\\u503C\\u7ED3\\u679C\\u3002\"]}),`\n`,(0,l.jsx)(e.p,{children:\"\\u5982\\u679C\\u4E24\\u68F5 DOM \\u6811\\u5728\\u7ED3\\u6784\\u4E0A\\u76F8\\u4F3C\\uFF0C\\u5E76\\u4E14\\u4E00\\u68F5\\u6811\\u4E0A\\u7684 DOM \\u8282\\u70B9\\u4E0E\\u53E6\\u4E00\\u68F5\\u6811\\u4E0A\\u76F8\\u540C\\u76F8\\u5BF9\\u4F4D\\u7F6E\\u7684\\u8282\\u70B9\\u5177\\u6709\\u5B8C\\u5168\\u76F8\\u540C\\u7684\\u5C5E\\u6027\\uFF0C\\u5219\\u8BA4\\u4E3A\\u8FD9\\u4E24\\u68F5 DOM \\u6811\\u662F\\u76F8\\u540C\\u7684\\u3002\"}),`\n`,(0,l.jsx)(e.h2,{children:\"\\u4F8B\\u5B50\"}),`\n`,(0,l.jsx)(e.p,{children:\"\\u6811 A \\u548C\\u6811 B \\u88AB\\u8BA4\\u4E3A\\u662F\\u76F8\\u540C\\u7684\\u3002\"}),`\n`,(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:\"language-html\",children:`<!-- \\u6811 A -->\n<div>Hello World</div>\n\n<!-- \\u6811 B -->\n<div>Hello World</div>\n`})}),`\n`,(0,l.jsx)(e.p,{children:\"\\u6811 C \\u548C\\u6811 D \\u88AB\\u8BA4\\u4E3A\\u662F\\u4E0D\\u76F8\\u540C\\u7684\\u3002\"}),`\n`,(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:\"language-html\",children:`<!-- \\u6811 C -->\n<div class=\"header\">Hello World</div>\n\n<!-- \\u6811 D -->\n<div id=\"foo\">Hello World</div>\n`})}),`\n`,(0,l.jsx)(e.h2,{children:\"\\u6CE8\\u610F\\u4E8B\\u9879\"}),`\n`,(0,l.jsxs)(e.ul,{children:[`\n`,(0,l.jsxs)(e.li,{children:[\"\\u6811\\u4E2D\\u5B58\\u5728\\u7684\\u552F\\u4E00 \",(0,l.jsx)(e.code,{children:\"Node\"}),\" \\u7C7B\\u578B\\u662F \",(0,l.jsx)(e.code,{children:\"Element\"}),\" \\u8282\\u70B9\\u548C \",(0,l.jsx)(e.code,{children:\"Text\"}),\" \\u8282\\u70B9\\u3002\"]}),`\n`]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(s,n)})):s(n)}var _=j;return g(f);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/identical-dom-trees\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/identical-dom-trees.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/identical-dom-trees.run.test.ts": "import identicalDOMTrees from './identical-dom-trees';\n\ndescribe('identicalDOMTrees', () => {\n  test('single nodes', () => {\n    const treeA = document.createElement('div');\n    const treeB = document.createElement('div');\n    expect(identicalDOMTrees(treeA, treeB)).toBe(true);\n  });\n\n  test('nodes with same children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with different children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Bar</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n});\n",
    "/src/identical-dom-trees.submit.test.ts": "import identicalDOMTrees from './identical-dom-trees';\n\ndescribe('identicalDOMTrees', () => {\n  test('single nodes', () => {\n    const treeA = document.createElement('div');\n    const treeB = document.createElement('div');\n    expect(identicalDOMTrees(treeA, treeB)).toBe(true);\n  });\n\n  test('nodes with same children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with different children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Bar</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different tagnames', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>Foo</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(`<p>Foo</p>`, 'text/html');\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with same attributes', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div class=\"foo\" data-id=\"123\">hello</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div class=\"foo\" data-id=\"123\">hello</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with different attributes', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div class=\"foo\">hello</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div class=\"bar\">hello</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different styles', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div style=\"color: red;\">hello</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div style=\"color: blue;\">hello</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different comment and text nodes', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><!-- comment --></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Foo</span>text node</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different numbers of children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n      </div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with nested elements', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div>\n          <span>Bar</span>\n          <p>Para</p>\n        </div>\n      </div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div>\n          <span>Bar</span>\n          <p>Para</p>\n        </div>\n      </div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with nested elements in different order', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div>\n          <span>Bar</span>\n          <p>Para</p>\n        </div>\n      </div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div>\n        <div>\n          <p>Para</p>\n          <span>Bar</span>\n        </div>\n        <span>Foo</span>\n        <p>Para</p>\n      </div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n});\n",
    "/src/identical-dom-trees.ts": "export default function identicalDOMTrees(nodeA: Node, nodeB: Node): boolean {\n  if (nodeA.nodeType !== nodeB.nodeType) {\n    return false;\n  }\n\n  if (nodeA.nodeType === Node.TEXT_NODE) {\n    return nodeA.textContent === nodeB.textContent;\n  }\n\n  const elA = nodeA as Element;\n  const elB = nodeB as Element;\n\n  // We can assume it's an element node from here on.\n  if (elA.tagName !== elB.tagName) {\n    return false;\n  }\n\n  if (elA.childNodes.length !== elB.childNodes.length) {\n    return false;\n  }\n\n  if (elA.attributes.length !== elB.attributes.length) {\n    return false;\n  }\n\n  const hasSameAttributes = elA\n    .getAttributeNames()\n    .every(\n      (attrName) => elA.getAttribute(attrName) === elB.getAttribute(attrName),\n    );\n\n  if (!hasSameAttributes) {\n    return false;\n  }\n\n  return Array.prototype.every.call(elA.childNodes, (childA, index) =>\n    identicalDOMTrees(childA, elB.childNodes[index]),\n  );\n}\n"
  },
  "info": {
    "excerpt": "实现一个函数来确定两棵 DOM 树是否相同",
    "title": "相同的 DOM 树"
  },
  "metadata": {
    "access": "premium",
    "author": "zhenghao",
    "companies": [],
    "created": 1649894400,
    "difficulty": "medium",
    "duration": 20,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/identical-dom-trees",
    "importance": "low",
    "languages": [
      "html",
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "deep-equal"
    ],
    "slug": "identical-dom-trees",
    "subtitle": null,
    "topics": [
      "recursion",
      "tree",
      "web-api"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @return {boolean}\n */\nexport default function identicalDOMTrees(nodeA, nodeB) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function identicalDOMTrees(nodeA: Node, nodeB: Node): boolean {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(d,e)=>()=>(e||d((e={exports:{}}).exports,e),e.exports),M=(d,e)=>{for(var r in e)o(d,r,{get:e[r],enumerable:!0})},i=(d,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of N(e))!g.call(d,t)&&t!==r&&o(d,t,{get:()=>e[t],enumerable:!(l=A(e,t))||l.enumerable});return d};var D=(d,e,r)=>(r=d!=null?m(f(d)):{},i(e||!d||!d.__esModule?o(r,\"default\",{value:d,enumerable:!0}):r,d)),B=d=>i(o({},\"__esModule\",{value:!0}),d);var a=y((q,c)=>{c.exports=_jsx_runtime});var v={};M(v,{default:()=>O});var n=D(a());var s=MDXCodeBlock;var h=`/**\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @return {boolean}\n */\nexport default function identicalDOMTrees(nodeA, nodeB) {\n  if (nodeA.nodeType !== nodeB.nodeType) {\n    return false;\n  }\n\n  if (nodeA.nodeType === Node.TEXT_NODE) {\n    return nodeA.textContent === nodeB.textContent;\n  }\n\n  // We can assume it's an element node from here on.\n  if (nodeA.tagName !== nodeB.tagName) {\n    return false;\n  }\n\n  if (nodeA.childNodes.length !== nodeB.childNodes.length) {\n    return false;\n  }\n\n  if (nodeA.attributes.length !== nodeB.attributes.length) {\n    return false;\n  }\n\n  const hasSameAttributes = nodeA\n    .getAttributeNames()\n    .every(\n      (attrName) =>\n        nodeA.getAttribute(attrName) === nodeB.getAttribute(attrName),\n    );\n\n  if (!hasSameAttributes) {\n    return false;\n  }\n\n  return Array.prototype.every.call(nodeA.childNodes, (childA, index) =>\n    identicalDOMTrees(childA, nodeB.childNodes[index]),\n  );\n}\n`;var p=`export default function identicalDOMTrees(nodeA: Node, nodeB: Node): boolean {\n  if (nodeA.nodeType !== nodeB.nodeType) {\n    return false;\n  }\n\n  if (nodeA.nodeType === Node.TEXT_NODE) {\n    return nodeA.textContent === nodeB.textContent;\n  }\n\n  const elA = nodeA as Element;\n  const elB = nodeB as Element;\n\n  // We can assume it's an element node from here on.\n  if (elA.tagName !== elB.tagName) {\n    return false;\n  }\n\n  if (elA.childNodes.length !== elB.childNodes.length) {\n    return false;\n  }\n\n  if (elA.attributes.length !== elB.attributes.length) {\n    return false;\n  }\n\n  const hasSameAttributes = elA\n    .getAttributeNames()\n    .every(\n      (attrName) => elA.getAttribute(attrName) === elB.getAttribute(attrName),\n    );\n\n  if (!hasSameAttributes) {\n    return false;\n  }\n\n  return Array.prototype.every.call(elA.childNodes, (childA, index) =>\n    identicalDOMTrees(childA, elB.childNodes[index]),\n  );\n}\n`;function u(d){let e=Object.assign({p:\"p\",a:\"a\",pre:\"pre\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\"},d.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"\\u8FD9\\u4E2A\\u95EE\\u9898\\u662F LeetCode \\u4E0A \",(0,n.jsx)(e.a,{href:\"https://leetcode.com/problems/same-tree/\",children:\"Same Tree\"}),\" \\u95EE\\u9898\\u7684\\u524D\\u7AEF\\u7248\\u672C\\u3002\\u5B83\\u6D4B\\u8BD5\\u4F60\\u5BF9\\u9012\\u5F52/\\u6811\\u904D\\u5386\\u548C\\u6587\\u6863\\u5BF9\\u8C61\\u6A21\\u578B (DOM) \\u7684\\u4E86\\u89E3\\u3002\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u8BA9\\u6211\\u4EEC\\u770B\\u4E00\\u4E2A DOM \\u6811\\u7684\\u6700\\u5C0F\\u793A\\u4F8B\\u3002\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<span>foo</span>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5728 DOM \\u4E2D\\uFF0C\\u6BCF\\u4E2A HTML \\u6807\\u7B7E\\u90FD\\u662F\\u4E00\\u4E2A\\u5BF9\\u8C61\\u3002\\u5D4C\\u5957\\u6807\\u7B7E\\u6216\\u6587\\u672C\\u662F\\u5C01\\u95ED\\u6807\\u7B7E\\u7684\\u5B50\\u7EA7\\u3002\\u5728\\u8FD9\\u4E2A\\u4F8B\\u5B50\\u4E2D\\uFF0C\\u6587\\u672C \",(0,n.jsx)(e.code,{children:\"foo\"}),\" \\u662F \",(0,n.jsx)(e.code,{children:\"span\"}),\" \\u6807\\u7B7E\\u7684\\u5B50\\u7EA7\\uFF0C\\u53EF\\u4EE5\\u901A\\u8FC7 \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" \\u5C5E\\u6027\\u8BBF\\u95EE\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u6211\\u4EEC\\u7684\\u51FD\\u6570\\u9700\\u8981\\u786E\\u5B9A\\u4E24\\u68F5\\u6811\\u662F\\u5426\\u76F8\\u540C\\u3002\\u6211\\u4EEC\\u53EF\\u4EE5\\u901A\\u8FC7\\u540C\\u65F6\\u904D\\u5386\\u4E24\\u4E2A\\u6839\\u8282\\u70B9\\u5E76\\u6BD4\\u8F83\\u5B83\\u4EEC\\u6765\\u505A\\u5230\\u8FD9\\u4E00\\u70B9\\uFF0C\\u770B\\u770B\\u5B83\\u4EEC\\u662F\\u5426\\u76F8\\u540C\\uFF0C\\u9012\\u5F52\\u5230\\u5B83\\u4EEC\\u7684\\u5B50\\u8282\\u70B9\\u5E76\\u91CD\\u590D\\u6B64\\u8FC7\\u7A0B\\uFF0C\\u76F4\\u5230\\u6211\\u4EEC\\u53D1\\u73B0\\u4E0D\\u5339\\u914D\\u6216\\u6211\\u4EEC\\u5DF2\\u7ECF\\u8BBF\\u95EE\\u4E86\\u5176\\u4E2D\\u4E00\\u68F5\\u6811\\u4E2D\\u7684\\u6240\\u6709\\u8282\\u70B9\\u3002\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u56E0\\u6B64\\uFF0C\\u6211\\u4EEC\\u7684\\u4EFB\\u52A1\\u53EF\\u4EE5\\u5206\\u4E3A\\u4E24\\u4E2A\\u5B50\\u4EFB\\u52A1\\uFF1A\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"\\u904D\\u5386 DOM \\u6811\\u3002\"}),`\n`,(0,n.jsx)(e.li,{children:\"\\u6BD4\\u8F83\\u5F53\\u524D\\u7684 DOM \\u8282\\u70B9\\u3002\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5982\\u679C\\u4F60\\u505A\\u8FC7 \",(0,n.jsx)(e.a,{href:\"/questions/javascript/deep-equal\",children:\"deep equal\"}),\" \\u8FD9\\u4E2A\\u95EE\\u9898\\uFF0C\\u4F60\\u4F1A\\u610F\\u8BC6\\u5230\\u4E0A\\u9762\\u63CF\\u8FF0\\u7684\\u65B9\\u6CD5\\u6B63\\u662F\\u6211\\u4EEC\\u7528\\u4E8E \",(0,n.jsx)(e.a,{href:\"/questions/javascript/deep-equal\",children:\"deep equal\"}),\" \\u8FD9\\u4E2A\\u95EE\\u9898\\u7684\\u65B9\\u6CD5\\u3002\\u4E8B\\u5B9E\\u4E0A\\uFF0C\\u5B83\\u662F\\u4E00\\u79CD\\u5E38\\u89C1\\u7684\\u6280\\u672F\\uFF0C\\u9002\\u7528\\u4E8E\\u5927\\u591A\\u6570\\u4E0E\\u5BF9\\u8C61/\\u6811\\u76F8\\u5173\\u7684\\u95EE\\u9898\\uFF1A\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"\\u6211\\u4EEC\\u5E0C\\u671B\\u6709\\u6548\\u5730\\u8BBF\\u95EE\\u4E00\\u4E2A\\u5BF9\\u8C61\\uFF08\\u4E00\\u68F5\\u6811\\uFF09\\u3002\"}),`\n`,(0,n.jsx)(e.li,{children:\"\\u5F53\\u6211\\u4EEC\\u5904\\u7406\\u8BE5\\u5BF9\\u8C61\\u7684\\u6BCF\\u4E2A\\u5C5E\\u6027\\uFF08\\u6811\\u4E2D\\u7684\\u4E00\\u4E2A\\u8282\\u70B9\\uFF09\\u65F6\\uFF0C\\u6211\\u4EEC\\u9700\\u8981\\u505A\\u4E00\\u4E9B\\u4E8B\\u60C5\\u3002\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u8FD9\\u662F\\u89E3\\u51B3\\u65B9\\u6848\\uFF1A\"}),`\n`,(0,n.jsx)(s,{languages:{jsx:h,tsx:p}}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u5173\\u4E8E\\u539F\\u751F DOM API \\u7684\\u8BF4\\u660E\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u4F60\\u5C06\\u4E0D\\u5F97\\u4E0D\\u4F7F\\u7528\\u76F8\\u5F53\\u591A\\u7684 DOM \\u7279\\u5B9A\\u7684 API \\u6765\\u5B9E\\u73B0\\u8FD9\\u6837\\u7684\\u51FD\\u6570\\u3002\\u5982\\u679C\\u4F60\\u4E0D\\u719F\\u6089\\u5B83\\u4EEC\\uFF0C\\u4E5F\\u6CA1\\u5173\\u7CFB\\u3002\\u5728\\u5B9E\\u8DF5\\u4E2D\\uFF0C\\u4F60\\u901A\\u5E38\\u4E0D\\u518D\\u9700\\u8981\\u7F16\\u5199\\u4F4E\\u7EA7 DOM \\u64CD\\u4F5C\\u4EE3\\u7801\\u3002\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u4EE5\\u4E0B\\u662F\\u6211\\u4EEC\\u5728\\u672C\\u89E3\\u51B3\\u65B9\\u6848\\u4E2D\\u6DB5\\u76D6\\u7684 DOM API\\uFF1A\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u6211\\u4EEC\\u5728\\u68C0\\u67E5\\u8282\\u70B9\\u7C7B\\u578B\\u65F6\\u4F7F\\u7528 \",(0,n.jsx)(e.code,{children:\"nodeType\"}),\"\\u3002\\u6709\\u4E00\\u4E2A\\u7C7B\\u4F3C\\u7684 API \\u53EB\\u505A \",(0,n.jsx)(e.code,{children:\"tagName\"}),\"\\uFF0C\\u5B83\\u53EA\\u9002\\u7528\\u4E8E HTML \\u5143\\u7D20\\uFF0C\\u4E0D\\u9002\\u7528\\u4E8E\\u6587\\u672C\\u8282\\u70B9\\u548C\\u6CE8\\u91CA\\u8282\\u70B9\\u3002\\u5982\\u679C\\u4F60\\u60F3\\u4E86\\u89E3\\u66F4\\u591A\\u5173\\u4E8E\\u5B83\\u4EEC\\u7684\\u533A\\u522B\\uFF0C\\u8BF7\\u67E5\\u770B \",(0,n.jsx)(e.a,{href:\"https://javascript.info/basic-dom-node-properties#summary\",children:\"\\u672C\\u6559\\u7A0B\"}),\"\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u6211\\u4EEC\\u4F7F\\u7528 \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" \\u5C5E\\u6027\\u2014\\u2014\\u800C\\u4E0D\\u662F \",(0,n.jsx)(e.code,{children:\"children\"}),\" \\u5C5E\\u6027\\u2014\\u2014\\u6765\\u83B7\\u53D6\\u5B50\\u8282\\u70B9\\u5217\\u8868\\u3002\\u539F\\u56E0\\u662F\\uFF0C\",(0,n.jsx)(e.code,{children:\"children\"}),\" \\u4EC5\\u8FD4\\u56DE\\u5143\\u7D20\\uFF0C\\u800C \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" \\u8FD4\\u56DE\\u6240\\u6709\\u8282\\u70B9\\uFF0C\\u5305\\u62EC\\u6587\\u672C\\u8282\\u70B9\\u548C\\u6CE8\\u91CA\\u8282\\u70B9\\u3002\\u5982\\u679C\\u4F60\\u60F3\\u4E86\\u89E3\\u66F4\\u591A\\u5173\\u4E8E\\u5B83\\u4EEC\\u7684\\u533A\\u522B\\uFF0C\\u8BF7\\u67E5\\u770B \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes\",children:\"\\u6B64 MDN \\u9875\\u9762\"}),\"\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u6211\\u4EEC\\u901A\\u8FC7 \",(0,n.jsx)(e.code,{children:\"Array.prototype.every.call(treeA.childNodes)\"}),\" \\u4ECE \",(0,n.jsx)(e.code,{children:\"Array.prototype\"}),\" \\u201C\\u501F\\u7528\\u201D\\u4E86 \",(0,n.jsx)(e.code,{children:\"every\"}),\" \\u65B9\\u6CD5\\uFF0C\\u800C\\u4E0D\\u662F\\u53EA\\u5728 \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" \\u4E0A\\u8C03\\u7528 \",(0,n.jsx)(e.code,{children:\"every\"}),\"\\u3002\\u8FD9\\u662F\\u56E0\\u4E3A \",(0,n.jsx)(e.code,{children:\"childNodes\"}),\" \\u8FD4\\u56DE\\u7684\\u4E0D\\u662F\\u4E00\\u4E2A JavaScript \\u6570\\u7EC4\\uFF0C\\u800C\\u662F\\u4E00\\u4E2A\\u7C7B\\u4F3C\\u6570\\u7EC4\\u7684\\u6570\\u636E\\u7ED3\\u6784\\uFF0C\\u79F0\\u4E3A \",(0,n.jsx)(e.code,{children:\"NodeList\"}),\"\\uFF0C\\u5B83\\u6CA1\\u6709\\u9644\\u5E26\\u6240\\u6709\\u5F00\\u7BB1\\u5373\\u7528\\u7684\\u6570\\u7EC4\\u65B9\\u6CD5\\u3002\\u5728\\u5176\\u4E0A\\u8C03\\u7528\\u6570\\u7EC4\\u65B9\\u6CD5\\uFF08\\u5982 \",(0,n.jsx)(e.code,{children:\"every\"}),\"\\uFF09\\u4F1A\\u629B\\u51FA\\u9519\\u8BEF\\u3002\\u5728 \",(0,n.jsx)(e.code,{children:\"NodeList\"}),\" \\u4E0A\\u4F7F\\u7528\\u6570\\u7EC4\\u65B9\\u6CD5\\u7684\\u53E6\\u4E00\\u79CD\\u65B9\\u6CD5\\u662F\\u9996\\u5148\\u901A\\u8FC7 \",(0,n.jsx)(e.code,{children:\"Array.from\"}),\" \\u5C06\\u5176\\u8F6C\\u6362\\u4E3A\\u6570\\u7EC4\\u3002\\u5373 \",(0,n.jsx)(e.code,{children:\"Array.from(treeA.childNodes).every(...)\"}),\"\\u3002\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u5355\\u884C\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u6709\\u4E00\\u4E2A\\u65B0\\u7684 API \\u53EB\\u505A \",(0,n.jsx)(e.code,{children:\"isEqualNode\"}),\"\\uFF0C\\u5B83\\u6D4B\\u8BD5\\u4E24\\u4E2A\\u8282\\u70B9\\u662F\\u5426\\u76F8\\u7B49\\u3002\\u67E5\\u770B \",(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode\",children:[\"MDN \\u4E0A\\u7684 \",(0,n.jsx)(e.code,{children:\"Node.isEqualNode()\"}),\" API\"]}),\"\\u3002\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function identicalDOMTrees(treeA, treeB) {\n  return treeA.isEqualNode(treeB);\n}\n`})})]})}function x(d={}){let{wrapper:e}=d.components||{};return e?(0,n.jsx)(e,Object.assign({},d,{children:(0,n.jsx)(u,d)})):u(d)}var O=x;return B(v);})();\n;return Component;",
  "workspace": {
    "main": "/src/identical-dom-trees.ts",
    "run": "/src/identical-dom-trees.run.test.ts",
    "submit": "/src/identical-dom-trees.submit.test.ts"
  }
}