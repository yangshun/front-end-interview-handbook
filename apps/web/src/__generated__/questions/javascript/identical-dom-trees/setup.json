{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/identical-dom-trees\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/identical-dom-trees.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/identical-dom-trees.run.test.ts": "import identicalDOMTrees from './identical-dom-trees';\n\ndescribe('identicalDOMTrees', () => {\n  test('single nodes', () => {\n    const treeA = document.createElement('div');\n    const treeB = document.createElement('div');\n    expect(identicalDOMTrees(treeA, treeB)).toBe(true);\n  });\n\n  test('nodes with same children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with different children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Bar</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n});\n",
    "/src/identical-dom-trees.submit.test.ts": "import identicalDOMTrees from './identical-dom-trees';\n\ndescribe('identicalDOMTrees', () => {\n  test('single nodes', () => {\n    const treeA = document.createElement('div');\n    const treeB = document.createElement('div');\n    expect(identicalDOMTrees(treeA, treeB)).toBe(true);\n  });\n\n  test('nodes with same children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with different children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><p>Para</p></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Bar</span><p>Para</p></div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different tagnames', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>Foo</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(`<p>Foo</p>`, 'text/html');\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with same attributes', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div class=\"foo\" data-id=\"123\">hello</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div class=\"foo\" data-id=\"123\">hello</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with different attributes', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div class=\"foo\">hello</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div class=\"bar\">hello</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different styles', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div style=\"color: red;\">hello</div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div style=\"color: blue;\">hello</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different comment and text nodes', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div><span>Foo</span><!-- comment --></div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div><span>Foo</span>text node</div>`,\n      'text/html',\n    );\n\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with different numbers of children', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n      </div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n\n  test('nodes with nested elements', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div>\n          <span>Bar</span>\n          <p>Para</p>\n        </div>\n      </div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div>\n          <span>Bar</span>\n          <p>Para</p>\n        </div>\n      </div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(true);\n  });\n\n  test('nodes with nested elements in different order', () => {\n    const treeA = new DOMParser().parseFromString(\n      `<div>\n        <span>Foo</span>\n        <p>Para</p>\n        <div>\n          <span>Bar</span>\n          <p>Para</p>\n        </div>\n      </div>`,\n      'text/html',\n    );\n    const treeB = new DOMParser().parseFromString(\n      `<div>\n        <div>\n          <p>Para</p>\n          <span>Bar</span>\n        </div>\n        <span>Foo</span>\n        <p>Para</p>\n      </div>`,\n      'text/html',\n    );\n    expect(identicalDOMTrees(treeA.body, treeB.body)).toBe(false);\n  });\n});\n",
    "/src/identical-dom-trees.ts": "export default function identicalDOMTrees(nodeA: Node, nodeB: Node): boolean {\n  if (nodeA.nodeType !== nodeB.nodeType) {\n    return false;\n  }\n\n  if (nodeA.nodeType === Node.TEXT_NODE) {\n    return nodeA.textContent === nodeB.textContent;\n  }\n\n  const elA = nodeA as Element;\n  const elB = nodeB as Element;\n\n  // We can assume it's an element node from here on.\n  if (elA.tagName !== elB.tagName) {\n    return false;\n  }\n\n  if (elA.childNodes.length !== elB.childNodes.length) {\n    return false;\n  }\n\n  if (elA.attributes.length !== elB.attributes.length) {\n    return false;\n  }\n\n  const hasSameAttributes = elA\n    .getAttributeNames()\n    .every(\n      (attrName) => elA.getAttribute(attrName) === elB.getAttribute(attrName),\n    );\n\n  if (!hasSameAttributes) {\n    return false;\n  }\n\n  return Array.prototype.every.call(elA.childNodes, (childA, index) =>\n    identicalDOMTrees(childA, elB.childNodes[index]),\n  );\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Node} nodeA\n * @param {Node} nodeB\n * @return {boolean}\n */\nexport default function identicalDOMTrees(nodeA, nodeB) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function identicalDOMTrees(nodeA: Node, nodeB: Node): boolean {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/identical-dom-trees.ts",
    "run": "/src/identical-dom-trees.run.test.ts",
    "submit": "/src/identical-dom-trees.submit.test.ts"
  }
}