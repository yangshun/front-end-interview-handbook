{
  "description": "var Component=(()=>{var s=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var o in e)l(n,o,{get:e[o],enumerable:!0})},r=(n,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!g.call(n,i)&&i!==o&&l(n,i,{get:()=>e[i],enumerable:!(c=u(e,i))||c.enumerable});return n};var v=(n,e,o)=>(o=n!=null?s(p(n)):{},r(e||!n||!n.__esModule?l(o,\"default\",{value:n,enumerable:!0}):o,n)),S=n=>r(l({},\"__esModule\",{value:!0}),n);var h=f((C,d)=>{d.exports=_jsx_runtime});var k={};b(k,{default:()=>j,frontmatter:()=>w});var t=v(h()),w={title:\"useSet\",excerpt:\"Implement a hook that manages a JavaScript set\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useSet\"}),\" hook that manages a JavaScript \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\",children:(0,t.jsx)(e.code,{children:\"Set\"})}),\" of items with additional utility methods.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"It is more convenient to use \",(0,t.jsx)(e.code,{children:\"useSet\"}),\" over plain \",(0,t.jsx)(e.code,{children:\"useState\"}),\" because in the latter case, you would always have to create a new \",(0,t.jsx)(e.code,{children:\"Set\"}),\", mutate it, then set state to use the new set, which can be quite cumbersome.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The hook should work generically with items of any types.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const { set, add, remove, toggle, reset, clear } = useSet(new Set(['hello']));\n\n  return (\n    <div>\n      <button onClick={() => add(Date.now().toString())}>Add</button>\n      <button onClick={() => remove('hello')} disabled={!has('hello')}>\n        Remove 'hello'\n      </button>\n      <button onClick={() => toggle('hello')}>Toggle hello</button>\n      <button onClick={() => reset()}>Reset</button>\n      <button onClick={() => clear()}>Clear</button>\n      <pre>{JSON.stringify(Array.from(set), null, 2)}</pre>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"initialState\"}),\": The initial \",(0,t.jsx)(e.code,{children:\"Set\"}),\" of items\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The hook returns an object with the following properties:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"set\"}),\": The current set of items\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"add: (item) => void\"}),\": A function that adds \",(0,t.jsx)(e.code,{children:\"item\"}),\" to the set\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"remove: (item) => void\"}),\": A function that removes \",(0,t.jsx)(e.code,{children:\"item\"}),\" from the set\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"toggle: (item) => void\"}),\": A function that toggles the presence of \",(0,t.jsx)(e.code,{children:\"item\"}),\" in the set\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"reset: () => void\"}),\": A function that resets the set to \",(0,t.jsx)(e.code,{children:\"initialState\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"clear: () => void\"}),\": A function that removes all items in the set\"]}),`\n`]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var j=x;return S(k);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-set\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-set.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-set.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useSet from './use-set';\n\ndescribe('useSet', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useSet());\n\n    expect(result.current.set).toBeInstanceOf(Set);\n    expect(typeof result.current.add).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.toggle).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n    expect(typeof result.current.clear).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    expect(result.current.set).toEqual(initialValue);\n  });\n\n  test('add element', () => {\n    const { result } = renderHook(() => useSet());\n\n    act(() => {\n      result.current.add(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([1]));\n  });\n\n  test('remove element', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.remove(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([2, 3]));\n  });\n\n  test('toggle element', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.toggle(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([2, 3]));\n\n    act(() => {\n      result.current.toggle(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([2, 3, 1]));\n  });\n\n  test('reset elements', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.add(4);\n    });\n\n    expect(result.current.set).toEqual(new Set([1, 2, 3, 4]));\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.set).toEqual(new Set([1, 2, 3]));\n  });\n\n  test('clear elements', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.clear();\n    });\n\n    expect(result.current.set).toEqual(new Set());\n  });\n});\n",
    "/src/use-set.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useSet from './use-set';\n\ndescribe('useSet', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useSet());\n\n    expect(result.current.set).toBeInstanceOf(Set);\n    expect(typeof result.current.add).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.toggle).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n    expect(typeof result.current.clear).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    expect(result.current.set).toEqual(initialValue);\n  });\n\n  test('add element', () => {\n    const { result } = renderHook(() => useSet());\n\n    act(() => {\n      result.current.add(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([1]));\n  });\n\n  test('remove element', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.remove(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([2, 3]));\n  });\n\n  test('toggle element', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.toggle(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([2, 3]));\n\n    act(() => {\n      result.current.toggle(1);\n    });\n\n    expect(result.current.set).toEqual(new Set([2, 3, 1]));\n  });\n\n  test('reset elements', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.add(4);\n    });\n\n    expect(result.current.set).toEqual(new Set([1, 2, 3, 4]));\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.set).toEqual(new Set([1, 2, 3]));\n  });\n\n  test('clear elements', () => {\n    const { result } = renderHook(() => useSet(new Set([1, 2, 3])));\n\n    act(() => {\n      result.current.clear();\n    });\n\n    expect(result.current.set).toEqual(new Set());\n  });\n\n  test('add must be immutable', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    act(() => {\n      result.current.add(4);\n    });\n\n    expect(result.current.set).not.toBe(initialValue);\n  });\n\n  test('remove must be immutable', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    act(() => {\n      result.current.remove(1);\n    });\n\n    expect(result.current.set).not.toBe(initialValue);\n  });\n\n  test('toggle must be immutable', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    act(() => {\n      result.current.toggle(1);\n    });\n\n    expect(result.current.set).not.toBe(initialValue);\n  });\n\n  test('reset must reset to the initial set object', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.set).toBe(initialValue);\n  });\n\n  test('clear must be immutable', () => {\n    const initialValue = new Set([1, 2, 3]);\n\n    const { result } = renderHook(() => useSet(initialValue));\n\n    act(() => {\n      result.current.clear();\n    });\n\n    expect(result.current.set).not.toBe(initialValue);\n  });\n});\n",
    "/src/use-set.ts": "import { useCallback, useState } from 'react';\n\nexport interface UseSetReturn<T> {\n  set: Readonly<Set<T>>;\n  add: (key: T) => void;\n  remove: (key: T) => void;\n  toggle: (key: T) => void;\n  reset: () => void;\n  clear: () => void;\n}\n\nexport default function useSet<T>(\n  initialState = new Set<T>(),\n): UseSetReturn<T> {\n  const [set, setSet] = useState(initialState);\n\n  const add: UseSetReturn<T>['add'] = useCallback(\n    (item: T) => setSet((prev) => new Set([...Array.from(prev), item])),\n    [],\n  );\n\n  const remove: UseSetReturn<T>['remove'] = useCallback(\n    (item: T) =>\n      setSet((prev) => new Set(Array.from(prev).filter((i) => i !== item))),\n    [],\n  );\n\n  const toggle: UseSetReturn<T>['toggle'] = useCallback(\n    (item: T) =>\n      setSet((prev) =>\n        prev.has(item)\n          ? new Set(Array.from(prev).filter((i) => i !== item))\n          : new Set([...Array.from(prev), item]),\n      ),\n    [],\n  );\n\n  const reset: UseSetReturn<T>['reset'] = useCallback(\n    () => setSet(initialState),\n    [initialState],\n  );\n\n  const clear: UseSetReturn<T>['clear'] = useCallback(\n    () => setSet(new Set()),\n    [],\n  );\n\n  return { set, add, remove, toggle, reset, clear };\n}\n"
  },
  "metadata": {
    "access": "standard",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that manages a JavaScript set",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-set"
      }
    ],
    "href": "/questions/javascript/use-set",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-array",
      "use-map",
      "use-object"
    ],
    "slug": "use-set",
    "subtitle": null,
    "title": "useSet",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {Set<T>} initialState\n */\nexport default function useSet(initialState = new Set()) {\n  throw 'Not implemented';\n}",
    "ts": "export interface UseSetReturn<T> {\n  set: Readonly<Set<T>>;\n  add: (key: T) => void;\n  remove: (key: T) => void;\n  toggle: (key: T) => void;\n  reset: () => void;\n  clear: () => void;\n}\n\nexport default function useSet<T>(\n  initialState = new Set<T>(),\n): UseSetReturn<T> {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var r in e)o(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!g.call(n,i)&&i!==r&&o(n,i,{get:()=>e[i],enumerable:!(a=S(e,i))||a.enumerable});return n};var w=(n,e,r)=>(r=n!=null?u(f(n)):{},c(e||!n||!n.__esModule?o(r,\"default\",{value:n,enumerable:!0}):r,n)),b=n=>c(o({},\"__esModule\",{value:!0}),n);var s=y((j,l)=>{l.exports=_jsx_runtime});var C={};v(C,{default:()=>x});var t=w(s());var d=MDXCodeBlock;var h=`import { useCallback, useState } from 'react';\n\nexport interface UseSetReturn<T> {\n  set: Readonly<Set<T>>;\n  add: (key: T) => void;\n  remove: (key: T) => void;\n  toggle: (key: T) => void;\n  reset: () => void;\n  clear: () => void;\n}\n\nexport default function useSet<T>(\n  initialState = new Set<T>(),\n): UseSetReturn<T> {\n  const [set, setSet] = useState(initialState);\n\n  const add: UseSetReturn<T>['add'] = useCallback(\n    (item: T) => setSet((prev) => new Set([...Array.from(prev), item])),\n    [],\n  );\n\n  const remove: UseSetReturn<T>['remove'] = useCallback(\n    (item: T) =>\n      setSet((prev) => new Set(Array.from(prev).filter((i) => i !== item))),\n    [],\n  );\n\n  const toggle: UseSetReturn<T>['toggle'] = useCallback(\n    (item: T) =>\n      setSet((prev) =>\n        prev.has(item)\n          ? new Set(Array.from(prev).filter((i) => i !== item))\n          : new Set([...Array.from(prev), item]),\n      ),\n    [],\n  );\n\n  const reset: UseSetReturn<T>['reset'] = useCallback(\n    () => setSet(initialState),\n    [initialState],\n  );\n\n  const clear: UseSetReturn<T>['clear'] = useCallback(\n    () => setSet(new Set()),\n    [],\n  );\n\n  return { set, add, remove, toggle, reset, clear };\n}\n`;function m(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\",strong:\"strong\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useSet\"}),\" hook can be implemented by storing a \",(0,t.jsx)(e.code,{children:\"Set\"}),\" in a \",(0,t.jsx)(e.code,{children:\"useState\"}),\" state and defining the utility methods to manipulate the \",(0,t.jsx)(e.code,{children:\"Set\"}),\" in terms of the state's setter function with JavaScript's built-in \",(0,t.jsx)(e.code,{children:\"Set\"}),\" methods.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Remember to wrap the utility methods in \",(0,t.jsx)(e.code,{children:\"useCallback\"}),\" to prevent unnecessary re-renders of the calling component.\"]}),`\n`,(0,t.jsx)(d,{children:h}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since \",(0,t.jsx)(e.code,{children:\"Set\"}),\"s are mutable, when defining the utility methods, ensure that whatever mutations that happened will cause the calling component to re-render. This ensures that the component is always in sync with the current state of the \",(0,t.jsx)(e.code,{children:\"Set\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"There are many ways to achieve this, including,\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"creating a new \",(0,t.jsx)(e.code,{children:\"Set\"}),\" instance with the modified values,\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"doing a shallow copy of the \",(0,t.jsx)(e.code,{children:\"Set\"}),\" before modifying it,\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"manually triggering a re-render after modifying the \",(0,t.jsx)(e.code,{children:\"Set\"}),' with some \"throwaway\" ',(0,t.jsx)(e.code,{children:\"useState\"}),\" state, or\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"using a library like \",(0,t.jsx)(e.a,{href:\"https://immerjs.github.io/immer/\",children:\"Immer\"}),\" to mutate the set immutably for you.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": We don't really need to deep copy the \",(0,t.jsx)(e.code,{children:\"Set\"}),\" and care about the (im)mutability of the values in the \",(0,t.jsx)(e.code,{children:\"Set\"}),\" since we are only concerned about the correctness of the component currently mounted in the DOM in terms of the \",(0,t.jsx)(e.code,{children:\"Set\"}),\".\"]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)}var x=k;return b(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-set.ts",
    "run": "/src/use-set.run.test.ts",
    "submit": "/src/use-set.submit.test.ts"
  }
}