{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/cycle\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/cycle.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/cycle.run.test.ts": "import cycle from './cycle';\n\ndescribe('cycle', () => {\n  test('returns function', () => {\n    const fooFn = cycle('foo');\n    expect(fooFn).toBeInstanceOf(Function);\n  });\n\n  test('single item', () => {\n    const helloFn = cycle('hello');\n    expect(helloFn()).toBe('hello');\n  });\n\n  test('two values', () => {\n    const onOffFn = cycle('on', 'off');\n    expect(onOffFn()).toBe('on');\n    expect(onOffFn()).toBe('off');\n  });\n});\n",
    "/src/cycle.submit.test.ts": "import cycle from './cycle';\n\ndescribe('cycle', () => {\n  test('returns function', () => {\n    const fooFn = cycle('foo');\n    expect(fooFn).toBeInstanceOf(Function);\n  });\n\n  test('single item', () => {\n    const helloFn = cycle('hello');\n    expect(helloFn()).toBe('hello');\n  });\n\n  test('two values', () => {\n    const onOffFn = cycle('on', 'off');\n    expect(onOffFn()).toBe('on');\n    expect(onOffFn()).toBe('off');\n  });\n\n  test('three values', () => {\n    const speedFn = cycle('slow', 'medium', 'fast');\n    expect(speedFn()).toBe('slow');\n    expect(speedFn()).toBe('medium');\n    expect(speedFn()).toBe('fast');\n  });\n\n  test('wraps around', () => {\n    const speedFn = cycle('slow', 'medium', 'fast');\n    expect(speedFn()).toBe('slow');\n    expect(speedFn()).toBe('medium');\n    expect(speedFn()).toBe('fast');\n    expect(speedFn()).toBe('slow');\n    expect(speedFn()).toBe('medium');\n    expect(speedFn()).toBe('fast');\n  });\n});\n",
    "/src/cycle.ts": "export default function cycle<T>(...values: Array<T>): () => T {\n  let index = 0;\n\n  return () => {\n    const currentValue = values[index];\n    index = (index + 1) % values.length;\n    return currentValue;\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param  {...T} values\n *\n * @returns () => T\n */\nexport default function cycle(...values) {\n  throw 'Not implemented';\n}",
    "ts": "export default function cycle<T>(...values: Array<T>): () => T {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/cycle.ts",
    "run": "/src/cycle.run.test.ts",
    "submit": "/src/cycle.submit.test.ts"
  }
}