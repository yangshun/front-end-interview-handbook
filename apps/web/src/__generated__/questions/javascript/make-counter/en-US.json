{
  "description": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},i=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!f.call(n,a)&&a!==r&&c(n,a,{get:()=>e[a],enumerable:!(o=h(e,a))||o.enumerable});return n};var j=(n,e,r)=>(r=n!=null?d(m(n)):{},i(e||!n||!n.__esModule?c(r,\"default\",{value:n,enumerable:!0}):r,n)),v=n=>i(c({},\"__esModule\",{value:!0}),n);var l=g((M,u)=>{u.exports=_jsx_runtime});var k={};x(k,{default:()=>b,frontmatter:()=>_});var t=j(l()),_={title:\"Make Counter\",excerpt:\"Implement a function that accepts an integer value and returns a function that can be repeatedly called to return increasing values\"};function s(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a function \",(0,t.jsx)(e.code,{children:\"makeCounter\"}),\" that accepts an optional integer value and returns a function. When the returned function is called initially, it returns the initial value if provided, otherwise 0. The returned function can be called repeatedly to return 1 more than the return value of the previous invocation.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const counter = makeCounter();\ncounter(); // 0\ncounter(); // 1\ncounter(); // 2\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"With a custom initial value:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const counter = makeCounter(5);\ncounter(); // 5\ncounter(); // 6\ncounter(); // 7\n`})})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s(n)}var b=C;return v(k);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/make-counter\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/make-counter.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/make-counter.run.test.ts": "import makeCounter from './make-counter';\n\ndescribe('makeCounter', () => {\n  test('returns a function', () => {\n    const counter = makeCounter();\n    expect(counter).toBeInstanceOf(Function);\n  });\n\n  test('return default value', () => {\n    const counter = makeCounter();\n    expect(counter()).toBe(0);\n  });\n\n  test('increments', () => {\n    const counter = makeCounter();\n    expect(counter()).toBe(0);\n    expect(counter()).toBe(1);\n    expect(counter()).toBe(2);\n  });\n});\n",
    "/src/make-counter.submit.test.ts": "import makeCounter from './make-counter';\n\ndescribe('makeCounter', () => {\n  test('returns a function', () => {\n    const counter = makeCounter();\n    expect(counter).toBeInstanceOf(Function);\n  });\n\n  describe('calling the function', () => {\n    describe('returns initial value', () => {\n      test('default', () => {\n        const counter = makeCounter();\n        expect(counter()).toBe(0);\n      });\n\n      test('custom', () => {\n        const counter = makeCounter(4);\n        expect(counter()).toBe(4);\n      });\n    });\n\n    describe('can be repeatedly called', () => {\n      test('default', () => {\n        const counter = makeCounter();\n        expect(counter()).toBe(0);\n        expect(counter()).toBe(1);\n        expect(counter()).toBe(2);\n      });\n\n      test('positive', () => {\n        const counter = makeCounter(4);\n        expect(counter()).toBe(4);\n        expect(counter()).toBe(5);\n        expect(counter()).toBe(6);\n      });\n\n      test('negative', () => {\n        const counter = makeCounter(-4);\n        expect(counter()).toBe(-4);\n        expect(counter()).toBe(-3);\n        expect(counter()).toBe(-2);\n      });\n    });\n\n    test('isolated instances', () => {\n      const counterA = makeCounter(5);\n      const counterB = makeCounter(10);\n\n      expect(counterA()).toBe(5);\n      expect(counterB()).toBe(10);\n\n      expect(counterA()).toBe(6);\n      expect(counterB()).toBe(11);\n    });\n  });\n});\n",
    "/src/make-counter.ts": "export default function makeCounter(initialValue: number = 0): () => number {\n  let count = initialValue - 1;\n\n  return () => {\n    count += 1;\n    return count;\n  };\n}\n"
  },
  "info": {
    "excerpt": "Implement a function that accepts an integer value and returns a function that can be repeatedly called to return increasing values",
    "title": "Make Counter"
  },
  "metadata": {
    "access": "standard",
    "author": null,
    "companies": [
      "amazon"
    ],
    "created": 1683331200,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/make-counter",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "make-counter-ii"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "counter"
    ],
    "slug": "make-counter",
    "subtitle": null,
    "topics": [
      "closure"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {number} initialValue\n * @return {Function}\n */\nexport default function makeCounter(initialValue = 0) {\n  throw 'Not implemented';\n}",
    "ts": "export default function makeCounter(initialValue: number = 0): () => number {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var b=Object.create;var o=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},u=(t,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of v(e))!V.call(t,i)&&i!==r&&o(t,i,{get:()=>e[i],enumerable:!(l=k(e,i))||l.enumerable});return t};var j=(t,e,r)=>(r=t!=null?b(C(t)):{},u(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),M=t=>u(o({},\"__esModule\",{value:!0}),t);var s=w((X,c)=>{c.exports=_jsx_runtime});var J={};y(J,{default:()=>z});var n=j(s());var a=MDXCodeBlock;var d=`/**\n * @param {number} initialValue\n * @return {Function}\n */\nexport default function makeCounter(initialValue = 0) {\n  let count = initialValue - 1;\n\n  return () => {\n    count += 1;\n    return count;\n  };\n}\n`;var h=`export default function makeCounter(initialValue: number = 0): () => number {\n  let count = initialValue - 1;\n\n  return () => {\n    count += 1;\n    return count;\n  };\n}\n`;var m=`/**\n * @param {number} initialValue\n * @return {Function}\n */\nexport default function makeCounter(initialValue = 0) {\n  let count = initialValue;\n\n  return () => {\n    return count++;\n  };\n}\n`;var f=`export default function makeCounter(initialValue = 0): () => number {\n  let count = initialValue;\n\n  return () => {\n    return count++;\n  };\n}\n`;var p=`/**\n * @param {number} value\n * @return {Function}\n */\nexport default function makeCounter(value = 0) {\n  return () => value++;\n}\n`;var x=`export default function makeCounter(value = 0): () => number {\n  return () => value++;\n}\n`;function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ol:\"ol\",li:\"li\",code:\"code\",strong:\"strong\",ul:\"ul\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"This question evaluates your knowledge on closures and higher-order functions.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Approach 1: Decrement then postfix increment\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" function accepts an optional parameter \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\", which is set to 0 by default.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Inside the \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" function, we declare a variable \",(0,n.jsx)(e.code,{children:\"count\"}),\" and initialize it with \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\" - 1. We have to declare using \",(0,n.jsx)(e.code,{children:\"let\"}),\" since we need to increment it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"We return an anonymous function (a closure) that captures the \",(0,n.jsx)(e.code,{children:\"count\"}),\" variable from the outer scope.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Whenever the returned function is called, we increment \",(0,n.jsx)(e.code,{children:\"count\"}),\" then return it.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It's necessary to initialize \",(0,n.jsx)(e.code,{children:\"count\"}),\" with one less than \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\" because in the returned function we increment before returning. Doing this will allow the first call of the returned function to return the \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\".\"]}),`\n`,(0,n.jsx)(a,{languages:{jsx:d,tsx:h}}),`\n`,(0,n.jsx)(e.h3,{children:\"Approach 2: Postfix increment\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the previous solution, it is a little awkward to decrement \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\" by 1 only to increment it later. Thankfully we can use the postfix increment operator to increment a variable \",(0,n.jsx)(e.strong,{children:\"after\"}),\" the value has been returned.\"]}),`\n`,(0,n.jsx)(a,{languages:{jsx:m,tsx:f}}),`\n`,(0,n.jsx)(e.h3,{children:\"Approach 3: One-liner\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can make the solution even shorter by not initializing a \",(0,n.jsx)(e.code,{children:\"count\"}),\" variable and incrementing the \",(0,n.jsx)(e.code,{children:\"defaultValue\"}),\" instead. Mutating a function's parameters is usually not recommended due to causing of side effects. However in this case \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\" is a primitive and incrementing it will not cause any side effects.\"]}),`\n`,(0,n.jsx)(a,{languages:{jsx:p,tsx:x}}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment\",children:\"Increment (++) | MDN\"})}),`\n`]})]})}function W(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var z=W;return M(J);})();\n;return Component;",
  "workspace": {
    "main": "/src/make-counter.ts",
    "run": "/src/make-counter.run.test.ts",
    "submit": "/src/make-counter.submit.test.ts"
  }
}