{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/make-counter\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/make-counter.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/make-counter.run.test.ts": "import makeCounter from './make-counter';\n\ndescribe('makeCounter', () => {\n  test('returns a function', () => {\n    const counter = makeCounter();\n    expect(counter).toBeInstanceOf(Function);\n  });\n\n  test('return default value', () => {\n    const counter = makeCounter();\n    expect(counter()).toBe(0);\n  });\n\n  test('increments', () => {\n    const counter = makeCounter();\n    expect(counter()).toBe(0);\n    expect(counter()).toBe(1);\n    expect(counter()).toBe(2);\n  });\n});\n",
    "/src/make-counter.submit.test.ts": "import makeCounter from './make-counter';\n\ndescribe('makeCounter', () => {\n  test('returns a function', () => {\n    const counter = makeCounter();\n    expect(counter).toBeInstanceOf(Function);\n  });\n\n  describe('calling the function', () => {\n    describe('returns initial value', () => {\n      test('default', () => {\n        const counter = makeCounter();\n        expect(counter()).toBe(0);\n      });\n\n      test('custom', () => {\n        const counter = makeCounter(4);\n        expect(counter()).toBe(4);\n      });\n    });\n\n    describe('can be repeatedly called', () => {\n      test('default', () => {\n        const counter = makeCounter();\n        expect(counter()).toBe(0);\n        expect(counter()).toBe(1);\n        expect(counter()).toBe(2);\n      });\n\n      test('positive', () => {\n        const counter = makeCounter(4);\n        expect(counter()).toBe(4);\n        expect(counter()).toBe(5);\n        expect(counter()).toBe(6);\n      });\n\n      test('negative', () => {\n        const counter = makeCounter(-4);\n        expect(counter()).toBe(-4);\n        expect(counter()).toBe(-3);\n        expect(counter()).toBe(-2);\n      });\n    });\n\n    test('isolated instances', () => {\n      const counterA = makeCounter(5);\n      const counterB = makeCounter(10);\n\n      expect(counterA()).toBe(5);\n      expect(counterB()).toBe(10);\n\n      expect(counterA()).toBe(6);\n      expect(counterB()).toBe(11);\n    });\n  });\n});\n",
    "/src/make-counter.ts": "export default function makeCounter(initialValue: number = 0): () => number {\n  let count = initialValue - 1;\n\n  return () => {\n    count += 1;\n    return count;\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} initialValue\n * @return {Function}\n */\nexport default function makeCounter(initialValue = 0) {\n  throw 'Not implemented';\n}",
    "ts": "export default function makeCounter(initialValue: number = 0): () => number {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/make-counter.ts",
    "run": "/src/make-counter.run.test.ts",
    "submit": "/src/make-counter.submit.test.ts"
  }
}