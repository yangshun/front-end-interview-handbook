{
  "description": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!g.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(o=u(e,i))||o.enumerable});return n};var f=(n,e,r)=>(r=n!=null?h(p(n)):{},s(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),y=n=>s(a({},\"__esModule\",{value:!0}),n);var d=x((q,c)=>{c.exports=_jsx_runtime});var v={};b(v,{default:()=>j,frontmatter:()=>M});var t=f(d()),M={title:\"useMediaQuery\",excerpt:\"Implement a hook that subscribes and responds to media query changes (e.g. screen size, resolution, orientation, etc.)\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useMediaQuery\"}),\" hook that subscribes and responds to media query changes (e.g. screen size, resolution, orientation, etc.).\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const isSmallDevice = useMediaQuery('only screen and (max-width: 768px)');\n\n  return <div>{isSmallDevice && <a href=\"#\">Menu</a>}</div>;\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Hint: The \",(0,t.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\",children:[(0,t.jsx)(e.code,{children:\"window.matchMedia\"}),\" API\"]}),\" would be helpful.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"query: string\"}),\": The media query to match. It must be a \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\",children:\"valid CSS media query string\"})]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The hook returns a boolean value that indicates whether the media query is a match.\"})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var j=_;return y(v);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that subscribes and responds to media query changes (e.g. screen size, resolution, orientation, etc.)",
    "title": "useMediaQuery"
  },
  "solution": "var Component=(()=>{var y=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),M=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!b.call(n,a)&&a!==r&&c(n,a,{get:()=>e[a],enumerable:!(o=p(e,a))||o.enumerable});return n};var v=(n,e,r)=>(r=n!=null?y(g(n)):{},s(e||!n||!n.__esModule?c(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>s(c({},\"__esModule\",{value:!0}),n);var h=w((j,d)=>{d.exports=_jsx_runtime});var k={};M(k,{default:()=>Q});var t=v(h());var i=MDXCodeBlock;var l=`import { useEffect, useState } from 'react';\n\nexport default function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(\n    () => window.matchMedia(query).matches,\n  );\n\n  useEffect(() => {\n    const mediaQueryList = window.matchMedia(query);\n\n    function updateMatch() {\n      setMatches(mediaQueryList.matches);\n    }\n\n    mediaQueryList.addEventListener('change', updateMatch);\n\n    return () => {\n      mediaQueryList.removeEventListener('change', updateMatch);\n    };\n  }, [query]);\n\n  return matches;\n}\n`;var u=`import { useCallback, useSyncExternalStore } from 'react';\n\nexport default function useMediaQuery(query: string): boolean {\n  const subscribe = useCallback(\n    (callback: () => void) => {\n      const mediaQueryList = window.matchMedia(query);\n\n      mediaQueryList.addEventListener('change', callback);\n\n      return () => {\n        mediaQueryList.removeEventListener('change', callback);\n      };\n    },\n    [query],\n  );\n\n  return useSyncExternalStore(\n    subscribe,\n    () => window.matchMedia(query).matches,\n  );\n}\n`;function m(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ol:\"ol\",li:\"li\",pre:\"pre\",h3:\"h3\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"window.matchMedia(query)\"}),\" is a JavaScript method that checks if the document matches a given CSS media query. It returns a \",(0,t.jsx)(e.code,{children:\"MediaQueryList\"}),\" object, which provides:\"]}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\".matches\"}),\" (boolean): Indicates whether the document currently matches the media query\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'.addEventListener(\"change\", callback)'}),\": Listens for changes in the media query\\u2019s match state\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'.removeEventListener(\"change\", callback)'}),\": Removes the event listener when it\\u2019s no longer needed\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const mediaQuery = window.matchMedia('(max-width: 768px)');\n\nif (mediaQuery.matches) {\n  console.log('Viewport is 768px or smaller');\n}\n\nmediaQuery.addEventListener('change', (e) => {\n  console.log(e.matches ? 'Now small screen' : 'Now large screen');\n});\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useMediaQuery\"}),\" is a hook that allows a React app to leverage this browser API and respond to media changes (e.g. screen size, resolution, orientation, and more).\"]}),`\n`,(0,t.jsxs)(e.h3,{children:[\"Approach 1: \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" and \",(0,t.jsx)(e.code,{children:\"useState\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useMediaQuery\"}),\" hook can be implemented using the \",(0,t.jsx)(e.code,{children:\"useState\"}),\" hook to store the current media query match and the \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" hook to update the match when the media query changes. We can attach a listener to the \",(0,t.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/change_event\",children:[(0,t.jsx)(e.code,{children:\"change\"}),\" event\"]}),\" on the \",(0,t.jsx)(e.code,{children:\"MediaQueryList\"}),\" object returned by \",(0,t.jsx)(e.code,{children:\"window.matchMedia(...)\"}),\" to update the match state.\"]}),`\n`,(0,t.jsx)(i,{children:l}),`\n`,(0,t.jsxs)(e.h3,{children:[\"Approach 2: \",(0,t.jsx)(e.code,{children:\"useSyncExternalStore\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"React's \",(0,t.jsx)(e.a,{href:\"https://react.dev/reference/react/useSyncExternalStore\",children:(0,t.jsx)(e.code,{children:\"useSyncExternalStore\"})}),\" hook is a better fit as it is meant for syncing React state with external systems, such as \",(0,t.jsx)(e.a,{href:\"https://react.dev/reference/react/useSyncExternalStore#subscribing-to-a-browser-api\",children:\"subscribing to native browser APIs\"}),\".\"]}),`\n`,(0,t.jsx)(i,{children:u})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)}var Q=L;return x(k);})();\n;return Component;"
}