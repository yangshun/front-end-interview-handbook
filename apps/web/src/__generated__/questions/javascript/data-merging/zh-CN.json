{
  "description": "var Component=(()=>{var a=Object.create;var l=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),q=(r,e)=>{for(var i in e)l(r,i,{get:e[i],enumerable:!0})},c=(r,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!b.call(r,t)&&t!==i&&l(r,t,{get:()=>e[t],enumerable:!(d=h(e,t))||d.enumerable});return r};var x=(r,e,i)=>(i=r!=null?a(p(r)):{},c(e||!r||!r.__esModule?l(i,\"default\",{value:r,enumerable:!0}):i,r)),j=r=>c(l({},\"__esModule\",{value:!0}),r);var s=g((C,u)=>{u.exports=_jsx_runtime});var f={};q(f,{default:()=>D,frontmatter:()=>k});var n=x(s()),k={title:\"\\u6570\\u636E\\u5408\\u5E76\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u51FD\\u6570\\uFF0C\\u7528\\u4E8E\\u5408\\u5E76\\u6765\\u81EA\\u540C\\u4E00\\u7528\\u6237\\u7684\\u6570\\u636E\\u884C\"};function o(r){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",h2:\"h2\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"\\u4E00\\u7EC4\\u5065\\u8EAB\\u8BFE\\u7A0B\\u7684\\u6570\\u636E\\u96C6\\u5982\\u4E0B\\u6240\\u793A\\uFF1A\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`[\n  { user: 8, duration: 50, equipment: ['bench'] },\n  { user: 7, duration: 150, equipment: ['dumbbell'] },\n  { user: 1, duration: 10, equipment: ['barbell'] },\n  { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n  { user: 7, duration: 200, equipment: ['bike'] },\n  { user: 2, duration: 200, equipment: ['treadmill'] },\n  { user: 2, duration: 200, equipment: ['bike'] },\n];\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"\\u6BCF\\u4E2A\\u8BFE\\u7A0B\\u90FD\\u6709\\u4EE5\\u4E0B\\u5B57\\u6BB5\\uFF1A\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"user\"}),\"\\uFF1A\\u8BFE\\u7A0B\\u7528\\u6237\\u7684\\u7528\\u6237 ID\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"duration\"}),\"\\uFF1A\\u8BFE\\u7A0B\\u7684\\u6301\\u7EED\\u65F6\\u95F4\\uFF0C\\u4EE5\\u5206\\u949F\\u4E3A\\u5355\\u4F4D\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"equipment\"}),\"\\uFF1A\\u8BFE\\u7A0B\\u671F\\u95F4\\u4F7F\\u7528\\u7684\\u8BBE\\u5907\\u6570\\u7EC4\\uFF0C\\u6309\\u5B57\\u6BCD\\u987A\\u5E8F\\u6392\\u5217\\u3002\\u53EA\\u6709 5 \\u79CD\\u4E0D\\u540C\\u7684\\u8BBE\\u5907\\u3002\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u65B9\\u6CD5 \",(0,n.jsx)(e.code,{children:\"mergeData\"}),\"\\uFF0C\\u7528\\u4E8E\\u901A\\u8FC7\\u5408\\u5E76\\u6BCF\\u4E2A\\u7528\\u6237\\u7684\\u6570\\u636E\\u6765\\u8FD4\\u56DE\\u6BCF\\u4E2A\\u7528\\u6237\\u6D3B\\u52A8\\u7684\\u7EDF\\u4E00\\u89C6\\u56FE\\u3002\\u5B83\\u5177\\u6709\\u63A5\\u53E3 \",(0,n.jsx)(e.code,{children:\"mergeData(sessions)\"}),\"\\u3002\\u6765\\u81EA\\u540C\\u4E00 \",(0,n.jsx)(e.code,{children:\"user\"}),\" \\u7684\\u4F1A\\u8BDD\\u5E94\\u5408\\u5E76\\u5230\\u4E00\\u4E2A\\u5BF9\\u8C61\\u4E2D\\u3002\\u5408\\u5E76\\u65F6\\uFF1A\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u6C47\\u603B \",(0,n.jsx)(e.code,{children:\"duration\"}),\" \\u5B57\\u6BB5\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u7EC4\\u5408\\u6240\\u6709\\u4F7F\\u7528\\u7684 \",(0,n.jsx)(e.code,{children:\"equipment\"}),\"\\uFF0C\\u5BF9\\u503C\\u8FDB\\u884C\\u53BB\\u91CD\\u5E76\\u6309\\u5B57\\u6BCD\\u987A\\u5E8F\\u6392\\u5E8F\\u3002\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u7ED3\\u679C\\u7684\\u987A\\u5E8F\\u5E94\\u59CB\\u7EC8\\u4E0E\\u539F\\u59CB\\u96C6\\u5408\\u4FDD\\u6301\\u4E0D\\u53D8\\uFF0C\\u5E76\\u4E14\\u5728\\u5408\\u5E76\\u5177\\u6709\\u76F8\\u540C\\u7528\\u6237\\u7684\\u4F1A\\u8BDD\\u7684\\u60C5\\u51B5\\u4E0B\\uFF0C\\u8BE5\\u884C\\u5E94\\u5360\\u636E\\u8BE5 \",(0,n.jsx)(e.code,{children:\"user\"}),\" \\u7684\",(0,n.jsx)(e.strong,{children:\"\\u6700\\u65E9\"}),\"\\u51FA\\u73B0\\u7684\\u4F4D\\u7F6E\\u3002\\u8F93\\u5165\\u5BF9\\u8C61\\u4E0D\\u5E94\\u88AB\\u4FEE\\u6539\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u793A\\u4F8B\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u4EE5\\u4E0B\\u793A\\u4F8B\\u4F7F\\u7528\\u4E0A\\u8FF0\\u6570\\u636E\\u96C6\\uFF1A\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`mergeData(sessions);\n// [\n//   { user: 8, duration: 50, equipment: ['bench'] },\n//   { user: 7, duration: 450, equipment: ['bike', 'dumbbell', 'kettlebell'] },\n//   { user: 1, duration: 10, equipment: ['barbell'] },\n//   { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n// ];\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"\\u7528\\u6237 7 \\u548C\\u7528\\u6237 2 \\u7684\\u6570\\u636E\\u5408\\u5E76\\u5230\\u8BE5\\u7528\\u6237\\u7684\\u7B2C\\u4E00\\u6B21\\u51FA\\u73B0\\u3002\"})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(o,r)})):o(r)}var D=_;return j(f);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/data-merging\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/data-merging.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/data-merging.run.test.ts": "import mergeData from './data-merging';\n\ndescribe('mergeData', () => {\n  test('empty data', () => {\n    expect(mergeData([])).toEqual([]);\n  });\n\n  test('merge for one user', () => {\n    expect(\n      mergeData([\n        { user: 1, duration: 10, equipment: ['barbell'] },\n        { user: 1, duration: 30, equipment: [] },\n      ]),\n    ).toEqual([{ user: 1, duration: 40, equipment: ['barbell'] }]);\n  });\n\n  test('merge for two users', () => {\n    expect(\n      mergeData([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['bench', 'kettlebell'] },\n      ]),\n    ).toEqual([\n      { user: 8, duration: 100, equipment: ['bench'] },\n      {\n        user: 7,\n        duration: 300,\n        equipment: ['bench', 'dumbbell', 'kettlebell'],\n      },\n    ]);\n  });\n});\n",
    "/src/data-merging.submit.test.ts": "import mergeData from './data-merging';\n\nfunction dataSmall() {\n  return [\n    { user: 8, duration: 50, equipment: ['bench'] },\n    { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n    { user: 1, duration: 10, equipment: ['barbell'] },\n    { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n    { user: 7, duration: 200, equipment: ['bike'] },\n    { user: 2, duration: 200, equipment: ['treadmill'] },\n    { user: 2, duration: 200, equipment: ['bike'] },\n  ];\n}\n\ndescribe('mergeData', () => {\n  test('empty data', () => {\n    expect(mergeData([])).toEqual([]);\n  });\n\n  test('does not mutate data', () => {\n    const clonedData = dataSmall();\n    mergeData(clonedData);\n    expect(clonedData).toEqual(dataSmall());\n  });\n\n  describe('one user', () => {\n    test('single session', () => {\n      expect(\n        mergeData([{ user: 1, duration: 10, equipment: ['barbell'] }]),\n      ).toEqual([{ user: 1, duration: 10, equipment: ['barbell'] }]);\n    });\n\n    test('merge duration', () => {\n      expect(\n        mergeData([\n          { user: 1, duration: 10, equipment: ['barbell'] },\n          { user: 1, duration: 30, equipment: [] },\n        ]),\n      ).toEqual([{ user: 1, duration: 40, equipment: ['barbell'] }]);\n    });\n\n    test('merge equipment', () => {\n      expect(\n        mergeData([\n          { user: 1, duration: 10, equipment: ['bike'] },\n          { user: 1, duration: 30, equipment: ['barbell'] },\n        ]),\n      ).toEqual([{ user: 1, duration: 40, equipment: ['barbell', 'bike'] }]);\n    });\n\n    test('multiple sessions', () => {\n      expect(\n        mergeData([\n          { user: 1, duration: 10, equipment: ['bike'] },\n          { user: 1, duration: 30, equipment: ['barbell'] },\n        ]),\n      ).toEqual([{ user: 1, duration: 40, equipment: ['barbell', 'bike'] }]);\n    });\n  });\n\n  describe('multiple users', () => {\n    test('unique users', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      ]);\n    });\n\n    test('merge duration', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 100, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      ]);\n    });\n\n    test('merge equipment', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench', 'dumbbell'] },\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 100, equipment: ['bench', 'dumbbell'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      ]);\n    });\n\n    test('preserves order', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench', 'dumbbell'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 6, duration: 50, equipment: ['kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 100, equipment: ['bench', 'dumbbell'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 6, duration: 50, equipment: ['kettlebell'] },\n      ]);\n    });\n\n    test('integration', () => {\n      expect(mergeData(dataSmall())).toEqual([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 1, duration: 10, equipment: ['barbell'] },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n    });\n  });\n});\n",
    "/src/data-merging.ts": "type Session = { user: number; duration: number; equipment: Array<string> };\n\nexport default function mergeData(sessions: Array<Session>): Array<Session> {\n  const results: Array<{\n    user: number;\n    duration: number;\n    equipment: Set<string>;\n  }> = [];\n  const sessionsForUser = new Map();\n\n  sessions.forEach((session) => {\n    if (sessionsForUser.has(session.user)) {\n      const userSession = sessionsForUser.get(session.user);\n      userSession.duration += session.duration;\n      session.equipment.forEach((equipment) => {\n        userSession.equipment.add(equipment);\n      });\n    } else {\n      const clonedSession = {\n        ...session,\n        equipment: new Set(session.equipment),\n      };\n      sessionsForUser.set(session.user, clonedSession);\n      results.push(clonedSession);\n    }\n  });\n\n  // Sort equipment of each session and convert back into array.\n  return results.map((session) => ({\n    ...session,\n    equipment: Array.from(session.equipment).sort(),\n  }));\n}\n"
  },
  "metadata": {
    "access": "standard",
    "author": null,
    "companies": [
      "soundcloud",
      "stripe"
    ],
    "created": 1690675200,
    "difficulty": "medium",
    "duration": 20,
    "excerpt": "实现一个函数，用于合并来自同一用户的数据行",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/data-merging",
    "importance": "high",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "unique-array",
      "data-selection"
    ],
    "slug": "data-merging",
    "subtitle": null,
    "title": "数据合并",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array<{user: number, duration: number, equipment: Array<string>}>} sessions\n * @return {Array}\n */\nexport default function mergeData(sessions) {\n  throw 'Not implemented!';\n}",
    "ts": "type Session = { user: number; duration: number; equipment: Array<string> };\n\nexport default function mergeData(sessions: Array<Session>): Array<Session> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of S(e))!b.call(n,o)&&o!==r&&i(n,o,{get:()=>e[o],enumerable:!(t=q(e,o))||t.enumerable});return n};var x=(n,e,r)=>(r=n!=null?h(f(n)):{},c(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),F=n=>c(i({},\"__esModule\",{value:!0}),n);var d=g((O,u)=>{u.exports=_jsx_runtime});var M={};y(M,{default:()=>D});var s=x(d());var a=MDXCodeBlock;var l=`/**\n * @param {Array<{user: number, duration: number, equipment: Array<string>}>} sessions\n * @return {Array<{user: number, duration: number, equipment: Array<string>}>}\n */\nexport default function mergeData(sessions) {\n  const results = [];\n  const sessionsForUser = new Map();\n\n  sessions.forEach((session) => {\n    if (sessionsForUser.has(session.user)) {\n      const userSession = sessionsForUser.get(session.user);\n      userSession.duration += session.duration;\n      session.equipment.forEach((equipment) => {\n        userSession.equipment.add(equipment);\n      });\n    } else {\n      const clonedSession = {\n        ...session,\n        equipment: new Set(session.equipment),\n      };\n      sessionsForUser.set(session.user, clonedSession);\n      results.push(clonedSession);\n    }\n  });\n\n  // Sort equipment of each session and convert back into array.\n  return results.map((session) => ({\n    ...session,\n    equipment: Array.from(session.equipment).sort(),\n  }));\n}\n`;var m=`type Session = { user: number; duration: number; equipment: Array<string> };\n\nexport default function mergeData(sessions: Array<Session>): Array<Session> {\n  const results: Array<{\n    user: number;\n    duration: number;\n    equipment: Set<string>;\n  }> = [];\n  const sessionsForUser = new Map();\n\n  sessions.forEach((session) => {\n    if (sessionsForUser.has(session.user)) {\n      const userSession = sessionsForUser.get(session.user);\n      userSession.duration += session.duration;\n      session.equipment.forEach((equipment) => {\n        userSession.equipment.add(equipment);\n      });\n    } else {\n      const clonedSession = {\n        ...session,\n        equipment: new Set(session.equipment),\n      };\n      sessionsForUser.set(session.user, clonedSession);\n      results.push(clonedSession);\n    }\n  });\n\n  // Sort equipment of each session and convert back into array.\n  return results.map((session) => ({\n    ...session,\n    equipment: Array.from(session.equipment).sort(),\n  }));\n}\n`;function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",blockquote:\"blockquote\",ol:\"ol\",li:\"li\",ul:\"ul\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"\\u6211\\u4EEC\\u5FC5\\u987B\\u5408\\u5E76\\u5177\\u6709\\u76F8\\u540C \",(0,s.jsx)(e.code,{children:\"user\"}),\" \\u5B57\\u6BB5\\u7684\\u4F1A\\u8BDD\\u6570\\u636E\\uFF0C\\u5E76\\u4FDD\\u7559\\u987A\\u5E8F\\u3002\\u8BF7\\u6CE8\\u610F\\u4EE5\\u4E0B\\u8981\\u6C42\\uFF1A\"]}),`\n`,(0,s.jsxs)(e.blockquote,{children:[`\n`,(0,s.jsx)(e.p,{children:\"\\u5728\\u5408\\u5E76\\u5177\\u6709\\u91CD\\u590D\\u7528\\u6237\\u7684\\u4F1A\\u8BDD\\u7684\\u60C5\\u51B5\\u4E0B\\uFF0C\\u8BE5\\u884C\\u5E94\\u53D6\\u4EE3\\u8BE5\\u7528\\u6237\\u7684\\u6700\\u65E9\\u51FA\\u73B0\\u3002\\u8F93\\u5165\\u5BF9\\u8C61\\u4E0D\\u5E94\\u88AB\\u4FEE\\u6539\\u3002\"}),`\n`]}),`\n`,(0,s.jsxs)(e.p,{children:[\"\\u6211\\u4EEC\\u53EF\\u4EE5\\u521D\\u59CB\\u5316\\u4E00\\u4E2A\\u65B0\\u6570\\u7EC4 \",(0,s.jsx)(e.code,{children:\"results\"}),\"\\uFF0C\\u5E76\\u5C06\\u7528\\u6237\\u4F1A\\u8BDD\\u6DFB\\u52A0\\u5230\\u5176\\u4E2D\\u3002\\u5728\\u6DFB\\u52A0\\u4E4B\\u524D\\uFF0C\\u6211\\u4EEC\\u9700\\u8981\\u68C0\\u67E5 \",(0,s.jsx)(e.code,{children:\"results\"}),\" \\u4E2D\\u662F\\u5426\\u5DF2\\u7ECF\\u5B58\\u5728\\u8BE5\\u7528\\u6237\\u7684\\u4F1A\\u8BDD\\uFF0C\\u5E76\\u66F4\\u65B0\\u8BE5\\u5BF9\\u8C61\\u800C\\u4E0D\\u662F\\u6DFB\\u52A0\\u5230\\u65B0\\u6570\\u7EC4\\u4E2D\\u3002\\u6709\\u4E24\\u79CD\\u65B9\\u6CD5\\u53EF\\u4EE5\\u505A\\u5230\\u8FD9\\u4E00\\u70B9\\uFF1A\"]}),`\n`,(0,s.jsxs)(e.ol,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"\\u5BF9\\u4E8E\\u6BCF\\u4E2A\\u4F1A\\u8BDD\\u9879\\uFF0C\\u904D\\u5386 \",(0,s.jsx)(e.code,{children:\"results\"}),\" \\u6570\\u7EC4\\u5E76\\u68C0\\u67E5\\u73B0\\u6709\\u7528\\u6237\\u3002\\u904D\\u5386 \",(0,s.jsx)(e.code,{children:\"results\"}),\" \\u6570\\u7EC4\\u5C06\\u5BFC\\u81F4 O(n\",(0,s.jsx)(\"exp\",{children:\"2\"}),\") \\u7684\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u3002\"]}),`\n`,(0,s.jsxs)(e.li,{children:[\"\\u7EF4\\u62A4\\u4E00\\u4E2A\\u54C8\\u5E0C\\u6620\\u5C04 \",(0,s.jsx)(e.code,{children:\"sessionsForUser\"}),\"\\uFF08\\u901A\\u8FC7 JavaScript \\u4E2D\\u7684 \",(0,s.jsx)(e.code,{children:\"Object\"}),\" \\u6216 \",(0,s.jsx)(e.code,{children:\"Map\"}),\"\\uFF09\\uFF0C\\u5E76\\u4F7F\\u7528\\u5B83\\u6765\\u4FDD\\u7559\\u5BF9\\u7279\\u5B9A\\u7528\\u6237\\u7684\\u4F1A\\u8BDD\\u7684\\u5F15\\u7528\\uFF0C\\u65B9\\u6CD5\\u662F\\u5C06\\u7528\\u6237 ID \\u4F5C\\u4E3A\\u952E\\u3002\\u8FD9\\u5C06\\u5141\\u8BB8 O(1) \\u7684\\u7528\\u6237\\u67E5\\u627E\\u590D\\u6742\\u5EA6\\uFF0C\\u4F46\\u4EE3\\u4EF7\\u662F O(n) \\u7684\\u5185\\u5B58\\u7A7A\\u95F4\\u3002\\u603B\\u7684\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u5C06\\u662F O(n)\\u3002\"]}),`\n`]}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:\"results\"}),\" \\u548C \",(0,s.jsx)(e.code,{children:\"sessionsForUser\"}),\" \\u4E2D\\u7684\\u503C\\u6307\\u5411\\u76F8\\u540C\\u7684\\u5BF9\\u8C61\\u5B9E\\u4F8B\\uFF0C\\u56E0\\u6B64\\u66F4\\u65B0\\u5BF9\\u8C61\\u5B9E\\u4F8B\\u5C06\\u66F4\\u65B0\\u4E24\\u4E2A\\u5BB9\\u5668\\u7684\\u5185\\u5BB9\\u3002\\u4E3A\\u4E86\\u6709\\u6548\\u5730\\u7EC4\\u5408 \",(0,s.jsx)(e.code,{children:\"equipment\"}),\" \\u5B57\\u6BB5\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u5728\\u5904\\u7406\\u65F6\\u4F7F\\u7528 \",(0,s.jsx)(e.code,{children:\"Set\"}),\"\\uFF0C\\u5E76\\u5728\\u8FD4\\u56DE\\u4E4B\\u524D\\u5C06\\u5176\\u8F6C\\u6362\\u56DE\\u6570\\u7EC4\\u3002\\u5408\\u5E76 \",(0,s.jsx)(e.code,{children:\"equipment\"}),\" \\u5B57\\u6BB5\\u6240\\u9700\\u7684\\u6392\\u5E8F\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u88AB\\u8BA4\\u4E3A\\u662F\\u6052\\u5B9A\\u7684\\uFF0C\\u56E0\\u4E3A\\u53EA\\u6709 5 \\u79CD\\u4E0D\\u540C\\u7684\\u8BBE\\u5907\\u3002\"]}),`\n`,(0,s.jsx)(a,{languages:{jsx:l,tsx:m}}),`\n`,(0,s.jsx)(e.h2,{children:\"\\u6280\\u672F\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"\\u719F\\u6089 JavaScript \\u6570\\u636E\\u7ED3\\u6784\\uFF0C\\u5982 \",(0,s.jsx)(e.code,{children:\"Array\"}),\"\\u3001\",(0,s.jsx)(e.code,{children:\"Map\"}),\" \\u548C \",(0,s.jsx)(e.code,{children:\"Set\"}),\"\\u3002\"]}),`\n`]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(p,n)})):p(n)}var D=j;return F(M);})();\n;return Component;",
  "workspace": {
    "main": "/src/data-merging.ts",
    "run": "/src/data-merging.run.test.ts",
    "submit": "/src/data-merging.submit.test.ts"
  }
}