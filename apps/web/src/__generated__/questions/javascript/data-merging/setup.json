{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/data-merging\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/data-merging.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/data-merging.run.test.ts": "import mergeData from './data-merging';\n\ndescribe('mergeData', () => {\n  test('empty data', () => {\n    expect(mergeData([])).toEqual([]);\n  });\n\n  test('merge for one user', () => {\n    expect(\n      mergeData([\n        { user: 1, duration: 10, equipment: ['barbell'] },\n        { user: 1, duration: 30, equipment: [] },\n      ]),\n    ).toEqual([{ user: 1, duration: 40, equipment: ['barbell'] }]);\n  });\n\n  test('merge for two users', () => {\n    expect(\n      mergeData([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['bench', 'kettlebell'] },\n      ]),\n    ).toEqual([\n      { user: 8, duration: 100, equipment: ['bench'] },\n      {\n        user: 7,\n        duration: 300,\n        equipment: ['bench', 'dumbbell', 'kettlebell'],\n      },\n    ]);\n  });\n});\n",
    "/src/data-merging.submit.test.ts": "import mergeData from './data-merging';\n\nfunction dataSmall() {\n  return [\n    { user: 8, duration: 50, equipment: ['bench'] },\n    { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n    { user: 1, duration: 10, equipment: ['barbell'] },\n    { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n    { user: 7, duration: 200, equipment: ['bike'] },\n    { user: 2, duration: 200, equipment: ['treadmill'] },\n    { user: 2, duration: 200, equipment: ['bike'] },\n  ];\n}\n\ndescribe('mergeData', () => {\n  test('empty data', () => {\n    expect(mergeData([])).toEqual([]);\n  });\n\n  test('does not mutate data', () => {\n    const clonedData = dataSmall();\n    mergeData(clonedData);\n    expect(clonedData).toEqual(dataSmall());\n  });\n\n  describe('one user', () => {\n    test('single session', () => {\n      expect(\n        mergeData([{ user: 1, duration: 10, equipment: ['barbell'] }]),\n      ).toEqual([{ user: 1, duration: 10, equipment: ['barbell'] }]);\n    });\n\n    test('merge duration', () => {\n      expect(\n        mergeData([\n          { user: 1, duration: 10, equipment: ['barbell'] },\n          { user: 1, duration: 30, equipment: [] },\n        ]),\n      ).toEqual([{ user: 1, duration: 40, equipment: ['barbell'] }]);\n    });\n\n    test('merge equipment', () => {\n      expect(\n        mergeData([\n          { user: 1, duration: 10, equipment: ['bike'] },\n          { user: 1, duration: 30, equipment: ['barbell'] },\n        ]),\n      ).toEqual([{ user: 1, duration: 40, equipment: ['barbell', 'bike'] }]);\n    });\n\n    test('multiple sessions', () => {\n      expect(\n        mergeData([\n          { user: 1, duration: 10, equipment: ['bike'] },\n          { user: 1, duration: 30, equipment: ['barbell'] },\n        ]),\n      ).toEqual([{ user: 1, duration: 40, equipment: ['barbell', 'bike'] }]);\n    });\n  });\n\n  describe('multiple users', () => {\n    test('unique users', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      ]);\n    });\n\n    test('merge duration', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 100, equipment: ['bench'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      ]);\n    });\n\n    test('merge equipment', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench', 'dumbbell'] },\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 100, equipment: ['bench', 'dumbbell'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      ]);\n    });\n\n    test('preserves order', () => {\n      expect(\n        mergeData([\n          { user: 8, duration: 50, equipment: ['bench', 'dumbbell'] },\n          { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n          { user: 8, duration: 50, equipment: ['bench'] },\n          { user: 6, duration: 50, equipment: ['kettlebell'] },\n        ]),\n      ).toEqual([\n        { user: 8, duration: 100, equipment: ['bench', 'dumbbell'] },\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 6, duration: 50, equipment: ['kettlebell'] },\n      ]);\n    });\n\n    test('integration', () => {\n      expect(mergeData(dataSmall())).toEqual([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 1, duration: 10, equipment: ['barbell'] },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n    });\n  });\n});\n",
    "/src/data-merging.ts": "type Session = { user: number; duration: number; equipment: Array<string> };\n\nexport default function mergeData(sessions: Array<Session>): Array<Session> {\n  const results: Array<{\n    user: number;\n    duration: number;\n    equipment: Set<string>;\n  }> = [];\n  const sessionsForUser = new Map();\n\n  sessions.forEach((session) => {\n    if (sessionsForUser.has(session.user)) {\n      const userSession = sessionsForUser.get(session.user);\n      userSession.duration += session.duration;\n      session.equipment.forEach((equipment) => {\n        userSession.equipment.add(equipment);\n      });\n    } else {\n      const clonedSession = {\n        ...session,\n        equipment: new Set(session.equipment),\n      };\n      sessionsForUser.set(session.user, clonedSession);\n      results.push(clonedSession);\n    }\n  });\n\n  // Sort equipment of each session and convert back into array.\n  return results.map((session) => ({\n    ...session,\n    equipment: Array.from(session.equipment).sort(),\n  }));\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<{user: number, duration: number, equipment: Array<string>}>} sessions\n * @return {Array}\n */\nexport default function mergeData(sessions) {\n  throw 'Not implemented!';\n}",
    "ts": "type Session = { user: number; duration: number; equipment: Array<string> };\n\nexport default function mergeData(sessions: Array<Session>): Array<Session> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/data-merging.ts",
    "run": "/src/data-merging.run.test.ts",
    "submit": "/src/data-merging.submit.test.ts"
  }
}