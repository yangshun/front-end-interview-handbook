{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/json-stringify\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/json-stringify.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/json-stringify.run.test.ts": "import jsonStringify from './json-stringify';\n\ndescribe('jsonStringify', () => {\n  test('strings', () => {\n    expect(jsonStringify('123')).toEqual('\"123\"');\n  });\n\n  test('array', () => {\n    expect(jsonStringify([1, 2, 3])).toEqual('[1,2,3]');\n  });\n\n  test('object', () => {\n    expect(jsonStringify({ name: 'John', age: 30 })).toEqual(\n      '{\"name\":\"John\",\"age\":30}',\n    );\n  });\n});\n",
    "/src/json-stringify.submit.test.ts": "import jsonStringify from './json-stringify';\n\ndescribe('jsonStringify', () => {\n  describe('primitives', () => {\n    test('null', () => {\n      expect(jsonStringify(null)).toEqual('null');\n    });\n\n    test('boolean', () => {\n      expect(jsonStringify(true)).toEqual('true');\n      expect(jsonStringify(false)).toEqual('false');\n    });\n\n    test('numbers', () => {\n      expect(jsonStringify(1)).toEqual('1');\n      expect(jsonStringify(-1)).toEqual('-1');\n    });\n\n    test('strings', () => {\n      expect(jsonStringify('123')).toEqual('\"123\"');\n      expect(jsonStringify('foo')).toEqual('\"foo\"');\n    });\n  });\n\n  describe('arrays', () => {\n    test('empty', () => {\n      expect(jsonStringify([])).toEqual('[]');\n    });\n\n    test('non-nested', () => {\n      expect(jsonStringify([1, 2, 3])).toEqual('[1,2,3]');\n      expect(jsonStringify([true, false])).toEqual('[true,false]');\n      expect(jsonStringify(['1', '2', '3'])).toEqual('[\"1\",\"2\",\"3\"]');\n      expect(jsonStringify([{}, {}])).toEqual('[{},{}]');\n      expect(jsonStringify([null, null])).toEqual('[null,null]');\n    });\n\n    test('nested', () => {\n      expect(jsonStringify([[]])).toEqual('[[]]');\n      expect(jsonStringify([[[]]])).toEqual('[[[]]]');\n      expect(jsonStringify([[], []])).toEqual('[[],[]]');\n      expect(jsonStringify([[1], [2]])).toEqual('[[1],[2]]');\n      expect(jsonStringify([1, [2, [3, [4, []]]]])).toEqual(\n        '[1,[2,[3,[4,[]]]]]',\n      );\n      expect(jsonStringify([1, 2, [3, 4, [5, 6], 7, 8]])).toEqual(\n        '[1,2,[3,4,[5,6],7,8]]',\n      );\n    });\n\n    test('mixed', () => {\n      expect(\n        jsonStringify([\n          42,\n          'Hello, World!',\n          true,\n          null,\n          { name: 'John', age: 30 },\n          [1, 2, 3],\n        ]),\n      ).toEqual(\n        '[42,\"Hello, World!\",true,null,{\"name\":\"John\",\"age\":30},[1,2,3]]',\n      );\n    });\n  });\n\n  describe('objects', () => {\n    test('empty', () => {\n      expect(jsonStringify({})).toEqual('{}');\n    });\n\n    test('non-nested', () => {\n      expect(jsonStringify({ foo: 1 })).toEqual('{\"foo\":1}');\n      expect(jsonStringify({ foo: true })).toEqual('{\"foo\":true}');\n      expect(jsonStringify({ foo: false })).toEqual('{\"foo\":false}');\n      expect(jsonStringify({ foo: 'bar' })).toEqual('{\"foo\":\"bar\"}');\n      expect(jsonStringify({ foo: [] })).toEqual('{\"foo\":[]}');\n      expect(jsonStringify({ foo: null })).toEqual('{\"foo\":null}');\n    });\n\n    test('nested', () => {\n      expect(jsonStringify({ foo: { foo: true } })).toEqual(\n        '{\"foo\":{\"foo\":true}}',\n      );\n      expect(jsonStringify({ foo: true, bar: { foo: 2 } })).toEqual(\n        '{\"foo\":true,\"bar\":{\"foo\":2}}',\n      );\n    });\n\n    test('mixed', () => {\n      expect(\n        jsonStringify({\n          name: 'foo',\n          age: 18,\n          attr: ['coding', 123],\n        }),\n      ).toEqual('{\"name\":\"foo\",\"age\":18,\"attr\":[\"coding\",123]}');\n    });\n  });\n});\n",
    "/src/json-stringify.ts": "export default function jsonStringify(value: unknown): string {\n  if (Array.isArray(value)) {\n    const arrayValues = value.map((item) => jsonStringify(item));\n    return `[${arrayValues.join(',')}]`;\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    const objectEntries = Object.entries(value).map(\n      ([key, value]) => `\"${key}\":${jsonStringify(value)}`,\n    );\n    return `{${objectEntries.join(',')}}`;\n  }\n\n  if (typeof value === 'string') {\n    return `\"${value}\"`;\n  }\n\n  return String(value);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {*} value\n * @return {string}\n */\nexport default function jsonStringify(value) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function jsonStringify(value: unknown): string {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/json-stringify.ts",
    "run": "/src/json-stringify.run.test.ts",
    "submit": "/src/json-stringify.submit.test.ts"
  }
}