{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/promise-race\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/promise-race.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/promise-race.run.test.ts": "import promiseRace from './promise-race';\n\ndescribe('promiseRace', () => {\n  test('returns a promise', () => {\n    const promise = promiseRace([]);\n    expect(promise).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', (done) => {\n    expect.assertions(1);\n    const promise = promiseRace([]);\n    expect(promise).toBeInstanceOf(Promise);\n    promise.then(\n      (value) => {\n        expect(value).toBeTruthy();\n      },\n      (reason) => {\n        expect(reason).toBeTruthy();\n      },\n    );\n\n    setTimeout(() => {\n      done();\n    }, 10);\n  });\n\n  test('one promise', async () => {\n    expect.assertions(1);\n    const p0 = 2;\n\n    const res = await promiseRace([p0]);\n    expect(res).toEqual(2);\n  });\n\n  test('mix of resolve and reject', async () => {\n    expect.assertions(1);\n    const p0 = Promise.resolve(42);\n    const p1 = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(2);\n      }, 10);\n    });\n\n    const res = await promiseRace([p0, p1]);\n    expect(res).toEqual(42);\n  });\n});\n",
    "/src/promise-race.submit.test.ts": "import promiseRace from './promise-race';\n\ndescribe('promiseRace', () => {\n  test('returns a promise', () => {\n    const promise = promiseRace([]);\n    expect(promise).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', (done) => {\n    expect.assertions(1);\n    const promise = promiseRace([]);\n    expect(promise).toBeInstanceOf(Promise);\n    promise.then(\n      (value) => {\n        expect(value).toBeTruthy();\n      },\n      (reason) => {\n        expect(reason).toBeTruthy();\n      },\n    );\n\n    setTimeout(() => {\n      done();\n    }, 10);\n  });\n\n  describe('one promise', () => {\n    describe('resolve', () => {\n      test('value', async () => {\n        expect.assertions(1);\n        const p0 = 2;\n\n        const res = await promiseRace([p0]);\n        expect(res).toEqual(2);\n      });\n\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n\n        const res = await promiseRace([p0]);\n        expect(res).toEqual(2);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 10);\n        });\n\n        const res = await promiseRace([p0]);\n        expect(res).toEqual(2);\n      });\n    });\n\n    describe('reject', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(2);\n\n        await expect(promiseRace([p0])).rejects.toBe(2);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseRace([p0])).rejects.toBe(2);\n      });\n    });\n  });\n\n  describe('multiple promises', () => {\n    describe('all resolve', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n        const p1 = Promise.resolve(3);\n\n        const res = await promiseRace([p0, p1]);\n        expect(res).toEqual(2);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 10);\n        });\n\n        const res = await promiseRace([p0, p1]);\n        expect(res).toEqual(2);\n      });\n\n      test('mixture', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 10);\n        });\n        const p1 = Promise.resolve(3);\n        const p2 = 4;\n\n        const res = await promiseRace([p0, p1, p2]);\n        expect(res).toEqual(3);\n      });\n\n      test('many delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(1);\n          }, 200);\n        });\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 100);\n        });\n        const p2 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 10);\n        });\n\n        const res = await promiseRace([p0, p1, p2]);\n        expect(res).toEqual(3);\n      });\n    });\n\n    describe('all reject', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(2);\n        const p1 = Promise.reject(3);\n\n        await expect(promiseRace([p0, p1])).rejects.toBe(2);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(3);\n          }, 1);\n        });\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseRace([p0, p1])).rejects.toBe(3);\n      });\n\n      test('mixture', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseRace([p0, p1])).rejects.toBe(42);\n      });\n    });\n\n    describe('mix of resolve and reject', () => {\n      test('instant resolve delayed reject', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(42);\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        const res = await promiseRace([p0, p1]);\n        expect(res).toEqual(42);\n      });\n\n      test('instant resolve instant reject', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(42);\n        const p1 = Promise.reject(2);\n\n        const res = await promiseRace([p0, p1]);\n        expect(res).toEqual(42);\n      });\n\n      test('instant reject instant resolve', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = Promise.resolve(2);\n\n        await expect(promiseRace([p0, p1])).rejects.toBe(42);\n      });\n\n      test('instant rejects', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = Promise.reject(43);\n\n        await expect(promiseRace([p0, p1])).rejects.toBe(42);\n      });\n\n      test('delayed resolve', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(1);\n          }, 10);\n        });\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 100);\n        });\n        const p2 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 200);\n        });\n\n        await expect(promiseRace([p0, p1, p2])).resolves.toBe(1);\n      });\n\n      test('delayed reject', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(1);\n          }, 200);\n        });\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 100);\n        });\n        const p2 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(3);\n          }, 10);\n        });\n\n        await expect(promiseRace([p0, p1, p2])).rejects.toBe(3);\n      });\n\n      test('delayed throw', async () => {\n        expect.assertions(1);\n        const p0 = new Promise(() => {\n          throw 42;\n        });\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 100);\n        });\n\n        await expect(promiseRace([p0, p1])).rejects.toBe(42);\n      });\n    });\n  });\n});\n",
    "/src/promise-race.ts": "export default function promiseRace<T extends readonly unknown[] | []>(\n  iterable: T,\n): Promise<Awaited<T[number]>> {\n  return new Promise((resolve, reject) => {\n    if (iterable.length === 0) {\n      return;\n    }\n\n    iterable.forEach(async (item) => {\n      try {\n        const result = await item;\n        resolve(result as Awaited<T[number]>);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  });\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} iterable\n * @return {Promise}\n */\nexport default function promiseRace(iterable) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function promiseRace<T extends readonly unknown[] | []>(\n  iterable: T,\n): Promise<Awaited<T[number]>> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/promise-race.ts",
    "run": "/src/promise-race.run.test.ts",
    "submit": "/src/promise-race.submit.test.ts"
  }
}