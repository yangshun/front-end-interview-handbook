{
  "description": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),g=(o,e)=>{for(var t in e)r(o,t,{get:e[t],enumerable:!0})},c=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!f.call(o,l)&&l!==t&&r(o,l,{get:()=>e[l],enumerable:!(i=u(e,l))||i.enumerable});return o};var x=(o,e,t)=>(t=o!=null?h(p(o)):{},c(e||!o||!o.__esModule?r(t,\"default\",{value:o,enumerable:!0}):t,o)),v=o=>c(r({},\"__esModule\",{value:!0}),o);var s=b((F,d)=>{d.exports=_jsx_runtime});var I={};g(I,{default:()=>_,frontmatter:()=>j});var n=x(s()),j={title:\"useBoolean II\",excerpt:\"Implement an optimized version of the useBoolean hook\"};function a(o){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement an optimized version of the \",(0,n.jsx)(e.code,{children:\"useBoolean\"}),\" hook. The returned methods should be memoized, the same function instance is returned across re-renders.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const { value, setTrue, setFalse } = useBoolean();\n\n  return (\n    <div>\n      <p>{value ? 'enabled' : 'disabled'}</p>\n      <button onClick={toggle}>Toggle</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"initialValue: boolean\"}),\": Initial value of the boolean state. If not provided, it should default to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useBoolean\"}),\" hook returns an \",(0,n.jsx)(e.code,{children:\"object\"}),\" with the following properties.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value: boolean\"}),\": The current boolean state\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setTrue: () => void\"}),\": A function to set the boolean state to \",(0,n.jsx)(e.code,{children:\"true\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setFalse: () => void\"}),\": A function to set the boolean state to \",(0,n.jsx)(e.code,{children:\"false\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"setTrue\"}),\" and \",(0,n.jsx)(e.code,{children:\"setFalse\"}),\" must be the same function instance across re-renders.\"]})]})}function T(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(a,o)})):a(o)}var _=T;return v(I);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-boolean-ii\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-boolean-ii.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/src/use-boolean-ii.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useBoolean from './use-boolean-ii';\n\ndescribe('useBoolean', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useBoolean());\n\n    expect(result.current.value).toBe(false);\n    expect(typeof result.current.setTrue).toBe('function');\n    expect(typeof result.current.setFalse).toBe('function');\n  });\n\n  test('initial true', () => {\n    const { result } = renderHook(() => useBoolean(true));\n\n    expect(result.current.value).toBe(true);\n  });\n\n  test('setFalse', () => {\n    const { result } = renderHook(() => useBoolean(true));\n\n    act(() => {\n      result.current.setFalse();\n    });\n    expect(result.current.value).toBe(false);\n  });\n});\n",
    "/src/use-boolean-ii.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useBoolean from './use-boolean-ii';\n\ndescribe('useBoolean', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useBoolean());\n\n    expect(result.current.value).toBe(false);\n    expect(typeof result.current.setTrue).toBe('function');\n    expect(typeof result.current.setFalse).toBe('function');\n  });\n\n  describe('initial values', () => {\n    test('initial true', () => {\n      const { result } = renderHook(() => useBoolean(true));\n\n      expect(result.current.value).toBe(true);\n    });\n\n    test('initial false', () => {\n      const { result } = renderHook(() => useBoolean(false));\n\n      expect(result.current.value).toBe(false);\n    });\n  });\n\n  describe('setTrue', () => {\n    test('once', () => {\n      const { result } = renderHook(() => useBoolean(false));\n\n      act(() => {\n        result.current.setTrue();\n      });\n      expect(result.current.value).toBe(true);\n    });\n\n    test('twice', () => {\n      const { result } = renderHook(() => useBoolean(false));\n\n      act(() => {\n        result.current.setTrue();\n        result.current.setTrue();\n      });\n      expect(result.current.value).toBe(true);\n    });\n  });\n\n  describe('setFalse', () => {\n    test('once', () => {\n      const { result } = renderHook(() => useBoolean(true));\n\n      act(() => {\n        result.current.setFalse();\n      });\n      expect(result.current.value).toBe(false);\n    });\n\n    test('twice', () => {\n      const { result } = renderHook(() => useBoolean(true));\n\n      act(() => {\n        result.current.setFalse();\n        result.current.setFalse();\n      });\n      expect(result.current.value).toBe(false);\n    });\n  });\n\n  test('integration', () => {\n    const { result } = renderHook(() => useBoolean(true));\n\n    act(() => {\n      result.current.setFalse();\n    });\n    expect(result.current.value).toBe(false);\n\n    act(() => {\n      result.current.setTrue();\n    });\n    expect(result.current.value).toBe(true);\n  });\n\n  test('memoizes functions', () => {\n    const { result, rerender } = renderHook(() => useBoolean());\n\n    const setTrue = result.current.setTrue;\n    const setFalse = result.current.setFalse;\n\n    rerender();\n\n    expect(result.current.setTrue).toBe(setTrue);\n    expect(result.current.setFalse).toBe(setFalse);\n  });\n});\n",
    "/src/use-boolean-ii.ts": "import { useCallback, useState } from 'react';\n\ntype UseBooleanReturn = {\n  /** The current boolean state value. */\n  value: boolean;\n  /** Function to set the boolean state to `true`. */\n  setTrue: () => void;\n  /** Function to set the boolean state to `false`. */\n  setFalse: () => void;\n};\n\nexport default function useBoolean(initialValue = false): UseBooleanReturn {\n  const [value, setValue] = useState(initialValue);\n\n  const setTrue = useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = useCallback(() => {\n    setValue(false);\n  }, []);\n\n  return { value, setTrue, setFalse };\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement an optimized version of the useBoolean hook",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/use-boolean-ii",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-cycle",
      "use-toggle"
    ],
    "slug": "use-boolean-ii",
    "subtitle": null,
    "title": "useBoolean II",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param boolean initialValue\n * @return Object\n */\nexport default function useBoolean(initialValue) {\n  throw 'Not implemented!';\n}",
    "ts": "type UseBooleanReturn = {\n  value: boolean;\n  setTrue: () => void;\n  setFalse: () => void;\n};\n\nexport default function useBoolean(initialValue?: boolean): UseBooleanReturn {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var V=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},r=(t,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!x.call(t,a)&&a!==o&&s(t,a,{get:()=>e[a],enumerable:!(l=f(e,a))||l.enumerable});return t};var k=(t,e,o)=>(o=t!=null?m(b(t)):{},r(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),y=t=>r(s({},\"__esModule\",{value:!0}),t);var u=V((B,c)=>{c.exports=_jsx_runtime});var j={};v(j,{default:()=>g});var n=k(u());var i=MDXCodeBlock;var d=`import { useCallback, useState } from 'react';\n\ntype UseBooleanReturn = {\n  /** The current boolean state value. */\n  value: boolean;\n  /** Function to set the boolean state to \\`true\\`. */\n  setTrue: () => void;\n  /** Function to set the boolean state to \\`false\\`. */\n  setFalse: () => void;\n};\n\nexport default function useBoolean(initialValue = false): UseBooleanReturn {\n  const [value, setValue] = useState(initialValue);\n\n  const setTrue = useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = useCallback(() => {\n    setValue(false);\n  }, []);\n\n  return { value, setTrue, setFalse };\n}\n`;function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The typical \",(0,n.jsx)(e.code,{children:\"useBoolean\"}),\" hook uses \",(0,n.jsx)(e.code,{children:\"useState\"}),\" to manage the boolean state. The setter functions can be implemented in terms of \",(0,n.jsx)(e.code,{children:\"setValue\"}),\" from the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook, bound by \",(0,n.jsx)(e.code,{children:\"true\"}),\" and \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useState } from 'react';\n\nexport default function useBoolean(initialValue = false) {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setTrue: () => setValue(true),\n    setFalse: () => setValue(false),\n  };\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, writing the hook this way means that components that rely on \",(0,n.jsx)(e.code,{children:\"setTrue\"}),\" or \",(0,n.jsx)(e.code,{children:\"setFalse\"}),\" will always be re-rendered since these functions are always freshly created on each render. To avoid this, we can use \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" to memoize them.\"]}),`\n`,(0,n.jsx)(i,{children:d})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var g=T;return y(j);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-boolean-ii.ts",
    "run": "/src/use-boolean-ii.run.test.ts",
    "submit": "/src/use-boolean-ii.submit.test.ts"
  }
}