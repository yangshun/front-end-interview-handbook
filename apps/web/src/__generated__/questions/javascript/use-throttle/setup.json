{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-throttle\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-throttle.ts\",\n  \"dependencies\": {\n    \"@sinonjs/fake-timers\": \"14.0.0\",\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-throttle.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useThrottle from './use-throttle';\nimport { useState } from 'react';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useThrottle', () => {\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useThrottle(1));\n\n    expect(result.current).toBe(1);\n  });\n\n  test('throttle value', () => {\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(1);\n      const throttledValue = useThrottle(value, 1000);\n      return { value, setValue, throttledValue };\n    });\n\n    act(() => result.current.setValue(2));\n\n    expect(result.current.value).toBe(2);\n    expect(result.current.throttledValue).toBe(1);\n\n    act(() => clock.tick(1000));\n\n    expect(result.current.throttledValue).toBe(2);\n  });\n});\n",
    "/src/use-throttle.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useThrottle from './use-throttle';\nimport { useState } from 'react';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useThrottle', () => {\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useThrottle(1));\n\n    expect(result.current).toBe(1);\n  });\n\n  test('throttle value', () => {\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(1);\n      const throttledValue = useThrottle(value, 1000);\n      return { value, setValue, throttledValue };\n    });\n\n    act(() => result.current.setValue(2));\n\n    expect(result.current.value).toBe(2);\n    expect(result.current.throttledValue).toBe(1);\n\n    act(() => clock.tick(1000));\n\n    expect(result.current.throttledValue).toBe(2);\n  });\n\n  test('throttle value multiple times', () => {\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(1);\n      const throttledValue = useThrottle(value, 1000);\n      return { value, setValue, throttledValue };\n    });\n\n    act(() => result.current.setValue(2));\n\n    expect(result.current.value).toBe(2);\n    expect(result.current.throttledValue).toBe(1);\n\n    act(() => result.current.setValue(3));\n\n    expect(result.current.value).toBe(3);\n    expect(result.current.throttledValue).toBe(1);\n\n    act(() => clock.tick(500));\n\n    expect(result.current.throttledValue).toBe(1);\n\n    act(() => clock.tick(500));\n\n    expect(result.current.throttledValue).toBe(3);\n  });\n\n  test('clear timeout on unmount', () => {\n    const { result, unmount } = renderHook(() => {\n      const [value, setValue] = useState(1);\n      const throttledValue = useThrottle(value, 1000);\n      return { value, setValue, throttledValue };\n    });\n\n    act(() => result.current.setValue(2));\n\n    expect(result.current.value).toBe(2);\n    expect(result.current.throttledValue).toBe(1);\n\n    unmount();\n    act(() => clock.tick(1000));\n\n    expect(result.current.throttledValue).toBe(1);\n  });\n});\n",
    "/src/use-throttle.ts": "import { useState, useRef, useEffect } from 'react';\n\nexport default function useThrottle<T>(value: T, interval = 500) {\n  const [throttledValue, setThrottledValue] = useState(value);\n  const lastUpdated = useRef<number>();\n\n  useEffect(() => {\n    const now = Date.now();\n\n    if (lastUpdated.current && now >= lastUpdated.current + interval) {\n      lastUpdated.current = now;\n      setThrottledValue(value);\n    } else {\n      const id = setTimeout(() => {\n        lastUpdated.current = now;\n        setThrottledValue(value);\n      }, interval);\n\n      return () => clearTimeout(id);\n    }\n  }, [value, interval]);\n\n  return throttledValue;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {T} value\n * @param {number} interval\n */\nexport default function useThrottle(value, interval = 500) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useThrottle<T>(value: T, interval = 500) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-throttle.ts",
    "run": "/src/use-throttle.run.test.ts",
    "submit": "/src/use-throttle.submit.test.ts"
  }
}