{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-countdown\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-countdown.ts\",\n  \"dependencies\": {\n    \"@sinonjs/fake-timers\": \"14.0.0\",\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"@types/sinonjs__fake-timers\": \"8.1.5\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-countdown.run.test.ts": "import { renderHook } from '@testing-library/react';\n\nimport useCountdown from './use-countdown';\n\ndescribe('useCountdown', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 0 }));\n\n    expect(typeof result.current).toBe('object');\n    expect(typeof result.current.count).toBe('number');\n    expect(typeof result.current.start).toBe('function');\n    expect(typeof result.current.stop).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 10 }));\n\n    expect(result.current.count).toBe(10);\n  });\n});\n",
    "/src/use-countdown.submit.test.ts": "import { useState } from 'react';\nimport { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useCountdown from './use-countdown';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useCountdown', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 0 }));\n\n    expect(typeof result.current).toBe('object');\n    expect(typeof result.current.count).toBe('number');\n    expect(typeof result.current.start).toBe('function');\n    expect(typeof result.current.stop).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 10 }));\n\n    expect(result.current.count).toBe(10);\n  });\n\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('counts down', () => {\n    const intervalMs = 1000;\n    const countStart = 10;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({ countStart, intervalMs });\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart);\n\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart - 1);\n  });\n\n  test('counts up', () => {\n    const intervalMs = 1000;\n    const countStart = 0;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({\n        countStart,\n        countStop: 10,\n        intervalMs,\n        isIncrement: true,\n      });\n\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart);\n\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart + 1);\n  });\n\n  test('stop', () => {\n    const intervalMs = 1000;\n    const countStart = 10;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({ countStart, intervalMs });\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs);\n    act(() => result.current.stop());\n\n    expect(result.current.count).toBe(countStart - 1);\n\n    clock.tick(intervalMs);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart - 1);\n  });\n\n  test('reset', () => {\n    const intervalMs = 1000;\n    const countStart = 10;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({ countStart, intervalMs });\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs);\n    act(() => result.current.stop());\n\n    expect(result.current.count).toBe(countStart - 1);\n\n    act(() => result.current.reset());\n\n    expect(result.current.count).toBe(countStart);\n  });\n});\n",
    "/src/use-countdown.ts": "import { useCallback, useEffect, useState } from 'react';\n\ninterface UseCountdownOptions {\n  countStart: number;\n  countStop?: number;\n  intervalMs?: number;\n  isIncrement?: boolean;\n}\n\ninterface UseCountdownReturn {\n  count: number;\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n}\n\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}: UseCountdownOptions): UseCountdownReturn {\n  const [count, setCount] = useState(countStart);\n  const [running, setRunning] = useState(false);\n\n  const reset: UseCountdownReturn['reset'] = useCallback(() => {\n    setRunning(false);\n    setCount(countStart);\n  }, [countStart]);\n\n  const start: UseCountdownReturn['start'] = useCallback(() => {\n    setRunning(true);\n  }, []);\n\n  const stop: UseCountdownReturn['stop'] = useCallback(() => {\n    setRunning(false);\n  }, []);\n\n  useEffect(() => {\n    if (!running) return;\n\n    const id = setInterval(() => {\n      if (count === countStop) return stop();\n\n      if (isIncrement) {\n        setCount((prev) => prev + 1);\n      } else {\n        setCount((prev) => prev - 1);\n      }\n    }, intervalMs);\n\n    return () => clearInterval(id);\n  }, [count, countStop, intervalMs, isIncrement, running]);\n\n  return { count, start, stop, reset };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Object} options\n * @param {number} options.countStart\n * @param {number} [options.countStop=0]\n * @param {number} [options.intervalMs=1000]\n * @param {boolean} [options.isIncrement=false]\n */\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}) {\n  throw 'Not implemented';\n}",
    "ts": "interface UseCountdownOptions {\n  countStart: number;\n  countStop?: number;\n  intervalMs?: number;\n  isIncrement?: boolean;\n}\n\ninterface UseCountdownReturn {\n  count: number;\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n}\n\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}: UseCountdownOptions): UseCountdownReturn {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-countdown.ts",
    "run": "/src/use-countdown.run.test.ts",
    "submit": "/src/use-countdown.submit.test.ts"
  }
}