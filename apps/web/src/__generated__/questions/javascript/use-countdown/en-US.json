{
  "description": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),b=(t,n)=>{for(var o in n)r(t,o,{get:n[o],enumerable:!0})},d=(t,n,o,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of p(n))!w.call(t,c)&&c!==o&&r(t,c,{get:()=>n[c],enumerable:!(i=a(n,c))||i.enumerable});return t};var g=(t,n,o)=>(o=t!=null?u(m(t)):{},d(n||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>d(r({},\"__esModule\",{value:!0}),t);var h=f((_,l)=>{l.exports=_jsx_runtime});var T={};b(T,{default:()=>C,frontmatter:()=>j});var e=g(h()),j={title:\"useCountdown\",excerpt:\"Implement a hook that manages a countdown\"};function s(t){let n=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Implement a \",(0,e.jsx)(n.code,{children:\"useCountdown\"}),\" hook that manages a countdown.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`export default function Component() {\n  const { count, start, stop, reset } = useCountdown({ countStart: 10 });\n\n  return (\n    <div>\n      <p>Countdown: {count}</p>\n      <button onClick={start}>Start</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Arguments\"}),`\n`,(0,e.jsx)(n.p,{children:\"The hook accepts an object with the following properties:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"countStart: number\"}),\": The initial value of the countdown\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"countStop: number\"}),\": The value at which the countdown should stop. This defaults to \",(0,e.jsx)(n.code,{children:\"0\"})]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"intervalMs: number\"}),\": The interval (in milliseconds) at which the countdown should decrease. This defaults to \",(0,e.jsx)(n.code,{children:\"1000\"})]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"isIncrement: boolean\"}),\": A flag to indicate whether the countdown should increment instead of decrement, defaults to \",(0,e.jsx)(n.code,{children:\"false\"})]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Returns\"}),`\n`,(0,e.jsx)(n.p,{children:\"The hook returns an object with the following properties:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"count: number\"}),\": The current value of the countdown\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"start: () => void\"}),\": A function that starts the countdown\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"stop: () => void\"}),\": A function that stops the countdown\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"reset: () => void\"}),\": A function that resets the countdown to \",(0,e.jsx)(n.code,{children:\"countStart\"})]}),`\n`]})]})}function v(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(s,t)})):s(t)}var C=v;return x(T);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-countdown\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-countdown.ts\",\n  \"dependencies\": {\n    \"@sinonjs/fake-timers\": \"14.0.0\",\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"@types/sinonjs__fake-timers\": \"8.1.5\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/src/use-countdown.run.test.ts": "import { renderHook } from '@testing-library/react';\n\nimport useCountdown from './use-countdown';\n\ndescribe('useCountdown', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 0 }));\n\n    expect(typeof result.current).toBe('object');\n    expect(typeof result.current.count).toBe('number');\n    expect(typeof result.current.start).toBe('function');\n    expect(typeof result.current.stop).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 10 }));\n\n    expect(result.current.count).toBe(10);\n  });\n});\n",
    "/src/use-countdown.submit.test.ts": "import { useState } from 'react';\nimport { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useCountdown from './use-countdown';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useCountdown', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 0 }));\n\n    expect(typeof result.current).toBe('object');\n    expect(typeof result.current.count).toBe('number');\n    expect(typeof result.current.start).toBe('function');\n    expect(typeof result.current.stop).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCountdown({ countStart: 10 }));\n\n    expect(result.current.count).toBe(10);\n  });\n\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('counts down', () => {\n    const intervalMs = 1000;\n    const countStart = 10;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({ countStart, intervalMs });\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart);\n\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart - 1);\n  });\n\n  test('counts up', () => {\n    const intervalMs = 1000;\n    const countStart = 0;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({\n        countStart,\n        countStop: 10,\n        intervalMs,\n        isIncrement: true,\n      });\n\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart);\n\n    clock.tick(intervalMs / 2);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart + 1);\n  });\n\n  test('stop', () => {\n    const intervalMs = 1000;\n    const countStart = 10;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({ countStart, intervalMs });\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs);\n    act(() => result.current.stop());\n\n    expect(result.current.count).toBe(countStart - 1);\n\n    clock.tick(intervalMs);\n    act(() => result.current.flush());\n\n    expect(result.current.count).toBe(countStart - 1);\n  });\n\n  test('reset', () => {\n    const intervalMs = 1000;\n    const countStart = 10;\n\n    const { result } = renderHook(() => {\n      const countdown = useCountdown({ countStart, intervalMs });\n      const [, setState] = useState(false);\n\n      return { ...countdown, flush: () => setState((prev) => !prev) };\n    });\n\n    act(() => result.current.start());\n    clock.tick(intervalMs);\n    act(() => result.current.stop());\n\n    expect(result.current.count).toBe(countStart - 1);\n\n    act(() => result.current.reset());\n\n    expect(result.current.count).toBe(countStart);\n  });\n});\n",
    "/src/use-countdown.ts": "import { useCallback, useEffect, useState } from 'react';\n\ninterface UseCountdownOptions {\n  countStart: number;\n  countStop?: number;\n  intervalMs?: number;\n  isIncrement?: boolean;\n}\n\ninterface UseCountdownReturn {\n  count: number;\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n}\n\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}: UseCountdownOptions): UseCountdownReturn {\n  const [count, setCount] = useState(countStart);\n  const [running, setRunning] = useState(false);\n\n  const reset: UseCountdownReturn['reset'] = useCallback(() => {\n    setRunning(false);\n    setCount(countStart);\n  }, [countStart]);\n\n  const start: UseCountdownReturn['start'] = useCallback(() => {\n    setRunning(true);\n  }, []);\n\n  const stop: UseCountdownReturn['stop'] = useCallback(() => {\n    setRunning(false);\n  }, []);\n\n  useEffect(() => {\n    if (!running) return;\n\n    const id = setInterval(() => {\n      if (count === countStop) return stop();\n\n      if (isIncrement) {\n        setCount((prev) => prev + 1);\n      } else {\n        setCount((prev) => prev - 1);\n      }\n    }, intervalMs);\n\n    return () => clearInterval(id);\n  }, [count, countStop, intervalMs, isIncrement, running]);\n\n  return { count, start, stop, reset };\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that manages a countdown",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-countdown"
      }
    ],
    "href": "/questions/javascript/use-countdown",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-interval",
      "use-timeout"
    ],
    "slug": "use-countdown",
    "subtitle": null,
    "title": "useCountdown",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {Object} options\n * @param {number} options.countStart\n * @param {number} [options.countStop=0]\n * @param {number} [options.intervalMs=1000]\n * @param {boolean} [options.isIncrement=false]\n */\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}) {\n  throw 'Not implemented';\n}",
    "ts": "import { useCallback, useEffect, useState } from 'react';\n\ninterface UseCountdownOptions {\n  countStart: number;\n  countStop?: number;\n  intervalMs?: number;\n  isIncrement?: boolean;\n}\n\ninterface UseCountdownReturn {\n  count: number;\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n}\n\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}: UseCountdownOptions): UseCountdownReturn {\n  const [count, setCount] = useState(countStart);\n  const [running, setRunning] = useState(false);\n\n  const reset: UseCountdownReturn['reset'] = useCallback(() => {\n    setRunning(false);\n    setCount(countStart);\n  }, [countStart]);\n\n  const start: UseCountdownReturn['start'] = useCallback(() => {\n    setRunning(true);\n  }, []);\n\n  const stop: UseCountdownReturn['stop'] = useCallback(() => {\n    setRunning(false);\n  }, []);\n\n  useEffect(() => {\n    if (!running) return;\n\n    const id = setInterval(() => {\n      if (count === countStop) return stop();\n\n      if (isIncrement) {\n        setCount((prev) => prev + 1);\n      } else {\n        setCount((prev) => prev - 1);\n      }\n    }, intervalMs);\n\n    return () => clearInterval(id);\n  }, [count, countStop, intervalMs, isIncrement, running]);\n\n  return { count, start, stop, reset };\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var w=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),S=(e,t)=>{for(var o in t)s(e,o,{get:t[o],enumerable:!0})},c=(e,t,o,u)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of h(t))!v.call(e,r)&&r!==o&&s(e,r,{get:()=>t[r],enumerable:!(u=f(t,r))||u.enumerable});return e};var g=(e,t,o)=>(o=e!=null?p(C(e)):{},c(t||!e||!e.__esModule?s(o,\"default\",{value:e,enumerable:!0}):o,e)),b=e=>c(s({},\"__esModule\",{value:!0}),e);var i=w((I,a)=>{a.exports=_jsx_runtime});var j={};S(j,{default:()=>R});var n=g(i());var l=MDXCodeBlock;var d=`import { useCallback, useEffect, useState } from 'react';\n\ninterface UseCountdownOptions {\n  countStart: number;\n  countStop?: number;\n  intervalMs?: number;\n  isIncrement?: boolean;\n}\n\ninterface UseCountdownReturn {\n  count: number;\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n}\n\nexport default function useCountdown({\n  countStart,\n  countStop = 0,\n  intervalMs = 1000,\n  isIncrement = false,\n}: UseCountdownOptions): UseCountdownReturn {\n  const [count, setCount] = useState(countStart);\n  const [running, setRunning] = useState(false);\n\n  const reset: UseCountdownReturn['reset'] = useCallback(() => {\n    setRunning(false);\n    setCount(countStart);\n  }, [countStart]);\n\n  const start: UseCountdownReturn['start'] = useCallback(() => {\n    setRunning(true);\n  }, []);\n\n  const stop: UseCountdownReturn['stop'] = useCallback(() => {\n    setRunning(false);\n  }, []);\n\n  useEffect(() => {\n    if (!running) return;\n\n    const id = setInterval(() => {\n      if (count === countStop) return stop();\n\n      if (isIncrement) {\n        setCount((prev) => prev + 1);\n      } else {\n        setCount((prev) => prev - 1);\n      }\n    }, intervalMs);\n\n    return () => clearInterval(id);\n  }, [count, countStop, intervalMs, isIncrement, running]);\n\n  return { count, start, stop, reset };\n}\n`;function m(e){let t=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(t.p,{children:[\"The \",(0,n.jsx)(t.code,{children:\"useCountdown\"}),\" hook can be implemented using \",(0,n.jsx)(t.code,{children:\"useState\"}),\" to store the current value of the countdown and \",(0,n.jsx)(t.code,{children:\"useEffect\"}),\" to manage the countdown timer with \",(0,n.jsx)(t.code,{children:\"setInterval\"}),\".\"]}),`\n`,(0,n.jsxs)(t.p,{children:[\"We just need to make sure we clear the interval with \",(0,n.jsx)(t.code,{children:\"clearInterval\"}),\" when the component is unmounted, i.e., on the effect's clean-up.\"]}),`\n`,(0,n.jsx)(l,{children:d})]})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(m,e)})):m(e)}var R=M;return b(j);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-countdown.ts",
    "run": "/src/use-countdown.run.test.ts",
    "submit": "/src/use-countdown.submit.test.ts"
  }
}