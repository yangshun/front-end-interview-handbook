{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/resumable-interval\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/resumable-interval.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/resumable-interval.run.test.ts": "import createResumableInterval from './resumable-interval';\n\ndescribe('createResumableInterval', () => {\n  test('returns an object with the necessary methods', () => {\n    const interval = createResumableInterval(() => {});\n    expect(typeof interval).toBe('object');\n    expect(interval.start).toBeTruthy();\n    expect(interval.pause).toBeTruthy();\n    expect(interval.stop).toBeTruthy();\n  });\n\n  test('start', (done) => {\n    expect.assertions(3);\n    let i = 0;\n    const { start } = createResumableInterval(() => {\n      i++;\n    }, 10);\n    expect(i).toBe(0);\n    start();\n    expect(i).toBe(1);\n    setTimeout(() => {\n      expect(i).toBeGreaterThan(1);\n      done();\n    }, 20);\n  });\n\n  test('can resume', (done) => {\n    expect.assertions(5);\n    let i = 0;\n    const { start, pause, stop } = createResumableInterval(() => {\n      i++;\n    }, 10);\n    expect(i).toBe(0);\n    start();\n    expect(i).toBe(1);\n    pause();\n    expect(i).toBe(1);\n    start();\n    expect(i).toBe(2);\n    setTimeout(() => {\n      expect(i).toBe(3);\n      stop?.();\n      done();\n    }, 15);\n  });\n});\n",
    "/src/resumable-interval.submit.test.ts": "import createResumableInterval from './resumable-interval';\n\ndescribe('createResumableInterval', () => {\n  test('returns an object with the necessary methods', () => {\n    const interval = createResumableInterval(() => {});\n    expect(typeof interval).toBe('object');\n    expect(interval.start).toBeTruthy();\n    expect(interval.pause).toBeTruthy();\n    expect(interval.stop).toBeTruthy();\n  });\n\n  test('paused by default', (done) => {\n    expect.assertions(2);\n    let i = 0;\n    createResumableInterval(() => {\n      i++;\n    }, 10);\n    expect(i).toBe(0);\n    setTimeout(() => {\n      expect(i).toBe(0);\n      done();\n    }, 20);\n  });\n\n  describe('start', () => {\n    test('callback is executed immediately after starting', (done) => {\n      expect.assertions(3);\n      let i = 0;\n      const { start } = createResumableInterval(() => {\n        i++;\n      }, 10);\n      expect(i).toBe(0);\n      start();\n      expect(i).toBe(1);\n      setTimeout(() => {\n        expect(i).toBeGreaterThan(1);\n        done();\n      }, 20);\n    });\n\n    test('callback runs at intervals', (done) => {\n      let i = 0;\n      const { start, stop } = createResumableInterval(() => {\n        i++;\n        if (i === 3) {\n          stop?.();\n          done();\n        }\n      }, 10);\n      expect(i).toBe(0);\n      start();\n      expect(i).toBe(1);\n    });\n\n    test('calling start() multiple times does not execute callback each time', (done) => {\n      let i = 0;\n      const { start } = createResumableInterval(() => {\n        i++;\n      }, 10);\n      expect(i).toBe(0);\n      start();\n      expect(i).toBe(1);\n      start();\n      expect(i).toBe(1);\n      done();\n    });\n  });\n\n  describe('pause', () => {\n    describe('can be paused', () => {\n      test('immediately', (done) => {\n        expect.assertions(3);\n        let i = 0;\n        const { start, pause } = createResumableInterval(() => {\n          i++;\n        }, 10);\n        expect(i).toBe(0);\n        start();\n        expect(i).toBe(1);\n        pause();\n        setTimeout(() => {\n          expect(i).toBe(1);\n          done();\n        }, 20);\n      });\n\n      test('after first execution', (done) => {\n        expect.assertions(4);\n        let i = 0;\n        const { start, pause } = createResumableInterval(() => {\n          i++;\n        }, 10);\n        expect(i).toBe(0);\n        start();\n        expect(i).toBe(1);\n        setTimeout(() => {\n          pause();\n          expect(i).toBe(2);\n        }, 15);\n        setTimeout(() => {\n          expect(i).toBe(2);\n          done();\n        }, 25);\n      });\n    });\n\n    test('can resume', (done) => {\n      expect.assertions(5);\n      let i = 0;\n      const { start, pause, stop } = createResumableInterval(() => {\n        i++;\n      }, 10);\n      expect(i).toBe(0);\n      start();\n      expect(i).toBe(1);\n      pause();\n      expect(i).toBe(1);\n      start();\n      expect(i).toBe(2);\n      setTimeout(() => {\n        expect(i).toBe(3);\n        stop?.();\n        done();\n      }, 15);\n    });\n\n    test('can pause multiple times', (done) => {\n      expect.assertions(5);\n      let i = 0;\n      const { start, pause, stop } = createResumableInterval(() => {\n        i++;\n      }, 10);\n      expect(i).toBe(0);\n      start();\n      expect(i).toBe(1);\n      pause();\n      expect(i).toBe(1);\n      pause();\n      expect(i).toBe(1);\n      setTimeout(() => {\n        expect(i).toBe(1);\n        stop?.();\n        done();\n      }, 15);\n    });\n\n    test('can resume after pausing multiple times', (done) => {\n      expect.assertions(7);\n      let i = 0;\n      const { start, pause, stop } = createResumableInterval(() => {\n        i++;\n      }, 10);\n      expect(i).toBe(0);\n      start();\n      expect(i).toBe(1);\n      pause();\n      expect(i).toBe(1);\n      pause();\n      expect(i).toBe(1);\n      pause();\n      expect(i).toBe(1);\n      start();\n      expect(i).toBe(2);\n      setTimeout(() => {\n        expect(i).toBe(3);\n        stop?.();\n        done();\n      }, 15);\n    });\n  });\n\n  describe('stop', () => {\n    describe('can be stopped', () => {\n      test('immediately', (done) => {\n        expect.assertions(3);\n        let i = 0;\n        const { start, stop } = createResumableInterval(() => {\n          i++;\n        }, 10);\n        expect(i).toBe(0);\n        start();\n        expect(i).toBe(1);\n        stop();\n        setTimeout(() => {\n          expect(i).toBe(1);\n          done();\n        }, 15);\n      });\n\n      test('after first execution', (done) => {\n        expect.assertions(4);\n        let i = 0;\n        const { start, stop } = createResumableInterval(() => {\n          i++;\n        }, 10);\n        expect(i).toBe(0);\n        start();\n        expect(i).toBe(1);\n        setTimeout(() => {\n          stop();\n          expect(i).toBe(2);\n        }, 15);\n        setTimeout(() => {\n          expect(i).toBe(2);\n          done();\n        }, 25);\n      });\n    });\n\n    describe('cannot be resumed', () => {\n      test('stopped immediately', (done) => {\n        expect.assertions(4);\n        let i = 0;\n        const { start, stop } = createResumableInterval(() => {\n          i++;\n        }, 10);\n        expect(i).toBe(0);\n        start();\n        expect(i).toBe(1);\n        stop();\n        start();\n        setTimeout(() => {\n          expect(i).toBe(1);\n        }, 15);\n        setTimeout(() => {\n          expect(i).toBe(1);\n          done();\n        }, 25);\n      });\n\n      test('stopped after first execution', (done) => {\n        expect.assertions(4);\n        let i = 0;\n        const { start, stop } = createResumableInterval(() => {\n          i++;\n        }, 10);\n        expect(i).toBe(0);\n        start();\n        expect(i).toBe(1);\n        setTimeout(() => {\n          stop();\n          expect(i).toBe(2);\n          start();\n        }, 15);\n        setTimeout(() => {\n          expect(i).toBe(2);\n          done();\n        }, 30);\n      });\n    });\n  });\n\n  // TODO: Disabled for now.\n  // test('integration', (done) => {\n  //   expect.assertions(10);\n  //   let i = 0;\n  //   const { start, pause, stop } = createResumableInterval(() => {\n  //     i++;\n  //   }, 10);\n  //   expect(i).toBe(0);\n  //   start();\n  //   expect(i).toBe(1);\n  //   pause();\n  //   pause();\n  //   expect(i).toBe(1);\n  //   start();\n  //   expect(i).toBe(2);\n  //   setTimeout(() => {\n  //     pause();\n  //     expect(i).toBe(3);\n  //   }, 15);\n  //   setTimeout(() => {\n  //     expect(i).toBe(3);\n  //     start();\n  //     expect(i).toBe(4);\n  //   }, 30);\n  //   setTimeout(() => {\n  //     expect(i).toBe(5);\n  //     stop();\n  //   }, 45);\n  //   setTimeout(() => {\n  //     expect(i).toBe(5);\n  //     start();\n  //     pause();\n  //   }, 60);\n  //   setTimeout(() => {\n  //     expect(i).toBe(5);\n  //     done();\n  //   }, 100);\n  // });\n});\n",
    "/src/resumable-interval.ts": "interface Resumable {\n  start: () => void;\n  pause: () => void;\n  stop: () => void;\n}\n\nexport default function createResumableInterval(\n  callback: Function,\n  delay?: number,\n  ...args: Array<any>\n): Resumable {\n  let timerId: number | null = null;\n  let stopped = false;\n\n  function start() {\n    if (stopped || timerId != null) {\n      return;\n    }\n\n    callback(...args);\n    timerId = setInterval(callback, delay, ...args);\n  }\n\n  function clearTimer() {\n    clearInterval(timerId ?? undefined);\n    timerId = null;\n  }\n\n  function pause() {\n    if (stopped) {\n      return;\n    }\n\n    clearTimer();\n  }\n\n  function stop() {\n    stopped = true;\n    clearTimer();\n  }\n\n  return {\n    start,\n    pause,\n    stop,\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} callback\n * @param {number} delay\n * @param {...any} args\n * @returns {{start: Function, pause: Function, stop: Function}}\n */\nexport default function createResumableInterval(callback, delay, ...args) {\n  throw 'Not implemented';\n}",
    "ts": "interface Resumable {\n  start: () => void;\n  pause: () => void;\n  stop: () => void;\n}\n\nexport default function createResumableInterval(\n  callback: Function,\n  delay?: number,\n  ...args: Array<any>\n): Resumable {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/resumable-interval.ts",
    "run": "/src/resumable-interval.run.test.ts",
    "submit": "/src/resumable-interval.submit.test.ts"
  }
}