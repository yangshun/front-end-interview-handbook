{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/sleep\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/sleep.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/sleep.run.test.ts": "import sleep from './sleep';\n\ndescribe('sleep', () => {\n  test('returns a promise', () => {\n    const sleepPromise = sleep(1);\n    expect(sleepPromise instanceof Promise).toBe(true);\n  });\n\n  test('executes after delay', async () => {\n    expect.assertions(4);\n    let i = 0;\n    expect(i).toBe(0);\n    let now = Date.now();\n    await sleep(50);\n    expect(i).toBe(0);\n    i++;\n    expect(i).toBe(1);\n    expect(Date.now() - now).toBeGreaterThan(25);\n  });\n\n  test('does not block other async operations', (done) => {\n    expect.assertions(4);\n    let i = 0;\n    expect(i).toBe(0);\n    sleep(50).then(() => {\n      i++;\n      expect(i).toBe(3);\n      done();\n    });\n    setTimeout(() => {\n      i++;\n      expect(i).toBe(2);\n    }, 25);\n    i++;\n    expect(i).toBe(1);\n  });\n});\n",
    "/src/sleep.submit.test.ts": "import sleep from './sleep';\n\ndescribe('sleep', () => {\n  test('returns a promise', () => {\n    const sleepPromise = sleep(1);\n    expect(sleepPromise instanceof Promise).toBe(true);\n  });\n\n  describe('executes after delay', () => {\n    test('with await', async () => {\n      expect.assertions(4);\n      let i = 0;\n      expect(i).toBe(0);\n      let now = Date.now();\n      await sleep(50);\n      expect(i).toBe(0);\n      i++;\n      expect(i).toBe(1);\n      expect(Date.now() - now).toBeGreaterThan(25);\n    });\n\n    test('delay of 0', (done) => {\n      expect.assertions(3);\n      let i = 0;\n      expect(i).toBe(0);\n      sleep(0).then(() => {\n        i++;\n        expect(i).toBe(2);\n        done();\n      });\n      i++;\n      expect(i).toBe(1);\n    });\n\n    test('delay bigger than 0', (done) => {\n      expect.assertions(3);\n      let i = 0;\n      expect(i).toBe(0);\n      sleep(50).then(() => {\n        i++;\n        expect(i).toBe(2);\n        done();\n      });\n      i++;\n      expect(i).toBe(1);\n    });\n\n    test('does not block other async operations', (done) => {\n      expect.assertions(4);\n      let i = 0;\n      expect(i).toBe(0);\n      sleep(50).then(() => {\n        i++;\n        expect(i).toBe(3);\n        done();\n      });\n      setTimeout(() => {\n        i++;\n        expect(i).toBe(2);\n      }, 25);\n      i++;\n      expect(i).toBe(1);\n    });\n  });\n});\n",
    "/src/sleep.ts": "export default async function sleep(duration: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, duration));\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} duration\n * @return {Promise<void>}\n */\nexport default async function sleep(duration) {\n  throw 'Not implemented';\n}",
    "ts": "export default async function sleep(duration: number): Promise<void> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/sleep.ts",
    "run": "/src/sleep.run.test.ts",
    "submit": "/src/sleep.submit.test.ts"
  }
}