{
  "description": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of g(e))!p.call(t,l)&&l!==o&&a(t,l,{get:()=>e[l],enumerable:!(c=u(e,l))||c.enumerable});return t};var x=(t,e,o)=>(o=t!=null?h(m(t)):{},i(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),v=t=>i(a({},\"__esModule\",{value:!0}),t);var s=f((V,r)=>{r.exports=_jsx_runtime});var C={};b(C,{default:()=>k,frontmatter:()=>j});var n=x(s()),j={title:\"useToggle\",excerpt:\"Implement a hook that manages a boolean toggle state\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\",ol:\"ol\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useToggle\"}),\" hook that manages a boolean toggle state in React components.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [value, toggle, setValue] = useToggle();\n\n  return (\n    <div>\n      <p>Enabled: {enabled ? 'On' : 'Off'}</p>\n      <button onClick={toggle}>Toggle</button>\n      <button onClick={() => setValue(true)}>Enable</button>\n      <button onClick={() => setValue(false)}>Disable</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defaultValue: boolean\"}),\" (optional): The initial value of the toggle state. If not provided, it should default to \",(0,n.jsx)(e.code,{children:\"false\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"A tuple containing the following elements:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value: boolean\"}),\": The current state\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"toggle: () => void\"}),\": A function that toggles the state between \",(0,n.jsx)(e.code,{children:\"true\"}),\" and \",(0,n.jsx)(e.code,{children:\"false\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setValue\"}),\": A function that sets the state to the provided \",(0,n.jsx)(e.code,{children:\"value\"}),\". It has the same signature as the second argument of the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook\"]}),`\n`]})]})}function _(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var k=_;return v(C);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-toggle\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-toggle.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-toggle.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useToggle from './use-toggle';\n\ndescribe('useToggle', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useToggle());\n\n    expect(result.current[0]).toBe(false);\n    expect(typeof result.current[1]).toBe('function');\n    expect(typeof result.current[2]).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useToggle(true));\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('toggle', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('setValue with value', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2](true);\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n});\n",
    "/src/use-toggle.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useToggle from './use-toggle';\n\ndescribe('useToggle', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useToggle());\n\n    expect(result.current[0]).toBe(false);\n    expect(typeof result.current[1]).toBe('function');\n    expect(typeof result.current[2]).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useToggle(true));\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('toggle', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('setValue with value', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2](true);\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('setValue with false', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2](false);\n    });\n\n    expect(result.current[0]).toBe(false);\n  });\n\n  test('setValue with function', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2]((x) => !x);\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n});\n",
    "/src/use-toggle.ts": "import { Dispatch, SetStateAction, useState, useCallback } from 'react';\n\nexport default function useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>] {\n  const [value, setValue] = useState(Boolean(defaultValue));\n\n  const toggle = useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return [value, toggle, setValue];\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement a hook that manages a boolean toggle state",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-toggle"
      }
    ],
    "href": "/questions/javascript/use-toggle",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "use-cycle"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-cycle"
    ],
    "slug": "use-toggle",
    "subtitle": null,
    "title": "useToggle",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {boolean | undefined} defaultValue\n */\nexport default function useToggle(defaultValue) {\n  throw 'Not implemented';\n}",
    "ts": "import { Dispatch, SetStateAction } from 'react';\n\nexport default function useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>] {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),S=(t,e)=>{for(var n in e)l(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!x.call(t,a)&&a!==n&&l(t,a,{get:()=>e[a],enumerable:!(r=g(e,a))||r.enumerable});return t};var j=(t,e,n)=>(n=t!=null?m(f(t)):{},s(e||!t||!t.__esModule?l(n,\"default\",{value:t,enumerable:!0}):n,t)),k=t=>s(l({},\"__esModule\",{value:!0}),t);var u=b((v,c)=>{c.exports=_jsx_runtime});var M={};S(M,{default:()=>D});var o=j(u());var i=MDXCodeBlock;var h=`import { Dispatch, SetStateAction, useState, useCallback } from 'react';\n\nexport default function useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>] {\n  const [value, setValue] = useState(Boolean(defaultValue));\n\n  const toggle = useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return [value, toggle, setValue];\n}\n`;function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"useToggle\"}),\" hook can be implemented using the \",(0,o.jsx)(e.code,{children:\"useState\"}),\" hook, but additionally returns a \",(0,o.jsx)(e.code,{children:\"toggle\"}),\" function that sets the state with an updater function that negates the current state.\"]}),`\n`,(0,o.jsx)(i,{children:h}),`\n`,(0,o.jsxs)(e.p,{children:[\"We return a triplet, similar to the \",(0,o.jsx)(e.code,{children:\"useState\"}),\" hook, so that the consumer can easily rename the variables when they destructure it.\"]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(d,t)})):d(t)}var D=C;return k(M);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-toggle.ts",
    "run": "/src/use-toggle.run.test.ts",
    "submit": "/src/use-toggle.submit.test.ts"
  }
}