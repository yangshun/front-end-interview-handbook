{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-toggle\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-toggle.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-toggle.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useToggle from './use-toggle';\n\ndescribe('useToggle', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useToggle());\n\n    expect(result.current[0]).toBe(false);\n    expect(typeof result.current[1]).toBe('function');\n    expect(typeof result.current[2]).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useToggle(true));\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('toggle', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('setValue with value', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2](true);\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n});\n",
    "/src/use-toggle.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useToggle from './use-toggle';\n\ndescribe('useToggle', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useToggle());\n\n    expect(result.current[0]).toBe(false);\n    expect(typeof result.current[1]).toBe('function');\n    expect(typeof result.current[2]).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useToggle(true));\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('toggle', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('setValue with value', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2](true);\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n\n  test('setValue with false', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2](false);\n    });\n\n    expect(result.current[0]).toBe(false);\n  });\n\n  test('setValue with function', () => {\n    const { result } = renderHook(() => useToggle());\n\n    act(() => {\n      result.current[2]((x) => !x);\n    });\n\n    expect(result.current[0]).toBe(true);\n  });\n});\n",
    "/src/use-toggle.ts": "import { Dispatch, SetStateAction, useState, useCallback } from 'react';\n\nexport default function useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>] {\n  const [value, setValue] = useState(Boolean(defaultValue));\n\n  const toggle = useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return [value, toggle, setValue];\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {boolean | undefined} defaultValue\n */\nexport default function useToggle(defaultValue) {\n  throw 'Not implemented';\n}",
    "ts": "import { Dispatch, SetStateAction } from 'react';\n\nexport default function useToggle(\n  defaultValue?: boolean,\n): [boolean, () => void, Dispatch<SetStateAction<boolean>>] {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-toggle.ts",
    "run": "/src/use-toggle.run.test.ts",
    "submit": "/src/use-toggle.submit.test.ts"
  }
}