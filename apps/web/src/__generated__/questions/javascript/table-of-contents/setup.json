{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/table-of-contents\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/table-of-contents.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/table-of-contents.run.test.ts": "import tableOfContents from './table-of-contents';\n\ndescribe('tableOfContents', () => {\n  test('empty', () => {\n    const doc = new DOMParser().parseFromString(\n      `\n<!DOCTYPE html>\n<html>\n<body>\n</body>\n</html>`,\n      'text/html',\n    );\n    expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(``);\n  });\n\n  test('only h1', () => {\n    const doc = new DOMParser().parseFromString(\n      `\n<!DOCTYPE html>\n<html>\n<body>\n  <h1>Blogpost</h1>\n</body>\n</html>`,\n      'text/html',\n    );\n    expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n      `<ul><li>Blogpost</li></ul>`,\n    );\n  });\n\n  test('nested', () => {\n    const doc = new DOMParser().parseFromString(\n      `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <h3>Bar</h3>\n    <h4>Baz</h4>\n    <h5>Qux</h5>\n    <h6>Quxx</h6>\n  </body>\n  </html>`,\n      'text/html',\n    );\n    expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n      `<ul>\n          <li>Foo\n            <ul>\n              <li>\n                Bar\n                <ul>\n                  <li>\n                    Baz\n                    <ul>\n                      <li>\n                        Qux\n                        <ul>\n                          <li>Quxx</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>`.replace(/\\s/g, ''),\n    );\n  });\n});\n",
    "/src/table-of-contents.submit.test.ts": "import tableOfContents from './table-of-contents';\n\ndescribe('tableOfContents', () => {\n  test('empty', () => {\n    const doc = new DOMParser().parseFromString(\n      `\n<!DOCTYPE html>\n<html>\n<body>\n</body>\n</html>`,\n      'text/html',\n    );\n    expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(``);\n  });\n\n  describe('only one tag type', () => {\n    test('only h1', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h1>Blogpost</h1>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul><li>Blogpost</li></ul>`,\n      );\n    });\n\n    test('only h2s', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n    <!DOCTYPE html>\n    <html>\n    <body>\n      <h1>Blogpost</h1>\n      <h2>Foo</h2>\n      <h2>Bar</h2>\n      <h2>Baz</h2>\n    </body>\n    </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>\n            Blogpost\n            <ul>\n              <li>Foo</li>\n              <li>Bar</li>\n              <li>Baz</li>\n            </ul>\n          </li>\n        </ul>\n        `.replace(/\\s/g, ''),\n      );\n    });\n\n    test('only h3s', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h3>Foo</h3>\n    <h3>Bar</h3>\n    <h3>Baz</h3>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>Foo</li>\n          <li>Bar</li>\n          <li>Baz</li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n\n    test('nested DOM', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <div>\n      <h2>Foo</h2>\n    </div>\n    <h2>Bar</h2>\n    <div>\n      <div>\n        <h2>Baz</h2>\n      </div>\n    </div>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>Foo</li>\n          <li>Bar</li>\n          <li>Baz</li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n  });\n\n  describe('nested', () => {\n    test('strictly ascending', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <h3>Bar</h3>\n    <h4>Baz</h4>\n    <h5>Qux</h5>\n    <h6>Quxx</h6>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>Foo\n            <ul>\n              <li>\n                Bar\n                <ul>\n                  <li>\n                    Baz\n                    <ul>\n                      <li>\n                        Qux\n                        <ul>\n                          <li>Quxx</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n\n    test('ascending and descending once', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <h2>Bar</h2>\n    <h3>Baz</h3>\n    <h3>Qux</h3>\n    <h2>Quxx</h2>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>Foo</li>\n          <li>\n            Bar\n            <ul>\n              <li>Baz</li>\n              <li>Qux</li>\n            </ul>\n          </li>\n          <li>Quxx</li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n\n    test('ascending and descending many times', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <body>\n    <h1>Heading1</h1>\n    <h2>Heading2a</h2>\n    <h2>Heading2b</h2>\n    <h3>Heading3a</h3>\n    <h3>Heading3b</h3>\n    <h4>Heading4</h3>\n    <h2>Heading2c</h2>\n  </body>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>\n            Heading1\n            <ul>\n              <li>Heading2a</li>\n              <li>\n                Heading2b\n                <ul>\n                  <li>Heading3a</li>\n                  <li>\n                    Heading3b\n                    <ul>\n                      <li>Heading4</li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li>Heading2c</li>\n            </ul>\n          </li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n\n    test('ascending and descending all the way', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <h2>Bar</h2>\n    <h3>Baz</h3>\n    <h4>Baz2</h4>\n    <h3>Qux</h3>\n    <h4>Baz3</h4>\n    <h4>Baz4</h4>\n    <h2>Quxx</h2>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>Foo</li>\n          <li>\n            Bar\n            <ul>\n              <li>\n                Baz\n                <ul>\n                  <li>Baz2</li>\n                </ul>\n              </li>\n              <li>\n                Qux\n                <ul>\n                  <li>Baz3</li>\n                  <li>Baz4</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n          <li>Quxx</li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n\n    test('ascending and descending with nesting', () => {\n      const doc = new DOMParser().parseFromString(\n        `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <div>\n      <h2>Bar</h2>\n      <h3>Baz</h3>\n      <h3>Qux</h3>\n    </div>\n    <div>\n      <h2>Quxx</h2>\n    </div>\n  </body>\n  </html>`,\n        'text/html',\n      );\n      expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n        `<ul>\n          <li>Foo</li>\n          <li>\n            Bar\n            <ul>\n              <li>Baz</li>\n              <li>Qux</li>\n            </ul>\n          </li>\n          <li>Quxx</li>\n        </ul>`.replace(/\\s/g, ''),\n      );\n    });\n  });\n\n  test('ignores comment nodes', () => {\n    const doc = new DOMParser().parseFromString(\n      `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <!-- Comment -->\n    <div>\n      <h2>Bar</h2>\n      <h3>Baz<!-- Comment --></h3>\n      <h3>Qux</h3>\n    </div>\n    <div>\n      <h2>Quxx</h2>\n      <!-- Comment -->\n    </div>\n  </body>\n  </html>`,\n      'text/html',\n    );\n    expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n      `<ul>\n          <li>Foo</li>\n          <li>\n            Bar\n            <ul>\n              <li>Baz</li>\n              <li>Qux</li>\n            </ul>\n          </li>\n          <li>Quxx</li>\n        </ul>`.replace(/\\s/g, ''),\n    );\n  });\n\n  test('ignores text nodes', () => {\n    const doc = new DOMParser().parseFromString(\n      `\n  <!DOCTYPE html>\n  <html>\n  <body>\n    <h2>Foo</h2>\n    <div>\n      Text node\n      <h2>Bar</h2>\n      <h3>Baz</h3>\n      <h3>Qux</h3>\n    </div>\n    Text node\n    <div>\n      <h2>Quxx</h2>\n      Text node\n    </div>\n  </body>\n  </html>`,\n      'text/html',\n    );\n    expect(tableOfContents(doc).replace(/\\s/g, '')).toBe(\n      `<ul>\n          <li>Foo</li>\n          <li>\n            Bar\n            <ul>\n              <li>Baz</li>\n              <li>Qux</li>\n            </ul>\n          </li>\n          <li>Quxx</li>\n        </ul>`.replace(/\\s/g, ''),\n    );\n  });\n});\n",
    "/src/table-of-contents.ts": "type Node = {\n  text: string | null;\n  children: Array<Node>;\n};\n\nfunction stringify(contents: Node): string {\n  function stringifyNode(node: Node): string {\n    return `<li>${node.text}${stringifyChildren(node.children)}</li>`;\n  }\n\n  function stringifyChildren(children: Array<Node>): string {\n    return children.length > 0\n      ? `<ul>${children.map(stringifyNode).join('')}</ul>`\n      : '';\n  }\n\n  return stringifyChildren(contents.children);\n}\n\nconst headingTags = new Set(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']);\n\nexport default function tableOfContents(doc: Document): string {\n  const rootNode = {\n    text: null,\n    children: [],\n  };\n  const stack: Array<Node> = [rootNode];\n  let currentLevel = 0;\n\n  function traverse(element: Element) {\n    if (element == null || element.tagName == null) {\n      return;\n    }\n\n    if (headingTags.has(element.tagName.toLowerCase())) {\n      const level = parseInt(element.tagName[1], 10);\n      const node = {\n        text: element.textContent,\n        children: [],\n      };\n\n      for (let i = level; i < currentLevel + 1; i++) {\n        stack.pop();\n      }\n\n      stack[stack.length - 1].children.push(node);\n      stack.push(node);\n      currentLevel = level;\n    }\n\n    for (const child of element.children) {\n      traverse(child);\n    }\n  }\n\n  traverse(doc.body);\n\n  return stringify(stack[0]);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Document} doc\n * @return {string}\n */\nexport default function tableOfContents(doc) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function tableOfContents(doc: Document): string {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/table-of-contents.ts",
    "run": "/src/table-of-contents.run.test.ts",
    "submit": "/src/table-of-contents.submit.test.ts"
  }
}