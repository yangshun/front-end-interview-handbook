{
  "description": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var c in e)a(n,c,{get:e[c],enumerable:!0})},o=(n,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!j.call(n,r)&&r!==c&&a(n,r,{get:()=>e[r],enumerable:!(i=u(e,r))||i.enumerable});return n};var w=(n,e,c)=>(c=n!=null?d(p(n)):{},o(e||!n||!n.__esModule?a(c,\"default\",{value:n,enumerable:!0}):c,n)),f=n=>o(a({},\"__esModule\",{value:!0}),n);var s=m((S,l)=>{l.exports=_jsx_runtime});var _={};v(_,{default:()=>x,frontmatter:()=>g});var t=w(s()),g={title:\"useObject\",excerpt:\"Implement a hook that manages an object value\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\",ol:\"ol\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useObject\"}),\" hook that manages a state of JavaScript \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\",children:(0,t.jsx)(e.code,{children:\"Object\"})}),\", also known as POJO (Plain Old JavaScript Object), which is a key-value pair storage initialized with \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\",children:(0,t.jsx)(e.code,{children:\"{}\"})}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"When the set state function is called with an object, it is merged with the existing object.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"It is more convenient to use \",(0,t.jsx)(e.code,{children:\"useObject\"}),\" over plain \",(0,t.jsx)(e.code,{children:\"useState\"}),\" because in the latter case, you would always have to create a new object, mutate it, then set state to use the new object (or create a new object via object spread), which can be quite cumbersome.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [record, setRecord] = useObject({ a: 1, b: 2 });\n\n  return (\n    <div>\n      <pre>{JSON.stringify(record, null, 2)}</pre>\n      <button onClick={() => setRecord((prev) => ({ a: prev.a + 1 }))}>\n        Increase a\n      </button>\n      <button onClick={() => setRecord((prev) => ({ b: prev.b + 1 }))}>\n        Increase b\n      </button>\n      <button onClick={() => setRecord(() => ({ c: 3 }))}>Add c</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"initialValue\"}),\": The initial value of the object\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The hook returns an array with two elements:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"The current object state\"}),`\n`,(0,t.jsx)(e.li,{children:\"An updater function which can update the object state\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"The updater function can receive either:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"An object that will be merged with the current state object\"}),`\n`,(0,t.jsx)(e.li,{children:\"An updater function that receives the current state object and returns an object that will be merged with the current state object\"}),`\n`]})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var x=O;return f(_);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that manages an object value",
    "title": "useObject"
  },
  "solution": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},i=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of j(e))!O.call(n,o)&&o!==r&&a(n,o,{get:()=>e[o],enumerable:!(c=b(e,o))||c.enumerable});return n};var S=(n,e,r)=>(r=n!=null?u(m(n)):{},i(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),v=n=>i(a({},\"__esModule\",{value:!0}),n);var l=f((T,s)=>{s.exports=_jsx_runtime});var U={};g(U,{default:()=>w});var t=S(l());var d=MDXCodeBlock;var h=`import { useCallback, useState } from 'react';\n\nfunction isPlainObject(value: unknown) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\ntype UseObjectUpdater<T extends Record<string | number | symbol, any>> = (\n  partialOrUpdaterFunction: Partial<T> | ((prev: T) => Partial<T>),\n) => void;\n\nexport default function useObject<\n  T extends Record<string | number | symbol, any>,\n>(initialValue: T): [T, UseObjectUpdater<T>] {\n  const [state, setState] = useState(initialValue);\n\n  const merge: UseObjectUpdater<T> = useCallback((partialOrUpdaterFunction) => {\n    if (partialOrUpdaterFunction instanceof Function)\n      return setState((previousState) => {\n        const newState = partialOrUpdaterFunction(previousState);\n        if (!isPlainObject(newState)) {\n          throw new Error('Invalid new state');\n        }\n\n        return { ...previousState, ...newState };\n      });\n\n    if (!isPlainObject(partialOrUpdaterFunction)) {\n      throw new Error('Invalid new state');\n    }\n\n    setState((previousState) => ({\n      ...previousState,\n      ...partialOrUpdaterFunction,\n    }));\n  }, []);\n\n  return [state, merge];\n}\n`;function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\",strong:\"strong\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useObject\"}),\" hook can be implemented using the \",(0,t.jsx)(e.code,{children:\"useState\"}),\" hook and implementing the updater function to merge the current state object with the new incoming object. To merge objects, you can use the \",(0,t.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\",children:[\"spread (\",(0,t.jsx)(e.code,{children:\"...\"}),\") syntax\"]}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\",children:(0,t.jsx)(e.code,{children:\"Object.assign\"})}),\" can also merge objects, but it is not recommended because it mutates the target object.\"]}),`\n`,(0,t.jsx)(d,{children:h}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Simply checking if an object is an \",(0,t.jsx)(e.code,{children:\"Object\"}),\" by using \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\",children:(0,t.jsx)(e.code,{children:\"typeof\"})}),\" is not enough to ensure that the variable is a POJO. For example, the \",(0,t.jsx)(e.code,{children:\"typeof\"}),\" operator returns \",(0,t.jsx)(e.code,{children:\"'object'\"}),\" for arrays, \",(0,t.jsx)(e.code,{children:\"null\"}),\", and other objects like \",(0,t.jsx)(e.code,{children:\"Date\"}),\", \",(0,t.jsx)(e.code,{children:\"RegExp\"}),\", and \",(0,t.jsx)(e.code,{children:\"Error\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"There are many ways to check if an object is a POJO. One example is defined in this solution.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`function isPlainObject(value: unknown) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another one is to reinstantiate the object in question with the \",(0,t.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\",children:[(0,t.jsx)(e.code,{children:\"Object()\"}),\" constructor\"]}),\". This method's definition is left as an exercise for the reader. Can you think of other reliable ways to check if an object is a POJO?\"]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var w=x;return v(U);})();\n;return Component;"
}