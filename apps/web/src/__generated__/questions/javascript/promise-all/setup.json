{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/promise-all\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/promise-all.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/promise-all.run.test.ts": "import promiseAll from './promise-all';\n\ndescribe('promiseAll', () => {\n  test('returns promise', () => {\n    const p = promiseAll([]);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await promiseAll([]);\n    expect(res).toEqual([]);\n  });\n\n  test('resolved', async () => {\n    expect.assertions(1);\n    const p0 = Promise.resolve(2);\n    const p1 = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(3);\n      }, 10);\n    });\n\n    const res = await promiseAll([p0, p1]);\n    expect(res).toEqual([2, 3]);\n  });\n\n  test('rejected', async () => {\n    expect.assertions(1);\n    const p0 = Promise.reject(2);\n    const p1 = Promise.reject(3);\n\n    await expect(promiseAll([p0, p1])).rejects.toBe(2);\n  });\n});\n",
    "/src/promise-all.submit.test.ts": "import promiseAll from './promise-all';\n\ndescribe('promiseAll', () => {\n  test('returns promise', () => {\n    const p = promiseAll([]);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await promiseAll([]);\n    expect(res).toEqual([]);\n  });\n\n  describe('one promise', () => {\n    describe('resolve', () => {\n      test('value', async () => {\n        expect.assertions(1);\n        const p0 = 2;\n\n        const res = await promiseAll([p0]);\n        expect(res).toEqual([2]);\n      });\n\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n\n        const res = await promiseAll([p0]);\n        expect(res).toEqual([2]);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 10);\n        });\n\n        const res = await promiseAll([p0]);\n        expect(res).toEqual([2]);\n      });\n    });\n\n    describe('reject', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(2);\n\n        await expect(promiseAll([p0])).rejects.toBe(2);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseAll([p0])).rejects.toBe(2);\n      });\n    });\n  });\n\n  describe('multiple promises', () => {\n    describe('all resolve', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n        const p1 = Promise.resolve(3);\n\n        const res = await promiseAll([p0, p1]);\n        expect(res).toEqual([2, 3]);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 10);\n        });\n\n        const res = await promiseAll([p0, p1]);\n        expect(res).toEqual([2, 3]);\n      });\n\n      test('mixture', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 10);\n        });\n        const p1 = Promise.resolve(3);\n        const p2 = 4;\n\n        const res = await promiseAll([p0, p1, p2]);\n        expect(res).toEqual([2, 3, 4]);\n      });\n\n      test('many delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(1);\n          }, 200);\n        });\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 100);\n        });\n        const p2 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 10);\n        });\n\n        const res = await promiseAll([p0, p1, p2]);\n        expect(res).toEqual([1, 2, 3]);\n      });\n    });\n\n    describe('all reject', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(2);\n        const p1 = Promise.reject(3);\n\n        await expect(promiseAll([p0, p1])).rejects.toBe(2);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(3);\n          }, 1);\n        });\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseAll([p0, p1])).rejects.toBe(3);\n      });\n\n      test('mixture', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseAll([p0, p1])).rejects.toBe(42);\n      });\n    });\n\n    describe('mix of resolve and reject', () => {\n      test('instant resolve delayed reject', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(42);\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        await expect(promiseAll([p0, p1])).rejects.toBe(2);\n      });\n\n      test('instant resolve instant reject', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(42);\n        const p1 = Promise.reject(2);\n\n        await expect(promiseAll([p0, p1])).rejects.toBe(2);\n      });\n\n      test('instant rejects', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = Promise.reject(43);\n\n        await expect(promiseAll([p0, p1])).rejects.toBe(42);\n      });\n\n      test('many promises', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(1);\n          }, 200);\n        });\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 100);\n        });\n        const p2 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(3);\n          }, 10);\n        });\n\n        await expect(promiseAll([p0, p1, p2])).rejects.toBe(3);\n      });\n    });\n  });\n});\n",
    "/src/promise-all.ts": "type ReturnValue<T> = { -readonly [P in keyof T]: Awaited<T[P]> };\n\nexport default function promiseAll<T extends readonly unknown[] | []>(\n  iterable: T,\n): Promise<ReturnValue<T>> {\n  return new Promise((resolve, reject) => {\n    const results = new Array(iterable.length);\n    let unresolved = iterable.length;\n\n    if (unresolved === 0) {\n      resolve(results as ReturnValue<T>);\n      return;\n    }\n\n    iterable.forEach(async (item, index) => {\n      try {\n        const value = await item;\n        results[index] = value;\n        unresolved -= 1;\n\n        if (unresolved === 0) {\n          resolve(results as ReturnValue<T>);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    });\n  });\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} iterable\n * @return {Promise<Array>}\n */\nexport default function promiseAll(iterable) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function promiseAll<T extends readonly unknown[] | []>(\n  iterable: T,\n): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/promise-all.ts",
    "run": "/src/promise-all.run.test.ts",
    "submit": "/src/promise-all.submit.test.ts"
  }
}