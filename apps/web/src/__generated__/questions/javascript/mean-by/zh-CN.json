{
  "description": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var c in e)l(r,c,{get:e[c],enumerable:!0})},a=(r,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of u(e))!p.call(r,d)&&d!==c&&l(r,d,{get:()=>e[d],enumerable:!(i=s(e,d))||i.enumerable});return r};var B=(r,e,c)=>(c=r!=null?m(y(r)):{},a(e||!r||!r.__esModule?l(c,\"default\",{value:r,enumerable:!0}):c,r)),N=r=>a(l({},\"__esModule\",{value:!0}),r);var t=x((F,o)=>{o.exports=_jsx_runtime});var M={};j(M,{default:()=>f,frontmatter:()=>g});var n=B(t()),g={title:\"Mean By\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u57FA\\u4E8E\\u6307\\u5B9A\\u6761\\u4EF6\\u7684\\u6C42\\u5E73\\u5747\\u503C\\u7684\\u51FD\\u6570\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u51FD\\u6570 \",(0,n.jsx)(e.code,{children:\"meanBy(array, iteratee)\"}),\"\\uFF0C\\u8BE5\\u51FD\\u6570\\u8BA1\\u7B97 \",(0,n.jsx)(e.code,{children:\"array\"}),\" \\u4E2D\\u7ECF\\u8FC7 \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \\u5904\\u7406\\u540E\\u6216\\u5728 \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \\u4E0B\\u6709\\u6548\\u7684\\u5143\\u7D20\\u7684\\u5E73\\u5747\\u503C\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u53C2\\u6570\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": \\u8981\\u8FED\\u4EE3\\u7684\\u6570\\u7EC4\\u3002\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": \\u6BCF\\u6B21\\u5143\\u7D20\\u8C03\\u7528\\u7684 iteratee\\uFF0C\\u5B83\\u662F\\u4E00\\u4E2A\\u63A5\\u53D7\\u4E00\\u4E2A\\u53C2\\u6570\\u7684\\u51FD\\u6570\\uFF1A\",(0,n.jsx)(e.em,{children:\"(value)\"}),\"\\u3002\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8FD4\\u56DE\\u503C\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(Number)\"})}),\": \\u8FD4\\u56DE\\u5E73\\u5747\\u503C\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u4F8B\\u5B50\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`meanBy([{ n: 1 }, { n: 3 }], (o) => o.n); // => 2\n\nmeanBy([2, 3, 1, 4], (num) => num); // => 2.5\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u8BE5\\u51FD\\u6570\\u5E94\\u5FFD\\u7565 \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \\u4EA7\\u751F \",(0,n.jsx)(e.code,{children:\"null\"}),\" \\u6216 \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" \\u7684\\u5143\\u7D20\\uFF0C\\u5E76\\u4E14\\u5F53 \",(0,n.jsx)(e.code,{children:\"array\"}),\" \\u4E3A\\u7A7A\\u6216\\u6CA1\\u6709\\u5339\\u914D\\u503C\\u65F6\\u8FD4\\u56DE \",(0,n.jsx)(e.code,{children:\"NaN\"}),\"\\u3002\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`meanBy([], (o) => o); // => NaN\n\nmeanBy([{ n: 1 }, { n: 2 }], (o) => o.m); // => NaN\n\nmeanBy([{ n: 1 }, { m: 2 }], (o) => o.m); // => 1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8D44\\u6E90\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#meanBy\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.meanBy\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var f=_;return N(M);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/mean-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/mean-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/mean-by.run.test.ts": "import meanBy from './mean-by';\n\ndescribe('meanBy', () => {\n  test('empty array', () => {\n    expect(meanBy([], (o) => o)).toEqual(NaN);\n  });\n\n  test('iteratee as a string', () => {\n    expect(meanBy([{ n: 1 }, { n: 3 }], (o) => o.n)).toEqual(2);\n  });\n\n  test('iteratee as a function', () => {\n    expect(meanBy([{ n: 1 }, { n: 3 }], (o: any) => o.n)).toEqual(2);\n  });\n});\n",
    "/src/mean-by.submit.test.ts": "import meanBy from './mean-by';\n\ndescribe('meanBy', () => {\n  test('empty input array', () => {\n    expect(meanBy([], (o) => o)).toEqual(NaN);\n  });\n\n  test('iteratee as a function', () => {\n    expect(meanBy([{ n: 1 }, { n: 2 }, { n: 3 }], (o) => o.n)).toEqual(2);\n    expect(\n      meanBy([{ age: 30 }, { age: 22 }, { age: 40 }], (o) => o.age),\n    ).toBeCloseTo(30.666666667);\n    expect(\n      meanBy(\n        [{ data: { score: 10 } }, { data: { score: 20 } }],\n        (o: any) => o.data.score,\n      ),\n    ).toEqual(15);\n  });\n\n  test('strings comparison', () => {\n    expect(\n      meanBy(['apple', 'pear', 'banana'], (fruit: any) => fruit.length),\n    ).toEqual(5);\n  });\n\n  test('non-existent property', () => {\n    expect(meanBy([{ n: 1 }, { m: 2 }], (o) => o.n)).toEqual(1 / 2);\n  });\n\n  test('mixed data types', () => {\n    expect(meanBy([1, '2', 3], (item: any) => Number(item))).toEqual(2);\n  });\n\n  test('iteratee as property name string', () => {\n    expect(meanBy([{ a: 2 }, { a: 4 }], (o) => o.a)).toEqual(3);\n    expect(meanBy([{ a: 1 }, { b: 2 }], (o) => o.a)).toEqual(1 / 2);\n  });\n\n  test('complex objects and arrays', () => {\n    expect(\n      meanBy(\n        [{ data: { value: 2 } }, { data: { value: 4 } }],\n        (o) => o.data.value,\n      ),\n    ).toEqual(3);\n    expect(\n      meanBy([{ values: [1, 2] }, { values: [3, 4] }], (o) =>\n        o.values.reduce((sum, n) => sum + n, 0),\n      ),\n    ).toEqual(5);\n  });\n\n  test('special numeric values', () => {\n    expect(meanBy([1, Infinity, 3], (n) => n)).toBe(Infinity);\n    expect(meanBy([1, NaN, 3], (n) => n)).toBeNaN();\n  });\n\n  test('sparse arrays', () => {\n    const sparseArray = [1, , 3];\n    expect(meanBy(sparseArray, (n) => n)).toEqual(4 / 3);\n  });\n\n  test('boolean and null values', () => {\n    expect(meanBy([true, false, true], (b) => (b ? 1 : 0))).toEqual(2 / 3);\n    expect(meanBy([1, null, 3], (n) => (n === null ? 0 : n))).toEqual(4 / 3);\n  });\n});\n",
    "/src/mean-by.ts": "export default function meanBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): number {\n  let sum = 0,\n    found = false;\n\n  // Iterate through array to find the mean.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current `result`.\n      found = true; // To indicate if there exists a valid value that fulfills `iteratee`.\n    }\n  }\n\n  if (!found) {\n    return NaN;\n  }\n  return sum / array.length;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1710806400,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "实现一个基于指定条件的求平均值的函数",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/mean-by",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": false,
    "ranking": 100,
    "similarQuestions": [
      "group-by",
      "min-by",
      "mean"
    ],
    "slug": "mean-by",
    "subtitle": null,
    "title": "Mean By",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Number} Returns the mean value.\n */\nexport default function meanBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function meanBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var t in e)l(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!v.call(n,a)&&a!==t&&l(n,a,{get:()=>e[a],enumerable:!(i=y(e,a))||i.enumerable});return n};var B=(n,e,t)=>(t=n!=null?m(x(n)):{},o(e||!n||!n.__esModule?l(t,\"default\",{value:n,enumerable:!0}):t,n)),T=n=>o(l({},\"__esModule\",{value:!0}),n);var u=g((X,c)=>{c.exports=_jsx_runtime});var C={};j(C,{default:()=>M});var r=B(u());var d=MDXCodeBlock;var h=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Number} Returns the mean value.\n */\nexport default function meanBy(array, iteratee) {\n  let sum = 0,\n    found = false;\n\n  // Iterate through array to find the mean.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current \\`result\\`.\n      found = true; // To indicate if there exists a valid value that fulfills \\`iteratee\\`.\n    }\n  }\n\n  if (!found) {\n    return NaN;\n  }\n  return sum / array.length;\n}\n`;var s=`export default function meanBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): number {\n  let sum = 0,\n    found = false;\n\n  // Iterate through array to find the mean.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current \\`result\\`.\n      found = true; // To indicate if there exists a valid value that fulfills \\`iteratee\\`.\n    }\n  }\n\n  if (!found) {\n    return NaN;\n  }\n  return sum / array.length;\n}\n`;function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"\\u8FD9\\u662F\\u4E00\\u4E2A\\u89E3\\u51B3\\u65B9\\u6848\\uFF0C\\u5B83\\u6839\\u636E\\u7ED9\\u5B9A\\u7684 \",(0,r.jsx)(e.code,{children:\"iteratee\"}),\" \\u67E5\\u627E \",(0,r.jsx)(e.code,{children:\"array\"}),\" \\u4E2D\\u5143\\u7D20\\u7684\\u5E73\\u5747\\u503C\\u3002\\u5B83\\u904D\\u5386 \",(0,r.jsx)(e.code,{children:\"array\"}),\"\\uFF0C\\u4F7F\\u7528\\u6570\\u7EC4\\u5143\\u7D20\\u8C03\\u7528 \",(0,r.jsx)(e.code,{children:\"iteratee\"}),\" \\u51FD\\u6570\\uFF0C\\u5E76\\u8DDF\\u8E2A\\u503C\\u7684\\u5E73\\u5747\\u503C\\u3002\"]}),`\n`,(0,r.jsx)(e.p,{children:\"\\u4F7F\\u7528\\u4E86\\u4E24\\u4E2A\\u53D8\\u91CF\\uFF1A\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"sum\"}),\"\\uFF1A\\u8DDF\\u8E2A\\u8FED\\u4EE3\\u503C\\u7684\\u603B\\u548C\\u3002\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"found\"}),\"\\uFF1A\\u8DDF\\u8E2A\\u662F\\u5426\\u627E\\u5230\\u8981\\u6DFB\\u52A0\\u5230 \",(0,r.jsx)(e.code,{children:\"sum\"}),\" \\u7684\\u6709\\u6548\\u6570\\u5B57\\uFF0C\\u5426\\u5219\\u51FD\\u6570\\u5C06\\u8FD4\\u56DE \",(0,r.jsx)(e.code,{children:\"NaN\"}),\"\\u3002\"]}),`\n`]}),`\n`,(0,r.jsx)(d,{languages:{jsx:h,tsx:s}}),`\n`,(0,r.jsx)(e.h2,{children:\"\\u8FB9\\u7F18\\u60C5\\u51B5\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"\\u7531\\u4E8E \",(0,r.jsx)(e.code,{children:\"iteratee\"}),\" \\u662F\\u7528\\u6237\\u63D0\\u4F9B\\u7684\\uFF0C\\u5E76\\u4E14\\u53EF\\u4EE5\\u8FD4\\u56DE\\u4EFB\\u4F55\\u7C7B\\u578B\\u7684\\u503C\\uFF0C\\u56E0\\u6B64\\u6211\\u4EEC\\u5FC5\\u987B\\u7279\\u522B\\u6CE8\\u610F\\u5FFD\\u7565\\u65E0\\u6CD5\\u6BD4\\u8F83\\u7684\\u8BA1\\u7B97\\u503C\\uFF0C\\u4F8B\\u5982 \",(0,r.jsx)(e.code,{children:\"null\"}),\" \\u548C \",(0,r.jsx)(e.code,{children:\"undefined\"}),\"\\u3002\\u5BF9\\u4E8E\\u6B64\\u7C7B\\u8BA1\\u7B97\\u503C\\uFF0C\\u5E94\\u5B8C\\u5168\\u5FFD\\u7565\\u5B83\\u4EEC\\u3002\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"\\u8D44\\u6E90\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#meanBy\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.meanBy\"})]})}),`\n`]})]})}function b(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(f,n)})):f(n)}var M=b;return T(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/mean-by.ts",
    "run": "/src/mean-by.run.test.ts",
    "submit": "/src/mean-by.submit.test.ts"
  }
}