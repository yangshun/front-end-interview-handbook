{
  "description": "var Component=(()=>{var m=Object.create;var t=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var c in e)t(r,c,{get:e[c],enumerable:!0})},l=(r,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!y.call(r,a)&&a!==c&&t(r,a,{get:()=>e[a],enumerable:!(i=s(e,a))||i.enumerable});return r};var x=(r,e,c)=>(c=r!=null?m(p(r)):{},l(e||!r||!r.__esModule?t(c,\"default\",{value:r,enumerable:!0}):c,r)),j=r=>l(t({},\"__esModule\",{value:!0}),r);var d=f((w,o)=>{o.exports=_jsx_runtime});var _={};g(_,{default:()=>v,frontmatter:()=>B});var n=x(d()),B={title:\"Mean By\",excerpt:\"Implement a function that finds the mean value based on the specified criteria\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"meanBy(array, iteratee)\"}),\" that calculates the mean value of the element inside \",(0,n.jsx)(e.code,{children:\"array\"}),\" after going through or is valid under \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to iterate over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The iteratee invoked per element, which is a function that accepts one argument: \",(0,n.jsx)(e.em,{children:\"(value)\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(Number)\"})}),\": Returns the mean value.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`meanBy([{ n: 1 }, { n: 3 }], (o) => o.n); // => 2\n\nmeanBy([2, 3, 1, 4], (num) => num); // => 2.5\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should ignore elements where \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" produces \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" and return \",(0,n.jsx)(e.code,{children:\"NaN\"}),\" when \",(0,n.jsx)(e.code,{children:\"array\"}),\" is empty or has no matching value.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`meanBy([], (o) => o); // => NaN\n\nmeanBy([{ n: 1 }, { n: 2 }], (o) => o.m); // => NaN\n\nmeanBy([{ n: 1 }, { m: 2 }], (o) => o.m); // => 1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#meanBy\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.meanBy\"})]})}),`\n`]})]})}function N(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var v=N;return j(_);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a function that finds the mean value based on the specified criteria",
    "title": "Mean By"
  },
  "solution": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{for(var n in e)o(r,n,{get:e[n],enumerable:!0})},i=(r,e,n,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!g.call(r,a)&&a!==n&&o(r,a,{get:()=>e[a],enumerable:!(l=y(e,a))||l.enumerable});return r};var T=(r,e,n)=>(n=r!=null?m(v(r)):{},i(e||!r||!r.__esModule?o(n,\"default\",{value:r,enumerable:!0}):n,r)),B=r=>i(o({},\"__esModule\",{value:!0}),r);var c=x((C,u)=>{u.exports=_jsx_runtime});var w={};b(w,{default:()=>N});var t=T(c());var d=MDXCodeBlock;var s=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Number} Returns the mean value.\n */\nexport default function meanBy(array, iteratee) {\n  let sum = 0,\n    found = false;\n\n  // Iterate through array to find the mean.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current \\`result\\`.\n      found = true; // To indicate if there exists a valid value that fulfills \\`iteratee\\`.\n    }\n  }\n\n  if (!found) {\n    return NaN;\n  }\n  return sum / array.length;\n}\n`;var h=`export default function meanBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): number {\n  let sum = 0,\n    found = false;\n\n  // Iterate through array to find the mean.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current \\`result\\`.\n      found = true; // To indicate if there exists a valid value that fulfills \\`iteratee\\`.\n    }\n  }\n\n  if (!found) {\n    return NaN;\n  }\n  return sum / array.length;\n}\n`;function f(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here's a solution that finds the mean of elements in \",(0,t.jsx)(e.code,{children:\"array\"}),\" based on a given \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\". It iterates through the \",(0,t.jsx)(e.code,{children:\"array\"}),\", calls the \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\" function with the array element, and tracks the mean of the values.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Two variables are used:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"sum\"}),\": Tracks the sum of the iterated values.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"found\"}),\": Tracks whether a valid number is found to be added to \",(0,t.jsx)(e.code,{children:\"sum\"}),\", else the function will return \",(0,t.jsx)(e.code,{children:\"NaN\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(d,{languages:{jsx:s,tsx:h}}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Because \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\" is user-provided and can return a value of any type, we have to pay special attention to ignore computed values that cannot be compared, like \",(0,t.jsx)(e.code,{children:\"null\"}),\" and \",(0,t.jsx)(e.code,{children:\"undefined\"}),\". For such computed values, they should be ignored entirely.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#meanBy\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.meanBy\"})]})}),`\n`]})]})}function k(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(f,r)})):f(r)}var N=k;return B(w);})();\n;return Component;"
}