{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/mean-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/mean-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/mean-by.run.test.ts": "import meanBy from './mean-by';\n\ndescribe('meanBy', () => {\n  test('empty array', () => {\n    expect(meanBy([], (o) => o)).toEqual(NaN);\n  });\n\n  test('iteratee as a string', () => {\n    expect(meanBy([{ n: 1 }, { n: 3 }], (o) => o.n)).toEqual(2);\n  });\n\n  test('iteratee as a function', () => {\n    expect(meanBy([{ n: 1 }, { n: 3 }], (o: any) => o.n)).toEqual(2);\n  });\n});\n",
    "/src/mean-by.submit.test.ts": "import meanBy from './mean-by';\n\ndescribe('meanBy', () => {\n  test('empty input array', () => {\n    expect(meanBy([], (o) => o)).toEqual(NaN);\n  });\n\n  test('iteratee as a function', () => {\n    expect(meanBy([{ n: 1 }, { n: 2 }, { n: 3 }], (o) => o.n)).toEqual(2);\n    expect(\n      meanBy([{ age: 30 }, { age: 22 }, { age: 40 }], (o) => o.age),\n    ).toBeCloseTo(30.666666667);\n    expect(\n      meanBy(\n        [{ data: { score: 10 } }, { data: { score: 20 } }],\n        (o: any) => o.data.score,\n      ),\n    ).toEqual(15);\n  });\n\n  test('strings comparison', () => {\n    expect(\n      meanBy(['apple', 'pear', 'banana'], (fruit: any) => fruit.length),\n    ).toEqual(5);\n  });\n\n  test('non-existent property', () => {\n    expect(meanBy([{ n: 1 }, { m: 2 }], (o) => o.n)).toEqual(1 / 2);\n  });\n\n  test('mixed data types', () => {\n    expect(meanBy([1, '2', 3], (item: any) => Number(item))).toEqual(2);\n  });\n\n  test('iteratee as property name string', () => {\n    expect(meanBy([{ a: 2 }, { a: 4 }], (o) => o.a)).toEqual(3);\n    expect(meanBy([{ a: 1 }, { b: 2 }], (o) => o.a)).toEqual(1 / 2);\n  });\n\n  test('complex objects and arrays', () => {\n    expect(\n      meanBy(\n        [{ data: { value: 2 } }, { data: { value: 4 } }],\n        (o) => o.data.value,\n      ),\n    ).toEqual(3);\n    expect(\n      meanBy([{ values: [1, 2] }, { values: [3, 4] }], (o) =>\n        o.values.reduce((sum, n) => sum + n, 0),\n      ),\n    ).toEqual(5);\n  });\n\n  test('special numeric values', () => {\n    expect(meanBy([1, Infinity, 3], (n) => n)).toBe(Infinity);\n    expect(meanBy([1, NaN, 3], (n) => n)).toBeNaN();\n  });\n\n  test('sparse arrays', () => {\n    const sparseArray = [1, , 3];\n    expect(meanBy(sparseArray, (n) => n)).toEqual(4 / 3);\n  });\n\n  test('boolean and null values', () => {\n    expect(meanBy([true, false, true], (b) => (b ? 1 : 0))).toEqual(2 / 3);\n    expect(meanBy([1, null, 3], (n) => (n === null ? 0 : n))).toEqual(4 / 3);\n  });\n});\n",
    "/src/mean-by.ts": "export default function meanBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): number {\n  let sum = 0,\n    found = false;\n\n  // Iterate through array to find the mean.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current `result`.\n      found = true; // To indicate if there exists a valid value that fulfills `iteratee`.\n    }\n  }\n\n  if (!found) {\n    return NaN;\n  }\n  return sum / array.length;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Number} Returns the mean value.\n */\nexport default function meanBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function meanBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/mean-by.ts",
    "run": "/src/mean-by.run.test.ts",
    "submit": "/src/mean-by.submit.test.ts"
  }
}