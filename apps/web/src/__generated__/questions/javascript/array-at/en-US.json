{
  "description": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),A=(t,e)=>{for(var n in e)o(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of h(e))!g.call(t,a)&&a!==n&&o(t,a,{get:()=>e[a],enumerable:!(c=m(e,a))||c.enumerable});return t};var f=(t,e,n)=>(n=t!=null?p(y(t)):{},i(e||!t||!t.__esModule?o(n,\"default\",{value:t,enumerable:!0}):n,t)),x=t=>i(o({},\"__esModule\",{value:!0}),t);var s=u((D,d)=>{d.exports=_jsx_runtime});var b={};A(b,{default:()=>_,frontmatter:()=>j});var r=f(s()),j={title:\"Array.prototype.at\",excerpt:\"Implement the Array.prototype.at() method\"};function l(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:\"Array.prototype.at\"}),\" takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Implement \",(0,r.jsx)(e.code,{children:\"Array.prototype.at\"}),\". To avoid overwriting the actual \",(0,r.jsx)(e.code,{children:\"Array.prototype.at\"}),\", we shall instead implement it as \",(0,r.jsx)(e.code,{children:\"Array.prototype.myAt\"}),\".\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const arr = [42, 79];\narr.myAt(0); // 42\narr.myAt(1); // 79\narr.myAt(2); // undefined\n\narr.myAt(-1); // 79\narr.myAt(-2); // 42\narr.myAt(-3); // undefined\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"There are some tricky cases to handle. You are recommended to read the specification for \",(0,r.jsx)(e.code,{children:\"Array.prototype.at\"}),\" on \",(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\",children:\"MDN Docs\"}),\" before attempting.\"]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var _=v;return x(b);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/array-at\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/array-at.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/array-at.run.test.ts": "import './array-at';\n\ndescribe('Array.prototype.myAt', () => {\n  const arr = [42, 34];\n\n  test('first value', () => {\n    expect(arr.myAt(0)).toBe(42);\n  });\n\n  test('last value', () => {\n    expect(arr.myAt(-1)).toBe(34);\n  });\n\n  test('out of bounds', () => {\n    expect(arr.myAt(2)).toBeUndefined();\n  });\n});\n",
    "/src/array-at.submit.test.ts": "import './array-at';\n\ndescribe('Array.prototype.myAt', () => {\n  test('empty array', () => {\n    expect([].myAt(0)).toBeUndefined();\n    expect([].myAt(-1)).toBeUndefined();\n    expect([].myAt(1)).toBeUndefined();\n  });\n\n  describe('one value', () => {\n    const arr = [42];\n    test('non-negative', () => {\n      expect(arr.myAt(0)).toBe(42);\n    });\n\n    test('negative', () => {\n      expect(arr.myAt(-1)).toBe(42);\n    });\n\n    test('out-of-range', () => {\n      expect(arr.myAt(1)).toBeUndefined();\n      expect(arr.myAt(2)).toBeUndefined();\n      expect(arr.myAt(-2)).toBeUndefined();\n    });\n  });\n\n  describe('two values', () => {\n    const arr = [42, 79];\n\n    test('non-negative', () => {\n      expect(arr.myAt(0)).toBe(42);\n      expect(arr.myAt(1)).toBe(79);\n    });\n\n    test('negative', () => {\n      expect(arr.myAt(-1)).toBe(79);\n      expect(arr.myAt(-2)).toBe(42);\n    });\n\n    test('out-of-range', () => {\n      expect(arr.myAt(2)).toBeUndefined();\n      expect(arr.myAt(3)).toBeUndefined();\n      expect(arr.myAt(-3)).toBeUndefined();\n      expect(arr.myAt(-4)).toBeUndefined();\n    });\n  });\n\n  describe('multiple values', () => {\n    const arr = [42, 79, 103];\n\n    test('non-negative', () => {\n      expect(arr.myAt(0)).toBe(42);\n      expect(arr.myAt(1)).toBe(79);\n      expect(arr.myAt(2)).toBe(103);\n    });\n\n    test('negative', () => {\n      expect(arr.myAt(-1)).toBe(103);\n      expect(arr.myAt(-2)).toBe(79);\n      expect(arr.myAt(-3)).toBe(42);\n    });\n\n    test('out-of-range', () => {\n      expect(arr.myAt(3)).toBeUndefined();\n      expect(arr.myAt(4)).toBeUndefined();\n      expect(arr.myAt(-4)).toBeUndefined();\n      expect(arr.myAt(-5)).toBeUndefined();\n    });\n  });\n\n  test('sparse arrays', () => {\n    const arr = [1, 2, , 4];\n    expect(arr.myAt(2)).toBeUndefined();\n    expect(arr.myAt(-2)).toBeUndefined();\n  });\n});\n",
    "/src/array-at.ts": "interface Array<T> {\n  myAt(index: number): T | undefined;\n}\n\nArray.prototype.myAt = function (index: number) {\n  const len = this.length;\n  if (index < -len || index >= len) {\n    return;\n  }\n\n  return this[(index + len) % len];\n};\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1658102400,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement the Array.prototype.at() method",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/array-at",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "array-at",
    "subtitle": null,
    "title": "Array.prototype.at",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {number} index\n * @return {any | undefined}\n */\nArray.prototype.myAt = function (index) {\n  throw 'Not implemented!';\n};",
    "ts": "interface Array<T> {\n  myAt(index: number): T | undefined;\n}\n\nArray.prototype.myAt = function (index: number) {\n  throw 'Not implemented!';\n};"
  },
  "solution": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},d=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!A.call(t,i)&&i!==r&&o(t,i,{get:()=>e[i],enumerable:!(c=x(e,i))||c.enumerable});return t};var w=(t,e,r)=>(r=t!=null?m(g(t)):{},d(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),j=t=>d(o({},\"__esModule\",{value:!0}),t);var s=b((I,l)=>{l.exports=_jsx_runtime});var T={};v(T,{default:()=>C});var n=w(s());var a=MDXCodeBlock;var h=`/**\n * @param {number} index\n * @return {any | undefined}\n */\nArray.prototype.myAt = function (index) {\n  const len = this.length;\n  if (index < -len || index >= len) {\n    return;\n  }\n\n  return this[(index + len) % len];\n};\n`;var p=`interface Array<T> {\n  myAt(index: number): T | undefined;\n}\n\nArray.prototype.myAt = function (index: number) {\n  const len = this.length;\n  if (index < -len || index >= len) {\n    return;\n  }\n\n  return this[(index + len) % len];\n};\n`;var u=`/**\n * @param {number} index\n * @return {any | undefined}\n */\nArray.prototype.myAt = function (index) {\n  const len = this.length;\n  const relativeIndex = Number(index);\n  const k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;\n\n  if (k < 0 || k >= len) {\n    return undefined;\n  }\n\n  return this[k];\n};\n`;function y(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",pre:\"pre\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Array.prototype.at\"}),\" method allows accessing elements of an array using positive or negative indices, similar to how Python's list indexing works which is convenient when accessing items from the back. Traditionally, to access the last item you'd do \",(0,n.jsx)(e.code,{children:\"arr[arr.length - 1]\"}),\", but with this method you can do \",(0,n.jsx)(e.code,{children:\"arr.at(-1)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For indices that are out of bounds (defined as \",(0,n.jsx)(e.code,{children:\"index < -array.length || index >= array.length\"}),\"), \",(0,n.jsx)(e.code,{children:\"undefined\"}),' is returned. To safely access the index, we can allow the index to \"wrap around\" by adding ',(0,n.jsx)(e.code,{children:\"array.length\"}),\" to indices so that negative indices will become the positive counterpart. However, for positive values, this will now cause the index to exceed the array range. Hence we modulo by \",(0,n.jsx)(e.code,{children:\"array.length\"}),\" to get the index back within the range.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that the specifications state that the \",(0,n.jsx)(e.code,{children:\"index\"}),\" is converted to an integer first, so \",(0,n.jsx)(e.code,{children:\"Array.prototype.at\"}),\" works even for string versions of indices.\"]}),`\n`,(0,n.jsx)(a,{languages:{jsx:h,tsx:p}}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Using non-integer index such as \",(0,n.jsx)(e.code,{children:\"[42, 79].at('1')\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"One-liner Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can cheat the autograder by doing this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`Array.prototype.myAt = Array.prototype.at;\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Spec Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here's a solution that is based off the \",(0,n.jsxs)(e.a,{href:\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.at\",children:[(0,n.jsx)(e.code,{children:\"Array.prototype.at\"}),\" ECMAScript specification\"]}),\".\"]}),`\n`,(0,n.jsx)(a,{children:u}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at\",children:[(0,n.jsx)(e.code,{children:\"Array.prototype.at\"}),\" | MDN\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.at\",children:[(0,n.jsx)(e.code,{children:\"Array.prototype.at\"}),\" ECMAScript specification\"]})}),`\n`]})]})}function _(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(y,t)})):y(t)}var C=_;return j(T);})();\n;return Component;",
  "workspace": {
    "main": "/src/array-at.ts",
    "run": "/src/array-at.run.test.ts",
    "submit": "/src/array-at.submit.test.ts"
  }
}