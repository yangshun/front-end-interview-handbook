{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/array-at\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/array-at.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/array-at.run.test.ts": "import './array-at';\n\ndescribe('Array.prototype.myAt', () => {\n  const arr = [42, 34];\n\n  test('first value', () => {\n    expect(arr.myAt(0)).toBe(42);\n  });\n\n  test('last value', () => {\n    expect(arr.myAt(-1)).toBe(34);\n  });\n\n  test('out of bounds', () => {\n    expect(arr.myAt(2)).toBeUndefined();\n  });\n});\n",
    "/src/array-at.submit.test.ts": "import './array-at';\n\ndescribe('Array.prototype.myAt', () => {\n  test('empty array', () => {\n    expect([].myAt(0)).toBeUndefined();\n    expect([].myAt(-1)).toBeUndefined();\n    expect([].myAt(1)).toBeUndefined();\n  });\n\n  describe('one value', () => {\n    const arr = [42];\n    test('non-negative', () => {\n      expect(arr.myAt(0)).toBe(42);\n    });\n\n    test('negative', () => {\n      expect(arr.myAt(-1)).toBe(42);\n    });\n\n    test('out-of-range', () => {\n      expect(arr.myAt(1)).toBeUndefined();\n      expect(arr.myAt(2)).toBeUndefined();\n      expect(arr.myAt(-2)).toBeUndefined();\n    });\n  });\n\n  describe('two values', () => {\n    const arr = [42, 79];\n\n    test('non-negative', () => {\n      expect(arr.myAt(0)).toBe(42);\n      expect(arr.myAt(1)).toBe(79);\n    });\n\n    test('negative', () => {\n      expect(arr.myAt(-1)).toBe(79);\n      expect(arr.myAt(-2)).toBe(42);\n    });\n\n    test('out-of-range', () => {\n      expect(arr.myAt(2)).toBeUndefined();\n      expect(arr.myAt(3)).toBeUndefined();\n      expect(arr.myAt(-3)).toBeUndefined();\n      expect(arr.myAt(-4)).toBeUndefined();\n    });\n  });\n\n  describe('multiple values', () => {\n    const arr = [42, 79, 103];\n\n    test('non-negative', () => {\n      expect(arr.myAt(0)).toBe(42);\n      expect(arr.myAt(1)).toBe(79);\n      expect(arr.myAt(2)).toBe(103);\n    });\n\n    test('negative', () => {\n      expect(arr.myAt(-1)).toBe(103);\n      expect(arr.myAt(-2)).toBe(79);\n      expect(arr.myAt(-3)).toBe(42);\n    });\n\n    test('out-of-range', () => {\n      expect(arr.myAt(3)).toBeUndefined();\n      expect(arr.myAt(4)).toBeUndefined();\n      expect(arr.myAt(-4)).toBeUndefined();\n      expect(arr.myAt(-5)).toBeUndefined();\n    });\n  });\n\n  test('sparse arrays', () => {\n    const arr = [1, 2, , 4];\n    expect(arr.myAt(2)).toBeUndefined();\n    expect(arr.myAt(-2)).toBeUndefined();\n  });\n});\n",
    "/src/array-at.ts": "interface Array<T> {\n  myAt(index: number): T | undefined;\n}\n\nArray.prototype.myAt = function (index: number) {\n  const len = this.length;\n  if (index < -len || index >= len) {\n    return;\n  }\n\n  return this[(index + len) % len];\n};\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} index\n * @return {any | undefined}\n */\nArray.prototype.myAt = function (index) {\n  throw 'Not implemented!';\n};",
    "ts": "interface Array<T> {\n  myAt(index: number): T | undefined;\n}\n\nArray.prototype.myAt = function (index: number) {\n  throw 'Not implemented!';\n};"
  },
  "workspace": {
    "main": "/src/array-at.ts",
    "run": "/src/array-at.run.test.ts",
    "submit": "/src/array-at.submit.test.ts"
  }
}