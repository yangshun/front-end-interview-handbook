{
  "description": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!g.call(t,c)&&c!==r&&o(t,c,{get:()=>e[c],enumerable:!(i=h(e,c))||i.enumerable});return t};var f=(t,e,r)=>(r=t!=null?d(p(t)):{},a(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),v=t=>a(o({},\"__esModule\",{value:!0}),t);var l=j((M,u)=>{u.exports=_jsx_runtime});var k={};x(k,{default:()=>b,frontmatter:()=>_});var n=f(l()),_={title:\"Make Counter II\",excerpt:\"Implement a function that returns a counter object with methods to retrieve and manipulate the value\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" that accepts an optional integer value (defaults to 0) and returns an object that contains the following methods:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"get()\"}),\": returns the current value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"increment()\"}),\": increments the current value and returns it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"decrement()\"}),\": decrements the current value and returns it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"reset()\"}),\": resets the current value to the initial value.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const counter = makeCounter();\ncounter.get(); // 0\ncounter.increment(); // 1\ncounter.increment(); // 2\ncounter.get(); // 2\ncounter.reset(); // 0\ncounter.decrement(); // -1\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"With a custom initial value:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const counter = makeCounter(5);\ncounter.get(); // 5\ncounter.decrement(); // 4\ncounter.decrement(); // 3\ncounter.get(); // 3\ncounter.reset(); // 5\ncounter.increment(); // 6\n`})})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var b=C;return v(k);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a function that returns a counter object with methods to retrieve and manipulate the value",
    "title": "Make Counter II"
  },
  "solution": "var Component=(()=>{var V=Object.create;var a=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},l=(t,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of v(e))!b.call(t,r)&&r!==i&&a(t,r,{get:()=>e[r],enumerable:!(c=C(e,r))||c.enumerable});return t};var F=(t,e,i)=>(i=t!=null?V(x(t)):{},l(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>l(a({},\"__esModule\",{value:!0}),t);var d=g((A,o)=>{o.exports=_jsx_runtime});var X={};k(X,{default:()=>M});var n=F(d());var u=MDXCodeBlock;var h=`/**\n * @param {number} initialValue\n * @return {{get: Function, increment: Function, decrement: Function, reset: Function }}\n */\nexport default function makeCounter(initialValue = 0) {\n  let count = initialValue;\n\n  return {\n    get: () => count,\n    increment: () => ++count,\n    decrement: () => --count,\n    reset: () => (count = initialValue),\n  };\n}\n`;var s=`interface Counter {\n  get: () => number;\n  increment: () => number;\n  decrement: () => number;\n  reset: () => number;\n}\n\nexport default function makeCounter(initialValue: number = 0): Counter {\n  let count = initialValue;\n\n  return {\n    get: () => count,\n    increment: () => ++count,\n    decrement: () => --count,\n    reset: () => (count = initialValue),\n  };\n}\n`;var m=`class Counter {\n  constructor(initialValue = 0) {\n    this.initialValue = initialValue;\n    this.value = initialValue;\n  }\n  get() {\n    return this.value;\n  }\n  increment() {\n    return ++this.value;\n  }\n  decrement() {\n    return --this.value;\n  }\n  reset() {\n    this.value = this.initialValue;\n    return this.value;\n  }\n}\n\n/**\n * @param {number} initialValue\n * @return {{get: Function, increment: Function, decrement: Function, reset: Function }}\n */\nexport default function makeCounter(initialValue = 0) {\n  return new Counter(initialValue);\n}\n`;var p=`class Counter {\n  initialValue: number;\n  value: number;\n\n  constructor(initialValue = 0) {\n    this.initialValue = initialValue;\n    this.value = initialValue;\n  }\n  get() {\n    return this.value;\n  }\n  increment() {\n    return ++this.value;\n  }\n  decrement() {\n    return --this.value;\n  }\n  reset() {\n    this.value = this.initialValue;\n    return this.value;\n  }\n}\n\n/**\n * @param {number} initialValue\n * @return {{get: Function, increment: Function, decrement: Function, reset: Function }}\n */\nexport default function makeCounter(initialValue = 0) {\n  return new Counter(initialValue);\n}\n`;function f(t){let e=Object.assign({h2:\"h2\",h3:\"h3\",ol:\"ol\",li:\"li\",code:\"code\",ul:\"ul\",p:\"p\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Approach 1: Directly return an object\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" function accepts an optional parameter \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\", which is set to 0 by default.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Inside the \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" function, we declare a variable \",(0,n.jsx)(e.code,{children:\"count\"}),\" and initialize it with the provided \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return an object with four methods: \",(0,n.jsx)(e.code,{children:\"get\"}),\", \",(0,n.jsx)(e.code,{children:\"increment\"}),\", \",(0,n.jsx)(e.code,{children:\"decrement\"}),\", and \",(0,n.jsx)(e.code,{children:\"reset\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"get\"}),\" method simply returns the current value of count.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"increment\"}),\" method increments the count by 1 using the prefix increment operator (\",(0,n.jsx)(e.code,{children:\"++x\"}),\") and returns the updated value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"decrement\"}),\" method decrements the count by 1 using the prefix decrement operator (\",(0,n.jsx)(e.code,{children:\"--x\"}),\") and returns the updated value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"reset\"}),\" method resets the \",(0,n.jsx)(e.code,{children:\"count\"}),\" to the initial value provided in the \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" function and returns it.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(u,{languages:{jsx:h,tsx:s}}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Approach 2: Return a \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" class\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can also create a separate \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" class that contains the 4 required methods. The \",(0,n.jsx)(e.code,{children:\"makeCounter\"}),\" function will simply be a wrapper than returns an instance of \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" initialized with the \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\". The main difference here is that we need to use instance variables to keep track of the current value and the \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\" since we cannot rely on closures.\"]}),`\n`,(0,n.jsx)(u,{languages:{jsx:m,tsx:p}})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var M=D;return w(X);})();\n;return Component;"
}