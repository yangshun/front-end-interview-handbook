{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/get-elements-by-tag-name\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/get-elements-by-tag-name.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/get-elements-by-tag-name.run.test.ts": "import getElementsByTagName from './get-elements-by-tag-name';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByTagName', () => {\n  test('empty tree', () => {\n    const document = new DOMParser().parseFromString(``, 'text/html');\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('non-existent tags', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const imgs = getElementsByTagName(document.body, 'img');\n    const expected = document.body.getElementsByTagName('img');\n    checkResults(expected, imgs);\n  });\n\n  test(\"doesn't include itself\", () => {\n    const document = new DOMParser().parseFromString(\n      `<div></div>`,\n      'text/html',\n    );\n\n    const body = getElementsByTagName(document.body, 'body');\n    const expected = document.body.getElementsByTagName('body');\n    checkResults(expected, body);\n  });\n\n  test('single element with no nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div></div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('comment nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <!-- Here's a comment -->\n        <div>Hello</div>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('single element with child nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n});\n",
    "/src/get-elements-by-tag-name.submit.test.ts": "import getElementsByTagName from './get-elements-by-tag-name';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByTagName', () => {\n  test('empty tree', () => {\n    const document = new DOMParser().parseFromString(``, 'text/html');\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('non-existent tags', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const imgs = getElementsByTagName(document.body, 'img');\n    const expected = document.body.getElementsByTagName('img');\n    checkResults(expected, imgs);\n  });\n\n  test(\"doesn't include itself\", () => {\n    const document = new DOMParser().parseFromString(\n      `<div></div>`,\n      'text/html',\n    );\n\n    const body = getElementsByTagName(document.body, 'body');\n    const expected = document.body.getElementsByTagName('body');\n    checkResults(expected, body);\n  });\n\n  test('single element with no nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div></div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('comment nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <!-- Here's a comment -->\n        <div>Hello</div>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  test('single element with child nodes', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n      </div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'div');\n    const expected = document.body.getElementsByTagName('div');\n\n    checkResults(expected, divs);\n  });\n\n  describe('deeply-nested trees', () => {\n    test('shallow', () => {\n      const document = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div></div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByTagName(document.body, 'div');\n      const expectedDivs = document.body.getElementsByTagName('div');\n      checkResults(expectedDivs, divs);\n\n      const spans = getElementsByTagName(document.body, 'span');\n      const expectedSpans = document.body.getElementsByTagName('span');\n      checkResults(expectedSpans, spans);\n    });\n\n    test('moderately deep', () => {\n      const document = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <span>Hello</span>\n            </div>\n          </div>\n        </div>\n        <div>Hello</div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByTagName(document.body, 'div');\n      const expectedDivs = document.body.getElementsByTagName('div');\n      checkResults(expectedDivs, divs);\n\n      const spans = getElementsByTagName(document.body, 'span');\n      const expectedSpans = document.body.getElementsByTagName('span');\n      checkResults(expectedSpans, spans);\n    });\n\n    test('very deep', () => {\n      const document = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <div>\n                <div>\n                  <div>\n                    <div>\n                      Deep div\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>\n          Hello\n          <div>\n            <div>\n              <div>\n                <div>\n                  <div>\n                    <div>\n                      Deep div\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>`,\n        'text/html',\n      );\n\n      const divs = getElementsByTagName(document.body, 'div');\n      const expectedDivs = document.body.getElementsByTagName('div');\n      checkResults(expectedDivs, divs);\n\n      const spans = getElementsByTagName(document.body, 'span');\n      const expectedSpans = document.body.getElementsByTagName('span');\n      checkResults(expectedSpans, spans);\n    });\n  });\n\n  test('non-lower case tag name', () => {\n    const document = new DOMParser().parseFromString(\n      `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <span>Hello</span>\n            </div>\n          </div>\n        </div>\n        <div>Hello</div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagName(document.body, 'DIV');\n    const expectedDivs = document.body.getElementsByTagName('DIV');\n    checkResults(expectedDivs, divs);\n\n    const spans = getElementsByTagName(document.body, 'sPaN');\n    const expectedSpans = document.body.getElementsByTagName('sPaN');\n    checkResults(expectedSpans, spans);\n  });\n});\n",
    "/src/get-elements-by-tag-name.ts": "export default function getElementsByTagName(\n  element: Element,\n  tagNameParam: string,\n): Array<Element> {\n  const elements: Array<Element> = [];\n  const tagName = tagNameParam.toUpperCase();\n\n  function traverse(el: Element) {\n    if (el == null) {\n      return;\n    }\n\n    if (el.tagName === tagName) {\n      elements.push(el);\n    }\n\n    for (const child of el.children) {\n      traverse(child);\n    }\n  }\n\n  for (const child of element.children) {\n    traverse(child);\n  }\n\n  return elements;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Element} el\n * @param {string} tagName\n * @return {Array<Element>}\n */\nexport default function getElementsByTagName(el, tagName) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function getElementsByTagName(\n  el: Element,\n  tagName: string,\n): Array<Element> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/get-elements-by-tag-name.ts",
    "run": "/src/get-elements-by-tag-name.run.test.ts",
    "submit": "/src/get-elements-by-tag-name.submit.test.ts"
  }
}