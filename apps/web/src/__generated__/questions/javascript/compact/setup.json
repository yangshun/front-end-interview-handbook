{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/compact\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/compact.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/compact.run.test.ts": "import compact from './compact';\n\ndescribe('compact', () => {\n  test('empty array', () => {\n    expect(compact([])).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(compact([1])).toEqual([1]);\n    expect(compact([null])).toEqual([]);\n  });\n\n  test('two-element array', () => {\n    expect(compact([1, 2])).toEqual([1, 2]);\n    expect(compact([null, 1])).toEqual([1]);\n    expect(compact([1, null])).toEqual([1]);\n    expect(compact([false, null])).toEqual([]);\n  });\n});\n",
    "/src/compact.submit.test.ts": "import compact from './compact';\n\ndescribe('compact', () => {\n  test('empty array', () => {\n    expect(compact([])).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(compact([1])).toEqual([1]);\n    expect(compact([null])).toEqual([]);\n  });\n\n  test('two-element array', () => {\n    expect(compact([1, 2])).toEqual([1, 2]);\n    expect(compact([null, 1])).toEqual([1]);\n    expect(compact([1, null])).toEqual([1]);\n    expect(compact([false, null])).toEqual([]);\n  });\n\n  test('remove all falsey values from the input array', () => {\n    expect(compact([0, 1, false, 2, '', 3])).toEqual([1, 2, 3]);\n  });\n\n  test('only falsey values', () => {\n    expect(compact([null, undefined, NaN, 0, false, '', ''])).toEqual([]);\n  });\n\n  test('no falsey values', () => {\n    expect(compact(['hello', true, 123, [], {}])).toEqual([\n      'hello',\n      true,\n      123,\n      [],\n      {},\n    ]);\n  });\n\n  test('sparse arrays', () => {\n    expect(compact([1, , 2, , 3])).toEqual([1, 2, 3]);\n    expect(compact([1, , null, 2, , 3])).toEqual([1, 2, 3]);\n  });\n\n  test('should not modify the original input array', () => {\n    const input = [0, 1, false, 2, '', 3];\n    compact(input);\n    expect(input).toEqual([0, 1, false, 2, '', 3]);\n  });\n});\n",
    "/src/compact.ts": "export default function compact<T>(\n  array: Array<T | null | undefined | false | 0 | ''>,\n): Array<T> {\n  const result = [];\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n\n    // Skip falsey values\n    if (value) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array: The array to compact.\n * @return {Array} Returns the new array of filtered values.\n */\nexport default function compact(array) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function compact<T>(\n  array: Array<T | null | undefined | false | 0 | ''>,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/compact.ts",
    "run": "/src/compact.run.test.ts",
    "submit": "/src/compact.submit.test.ts"
  }
}