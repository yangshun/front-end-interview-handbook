{
  "description": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var c in e)l(n,c,{get:e[c],enumerable:!0})},i=(n,e,c,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!f.call(n,a)&&a!==c&&l(n,a,{get:()=>e[a],enumerable:!(o=u(e,a))||o.enumerable});return n};var b=(n,e,c)=>(c=n!=null?h(m(n)):{},i(e||!n||!n.__esModule?l(c,\"default\",{value:n,enumerable:!0}):c,n)),g=n=>i(l({},\"__esModule\",{value:!0}),n);var s=v((C,r)=>{r.exports=_jsx_runtime});var I={};x(I,{default:()=>_,frontmatter:()=>j});var t=b(s()),j={title:\"useInterval\",excerpt:\"Implement a hook that creates an interval that invokes a callback function at a specified delay\"};function d(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useInterval\"}),\" hook that creates an interval that invokes a callback function at a specified delay.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [count, setCount] = useState(0);\n\n  useInterval(() => setCount(count + 1), 1000);\n\n  return (\n    <div>\n      <p>{count}</p>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"callback: () => void\"}),\": A function to be called at the specified interval\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"delay: number | null\"}),\": The delay in milliseconds between each invocation of the callback function. If \",(0,t.jsx)(e.code,{children:\"null\"}),\", the interval is cleared\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"Nothing.\"})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var _=k;return g(I);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-interval\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-interval.ts\",\n  \"dependencies\": {\n    \"@sinonjs/fake-timers\": \"14.0.0\",\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-interval.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useInterval from './use-interval';\nimport { useState } from 'react';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useInterval', () => {\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useInterval(() => {}, 0));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls callback in time', () => {\n    const callback = jest.fn();\n    renderHook(() => useInterval(callback, 1000));\n\n    expect(callback).not.toHaveBeenCalled();\n\n    act(() => clock.tick(1000));\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-interval.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useInterval from './use-interval';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useInterval', () => {\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useInterval(() => {}, 0));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls callback in time', () => {\n    const callback = jest.fn();\n    renderHook(() => useInterval(callback, 1000));\n\n    expect(callback).not.toHaveBeenCalled();\n\n    act(() => clock.tick(1000));\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('calls callback multiple times', () => {\n    const callback = jest.fn();\n    renderHook(() => useInterval(callback, 1000));\n\n    expect(callback).not.toHaveBeenCalled();\n    const times = 5;\n    act(() => clock.tick(1000 * times));\n\n    expect(callback).toHaveBeenCalledTimes(times);\n  });\n\n  describe('delay', () => {\n    test('delay changes', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook(\n        ({ delay }) => useInterval(callback, delay),\n        {\n          initialProps: { delay: 1000 },\n        },\n      );\n\n      clock.tick(1000);\n\n      expect(callback).toHaveBeenCalledTimes(1);\n\n      rerender({ delay: 200 });\n      clock.tick(1000);\n\n      expect(callback).toHaveBeenCalledTimes(6);\n    });\n\n    test('changed to null', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook<void, { delay: number | null }>(\n        ({ delay }) => useInterval(callback, delay),\n        {\n          initialProps: { delay: 1000 },\n        },\n      );\n\n      expect(callback).not.toHaveBeenCalled();\n\n      rerender({ delay: null });\n      clock.tick(1000);\n\n      expect(callback).not.toHaveBeenCalled();\n    });\n\n    test('starts with null', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook<void, { delay: number | null }>(\n        ({ delay }) => useInterval(callback, delay),\n        {\n          initialProps: { delay: null },\n        },\n      );\n\n      expect(callback).not.toHaveBeenCalled();\n\n      rerender({ delay: 500 });\n      clock.tick(1000);\n\n      expect(callback).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  test('clears interval on unmount', () => {\n    const callback = jest.fn();\n    const { unmount } = renderHook(() => useInterval(callback, 1000));\n\n    unmount();\n    act(() => clock.tick(1000));\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n});\n",
    "/src/use-interval.ts": "import { useEffect, useRef } from 'react';\n\nexport default function useInterval(\n  callback: () => void,\n  delay: number | null,\n) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === null) {\n      return;\n    }\n\n    const id = setInterval(() => {\n      savedCallback.current();\n    }, delay);\n\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay]);\n}\n"
  },
  "info": {
    "excerpt": "Implement a hook that creates an interval that invokes a callback function at a specified delay",
    "title": "useInterval"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-interval"
      }
    ],
    "href": "/questions/javascript/use-interval",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-countdown",
      "use-timeout"
    ],
    "slug": "use-interval",
    "subtitle": null,
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {() => void} callback\n * @param {number | null} delay\n */\nexport default function useInterval(callback, delay) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useInterval(\n  callback: () => void,\n  delay: number | null,\n) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var c in e)r(n,c,{get:e[c],enumerable:!0})},o=(n,e,c,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of v(e))!b.call(n,l)&&l!==c&&r(n,l,{get:()=>e[l],enumerable:!(a=m(e,l))||a.enumerable});return n};var y=(n,e,c)=>(c=n!=null?f(p(n)):{},o(e||!n||!n.__esModule?r(c,\"default\",{value:n,enumerable:!0}):c,n)),j=n=>o(r({},\"__esModule\",{value:!0}),n);var s=k((M,d)=>{d.exports=_jsx_runtime});var g={};x(g,{default:()=>I});var t=y(s());var i=MDXCodeBlock;var u=`import { useEffect, useRef } from 'react';\n\nexport default function useInterval(\n  callback: () => void,\n  delay: number | null,\n) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === null) {\n      return;\n    }\n\n    const id = setInterval(() => {\n      savedCallback.current();\n    }, delay);\n\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay]);\n}\n`;function h(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useInterval\"}),\" hook can be implemented with \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" to create an interval with \",(0,t.jsx)(e.code,{children:\"setInterval\"}),\" every given \",(0,t.jsx)(e.code,{children:\"delay\"}),\" milliseconds. The interval is cleared when the component is unmounted or when the \",(0,t.jsx)(e.code,{children:\"delay\"}),\" is \",(0,t.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,t.jsx)(i,{children:u})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var I=_;return j(g);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-interval.ts",
    "run": "/src/use-interval.run.test.ts",
    "submit": "/src/use-interval.submit.test.ts"
  }
}