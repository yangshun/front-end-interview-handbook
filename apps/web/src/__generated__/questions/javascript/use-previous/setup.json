{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-previous\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-previous.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-previous.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport usePrevious from './use-previous';\nimport { useState } from 'react';\n\ndescribe('usePrevious', () => {\n  test('return undefined initially', () => {\n    const { result } = renderHook(() => usePrevious(10));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('return previous value', () => {\n    const initialValue = 0;\n\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBe(initialValue);\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n});\n",
    "/src/use-previous.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport usePrevious from './use-previous';\nimport { useState } from 'react';\n\ndescribe('usePrevious', () => {\n  test('return undefined initially', () => {\n    const { result } = renderHook(() => usePrevious(10));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('return previous value', () => {\n    const initialValue = 0;\n\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBe(initialValue);\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n\n  test('previous value should be stable across re-renders', () => {\n    const initialValue = 0;\n\n    const { result, rerender } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBe(initialValue);\n\n    rerender();\n\n    // If `usePrevious` is implemented with `useRef` like a clown, this should be the current state.\n    expect(result.current.previous).toBe(initialValue);\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n\n  test('previous value should only be updated when the current value changes', () => {\n    const initialValue = 10;\n\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n});\n",
    "/src/use-previous.ts": "import { useState } from 'react';\n\nexport default function usePrevious<T>(state: T) {\n  const [current, setCurrent] = useState(state);\n  const [previous, setPrevious] = useState<T>();\n\n  if (current !== state) {\n    setPrevious(current);\n    setCurrent(state);\n  }\n\n  return previous;\n}\n"
  },
  "skeleton": {
    "js": "export default function usePrevious(state) {\n  throw 'Not implemented';\n}",
    "ts": "export default function usePrevious<T>(state: T) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-previous.ts",
    "run": "/src/use-previous.run.test.ts",
    "submit": "/src/use-previous.submit.test.ts"
  }
}