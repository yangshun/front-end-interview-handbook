{
  "description": "var Component=(()=>{var h=Object.create;var u=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var o in e)u(n,o,{get:e[o],enumerable:!0})},c=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!v.call(n,r)&&r!==o&&u(n,r,{get:()=>e[r],enumerable:!(s=d(e,r))||s.enumerable});return n};var C=(n,e,o)=>(o=n!=null?h(m(n)):{},c(e||!n||!n.__esModule?u(o,\"default\",{value:n,enumerable:!0}):o,n)),g=n=>c(u({},\"__esModule\",{value:!0}),n);var a=x((y,i)=>{i.exports=_jsx_runtime});var k={};f(k,{default:()=>_,frontmatter:()=>j});var t=C(a()),j={title:\"usePrevious\",excerpt:\"Implement a hook that returns the previous value of a state\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" hook that returns the previous value of a state.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [count, setCount] = useState(0);\n  const previousCount = usePrevious(count);\n\n  return (\n    <div>\n      <p>current: {count}</p>\n      <p>previous: {previousCount}</p>\n      <button onClick={() => setCount((count) => count + 1)}>Increase</button>\n      <button onClick={() => setCount((count) => count - 1)}>Decrease</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"state\"}),\": the state to track. This should be a generic value of any type\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" hook should return the previous state of the \",(0,t.jsx)(e.code,{children:\"state\"}),\" argument.\"]})]})}function b(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var _=b;return g(k);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-previous\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-previous.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/src/use-previous.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport usePrevious from './use-previous';\nimport { useState } from 'react';\n\ndescribe('usePrevious', () => {\n  test('return undefined initially', () => {\n    const { result } = renderHook(() => usePrevious(10));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('return previous value', () => {\n    const initialValue = 0;\n\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBe(initialValue);\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n});\n",
    "/src/use-previous.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport usePrevious from './use-previous';\nimport { useState } from 'react';\n\ndescribe('usePrevious', () => {\n  test('return undefined initially', () => {\n    const { result } = renderHook(() => usePrevious(10));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('return previous value', () => {\n    const initialValue = 0;\n\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBe(initialValue);\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n\n  test('previous value should be stable across re-renders', () => {\n    const initialValue = 0;\n\n    const { result, rerender } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBe(initialValue);\n\n    rerender();\n\n    // If `usePrevious` is implemented with `useRef` like a clown, this should be the current state.\n    expect(result.current.previous).toBe(initialValue);\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n\n  test('previous value should only be updated when the current value changes', () => {\n    const initialValue = 10;\n\n    const { result } = renderHook(() => {\n      const [value, setValue] = useState(initialValue);\n      const previous = usePrevious(value);\n\n      return { value, setValue, previous };\n    });\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(10);\n    });\n\n    expect(result.current.previous).toBeUndefined();\n\n    act(() => {\n      result.current.setValue(20);\n    });\n\n    expect(result.current.previous).toBe(10);\n  });\n});\n",
    "/src/use-previous.ts": "import { useState } from 'react';\n\nexport default function usePrevious<T>(state: T) {\n  const [current, setCurrent] = useState(state);\n  const [previous, setPrevious] = useState<T>();\n\n  if (current !== state) {\n    setPrevious(current);\n    setCurrent(state);\n  }\n\n  return previous;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement a hook that returns the previous value of a state",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-previous"
      }
    ],
    "href": "/questions/javascript/use-previous",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "use-previous",
    "subtitle": null,
    "title": "usePrevious",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "export default function usePrevious(state) {\n  throw 'Not implemented';\n}",
    "ts": "export default function usePrevious<T>(state: T) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)o(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!g.call(n,s)&&s!==r&&o(n,s,{get:()=>e[s],enumerable:!(i=m(e,s))||i.enumerable});return n};var x=(n,e,r)=>(r=n!=null?f(v(n)):{},c(e||!n||!n.__esModule?o(r,\"default\",{value:n,enumerable:!0}):r,n)),T=n=>c(o({},\"__esModule\",{value:!0}),n);var a=w((E,h)=>{h.exports=_jsx_runtime});var S={};y(S,{default:()=>P});var t=x(a());var u=MDXCodeBlock;var d=`import { useState } from 'react';\n\nexport default function usePrevious<T>(state: T) {\n  const [current, setCurrent] = useState(state);\n  const [previous, setPrevious] = useState<T>();\n\n  if (current !== state) {\n    setPrevious(current);\n    setCurrent(state);\n  }\n\n  return previous;\n}\n`;function l(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",em:\"em\",pre:\"pre\",strong:\"strong\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" hook can be implemented using two \",(0,t.jsx)(e.code,{children:\"useState\"}),\" states, one for the current state and another for the previous state. We then simply update the previous state whenever the current state changes.\"]}),`\n`,(0,t.jsx)(u,{children:d}),`\n`,(0,t.jsxs)(e.p,{children:[\"Notice how we set the states \",(0,t.jsx)(e.em,{children:\"during\"}),\" render and not in another \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\"? This is so that we won't need to waste one render cycle to update the previous state.\"]}),`\n`,(0,t.jsxs)(e.h2,{children:[\"Another implementation with \",(0,t.jsx)(e.code,{children:\"useRef\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"You might have seen another implementation of \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" using \",(0,t.jsx)(e.code,{children:\"useRef\"}),\". It looks something like this.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-tsx\",children:`import { useEffect, useRef } from 'react';\n\nexport default function usePrevious<T>(state: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = state;\n  });\n\n  return ref.current;\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This should work for the most part, and understanding why this works is left as a good exercise for the reader. Essentially, \",(0,t.jsx)(e.code,{children:\"ref.current\"}),\" is lagging behind one render cycle, which is why this works. However, if the calling component re-rendered \",(0,t.jsxs)(e.em,{children:[\"not because of the related \",(0,t.jsx)(e.code,{children:\"useState\"}),\" state\"]}),\", then the return value of this \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" will catch up to the current state, giving the wrong \",(0,t.jsx)(e.em,{children:\"previous\"}),\" state. This behaviour is the same if you instead call some \",(0,t.jsx)(e.code,{children:\"useState\"}),\"'s setter function in the clean-up function of some \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The point is: anything that uses \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" is wrong, naturally because \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" is \",(0,t.jsx)(e.strong,{children:\"never meant to be used this way to begin with\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Of course, there is also the argument that this implementation of \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" is actually correct because it returns the previous state, as in the value \",(0,t.jsx)(e.em,{children:\"at the last render cycle\"}),\". This is valid, but most definitely is not the behaviour that most people expect. Similar to how \",(0,t.jsx)(e.code,{children:\"useState\"}),\" only changes the state (and invokes a re-render) if the new state is actually different, \",(0,t.jsx)(e.code,{children:\"usePrevious\"}),\" should return the value that represents the \",(0,t.jsx)(e.em,{children:\"previous state of the state that it is tracking\"}),\". In other words, it should never catch up to it.\"]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var P=k;return T(S);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-previous.ts",
    "run": "/src/use-previous.run.test.ts",
    "submit": "/src/use-previous.submit.test.ts"
  }
}