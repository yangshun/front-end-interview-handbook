{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/deep-clone\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/deep-clone.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/deep-clone.run.test.ts": "import deepClone from './deep-clone';\n\ndescribe('deepClone', () => {\n  test('primitive values', () => {\n    expect(deepClone('foo')).toEqual('foo');\n    expect(deepClone(123)).toEqual(123);\n  });\n\n  test('objects', () => {\n    const obj = { role: 'foo' };\n    const clonedObj = deepClone(obj);\n    clonedObj.role = 'bar';\n    expect(obj).toEqual({ role: 'foo' });\n  });\n\n  test('nested objects', () => {\n    const obj = { user: { role: 'admin', id: '123' } };\n    const clonedObj = deepClone(obj);\n    clonedObj.user.role = 'bar';\n    expect(obj).toEqual({ user: { role: 'admin', id: '123' } });\n  });\n});\n",
    "/src/deep-clone.submit.test.ts": "import deepClone from './deep-clone';\n\ndescribe('deepClone', () => {\n  describe('primitive values', () => {\n    expect(deepClone('foo')).toEqual('foo');\n    expect(deepClone(123)).toEqual(123);\n    expect(deepClone(true)).toEqual(true);\n    expect(deepClone(false)).toEqual(false);\n    expect(deepClone(null)).toEqual(null);\n  });\n\n  describe('objects', () => {\n    test('no nesting', () => {\n      const obj = { role: 'foo' };\n      const clonedObj = deepClone(obj);\n      clonedObj.role = 'bar';\n      expect(obj).toEqual({ role: 'foo' });\n    });\n\n    test('one level of nesting', () => {\n      const obj = { user: { role: 'admin', id: '123' } };\n      const clonedObj = deepClone(obj);\n      clonedObj.user.role = 'bar';\n      expect(obj).toEqual({ user: { role: 'admin', id: '123' } });\n    });\n\n    test('two levels of nesting', () => {\n      const obj = { a: { b: { c: 'd' } }, e: 'f' };\n      const clonedObj = deepClone(obj);\n      (clonedObj.a.b as any) = {};\n      expect(obj).toEqual({ a: { b: { c: 'd' } }, e: 'f' });\n    });\n\n    test('containing arrays', () => {\n      const obj = { foo: [{ bar: 'baz' }] };\n      const clonedObj = deepClone(obj);\n      clonedObj.foo[0].bar = 'bax';\n\n      expect(obj).toEqual({ foo: [{ bar: 'baz' }] });\n    });\n  });\n\n  describe('arrays', () => {\n    test('containing objects', () => {\n      const obj = [{ a: 'foo' }, { b: 'bar' }];\n      const clonedObj = deepClone(obj);\n      clonedObj[1].b = 'baz';\n\n      expect(obj).toEqual([{ a: 'foo' }, { b: 'bar' }]);\n    });\n\n    test('containing nested objects', () => {\n      const obj = [{ a: { id: 'foo' } }, { b: { id: 'baz' } }];\n      const clonedObj = deepClone(obj);\n      clonedObj[1].b = { id: 'bax' };\n\n      expect(obj).toEqual([{ a: { id: 'foo' } }, { b: { id: 'baz' } }]);\n    });\n  });\n});\n",
    "/src/deep-clone.ts": "export default function deepClone<T>(value: T): T {\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((item) => deepClone(item)) as T;\n  }\n\n  return Object.fromEntries(\n    Object.entries(value).map(([key, value]) => [key, deepClone(value)]),\n  ) as T;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {T} value\n * @return {T}\n */\nexport default function deepClone(value) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function deepClone<T>(value: T): T {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/deep-clone.ts",
    "run": "/src/deep-clone.run.test.ts",
    "submit": "/src/deep-clone.submit.test.ts"
  }
}