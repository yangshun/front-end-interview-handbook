{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/classnames-ii\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/classnames-ii.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/classnames-ii.run.test.ts": "import classNames from './classnames-ii';\n\ndescribe('classNames', () => {\n  test('empty values', () => {\n    expect(classNames([])).toEqual('');\n  });\n\n  test('single value', () => {\n    expect(classNames('foo')).toEqual('foo');\n  });\n\n  test('duplicate values', () => {\n    expect(classNames('foo', 'foo')).toEqual('foo');\n    expect(classNames({ foo: true }, { foo: true })).toEqual('foo');\n  });\n\n  test('turn off values', () => {\n    expect(classNames({ foo: true, bar: true }, { foo: false })).toEqual('bar');\n  });\n\n  test('function values', () => {\n    expect(classNames('foo', () => 'bar')).toEqual('foo bar');\n    expect(classNames('foo', () => 'foo')).toEqual('foo');\n  });\n});\n",
    "/src/classnames-ii.submit.test.ts": "import classNames from './classnames-ii';\n\ndescribe('classNames', () => {\n  test('empty values', () => {\n    expect(classNames([])).toEqual('');\n  });\n\n  test('single value', () => {\n    expect(classNames('foo')).toEqual('foo');\n  });\n\n  test('two values', () => {\n    expect(classNames('foo', 'bar')).toEqual('foo bar');\n  });\n\n  test('array values', () => {\n    expect(classNames(['foo', 'bar', 'baz'])).toEqual('foo bar baz');\n  });\n\n  test('object values', () => {\n    expect(classNames({ 'foo-bar': true })).toEqual('foo-bar');\n    expect(classNames({ 'foo-bar': false })).toEqual('');\n    expect(classNames({ foo: true }, { bar: true })).toEqual('foo bar');\n    expect(classNames({ foo: true, bar: false, qux: true })).toEqual('foo qux');\n  });\n\n  test('mixed values', () => {\n    expect(\n      classNames(\n        'foo',\n        {\n          bar: true,\n          duck: false,\n        },\n        'baz',\n        { quux: true },\n      ),\n    ).toEqual('foo bar baz quux');\n    expect(\n      classNames('boo', true && 'loo', false && 'booz', {\n        foo: true,\n        bar: false,\n        baz: 1,\n      }),\n    ).toEqual('boo loo foo baz');\n  });\n\n  test('ignores falsey values', () => {\n    expect(\n      classNames(null, false, 'bar', undefined, 0, 1, { baz: null }, ''),\n    ).toEqual('bar 1');\n  });\n\n  test('recursively flattens arrays', () => {\n    expect(classNames('a', ['b', { c: true, d: false }])).toEqual('a b c');\n    expect(classNames('a', ['b', ['c', ['d']]])).toEqual('a b c d');\n  });\n\n  describe('duplicate values', () => {\n    test('isolated', () => {\n      expect(classNames('foo', 'foo')).toEqual('foo');\n    });\n\n    test('composite', () => {\n      expect(classNames('foo', 'bar', 'foo')).toEqual('foo bar');\n      expect(classNames('foo', { foo: true }, 'bar')).toEqual('foo bar');\n      expect(classNames({ foo: true }, { bar: true }, { foo: true })).toEqual(\n        'foo bar',\n      );\n      expect(classNames(1, '1')).toEqual('1');\n      expect(classNames('foo', 1, '1')).toEqual('foo 1');\n    });\n\n    test('nested', () => {\n      expect(classNames('foo', ['foo'])).toEqual('foo');\n      expect(classNames('foo', [{ foo: true }])).toEqual('foo');\n      expect(classNames([{ foo: true }, { foo: true }])).toEqual('foo');\n      expect(classNames([1], '1')).toEqual('1');\n    });\n  });\n\n  describe('function values', () => {\n    test('single', () => {\n      expect(classNames(() => 'foo')).toEqual('foo');\n    });\n\n    test('composite', () => {\n      expect(classNames(() => 'foo', 'bar', 'foo')).toEqual('foo bar');\n      expect(classNames(() => 'foo', { foo: true }, 'bar')).toEqual('foo bar');\n      expect(classNames(() => 1, '1')).toEqual('1');\n      expect(classNames('foo', 1, () => '1')).toEqual('foo 1');\n    });\n\n    test('nested', () => {\n      expect(classNames('foo', [() => 'foo'])).toEqual('foo');\n      expect(classNames('foo', [{ foo: true }, () => 'bar'])).toEqual(\n        'foo bar',\n      );\n    });\n  });\n\n  describe('turning off values', () => {\n    test('single', () => {\n      expect(classNames('foo', { foo: false })).toEqual('');\n    });\n\n    test('on before off', () => {\n      expect(classNames(() => 'foo', 'bar', { foo: false })).toEqual('bar');\n      expect(classNames(() => 'foo', { foo: true }, 'bar')).toEqual('foo bar');\n      expect(classNames(() => 1, '1', { 1: false })).toEqual('');\n      expect(classNames('foo', 1, () => '1')).toEqual('foo 1');\n    });\n\n    test('off before on', () => {\n      expect(classNames(() => 'foo', 'bar', { foo: false }, 'foo')).toEqual(\n        'bar foo',\n      );\n      expect(\n        classNames(() => 'foo', { foo: false }, { foo: true }, 'bar'),\n      ).toEqual('foo bar');\n      expect(classNames(() => 1, '1', { 1: false }, 1)).toEqual('1');\n    });\n\n    describe('nested', () => {\n      test('turn off in nested', () => {\n        expect(classNames('foo', [{ foo: false }])).toEqual('');\n        expect(classNames('foo', [() => 'foo', { foo: false }])).toEqual('');\n      });\n\n      test('turn on in nested', () => {\n        expect(classNames('foo', [{ foo: false }, 'foo'])).toEqual('foo');\n        expect(\n          classNames('foo', [{ foo: false }, 'foo', { foo: false }]),\n        ).toEqual('');\n      });\n    });\n  });\n});\n",
    "/src/classnames-ii.ts": "export type ClassValue =\n  | ClassArray\n  | ClassDictionary\n  | Function\n  | string\n  | number\n  | null\n  | boolean\n  | undefined;\nexport type ClassDictionary = Record<string, any>;\nexport type ClassArray = Array<ClassValue>;\n\nexport default function classNames(...args: Array<ClassValue>): string {\n  const classes: Set<string> = new Set();\n\n  function classNamesImpl(...args: Array<ClassValue>) {\n    args.forEach((arg) => {\n      // Ignore falsey values.\n      if (!arg) {\n        return;\n      }\n\n      const argType = typeof arg;\n\n      // Handle string and numbers.\n      if (argType === 'string' || argType === 'number') {\n        classes.add(String(arg));\n        return;\n      }\n\n      // Handle functions.\n      if (argType === 'function') {\n        const result = (arg as Function)();\n        if (!result) {\n          return;\n        }\n\n        classes.add(String(result));\n      }\n\n      // Handle arrays.\n      if (Array.isArray(arg)) {\n        for (const cls of arg) {\n          classNamesImpl(cls);\n        }\n\n        return;\n      }\n\n      // Handle objects.\n      if (argType === 'object') {\n        const objArg = arg as ClassDictionary;\n        for (const key in objArg) {\n          // Only process non-inherited keys.\n          if (Object.hasOwn(objArg, key)) {\n            objArg[key] ? classes.add(key) : classes.delete(key);\n          }\n        }\n\n        return;\n      }\n    });\n  }\n\n  classNamesImpl(args);\n\n  return Array.from(classes).join(' ');\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {...(any|Object|Array<any|Object|Array>|Function)} args\n * @return {string}\n */\nexport default function classNames(...args) {\n  throw 'Not implemented!';\n}",
    "ts": "export type ClassValue =\n  | ClassArray\n  | ClassDictionary\n  | Function\n  | string\n  | number\n  | null\n  | boolean\n  | undefined;\nexport type ClassDictionary = Record<string, any>;\nexport type ClassArray = Array<ClassValue>;\n\nexport default function classNames(...args: Array<ClassValue>): string {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/classnames-ii.ts",
    "run": "/src/classnames-ii.run.test.ts",
    "submit": "/src/classnames-ii.submit.test.ts"
  }
}