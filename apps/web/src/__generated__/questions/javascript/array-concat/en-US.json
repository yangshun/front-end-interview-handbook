{
  "description": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!u.call(t,o)&&o!==n&&a(t,o,{get:()=>e[o],enumerable:!(c=l(e,o))||c.enumerable});return t};var f=(t,e,n)=>(n=t!=null?p(y(t)):{},i(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),x=t=>i(a({},\"__esModule\",{value:!0}),t);var s=g((C,d)=>{d.exports=_jsx_runtime});var _={};b(_,{default:()=>w,frontmatter:()=>j});var r=f(s()),j={title:\"Array.prototype.concat\",excerpt:\"Implement the Array.prototype.concat() method\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" method on JavaScript arrays is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Implement \",(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\". To avoid overwriting the actual \",(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" which is being used by the autograder, we shall instead implement it as \",(0,r.jsx)(e.code,{children:\"Array.prototype.myConcat\"}),\".\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`[1, 2, 3].myConcat([4, 5, 6]); // [1, 2, 3, 4, 5, 6]\n[1, 2, 3].myConcat(4, 5, 6); // [1, 2, 3, 4, 5, 6]\n[1, 2, 3].myConcat(4, [5, 6]); // [1, 2, 3, 4, 5, 6]\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"As seen from the examples, \",(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" accepts a variadic number of arguments and depending on whether the argument is a primitive or an array/array-like object, they are handled differently. You are not required to handle arguments with the property \",(0,r.jsx)(e.code,{children:\"Symbol.isConcatSpreadable\"}),\" set, but you are recommended to read the specification for \",(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" on \",(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\",children:\"MDN Docs\"}),\" before attempting.\"]})]})}function A(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(h,t)})):h(t)}var w=A;return x(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/array-concat\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/array-concat.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/array-concat.run.test.ts": "import './array-concat';\n\ndescribe('Array.prototype.myConcat', () => {\n  test('empty arguments', () => {\n    expect([].myConcat()).toStrictEqual([]);\n    expect([1, 2, 3].myConcat()).toStrictEqual([1, 2, 3]);\n  });\n\n  test('empty array', () => {\n    expect([].myConcat([])).toStrictEqual([]);\n    expect([1].myConcat([])).toStrictEqual([1]);\n    expect([1, 2].myConcat([])).toStrictEqual([1, 2]);\n  });\n\n  test('join arrays', () => {\n    expect([1, 2, 3].myConcat([4, 5, 6])).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  test('new array is returned', () => {\n    const orig = [1, 2, 3];\n    const res = orig.myConcat([4, 5, 6]);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n\n    orig.push(4);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n});\n",
    "/src/array-concat.submit.test.ts": "import './array-concat';\n\ndescribe('Array.prototype.myConcat', () => {\n  test('empty arguments', () => {\n    expect([].myConcat()).toStrictEqual([]);\n    expect([1, 2, 3].myConcat()).toStrictEqual([1, 2, 3]);\n  });\n\n  test('empty array', () => {\n    expect([].myConcat([])).toStrictEqual([]);\n    expect([1].myConcat([])).toStrictEqual([1]);\n    expect([1, 2].myConcat([])).toStrictEqual([1, 2]);\n  });\n\n  test('single array argument', () => {\n    expect([1].myConcat([2])).toStrictEqual([1, 2]);\n    expect([1, 2, 3].myConcat([4, 5, 6])).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  test('multiple arrays arguments', () => {\n    expect([1, 2, 3].myConcat([4, 5, 6], [7, 8, 9])).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9,\n    ]);\n  });\n\n  test('primitive arguments', () => {\n    expect([1, 2].myConcat(3, 4)).toStrictEqual([1, 2, 3, 4]);\n    expect([1, 2, 3].myConcat(4, 5, 6)).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  test('mixed arguments', () => {\n    expect([1, 2, 3].myConcat([4, 5, 6], 7)).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7,\n    ]);\n    expect([1, 2, 3].myConcat(4, [5, 6, 7])).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7,\n    ]);\n    expect([1, 2, 3].myConcat(4, [5, 6], 7)).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7,\n    ]);\n  });\n\n  test('sparse arrays', () => {\n    const combined = [1, , 2].myConcat(3, 4);\n    expect(combined).toHaveLength(5);\n    expect(combined[0]).toBe(1);\n    expect(combined[2]).toBe(2);\n    expect(combined[3]).toBe(3);\n    expect(combined[4]).toBe(4);\n  });\n\n  test('new array is returned', () => {\n    const orig = [1, 2, 3];\n    const res = orig.myConcat([4, 5, 6]);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n\n    orig.push(4);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n});\n",
    "/src/array-concat.ts": "interface Array<T> {\n  myConcat(...items: Array<T | Array<T>>): Array<T>;\n}\n\nArray.prototype.myConcat = function (...items) {\n  const newArray = [...this];\n\n  for (let i = 0; i < items.length; i++) {\n    if (Array.isArray(items[i])) {\n      newArray.push(...items[i]);\n    } else {\n      newArray.push(items[i]);\n    }\n  }\n\n  return newArray;\n};\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [
      "apple"
    ],
    "created": 1699574400,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement the Array.prototype.concat() method",
    "featured": true,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/array-concat",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "array-filter",
      "array-map",
      "array-reduce"
    ],
    "slug": "array-concat",
    "subtitle": null,
    "title": "Array.prototype.concat",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {...(T | Array<T>)} items\n * @return {Array<T>}\n */\nArray.prototype.myConcat = function (...items) {\n  throw 'Not implemented!';\n};",
    "ts": "interface Array<T> {\n  myConcat(...items: Array<T | Array<T>>): Array<T>;\n}\n\nArray.prototype.myConcat = function (...items) {\n  throw 'Not implemented!';\n};"
  },
  "solution": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var n in e)o(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!b.call(t,a)&&a!==n&&o(t,a,{get:()=>e[a],enumerable:!(c=A(e,a))||c.enumerable});return t};var w=(t,e,n)=>(n=t!=null?u(g(t)):{},s(e||!t||!t.__esModule?o(n,\"default\",{value:t,enumerable:!0}):n,t)),C=t=>s(o({},\"__esModule\",{value:!0}),t);var h=x((O,l)=>{l.exports=_jsx_runtime});var _={};T(_,{default:()=>M});var r=w(h());var i=MDXCodeBlock;var y=`/**\n * @template T\n * @param {...(T | Array<T>)} items\n * @return {Array<T>}\n */\nArray.prototype.myConcat = function (...items) {\n  const newArray = [...this];\n\n  for (let i = 0; i < items.length; i++) {\n    if (Array.isArray(items[i])) {\n      newArray.push(...items[i]);\n    } else {\n      newArray.push(items[i]);\n    }\n  }\n\n  return newArray;\n};\n`;var d=`interface Array<T> {\n  myConcat(...items: Array<T | Array<T>>): Array<T>;\n}\n\nArray.prototype.myConcat = function (...items) {\n  const newArray = [...this];\n\n  for (let i = 0; i < items.length; i++) {\n    if (Array.isArray(items[i])) {\n      newArray.push(...items[i]);\n    } else {\n      newArray.push(items[i]);\n    }\n  }\n\n  return newArray;\n};\n`;var p=`interface Array<T> {\n  myConcat(...items: Array<T | Array<T>>): Array<T>;\n}\n\nArray.prototype.myConcat = function (...items) {\n  const A = Array.from(this);\n  let n = A.length;\n\n  items.forEach((e) => {\n    // The actual spec checks for the \\`Symbol.isConcatSpreadable\\` property.\n    if (Array.isArray(e)) {\n      const len = e.length;\n      let k = 0;\n      while (k < len) {\n        // Ignore index if value is not defined for index (e.g. in sparse arrays).\n        const exists = Object.hasOwn(e, k);\n        if (exists) {\n          const subElement = e[k];\n          A[n] = subElement;\n        }\n        n += 1;\n        k += 1;\n      }\n    } else {\n      A[n] = e;\n      n += 1;\n    }\n  });\n\n  return A;\n};\n`;function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",pre:\"pre\",a:\"a\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Start by creating a copy of the original array (\",(0,r.jsx)(e.code,{children:\"this\"}),\") using the spread operator (\",(0,r.jsx)(e.code,{children:\"[...this]\"}),\"). This ensures that the polyfill operates on a copy of the array, leaving the original array unchanged.\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Iterate through the arguments passed to the \",(0,r.jsx)(e.code,{children:\"Array.prototype.myConcat\"}),\" method. For each argument, check if it's an array using \",(0,r.jsx)(e.code,{children:\"Array.isArray()\"}),\". If it's an array, spread its elements into the \",(0,r.jsx)(e.code,{children:\"newArray\"}),\". If it's not an array, simply push the element into the \",(0,r.jsx)(e.code,{children:\"newArray\"}),\".\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Finally, return the \",(0,r.jsx)(e.code,{children:\"newArray\"}),\", which contains all the elements from the original array and the arguments passed to \",(0,r.jsx)(e.code,{children:\"Array.prototype.myConcat\"}),\". This mimics the behavior of the native \",(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" method.\"]}),`\n`,(0,r.jsx)(i,{languages:{jsx:y,tsx:d}}),`\n`,(0,r.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Sparse arrays, e.g. \",(0,r.jsx)(e.code,{children:\"[1, 2, , 4]\"}),\". The empty values should be ignored while traversing the array.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"One-liner solution\"}),`\n`,(0,r.jsx)(e.p,{children:\"You can cheat the autograder by doing this:\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`Array.prototype.myConcat = Array.prototype.concat;\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Spec solution\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Here's a solution that is based off the \",(0,r.jsxs)(e.a,{href:\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.concat\",children:[(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" ECMAScript specification\"]}),\" but does not use the \",(0,r.jsx)(e.code,{children:\"Symbol.isConcatSpreadable\"}),\" property.\"]}),`\n`,(0,r.jsx)(i,{children:p}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\",children:[(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" | MDN\"]})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.concat\",children:[(0,r.jsx)(e.code,{children:\"Array.prototype.concat\"}),\" ECMAScript specification\"]})}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var M=v;return C(_);})();\n;return Component;",
  "workspace": {
    "main": "/src/array-concat.ts",
    "run": "/src/array-concat.run.test.ts",
    "submit": "/src/array-concat.submit.test.ts"
  }
}