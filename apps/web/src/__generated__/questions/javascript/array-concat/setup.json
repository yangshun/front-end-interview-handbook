{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/array-concat\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/array-concat.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/array-concat.run.test.ts": "import './array-concat';\n\ndescribe('Array.prototype.myConcat', () => {\n  test('empty arguments', () => {\n    expect([].myConcat()).toStrictEqual([]);\n    expect([1, 2, 3].myConcat()).toStrictEqual([1, 2, 3]);\n  });\n\n  test('empty array', () => {\n    expect([].myConcat([])).toStrictEqual([]);\n    expect([1].myConcat([])).toStrictEqual([1]);\n    expect([1, 2].myConcat([])).toStrictEqual([1, 2]);\n  });\n\n  test('join arrays', () => {\n    expect([1, 2, 3].myConcat([4, 5, 6])).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  test('new array is returned', () => {\n    const orig = [1, 2, 3];\n    const res = orig.myConcat([4, 5, 6]);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n\n    orig.push(4);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n});\n",
    "/src/array-concat.submit.test.ts": "import './array-concat';\n\ndescribe('Array.prototype.myConcat', () => {\n  test('empty arguments', () => {\n    expect([].myConcat()).toStrictEqual([]);\n    expect([1, 2, 3].myConcat()).toStrictEqual([1, 2, 3]);\n  });\n\n  test('empty array', () => {\n    expect([].myConcat([])).toStrictEqual([]);\n    expect([1].myConcat([])).toStrictEqual([1]);\n    expect([1, 2].myConcat([])).toStrictEqual([1, 2]);\n  });\n\n  test('single array argument', () => {\n    expect([1].myConcat([2])).toStrictEqual([1, 2]);\n    expect([1, 2, 3].myConcat([4, 5, 6])).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  test('multiple arrays arguments', () => {\n    expect([1, 2, 3].myConcat([4, 5, 6], [7, 8, 9])).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9,\n    ]);\n  });\n\n  test('primitive arguments', () => {\n    expect([1, 2].myConcat(3, 4)).toStrictEqual([1, 2, 3, 4]);\n    expect([1, 2, 3].myConcat(4, 5, 6)).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  test('mixed arguments', () => {\n    expect([1, 2, 3].myConcat([4, 5, 6], 7)).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7,\n    ]);\n    expect([1, 2, 3].myConcat(4, [5, 6, 7])).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7,\n    ]);\n    expect([1, 2, 3].myConcat(4, [5, 6], 7)).toStrictEqual([\n      1, 2, 3, 4, 5, 6, 7,\n    ]);\n  });\n\n  test('sparse arrays', () => {\n    const combined = [1, , 2].myConcat(3, 4);\n    expect(combined).toHaveLength(5);\n    expect(combined[0]).toBe(1);\n    expect(combined[2]).toBe(2);\n    expect(combined[3]).toBe(3);\n    expect(combined[4]).toBe(4);\n  });\n\n  test('new array is returned', () => {\n    const orig = [1, 2, 3];\n    const res = orig.myConcat([4, 5, 6]);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n\n    orig.push(4);\n    expect(res).toStrictEqual([1, 2, 3, 4, 5, 6]);\n  });\n});\n",
    "/src/array-concat.ts": "interface Array<T> {\n  myConcat(...items: Array<T | Array<T>>): Array<T>;\n}\n\nArray.prototype.myConcat = function (...items) {\n  const newArray = [...this];\n\n  for (let i = 0; i < items.length; i++) {\n    if (Array.isArray(items[i])) {\n      newArray.push(...items[i]);\n    } else {\n      newArray.push(items[i]);\n    }\n  }\n\n  return newArray;\n};\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {...(T | Array<T>)} items\n * @return {Array<T>}\n */\nArray.prototype.myConcat = function (...items) {\n  throw 'Not implemented!';\n};",
    "ts": "interface Array<T> {\n  myConcat(...items: Array<T | Array<T>>): Array<T>;\n}\n\nArray.prototype.myConcat = function (...items) {\n  throw 'Not implemented!';\n};"
  },
  "workspace": {
    "main": "/src/array-concat.ts",
    "run": "/src/array-concat.run.test.ts",
    "submit": "/src/array-concat.submit.test.ts"
  }
}