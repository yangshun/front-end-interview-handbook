{
  "description": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var v=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),b=(l,e)=>{for(var r in e)c(l,r,{get:e[r],enumerable:!0})},i=(l,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!k.call(l,t)&&t!==r&&c(l,t,{get:()=>e[t],enumerable:!(o=s(e,t))||o.enumerable});return l};var x=(l,e,r)=>(r=l!=null?p(m(l)):{},i(e||!l||!l.__esModule?c(r,\"default\",{value:l,enumerable:!0}):r,l)),M=l=>i(c({},\"__esModule\",{value:!0}),l);var a=v((C,d)=>{d.exports=_jsx_runtime});var j={};b(j,{default:()=>y,frontmatter:()=>f});var n=x(a()),f={title:\"useMap\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u7BA1\\u7406 JavaScript map \\u7684 Hook\"};function h(l){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},l.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"\\u5B9E\\u73B0\\u4E00\\u4E2A \",(0,n.jsx)(e.code,{children:\"useMap\"}),\" Hook\\uFF0C\\u7528\\u4E8E\\u7BA1\\u7406\\u5177\\u6709\\u9644\\u52A0\\u4FBF\\u6377\\u5B9E\\u7528\\u65B9\\u6CD5\\u7684 JavaScript \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\",children:(0,n.jsx)(e.code,{children:\"Map\"})}),\" \\u9879\\u76EE\\u3002\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u4F7F\\u7528 \",(0,n.jsx)(e.code,{children:\"useMap\"}),\" \\u6BD4\\u4F7F\\u7528\\u666E\\u901A\\u7684 \",(0,n.jsx)(e.code,{children:\"useState\"}),\" \\u66F4\\u65B9\\u4FBF\\uFF0C\\u56E0\\u4E3A\\u5728\\u540E\\u4E00\\u79CD\\u60C5\\u51B5\\u4E0B\\uFF0C\\u60A8\\u5C06\\u59CB\\u7EC8\\u5FC5\\u987B\\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684 \",(0,n.jsx)(e.code,{children:\"Map\"}),\"\\uFF0C\\u5BF9\\u5176\\u8FDB\\u884C\\u66F4\\u6539\\uFF0C\\u7136\\u540E\\u8BBE\\u7F6E\\u72B6\\u6001\\u4EE5\\u4F7F\\u7528\\u65B0\\u7684 map\\uFF0C\\u8FD9\\u53EF\\u80FD\\u975E\\u5E38\\u9EBB\\u70E6\\u3002\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u8BE5 Hook \\u5E94\\u8BE5\\u53EF\\u4EE5\\u901A\\u7528\\u5730\\u5904\\u7406\\u4EFB\\u4F55\\u7C7B\\u578B\\u7684\\u952E\\u548C\\u503C\\u3002\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const { map, set, setAll, reset, remove } = useMap([['key', '\\u{1F195}']]);\n\n  return (\n    <div>\n      <button onClick={() => set(String(Date.now()), '\\u{1F4E6}')}>\\u6DFB\\u52A0</button>\n      <button\n        onClick={() =>\n          setAll([\n            ['hello', '\\u{1F44B}'],\n            ['data', '\\u{1F4E6}'],\n          ])\n        }>\n        \\u8BBE\\u7F6E\\u65B0\\u6570\\u636E\n      </button>\n      <button onClick={reset}>\\u91CD\\u7F6E</button>\n      <button onClick={remove('hello')} disabled={!map.get('hello')}>\n        \\u5220\\u9664 \"hello\"\n      </button>\n      <pre>\n        Map (\n        {Array.from(map.entries()).map(([key, value]) => (\n          <Fragment key={key}>{\\`\\\\n  \\${key}: \\${value}\\`}</Fragment>\n        ))}\n        <br />)\n      </pre>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u53C2\\u6570\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defaultValue\"}),\"\\uFF1A\\u9879\\u76EE\\u7684\\u521D\\u59CB map\\u3002\\u8FD9\\u53EF\\u4EE5\\u662F \",(0,n.jsx)(e.code,{children:\"Map\"}),\" \\u5B9E\\u4F8B\\u6216\\u952E\\u503C\\u5BF9\\u6570\\u7EC4\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8FD4\\u56DE\\u503C\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u8BE5 Hook \\u8FD4\\u56DE\\u4E00\\u4E2A\\u5177\\u6709\\u4EE5\\u4E0B\\u5C5E\\u6027\\u7684\\u5BF9\\u8C61\\uFF1A\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"map\"}),\"\\uFF1A\\u5F53\\u524D\\u7684\\u9879\\u76EE map\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"set: (key, value) => void\"}),\"\\uFF1A\\u4E00\\u4E2A\\u5C06 \",(0,n.jsx)(e.code,{children:\"key\"}),\" \\u8BBE\\u7F6E\\u4E3A map \\u4E2D \",(0,n.jsx)(e.code,{children:\"value\"}),\" \\u7684\\u51FD\\u6570\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setAll: (entries) => void\"}),\"\\uFF1A\\u4E00\\u4E2A\\u8BBE\\u7F6E map \\u4E2D\\u591A\\u4E2A\\u952E\\u503C\\u5BF9 \",(0,n.jsx)(e.code,{children:\"entries\"}),\" \\u7684\\u51FD\\u6570\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"remove: (key) => void\"}),\"\\uFF1A\\u4E00\\u4E2A\\u901A\\u8FC7 \",(0,n.jsx)(e.code,{children:\"key\"}),\" \\u4ECE map \\u4E2D\\u5220\\u9664\\u952E\\u503C\\u5BF9\\u7684\\u51FD\\u6570\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"reset: () => void\"}),\"\\uFF1A\\u4E00\\u4E2A\\u5C06 map \\u91CD\\u7F6E\\u4E3A\\u7A7A map \\u7684\\u51FD\\u6570\"]}),`\n`]})]})}function g(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,Object.assign({},l,{children:(0,n.jsx)(h,l)})):h(l)}var y=g;return M(j);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-map\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-map.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-map.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMap from './use-map';\n\ndescribe('useMap', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMap());\n\n    expect(result.current.map).toBeInstanceOf(Map);\n    expect(typeof result.current.set).toBe('function');\n    expect(typeof result.current.setAll).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(initialValue);\n  });\n\n  test('set key-value pair', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.set('a', 1);\n    });\n\n    expect(result.current.map.get('a')).toBe(1);\n  });\n\n  test('set all key-value pairs', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.setAll([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]);\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('remove key-value pair', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('reset map', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).toEqual(new Map());\n  });\n});\n",
    "/src/use-map.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMap from './use-map';\n\ndescribe('useMap', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMap());\n\n    expect(result.current.map).toBeInstanceOf(Map);\n    expect(typeof result.current.set).toBe('function');\n    expect(typeof result.current.setAll).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(initialValue);\n  });\n\n  test('initial value with entries', () => {\n    const initialValue: [string, number][] = [\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ];\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(new Map(initialValue));\n  });\n\n  test('set key-value pair', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.set('a', 1);\n    });\n\n    expect(result.current.map.get('a')).toBe(1);\n  });\n\n  test('set all key-value pairs', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.setAll([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]);\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('remove key-value pair', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('reset map', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).toEqual(new Map());\n  });\n\n  test('set must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.set('d', 4);\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('setAll must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.setAll([\n        ['d', 4],\n        ['e', 5],\n        ['f', 6],\n      ]);\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('remove must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('reset must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('works with string values', () => {\n    const initialValue = new Map([\n      ['a', '1'],\n      ['b', '2'],\n      ['c', '3'],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    act(() => {\n      result.current.set('d', '4');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', '1'],\n        ['b', '2'],\n        ['c', '3'],\n        ['d', '4'],\n      ]),\n    );\n  });\n});\n",
    "/src/use-map.ts": "import { useCallback, useState } from 'react';\n\ntype MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  const [map, setMap] = useState(new Map(initialState));\n\n  const set: UseMapReturn<K, V>['set'] = useCallback((key, value) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.set(key, value);\n      return copy;\n    });\n  }, []);\n\n  const setAll: UseMapReturn<K, V>['setAll'] = useCallback((entries) => {\n    setMap(() => new Map(entries));\n  }, []);\n\n  const remove: UseMapReturn<K, V>['remove'] = useCallback((key) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.delete(key);\n      return copy;\n    });\n  }, []);\n\n  const reset: UseMapReturn<K, V>['reset'] = useCallback(() => {\n    setMap(() => new Map());\n  }, []);\n\n  return { map, set, setAll, remove, reset };\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "实现一个管理 JavaScript map 的 Hook",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-map"
      }
    ],
    "href": "/questions/javascript/use-map",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-array",
      "use-set",
      "use-object"
    ],
    "slug": "use-map",
    "subtitle": null,
    "title": "useMap",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @template K, V\n * @param {Map<K, V> | [K, V][]} initialState\n */\nexport default function useMap(initialState) {\n  throw 'Not implemented';\n}",
    "ts": "type MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var k=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),K=(a,e)=>{for(var n in e)s(a,n,{get:e[n],enumerable:!0})},c=(a,e,n,p)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of h(e))!y.call(a,r)&&r!==n&&s(a,r,{get:()=>e[r],enumerable:!(p=M(e,r))||p.enumerable});return a};var V=(a,e,n)=>(n=a!=null?m(v(a)):{},c(e||!a||!a.__esModule?s(n,\"default\",{value:a,enumerable:!0}):n,a)),f=a=>c(s({},\"__esModule\",{value:!0}),a);var l=k((S,o)=>{o.exports=_jsx_runtime});var j={};K(j,{default:()=>C});var t=V(l());var i=MDXCodeBlock;var d=`import { useCallback, useState } from 'react';\n\ntype MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  const [map, setMap] = useState(new Map(initialState));\n\n  const set: UseMapReturn<K, V>['set'] = useCallback((key, value) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.set(key, value);\n      return copy;\n    });\n  }, []);\n\n  const setAll: UseMapReturn<K, V>['setAll'] = useCallback((entries) => {\n    setMap(() => new Map(entries));\n  }, []);\n\n  const remove: UseMapReturn<K, V>['remove'] = useCallback((key) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.delete(key);\n      return copy;\n    });\n  }, []);\n\n  const reset: UseMapReturn<K, V>['reset'] = useCallback(() => {\n    setMap(() => new Map());\n  }, []);\n\n  return { map, set, setAll, remove, reset };\n}\n`;function u(a){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},a.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\u53EF\\u4EE5\\u901A\\u8FC7\\u5728 \",(0,t.jsx)(e.code,{children:\"useState\"}),\" \\u72B6\\u6001\\u4E2D\\u5B58\\u50A8\\u4E00\\u4E2A \",(0,t.jsx)(e.code,{children:\"Map\"}),\"\\uFF0C\\u5E76\\u6839\\u636E\\u72B6\\u6001\\u7684 setter \\u51FD\\u6570\\u5B9A\\u4E49\\u7528\\u4E8E\\u64CD\\u4F5C \",(0,t.jsx)(e.code,{children:\"Map\"}),\" \\u7684\\u5B9E\\u7528\\u65B9\\u6CD5\\uFF0C\\u4F7F\\u7528 JavaScript \\u5185\\u7F6E\\u7684 \",(0,t.jsx)(e.code,{children:\"Map\"}),\" \\u65B9\\u6CD5\\u6765\\u5B9E\\u73B0 \",(0,t.jsx)(e.code,{children:\"useMap\"}),\" hook\\u3002\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\u8BF7\\u8BB0\\u4F4F\\u5C06\\u5B9E\\u7528\\u65B9\\u6CD5\\u5305\\u88C5\\u5728 \",(0,t.jsx)(e.code,{children:\"useCallback\"}),\" \\u4E2D\\uFF0C\\u4EE5\\u9632\\u6B62\\u8C03\\u7528\\u7EC4\\u4EF6\\u4E0D\\u5FC5\\u8981\\u7684\\u91CD\\u65B0\\u6E32\\u67D3\\u3002\"]}),`\n`,(0,t.jsx)(i,{children:d}),`\n`,(0,t.jsx)(e.h2,{children:\"\\u8FB9\\u7F18\\u60C5\\u51B5\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\u7531\\u4E8E \",(0,t.jsx)(e.code,{children:\"Map\"}),\" \\u662F\\u53EF\\u53D8\\u7684\\uFF0C\\u56E0\\u6B64\\u5728\\u5B9A\\u4E49\\u5B9E\\u7528\\u65B9\\u6CD5\\u65F6\\uFF0C\\u8BF7\\u786E\\u4FDD\\u53D1\\u751F\\u7684\\u4EFB\\u4F55\\u66F4\\u6539\\u90FD\\u4F1A\\u5BFC\\u81F4\\u8C03\\u7528\\u7EC4\\u4EF6\\u91CD\\u65B0\\u6E32\\u67D3\\u3002\\u8FD9\\u53EF\\u786E\\u4FDD\\u7EC4\\u4EF6\\u59CB\\u7EC8\\u4E0E \",(0,t.jsx)(e.code,{children:\"Map\"}),\" \\u7684\\u5F53\\u524D\\u72B6\\u6001\\u540C\\u6B65\\u3002\"]}),`\n`,(0,t.jsx)(e.p,{children:\"\\u6709\\u5F88\\u591A\\u65B9\\u6CD5\\u53EF\\u4EE5\\u5B9E\\u73B0\\u8FD9\\u4E00\\u70B9\\uFF0C\\u5305\\u62EC\\uFF1A\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"\\u5728\\u4FEE\\u6539 \",(0,t.jsx)(e.code,{children:\"Map\"}),\" \\u4E4B\\u524D\\u5BF9\\u5176\\u8FDB\\u884C\\u6D45\\u62F7\\u8D1D\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"\\u4F7F\\u7528\\u50CF \",(0,t.jsx)(e.a,{href:\"https://immerjs.github.io/immer/\",children:\"Immer\"}),\" \\u8FD9\\u6837\\u7684\\u5E93\\u6765\\u4E0D\\u53EF\\u53D8\\u5730\\u6539\\u53D8\\u4F60\\u7684 map\"]}),`\n`]})]})}function x(a={}){let{wrapper:e}=a.components||{};return e?(0,t.jsx)(e,Object.assign({},a,{children:(0,t.jsx)(u,a)})):u(a)}var C=x;return f(j);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-map.ts",
    "run": "/src/use-map.run.test.ts",
    "submit": "/src/use-map.submit.test.ts"
  }
}