{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-map\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-map.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-map.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMap from './use-map';\n\ndescribe('useMap', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMap());\n\n    expect(result.current.map).toBeInstanceOf(Map);\n    expect(typeof result.current.set).toBe('function');\n    expect(typeof result.current.setAll).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(initialValue);\n  });\n\n  test('set key-value pair', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.set('a', 1);\n    });\n\n    expect(result.current.map.get('a')).toBe(1);\n  });\n\n  test('set all key-value pairs', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.setAll([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]);\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('remove key-value pair', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('reset map', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).toEqual(new Map());\n  });\n});\n",
    "/src/use-map.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMap from './use-map';\n\ndescribe('useMap', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMap());\n\n    expect(result.current.map).toBeInstanceOf(Map);\n    expect(typeof result.current.set).toBe('function');\n    expect(typeof result.current.setAll).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(initialValue);\n  });\n\n  test('initial value with entries', () => {\n    const initialValue: [string, number][] = [\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ];\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(new Map(initialValue));\n  });\n\n  test('set key-value pair', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.set('a', 1);\n    });\n\n    expect(result.current.map.get('a')).toBe(1);\n  });\n\n  test('set all key-value pairs', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.setAll([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]);\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('remove key-value pair', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('reset map', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).toEqual(new Map());\n  });\n\n  test('set must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.set('d', 4);\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('setAll must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.setAll([\n        ['d', 4],\n        ['e', 5],\n        ['f', 6],\n      ]);\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('remove must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('reset must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('works with string values', () => {\n    const initialValue = new Map([\n      ['a', '1'],\n      ['b', '2'],\n      ['c', '3'],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    act(() => {\n      result.current.set('d', '4');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', '1'],\n        ['b', '2'],\n        ['c', '3'],\n        ['d', '4'],\n      ]),\n    );\n  });\n});\n",
    "/src/use-map.ts": "import { useCallback, useState } from 'react';\n\ntype MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  const [map, setMap] = useState(new Map(initialState));\n\n  const set: UseMapReturn<K, V>['set'] = useCallback((key, value) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.set(key, value);\n      return copy;\n    });\n  }, []);\n\n  const setAll: UseMapReturn<K, V>['setAll'] = useCallback((entries) => {\n    setMap(() => new Map(entries));\n  }, []);\n\n  const remove: UseMapReturn<K, V>['remove'] = useCallback((key) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.delete(key);\n      return copy;\n    });\n  }, []);\n\n  const reset: UseMapReturn<K, V>['reset'] = useCallback(() => {\n    setMap(() => new Map());\n  }, []);\n\n  return { map, set, setAll, remove, reset };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template K, V\n * @param {Map<K, V> | [K, V][]} initialState\n */\nexport default function useMap(initialState) {\n  throw 'Not implemented';\n}",
    "ts": "type MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-map.ts",
    "run": "/src/use-map.run.test.ts",
    "submit": "/src/use-map.submit.test.ts"
  }
}