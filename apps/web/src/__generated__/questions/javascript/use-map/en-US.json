{
  "description": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var a in e)i(t,a,{get:e[a],enumerable:!0})},l=(t,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!v.call(t,o)&&o!==a&&i(t,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return t};var k=(t,e,a)=>(a=t!=null?s(m(t)):{},l(e||!t||!t.__esModule?i(a,\"default\",{value:t,enumerable:!0}):a,t)),b=t=>l(i({},\"__esModule\",{value:!0}),t);var d=y((A,c)=>{c.exports=_jsx_runtime});var M={};f(M,{default:()=>x,frontmatter:()=>g});var n=k(d()),g={title:\"useMap\",excerpt:\"Implement a hook that manages a JavaScript map\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useMap\"}),\" hook that manages a JavaScript \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\",children:(0,n.jsx)(e.code,{children:\"Map\"})}),\" of items with additional convenient utility methods.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It is more convenient to use \",(0,n.jsx)(e.code,{children:\"useMap\"}),\" over plain \",(0,n.jsx)(e.code,{children:\"useState\"}),\" because in the latter case, you would always have to create a new \",(0,n.jsx)(e.code,{children:\"Map\"}),\", mutate it, then set state to use the new map, which can be quite cumbersome.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The hook should work generically with key and values of any types.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const { map, set, setAll, reset, remove } = useMap([['key', '\\u{1F195}']]);\n\n  return (\n    <div>\n      <button onClick={() => set(String(Date.now()), '\\u{1F4E6}')}>Add</button>\n      <button\n        onClick={() =>\n          setAll([\n            ['hello', '\\u{1F44B}'],\n            ['data', '\\u{1F4E6}'],\n          ])\n        }>\n        Set new data\n      </button>\n      <button onClick={reset}>Reset</button>\n      <button onClick={remove('hello')} disabled={!map.get('hello')}>\n        Remove \"hello\"\n      </button>\n      <pre>\n        Map (\n        {Array.from(map.entries()).map(([key, value]) => (\n          <Fragment key={key}>{\\`\\\\n  \\${key}: \\${value}\\`}</Fragment>\n        ))}\n        <br />)\n      </pre>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defaultValue\"}),\": The initial map of items. This can be either a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" instance or an array of key-value pairs\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"The hook returns an object with the following properties:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"map\"}),\": The current map of items\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"set: (key, value) => void\"}),\": A function that sets a \",(0,n.jsx)(e.code,{children:\"key\"}),\" to \",(0,n.jsx)(e.code,{children:\"value\"}),\" in the map\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setAll: (entries) => void\"}),\": A function that sets the multiple key-value pairs \",(0,n.jsx)(e.code,{children:\"entries\"}),\" in the map\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"remove: (key) => void\"}),\": A function that removes a key-value pair from the map by \",(0,n.jsx)(e.code,{children:\"key\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"reset: () => void\"}),\": A function that resets the map to an empty map\"]}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var x=w;return b(M);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-map\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-map.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-map.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMap from './use-map';\n\ndescribe('useMap', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMap());\n\n    expect(result.current.map).toBeInstanceOf(Map);\n    expect(typeof result.current.set).toBe('function');\n    expect(typeof result.current.setAll).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(initialValue);\n  });\n\n  test('set key-value pair', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.set('a', 1);\n    });\n\n    expect(result.current.map.get('a')).toBe(1);\n  });\n\n  test('set all key-value pairs', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.setAll([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]);\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('remove key-value pair', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('reset map', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).toEqual(new Map());\n  });\n});\n",
    "/src/use-map.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMap from './use-map';\n\ndescribe('useMap', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMap());\n\n    expect(result.current.map).toBeInstanceOf(Map);\n    expect(typeof result.current.set).toBe('function');\n    expect(typeof result.current.setAll).toBe('function');\n    expect(typeof result.current.remove).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n  });\n\n  test('initial value', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(initialValue);\n  });\n\n  test('initial value with entries', () => {\n    const initialValue: [string, number][] = [\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ];\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).toEqual(new Map(initialValue));\n  });\n\n  test('set key-value pair', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.set('a', 1);\n    });\n\n    expect(result.current.map.get('a')).toBe(1);\n  });\n\n  test('set all key-value pairs', () => {\n    const { result } = renderHook(() => useMap());\n\n    act(() => {\n      result.current.setAll([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]);\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['b', 2],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('remove key-value pair', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', 1],\n        ['c', 3],\n      ]),\n    );\n  });\n\n  test('reset map', () => {\n    const { result } = renderHook(() =>\n      useMap(\n        new Map([\n          ['a', 1],\n          ['b', 2],\n          ['c', 3],\n        ]),\n      ),\n    );\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).toEqual(new Map());\n  });\n\n  test('set must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.set('d', 4);\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('setAll must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.setAll([\n        ['d', 4],\n        ['e', 5],\n        ['f', 6],\n      ]);\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('remove must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.remove('b');\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('reset must be immutable', () => {\n    const initialValue = new Map([\n      ['a', 1],\n      ['b', 2],\n      ['c', 3],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    expect(result.current.map).not.toBe(initialValue);\n\n    act(() => {\n      result.current.reset();\n    });\n\n    expect(result.current.map).not.toBe(initialValue);\n    expect(result.current.map).not.toEqual(initialValue);\n  });\n\n  test('works with string values', () => {\n    const initialValue = new Map([\n      ['a', '1'],\n      ['b', '2'],\n      ['c', '3'],\n    ]);\n\n    const { result } = renderHook(() => useMap(initialValue));\n\n    act(() => {\n      result.current.set('d', '4');\n    });\n\n    expect(result.current.map).toEqual(\n      new Map([\n        ['a', '1'],\n        ['b', '2'],\n        ['c', '3'],\n        ['d', '4'],\n      ]),\n    );\n  });\n});\n",
    "/src/use-map.ts": "import { useCallback, useState } from 'react';\n\ntype MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  const [map, setMap] = useState(new Map(initialState));\n\n  const set: UseMapReturn<K, V>['set'] = useCallback((key, value) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.set(key, value);\n      return copy;\n    });\n  }, []);\n\n  const setAll: UseMapReturn<K, V>['setAll'] = useCallback((entries) => {\n    setMap(() => new Map(entries));\n  }, []);\n\n  const remove: UseMapReturn<K, V>['remove'] = useCallback((key) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.delete(key);\n      return copy;\n    });\n  }, []);\n\n  const reset: UseMapReturn<K, V>['reset'] = useCallback(() => {\n    setMap(() => new Map());\n  }, []);\n\n  return { map, set, setAll, remove, reset };\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that manages a JavaScript map",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-map"
      }
    ],
    "href": "/questions/javascript/use-map",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-array",
      "use-set",
      "use-object"
    ],
    "slug": "use-map",
    "subtitle": null,
    "title": "useMap",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @template K, V\n * @param {Map<K, V> | [K, V][]} initialState\n */\nexport default function useMap(initialState) {\n  throw 'Not implemented';\n}",
    "ts": "type MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var a in e)i(n,a,{get:e[a],enumerable:!0})},o=(n,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of M(e))!f.call(n,r)&&r!==a&&i(n,r,{get:()=>e[r],enumerable:!(s=m(e,r))||s.enumerable});return n};var b=(n,e,a)=>(a=n!=null?u(y(n)):{},o(e||!n||!n.__esModule?i(a,\"default\",{value:n,enumerable:!0}):a,n)),w=n=>o(i({},\"__esModule\",{value:!0}),n);var c=v((R,l)=>{l.exports=_jsx_runtime});var x={};k(x,{default:()=>V});var t=b(c());var p=MDXCodeBlock;var h=`import { useCallback, useState } from 'react';\n\ntype MapOrEntries<K, V> = Map<K, V> | [K, V][];\n\ninterface UseMapReturn<K, V> {\n  /** The map object. */\n  map: Readonly<Map<K, V>>;\n  /** Set a key-value pair in the map. */\n  set: (key: K, value: V) => void;\n  /** Set all key-value pairs in the map. */\n  setAll: (entries: MapOrEntries<K, V>) => void;\n  /** Remove a key-value pair from the map. */\n  remove: (key: K) => void;\n  /** Reset the map to an empty state. */\n  reset: () => void;\n}\n\nexport default function useMap<K, V>(\n  initialState: MapOrEntries<K, V> = new Map(),\n): UseMapReturn<K, V> {\n  const [map, setMap] = useState(new Map(initialState));\n\n  const set: UseMapReturn<K, V>['set'] = useCallback((key, value) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.set(key, value);\n      return copy;\n    });\n  }, []);\n\n  const setAll: UseMapReturn<K, V>['setAll'] = useCallback((entries) => {\n    setMap(() => new Map(entries));\n  }, []);\n\n  const remove: UseMapReturn<K, V>['remove'] = useCallback((key) => {\n    setMap((prev) => {\n      const copy = new Map(prev);\n      copy.delete(key);\n      return copy;\n    });\n  }, []);\n\n  const reset: UseMapReturn<K, V>['reset'] = useCallback(() => {\n    setMap(() => new Map());\n  }, []);\n\n  return { map, set, setAll, remove, reset };\n}\n`;function d(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useMap\"}),\" hook can be implemented by storing a \",(0,t.jsx)(e.code,{children:\"Map\"}),\" in a \",(0,t.jsx)(e.code,{children:\"useState\"}),\" state and defining the utility methods to manipulate the \",(0,t.jsx)(e.code,{children:\"Map\"}),\" in terms of the state's setter function with JavaScript's built-in \",(0,t.jsx)(e.code,{children:\"Map\"}),\" methods.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Remember to wrap the utility methods in \",(0,t.jsx)(e.code,{children:\"useCallback\"}),\" to prevent unnecessary re-renders of the calling component.\"]}),`\n`,(0,t.jsx)(p,{children:h}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since \",(0,t.jsx)(e.code,{children:\"Map\"}),\"s are mutable, when defining the utility methods, ensure that whatever mutations that happened will cause the calling component to re-render. This ensures that the component is always in sync with the current state of the \",(0,t.jsx)(e.code,{children:\"Map\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"There are many ways to achieve this, including:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Doing a shallow copy of the \",(0,t.jsx)(e.code,{children:\"Map\"}),\" before modifying it\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Using a library like \",(0,t.jsx)(e.a,{href:\"https://immerjs.github.io/immer/\",children:\"Immer\"}),\" to mutate the map immutably for you\"]}),`\n`]})]})}function K(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var V=K;return w(x);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-map.ts",
    "run": "/src/use-map.run.test.ts",
    "submit": "/src/use-map.submit.test.ts"
  }
}