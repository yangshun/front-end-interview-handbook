{
  "description": "var Component=(()=>{var s=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var a in e)t(r,a,{get:e[a],enumerable:!0})},i=(r,e,a,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!f.call(r,c)&&c!==a&&t(r,c,{get:()=>e[c],enumerable:!(l=u(e,c))||l.enumerable});return r};var v=(r,e,a)=>(a=r!=null?s(p(r)):{},i(e||!r||!r.__esModule?t(a,\"default\",{value:r,enumerable:!0}):a,r)),x=r=>i(t({},\"__esModule\",{value:!0}),r);var d=g((T,o)=>{o.exports=_jsx_runtime});var b={};y(b,{default:()=>_,frontmatter:()=>j});var n=v(d()),j={title:\"Without\",excerpt:\"Implement a function that creates an array excluding all given values.\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",ul:\"ul\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"without(array, values)\"}),\" that creates an array of \",(0,n.jsx)(e.code,{children:\"array\"}),\" values not included in the \",(0,n.jsx)(e.code,{children:\"values\"}),\" specified using \",(0,n.jsx)(e.a,{href:\"http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero\",children:(0,n.jsx)(e.code,{children:\"SameValueZero\"})}),\" for equality comparisons. The order and references of result values are determined by the first array.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`without(array, ...values);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to inspect.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"values\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The values to exclude.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(Array)\"})}),\": Returns the new array of filtered values.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`without([1, 2, 3], 2, 3); // => [1]\n\nwithout([1, 2, 3], 2, 3, 1, 4); // => []\n\nwithout(['a', 'b', 'c', 'a'], 'a', 'b'); // => ['c']\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return the original \",(0,n.jsx)(e.code,{children:\"array\"}),\" values if no \",(0,n.jsx)(e.code,{children:\"values\"}),\" is specified.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`without([1, 2, 3]); // => [1, 2, 3]\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#without\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.without\"})]})}),`\n`]})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var _=w;return x(b);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/without\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/without.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/without.run.test.ts": "import without from './without';\n\ndescribe('without', () => {\n  test('empty input array', () => {\n    expect(without([], 1, 2, 3)).toEqual([]);\n  });\n\n  test('values array is empty', () => {\n    expect(without([1, 2, 3])).toEqual([1, 2, 3]);\n  });\n\n  test('unique values that are present in array but not in values', () => {\n    expect(without([1, 2, 3], 2, 3, 4)).toEqual([1]);\n  });\n\n  test('all values in array are present in values', () => {\n    expect(without([1, 2, 3], 1, 2, 3)).toEqual([]);\n  });\n});\n",
    "/src/without.submit.test.ts": "import without from './without';\n\ndescribe('without', () => {\n  test('empty input array', () => {\n    expect(without([])).toEqual([]);\n    expect(without([], 1, 2, 3)).toEqual([]);\n  });\n\n  test('values array is empty', () => {\n    expect(without([1, 2, 3])).toEqual([1, 2, 3]);\n  });\n\n  test('unique values that are present in array but not in values', () => {\n    expect(without([1, 2, 3], 2, 3, 4)).toEqual([1]);\n    expect(without(['a', 'b', 'c'], 'b', 'c', 'd')).toEqual(['a']);\n    expect(without([null, undefined, 1, NaN], undefined, 2, 3)).toEqual([\n      null,\n      1,\n      NaN,\n    ]);\n  });\n\n  test('all values in array are present in values', () => {\n    expect(without([1, 2, 3], 1, 2, 3)).toEqual([]);\n    expect(without(['a', 'b', 'c'], 'a', 'b', 'c')).toEqual([]);\n    expect(without([null, undefined], null, undefined)).toEqual([]);\n  });\n\n  test('NaN values', () => {\n    expect(without([1, NaN, 2], NaN, 3, 4)).toEqual([1, 2]);\n  });\n\n  test('values array contains duplicates', () => {\n    expect(without([1, 2, 2, 3], 2)).toEqual([1, 3]);\n    expect(without(['a', 'b', 'b', 'c'], 'b')).toEqual(['a', 'c']);\n  });\n\n  test('values array contains different data types', () => {\n    expect(without([1, '2', true, null], '2', null)).toEqual([1, true]);\n    expect(without(['a', 'b', undefined, 5], undefined, 5)).toEqual(['a', 'b']);\n  });\n\n  test('values array contains objects', () => {\n    const obj1 = { id: 1, name: 'John' };\n    const obj2 = { id: 2, name: 'Jane' };\n    const obj3 = { id: 3, name: 'Doe' };\n    const obj4 = { id: 2, name: 'Jane' };\n    expect(without([obj1, obj2, obj3], obj2)).toEqual([obj1, obj3]);\n    expect(without([obj1, obj2, obj4], obj2)).toEqual([obj1, obj4]);\n  });\n});\n",
    "/src/without.ts": "export default function without<T>(\n  array: Array<T>,\n  ...values: Array<T>\n): Array<T> {\n  const result: Array<T> = [];\n\n  // Create a set of all the values in the values arrays.\n  const valuesSet: Set<T> = new Set(values);\n\n  for (let i = 0; i < array.length; i++) {\n    const value: T = array[i];\n    // Check if the value is in the values set.\n    if (!valuesSet.has(value)) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n"
  },
  "info": {
    "excerpt": "Implement a function that creates an array excluding all given values.",
    "title": "Without"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1711929600,
    "difficulty": "easy",
    "duration": 10,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/without",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": false,
    "ranking": 100,
    "similarQuestions": [
      "difference",
      "union"
    ],
    "slug": "without",
    "subtitle": null,
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - Array from which the same items as in `values` are to be removed.\n * @param {...*} values - Values that are to be removed from the original array.\n * @return {Array} Returns filtered array.\n */\nexport default function without(array, ...values) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function without<T>(\n  array: Array<T>,\n  ...values: Array<T>\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var a in e)l(r,a,{get:e[a],enumerable:!0})},i=(r,e,a,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of x(e))!T.call(r,s)&&s!==a&&l(r,s,{get:()=>e[s],enumerable:!(o=S(e,s))||o.enumerable});return r};var b=(r,e,a)=>(a=r!=null?w(A(r)):{},i(e||!r||!r.__esModule?l(a,\"default\",{value:r,enumerable:!0}):a,r)),k=r=>i(l({},\"__esModule\",{value:!0}),r);var h=g((O,u)=>{u.exports=_jsx_runtime});var B={};j(B,{default:()=>U});var t=b(h());var n=MDXCodeBlock;var c=`/**\n * @param {Array} array - Array from which the same items as in \\`values\\` are to be removed.\n * @param {...*} values - Values that are to be removed from the original array.\n * @return {Array} Returns filtered array.\n */\nexport default function without(array, ...values) {\n  const result = [];\n\n  // Create a set of all the values in the values arrays.\n  const valuesSet = new Set(values);\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    // Check if the value is in the values set.\n    if (!valuesSet.has(value)) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n`;var d=`export default function without<T>(\n  array: Array<T>,\n  ...values: Array<T>\n): Array<T> {\n  const result: Array<T> = [];\n\n  // Create a set of all the values in the values arrays.\n  const valuesSet: Set<T> = new Set(values);\n\n  for (let i = 0; i < array.length; i++) {\n    const value: T = array[i];\n    // Check if the value is in the values set.\n    if (!valuesSet.has(value)) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n`;var f=`export default function without(array, ...values) {\n  return array.filter((value) => !values.includes(value));\n}\n`;var v=`export default function without<T>(\\r\n  array: Array<T>,\\r\n  ...values: Array<T>\\r\n): Array<T> {\\r\n  return array.filter((value) => !values.includes(value));\\r\n}\\r\n`;var y=`export default function without(array, ...values) {\n  const valuesSet = new Set(values);\n  return array.filter((value) => !valuesSet.has(value));\n}\n`;var p=`export default function without<T>(\\r\n  array: Array<T>,\\r\n  ...values: Array<T>\\r\n): Array<T> {\\r\n  const valuesSet = new Set<T>(values);\\r\n  return array.filter((value) => !valuesSet.has(value));\\r\n}\\r\n`;function m(r){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Approach 1: Uses Set to filter the values\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This solution employs a Set to efficiently store and look up the values to be excluded, then iterates over \",(0,t.jsx)(e.code,{children:\"array\"}),\" and builds \",(0,t.jsx)(e.code,{children:\"result\"}),\" with only those elements not present in the Set, effectively filtering out the specified values.\"]}),`\n`,(0,t.jsx)(n,{languages:{jsx:c,tsx:d}}),`\n`,(0,t.jsxs)(e.h3,{children:[\"Approach 2: Uses \",(0,t.jsx)(e.code,{children:\"Array.prototype.filter\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here's a simpler solution that leverages \",(0,t.jsx)(e.code,{children:\"Array.prototype.filter\"}),\".\"]}),`\n`,(0,t.jsx)(n,{languages:{jsx:f,tsx:v}}),`\n`,(0,t.jsxs)(e.h3,{children:[\"Approach 3: Uses \",(0,t.jsx)(e.code,{children:\"Array.prototype.filter\"}),\" to filter the Set instead of manually checking the values\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Alternatively, we can use Set to make it more efficient.\"}),`\n`,(0,t.jsx)(n,{languages:{jsx:y,tsx:p}}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsx)(e.p,{children:\"A possible edge case is when the function is used with arrays containing objects or arrays as elements; since these are reference types, direct comparison using a Set may not work as expected. To address this, you could implement a deep comparison function for objects/arrays or ensure the function is used with primitive data types only for reliable results.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#without\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.without\"})]})}),`\n`]})]})}function J(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(m,r)})):m(r)}var U=J;return k(B);})();\n;return Component;",
  "workspace": {
    "main": "/src/without.ts",
    "run": "/src/without.run.test.ts",
    "submit": "/src/without.submit.test.ts"
  }
}