{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/camel-case-keys\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/camel-case-keys.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/camel-case-keys.run.test.ts": "import camelCaseKeys from './camel-case-keys';\n\ndescribe('camelCaseKeys', () => {\n  test('simple object', () => {\n    expect(camelCaseKeys({ foo_bar: true })).toStrictEqual({\n      fooBar: true,\n    });\n  });\n\n  test('simple object with multiple keys', () => {\n    expect(camelCaseKeys({ foo_bar: true, baz: '1' })).toStrictEqual({\n      baz: '1',\n      fooBar: true,\n    });\n  });\n\n  test('nested object', () => {\n    expect(\n      camelCaseKeys({ foo_bar: true, bar_baz: { baz_quz: '1' } }),\n    ).toStrictEqual({\n      barBaz: {\n        bazQuz: '1',\n      },\n      fooBar: true,\n    });\n  });\n});\n",
    "/src/camel-case-keys.submit.test.ts": "import camelCaseKeys from './camel-case-keys';\n\ndescribe('camelCaseKeys', () => {\n  test('simple object', () => {\n    expect(camelCaseKeys({ foo_bar: true })).toStrictEqual({\n      fooBar: true,\n    });\n  });\n\n  test('simple object with multiple keys', () => {\n    expect(camelCaseKeys({ foo_bar: true, baz: '1', quz: '2' })).toStrictEqual({\n      baz: '1',\n      fooBar: true,\n      quz: '2',\n    });\n  });\n\n  test('nested object', () => {\n    expect(\n      camelCaseKeys({ foo_bar: true, bar_baz: { baz_quz: '1', quz: '2' } }),\n    ).toStrictEqual({\n      barBaz: {\n        bazQuz: '1',\n        quz: '2',\n      },\n      fooBar: true,\n    });\n  });\n\n  test('arrays', () => {\n    expect(camelCaseKeys([{ baz_qux: true }, { foo: true }])).toStrictEqual([\n      {\n        bazQux: true,\n      },\n      {\n        foo: true,\n      },\n    ]);\n  });\n\n  test('objects containing arrays', () => {\n    expect(\n      camelCaseKeys({\n        foo_bar: true,\n        Boo_Bar: false,\n        bar_baz: [{ baz_qux: true }, { foo: true }],\n      }),\n    ).toStrictEqual({\n      barBaz: [\n        {\n          bazQux: true,\n        },\n        {\n          foo: true,\n        },\n      ],\n      booBar: false,\n      fooBar: true,\n    });\n  });\n});\n",
    "/src/camel-case-keys.ts": "function camelCase(str: string): string {\n  return str\n    .toLowerCase()\n    .replace(/([_])([a-z])/g, (_match, _p1, p2) => p2.toUpperCase());\n}\n\nexport default function camelCaseKeys(object: Object): Object {\n  if (Array.isArray(object)) {\n    return object.map((item) => camelCaseKeys(item));\n  }\n\n  if (typeof object !== 'object' || object === null) {\n    return object;\n  }\n\n  return Object.fromEntries(\n    Object.entries(object).map(([key, value]) => [\n      camelCase(key),\n      camelCaseKeys(value),\n    ]),\n  );\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param Object\n * @return Object\n */\nexport default function camelCaseKeys(object) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function camelCaseKeys(object: Object): Object {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/camel-case-keys.ts",
    "run": "/src/camel-case-keys.run.test.ts",
    "submit": "/src/camel-case-keys.submit.test.ts"
  }
}