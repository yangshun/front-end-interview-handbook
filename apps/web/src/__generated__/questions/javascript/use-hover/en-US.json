{
  "description": "var Component=(()=>{var s=Object.create;var h=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var r in e)h(n,r,{get:e[r],enumerable:!0})},i=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!v.call(n,o)&&o!==r&&h(n,o,{get:()=>e[o],enumerable:!(c=m(e,o))||c.enumerable});return n};var g=(n,e,r)=>(r=n!=null?s(p(n)):{},i(e||!n||!n.__esModule?h(r,\"default\",{value:n,enumerable:!0}):r,n)),b=n=>i(h({},\"__esModule\",{value:!0}),n);var d=f((H,l)=>{l.exports=_jsx_runtime});var _={};x(_,{default:()=>k,frontmatter:()=>j});var t=g(d()),j={title:\"useHover\",excerpt:\"Implement a hook that tracks whether an element is being hovered\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useHover\"}),\" hook that tracks whether an element is being hovered.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [ref, hovered] = useHover();\n\n  return (\n    <div>\n      <div ref={ref}>{hovered ? 'Hovered' : 'Not hovered'}</div>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsx)(e.p,{children:\"Nothing.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"The hook returns an array with two elements:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"A ref callback function that will be attached to the \",(0,t.jsx)(e.code,{children:\"ref\"}),\" prop of the element to track. This has the type \",(0,t.jsx)(e.code,{children:\"(element: T | null) => void\"}),\", where \",(0,t.jsx)(e.code,{children:\"T\"}),\" extends \",(0,t.jsx)(e.code,{children:\"Element\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"A \",(0,t.jsx)(e.code,{children:\"boolean\"}),\" that indicates whether the element is currently being hovered\"]}),`\n`]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var k=w;return b(_);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that tracks whether an element is being hovered",
    "title": "useHover"
  },
  "solution": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),M=(n,e)=>{for(var o in e)s(n,o,{get:e[o],enumerable:!0})},c=(n,e,o,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of f(e))!E.call(n,r)&&r!==o&&s(n,r,{get:()=>e[r],enumerable:!(a=v(e,r))||a.enumerable});return n};var k=(n,e,o)=>(o=n!=null?m(p(n)):{},c(e||!n||!n.__esModule?s(o,\"default\",{value:n,enumerable:!0}):o,n)),g=n=>c(s({},\"__esModule\",{value:!0}),n);var l=b((j,u)=>{u.exports=_jsx_runtime});var T={};M(T,{default:()=>L});var t=k(l());var d=MDXCodeBlock;var i=`import { useState, useRef, useCallback, RefCallback } from 'react';\n\nexport default function useHover<T extends Element>(): [\n  RefCallback<T>,\n  boolean,\n] {\n  const [hovering, setHovering] = useState(false);\n  const previous = useRef<T | null>();\n\n  const handleMouseEnter = useCallback(() => {\n    setHovering(true);\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    setHovering(false);\n  }, []);\n\n  const customRef: RefCallback<T> = useCallback(\n    (node) => {\n      if (previous.current?.nodeType === Node.ELEMENT_NODE) {\n        previous.current.removeEventListener('mouseenter', handleMouseEnter);\n        previous.current.removeEventListener('mouseleave', handleMouseLeave);\n      }\n\n      if (node?.nodeType === Node.ELEMENT_NODE) {\n        node.addEventListener('mouseenter', handleMouseEnter);\n        node.addEventListener('mouseleave', handleMouseLeave);\n      }\n\n      previous.current = node;\n    },\n    [handleMouseEnter, handleMouseLeave],\n  );\n\n  return [customRef, hovering];\n}\n`;function h(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useHover\"}),\" hook can be implemented by using \",(0,t.jsx)(e.code,{children:\"useState\"}),\" to track the hover state, \",(0,t.jsx)(e.code,{children:\"useRef\"}),\" to create the ref object, and defining the ref callback that attaches the \",(0,t.jsx)(e.code,{children:\"mouseenter\"}),\" and \",(0,t.jsx)(e.code,{children:\"mouseleave\"}),\" event listeners to the element referenced by the ref.\"]}),`\n`,(0,t.jsx)(d,{children:i})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var L=C;return g(T);})();\n;return Component;"
}