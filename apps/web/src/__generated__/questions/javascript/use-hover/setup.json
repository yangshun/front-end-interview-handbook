{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-hover\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-hover.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"@testing-library/user-event\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-hover.run.test.tsx": "import React from 'react';\nimport { act, render, renderHook } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport useHover from './use-hover';\n\nconst Component = () => {\n  const [ref, hovering] = useHover();\n\n  return (\n    <main>\n      <div ref={ref} data-testid=\"area\">\n        Hover me\n      </div>\n\n      <div data-testid=\"nonarea\">something else</div>\n\n      {hovering && <div data-testid=\"hovering\">Hovering</div>}\n    </main>\n  );\n};\n\ndescribe('useHover', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useHover());\n\n    expect(Array.isArray(result.current)).toBe(true);\n    expect(result.current.length).toBe(2);\n    expect(typeof result.current[0]).toBe('function');\n    expect(typeof result.current[1]).toBe('boolean');\n  });\n\n  test('hover', async () => {\n    const user = userEvent.setup();\n    const page = render(<Component />);\n    const area = page.getByTestId('area');\n\n    await act(() => user.hover(area));\n\n    expect(page.queryByTestId('hovering')).not.toBeNull();\n\n    await act(() => user.unhover(area));\n\n    expect(page.queryByTestId('hovering')).toBeNull();\n  });\n});\n",
    "/src/use-hover.submit.test.tsx": "import React from 'react';\nimport { act, render, renderHook } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport useHover from './use-hover';\n\nconst Component = () => {\n  const [ref, hovering] = useHover();\n\n  return (\n    <main>\n      <div ref={ref} data-testid=\"area\">\n        Hover me\n      </div>\n\n      <div data-testid=\"nonarea\">something else</div>\n\n      {hovering && <div data-testid=\"hovering\">Hovering</div>}\n    </main>\n  );\n};\n\ndescribe('useHover', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useHover());\n\n    expect(Array.isArray(result.current)).toBe(true);\n    expect(result.current.length).toBe(2);\n    expect(typeof result.current[0]).toBe('function');\n    expect(typeof result.current[1]).toBe('boolean');\n  });\n\n  test('hover', async () => {\n    const user = userEvent.setup();\n    const page = render(<Component />);\n    const area = page.getByTestId('area');\n\n    await act(() => user.hover(area));\n\n    expect(page.queryByTestId('hovering')).not.toBeNull();\n\n    await act(() => user.unhover(area));\n\n    expect(page.queryByTestId('hovering')).toBeNull();\n  });\n\n  test('does not trigger when not hovering on area', () => {\n    const user = userEvent.setup();\n    const page = render(<Component />);\n    const nonArea = page.getByTestId('nonarea');\n\n    act(() => user.hover(nonArea));\n\n    expect(page.queryByTestId('hovering')).toBeNull();\n  });\n});\n",
    "/src/use-hover.ts": "import { useState, useRef, useCallback, RefCallback } from 'react';\n\nexport default function useHover<T extends Element>(): [\n  RefCallback<T>,\n  boolean,\n] {\n  const [hovering, setHovering] = useState(false);\n  const previous = useRef<T | null>();\n\n  const handleMouseEnter = useCallback(() => {\n    setHovering(true);\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    setHovering(false);\n  }, []);\n\n  const customRef: RefCallback<T> = useCallback(\n    (node) => {\n      if (previous.current?.nodeType === Node.ELEMENT_NODE) {\n        previous.current.removeEventListener('mouseenter', handleMouseEnter);\n        previous.current.removeEventListener('mouseleave', handleMouseLeave);\n      }\n\n      if (node?.nodeType === Node.ELEMENT_NODE) {\n        node.addEventListener('mouseenter', handleMouseEnter);\n        node.addEventListener('mouseleave', handleMouseLeave);\n      }\n\n      previous.current = node;\n    },\n    [handleMouseEnter, handleMouseLeave],\n  );\n\n  return [customRef, hovering];\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @returns {[import(\"react\").RefCallback<T>, boolean]}\n */\nexport default function useHover() {\n  throw 'Not implemented';\n}",
    "ts": "import { RefCallback } from 'react';\n\nexport default function useHover<T extends Element>(): [\n  RefCallback<T>,\n  boolean,\n] {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-hover.ts",
    "run": "/src/use-hover.run.test.tsx",
    "submit": "/src/use-hover.submit.test.tsx"
  }
}