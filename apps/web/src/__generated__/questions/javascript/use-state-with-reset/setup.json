{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-state-with-reset\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-state-with-reset.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-state-with-reset.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useStateWithReset from './use-state-with-reset';\nimport { useState } from 'react';\n\ndescribe('useStateWithReset', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useStateWithReset());\n\n    expect(result.current[0]).toBe(undefined);\n    expect(typeof result.current[1]).toBe('function');\n    expect(typeof result.current[2]).toBe('function');\n  });\n\n  test('initial state', () => {\n    const { result } = renderHook(() => useStateWithReset(0));\n\n    expect(result.current[0]).toBe(0);\n  });\n\n  test('set state', () => {\n    const { result } = renderHook(() => useStateWithReset(0));\n\n    act(() => {\n      result.current[1](1);\n    });\n\n    expect(result.current[0]).toBe(1);\n  });\n\n  test('reset', () => {\n    const initialState = 0;\n    const { result } = renderHook(() => useStateWithReset(initialState));\n\n    act(() => {\n      result.current[1](1);\n    });\n\n    expect(result.current[0]).toBe(1);\n\n    act(() => {\n      result.current[2]();\n    });\n\n    expect(result.current[0]).toBe(initialState);\n  });\n});\n",
    "/src/use-state-with-reset.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useStateWithReset from './use-state-with-reset';\nimport { useState } from 'react';\n\ndescribe('useStateWithReset', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useStateWithReset());\n\n    expect(result.current[0]).toBe(undefined);\n    expect(typeof result.current[1]).toBe('function');\n    expect(typeof result.current[2]).toBe('function');\n  });\n\n  test('initial state', () => {\n    const { result } = renderHook(() => useStateWithReset(0));\n\n    expect(result.current[0]).toBe(0);\n  });\n\n  test('set state', () => {\n    const { result } = renderHook(() => useStateWithReset(0));\n\n    act(() => {\n      result.current[1](1);\n    });\n\n    expect(result.current[0]).toBe(1);\n  });\n\n  test('reset', () => {\n    const initialState = 0;\n    const { result } = renderHook(() => useStateWithReset(initialState));\n\n    act(() => {\n      result.current[1](1);\n    });\n\n    expect(result.current[0]).toBe(1);\n\n    act(() => {\n      result.current[2]();\n    });\n\n    expect(result.current[0]).toBe(initialState);\n  });\n\n  test('set state with updater', () => {\n    const { result } = renderHook(() => useStateWithReset(0));\n\n    act(() => {\n      result.current[1]((prev) => prev + 1);\n    });\n\n    expect(result.current[0]).toBe(1);\n  });\n\n  test('initial state with initializer', () => {\n    const initialState = 1;\n    const { result } = renderHook(() => useStateWithReset(() => initialState));\n\n    expect(result.current[0]).toBe(initialState);\n  });\n\n  test('initial state should be stable across renders', () => {\n    const INITIAL_STATE = 1;\n\n    const { result } = renderHook(() => {\n      const [initialState, setInitializer] = useState(INITIAL_STATE);\n      const state = useStateWithReset(initialState);\n\n      return { state, setInitializer };\n    });\n\n    expect(result.current.state[0]).toBe(INITIAL_STATE);\n\n    act(() => {\n      result.current.setInitializer(2);\n    });\n\n    expect(result.current.state[0]).toBe(INITIAL_STATE);\n\n    act(() => {\n      result.current.state[2]();\n    });\n\n    expect(result.current.state[0]).toBe(INITIAL_STATE);\n  });\n\n  test('initial state with initializer should be stable across renders', () => {\n    const INITIAL_STATE = 1;\n\n    const { result } = renderHook(() => {\n      const [initialState, setInitializer] = useState(INITIAL_STATE);\n      const state = useStateWithReset(() => initialState);\n\n      return { state, setInitializer };\n    });\n\n    expect(result.current.state[0]).toBe(INITIAL_STATE);\n\n    act(() => {\n      result.current.setInitializer(2);\n    });\n\n    expect(result.current.state[0]).toBe(INITIAL_STATE);\n\n    act(() => {\n      result.current.state[2]();\n    });\n\n    expect(result.current.state[0]).toBe(INITIAL_STATE);\n  });\n});\n",
    "/src/use-state-with-reset.ts": "import { useCallback, useMemo, useState } from 'react';\n\nexport default function useStateWithReset<T>(\n  initialStateOrInitializer?: T | (() => T),\n) {\n  const initialState: T = useMemo(() => {\n    if (\n      typeof initialStateOrInitializer === 'function' &&\n      initialStateOrInitializer.length === 0\n    )\n      // @ts-expect-error https://github.com/microsoft/TypeScript/issues/37663\n      return initialStateOrInitializer();\n\n    return initialStateOrInitializer;\n  }, []);\n\n  const [state, setState] = useState(initialState);\n\n  const reset = useCallback(() => {\n    setState(initialState);\n  }, [initialState]);\n\n  return [state, setState, reset] as const;\n}\n"
  },
  "skeleton": {
    "js": "export default function useStateWithReset(initialStateOrInitializer) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useStateWithReset<T>(\n  initialStateOrInitializer?: T | (() => T),\n) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-state-with-reset.ts",
    "run": "/src/use-state-with-reset.run.test.ts",
    "submit": "/src/use-state-with-reset.submit.test.ts"
  }
}