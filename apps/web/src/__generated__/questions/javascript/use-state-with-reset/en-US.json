{
  "description": "var Component=(()=>{var c=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var a in e)s(t,a,{get:e[a],enumerable:!0})},l=(t,e,a,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!f.call(t,i)&&i!==a&&s(t,i,{get:()=>e[i],enumerable:!(o=d(e,i))||o.enumerable});return t};var g=(t,e,a)=>(a=t!=null?c(p(t)):{},l(e||!t||!t.__esModule?s(a,\"default\",{value:t,enumerable:!0}):a,t)),j=t=>l(s({},\"__esModule\",{value:!0}),t);var h=v((C,r)=>{r.exports=_jsx_runtime});var _={};x(_,{default:()=>V,frontmatter:()=>S});var n=g(h()),S={title:\"useStateWithReset\",excerpt:\"Implement a hook that's similar to useState but with an additional reset function that resets the state to its initial value\"};function u(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useStateWithReset\"}),\" hook that's similar to \",(0,n.jsx)(e.code,{children:\"useState\"}),\" but with an additional \",(0,n.jsx)(e.code,{children:\"reset\"}),\" function that resets the state to its initial value.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [value, setValue, resetValue] = useStateWithReset(10);\n\n  return (\n    <div>\n      <div>Value: {value}</div>\n      <input onChange={(e) => setValue(e.target.value)} />\n      <button onClick={resetValue}>reset</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"initialValue\"}),\": the initial value of the state. This argument should be the same as the first argument of the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useStateWithReset\"}),\" hook should have the same return values as the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook, plus an additional function that resets the state to \",(0,n.jsx)(e.code,{children:\"initialValue\"})]})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var V=b;return j(_);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that's similar to useState but with an additional reset function that resets the state to its initial value",
    "title": "useStateWithReset"
  },
  "solution": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var z=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),O=(e,t)=>{for(var a in t)r(e,a,{get:t[a],enumerable:!0})},o=(e,t,a,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of p(t))!x.call(e,n)&&n!==a&&r(e,n,{get:()=>t[n],enumerable:!(s=f(t,n))||s.enumerable});return e};var I=(e,t,a)=>(a=e!=null?m(z(e)):{},o(t||!e||!e.__esModule?r(a,\"default\",{value:e,enumerable:!0}):a,e)),b=e=>o(r({},\"__esModule\",{value:!0}),e);var c=g((_,l)=>{l.exports=_jsx_runtime});var T={};O(T,{default:()=>C});var i=I(c());var u=MDXCodeBlock;var h=`import { useCallback, useMemo, useState } from 'react';\n\nexport default function useStateWithReset(initialStateOrInitializer) {\n  const initialState = useMemo(() => {\n    if (\n      typeof initialStateOrInitializer === 'function' &&\n      initialStateOrInitializer.length === 0\n    )\n      return initialStateOrInitializer();\n\n    return initialStateOrInitializer;\n  }, []);\n\n  const [state, setState] = useState(initialState);\n\n  const reset = useCallback(() => {\n    setState(initialState);\n  }, [initialState]);\n\n  return [state, setState, reset];\n}\n`;var S=`import { useCallback, useMemo, useState } from 'react';\n\nexport default function useStateWithReset<T>(\n  initialStateOrInitializer?: T | (() => T),\n) {\n  const initialState: T = useMemo(() => {\n    if (\n      typeof initialStateOrInitializer === 'function' &&\n      initialStateOrInitializer.length === 0\n    )\n      // @ts-expect-error https://github.com/microsoft/TypeScript/issues/37663\n      return initialStateOrInitializer();\n\n    return initialStateOrInitializer;\n  }, []);\n\n  const [state, setState] = useState(initialState);\n\n  const reset = useCallback(() => {\n    setState(initialState);\n  }, [initialState]);\n\n  return [state, setState, reset] as const;\n}\n`;function d(e){let t=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\",em:\"em\"},e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{children:\"Solution\"}),`\n`,(0,i.jsxs)(t.p,{children:[\"The \",(0,i.jsx)(t.code,{children:\"useStateWithReset\"}),\" hook can be implemented using the \",(0,i.jsx)(t.code,{children:\"useState\"}),\" hook. We then additionally define a \",(0,i.jsx)(t.code,{children:\"reset\"}),\" function that resets the state to its initial value.\"]}),`\n`,(0,i.jsxs)(t.p,{children:[\"The challenge is when we realize that \",(0,i.jsx)(t.code,{children:\"useState\"}),\" can also accept an \",(0,i.jsx)(t.a,{href:\"https://react.dev/reference/react/useState#parameters\",children:\"initializer function\"}),\" to compute its initial value. If the user provides an initializer function, the \",(0,i.jsx)(t.code,{children:\"reset\"}),\" function should reset the state to the value returned by this initializer \",(0,i.jsx)(t.em,{children:\"only when it was called\"}),\" during state initialization.\"]}),`\n`,(0,i.jsx)(u,{languages:{jsx:h,tsx:S}})]})}function k(e={}){let{wrapper:t}=e.components||{};return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(d,e)})):d(e)}var C=k;return b(T);})();\n;return Component;"
}