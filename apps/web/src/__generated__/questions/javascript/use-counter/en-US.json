{
  "description": "var Component=(()=>{var a=Object.create;var r=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),C=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!v.call(t,c)&&c!==o&&r(t,c,{get:()=>e[c],enumerable:!(i=s(e,c))||i.enumerable});return t};var b=(t,e,o)=>(o=t!=null?a(p(t)):{},l(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>l(r({},\"__esModule\",{value:!0}),t);var u=f((A,d)=>{d.exports=_jsx_runtime});var k={};C(k,{default:()=>_,frontmatter:()=>g});var n=b(u()),g={title:\"useCounter\",excerpt:\"Implement a hook that manages a counter state, with some additional convenience utility methods\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useCounter\"}),\" hook that manages a counter state, with some additional convenience utility methods.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const { count, increment, decrement, reset, setCount } = useCounter();\n\n  return (\n    <div>\n      <p>Counter: {count}</p>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"initialValue: number\"}),\": Initial value of the counter state. If not provided, it should default to \",(0,n.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCounter\"}),\" hook returns an \",(0,n.jsx)(e.code,{children:\"object\"}),\" with the following properties:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"count: number\"}),\": The current counter value\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"increment: () => void\"}),\": A function to increment the counter value\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"decrement: () => void\"}),\": A function to decrement the counter value\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"reset: () => void\"}),\": A function to reset the counter value to \",(0,n.jsx)(e.code,{children:\"initialValue\"}),\", or \",(0,n.jsx)(e.code,{children:\"0\"}),\" if not provided\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setCount: (value: number) => void\"}),\": A function to set the counter value to \",(0,n.jsx)(e.code,{children:\"value\"}),\", it has the same signature as \",(0,n.jsx)(e.code,{children:\"setState\"})]}),`\n`]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var _=j;return x(k);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-counter\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-counter.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-counter.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport useCounter from './use-counter';\n\ndescribe('useCounter', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCounter());\n\n    expect(result.current.count).toBe(0);\n    expect(typeof result.current.increment).toBe('function');\n    expect(typeof result.current.increment).toBe('function');\n    expect(typeof result.current.decrement).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n    expect(typeof result.current.setCount).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCounter(3));\n\n    expect(result.current.count).toBe(3);\n  });\n\n  test('increment', () => {\n    const { result } = renderHook(() => useCounter());\n\n    act(() => {\n      result.current.increment();\n    });\n    expect(result.current.count).toBe(1);\n  });\n});\n",
    "/src/use-counter.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useCounter from './use-counter';\n\ndescribe('useCounter', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCounter());\n\n    expect(result.current.count).toBe(0);\n    expect(typeof result.current.increment).toBe('function');\n    expect(typeof result.current.decrement).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n    expect(typeof result.current.setCount).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCounter(3));\n\n    expect(result.current.count).toBe(3);\n  });\n\n  test('increment', () => {\n    const { result } = renderHook(() => useCounter());\n\n    act(() => {\n      result.current.increment();\n    });\n    expect(result.current.count).toBe(1);\n  });\n\n  test('decrement', () => {\n    const { result } = renderHook(() => useCounter());\n\n    act(() => {\n      result.current.decrement();\n    });\n    expect(result.current.count).toBe(-1);\n  });\n\n  test('reset', () => {\n    const { result } = renderHook(() => useCounter(3));\n\n    act(() => {\n      result.current.decrement();\n      result.current.decrement();\n      result.current.reset();\n    });\n    expect(result.current.count).toBe(3);\n  });\n\n  describe('setCount', () => {\n    test('direct', () => {\n      const { result } = renderHook(() => useCounter());\n\n      act(() => {\n        result.current.setCount(5);\n      });\n      expect(result.current.count).toBe(5);\n    });\n\n    test('can increment from current value', () => {\n      const { result } = renderHook(() => useCounter(5));\n\n      act(() => {\n        result.current.setCount((x) => x + 2);\n      });\n      expect(result.current.count).toBe(7);\n    });\n  });\n\n  test('integration', () => {\n    const { result } = renderHook(() => useCounter(5));\n\n    act(() => {\n      result.current.setCount((x) => x + 2);\n    });\n    expect(result.current.count).toBe(7);\n\n    act(() => {\n      result.current.increment();\n    });\n    expect(result.current.count).toBe(8);\n\n    act(() => {\n      result.current.decrement();\n    });\n    expect(result.current.count).toBe(7);\n\n    act(() => {\n      result.current.reset();\n    });\n    expect(result.current.count).toBe(5);\n  });\n});\n",
    "/src/use-counter.ts": "import { Dispatch, SetStateAction, useState } from 'react';\n\ninterface UseCounterReturn {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n  reset: () => void;\n  setCount: Dispatch<SetStateAction<number>>;\n}\n\nexport default function useCounter(initialValue = 0): UseCounterReturn {\n  const [count, setCount] = useState(initialValue);\n\n  return {\n    count,\n    increment: () => setCount((x) => x + 1),\n    decrement: () => setCount((x) => x - 1),\n    reset: () => setCount(initialValue),\n    setCount,\n  };\n}\n"
  },
  "info": {
    "excerpt": "Implement a hook that manages a counter state, with some additional convenience utility methods",
    "title": "useCounter"
  },
  "metadata": {
    "access": "free",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "easy",
    "duration": 10,
    "featured": true,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-counter"
      }
    ],
    "href": "/questions/javascript/use-counter",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "use-counter-ii",
      "use-cycle",
      "use-array"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-boolean"
    ],
    "slug": "use-counter",
    "subtitle": null,
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param number initialValue\n * @return Object\n */\nexport default function useCounter(initialValue) {\n  throw 'Not implemented!';\n}",
    "ts": "import { Dispatch, SetStateAction } from 'react';\n\ninterface UseCounterReturn {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n  reset: () => void;\n  setCount: Dispatch<SetStateAction<number>>;\n}\n\nexport default function useCounter(initialValue?: number): UseCounterReturn {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},u=(n,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of C(e))!S.call(n,r)&&r!==o&&i(n,r,{get:()=>e[r],enumerable:!(c=f(e,r))||c.enumerable});return n};var v=(n,e,o)=>(o=n!=null?p(x(n)):{},u(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),y=n=>u(i({},\"__esModule\",{value:!0}),n);var a=b((T,s)=>{s.exports=_jsx_runtime});var k={};g(k,{default:()=>_});var t=v(a());var d=MDXCodeBlock;var l=`import { useState } from 'react';\n\nexport default function useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  return {\n    count,\n    increment: () => setCount((x) => x + 1),\n    decrement: () => setCount((x) => x - 1),\n    reset: () => setCount(initialValue),\n    setCount,\n  };\n}\n`;var h=`import { Dispatch, SetStateAction, useState } from 'react';\n\ninterface UseCounterReturn {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n  reset: () => void;\n  setCount: Dispatch<SetStateAction<number>>;\n}\n\nexport default function useCounter(initialValue = 0): UseCounterReturn {\n  const [count, setCount] = useState(initialValue);\n\n  return {\n    count,\n    increment: () => setCount((x) => x + 1),\n    decrement: () => setCount((x) => x - 1),\n    reset: () => setCount(initialValue),\n    setCount,\n  };\n}\n`;function m(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useCounter\"}),\" hook uses \",(0,t.jsx)(e.code,{children:\"useState\"}),\" to manage the \",(0,t.jsx)(e.code,{children:\"number\"}),\" state. The setter functions can be implemented in terms of \",(0,t.jsx)(e.code,{children:\"setValue\"}),\" from the \",(0,t.jsx)(e.code,{children:\"useState\"}),\" hook.\"]}),`\n`,(0,t.jsx)(d,{languages:{jsx:l,tsx:h}}),`\n`,(0,t.jsxs)(e.p,{children:[\"To ensure consistency, the \",(0,t.jsx)(e.code,{children:\"increment\"}),\" and \",(0,t.jsx)(e.code,{children:\"decrement\"}),\" functions use an \",(0,t.jsx)(e.a,{href:\"https://react.dev/reference/react/useState#updating-state-based-on-the-previous-state\",children:\"updater function\"}),\" to calculate the new value based on the previous value.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you're using TypeScript, the tricky part is figuring out the right type for \",(0,t.jsx)(e.code,{children:\"setCount\"}),\" since it can also accept an updater function. Simply hover the setter function from \",(0,t.jsx)(e.code,{children:\"useState\"}),\" in your favourite IDE and you'll see the type signature in the form of \",(0,t.jsx)(e.code,{children:\"Dispatch<SetStateAction<...>>\"}),\" where the type of the state is \",(0,t.jsx)(e.code,{children:\"...\"}),\". \",(0,t.jsx)(e.code,{children:\"Dispatch\"}),\" and \",(0,t.jsx)(e.code,{children:\"SetStateAction\"}),\" can be imported from \",(0,t.jsx)(e.code,{children:\"react\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"If you prefer to be verbose, it essentially boils down to this.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`type SetCount = (\n  valueOrUpdater: number | ((previousValue: number) => number),\n) => void;\n`})})]})}function V(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)}var _=V;return y(k);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-counter.ts",
    "run": "/src/use-counter.run.test.ts",
    "submit": "/src/use-counter.submit.test.ts"
  }
}