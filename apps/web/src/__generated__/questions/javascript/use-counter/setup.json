{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-counter\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-counter.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-counter.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport useCounter from './use-counter';\n\ndescribe('useCounter', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCounter());\n\n    expect(result.current.count).toBe(0);\n    expect(typeof result.current.increment).toBe('function');\n    expect(typeof result.current.increment).toBe('function');\n    expect(typeof result.current.decrement).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n    expect(typeof result.current.setCount).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCounter(3));\n\n    expect(result.current.count).toBe(3);\n  });\n\n  test('increment', () => {\n    const { result } = renderHook(() => useCounter());\n\n    act(() => {\n      result.current.increment();\n    });\n    expect(result.current.count).toBe(1);\n  });\n});\n",
    "/src/use-counter.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useCounter from './use-counter';\n\ndescribe('useCounter', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useCounter());\n\n    expect(result.current.count).toBe(0);\n    expect(typeof result.current.increment).toBe('function');\n    expect(typeof result.current.decrement).toBe('function');\n    expect(typeof result.current.reset).toBe('function');\n    expect(typeof result.current.setCount).toBe('function');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useCounter(3));\n\n    expect(result.current.count).toBe(3);\n  });\n\n  test('increment', () => {\n    const { result } = renderHook(() => useCounter());\n\n    act(() => {\n      result.current.increment();\n    });\n    expect(result.current.count).toBe(1);\n  });\n\n  test('decrement', () => {\n    const { result } = renderHook(() => useCounter());\n\n    act(() => {\n      result.current.decrement();\n    });\n    expect(result.current.count).toBe(-1);\n  });\n\n  test('reset', () => {\n    const { result } = renderHook(() => useCounter(3));\n\n    act(() => {\n      result.current.decrement();\n      result.current.decrement();\n      result.current.reset();\n    });\n    expect(result.current.count).toBe(3);\n  });\n\n  describe('setCount', () => {\n    test('direct', () => {\n      const { result } = renderHook(() => useCounter());\n\n      act(() => {\n        result.current.setCount(5);\n      });\n      expect(result.current.count).toBe(5);\n    });\n\n    test('can increment from current value', () => {\n      const { result } = renderHook(() => useCounter(5));\n\n      act(() => {\n        result.current.setCount((x) => x + 2);\n      });\n      expect(result.current.count).toBe(7);\n    });\n  });\n\n  test('integration', () => {\n    const { result } = renderHook(() => useCounter(5));\n\n    act(() => {\n      result.current.setCount((x) => x + 2);\n    });\n    expect(result.current.count).toBe(7);\n\n    act(() => {\n      result.current.increment();\n    });\n    expect(result.current.count).toBe(8);\n\n    act(() => {\n      result.current.decrement();\n    });\n    expect(result.current.count).toBe(7);\n\n    act(() => {\n      result.current.reset();\n    });\n    expect(result.current.count).toBe(5);\n  });\n});\n",
    "/src/use-counter.ts": "import { Dispatch, SetStateAction, useState } from 'react';\n\ninterface UseCounterReturn {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n  reset: () => void;\n  setCount: Dispatch<SetStateAction<number>>;\n}\n\nexport default function useCounter(initialValue = 0): UseCounterReturn {\n  const [count, setCount] = useState(initialValue);\n\n  return {\n    count,\n    increment: () => setCount((x) => x + 1),\n    decrement: () => setCount((x) => x - 1),\n    reset: () => setCount(initialValue),\n    setCount,\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param number initialValue\n * @return Object\n */\nexport default function useCounter(initialValue) {\n  throw 'Not implemented!';\n}",
    "ts": "import { Dispatch, SetStateAction } from 'react';\n\ninterface UseCounterReturn {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n  reset: () => void;\n  setCount: Dispatch<SetStateAction<number>>;\n}\n\nexport default function useCounter(initialValue?: number): UseCounterReturn {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/use-counter.ts",
    "run": "/src/use-counter.run.test.ts",
    "submit": "/src/use-counter.submit.test.ts"
  }
}