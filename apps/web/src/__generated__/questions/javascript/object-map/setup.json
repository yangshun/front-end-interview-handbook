{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/object-map\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/object-map.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/object-map.run.test.ts": "import objectMap from './object-map';\n\nconst double = (x: number) => x * 2;\n\ndescribe('objectMap', () => {\n  test('empty', () => {\n    expect(objectMap({}, double)).toEqual({});\n  });\n\n  test('single key', () => {\n    expect(objectMap({ foo: 2 }, double)).toEqual({ foo: 4 });\n  });\n\n  test('multiple keys', () => {\n    expect(objectMap({ foo: 2, bar: 3 }, double)).toEqual({ foo: 4, bar: 6 });\n  });\n});\n",
    "/src/object-map.submit.test.ts": "import objectMap from './object-map';\n\nconst double = (x: number) => x * 2;\n\ndescribe('objectMap', () => {\n  test('empty', () => {\n    expect(objectMap({}, double)).toEqual({});\n  });\n\n  test('single key', () => {\n    expect(objectMap({ foo: 2 }, double)).toEqual({ foo: 4 });\n  });\n\n  test('multiple keys', () => {\n    expect(objectMap({ foo: 2, bar: 3 }, double)).toEqual({ foo: 4, bar: 6 });\n  });\n\n  test('can access `this`', () => {\n    expect(\n      objectMap({ bar: 3, foo: 2 }, function (this: any, x: number) {\n        return this.foo * x;\n      }),\n    ).toEqual({\n      foo: 4,\n      bar: 6,\n    });\n  });\n\n  test('does not mutate the input', () => {\n    const obj = { bar: 3, foo: 2 };\n    expect(objectMap(obj, double)).toEqual({\n      foo: 4,\n      bar: 6,\n    });\n    expect(obj).toEqual({\n      foo: 2,\n      bar: 3,\n    });\n  });\n});\n",
    "/src/object-map.ts": "export default function objectMap<V, R>(\n  obj: Record<string, V>,\n  fn: (val: V) => R,\n): Record<string, R> {\n  const result: Record<string, R> = {};\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result[key] = fn.call(obj, obj[key]);\n    }\n  }\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Object} obj\n * @param {Function} fn\n * @returns Object\n */\nexport default function objectMap(obj, fn) {\n  throw 'Not implemented';\n}",
    "ts": "export default function objectMap<V, R>(\n  obj: Record<string, V>,\n  fn: (val: V) => R,\n): Record<string, R> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/object-map.ts",
    "run": "/src/object-map.run.test.ts",
    "submit": "/src/object-map.submit.test.ts"
  }
}