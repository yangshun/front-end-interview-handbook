{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-effect-once\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-effect-once.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-effect-once.run.test.ts": "import { renderHook } from '@testing-library/react';\n\nimport useEffectOnce from './use-effect-once';\nimport { StrictMode } from 'react';\n\ndescribe('useEffectOnce', () => {\n  test('returns nothing', () => {\n    const { result } = renderHook(() => useEffectOnce(() => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls the effect once', () => {\n    let counter = 0;\n\n    const { rerender } = renderHook(() =>\n      useEffectOnce(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(1);\n\n    rerender();\n\n    expect(counter).toBe(1);\n  });\n});\n",
    "/src/use-effect-once.submit.test.ts": "import { renderHook } from '@testing-library/react';\n\nimport useEffectOnce from './use-effect-once';\nimport { StrictMode } from 'react';\n\ndescribe('useEffectOnce', () => {\n  test('returns nothing', () => {\n    const { result } = renderHook(() => useEffectOnce(() => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls the effect once', () => {\n    let counter = 0;\n\n    const { rerender } = renderHook(() =>\n      useEffectOnce(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(1);\n\n    rerender();\n\n    expect(counter).toBe(1);\n  });\n\n  test('cleanup function works', () => {\n    let counter = 0;\n\n    const { unmount } = renderHook(() =>\n      useEffectOnce(() => {\n        counter += 1;\n\n        return () => {\n          counter += 1;\n        };\n      }),\n    );\n\n    expect(counter).toBe(1);\n\n    unmount();\n\n    expect(counter).toBe(2);\n  });\n\n  test('calls the effect once across unmounts', () => {\n    let counter = 0;\n\n    const { rerender } = renderHook(\n      () =>\n        useEffectOnce(() => {\n          counter += 1;\n        }),\n      // We could have used `configure({ reactStrictMode: true })` in @testing-library/react@14.2.0+\n      { wrapper: StrictMode },\n    );\n\n    expect(counter).toBe(1);\n\n    rerender();\n\n    expect(counter).toBe(1);\n  });\n});\n",
    "/src/use-effect-once.ts": "import { EffectCallback, useEffect, useRef } from 'react';\n\nexport default function useEffectOnce(effect: EffectCallback) {\n  const ref = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (ref.current) {\n      return;\n    }\n\n    ref.current = true;\n    return effect();\n  }, []);\n}\n"
  },
  "skeleton": {
    "js": "export default function useEffectOnce(effect) {\n  throw 'Not implemented';\n}",
    "ts": "import { EffectCallback } from 'react';\n\nexport default function useEffectOnce(effect: EffectCallback) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-effect-once.ts",
    "run": "/src/use-effect-once.run.test.ts",
    "submit": "/src/use-effect-once.submit.test.ts"
  }
}