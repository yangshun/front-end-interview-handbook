{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/fill\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/fill.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/fill.run.test.ts": "import fill from './fill';\n\ndescribe('fill', () => {\n  test('empty array', () => {\n    expect(fill([], '*')).toEqual([]);\n  });\n\n  test('single element', () => {\n    expect(fill([1], '*')).toEqual(['*']);\n    expect(fill([1], '*', 0, 1)).toEqual(['*']);\n    expect(fill([1], '*', 2, 3)).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(fill([1, 2], '*')).toEqual(['*', '*']);\n    expect(fill([1, 2], '*', 1)).toEqual([1, '*']);\n    expect(fill([1, 2], '*', 2, 3)).toEqual([1, 2]);\n  });\n});\n",
    "/src/fill.submit.test.ts": "import fill from './fill';\n\ndescribe('fill', () => {\n  test('returns original array reference', () => {\n    const arr = [1, 2, 3];\n    expect(fill(arr, '*', 1)).toBe(arr);\n  });\n\n  test('correctly mutates original array', () => {\n    const arr = [1, 2, 3];\n    fill(arr, '*', 1);\n    expect(arr).toEqual([1, '*', '*']);\n  });\n\n  test('empty array', () => {\n    expect(fill([], '*')).toEqual([]);\n    expect(fill([], '*', 2, 3)).toEqual([]);\n  });\n\n  test('single element', () => {\n    expect(fill([1], '*')).toEqual(['*']);\n    expect(fill([1], '*', 0, 1)).toEqual(['*']);\n    expect(fill([1], '*', 2, 3)).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(fill([1, 2], '*')).toEqual(['*', '*']);\n    expect(fill([1, 2], '*', 1)).toEqual([1, '*']);\n    expect(fill([1, 2], '*', 2, 3)).toEqual([1, 2]);\n  });\n\n  describe('multiple elements', () => {\n    test('use default start to end', () => {\n      expect(fill([1, 2, 3], '*')).toEqual(['*', '*', '*']);\n    });\n\n    test('only start specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2)).toEqual([1, 2, '*', '*', '*']);\n    });\n\n    test('start to end specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2, 4)).toEqual([1, 2, '*', '*', 5]);\n    });\n\n    describe('negative indices', () => {\n      test('negative start', () => {\n        expect(fill([1, 2, 3], '*', -2)).toEqual([1, '*', '*']);\n      });\n\n      test('negative start and positive end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, 3)).toEqual([1, '*', '*', 4, 5]);\n      });\n\n      test('negative end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', 1, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('negative start and end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('out of bound indices are provided', () => {\n        expect(fill([1, 2, 3], '*', 1, 10)).toEqual([1, '*', '*']);\n      });\n    });\n  });\n\n  test('end smaller than start', () => {\n    expect(fill([1], '*', 4, 1)).toEqual([1]);\n    expect(fill([1, 2, 3, 4, 5], '*', 4, 1)).toEqual([1, 2, 3, 4, 5]);\n    expect(fill([1, 2, 3, 4, 5], '*', -1, -4)).toEqual([1, 2, 3, 4, 5]);\n  });\n});\n",
    "/src/fill.ts": "export default function fill<T>(\n  array: Array<T>,\n  value: any,\n  start: number = 0,\n  end: number = array.length,\n): Array<T> {\n  const length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  if (end > length) {\n    end = length + 1;\n  }\n\n  if (end < 0) {\n    end += length;\n  }\n\n  for (let i = start; i < Math.min(end, length); i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function fill<T>(\n  array: Array<T>,\n  value: any,\n  start: number = 0,\n  end: number = array.length,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/fill.ts",
    "run": "/src/fill.run.test.ts",
    "submit": "/src/fill.submit.test.ts"
  }
}