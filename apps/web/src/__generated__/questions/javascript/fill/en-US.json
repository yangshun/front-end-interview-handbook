{
  "description": "var Component=(()=>{var s=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),x=(i,e)=>{for(var l in e)t(i,l,{get:e[l],enumerable:!0})},d=(i,e,l,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!p.call(i,r)&&r!==l&&t(i,r,{get:()=>e[r],enumerable:!(a=u(e,r))||a.enumerable});return i};var y=(i,e,l)=>(l=i!=null?s(f(i)):{},d(e||!i||!i.__esModule?t(l,\"default\",{value:i,enumerable:!0}):l,i)),b=i=>d(t({},\"__esModule\",{value:!0}),i);var h=g((T,c)=>{c.exports=_jsx_runtime});var _={};x(_,{default:()=>w,frontmatter:()=>v});var n=y(h()),v={title:\"Fill\",excerpt:\"Implement a function that fills an array with values within specified indices\"};function o(i){let e=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"fill(array, value, [start=0], [end=array.length])\"}),\" that fills an array with values from \",(0,n.jsx)(e.code,{children:\"start\"}),\" up to, but not including, \",(0,n.jsx)(e.code,{children:\"end\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": This method mutates \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to fill.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value\"}),\" \",(0,n.jsx)(e.em,{children:\"(*)\"}),\": The value to fill \",(0,n.jsx)(e.code,{children:\"array\"}),\" with.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[start=0]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The start position.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[end=array.length]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The end position.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Array)\"}),\": Returns \",(0,n.jsx)(e.code,{children:\"array\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fill([1, 2, 3], 'a'); // ['a', 'a', 'a']\nfill([4, 6, 8, 10], '*', 1, 3); // [4, '*', '*', 10]\n\n// out of bounds indices\nfill([4, 6, 8, 10, 12], '*', 1, 8); // [4, '*', '*', '*', '*']\nfill([4, 6, 8, 10, 12], '*', 8, 10); // [4, 6, 8, 10, 12]\n\n// negative but within bounds indices\nfill([4, 6, 8, 10, 12], '*', -3, -1); // [4, 6, '*', '*', 12]\n\n// negative out of bounds indices\nfill([4, 6, 8, 10, 12], '*', -10, 2); // ['*', '*', 8, 10, 12]\nfill([4, 6, 8, 10, 12], '*', -10, -8); // [4, 6, 8, 10, 12]\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Make sure to handle negative indices and out of bound indices as detailed in the examples above. In general, follow these principles:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Translate negative indices to their corresponding positive indices\"}),`\n`,(0,n.jsx)(e.li,{children:\"If the translated end index is smaller than the translated start index, no fill will take place\"}),`\n`,(0,n.jsx)(e.li,{children:\"If a tranlated index is < 0, clamp it to 0.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"If a translated index is > \",(0,n.jsx)(e.code,{children:\"array.length\"}),\", clamp it to \",(0,n.jsx)(e.code,{children:\"array.length\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#fill\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.fill\"})]})}),`\n`]})]})}function j(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(o,i)})):o(i)}var w=j;return b(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/fill\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/fill.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/fill.run.test.ts": "import fill from './fill';\n\ndescribe('fill', () => {\n  test('empty array', () => {\n    expect(fill([], '*')).toEqual([]);\n  });\n\n  test('single element', () => {\n    expect(fill([1], '*')).toEqual(['*']);\n    expect(fill([1], '*', 0, 1)).toEqual(['*']);\n    expect(fill([1], '*', 2, 3)).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(fill([1, 2], '*')).toEqual(['*', '*']);\n    expect(fill([1, 2], '*', 1)).toEqual([1, '*']);\n    expect(fill([1, 2], '*', 2, 3)).toEqual([1, 2]);\n  });\n});\n",
    "/src/fill.submit.test.ts": "import fill from './fill';\n\ndescribe('fill', () => {\n  test('returns original array reference', () => {\n    const arr = [1, 2, 3];\n    expect(fill(arr, '*', 1)).toBe(arr);\n  });\n\n  test('correctly mutates original array', () => {\n    const arr = [1, 2, 3];\n    fill(arr, '*', 1);\n    expect(arr).toEqual([1, '*', '*']);\n  });\n\n  test('empty array', () => {\n    expect(fill([], '*')).toEqual([]);\n    expect(fill([], '*', 2, 3)).toEqual([]);\n  });\n\n  test('single element', () => {\n    expect(fill([1], '*')).toEqual(['*']);\n    expect(fill([1], '*', 0, 1)).toEqual(['*']);\n    expect(fill([1], '*', 2, 3)).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(fill([1, 2], '*')).toEqual(['*', '*']);\n    expect(fill([1, 2], '*', 1)).toEqual([1, '*']);\n    expect(fill([1, 2], '*', 2, 3)).toEqual([1, 2]);\n  });\n\n  describe('multiple elements', () => {\n    test('use default start to end', () => {\n      expect(fill([1, 2, 3], '*')).toEqual(['*', '*', '*']);\n    });\n\n    test('only start specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2)).toEqual([1, 2, '*', '*', '*']);\n    });\n\n    test('start to end specified', () => {\n      expect(fill([1, 2, 3, 4, 5], '*', 2, 4)).toEqual([1, 2, '*', '*', 5]);\n    });\n\n    describe('negative indices', () => {\n      test('negative start', () => {\n        expect(fill([1, 2, 3], '*', -2)).toEqual([1, '*', '*']);\n      });\n\n      test('negative start and positive end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, 3)).toEqual([1, '*', '*', 4, 5]);\n      });\n\n      test('negative end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', 1, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('negative start and end', () => {\n        expect(fill([1, 2, 3, 4, 5], '*', -4, -1)).toEqual([\n          1,\n          '*',\n          '*',\n          '*',\n          5,\n        ]);\n      });\n\n      test('out of bound indices are provided', () => {\n        expect(fill([1, 2, 3], '*', 1, 10)).toEqual([1, '*', '*']);\n      });\n    });\n  });\n\n  test('end smaller than start', () => {\n    expect(fill([1], '*', 4, 1)).toEqual([1]);\n    expect(fill([1, 2, 3, 4, 5], '*', 4, 1)).toEqual([1, 2, 3, 4, 5]);\n    expect(fill([1, 2, 3, 4, 5], '*', -1, -4)).toEqual([1, 2, 3, 4, 5]);\n  });\n});\n",
    "/src/fill.ts": "export default function fill<T>(\n  array: Array<T>,\n  value: any,\n  start: number = 0,\n  end: number = array.length,\n): Array<T> {\n  const length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  if (end > length) {\n    end = length + 1;\n  }\n\n  if (end < 0) {\n    end += length;\n  }\n\n  for (let i = start; i < Math.min(end, length); i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n"
  },
  "info": {
    "excerpt": "Implement a function that fills an array with values within specified indices",
    "title": "Fill"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1682553600,
    "difficulty": "easy",
    "duration": 10,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/fill",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "fill",
    "subtitle": null,
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function fill<T>(\n  array: Array<T>,\n  value: any,\n  start: number = 0,\n  end: number = array.length,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var g=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var r in e)l(t,r,{get:e[r],enumerable:!0})},o=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!x.call(t,a)&&a!==r&&l(t,a,{get:()=>e[a],enumerable:!(i=m(e,a))||i.enumerable});return t};var j=(t,e,r)=>(r=t!=null?g(y(t)):{},o(e||!t||!t.__esModule?l(r,\"default\",{value:t,enumerable:!0}):r,t)),_=t=>o(l({},\"__esModule\",{value:!0}),t);var h=v((X,s)=>{s.exports=_jsx_runtime});var C={};T(C,{default:()=>k});var n=j(h());var d=MDXCodeBlock;var c=`/**\n * @param {Array} array - The array to fill.\n * @param {*} value - The value to fill array with.\n * @param {number} [start=0] - The start position.\n * @param {number} [end=array.length] - The end position.\n * @return {Array} Returns the filled array.\n */\nexport default function fill(array, value, start = 0, end = array.length) {\n  const length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  if (end > length) {\n    end = length + 1;\n  }\n\n  if (end < 0) {\n    end += length;\n  }\n\n  for (let i = start; i < Math.min(end, length); i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n`;var u=`export default function fill<T>(\n  array: Array<T>,\n  value: any,\n  start: number = 0,\n  end: number = array.length,\n): Array<T> {\n  const length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  if (end > length) {\n    end = length + 1;\n  }\n\n  if (end < 0) {\n    end += length;\n  }\n\n  for (let i = start; i < Math.min(end, length); i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n`;function f(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"A key part of the solution approach is to translate negative indices to corresponding positive ones. Then, it is simpler to check bounds and handle edge cases.\"}),`\n`,(0,n.jsx)(d,{languages:{jsx:c,tsx:u}}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Empty, one, two-element arrays.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Negative indices.\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"end\"}),\" is 'smaller' than \",(0,n.jsx)(e.code,{children:\"start\"}),\": the fill should not occur at all.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#fill\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.fill\"})]})}),`\n`]})]})}function A(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var k=A;return _(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/fill.ts",
    "run": "/src/fill.run.test.ts",
    "submit": "/src/fill.submit.test.ts"
  }
}