{
  "description": "var Component=(()=>{var s=Object.create;var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),p=(r,e)=>{for(var t in e)d(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!x.call(r,i)&&i!==t&&d(r,i,{get:()=>e[i],enumerable:!(a=m(e,i))||a.enumerable});return r};var I=(r,e,t)=>(t=r!=null?s(u(r)):{},c(e||!r||!r.__esModule?d(t,\"default\",{value:r,enumerable:!0}):t,r)),y=r=>c(d({},\"__esModule\",{value:!0}),r);var h=g((j,o)=>{o.exports=_jsx_runtime});var b={};p(b,{default:()=>L,frontmatter:()=>v});var n=I(h()),v={title:\"Find Last Index\",excerpt:\"Implement a function that returns the index of the last element in the array that satisfies the provided testing function\"};function l(r){let e=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",ul:\"ul\",pre:\"pre\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"findLastIndex(array, predicate, [fromIndex=array.length-1])\"}),\" that takes an array of values, a function \",(0,n.jsx)(e.code,{children:\"predicate\"}),\", and an optional \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" number argument. \",(0,n.jsx)(e.code,{children:\"findLastIndex\"}),\" iterates over elements of the \",(0,n.jsx)(e.code,{children:\"array\"}),\" from \",(0,n.jsx)(e.strong,{children:\"right to left\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function returns the index of the first element that satisfies the \",(0,n.jsx)(e.code,{children:\"predicate\"}),\" when \",(0,n.jsx)(e.strong,{children:\"iterating backwards\"}),\" from \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to inspect.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"predicate\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The function invoked per iteration.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[fromIndex=array.length-1]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The index to start searching \",(0,n.jsx)(e.strong,{children:\"from\"}),\" (towards the left).\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Predicate signature: The \",(0,n.jsx)(e.code,{children:\"predicate\"}),\" function is invoked with three arguments: \",(0,n.jsx)(e.code,{children:\"(value, index, array)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value\"}),\": The current element being iterated.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"index\"}),\": The index of the current element.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\": The original input array.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(number)\"}),\": Returns the index of the found element, else \",(0,n.jsx)(e.code,{children:\"-1\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [5, 4, 3, 2, 1]; // Indices: 0, 1, 2, 3, 4\n\n// Search for the element > 3, starting from the end (index 4).\nfindLastIndex(arr, (num) => num > 3); // => 1\n\n// Start searching backwards from index 3.\n// Check index 3: 2 > 1 is true. Stop.\nfindLastIndex(arr, (num) => num > 1, 3); // => 3\n\n// Start searching backwards from index 3.\n// Check index 3: 2 < 1 is false.\n// Check index 2: 3 < 1 is false.\n// Check index 1: 4 < 1 is false.\n// Check index 0: 5 < 1 is false. Reached start and no element found.\nfindLastIndex(arr, (num) => num < 1, 3); // => -1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Your function should handle negative and out-of-bound \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" values.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Negative \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\": negative integers count back from the last item in the array. \",(0,n.jsx)(e.code,{children:\"-1\"}),\" means the last element in the array, \",(0,n.jsx)(e.code,{children:\"-2\"}),\" means the second last element, and so on.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Negative out of Bounds: if the resolved index from a negative \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" is less than 0 (e.g., \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" is -10 for an array of length 5), the search starts from index 0.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Positive and out of Bounds: If \",(0,n.jsx)(e.code,{children:\"fromIndex >=  array.length\"}),\", the search starts from the last index (\",(0,n.jsx)(e.code,{children:\"array.length - 1\"}),\").\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [5, 4, 3, 2, 1]; Indices 0, 1, 2, 3, 4\n\n// fromIndex = -3 resolves to index 2.\n// Check index 2: 3 > 2 is true. Stop.\nfindLastIndex(arr, (num) => num > 2, -3); // => 2\n\n// fromIndex = -3 resolves to index 2.\n// Check index 2: 3 % 2 === 0 is false.\n// Check index 1: 4 % 2 === 0 is true. Stop.\nfindLastIndex(arr, (num) => num % 2 === 0, -3); // => 1\n\n// Start from the last index if fromIndex >= array.length.\nfindLastIndex(arr, (num) => num > 0, 10); // => 4\n\n// Negative and out of bounds, start searching from the first item in the array.\n// Check index 0: 5 > 2 is true\nfindLastIndex(arr, (num) => num > 0, -10); // => 0\n\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#findLastIndex\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.findLastIndex\"})]})}),`\n`]})]})}function k(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var L=k;return y(b);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/find-last-index\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/find-last-index.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/find-last-index.run.test.ts": "import findLastIndex from './find-last-index';\n\ndescribe('findLastIndex', () => {\n  test('empty array', () => {\n    expect(findLastIndex([], (value) => value > 5)).toEqual(-1);\n  });\n\n  test('returns the index of the last element that satisfies the predicate', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value > 2)).toEqual(4);\n  });\n\n  test('no element satisfies the predicate', () => {\n    expect(findLastIndex([1, 2, 3, 4, 5], (value) => value > 5)).toEqual(-1);\n  });\n});\n",
    "/src/find-last-index.submit.test.ts": "import findLastIndex from './find-last-index';\n\ndescribe('findLastIndex', () => {\n  test('empty array', () => {\n    expect(findLastIndex([], (value) => value > 5)).toEqual(-1);\n  });\n\n  test('simple array', () => {\n    const arr = [1, 2, 3, 4, 5];\n    expect(findLastIndex(arr, (value) => value > 2)).toEqual(4);\n  });\n\n  test('no element satisfies the predicate', () => {\n    const arr = [1, 2, 3, 4, 5];\n    expect(findLastIndex(arr, (value) => value > 5)).toEqual(-1);\n  });\n\n  test('starts the search from the given index', () => {\n    const arr = [1, 2, 3, 4, 5];\n    expect(findLastIndex(arr, (value) => value < 4, 3)).toEqual(2); // Checks 4(false), 3(true) -> index 2\n  });\n\n  test('handles negative fromIndex', () => {\n    const arr = [1, 2, 3, 4, 5];\n    // fromIndex = -2 resolves to index 3 (5 + -2 = 3)\n    // Checks index 3: 4 > 3 is true. Returns 3.\n    expect(findLastIndex(arr, (value) => value > 3, -2)).toEqual(3);\n  });\n\n  test('handles negative out of bound indices correctly', () => {\n    const arr = [1, 2, 3, 4, 5];\n    // fromIndex = -10 resolves to index 0. Check index 0: 1 % 2 === 0 is false. Returns -1.\n    expect(findLastIndex(arr, (value) => value % 2 === 0, -10)).toEqual(-1);\n    // fromIndex = -100 resolves to index 0. Check index 0: 1 < 2 is true. Returns 0.\n    expect(findLastIndex(arr, (value) => value < 2, -100)).toEqual(0);\n  });\n\n  test('handles positive out of bound indices', () => {\n    const arr = [1, 2, 3, 4, 5];\n    // fromIndex = 10 resolves to index 4.\n    // Checks index 4: 5 > 3 is true. Returns 4.\n    expect(findLastIndex(arr, (value) => value > 3, 10)).toEqual(4);\n  });\n\n  test('predicate uses index argument', () => {\n    const arr = [0, 5, 10, 3, 20]; // Indices: 0, 1, 2, 3, 4\n    // Find last element where value > index * 4\n    // Check 4: 20 > 4*4=16 (true) -> index 4\n    expect(findLastIndex(arr, (value, index) => value > index * 4)).toEqual(4);\n    // Check 3: 3 > 3*4=12 (false)\n    // Check 2: 10 > 2*4=8 (true) -> index 2\n    expect(findLastIndex(arr, (value, index) => value > index * 4, 3)).toEqual(\n      2,\n    );\n  });\n\n  test('predicate uses array argument', () => {\n    const arr = [10, 20, 5, 30, 15]; // Indices: 0, 1, 2, 3, 4\n    // Find last element > first element\n    // Check 4: 15 > arr[0]=10 (true) -> index 4\n    expect(\n      findLastIndex(arr, (value, index, array) => value > array[0]),\n    ).toEqual(4);\n    // Start from index 2\n    // Check 2: 5 > arr[0]=10 (false)\n    // Check 1: 20 > arr[0]=10 (true) -> index 1\n    expect(\n      findLastIndex(arr, (value, index, array) => value > array[0], 2),\n    ).toEqual(1);\n  });\n\n  test('unsorted array', () => {\n    const arr = [50, 10, 40, 20, 30];\n    // Find last element < 25\n    // Check 4: 30 < 25 (false)\n    // Check 3: 20 < 25 (true) -> index 3\n    expect(findLastIndex(arr, (value) => value < 25)).toEqual(3);\n  });\n\n  test('array with duplicates', () => {\n    const arr = [5, 8, 6, 8, 7]; // Indices: 0, 1, 2, 3, 4\n    // Check 4: 7 === 8 (false)\n    // Check 3: 8 === 8 (true) -> index 3\n    expect(findLastIndex(arr, (value) => value === 8)).toEqual(3);\n    // Start from index 2\n    // Check 2: 6 === 8 (false)\n    // Check 1: 8 === 8 (true) -> index 1\n    expect(findLastIndex(arr, (value) => value === 8, 2)).toEqual(1);\n  });\n\n  test('array with mixed types', () => {\n    const arr = [1, 'apple', true, null, 'banana', 0];\n    // Find last string\n    // Check 5: 0 (false)\n    // Check 4: 'banana' (true) -> index 4\n    expect(findLastIndex(arr, (value) => typeof value === 'string')).toEqual(4);\n    // Find last boolean\n    // Check 5: 0 (false)\n    // Check 4: 'banana' (false)\n    // Check 3: null (false)\n    // Check 2: true (true) -> index 2\n    expect(findLastIndex(arr, (value) => typeof value === 'boolean')).toEqual(\n      2,\n    );\n  });\n\n  test('array with falsy values', () => {\n    const arr = [1, '', 0, false, null, undefined, 2]; // Indices: 0, 1, 2, 3, 4, 5, 6\n    // Find last null\n    expect(findLastIndex(arr, (value) => value === null)).toEqual(4);\n    // Find last falsy value (using !)\n    // Check 6: 2 (false)\n    // Check 5: undefined (true) -> index 5\n    expect(findLastIndex(arr, (value) => !value)).toEqual(5);\n    // Find last falsy value starting from index 3\n    // Check 3: false (true) -> index 3\n    expect(findLastIndex(arr, (value) => !value, 3)).toEqual(3);\n  });\n\n  test('fromIndex exactly 0', () => {\n    const arr = [10, 20, 30];\n    // Checks index 0: 10 > 5 (true) -> index 0\n    expect(findLastIndex(arr, (value) => value > 5, 0)).toEqual(0);\n    // Checks index 0: 10 < 5 (false) -> -1\n    expect(findLastIndex(arr, (value) => value < 5, 0)).toEqual(-1);\n  });\n\n  test('fromIndex exactly last index', () => {\n    const arr = [10, 5, 20]; // Indices: 0, 1, 2\n    // fromIndex = 2\n    // Check 2: 20 > 15 (true) -> index 2\n    expect(findLastIndex(arr, (value) => value > 15, 2)).toEqual(2);\n    // Check 2: 20 < 15 (false)\n    // Check 1: 5 < 15 (true) -> index 1\n    expect(findLastIndex(arr, (value) => value < 15, 2)).toEqual(1);\n  });\n\n  test('negative fromIndex resolves exactly to 0', () => {\n    const arr = [10, 20, 30]; // length 3\n    // fromIndex = -3 resolves to index 0 (3 + -3 = 0)\n    // Checks index 0: 10 > 5 (true) -> index 0\n    expect(findLastIndex(arr, (value) => value > 5, -3)).toEqual(0);\n    // Checks index 0: 10 < 5 (false) -> -1\n    expect(findLastIndex(arr, (value) => value < 5, -3)).toEqual(-1);\n  });\n\n  test('negative fromIndex resolves exactly to last index', () => {\n    const arr = [10, 5, 20]; // length 3\n    // fromIndex = -1 resolves to index 2 (3 + -1 = 2)\n    // Check 2: 20 > 15 (true) -> index 2\n    expect(findLastIndex(arr, (value) => value > 15, -1)).toEqual(2);\n    // Check 2: 20 < 15 (false)\n    // Check 1: 5 < 15 (true) -> index 1\n    expect(findLastIndex(arr, (value) => value < 15, -1)).toEqual(1);\n  });\n\n  test('single element array - match', () => {\n    expect(findLastIndex([42], (v) => v > 10)).toEqual(0);\n    expect(findLastIndex([42], (v) => v > 10, 0)).toEqual(0);\n    expect(findLastIndex([42], (v) => v > 10, 10)).toEqual(0); // Out of bounds positive\n    expect(findLastIndex([42], (v) => v > 10, -1)).toEqual(0); // Negative resolves to 0\n    expect(findLastIndex([42], (v) => v > 10, -10)).toEqual(0); // Out of bounds negative\n  });\n\n  test('single element array - no match', () => {\n    expect(findLastIndex([5], (v) => v > 10)).toEqual(-1);\n    expect(findLastIndex([5], (v) => v > 10, 0)).toEqual(-1);\n    expect(findLastIndex([5], (v) => v > 10, 10)).toEqual(-1); // Out of bounds positive\n    expect(findLastIndex([5], (v) => v > 10, -1)).toEqual(-1); // Negative resolves to 0\n    expect(findLastIndex([5], (v) => v > 10, -10)).toEqual(-1); // Out of bounds negative\n  });\n});\n",
    "/src/find-last-index.ts": "export default function findLastIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex = array.length - 1,\n): number {\n  let startIndex =\n    fromIndex < 0\n      ? Math.max(array.length + fromIndex, 0)\n      : Math.min(fromIndex, array.length - 1);\n\n  let index = startIndex;\n  // Iterate from the right.\n  while (index >= 0) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n    index--;\n  }\n\n  return -1;\n}\n"
  },
  "info": {
    "excerpt": "Implement a function that returns the index of the last element in the array that satisfies the provided testing function",
    "title": "Find Last Index"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1682726400,
    "difficulty": "easy",
    "duration": 10,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/find-last-index",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "find-index"
    ],
    "slug": "find-last-index",
    "subtitle": null,
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * This function returns the index of the last element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] - The index to start searching backwards from.\n * @returns The index of the found element, else -1.\n */\nexport default function findLastIndex(\n  array,\n  predicate,\n  fromIndex = array.length - 1,\n) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function findLastIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex = array.length - 1,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),T=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},o=(r,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of y(e))!p.call(r,a)&&a!==t&&i(r,a,{get:()=>e[a],enumerable:!(d=u(e,a))||d.enumerable});return r};var M=(r,e,t)=>(t=r!=null?m(I(r)):{},o(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),j=r=>o(i({},\"__esModule\",{value:!0}),r);var x=g((X,s)=>{s.exports=_jsx_runtime});var C={};T(C,{default:()=>w});var n=M(x());var h=MDXCodeBlock;var l=`/**\n * This function returns the index of the last element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findLastIndex(\n  array,\n  predicate,\n  fromIndex = array.length - 1,\n) {\n  let startIndex =\n    fromIndex < 0\n      ? Math.max(array.length + fromIndex, 0)\n      : Math.min(fromIndex, array.length - 1);\n\n  let index = startIndex;\n  // Iterate from the right.\n  while (index >= 0) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n    index--;\n  }\n\n  return -1;\n}\n`;var f=`export default function findLastIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex = array.length - 1,\n): number {\n  let startIndex =\n    fromIndex < 0\n      ? Math.max(array.length + fromIndex, 0)\n      : Math.min(fromIndex, array.length - 1);\n\n  let index = startIndex;\n  // Iterate from the right.\n  while (index >= 0) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n    index--;\n  }\n\n  return -1;\n}\n`;function c(r){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\",code:\"code\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(h,{languages:{jsx:l,tsx:f}}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#findLastIndex\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.findLastIndex\"})]})}),`\n`]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(c,r)})):c(r)}var w=b;return j(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/find-last-index.ts",
    "run": "/src/find-last-index.run.test.ts",
    "submit": "/src/find-last-index.submit.test.ts"
  }
}