{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/cancellable-interval\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/cancellable-interval.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/cancellable-interval.run.test.ts": "import setCancellableInterval from './cancellable-interval';\n\ndescribe('setCancellableInterval', () => {\n  test('returns a function', () => {\n    expect(typeof setCancellableInterval(() => {})).toBe('function');\n  });\n\n  test('cancelled immediately', (done) => {\n    expect.assertions(2);\n    let i = 0;\n\n    setInterval(() => {\n      // Ensure setInterval callback is never called.\n      expect(i).toBe(0);\n      done();\n    });\n    const cancel = setCancellableInterval(() => {\n      i++;\n    }, 10);\n    cancel();\n    expect(i).toBe(0);\n  });\n\n  test('after running once', (done) => {\n    let i = 0;\n\n    const cancel = setCancellableInterval(() => {\n      i++;\n    }, 10);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      cancel();\n      done();\n    }, 15);\n\n    expect(i).toBe(0);\n  });\n});\n",
    "/src/cancellable-interval.submit.test.ts": "import setCancellableInterval from './cancellable-interval';\n\ndescribe('setCancellableInterval', () => {\n  test('returns a function', () => {\n    expect(typeof setCancellableInterval(() => {})).toBe('function');\n  });\n\n  describe('cancelled', () => {\n    test('immediately', (done) => {\n      expect.assertions(2);\n      let i = 0;\n\n      setInterval(() => {\n        // Ensure setInterval callback is never called.\n        expect(i).toBe(0);\n        done();\n      });\n      const cancel = setCancellableInterval(() => {\n        i++;\n      }, 10);\n      cancel();\n      expect(i).toBe(0);\n    });\n\n    test('after running once', (done) => {\n      let i = 0;\n\n      const cancel = setCancellableInterval(() => {\n        i++;\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        cancel();\n        done();\n      }, 15);\n\n      expect(i).toBe(0);\n    });\n\n    test('after running twice', (done) => {\n      let i = 0;\n\n      const cancel = setCancellableInterval(() => {\n        i++;\n\n        if (i === 2) {\n          cancel();\n          done();\n        }\n      }, 10);\n\n      expect(i).toBe(0);\n    });\n  });\n\n  test('uses parameters', (done) => {\n    let i = 1;\n    let count = 0;\n\n    const cancel = setCancellableInterval(\n      (foo: number, bar: number) => {\n        count++;\n        i += foo;\n        i *= bar;\n\n        if (count === 1) {\n          expect(i).toBe(21);\n        }\n\n        if (count === 2) {\n          expect(i).toBe(161);\n          cancel();\n          done();\n        }\n      },\n      10,\n      2,\n      7,\n    );\n\n    expect(i).toBe(1);\n  });\n});\n",
    "/src/cancellable-interval.ts": "export default function setCancellableInterval(\n  callback: Function,\n  delay?: number,\n  ...args: Array<any>\n): () => void {\n  const timerId = setInterval(callback, delay, ...args);\n\n  return () => {\n    clearInterval(timerId);\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} callback\n * @param {number} delay\n * @param {...any} args\n * @returns {Function}\n */\nexport default function setCancellableInterval(callback, delay, ...args) {\n  throw 'Not implemented';\n}",
    "ts": "export default function setCancellableInterval(\n  callback: Function,\n  delay?: number,\n  ...args: Array<any>\n): () => void {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/cancellable-interval.ts",
    "run": "/src/cancellable-interval.run.test.ts",
    "submit": "/src/cancellable-interval.submit.test.ts"
  }
}