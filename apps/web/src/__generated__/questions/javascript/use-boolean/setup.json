{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-boolean\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-boolean.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-boolean.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useBoolean from './use-boolean';\n\ndescribe('useBoolean', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useBoolean());\n\n    expect(result.current.value).toBe(false);\n    expect(typeof result.current.setTrue).toBe('function');\n    expect(typeof result.current.setFalse).toBe('function');\n  });\n\n  test('initial true', () => {\n    const { result } = renderHook(() => useBoolean(true));\n\n    expect(result.current.value).toBe(true);\n  });\n\n  test('setFalse', () => {\n    const { result } = renderHook(() => useBoolean(true));\n\n    act(() => {\n      result.current.setFalse();\n    });\n    expect(result.current.value).toBe(false);\n  });\n});\n",
    "/src/use-boolean.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useBoolean from './use-boolean';\n\ndescribe('useBoolean', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useBoolean());\n\n    expect(result.current.value).toBe(false);\n    expect(typeof result.current.setTrue).toBe('function');\n    expect(typeof result.current.setFalse).toBe('function');\n  });\n\n  describe('initial values', () => {\n    test('initial true', () => {\n      const { result } = renderHook(() => useBoolean(true));\n\n      expect(result.current.value).toBe(true);\n    });\n\n    test('initial false', () => {\n      const { result } = renderHook(() => useBoolean(false));\n\n      expect(result.current.value).toBe(false);\n    });\n  });\n\n  describe('setTrue', () => {\n    test('once', () => {\n      const { result } = renderHook(() => useBoolean(false));\n\n      act(() => {\n        result.current.setTrue();\n      });\n      expect(result.current.value).toBe(true);\n    });\n\n    test('twice', () => {\n      const { result } = renderHook(() => useBoolean(false));\n\n      act(() => {\n        result.current.setTrue();\n        result.current.setTrue();\n      });\n      expect(result.current.value).toBe(true);\n    });\n  });\n\n  describe('setFalse', () => {\n    test('once', () => {\n      const { result } = renderHook(() => useBoolean(true));\n\n      act(() => {\n        result.current.setFalse();\n      });\n      expect(result.current.value).toBe(false);\n    });\n\n    test('twice', () => {\n      const { result } = renderHook(() => useBoolean(true));\n\n      act(() => {\n        result.current.setFalse();\n        result.current.setFalse();\n      });\n      expect(result.current.value).toBe(false);\n    });\n  });\n\n  test('integration', () => {\n    const { result } = renderHook(() => useBoolean(true));\n\n    act(() => {\n      result.current.setFalse();\n    });\n    expect(result.current.value).toBe(false);\n\n    act(() => {\n      result.current.setTrue();\n    });\n    expect(result.current.value).toBe(true);\n  });\n});\n",
    "/src/use-boolean.ts": "import { useState } from 'react';\n\ntype UseBooleanReturn = {\n  /** The current boolean state value. */\n  value: boolean;\n  /** Function to set the boolean state to `true`. */\n  setTrue: () => void;\n  /** Function to set the boolean state to `false`. */\n  setFalse: () => void;\n};\n\nexport default function useBoolean(initialValue = false): UseBooleanReturn {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setTrue: () => setValue(true),\n    setFalse: () => setValue(false),\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param boolean initialValue\n * @return Object\n */\nexport default function useBoolean(initialValue) {\n  throw 'Not implemented!';\n}",
    "ts": "type UseBooleanReturn = {\n  value: boolean;\n  setTrue: () => void;\n  setFalse: () => void;\n};\n\nexport default function useBoolean(initialValue?: boolean): UseBooleanReturn {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/use-boolean.ts",
    "run": "/src/use-boolean.run.test.ts",
    "submit": "/src/use-boolean.submit.test.ts"
  }
}