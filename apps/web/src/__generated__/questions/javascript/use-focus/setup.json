{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-focus\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-focus.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-focus.run.test.tsx": "import React from 'react';\nimport { act, render, renderHook } from '@testing-library/react';\n\nimport useFocus from './use-focus';\n\nconst Component = () => {\n  const [ref, focus] = useFocus<HTMLInputElement>();\n\n  return (\n    <main>\n      <input type=\"text\" ref={ref} data-testid=\"input\" />\n\n      <button onClick={focus} data-testid=\"button\">\n        Focus\n      </button>\n    </main>\n  );\n};\n\ndescribe('useFocus', () => {\n  beforeEach(() => {\n    Object.defineProperty(globalThis.window, 'requestAnimationFrame', {\n      value: (cb: FrameRequestCallback) => cb(0),\n    });\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useFocus());\n\n    expect(Array.isArray(result.current)).toBe(true);\n    expect(result.current.length).toBe(2);\n    expect(typeof result.current[0]).toBe('object');\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('focus', () => {\n    const page = render(<Component />);\n    const input = page.getByTestId('input');\n    const button = page.getByTestId('button');\n\n    expect(document.activeElement).not.toBe(input);\n\n    act(() => button.click());\n\n    expect(document.activeElement).toBe(input);\n  });\n});\n",
    "/src/use-focus.submit.test.tsx": "import React from 'react';\nimport { act, render, renderHook } from '@testing-library/react';\n\nimport useFocus from './use-focus';\n\nconst Component = () => {\n  const [ref, focus] = useFocus<HTMLInputElement>();\n\n  return (\n    <main>\n      <input type=\"text\" ref={ref} data-testid=\"input\" />\n\n      <button onClick={focus} data-testid=\"button\">\n        Focus\n      </button>\n    </main>\n  );\n};\n\ndescribe('useFocus', () => {\n  beforeEach(() => {\n    Object.defineProperty(globalThis.window, 'requestAnimationFrame', {\n      value: (cb: FrameRequestCallback) => cb(0),\n    });\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useFocus());\n\n    expect(Array.isArray(result.current)).toBe(true);\n    expect(result.current.length).toBe(2);\n    expect(typeof result.current[0]).toBe('object');\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('focus', () => {\n    const page = render(<Component />);\n    const input = page.getByTestId('input');\n    const button = page.getByTestId('button');\n\n    expect(document.activeElement).not.toBe(input);\n\n    act(() => button.click());\n\n    expect(document.activeElement).toBe(input);\n  });\n});\n",
    "/src/use-focus.ts": "import { RefObject, useCallback, useRef } from 'react';\n\nexport default function useFocus<T extends HTMLElement>(): [\n  RefObject<T>,\n  () => void,\n] {\n  const ref = useRef<T>(null);\n\n  const focusElement = useCallback(() => {\n    requestAnimationFrame(() => {\n      ref.current?.focus();\n    });\n  }, []);\n\n  return [ref, focusElement];\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @returns {[import(\"react\").RefObject<T>, () => void]}\n */\nexport default function useFocus() {\n  throw 'Not implemented';\n}",
    "ts": "import { RefObject } from 'react';\n\nexport default function useFocus<T extends HTMLElement>(): [\n  RefObject<T>,\n  () => void,\n] {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-focus.ts",
    "run": "/src/use-focus.run.test.tsx",
    "submit": "/src/use-focus.submit.test.tsx"
  }
}