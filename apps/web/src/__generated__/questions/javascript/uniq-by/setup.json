{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/uniq-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/uniq-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/uniq-by.run.test.ts": "import uniqBy from './uniq-by';\n\ndescribe('uniqBy', () => {\n  test('empty array', () => {\n    expect(uniqBy([], (o: any) => o.m)).toEqual([]);\n  });\n\n  test('one value', () => {\n    expect(uniqBy([0])).toEqual([0]);\n  });\n\n  test('different values', () => {\n    expect(uniqBy([2.1, 1.2, 2.3], Math.floor)).toEqual([2.1, 1.2]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqBy([{ x: 1 }, { x: 2 }, { x: 1 }], (o: any) => o.x)).toEqual([\n      { x: 1 },\n      { x: 2 },\n    ]);\n  });\n});\n",
    "/src/uniq-by.submit.test.ts": "import uniqBy from './uniq-by';\n\ndescribe('uniqBy', () => {\n  test('empty array', () => {\n    expect(uniqBy([], (value: any) => value)).toEqual([]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqBy([2, 1, 2], (value: any) => value)).toEqual([2, 1]);\n    expect(uniqBy([2, 2, 1], (value: any) => value)).toEqual([2, 1]);\n    expect(uniqBy([2, 1, 2, 3], (value: any) => value)).toEqual([2, 1, 3]);\n  });\n\n  test('iteratee as a string', () => {\n    expect(uniqBy([{ n: 1 }, { n: 2 }, { n: 1 }], (o: any) => o.n)).toEqual([\n      { n: 1 },\n      { n: 2 },\n    ]);\n    expect(\n      uniqBy([{ age: 30 }, { age: 22 }, { age: 22 }], (o: any) => o.age),\n    ).toEqual([{ age: 30 }, { age: 22 }]);\n  });\n\n  test('iteratee as a function', () => {\n    expect(\n      uniqBy(\n        [{ data: { score: 10 } }, { data: { score: 10 } }],\n        (o: any) => o.data.score,\n      ),\n    ).toEqual([{ data: { score: 10 } }]);\n  });\n\n  test('strings comparison', () => {\n    expect(\n      uniqBy(['apple', 'pear', 'mango'], (fruit: any) => fruit.length),\n    ).toEqual(['apple', 'pear']);\n  });\n\n  test('non-existent property', () => {\n    expect(uniqBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual([{ n: 1 }]);\n    expect(uniqBy([{ n: 1 }, { m: 2 }], (o: any) => o.m)).toEqual([\n      { n: 1 },\n      { m: 2 },\n    ]);\n  });\n\n  test('mixed data types', () => {\n    expect(uniqBy([1, '2', 3], (item: any) => Number(item))).toEqual([\n      1,\n      '2',\n      3,\n    ]);\n  });\n});\n",
    "/src/uniq-by.ts": "export default function uniqBy<T>(\n  array: Array<T>,\n  iteratee: Function = (value: T) => value,\n): Array<T> {\n  const result: Array<T> = [];\n  const compare: Array<T> = [];\n\n  array.forEach((item) => {\n    if (!compare.includes(iteratee(item))) {\n      result.push(item);\n      compare.push(iteratee(item));\n    }\n  });\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the unique array.\n */\nexport default function uniqBy(array, iteratee = (value) => value) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function uniqBy<T>(\n  array: Array<T>,\n  iteratee: Function = (value: T) => value,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/uniq-by.ts",
    "run": "/src/uniq-by.run.test.ts",
    "submit": "/src/uniq-by.submit.test.ts"
  }
}