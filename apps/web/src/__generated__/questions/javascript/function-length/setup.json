{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/function-length\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/function-length.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/function-length.run.test.ts": "import functionLength from './function-length';\n\ndescribe('functionLength', () => {\n  test('no arguments', () => {\n    expect(functionLength(function foo() {})).toBe(0);\n    expect(functionLength(() => {})).toBe(0);\n  });\n\n  test('one argument', () => {\n    expect(functionLength(function foo(a: number) {})).toBe(1);\n    expect(functionLength((a: number) => {})).toBe(1);\n  });\n\n  test('two arguments', () => {\n    expect(functionLength(function foo(a: number, b: number) {})).toBe(2);\n    expect(functionLength((a: number, b: number) => {})).toBe(2);\n  });\n});\n",
    "/src/function-length.submit.test.ts": "import functionLength from './function-length';\n\ndescribe('functionLength', () => {\n  test('no arguments', () => {\n    expect(functionLength(function foo() {})).toBe(0);\n    expect(functionLength(() => {})).toBe(0);\n  });\n\n  test('one argument', () => {\n    expect(functionLength(function foo(a: number) {})).toBe(1);\n    expect(functionLength((a: number) => {})).toBe(1);\n  });\n\n  test('two arguments', () => {\n    expect(functionLength(function foo(a: number, b: number) {})).toBe(2);\n    expect(functionLength((a: number, b: number) => {})).toBe(2);\n  });\n\n  test('multiple arguments', () => {\n    expect(\n      functionLength(function foo(a: number, b: number, c: number) {}),\n    ).toBe(3);\n    expect(functionLength((a: number, b: number, c: number) => {})).toBe(3);\n  });\n\n  // TODO: Transpilation output makes the default parameters non-default, thus\n  // the results are different in the browser. Commented out for now.\n  // test('default arguments', () => {\n  //   expect(functionLength(function foo(a, b = 2) {})).toBe(1);\n  //   expect(functionLength(function foo(a = 1, b = 2) {})).toBe(0);\n  // });\n\n  // test('rest arguments', () => {\n  //   expect(functionLength(function foo(...args) {})).toBe(0);\n  //   expect(functionLength(function foo(a, ...args) {})).toBe(1);\n  //   expect(functionLength(function foo(a, b, ...args) {})).toBe(2);\n  //   expect(functionLength(function foo(a, b = 1, ...args) {})).toBe(1);\n  // });\n});\n",
    "/src/function-length.ts": "export default function functionLength(fn: Function): number {\n  return fn.length;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} fn\n * @return {number}\n */\nexport default function functionLength(fn) {\n  throw 'Not implemented';\n}",
    "ts": "export default function functionLength(fn: Function): number {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/function-length.ts",
    "run": "/src/function-length.run.test.ts",
    "submit": "/src/function-length.submit.test.ts"
  }
}