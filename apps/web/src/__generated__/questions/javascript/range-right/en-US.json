{
  "description": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),R=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},h=(r,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of u(e))!p.call(r,c)&&c!==t&&i(r,c,{get:()=>e[c],enumerable:!(d=g(e,c))||d.enumerable});return r};var b=(r,e,t)=>(t=r!=null?s(m(r)):{},h(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),x=r=>h(i({},\"__esModule\",{value:!0}),r);var l=f((q,a)=>{a.exports=_jsx_runtime});var N={};R(N,{default:()=>y,frontmatter:()=>j});var n=b(l()),j={title:\"Range Right\",excerpt:\"Implement a function that returns a sequence of numbers in descending order\"};function o(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"rangeRight([start=0], end, [step=1])\"}),\" that creates an array of numbers progressing from \",(0,n.jsx)(e.code,{children:\"start\"}),\" up to (but not including) \",(0,n.jsx)(e.code,{children:\"end\"}),\" with a specified \",(0,n.jsx)(e.code,{children:\"step\"}),\", similar to \",(0,n.jsx)(e.a,{href:\"/questions/javascript/range\",children:(0,n.jsx)(e.code,{children:\"range\"})}),\", but in a descending order.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"start\"}),\" \",(0,n.jsx)(e.em,{children:\"(Number)\"}),\": The start of the range.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"end\"}),\" \",(0,n.jsx)(e.em,{children:\"(Number)\"}),\": The end of the range.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"step\"}),\" \",(0,n.jsx)(e.em,{children:\"(Number)\"}),\": The value to increment or decrement by.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(Array)\"})}),\": Returns the range of numbers.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`rangeRight(4); // => [3, 2, 1, 0]\n\nrangeRight(-4); // => [-3, -2, -1, 0]\n\nrangeRight(1, 5); // => [4, 3, 2, 1]\n\nrangeRight(0, 20, 5); // => [15, 10, 5, 0]\n\nrangeRight(0, -4, -1); // => [-3, -2, -1, 0]\n\nrangeRight(1, 4, 0); // => [1, 1, 1]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return an empty array if \",(0,n.jsx)(e.code,{children:\"start\"}),\" is equal to \",(0,n.jsx)(e.code,{children:\"end\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`rangeRight(0); // => []\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#rangeRight\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.rangeRight\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(o,r)})):o(r)}var y=_;return x(N);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/range-right\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/range-right.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/range-right.run.test.ts": "import rangeRight from './range-right';\n\ndescribe('rangeRight', () => {\n  test('start equals to end', () => {\n    expect(rangeRight(0)).toEqual([]);\n  });\n\n  test('start specified', () => {\n    expect(rangeRight(2, 5)).toEqual([4, 3, 2]);\n  });\n\n  test('start and step specified', () => {\n    expect(rangeRight(1, 7, 2)).toEqual([5, 3, 1]);\n  });\n});\n",
    "/src/range-right.submit.test.ts": "import rangeRight from './range-right';\n\ndescribe('rangeRight', () => {\n  test('start equals to end', () => {\n    expect(rangeRight(0)).toEqual([]);\n    expect(rangeRight(-3, -3)).toEqual([]);\n    expect(rangeRight(5, 5)).toEqual([]);\n  });\n\n  test('start specified', () => {\n    expect(rangeRight(2, 5)).toEqual([4, 3, 2]);\n    expect(rangeRight(-2, 1)).toEqual([0, -1, -2]);\n    expect(rangeRight(-8, -4)).toEqual([-5, -6, -7, -8]);\n  });\n\n  test('start and step specified', () => {\n    expect(rangeRight(1, 7, 2)).toEqual([5, 3, 1]);\n    expect(rangeRight(-3, 6, 3)).toEqual([3, 0, -3]);\n    expect(rangeRight(1, 8, 9)).toEqual([1]);\n  });\n\n  test('negative end value', () => {\n    expect(rangeRight(-4)).toEqual([-3, -2, -1, 0]);\n    expect(rangeRight(-9, -4)).toEqual([-5, -6, -7, -8, -9]);\n  });\n\n  test('negative step value', () => {\n    expect(rangeRight(8, -2, -3)).toEqual([-1, 2, 5, 8]);\n    expect(rangeRight(7, 4, -1)).toEqual([5, 6, 7]);\n  });\n\n  test('step value = 0', () => {\n    expect(rangeRight(1, 5, 0)).toEqual([1, 1, 1, 1]);\n    expect(rangeRight(-4, -2, 0)).toEqual([-4, -4]);\n    expect(rangeRight(-2, -4, 0)).toEqual([]);\n  });\n});\n",
    "/src/range-right.ts": "// Overloaded function declarations\nexport default function range(end: number): Array<number>;\nexport default function range(\n  start: number,\n  end: number,\n  step?: number,\n): Array<number>;\n\n/**\n * @param {number} start - The start of the range.\n * @param {number} end - The end of the range.\n * @param {number} step - The value to increment or decrement by.\n * @returns {Array<number>} An array of numbers in the specified range.\n */\nexport default function range(\n  start: number = 0,\n  end?: number,\n  step: number = 1,\n): Array<number> {\n  const result: Array<number> = [];\n\n  // Adjust parameters if only `end` is provided\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n\n  // Adjust `step` for descending sequences\n  if (end < start && step === 1) {\n    step = -1;\n  }\n\n  // Determine the number of elements in `result`\n  const length = (end - start) / (step || 1);\n\n  // Generate the range\n  for (let i = 0; i < length; i++) {\n    result.unshift(start + i * step);\n  }\n\n  return result;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1710633600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that returns a sequence of numbers in descending order",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/range-right",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "range"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "in-range",
      "range"
    ],
    "slug": "range-right",
    "subtitle": null,
    "title": "Range Right",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Number} start - The first number of the resultant array.\n * @param {Number} end - The value where the resultant array will stop at and not contain it.\n * @param {Number} step - The step / increment value of each number in the array.\n * @return {Array<Number>} Returns the array with the sequence of numbers in the specified range.\n */\nexport default function rangeRight(start = 0, end, step = 1) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function rangeRight(end: number): Array<number>;\nexport default function rangeRight(\n  start: number,\n  end: number,\n  step?: number,\n): Array<number>;\n\n/**\n * @param {number} start - The first number of the resultant array.\n * @param {number} end - The value where the resultant array will stop at and not contain it.\n * @param {number} step - The step / increment value of each number in the array.\n * @return {Array<number>} Returns the array with the sequence of numbers in the specified range.\n */\nexport default function rangeRight(\n  start: number = 0,\n  end?: number,\n  step: number = 1,\n): Array<number> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var t in e)a(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of y(e))!x.call(n,s)&&s!==t&&a(n,s,{get:()=>e[s],enumerable:!(d=b(e,s))||d.enumerable});return n};var T=(n,e,t)=>(t=n!=null?g(A(n)):{},o(e||!n||!n.__esModule?a(t,\"default\",{value:n,enumerable:!0}):t,n)),R=n=>o(a({},\"__esModule\",{value:!0}),n);var h=v((S,u)=>{u.exports=_jsx_runtime});var M={};j(M,{default:()=>C});var r=T(h());var i=MDXCodeBlock;var c=`/**\n * @param {number} start - The start of the range.\n * @param {number} end - The end of the range.\n * @param {number} step - The value to increment or decrement by.\n * @returns {Array<number>} An array of numbers in the specified range.\n */\nexport default function rangeRight(start, end = undefined, step = 1) {\n  const result = [];\n\n  // Adjust parameters if only \\`end\\` is provided\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n\n  // Adjust \\`step\\` for descending sequences\n  if (end < start && step === 1) {\n    step = -1;\n  }\n\n  // Determine the number of elements in \\`result\\`\n  const length = (end - start) / (step || 1);\n\n  // Generate the range\n  for (let i = 0; i < length; i++) {\n    result.unshift(start + i * step);\n  }\n\n  return result;\n}\n`;var l=`// Overloaded function declarations\nexport default function range(end: number): Array<number>;\nexport default function range(\n  start: number,\n  end: number,\n  step?: number,\n): Array<number>;\n\n/**\n * @param {number} start - The start of the range.\n * @param {number} end - The end of the range.\n * @param {number} step - The value to increment or decrement by.\n * @returns {Array<number>} An array of numbers in the specified range.\n */\nexport default function range(\n  start: number = 0,\n  end?: number,\n  step: number = 1,\n): Array<number> {\n  const result: Array<number> = [];\n\n  // Adjust parameters if only \\`end\\` is provided\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n\n  // Adjust \\`step\\` for descending sequences\n  if (end < start && step === 1) {\n    step = -1;\n  }\n\n  // Determine the number of elements in \\`result\\`\n  const length = (end - start) / (step || 1);\n\n  // Generate the range\n  for (let i = 0; i < length; i++) {\n    result.unshift(start + i * step);\n  }\n\n  return result;\n}\n`;var m=`/**\\r\n * @param {number} start - The start of the range.\\r\n * @param {number} end - The end of the range.\\r\n * @param {number} step - The value to increment or decrement by.\\r\n * @returns {Array<number>} An array of numbers in the specified range.\\r\n */\\r\nexport default function rangeRight(start, end = undefined, step = 1) {\\r\n  const result = [];\\r\n\\r\n  // Adjust parameters if only \\`end\\` is provided\\r\n  if (end === undefined) {\\r\n    end = start;\\r\n    start = 0;\\r\n  }\\r\n\\r\n  // Adjust \\`step\\` for descending sequences\\r\n  if (end < start && step === 1) {\\r\n    step = -1;\\r\n  }\\r\n\\r\n  // Determine the number of elements in \\`result\\`\\r\n  const length = (end - start) / (step || 1);\\r\n\\r\n  // Generate the range\\r\n  for (let i = 0; i < length; i++) {\\r\n    result.push(start + i * step);\\r\n  }\\r\n\\r\n  return result.reverse();\\r\n}\\r\n`;var f=`// Overloaded function declarations\\r\nexport default function range(end: number): Array<number>;\\r\nexport default function range(\\r\n  start: number,\\r\n  end: number,\\r\n  step?: number,\\r\n): Array<number>;\\r\n\\r\n/**\\r\n * @param {number} start - The start of the range.\\r\n * @param {number} end - The end of the range.\\r\n * @param {number} step - The value to increment or decrement by.\\r\n * @returns {Array<number>} An array of numbers in the specified range.\\r\n */\\r\nexport default function range(\\r\n  start: number = 0,\\r\n  end?: number,\\r\n  step: number = 1,\\r\n): Array<number> {\\r\n  const result: Array<number> = [];\\r\n\\r\n  // Adjust parameters if only \\`end\\` is provided\\r\n  if (end === undefined) {\\r\n    end = start;\\r\n    start = 0;\\r\n  }\\r\n\\r\n  // Adjust \\`step\\` for descending sequences\\r\n  if (end < start && step === 1) {\\r\n    step = -1;\\r\n  }\\r\n\\r\n  // Determine the number of elements in \\`result\\`\\r\n  const length = (end - start) / (step || 1);\\r\n\\r\n  // Generate the range\\r\n  for (let i = 0; i < length; i++) {\\r\n    result.push(start + i * step);\\r\n  }\\r\n\\r\n  return result.reverse();\\r\n}\\r\n`;function p(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",code:\"code\",p:\"p\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Solution 1: Use \",(0,r.jsx)(e.code,{children:\"unshift()\"}),\" to push elements from the front of the \",(0,r.jsx)(e.code,{children:\"result\"}),\" array\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"Here is a solution that generates the range of sequence from \",(0,r.jsx)(e.code,{children:\"start\"}),\" to (but not including) \",(0,r.jsx)(e.code,{children:\"end\"}),\" with \",(0,r.jsx)(e.code,{children:\"step\"}),\" as increment using \",(0,r.jsx)(e.code,{children:\"unshift()\"}),\" instead of \",(0,r.jsx)(e.code,{children:\"push()\"}),\". Overloaded functions are required in TypeScript as \",(0,r.jsx)(e.code,{children:\"start\"}),\" and \",(0,r.jsx)(e.code,{children:\"step\"}),\" are optional.\"]}),`\n`,(0,r.jsx)(i,{languages:{jsx:c,tsx:l}}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Solution 2: Insert elements from the back normally, but reverse the final \",(0,r.jsx)(e.code,{children:\"result\"}),\" array\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"However, since \",(0,r.jsx)(e.code,{children:\"unshift()\"}),\" has a time complexity of O(N), here is a more efficient solution that reverses the result array after pushing the values into the array normally.\"]}),`\n`,(0,r.jsx)(i,{languages:{jsx:m,tsx:f}}),`\n`,(0,r.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"To handle cases where \",(0,r.jsx)(e.code,{children:\"start\"}),\" and \",(0,r.jsx)(e.code,{children:\"step\"}),\" are not specified but \",(0,r.jsx)(e.code,{children:\"end\"}),\" is negative, we can add an if statement to change the value of \",(0,r.jsx)(e.code,{children:\"step\"}),\" to -1.\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#range\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.range\"})]})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#rangeRight\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.rangeRight\"})]})}),`\n`]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(p,n)})):p(n)}var C=w;return R(M);})();\n;return Component;",
  "workspace": {
    "main": "/src/range-right.ts",
    "run": "/src/range-right.run.test.ts",
    "submit": "/src/range-right.submit.test.ts"
  }
}