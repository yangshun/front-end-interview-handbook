{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/range-right\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/range-right.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/range-right.run.test.ts": "import rangeRight from './range-right';\n\ndescribe('rangeRight', () => {\n  test('start equals to end', () => {\n    expect(rangeRight(0)).toEqual([]);\n  });\n\n  test('start specified', () => {\n    expect(rangeRight(2, 5)).toEqual([4, 3, 2]);\n  });\n\n  test('start and step specified', () => {\n    expect(rangeRight(1, 7, 2)).toEqual([5, 3, 1]);\n  });\n});\n",
    "/src/range-right.submit.test.ts": "import rangeRight from './range-right';\n\ndescribe('rangeRight', () => {\n  test('start equals to end', () => {\n    expect(rangeRight(0)).toEqual([]);\n    expect(rangeRight(-3, -3)).toEqual([]);\n    expect(rangeRight(5, 5)).toEqual([]);\n  });\n\n  test('start specified', () => {\n    expect(rangeRight(2, 5)).toEqual([4, 3, 2]);\n    expect(rangeRight(-2, 1)).toEqual([0, -1, -2]);\n    expect(rangeRight(-8, -4)).toEqual([-5, -6, -7, -8]);\n  });\n\n  test('start and step specified', () => {\n    expect(rangeRight(1, 7, 2)).toEqual([5, 3, 1]);\n    expect(rangeRight(-3, 6, 3)).toEqual([3, 0, -3]);\n    expect(rangeRight(1, 8, 9)).toEqual([1]);\n  });\n\n  test('negative end value', () => {\n    expect(rangeRight(-4)).toEqual([-3, -2, -1, 0]);\n    expect(rangeRight(-9, -4)).toEqual([-5, -6, -7, -8, -9]);\n  });\n\n  test('negative step value', () => {\n    expect(rangeRight(8, -2, -3)).toEqual([-1, 2, 5, 8]);\n    expect(rangeRight(7, 4, -1)).toEqual([5, 6, 7]);\n  });\n\n  test('step value = 0', () => {\n    expect(rangeRight(1, 5, 0)).toEqual([1, 1, 1, 1]);\n    expect(rangeRight(-4, -2, 0)).toEqual([-4, -4]);\n    expect(rangeRight(-2, -4, 0)).toEqual([]);\n  });\n});\n",
    "/src/range-right.ts": "// Overloaded function declarations\nexport default function range(end: number): Array<number>;\nexport default function range(\n  start: number,\n  end: number,\n  step?: number,\n): Array<number>;\n\n/**\n * @param {number} start - The start of the range.\n * @param {number} end - The end of the range.\n * @param {number} step - The value to increment or decrement by.\n * @returns {Array<number>} An array of numbers in the specified range.\n */\nexport default function range(\n  start: number = 0,\n  end?: number,\n  step: number = 1,\n): Array<number> {\n  const result: Array<number> = [];\n\n  // Adjust parameters if only `end` is provided\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n\n  // Adjust `step` for descending sequences\n  if (end < start && step === 1) {\n    step = -1;\n  }\n\n  // Determine the number of elements in `result`\n  const length = (end - start) / (step || 1);\n\n  // Generate the range\n  for (let i = 0; i < length; i++) {\n    result.unshift(start + i * step);\n  }\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Number} start - The first number of the resultant array.\n * @param {Number} end - The value where the resultant array will stop at and not contain it.\n * @param {Number} step - The step / increment value of each number in the array.\n * @return {Array<Number>} Returns the array with the sequence of numbers in the specified range.\n */\nexport default function rangeRight(start = 0, end, step = 1) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function rangeRight(end: number): Array<number>;\nexport default function rangeRight(\n  start: number,\n  end: number,\n  step?: number,\n): Array<number>;\n\n/**\n * @param {number} start - The first number of the resultant array.\n * @param {number} end - The value where the resultant array will stop at and not contain it.\n * @param {number} step - The step / increment value of each number in the array.\n * @return {Array<number>} Returns the array with the sequence of numbers in the specified range.\n */\nexport default function rangeRight(\n  start: number = 0,\n  end?: number,\n  step: number = 1,\n): Array<number> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/range-right.ts",
    "run": "/src/range-right.run.test.ts",
    "submit": "/src/range-right.submit.test.ts"
  }
}