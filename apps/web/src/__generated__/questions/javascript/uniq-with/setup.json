{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/uniq-with\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/uniq-with.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/uniq-with.run.test.ts": "import uniqWith from './uniq-with';\n\ndescribe('uniqWith', () => {\n  test('empty array', () => {\n    expect(uniqWith([], (a, b) => a === b)).toEqual([]);\n  });\n\n  test('one value', () => {\n    expect(uniqWith([0], (a, b) => a === b)).toEqual([0]);\n  });\n\n  test('different values', () => {\n    expect(\n      uniqWith([2.1, 1.2, 2.3], (a, b) => Math.floor(a) === Math.floor(b)),\n    ).toEqual([2.1, 1.2]);\n  });\n\n  test('duplicate values', () => {\n    expect(\n      uniqWith([{ x: 1 }, { x: 2 }, { x: 1 }], (a, b) => a.x === b.x),\n    ).toEqual([{ x: 1 }, { x: 2 }]);\n  });\n});\n",
    "/src/uniq-with.submit.test.ts": "import uniqWith from './uniq-with';\n\ndescribe('uniqWith', () => {\n  test('empty array', () => {\n    expect(uniqWith([], (a, b) => a === b)).toEqual([]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqWith([2, 1, 2], (a, b) => a === b)).toEqual([2, 1]);\n    expect(uniqWith([2, 2, 1], (a, b) => a === b)).toEqual([2, 1]);\n    expect(uniqWith([2, 1, 2, 3], (a, b) => a === b)).toEqual([2, 1, 3]);\n  });\n\n  test('nested arrays', () => {\n    expect(\n      uniqWith([{ n: 1 }, { n: 2 }, { n: 1 }], (a, b) => a.n === b.n),\n    ).toEqual([{ n: 1 }, { n: 2 }]);\n    expect(\n      uniqWith(\n        [{ age: 30 }, { age: 22 }, { age: 22 }],\n        (a, b) => a['age'] === b['age'],\n      ),\n    ).toEqual([{ age: 30 }, { age: 22 }]);\n    expect(\n      uniqWith(\n        [{ data: { score: 10 } }, { data: { score: 10 } }],\n        (a: any, b: any) => a.data.score === b.data.score,\n      ),\n    ).toEqual([{ data: { score: 10 } }]);\n  });\n\n  test('strings comparison', () => {\n    expect(\n      uniqWith(\n        ['apple', 'pear', 'mango'],\n        (a: any, b: any) => a.length === b.length,\n      ),\n    ).toEqual(['apple', 'pear']);\n  });\n\n  test('mixed data types', () => {\n    expect(\n      uniqWith([1, '2', 3], (a: any, b: any) => Number(a) === Number(b)),\n    ).toEqual([1, '2', 3]);\n  });\n\n  test('non-existent value', () => {\n    expect(uniqWith([{ n: 1 }, { m: 2 }], (a, b) => a.m === b.m)).toEqual([\n      { n: 1 },\n      { m: 2 },\n    ]);\n  });\n\n  test('falsey values', () => {\n    expect(uniqWith([false, null, undefined, null], (a, b) => a === b)).toEqual(\n      [false, null, undefined],\n    );\n  });\n});\n",
    "/src/uniq-with.ts": "export default function uniqWith<T>(\n  array: Array<T>,\n  comparator: (a: T, b: T) => boolean,\n): Array<T> {\n  const result: Array<T> = [];\n\n  array.forEach((item) => {\n    // Check if result array contains the same value when compared with `comparator`.\n    const isUnique =\n      result.findIndex((resultItem) => comparator(item, resultItem)) === -1;\n    if (isUnique) {\n      result.push(item);\n    }\n  });\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {Array} Returns the unique array.\n */\nexport default function uniqWith(array, comparator = (a, b) => a === b) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function uniqWith<T>(\n  array: Array<T>,\n  comparator: (a: T, b: T) => boolean,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/uniq-with.ts",
    "run": "/src/uniq-with.run.test.ts",
    "submit": "/src/uniq-with.submit.test.ts"
  }
}