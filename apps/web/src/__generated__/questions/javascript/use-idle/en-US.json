{
  "description": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var i in e)s(n,i,{get:e[i],enumerable:!0})},r=(n,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!f.call(n,o)&&o!==i&&s(n,o,{get:()=>e[o],enumerable:!(d=u(e,o))||d.enumerable});return n};var x=(n,e,i)=>(i=n!=null?h(p(n)):{},r(e||!n||!n.__esModule?s(i,\"default\",{value:n,enumerable:!0}):i,n)),y=n=>r(s({},\"__esModule\",{value:!0}),n);var l=v((I,c)=>{c.exports=_jsx_runtime});var T={};b(T,{default:()=>_,frontmatter:()=>g});var t=x(l()),g={title:\"useIdle\",excerpt:\"Implement a hook that detects user inactivity\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useIdle\"}),\" hook that detects user inactivity for a specified time. It listens for user interactions like mouse movements, keyboard presses, and touch events, and resets a timer whenever activity is detected.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We consider the user to be idle if there are no events of type \",(0,t.jsx)(e.code,{children:\"events\"}),\" dispatched within \",(0,t.jsx)(e.code,{children:\"ms\"}),\" milliseconds. Additionally, if the user has just switched from another tab to our tab (hint: the \",(0,t.jsx)(e.code,{children:\"visibilitychange\"}),\" event), the user should not be considered idle.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const idle = useIdle();\n\n  return (\n    <div>\n      <p>Status: {idle ? 'Idle' : 'Active'}</p>\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"ms: number\"}),\": The number of milliseconds to wait before considering the user idle. This defaults to \",(0,t.jsx)(e.code,{children:\"60_000\"}),\" (1 minute)\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"initialState: boolean\"}),\": The initial \",(0,t.jsx)(e.code,{children:\"idle\"}),\" state. This defaults to \",(0,t.jsx)(e.code,{children:\"false\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"events: (keyof WindowEventMap)[]\"}),\": An array of event types that count as user activity. The default value is provided as the \",(0,t.jsx)(e.code,{children:\"DEFAULT_EVENTS\"}),\" constant\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The hook returns a \",(0,t.jsx)(e.code,{children:\"boolean\"}),\" value that indicates whether the user is idle or not.\"]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var _=j;return y(T);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that detects user inactivity",
    "title": "useIdle"
  },
  "solution": "var Component=(()=>{var m=Object.create;var d=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var i in e)d(n,i,{get:e[i],enumerable:!0})},r=(n,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!p.call(n,o)&&o!==i&&d(n,o,{get:()=>e[o],enumerable:!(s=v(e,o))||s.enumerable});return n};var y=(n,e,i)=>(i=n!=null?m(E(n)):{},r(e||!n||!n.__esModule?d(i,\"default\",{value:n,enumerable:!0}):i,n)),g=n=>r(d({},\"__esModule\",{value:!0}),n);var c=b((S,l)=>{l.exports=_jsx_runtime});var _={};w(_,{default:()=>x});var t=y(c());var a=MDXCodeBlock;var h=`import { useEffect, useState } from 'react';\n\nconst DEFAULT_EVENTS: (keyof WindowEventMap)[] = [\n  'mousemove',\n  'mousedown',\n  'resize',\n  'keydown',\n  'touchstart',\n  'wheel',\n];\n\nexport default function useIdle(\n  ms = 60_000,\n  initialState = false,\n  events: (keyof WindowEventMap)[] = DEFAULT_EVENTS,\n): boolean {\n  const [idle, setIdle] = useState<boolean>(initialState);\n\n  useEffect(() => {\n    let timeoutId: number;\n\n    function handleTimeout() {\n      setIdle(true);\n    }\n\n    function handleEvent() {\n      setIdle(false);\n\n      clearTimeout(timeoutId);\n      timeoutId = window.setTimeout(handleTimeout, ms);\n    }\n\n    function handleVisibilityChange() {\n      if (document.hidden) {\n        return;\n      }\n\n      handleEvent();\n    }\n\n    timeoutId = setTimeout(handleTimeout, ms);\n\n    events.forEach((event) => window.addEventListener(event, handleEvent));\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      clearTimeout(timeoutId);\n\n      events.forEach((event) => window.removeEventListener(event, handleEvent));\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  });\n\n  return idle;\n}\n`;function u(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useIdle\"}),\" hook can be implemented using \",(0,t.jsx)(e.code,{children:\"useState\"}),\" to store the idle state, and \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" to set up the event listeners and the idle timeout. To detect if the user is currently on our tab, we can use either \",(0,t.jsx)(e.code,{children:\"document.hidden\"}),\" or \",(0,t.jsx)(e.code,{children:\"document.visibilityState\"}),\" when the \",(0,t.jsx)(e.code,{children:\"visibilitychange\"}),\" event is triggered on the \",(0,t.jsx)(e.code,{children:\"document\"}),\".\"]}),`\n`,(0,t.jsx)(a,{children:h}),`\n`,(0,t.jsx)(e.h2,{children:\"Challenge\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In the solution above (and probably yours, too), we are watching the \",(0,t.jsx)(e.code,{children:\"mousemove\"}),\" event. This means that every time the user moves the mouse, \",(0,t.jsx)(e.code,{children:\"handleEvent\"}),\" will be called to reset the \",(0,t.jsx)(e.code,{children:\"idle\"}),\" state! This behaviour also happens for frequently dispatched events like \",(0,t.jsx)(e.code,{children:\"resize\"}),\" or \",(0,t.jsx)(e.code,{children:\"wheel\"}),\". Can you think of a way to optimize for this?\"]})]})}function I(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var x=I;return g(_);})();\n;return Component;"
}