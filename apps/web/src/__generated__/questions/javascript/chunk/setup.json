{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/chunk\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/chunk.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/chunk.run.test.ts": "import chunk from './chunk';\n\ndescribe('chunk', () => {\n  test('empty array', () => {\n    expect(chunk([], 3)).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(chunk([1], 3)).toEqual([[1]]);\n  });\n\n  test('splits into chunks', () => {\n    expect(chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3)).toEqual([\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [10, 11],\n    ]);\n  });\n});\n",
    "/src/chunk.submit.test.ts": "import chunk from './chunk';\n\ndescribe('chunk', () => {\n  test('empty array', () => {\n    expect(chunk([], 3)).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(chunk([1], 3)).toEqual([[1]]);\n  });\n\n  test('size of 1', () => {\n    expect(chunk([1, 2, 3])).toEqual([[1], [2], [3]]);\n  });\n\n  test('splits into chunks of the given size', () => {\n    expect(chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3)).toEqual([\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [10, 11],\n    ]);\n  });\n\n  test('default size', () => {\n    expect(chunk(['A', 'B', 'C'])).toEqual([['A'], ['B'], ['C']]);\n  });\n\n  test('size larger than the array length', () => {\n    expect(chunk([1, 2, 3], 5)).toEqual([[1, 2, 3]]);\n  });\n\n  test('input array is not modified', () => {\n    const input = [1, 2, 3, 4, 5, 6, 7];\n    const output = chunk(input, 3);\n    output[0][0] = 100;\n    expect(input[0]).toEqual(1);\n  });\n});\n",
    "/src/chunk.ts": "export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  if (!Array.isArray(array) || size < 1) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < array.length; i += size) {\n    const chunk = array.slice(i, i + size);\n    result.push(chunk);\n  }\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {Array<T>} array The array to process.\n * @param {number} [size=1] The length of each chunk.\n * @returns {Array<Array<T>>} The new array of chunks.\n */\nexport default function chunk(array, size = 1) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/chunk.ts",
    "run": "/src/chunk.run.test.ts",
    "submit": "/src/chunk.submit.test.ts"
  }
}