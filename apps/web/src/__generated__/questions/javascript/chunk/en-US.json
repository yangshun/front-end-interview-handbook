{
  "description": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),g=(r,n)=>{for(var t in n)i(r,t,{get:n[t],enumerable:!0})},l=(r,n,t,h)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of m(n))!f.call(r,c)&&c!==t&&i(r,c,{get:()=>n[c],enumerable:!(h=u(n,c))||h.enumerable});return r};var x=(r,n,t)=>(t=r!=null?d(p(r)):{},l(n||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),k=r=>l(i({},\"__esModule\",{value:!0}),r);var o=y((C,a)=>{a.exports=_jsx_runtime});var w={};g(w,{default:()=>b,frontmatter:()=>j});var e=x(o()),j={title:\"Chunk\",excerpt:\"Implement a function that creates an array of elements split into smaller groups of a specified size\"};function s(r){let n=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Implement a function \",(0,e.jsx)(n.code,{children:\"chunk(array, [size=1])\"}),\" that splits the input array into groups of length \",(0,e.jsx)(n.code,{children:\"size\"}),\" and returns them within a \",(0,e.jsx)(n.strong,{children:\"new\"}),\" array. If array can't be split evenly, the final chunk will be the remaining elements. The function should not modify the original input array.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Arguments\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"array\"}),\" \",(0,e.jsx)(n.em,{children:\"(Array)\"}),\": The array to process.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"[size=1]\"}),\" \",(0,e.jsx)(n.em,{children:\"(number)\"}),\": The length of each chunk.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Returns\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.em,{children:\"(Array)\"}),\": Returns the new array of chunks.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Examples\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`chunk(['a', 'b', 'c', 'd']); // => [['a'], ['b'], ['c'], ['d']]\nchunk([1, 2, 3, 4], 2); // => [[1, 2], [3, 4]]\nchunk([1, 2, 3, 4], 3); // => [[1, 2, 3], [4]]\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The function should return an empty array if the \",(0,e.jsx)(n.code,{children:\"array\"}),\" argument is empty.\"]}),`\n`,(0,e.jsx)(n.h2,{children:\"Constraints\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"size\"}),\" >= 1\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"0 <= length of \",(0,e.jsx)(n.code,{children:\"array\"}),\" <= 100\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Resources\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://lodash.com/docs/#chunk\",children:[\"Lodash \",(0,e.jsx)(n.code,{children:\"_.chunk\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(s,r)})):s(r)}var b=_;return k(w);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/chunk\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/chunk.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/chunk.run.test.ts": "import chunk from './chunk';\n\ndescribe('chunk', () => {\n  test('empty array', () => {\n    expect(chunk([], 3)).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(chunk([1], 3)).toEqual([[1]]);\n  });\n\n  test('splits into chunks', () => {\n    expect(chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3)).toEqual([\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [10, 11],\n    ]);\n  });\n});\n",
    "/src/chunk.submit.test.ts": "import chunk from './chunk';\n\ndescribe('chunk', () => {\n  test('empty array', () => {\n    expect(chunk([], 3)).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(chunk([1], 3)).toEqual([[1]]);\n  });\n\n  test('size of 1', () => {\n    expect(chunk([1, 2, 3])).toEqual([[1], [2], [3]]);\n  });\n\n  test('splits into chunks of the given size', () => {\n    expect(chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3)).toEqual([\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n      [10, 11],\n    ]);\n  });\n\n  test('default size', () => {\n    expect(chunk(['A', 'B', 'C'])).toEqual([['A'], ['B'], ['C']]);\n  });\n\n  test('size larger than the array length', () => {\n    expect(chunk([1, 2, 3], 5)).toEqual([[1, 2, 3]]);\n  });\n\n  test('input array is not modified', () => {\n    const input = [1, 2, 3, 4, 5, 6, 7];\n    const output = chunk(input, 3);\n    output[0][0] = 100;\n    expect(input[0]).toEqual(1);\n  });\n});\n",
    "/src/chunk.ts": "export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  if (!Array.isArray(array) || size < 1) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < array.length; i += size) {\n    const chunk = array.slice(i, i + size);\n    result.push(chunk);\n  }\n\n  return result;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1682553600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that creates an array of elements split into smaller groups of a specified size",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/chunk",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "get"
    ],
    "slug": "chunk",
    "subtitle": null,
    "title": "Chunk",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {Array<T>} array The array to process.\n * @param {number} [size=1] The length of each chunk.\n * @returns {Array<Array<T>>} The new array of chunks.\n */\nexport default function chunk(array, size = 1) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var z=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var t in e)i(n,t,{get:e[t],enumerable:!0})},s=(n,e,t,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!T.call(n,a)&&a!==t&&i(n,a,{get:()=>e[a],enumerable:!(h=m(e,a))||h.enumerable});return n};var b=(n,e,t)=>(t=n!=null?p(A(n)):{},s(e||!n||!n.__esModule?i(t,\"default\",{value:n,enumerable:!0}):t,n)),j=n=>s(i({},\"__esModule\",{value:!0}),n);var l=z((F,o)=>{o.exports=_jsx_runtime});var D={};x(D,{default:()=>C});var r=b(l());var c=MDXCodeBlock;var u=`/**\n * @template T\n * @param {Array<T>} array The array to process.\n * @param {number} [size=1] The length of each chunk.\n * @returns {Array<Array<T>>} The new array of chunks.\n */\nexport default function chunk(array, size = 1) {\n  if (!Array.isArray(array) || size < 1) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < array.length; i += size) {\n    const chunk = array.slice(i, i + size);\n    result.push(chunk);\n  }\n\n  return result;\n}\n`;var d=`export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  if (!Array.isArray(array) || size < 1) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < array.length; i += size) {\n    const chunk = array.slice(i, i + size);\n    result.push(chunk);\n  }\n\n  return result;\n}\n`;var y=`/**\n * @template T\n * @param {Array<T>} array The array to process.\n * @param {number} [size=1] The length of each chunk.\n * @returns {Array<Array<T>>} The new array of chunks.\n */\nexport default function chunk(array, size = 1) {\n  if (!Array.isArray(array) || size < 1) {\n    return [];\n  }\n\n  const result = [];\n  let chunk = [];\n\n  for (let i = 0; i < array.length; i++) {\n    chunk.push(array[i]);\n    if (chunk.length === size || i === array.length - 1) {\n      result.push(chunk);\n      chunk = [];\n    }\n  }\n\n  return result;\n}\n`;var f=`export default function chunk<T>(array: Array<T>, size = 1): Array<Array<T>> {\n  if (!Array.isArray(array) || size < 1) {\n    return [];\n  }\n\n  const result = [];\n  let chunk = [];\n\n  for (let i = 0; i < array.length; i++) {\n    chunk.push(array[i]);\n    if (chunk.length === size || i === array.length - 1) {\n      result.push(chunk);\n      chunk = [];\n    }\n  }\n\n  return result;\n}\n`;function k(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",code:\"code\",ol:\"ol\",li:\"li\",p:\"p\",ul:\"ul\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Approach 1: Using \",(0,r.jsx)(e.code,{children:\"push()\"})]}),`\n`,(0,r.jsxs)(e.ol,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"The \",(0,r.jsx)(e.code,{children:\"chunk\"}),\" function takes two parameters: \",(0,r.jsx)(e.code,{children:\"array\"}),\" (the input array to be chunked) and \",(0,r.jsx)(e.code,{children:\"size\"}),\" (the desired size of each chunk).\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"It performs the same initial checks to ensure \",(0,r.jsx)(e.code,{children:\"array\"}),\" is a valid array and \",(0,r.jsx)(e.code,{children:\"size\"}),\" is positive. If not, it returns an empty array \",(0,r.jsx)(e.code,{children:\"[]\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Two variables are initialized: \",(0,r.jsx)(e.code,{children:\"result\"}),\" to store the chunks and \",(0,r.jsx)(e.code,{children:\"chunk\"}),\" to build each individual chunk.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"A \",(0,r.jsx)(e.code,{children:\"for\"}),\" loop iterates through the \",(0,r.jsx)(e.code,{children:\"array\"}),\". In each iteration, the current element is added to the \",(0,r.jsx)(e.code,{children:\"chunk\"}),\" array.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"After adding an element to the \",(0,r.jsx)(e.code,{children:\"chunk\"}),\", it checks if the \",(0,r.jsx)(e.code,{children:\"chunk\"}),\" has reached the desired \",(0,r.jsx)(e.code,{children:\"size\"}),\" or if it has reached the end of the \",(0,r.jsx)(e.code,{children:\"array\"}),\". If either condition is true, it means a chunk is complete, and it's added to the \",(0,r.jsx)(e.code,{children:\"result\"}),\" array.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"If the chunk is complete, a new, empty \",(0,r.jsx)(e.code,{children:\"chunk\"}),\" array is created to start building the next chunk.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"The loop continues until all elements of the \",(0,r.jsx)(e.code,{children:\"array\"}),\" have been processed.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Finally, the function returns the \",(0,r.jsx)(e.code,{children:\"result\"}),\" array containing the chunks.\"]}),`\n`]}),`\n`,(0,r.jsx)(c,{languages:{jsx:y,tsx:f}}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Approach 2: Using \",(0,r.jsx)(e.code,{children:\"slice()\"})]}),`\n`,(0,r.jsx)(e.p,{children:\"A more elegant solution that is shorter and requires fewer variables is to extract out the exact slice of the elements from the array.\"}),`\n`,(0,r.jsx)(c,{languages:{jsx:u,tsx:d}}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#chunk\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.chunk\"})]})}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(k,n)})):k(n)}var C=M;return j(D);})();\n;return Component;",
  "workspace": {
    "main": "/src/chunk.ts",
    "run": "/src/chunk.run.test.ts",
    "submit": "/src/chunk.submit.test.ts"
  }
}