{
  "description": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of l(e))!k.call(n,o)&&o!==r&&i(n,o,{get:()=>e[o],enumerable:!(a=u(e,o))||a.enumerable});return n};var f=(n,e,r)=>(r=n!=null?p(m(n)):{},c(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>c(i({},\"__esModule\",{value:!0}),n);var h=b((y,s)=>{s.exports=_jsx_runtime});var _={};w(_,{default:()=>B,frontmatter:()=>g});var t=f(h()),g={title:\"useBreakpoint\",excerpt:\"Implement a hook that returns the current breakpoint name based on the current window width\"};function d(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"createBreakpoint\"}),\" function takes an object (where the keys are breakpoint names and values are the minimum width), and returns a \",(0,t.jsx)(e.code,{children:\"useBreakpoint\"}),\" hook that returns the current breakpoint name based on the current window width.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`const useBreakpoint = createBreakpoint({\n  mobile: 0,\n  tablet: 768,\n  desktop: 1024,\n});\n\nexport default function Component() {\n  const breakpoint = useBreakpoint();\n\n  return (\n    <div>\n      {breakpoint === 'mobile' && <p>Mobile</p>}\n      {breakpoint === 'tablet' && <p>Tablet</p>}\n      {breakpoint === 'desktop' && <p>Desktop</p>}\n    </div>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"createBreakpoint\"}),\" function takes a key-value pair object where the key is the breakpoint name (\",(0,t.jsx)(e.code,{children:\"string\"}),\") and the value is the minimum width (\",(0,t.jsx)(e.code,{children:\"number\"}),\") in pixels of the breakpoint.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"createBreakpoint\"}),\" function returns a function that is the actual \",(0,t.jsx)(e.code,{children:\"useBreakpoint\"}),\" hook. This hook takes no arguments and returns the current breakpoint name (\",(0,t.jsx)(e.code,{children:\"string\"}),\") that is the closest minimum width to the current window width. Resizing the window will cause the hook to re-run and potentially return a different value depending on the window size.\"]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var B=j;return x(_);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that returns the current breakpoint name based on the current window width",
    "title": "useBreakpoint"
  },
  "solution": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of k(e))!w.call(t,o)&&o!==r&&i(t,o,{get:()=>e[o],enumerable:!(s=f(e,o))||s.enumerable});return t};var x=(t,e,r)=>(r=t!=null?m(l(t)):{},c(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),y=t=>c(i({},\"__esModule\",{value:!0}),t);var a=b((T,d)=>{d.exports=_jsx_runtime});var M={};g(M,{default:()=>z});var n=x(a());var h=MDXCodeBlock;var u=`import { useEffect, useMemo, useState } from 'react';\n\nexport default function createBreakpoint<T extends Record<string, number>>(\n  breakpoints: T,\n): () => keyof T {\n  return function (): keyof T {\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n      function resize() {\n        setWidth(window.innerWidth);\n      }\n\n      resize();\n      window.addEventListener('resize', resize);\n\n      return () => {\n        window.removeEventListener('resize', resize);\n      };\n    }, []);\n\n    const sortedBreakpoints = useMemo(\n      () => Object.entries(breakpoints).sort((a, b) => a[1] - b[1]),\n      [breakpoints],\n    );\n\n    return useMemo(\n      () =>\n        sortedBreakpoints.reduce(\n          (acc, [name, size]) => (width >= size ? name : acc),\n          sortedBreakpoints[0][0],\n        ),\n      [sortedBreakpoints, width],\n    );\n  };\n}\n`;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useBreakpoint\"}),\" hook can be implemented in \",(0,n.jsx)(e.code,{children:\"createBreakpoint\"}),\" using the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook to store the current window width and the \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" hook to update the width when the window is resized.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"After which, sort the breakpoints by increasing values, then search for the last breakpoint whose minimum width is less than the current window width.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you're using TypeScript, you can make the \",(0,n.jsx)(e.code,{children:\"createBreakpoint\"}),\" function generic so that the returned \",(0,n.jsx)(e.code,{children:\"useBreakpoint\"}),\"'s return type is only the strings of the keys of the given \",(0,n.jsx)(e.code,{children:\"breakpoints\"}),\" object, ensuring maximum typesafety.\"]}),`\n`,(0,n.jsx)(h,{children:u})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var z=j;return y(M);})();\n;return Component;"
}