{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-breakpoint\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-breakpoint.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-breakpoint.run.test.ts": "import { renderHook } from '@testing-library/react';\n\nimport createBreakpoint from './use-breakpoint';\n\nconst breakpoints = { sm: 40, lg: 64, xl: 80 };\n\nconst getCurrentBreakpoint = (width: number) =>\n  Object.entries(breakpoints).reduce(\n    (acc, [name, size]) => (width >= size ? name : acc),\n    'sm',\n  );\n\ndescribe('useBreakpoint', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => createBreakpoint(breakpoints)());\n\n    expect(typeof result.current).toBe('string');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => createBreakpoint(breakpoints)());\n\n    expect(result.current).toBe(getCurrentBreakpoint(window.innerWidth));\n  });\n});\n",
    "/src/use-breakpoint.submit.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport createBreakpoint from './use-breakpoint';\n\nconst breakpoints = { sm: 40, lg: 64, xl: 80 };\n\nconst getCurrentBreakpoint = (width: number) =>\n  Object.entries(breakpoints).reduce(\n    (acc, [name, size]) => (width >= size ? name : acc),\n    'sm',\n  );\n\ndescribe('useBreakpoint', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => createBreakpoint(breakpoints)());\n\n    expect(typeof result.current).toBe('string');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => createBreakpoint(breakpoints)());\n\n    expect(result.current).toBe(getCurrentBreakpoint(window.innerWidth));\n  });\n\n  test('resize', () => {\n    const { result } = renderHook(() => createBreakpoint(breakpoints)());\n\n    act(() => {\n      window.innerWidth = 50;\n      fireEvent.resize(window);\n    });\n\n    expect(result.current).toBe(getCurrentBreakpoint(50));\n  });\n});\n",
    "/src/use-breakpoint.ts": "import { useEffect, useMemo, useState } from 'react';\n\nexport default function createBreakpoint<T extends Record<string, number>>(\n  breakpoints: T,\n): () => keyof T {\n  return function (): keyof T {\n    const [width, setWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n      function resize() {\n        setWidth(window.innerWidth);\n      }\n\n      resize();\n      window.addEventListener('resize', resize);\n\n      return () => {\n        window.removeEventListener('resize', resize);\n      };\n    }, []);\n\n    const sortedBreakpoints = useMemo(\n      () => Object.entries(breakpoints).sort((a, b) => a[1] - b[1]),\n      [breakpoints],\n    );\n\n    return useMemo(\n      () =>\n        sortedBreakpoints.reduce(\n          (acc, [name, size]) => (width >= size ? name : acc),\n          sortedBreakpoints[0][0],\n        ),\n      [sortedBreakpoints, width],\n    );\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Object<string, number>} breakpoints\n * @returns {string}\n */\nexport default function createBreakpoint(breakpoints) {\n  throw 'Not implemented';\n}",
    "ts": "export default function createBreakpoint<T extends Record<string, number>>(\n  breakpoints: T,\n): () => keyof T {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-breakpoint.ts",
    "run": "/src/use-breakpoint.run.test.ts",
    "submit": "/src/use-breakpoint.submit.test.ts"
  }
}