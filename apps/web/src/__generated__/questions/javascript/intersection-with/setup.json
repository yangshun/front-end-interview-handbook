{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/intersection-with\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/intersection-with.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/intersection-with.run.test.ts": "import intersectionWith from './intersection-with';\n\ndescribe('intersectionWith', () => {\n  test('empty arrays', () => {\n    const actual = intersectionWith((x, y) => true, [], [1, 2, 3], [4, 5, 6]);\n    expect(actual).toEqual([]);\n  });\n\n  test('no common elements', () => {\n    const actual = intersectionWith(\n      (x, y) => x === y,\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    );\n    expect(actual).toEqual([]);\n  });\n\n  test('two arrays', () => {\n    const arr1 = [\n      { x: 1, y: 2 },\n      { x: 2, y: 3 },\n      { x: 3, y: 4 },\n    ];\n    const arr2 = [\n      { x: 2, y: 3 },\n      { x: 4, y: 5 },\n      { x: 5, y: 6 },\n    ];\n\n    const comparator = (\n      a: { x: number; y: number },\n      b: { x: number; y: number },\n    ) => a.x === b.x && a.y === b.y;\n\n    const actual = intersectionWith(comparator, arr1, arr2);\n    const expected = [{ x: 2, y: 3 }];\n\n    expect(actual).toEqual(expected);\n  });\n});\n",
    "/src/intersection-with.submit.test.ts": "import intersectionWith from './intersection-with';\n\ndescribe('intersectionWith', () => {\n  test('no arrays are provided', () => {\n    const actual = intersectionWith((x, y) => true);\n    expect(actual).toEqual([]);\n  });\n\n  test('empty arrays', () => {\n    const actual = intersectionWith((x, y) => true, [], [1, 2, 3], [4, 5, 6]);\n    expect(actual).toEqual([]);\n  });\n\n  test('no common elements', () => {\n    const actual = intersectionWith(\n      (x, y) => x === y,\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    );\n    expect(actual).toEqual([]);\n  });\n\n  test('two arrays', () => {\n    const arr1 = [\n      { x: 1, y: 2 },\n      { x: 2, y: 3 },\n      { x: 3, y: 4 },\n    ];\n    const arr2 = [\n      { x: 2, y: 3 },\n      { x: 4, y: 5 },\n      { x: 5, y: 6 },\n    ];\n\n    const comparator = (\n      a: { x: number; y: number },\n      b: { x: number; y: number },\n    ) => a.x === b.x && a.y === b.y;\n\n    const actual = intersectionWith(comparator, arr1, arr2);\n    const expected = [{ x: 2, y: 3 }];\n\n    expect(actual).toEqual(expected);\n  });\n\n  test('multiple arrays using a comparator', () => {\n    const arr1 = [\n      { x: 1, y: 2 },\n      { x: 2, y: 3 },\n      { x: 3, y: 4 },\n    ];\n    const arr2 = [\n      { x: 2, y: 3 },\n      { x: 4, y: 5 },\n      { x: 5, y: 6 },\n    ];\n    const arr3 = [\n      { x: 2, y: 3 },\n      { x: 3, y: 4 },\n      { x: 5, y: 6 },\n      { x: 6, y: 7 },\n    ];\n\n    const comparator = (\n      a: { x: number; y: number },\n      b: { x: number; y: number },\n    ) => a.x === b.x && a.y === b.y;\n\n    const actual = intersectionWith(comparator, arr1, arr2, arr3);\n    const expected = [{ x: 2, y: 3 }];\n\n    expect(actual).toEqual(expected);\n  });\n\n  test('arrays with different lengths', () => {\n    const arr1 = [1, 2, 3];\n    const arr2 = [2, 3, 4, 5];\n    const arr3 = [3, 4, 5, 6, 7];\n\n    const actual = intersectionWith((x, y) => x == y, arr1, arr2, arr3);\n    const expected = [3];\n\n    expect(actual).toEqual(expected);\n  });\n\n  test('arrays with single elements', () => {\n    const arr1 = [{ x: 1, y: 2 }];\n    const arr2 = [{ x: 2, y: 3 }];\n    const arr3 = [{ x: 3, y: 4 }];\n\n    const comparator = (\n      a: { x: number; y: number },\n      b: { x: number; y: number },\n    ) => a.x === b.x && a.y === b.y;\n    const actual = intersectionWith(comparator, arr1, arr2, arr3);\n    expect(actual).toEqual([]);\n  });\n});\n",
    "/src/intersection-with.ts": "export default function intersectionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<Array<T>>\n): Array<T> {\n  if (!arrays.length) {\n    return [];\n  }\n\n  const firstArray = arrays[0];\n\n  // Perform intersection\n  return firstArray.filter((value) =>\n    arrays\n      .slice(1)\n      .every((arr) => arr.some((otherValue) => comparator(value, otherValue))),\n  );\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} comparator - The comparator function used to determine equality between elements.\n * @param {...Array} arrays - The arrays to perform the intersection on.\n * @returns {Array} - A new array containing the elements that are present in all given arrays.\n */\nexport default function intersectionWith(comparator, ...arrays) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function intersectionWith<T>(\n  comparator: (a: T, b: T) => boolean,\n  ...arrays: Array<Array<T>>\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/intersection-with.ts",
    "run": "/src/intersection-with.run.test.ts",
    "submit": "/src/intersection-with.submit.test.ts"
  }
}