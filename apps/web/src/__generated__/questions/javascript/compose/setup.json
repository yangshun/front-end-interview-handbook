{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/compose\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/compose.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/compose.run.test.ts": "import compose from './compose';\n\nconst identity = <T>(x: T): T => x;\nconst double = (x: number) => x * 2;\nconst square = (x: number) => x * x;\n\ndescribe('compose', () => {\n  test('returns a function', () => {\n    const composed = compose(identity);\n    expect(typeof composed).toBe('function');\n  });\n\n  test('identity', () => {\n    const composed = compose(identity);\n    expect(composed(42)).toBe(42);\n  });\n\n  test('square then double', () => {\n    const composed = compose(square, double);\n    expect(composed(4)).toBe(64);\n  });\n});\n",
    "/src/compose.submit.test.ts": "import compose from './compose';\n\nconst identity = <T>(x: T): T => x;\nconst double = (x: number) => x * 2;\nconst square = (x: number) => x * x;\n\ndescribe('compose', () => {\n  test('returns a function', () => {\n    const composed = compose(identity);\n    expect(typeof composed).toBe('function');\n  });\n\n  test('no functions', () => {\n    const composed = compose();\n    expect(composed(42)).toBe(42);\n  });\n\n  describe('only one function', () => {\n    test('identity', () => {\n      const composed = compose(identity);\n      expect(composed(42)).toBe(42);\n    });\n\n    test('double', () => {\n      const composed = compose(double);\n      expect(composed(42)).toBe(84);\n    });\n  });\n\n  describe('two functions', () => {\n    test('identity', () => {\n      const composed = compose(identity, identity);\n      expect(composed(42)).toBe(42);\n    });\n\n    test('mixture', () => {\n      const composed = compose(square, double);\n      expect(composed(4)).toBe(64);\n    });\n  });\n\n  describe('multiple functions', () => {\n    test('identity', () => {\n      const composed = compose(identity, identity, identity);\n      expect(composed(42)).toBe(42);\n    });\n\n    test('mixture', () => {\n      const composed = compose(square, identity, square, double, identity);\n      expect(composed(3)).toBe(1296);\n    });\n  });\n});\n",
    "/src/compose.ts": "export default function compose(...fns: Array<Function>): Function {\n  return function (x: any): Function {\n    return fns.reduceRight((result, func) => func(result), x);\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {...Function} args\n * @returns Function\n */\nexport default function compose(...fns) {\n  throw 'Not implemented';\n}",
    "ts": "export default function compose(...fns: Array<Function>): Function {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/compose.ts",
    "run": "/src/compose.run.test.ts",
    "submit": "/src/compose.submit.test.ts"
  }
}