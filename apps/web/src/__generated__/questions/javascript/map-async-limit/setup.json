{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/map-async-limit\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/map-async-limit.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/map-async-limit.run.test.ts": "import mapAsyncLimit from './map-async-limit';\n\nconst asyncIdentity = (x: number) => Promise.resolve(x);\n\ndescribe('mapAsyncLimit', () => {\n  test('returns promise', () => {\n    const p = mapAsyncLimit([], asyncIdentity);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await mapAsyncLimit([], asyncIdentity);\n    expect(res).toEqual([]);\n  });\n\n  test('resolved', async () => {\n    expect.assertions(1);\n    let ongoing = 0;\n    const limit = 2;\n\n    const res = await mapAsyncLimit(\n      [1, 2, 3, 4, 5],\n      (x: number) => {\n        ongoing++;\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (ongoing > limit) {\n              reject('Concurrency limit exceeded');\n            }\n\n            resolve(x * 2);\n            ongoing--;\n          }, 10);\n        });\n      },\n      limit,\n    );\n\n    expect(res).toEqual([2, 4, 6, 8, 10]);\n  });\n});\n",
    "/src/map-async-limit.submit.test.ts": "import mapAsyncLimit from './map-async-limit';\n\nconst asyncIdentity = (x: number) => Promise.resolve(x);\nconst asyncDouble = (x: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x * 2);\n    }, 10);\n  });\nconst asyncSquare = (x: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x * x);\n    }, 10);\n  });\nconst asyncRejectOdd = (x: number) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (x % 2 === 1) {\n        reject(x * 3);\n      }\n\n      resolve(x * 2);\n    }, 10);\n  });\n\ndescribe('mapAsyncLimit', () => {\n  test('returns promise', () => {\n    const p = mapAsyncLimit([], asyncIdentity);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await mapAsyncLimit([], asyncIdentity);\n    expect(res).toEqual([]);\n  });\n\n  test('single item', async () => {\n    expect.assertions(1);\n    const res = await mapAsyncLimit([3], asyncDouble);\n    expect(res).toEqual([6]);\n  });\n\n  describe('multiple items', () => {\n    describe('no limit', () => {\n      test('all resolved', async () => {\n        expect.assertions(1);\n        const res = await mapAsyncLimit([2, 3, 4, 5, 6], asyncSquare);\n        expect(res).toEqual([4, 9, 16, 25, 36]);\n      });\n\n      test('some rejected', async () => {\n        expect.assertions(1);\n        await expect(mapAsyncLimit([2, 3], asyncRejectOdd)).rejects.toBe(9);\n      });\n    });\n\n    test('limit of one', async () => {\n      expect.assertions(1);\n      let ongoing = 0;\n      const limit = 1;\n\n      const res = await mapAsyncLimit(\n        [2, 3, 4, 5, 6],\n        (x: number) => {\n          ongoing++;\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              if (ongoing > limit) {\n                reject('Concurrency limit exceeded');\n              }\n\n              resolve(x * x);\n              ongoing--;\n            }, 10);\n          });\n        },\n        limit,\n      );\n\n      expect(res).toEqual([4, 9, 16, 25, 36]);\n    });\n\n    test('limit of two', async () => {\n      expect.assertions(1);\n      let ongoing = 0;\n      const limit = 2;\n\n      const res = await mapAsyncLimit(\n        [2, 3, 4, 5, 6],\n        (x: number) => {\n          ongoing++;\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              if (ongoing > limit) {\n                reject('Concurrency limit exceeded');\n              }\n\n              resolve(x * x);\n              ongoing--;\n            }, 10);\n          });\n        },\n        limit,\n      );\n\n      expect(res).toEqual([4, 9, 16, 25, 36]);\n    });\n\n    test('limit more than the input', async () => {\n      expect.assertions(1);\n      let ongoing = 0;\n      const limit = 10;\n\n      const res = await mapAsyncLimit(\n        [2, 3, 4, 5, 6],\n        (x: number) => {\n          ongoing++;\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              if (ongoing > limit) {\n                reject('Concurrency limit exceeded');\n              }\n\n              resolve(x * x);\n              ongoing--;\n            }, 10);\n          });\n        },\n        limit,\n      );\n\n      expect(res).toEqual([4, 9, 16, 25, 36]);\n    });\n  });\n});\n",
    "/src/map-async-limit.ts": "export default function mapAsyncLimit<T, U>(\n  iterable: Array<T>,\n  callbackFn: (value: T) => Promise<U>,\n  size: number = Infinity,\n): Promise<Array<U>> {\n  if (iterable.length === 0) {\n    return Promise.resolve([]);\n  }\n\n  return Promise.all(iterable.slice(0, size).map(callbackFn)).then((results) =>\n    mapAsyncLimit(iterable.slice(size), callbackFn, size).then((rest) => [\n      ...results,\n      ...rest,\n    ]),\n  );\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<any>} iterable\n * @param {Function} callbackFn\n * @param {number} size\n *\n * @return {Promise}\n */\nexport default function mapAsyncLimit(iterable, callbackFn, size) {\n  throw 'Not implemented';\n}",
    "ts": "export default function mapAsyncLimit<T, U>(\n  iterable: Array<T>,\n  callbackFn: (value: T) => Promise<U>,\n  size?: number,\n): Promise<Array<U>> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/map-async-limit.ts",
    "run": "/src/map-async-limit.run.test.ts",
    "submit": "/src/map-async-limit.submit.test.ts"
  }
}