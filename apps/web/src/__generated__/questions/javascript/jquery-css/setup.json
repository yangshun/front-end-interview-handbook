{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/jquery-css\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/jquery-css.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/jquery-css.run.test.ts": "import $ from './jquery-css';\n\ndescribe('jQuery.css', () => {\n  beforeEach(() => {\n    document.body.innerHTML = '<button style=\"color: blue\">Click me</button>';\n  });\n\n  test('get existing style', () => {\n    expect($('button').css('color')).toBe('blue');\n  });\n\n  test('set style', () => {\n    $('button').css('color', 'red');\n    $('button').css('backgroundColor', 'tomato');\n    $('button').css('fontSize', '12px');\n\n    expect(document.querySelector('button')!.style.color).toBe('red');\n  });\n\n  test('get non-existent style', () => {\n    expect($('button').css('fontSize')).toBe(undefined);\n  });\n});\n",
    "/src/jquery-css.submit.test.ts": "import $ from './jquery-css';\n\ndescribe('jQuery.css', () => {\n  describe('get property', () => {\n    beforeEach(() => {\n      document.body.innerHTML = '<button style=\"color: blue\">Click me</button>';\n    });\n\n    test('get existing style', () => {\n      expect($('button').css('color')).toBe('blue');\n    });\n\n    test('get non-existent style', () => {\n      expect($('button').css('fontSize')).toBe(undefined);\n    });\n\n    test('non-existent element', () => {\n      expect($('no-such-thing').css('fontSize')).toBe(undefined);\n    });\n  });\n\n  describe('set property', () => {\n    beforeEach(() => {\n      document.body.innerHTML = '<button>Click me</button>';\n    });\n\n    test('no elements match the selector', () => {\n      expect(() => {\n        // @ts-ignore\n        $('no-such-thing').css('color', 'red').css('fontSize', '12px');\n      }).not.toThrow();\n    });\n\n    test('set css', () => {\n      $('button').css('color', 'red');\n      $('button').css('backgroundColor', 'tomato');\n      $('button').css('fontSize', '12px');\n\n      expect(document.querySelector('button')!.style.color).toBe('red');\n      expect(document.querySelector('button')!.style.backgroundColor).toBe(\n        'tomato',\n      );\n      expect(document.querySelector('button')!.style.fontSize).toBe('12px');\n\n      $('button').css('color', 'orange');\n      expect(document.querySelector('button')!.style.color).toBe('orange');\n    });\n\n    test('chain calls', () => {\n      // @ts-ignore\n      $('button')\n        .css('color', 'red')\n        // @ts-ignore\n        .css('backgroundColor', 'tomato')\n        .css('fontSize', '12px');\n\n      expect(document.querySelector('button')!.style.color).toBe('red');\n      expect(document.querySelector('button')!.style.backgroundColor).toBe(\n        'tomato',\n      );\n      expect(document.querySelector('button')!.style.fontSize).toBe('12px');\n    });\n\n    test('overwrites previous styles', () => {\n      // @ts-ignore\n      $('button')\n        .css('color', 'red')\n        // @ts-ignore\n        .css('backgroundColor', 'tomato')\n        .css('fontSize', '12px')\n        .css('color', 'orange');\n\n      expect(document.querySelector('button')!.style.color).toBe('orange');\n      expect(document.querySelector('button')!.style.backgroundColor).toBe(\n        'tomato',\n      );\n      expect(document.querySelector('button')!.style.fontSize).toBe('12px');\n    });\n  });\n});\n",
    "/src/jquery-css.ts": "interface JQuery {\n  css: (\n    prop: string,\n    value?: boolean | string | number,\n  ) => JQuery | string | undefined;\n}\n\nexport default function $(selector: string): JQuery {\n  const element = document.querySelector(selector) as HTMLElement | null;\n\n  return {\n    css: function (prop, value) {\n      // Getter case.\n      if (value === undefined) {\n        // No matching elements.\n        if (element == null) {\n          return undefined;\n        }\n\n        const value = element.style[prop as any];\n        return value === '' ? undefined : value;\n      }\n\n      // Setter case.\n      if (element != null) {\n        element.style[prop as any] = String(value);\n      }\n\n      return this;\n    },\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {string} selector\n * @return {{css: Function}}\n */\nexport default function $(selector) {\n  throw 'Not implemented!';\n}",
    "ts": "interface JQuery {\n  css: (\n    prop: string,\n    value?: boolean | string | number,\n  ) => JQuery | string | undefined;\n}\n\nexport default function $(selector: string): JQuery {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/jquery-css.ts",
    "run": "/src/jquery-css.run.test.ts",
    "submit": "/src/jquery-css.submit.test.ts"
  }
}