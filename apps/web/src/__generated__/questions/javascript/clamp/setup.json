{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/clamp\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/clamp.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/clamp.run.test.ts": "import clamp from './clamp';\n\ndescribe('clamp', () => {\n  test('negative numbers', () => {\n    expect(clamp(-10, -5, 5)).toBe(-5);\n  });\n\n  test('positive numbers', () => {\n    expect(clamp(10, -5, 5)).toBe(5);\n  });\n});\n",
    "/src/clamp.submit.test.ts": "import clamp from './clamp';\n\ndescribe('clamp', () => {\n  describe('within range', () => {\n    test('negative numbers', () => {\n      expect(clamp(-4, -5, 5)).toBe(-4);\n      expect(clamp(-5, -5, 5)).toBe(-5);\n      expect(clamp(-5.5, -5.6, 5.6)).toBe(-5.5);\n    });\n\n    test('positive numbers', () => {\n      expect(clamp(4, -5, 5)).toBe(4);\n      expect(clamp(5, -5, 5)).toBe(5);\n      expect(clamp(4.5, -5.1, 5.2)).toBe(4.5);\n    });\n\n    test('should not alter `0` in range', () => {\n      expect(1 / clamp(0, -5, 5)).toBe(Infinity);\n    });\n  });\n\n  describe('out of bounds', () => {\n    test('positive numbers', () => {\n      expect(clamp(4, -5, 2)).toBe(2);\n      expect(clamp(5, -5, 3)).toBe(3);\n      expect(clamp(4.5, 1, 3.2)).toBe(3.2);\n    });\n\n    test('negative numbers', () => {\n      expect(clamp(-10, -5, 5)).toBe(-5);\n      expect(clamp(-10.2, -5.5, 5.5)).toBe(-5.5);\n      expect(clamp(-Infinity, -5, 5)).toBe(-5);\n    });\n\n    test('should clamp to `0`', () => {\n      expect(1 / clamp(-10, 0, 5)).toBe(Infinity);\n    });\n  });\n});\n",
    "/src/clamp.ts": "export default function clamp(\n  value: number,\n  lower: number,\n  upper: number,\n): number {\n  if (value < lower) {\n    return lower;\n  }\n\n  if (value > upper) {\n    return upper;\n  }\n\n  return value;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} value The number to clamp.\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nexport default function clamp(value, lower, upper) {\n  throw 'Not implemented';\n}",
    "ts": "export default function clamp(\n  value: number,\n  lower: number,\n  upper: number,\n): number {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/clamp.ts",
    "run": "/src/clamp.run.test.ts",
    "submit": "/src/clamp.submit.test.ts"
  }
}