{
  "description": "var Component=(()=>{var m=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var s=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var l in e)t(r,l,{get:e[l],enumerable:!0})},d=(r,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of s(e))!b.call(r,c)&&c!==l&&t(r,c,{get:()=>e[c],enumerable:!(i=u(e,c))||i.enumerable});return r};var w=(r,e,l)=>(l=r!=null?m(p(r)):{},d(e||!r||!r.__esModule?t(l,\"default\",{value:r,enumerable:!0}):l,r)),f=r=>d(t({},\"__esModule\",{value:!0}),r);var h=x((R,o)=>{o.exports=_jsx_runtime});var C={};g(C,{default:()=>v,frontmatter:()=>j});var n=w(h()),j={title:\"Clamp\",excerpt:\"Implement a function to clamp a number within the inclusive lower and upper bounds\"};function a(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"clamp(number, lower, upper)\"}),\" to restrict a number within the inclusive \",(0,n.jsx)(e.code,{children:\"lower\"}),\" and \",(0,n.jsx)(e.code,{children:\"upper\"}),\" bounds.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The number to clamp.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"lower\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The lower bound.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"upper\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The upper bound.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(number)\"}),\": Returns the clamped number.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Within the bounds, return as-is.\nclamp(3, 0, 5); // => 3\n\n// Smaller than the lower bound.\nclamp(-10, -3, 5); // => -3\n\n// Bigger than the upper bound.\nclamp(10, -5, 5); // => 5\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#clamp\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.clamp\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(a,r)})):a(r)}var v=_;return f(C);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a function to clamp a number within the inclusive lower and upper bounds",
    "title": "Clamp"
  },
  "solution": "var Component=(()=>{var b=Object.create;var a=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var M=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var l in e)a(n,l,{get:e[l],enumerable:!0})},c=(n,e,l,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let u of v(e))!g.call(n,u)&&u!==l&&a(n,u,{get:()=>e[u],enumerable:!(o=w(e,u))||o.enumerable});return n};var T=(n,e,l)=>(l=n!=null?b(x(n)):{},c(e||!n||!n.__esModule?a(l,\"default\",{value:n,enumerable:!0}):l,n)),_=n=>c(a({},\"__esModule\",{value:!0}),n);var h=M((S,i)=>{i.exports=_jsx_runtime});var I={};j(I,{default:()=>y});var r=T(h());var t=MDXCodeBlock;var p=`/**\n * @param {number} value The number to clamp.\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nexport default function clamp(value, lower, upper) {\n  if (value < lower) {\n    return lower;\n  }\n\n  if (value > upper) {\n    return upper;\n  }\n\n  return value;\n}\n`;var d=`export default function clamp(\n  value: number,\n  lower: number,\n  upper: number,\n): number {\n  if (value < lower) {\n    return lower;\n  }\n\n  if (value > upper) {\n    return upper;\n  }\n\n  return value;\n}\n`;var m=`/**\n * @param {number} value The number to clamp.\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nexport default function clamp(value, lower, upper) {\n  return Math.min(upper, Math.max(lower, value));\n}\n`;var s=`export default function clamp(\n  value: number,\n  lower: number,\n  upper: number,\n): number {\n  return Math.min(upper, Math.max(lower, value));\n}\n`;function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Solutions will involve checking the passed in \",(0,r.jsx)(e.code,{children:\"value\"}),\" whether it is smaller than the \",(0,r.jsx)(e.code,{children:\"lower\"}),\" and bigger than the \",(0,r.jsx)(e.code,{children:\"upper\"}),\" and returns the right number accordingly.\"]}),`\n`,(0,r.jsx)(e.h3,{children:\"Approach 1: Sequential bound checks\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"We can first check if \",(0,r.jsx)(e.code,{children:\"value\"}),\" is lower than \",(0,r.jsx)(e.code,{children:\"lower\"}),\". If so, the value is out of range and we can return the lower bound. Next check if \",(0,r.jsx)(e.code,{children:\"value\"}),\" is higher than \",(0,r.jsx)(e.code,{children:\"upper\"}),\". If so, the value is out of range and we can return the upper bound. If none of the previous checks were true, then we can return the original \",(0,r.jsx)(e.code,{children:\"value\"}),\", which is within the specified range.\"]}),`\n`,(0,r.jsx)(t,{languages:{jsx:p,tsx:d}}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Approach 2: Using \",(0,r.jsx)(e.code,{children:\"Math.max\"}),\" / \",(0,r.jsx)(e.code,{children:\"Math.min\"})]}),`\n`,(0,r.jsxs)(e.p,{children:[\"The previous solution can be succinctly expressed in a line using \",(0,r.jsx)(e.code,{children:\"Math.max()\"}),\" and \",(0,r.jsx)(e.code,{children:\"Math.min()\"}),\".\"]}),`\n`,(0,r.jsx)(t,{languages:{jsx:m,tsx:s}}),`\n`,(0,r.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"upper\"}),\" is smaller than \",(0,r.jsx)(e.code,{children:\"lower\"}),\". We can assume we aren't given this case.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#clamp\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.clamp\"})]})}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(f,n)})):f(n)}var y=X;return _(I);})();\n;return Component;"
}