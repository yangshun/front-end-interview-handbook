{
  "description": "var Component=(()=>{var h=Object.create;var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var c in e)d(t,c,{get:e[c],enumerable:!0})},l=(t,e,c,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!m.call(t,i)&&i!==c&&d(t,i,{get:()=>e[i],enumerable:!(r=p(e,i))||r.enumerable});return t};var j=(t,e,c)=>(c=t!=null?h(S(t)):{},l(e||!t||!t.__esModule?d(c,\"default\",{value:t,enumerable:!0}):c,t)),M=t=>l(d({},\"__esModule\",{value:!0}),t);var a=x((w,o)=>{o.exports=_jsx_runtime});var k={};g(k,{default:()=>_,frontmatter:()=>f});var n=j(a()),f={title:\"useMediatedState\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u7C7B\\u4F3C\\u4E8E useState \\u7684 hook\\uFF0C\\u4F46\\u652F\\u6301\\u4E00\\u4E2A\\u4E2D\\u4ECB\\u8FC7\\u7A0B\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",strong:\"strong\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u7C7B\\u4F3C\\u4E8E \",(0,n.jsx)(e.code,{children:\"useState\"}),\" \\u7684 \",(0,n.jsx)(e.code,{children:\"useMediatedState\"}),\" hook\\uFF0C\\u4F46\\u652F\\u6301\\u4E00\\u4E2A\\u4E2D\\u4ECB\\u51FD\\u6570\\uFF0C\\u8BE5\\u51FD\\u6570\\u5728\\u6BCF\\u6B21\\u72B6\\u6001\\u8BBE\\u7F6E\\u65F6\\u8FD0\\u884C\\u3002\\u6B64\\u4E2D\\u4ECB\\u51FD\\u6570\\u53EF\\u7528\\u4E8E\\u8F6C\\u6362\\u6216\\u62E6\\u622A\\u72B6\\u6001\\u66F4\\u65B0\\u3002\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`const replaceMultipleSpaces = (s) => s.replace(/[\\\\s]+/g, ' ');\n\nexport default function Component() {\n  const [state, setState] = useMediatedState(replaceMultipleSpaces, '');\n\n  return (\n    <div>\n      <div>\\u60A8\\u5C06\\u65E0\\u6CD5\\u8F93\\u5165\\u591A\\u4E2A\\u7A7A\\u683C</div>\n      <input\n        type=\"text\"\n        min=\"0\"\n        max=\"10\"\n        value={state}\n        onChange={(e) => setState(e.target.value)}\n      />\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u53C2\\u6570\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"mediator\"}),\"\\uFF1A\\u4E00\\u4E2A\\u63A5\\u6536\\u65B0\\u72B6\\u6001\\u5E76\\u8FD4\\u56DE\\u8F6C\\u6362\\u540E\\u72B6\\u6001\\u7684\\u51FD\\u6570\\u3002\\u6B64\\u51FD\\u6570\\u53EF\\u4EE5\\u6709\\u4E24\\u79CD\\u5F62\\u5F0F\\uFF1A\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"(newState: T) => T\"}),\" \\u63A5\\u6536 1 \\u4E2A\\u53C2\\u6570\\uFF1A\\u7531 \",(0,n.jsx)(e.code,{children:\"setState\"}),\" \\u8C03\\u7528\\u7684\\u65B0\\u72B6\\u6001\\uFF0C\\u5E76\\u8FD4\\u56DE\\u6700\\u7EC8\\u72B6\\u6001\\uFF0C\\u6216\\u8005\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"(newState: T, dispatch) => void\"}),\" \\u63A5\\u6536 2 \\u4E2A\\u53C2\\u6570\\uFF1A\\u7531 \",(0,n.jsx)(e.code,{children:\"setState\"}),\" \\u8C03\\u7528\\u7684\\u65B0\\u72B6\\u6001\\uFF0C\\u4EE5\\u53CA\\u4E00\\u4E2A\\u5C06\\u5B9E\\u9645\\u8FD0\\u884C\\u72B6\\u6001\\u66F4\\u65B0\\u7684\\u51FD\\u6570 \",(0,n.jsx)(e.code,{children:\"dispatch\"}),\"\\u3002\\u5B83\\u4E0D\\u8FD4\\u56DE\\u4EFB\\u4F55\\u5185\\u5BB9\\u3002\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"initialState\"}),\"\\uFF1A\\u521D\\u59CB\\u72B6\\u6001\\u503C\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"\\u6CE8\\u610F\"}),\"\\uFF1A\\u5373\\u4F7F \",(0,n.jsx)(e.code,{children:\"mediator\"}),\" \\u66F4\\u6539\\u4E3A\\u65B0\\u7684\\u548C/\\u6216\\u4E0D\\u540C\\u7684\\u51FD\\u6570\\uFF0C\\u4E5F\\u5E94\\u4FDD\\u6301\\u4E0D\\u53D8\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8FD4\\u56DE\\u503C\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u8BE5 hook \\u8FD4\\u56DE\\u4E00\\u4E2A\\u5305\\u542B\\u4E24\\u4E2A\\u5143\\u7D20\\u7684\\u6570\\u7EC4\\uFF1A\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"\\u5F53\\u524D\\u72B6\\u6001\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u51FD\\u6570 \",(0,n.jsx)(e.code,{children:\"setState\"}),\" \\u7528\\u4E8E\\u66F4\\u65B0\\u72B6\\u6001\\u3002\\u5B83\\u5FC5\\u987B\\u4E0E \",(0,n.jsx)(e.code,{children:\"useState\"}),\" \\u8FD4\\u56DE\\u7684\\u6570\\u7EC4\\u7684\\u7B2C\\u4E8C\\u4E2A\\u5143\\u7D20\\u76F8\\u540C\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u672C\\u8D28\\u4E0A\\uFF0C\\u8BE5 hook \\u8FD4\\u56DE\\u4E0E \",(0,n.jsx)(e.code,{children:\"useState\"}),\" \\u76F8\\u540C\\u7684\\u503C\\u3002\"]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var _=v;return M(k);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-mediated-state\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-mediated-state.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-mediated-state.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMediatedState from './use-mediated-state';\n\ndescribe('useMediatedState', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMediatedState(() => {}));\n\n    expect(Array.isArray(result.current)).toBe(true);\n    expect(result.current.length).toBe(2);\n    expect(typeof result.current[0]).toBe('undefined');\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('initial state', () => {\n    const initialState = 42;\n    const { result } = renderHook(() =>\n      useMediatedState(() => initialState, initialState),\n    );\n\n    expect(result.current[0]).toBe(initialState);\n  });\n\n  test('mediator', () => {\n    const { result } = renderHook(() => useMediatedState((x) => x * 2, 1));\n\n    act(() => result.current[1](2));\n\n    expect(result.current[0]).toBe(4);\n  });\n\n  test('mediator with dispatch', () => {\n    const { result } = renderHook(() =>\n      // @ts-expect-error\n      useMediatedState((x, dispatch) => dispatch(x * 2), 1),\n    );\n\n    act(() => result.current[1](2));\n\n    expect(result.current[0]).toBe(4);\n  });\n});\n",
    "/src/use-mediated-state.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useMediatedState from './use-mediated-state';\nimport { useState } from 'react';\n\ndescribe('useMediatedState', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useMediatedState(() => {}));\n\n    expect(Array.isArray(result.current)).toBe(true);\n    expect(result.current.length).toBe(2);\n    expect(typeof result.current[0]).toBe('undefined');\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('initial state', () => {\n    const initialState = 42;\n    const { result } = renderHook(() =>\n      useMediatedState(() => initialState, initialState),\n    );\n\n    expect(result.current[0]).toBe(initialState);\n  });\n\n  test('mediator', () => {\n    const { result } = renderHook(() => useMediatedState((x) => x * 2, 1));\n\n    act(() => result.current[1](2));\n\n    expect(result.current[0]).toBe(4);\n  });\n\n  test('mediator with dispatch', () => {\n    const { result } = renderHook(() =>\n      // @ts-expect-error\n      useMediatedState((x, dispatch) => dispatch(x * 2), 1),\n    );\n\n    act(() => result.current[1](2));\n\n    expect(result.current[0]).toBe(4);\n  });\n\n  test('works with updater function', () => {\n    const { result } = renderHook(() => useMediatedState((x) => x * 2, 1));\n\n    act(() => result.current[1]((x) => x + 1));\n\n    expect(result.current[0]).toBe(4);\n  });\n\n  test('works with updater function and dispatch', () => {\n    const { result } = renderHook(() =>\n      // @ts-expect-error\n      useMediatedState((x, dispatch) => dispatch(x * 2), 1),\n    );\n\n    act(() => result.current[1]((x) => x + 1));\n\n    expect(result.current[0]).toBe(4);\n  });\n});\n",
    "/src/use-mediated-state.ts": "import { Dispatch, SetStateAction, useCallback, useRef, useState } from 'react';\n\ninterface StateMediator<T = unknown> {\n  (newState: T): T;\n  (newState: T, dispatch: Dispatch<SetStateAction<T>>): void;\n}\n\nexport default function useMediatedState<T = unknown>(\n  mediator: StateMediator<T>,\n  initialState?: T,\n): [T, Dispatch<SetStateAction<T>>] {\n  const mediatorFn = useRef(mediator);\n\n  const [state, setMediatedState] = useState<T>(initialState!);\n\n  const setState: Dispatch<SetStateAction<T>> = useCallback(\n    (newStateOrUpdaterFunction) => {\n      const newState =\n        newStateOrUpdaterFunction instanceof Function\n          ? newStateOrUpdaterFunction(state)\n          : newStateOrUpdaterFunction;\n\n      const mediator = mediatorFn.current;\n\n      if (mediator.length === 2) {\n        mediator(newState, setMediatedState);\n      } else {\n        setMediatedState(mediator(newState));\n      }\n    },\n    [state],\n  );\n\n  return [state, setState];\n}\n"
  },
  "info": {
    "excerpt": "实现一个类似于 useState 的 hook，但支持一个中介过程",
    "title": "useMediatedState"
  },
  "metadata": {
    "access": "standard",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 20,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-mediated-state"
      }
    ],
    "href": "/questions/javascript/use-mediated-state",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-state-with-reset"
    ],
    "slug": "use-mediated-state",
    "subtitle": null,
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {Function} mediator\n * @param {T | undefined} initialState\n */\nexport default function useMediatedState(mediator, initialState) {\n  throw 'Not implemented';\n}",
    "ts": "import { Dispatch, SetStateAction } from 'react';\n\ninterface StateMediator<S = unknown> {\n  (newState: S): S;\n  (newState: S, dispatch: Dispatch<SetStateAction<S>>): void;\n}\n\nexport default function useMediatedState<S = unknown>(\n  mediator: StateMediator<S>,\n  initialState?: S,\n): [S, Dispatch<SetStateAction<S>>] {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var T=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),M=(t,e)=>{for(var a in e)i(t,a,{get:e[a],enumerable:!0})},r=(t,e,a,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!w.call(t,o)&&o!==a&&i(t,o,{get:()=>e[o],enumerable:!(c=S(e,o))||c.enumerable});return t};var x=(t,e,a)=>(a=t!=null?m(p(t)):{},r(e||!t||!t.__esModule?i(a,\"default\",{value:t,enumerable:!0}):a,t)),k=t=>r(i({},\"__esModule\",{value:!0}),t);var s=T((C,d)=>{d.exports=_jsx_runtime});var D={};M(D,{default:()=>g});var n=x(s());var u=MDXCodeBlock;var h=`import { Dispatch, SetStateAction, useCallback, useRef, useState } from 'react';\n\ninterface StateMediator<T = unknown> {\n  (newState: T): T;\n  (newState: T, dispatch: Dispatch<SetStateAction<T>>): void;\n}\n\nexport default function useMediatedState<T = unknown>(\n  mediator: StateMediator<T>,\n  initialState?: T,\n): [T, Dispatch<SetStateAction<T>>] {\n  const mediatorFn = useRef(mediator);\n\n  const [state, setMediatedState] = useState<T>(initialState!);\n\n  const setState: Dispatch<SetStateAction<T>> = useCallback(\n    (newStateOrUpdaterFunction) => {\n      const newState =\n        newStateOrUpdaterFunction instanceof Function\n          ? newStateOrUpdaterFunction(state)\n          : newStateOrUpdaterFunction;\n\n      const mediator = mediatorFn.current;\n\n      if (mediator.length === 2) {\n        mediator(newState, setMediatedState);\n      } else {\n        setMediatedState(mediator(newState));\n      }\n    },\n    [state],\n  );\n\n  return [state, setState];\n}\n`;function l(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useMediatedState\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useState\"}),\" and a setter function that calls the \",(0,n.jsx)(e.code,{children:\"mediator\"}),\" function before updating the state. To determine the number of arguments a \",(0,n.jsx)(e.code,{children:\"mediator\"}),\" function receives, we can use \",(0,n.jsx)(e.code,{children:\"mediator.length\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To memoize the \",(0,n.jsx)(e.code,{children:\"mediator\"}),\", we can either use \",(0,n.jsx)(e.code,{children:\"useRef\"}),\", \",(0,n.jsx)(e.code,{children:\"useMemo\"}),\", or \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" since we know for a fact that \",(0,n.jsx)(e.code,{children:\"mediator\"}),\" is a function. The simplest way is to use \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" since there's no need to run any memoization function on the first render.\"]}),`\n`,(0,n.jsx)(u,{children:h})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var g=b;return k(D);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-mediated-state.ts",
    "run": "/src/use-mediated-state.run.test.ts",
    "submit": "/src/use-mediated-state.submit.test.ts"
  }
}