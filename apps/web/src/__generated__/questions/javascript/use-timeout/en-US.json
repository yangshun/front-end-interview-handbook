{
  "description": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!p.call(t,l)&&l!==i&&o(t,l,{get:()=>e[l],enumerable:!(a=u(e,l))||a.enumerable});return t};var x=(t,e,i)=>(i=t!=null?h(f(t)):{},c(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>c(o({},\"__esModule\",{value:!0}),t);var d=g((_,r)=>{r.exports=_jsx_runtime});var j={};b(j,{default:()=>T,frontmatter:()=>y});var n=x(d()),y={title:\"useTimeout\",excerpt:\"Implement a hook that invokes a callback function after a specified delay\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",pre:\"pre\",h2:\"h2\",ol:\"ol\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useTimeout\"}),\" hook that invokes a callback function after a specified delay.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Note that the hooks can be called again with different values since the initial call:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Different callback\"}),\": The pending timer should invoke the latest callback. If the timer has already expired, the callback is not executed and no new timer will be set\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Different delay\"}),\": The previous timeout should be cancelled if the timer hasn't expired, a new timer is set with the new delay value\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The primary benefit of \",(0,n.jsx)(e.code,{children:\"useTimeout\"}),\" is so that you don't have to manually clear call \",(0,n.jsx)(e.code,{children:\"clearTimeout()\"}),\" if the component unmounts before the timer expires.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [loading, setLoading] = useState(true);\n\n  useTimeout(() => setLoading(false), 1000);\n\n  return (\n    <div>\n      <p>{loading ? 'Loading' : 'Ready'}</p>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"callback: () => void\"}),\": A function to be called after the specified delay\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"delay: number | null\"}),\": The delay in milliseconds before the invocation of the callback function. If \",(0,n.jsx)(e.code,{children:\"null\"}),\", the timeout is cleared\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Nothing.\"})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var T=v;return k(j);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-timeout\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-timeout.ts\",\n  \"dependencies\": {\n    \"@sinonjs/fake-timers\": \"14.0.0\",\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-timeout.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useTimeout from './use-timeout';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useTimeout', () => {\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useTimeout(() => {}, 0));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls callback in time', () => {\n    const callback = jest.fn();\n    renderHook(() => useTimeout(callback, 1000));\n\n    expect(callback).not.toHaveBeenCalled();\n\n    act(() => clock.tick(1000));\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-timeout.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useTimeout from './use-timeout';\n\nlet clock: FakeTimers.InstalledClock;\n\ndescribe('useTimeout', () => {\n  beforeEach(() => {\n    clock = FakeTimers.withGlobal(globalThis).install();\n  });\n\n  afterEach(() => {\n    clock.uninstall();\n  });\n\n  test('return values', () => {\n    const { result } = renderHook(() => useTimeout(() => {}, 0));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls callback in time', () => {\n    const callback = jest.fn();\n    renderHook(() => useTimeout(callback, 1000));\n\n    expect(callback).not.toHaveBeenCalled();\n\n    act(() => clock.tick(1000));\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('clears timeout on unmount', () => {\n    const callback = jest.fn();\n    const { unmount } = renderHook(() => useTimeout(callback, 1000));\n\n    unmount();\n    act(() => clock.tick(1000));\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n\n  test('calls timeout only once', () => {\n    const callback = jest.fn();\n    renderHook(() => useTimeout(callback, 1000));\n\n    expect(callback).not.toHaveBeenCalled();\n\n    act(() => clock.tick(1000 * 5));\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  describe('callback changes', () => {\n    test('before the first execution', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook<void, { callback: () => void }>(\n        ({ callback }) => useTimeout(callback, 1000),\n        {\n          initialProps: { callback },\n        },\n      );\n\n      expect(callback).not.toHaveBeenCalled();\n\n      clock.tick(500);\n\n      const callbackNew = jest.fn();\n      rerender({ callback: callbackNew });\n\n      expect(callback).not.toHaveBeenCalled();\n      expect(callbackNew).not.toHaveBeenCalled();\n\n      clock.tick(500);\n      expect(callback).not.toHaveBeenCalled();\n      expect(callbackNew).toHaveBeenCalledTimes(1);\n    });\n\n    test('after the first execution', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook<void, { callback: () => void }>(\n        ({ callback }) => useTimeout(callback, 1000),\n        {\n          initialProps: { callback },\n        },\n      );\n\n      expect(callback).not.toHaveBeenCalled();\n\n      clock.tick(1000);\n      expect(callback).toHaveBeenCalledTimes(1);\n\n      const callbackNew = jest.fn();\n      rerender({ callback: callbackNew });\n\n      expect(callbackNew).not.toHaveBeenCalled();\n      clock.tick(1000);\n\n      expect(callback).toHaveBeenCalledTimes(1);\n      expect(callbackNew).toHaveBeenCalledTimes(0);\n    });\n  });\n\n  describe('delay', () => {\n    describe('delay changes', () => {\n      test('before the first execution', () => {\n        const callback = jest.fn();\n        const { rerender } = renderHook<void, { delay: number | null }>(\n          ({ delay }) => useTimeout(callback, delay),\n          {\n            initialProps: { delay: 1000 },\n          },\n        );\n\n        expect(callback).not.toHaveBeenCalled();\n\n        rerender({ delay: 2000 });\n        clock.tick(1500);\n\n        expect(callback).not.toHaveBeenCalled();\n        clock.tick(1000);\n\n        expect(callback).toHaveBeenCalledTimes(1);\n      });\n\n      test('after the first execution', () => {\n        const callback = jest.fn();\n        const { rerender } = renderHook<void, { delay: number | null }>(\n          ({ delay }) => useTimeout(callback, delay),\n          {\n            initialProps: { delay: 1000 },\n          },\n        );\n\n        expect(callback).not.toHaveBeenCalled();\n        clock.tick(1000);\n\n        expect(callback).toHaveBeenCalledTimes(1);\n\n        rerender({ delay: 2000 });\n        clock.tick(1500);\n\n        expect(callback).toHaveBeenCalledTimes(1);\n        clock.tick(1000);\n\n        expect(callback).toHaveBeenCalledTimes(2);\n      });\n    });\n\n    test('changed to null', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook<void, { delay: number | null }>(\n        ({ delay }) => useTimeout(callback, delay),\n        {\n          initialProps: { delay: 1000 },\n        },\n      );\n\n      expect(callback).not.toHaveBeenCalled();\n\n      rerender({ delay: null });\n      clock.tick(1000);\n\n      expect(callback).not.toHaveBeenCalled();\n    });\n\n    test('starts with null', () => {\n      const callback = jest.fn();\n      const { rerender } = renderHook<void, { delay: number | null }>(\n        ({ delay }) => useTimeout(callback, delay),\n        {\n          initialProps: { delay: null },\n        },\n      );\n\n      expect(callback).not.toHaveBeenCalled();\n\n      rerender({ delay: 1000 });\n      clock.tick(1000);\n\n      expect(callback).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n",
    "/src/use-timeout.ts": "import { useRef, useEffect } from 'react';\n\nexport default function useTimeout(callback: () => void, delay: number | null) {\n  const latestCallback = useRef(callback);\n  latestCallback.current = callback;\n\n  useEffect(() => {\n    if (delay === null) {\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      latestCallback.current();\n    }, delay);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [delay]);\n}\n"
  },
  "metadata": {
    "access": "free",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that invokes a callback function after a specified delay",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-timeout"
      }
    ],
    "href": "/questions/javascript/use-timeout",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-countdown",
      "use-interval"
    ],
    "slug": "use-timeout",
    "subtitle": null,
    "title": "useTimeout",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {() => void} callback\n * @param {number | null} delay\n */\nexport default function useTimeout(callback, delay) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useTimeout(callback: () => void, delay: number | null) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var c in e)l(t,c,{get:e[c],enumerable:!0})},i=(t,e,c,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!k.call(t,o)&&o!==c&&l(t,o,{get:()=>e[o],enumerable:!(r=f(e,o))||r.enumerable});return t};var j=(t,e,c)=>(c=t!=null?h(b(t)):{},i(e||!t||!t.__esModule?l(c,\"default\",{value:t,enumerable:!0}):c,t)),y=t=>i(l({},\"__esModule\",{value:!0}),t);var d=x((D,a)=>{a.exports=_jsx_runtime});var w={};T(w,{default:()=>g});var n=j(d());var s=MDXCodeBlock;var u=`import { useRef, useEffect } from 'react';\n\nexport default function useTimeout(callback: () => void, delay: number | null) {\n  const latestCallback = useRef(callback);\n  latestCallback.current = callback;\n\n  useEffect(() => {\n    if (delay === null) {\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      latestCallback.current();\n    }, delay);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [delay]);\n}\n`;function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useTimeout\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" to create a timeout with \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\" for \",(0,n.jsx)(e.code,{children:\"delay\"}),\" milliseconds. The timeout is cleared when the component is unmounted or when the \",(0,n.jsx)(e.code,{children:\"delay\"}),\" is \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"callback\"}),\" is stored using \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" so that the pending timer can reference the latest callback.\"]}),`\n`,(0,n.jsx)(s,{children:u})]})}function _(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var g=_;return y(w);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-timeout.ts",
    "run": "/src/use-timeout.run.test.ts",
    "submit": "/src/use-timeout.submit.test.ts"
  }
}