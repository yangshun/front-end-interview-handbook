{
  "description": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!p.call(t,l)&&l!==i&&o(t,l,{get:()=>e[l],enumerable:!(a=u(e,l))||a.enumerable});return t};var x=(t,e,i)=>(i=t!=null?h(f(t)):{},c(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>c(o({},\"__esModule\",{value:!0}),t);var d=g((_,r)=>{r.exports=_jsx_runtime});var j={};b(j,{default:()=>T,frontmatter:()=>y});var n=x(d()),y={title:\"useTimeout\",excerpt:\"Implement a hook that invokes a callback function after a specified delay\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",pre:\"pre\",h2:\"h2\",ol:\"ol\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useTimeout\"}),\" hook that invokes a callback function after a specified delay.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Note that the hooks can be called again with different values since the initial call:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Different callback\"}),\": The pending timer should invoke the latest callback. If the timer has already expired, the callback is not executed and no new timer will be set\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Different delay\"}),\": The previous timeout should be cancelled if the timer hasn't expired, a new timer is set with the new delay value\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The primary benefit of \",(0,n.jsx)(e.code,{children:\"useTimeout\"}),\" is so that you don't have to manually clear call \",(0,n.jsx)(e.code,{children:\"clearTimeout()\"}),\" if the component unmounts before the timer expires.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [loading, setLoading] = useState(true);\n\n  useTimeout(() => setLoading(false), 1000);\n\n  return (\n    <div>\n      <p>{loading ? 'Loading' : 'Ready'}</p>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"callback: () => void\"}),\": A function to be called after the specified delay\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"delay: number | null\"}),\": The delay in milliseconds before the invocation of the callback function. If \",(0,n.jsx)(e.code,{children:\"null\"}),\", the timeout is cleared\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Nothing.\"})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var T=v;return k(j);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that invokes a callback function after a specified delay",
    "title": "useTimeout"
  },
  "solution": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var c in e)l(t,c,{get:e[c],enumerable:!0})},i=(t,e,c,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!k.call(t,o)&&o!==c&&l(t,o,{get:()=>e[o],enumerable:!(r=f(e,o))||r.enumerable});return t};var j=(t,e,c)=>(c=t!=null?h(b(t)):{},i(e||!t||!t.__esModule?l(c,\"default\",{value:t,enumerable:!0}):c,t)),y=t=>i(l({},\"__esModule\",{value:!0}),t);var d=x((D,a)=>{a.exports=_jsx_runtime});var w={};T(w,{default:()=>g});var n=j(d());var s=MDXCodeBlock;var u=`import { useRef, useEffect } from 'react';\n\nexport default function useTimeout(callback: () => void, delay: number | null) {\n  const latestCallback = useRef(callback);\n  latestCallback.current = callback;\n\n  useEffect(() => {\n    if (delay === null) {\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      latestCallback.current();\n    }, delay);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [delay]);\n}\n`;function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useTimeout\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" to create a timeout with \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\" for \",(0,n.jsx)(e.code,{children:\"delay\"}),\" milliseconds. The timeout is cleared when the component is unmounted or when the \",(0,n.jsx)(e.code,{children:\"delay\"}),\" is \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"callback\"}),\" is stored using \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" so that the pending timer can reference the latest callback.\"]}),`\n`,(0,n.jsx)(s,{children:u})]})}function _(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var g=_;return y(w);})();\n;return Component;"
}