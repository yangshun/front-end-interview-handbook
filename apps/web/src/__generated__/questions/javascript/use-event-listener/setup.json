{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-event-listener\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-event-listener.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-event-listener.run.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useEventListener from './use-event-listener';\n\ndescribe('useEventListener', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useEventListener('click', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click', () => {\n    const handler = jest.fn();\n    renderHook(() => useEventListener('click', handler));\n\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-event-listener.submit.test.tsx": "import React, { useRef } from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\n\nimport useEventListener from './use-event-listener';\n\ndescribe('useEventListener', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useEventListener('click', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click', () => {\n    const handler = jest.fn();\n    renderHook(() => useEventListener('click', handler));\n\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('click element', async () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useEventListener('click', handler, ref);\n\n      return <div ref={ref} data-testid=\"div\" />;\n    };\n\n    const page = render(<Component />);\n    const div = page.getByTestId('div');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(2);\n  });\n\n  test('mouseover element', async () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useEventListener('mouseover', handler, ref);\n\n      return <div ref={ref} data-testid=\"div\" />;\n    };\n\n    const page = render(<Component />);\n    const div = page.getByTestId('div');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseOver(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('options', async () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useEventListener('click', handler, ref, { once: true });\n\n      return <div ref={ref} data-testid=\"div\" />;\n    };\n\n    const page = render(<Component />);\n    const div = page.getByTestId('div');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('remove listener on unmount', async () => {\n    const handler = jest.fn();\n    const { unmount } = renderHook(() => useEventListener('click', handler));\n\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    unmount();\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-event-listener.ts": "import { RefObject, useEffect, useRef } from 'react';\n\nexport default function useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n  KM extends keyof MediaQueryListEventMap,\n  T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n  eventName: KW | KH | KM,\n  handler: (\n    event:\n      | WindowEventMap[KW]\n      | HTMLElementEventMap[KH]\n      | SVGElementEventMap[KH]\n      | MediaQueryListEventMap[KM]\n      | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const latestHandler = useRef(handler);\n  latestHandler.current = handler;\n\n  useEffect(() => {\n    const targetElement: T | Window = element?.current ?? window;\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    }\n\n    const listener: typeof handler = (event) => {\n      latestHandler.current(event);\n    };\n\n    targetElement.addEventListener(eventName, listener, options);\n\n    return () => {\n      targetElement.removeEventListener(eventName, listener, options);\n    };\n  }, [eventName, element, options]);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n *\n * @param {string} eventName\n * @param {(event) => void} handler\n * @param {import(\"react\").RefObject<T> | undefined} [element]\n * @param {boolean | AddEventListenerOptions | undefined} [options]\n */\nexport default function useEventListener(eventName, handler, element, options) {\n  throw 'Not implemented';\n}",
    "ts": "import { RefObject } from 'react';\n\nexport default function useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n  KM extends keyof MediaQueryListEventMap,\n  T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n  eventName: KW | KH | KM,\n  handler: (\n    event:\n      | WindowEventMap[KW]\n      | HTMLElementEventMap[KH]\n      | SVGElementEventMap[KH]\n      | MediaQueryListEventMap[KM]\n      | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-event-listener.ts",
    "run": "/src/use-event-listener.run.test.ts",
    "submit": "/src/use-event-listener.submit.test.tsx"
  }
}