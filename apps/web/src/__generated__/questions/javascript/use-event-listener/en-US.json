{
  "description": "var Component=(()=>{var a=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},c=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!f.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return t};var g=(t,e,o)=>(o=t!=null?a(m(t)):{},c(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>c(i({},\"__esModule\",{value:!0}),t);var d=v((_,l)=>{l.exports=_jsx_runtime});var L={};b(L,{default:()=>E,frontmatter:()=>j});var n=g(d()),j={title:\"useEventListener\",excerpt:\"Implement a hook that subscribes to browser events\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useEventListener\"}),\" hook that subscribes to browser events by attaching event listeners to DOM elements, the window, or media query lists.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const buttonRef = useRef(null);\n\n  useEventListener('click', () => console.log('Button clicked'), buttonRef, {\n    once: true,\n  });\n\n  return (\n    <div>\n      <button ref={buttonRef}>Click me</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"type (string)\"}),\": The event type to listen for\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"handler (event) => void\"}),\": The event handler function\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"target (RefObject<T>)\"}),\": The ref object of the element to attach the event listener to. If not provided, it defaults to \",(0,n.jsx)(e.code,{children:\"window\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"options (AddEventListenerOptions)\"}),\": The \",(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#options\",children:[(0,n.jsx)(e.code,{children:\"AddEventListenerOptions\"}),\" options object\"]}),\" that specifies characteristics about the event listener. This is an optional argument\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Nothing.\"})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var E=w;return x(L);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-event-listener\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-event-listener.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/src/use-event-listener.run.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useEventListener from './use-event-listener';\n\ndescribe('useEventListener', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useEventListener('click', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click', () => {\n    const handler = jest.fn();\n    renderHook(() => useEventListener('click', handler));\n\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-event-listener.submit.test.tsx": "import React, { useRef } from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\n\nimport useEventListener from './use-event-listener';\n\ndescribe('useEventListener', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useEventListener('click', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('click', () => {\n    const handler = jest.fn();\n    renderHook(() => useEventListener('click', handler));\n\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('click element', async () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useEventListener('click', handler, ref);\n\n      return <div ref={ref} data-testid=\"div\" />;\n    };\n\n    const page = render(<Component />);\n    const div = page.getByTestId('div');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(2);\n  });\n\n  test('mouseover element', async () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useEventListener('mouseover', handler, ref);\n\n      return <div ref={ref} data-testid=\"div\" />;\n    };\n\n    const page = render(<Component />);\n    const div = page.getByTestId('div');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.mouseOver(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('options', async () => {\n    const handler = jest.fn();\n\n    const Component = () => {\n      const ref = useRef<HTMLDivElement>(null);\n      useEventListener('click', handler, ref, { once: true });\n\n      return <div ref={ref} data-testid=\"div\" />;\n    };\n\n    const page = render(<Component />);\n    const div = page.getByTestId('div');\n\n    expect(handler).not.toHaveBeenCalled();\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    act(() => fireEvent.click(div));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n\n  test('remove listener on unmount', async () => {\n    const handler = jest.fn();\n    const { unmount } = renderHook(() => useEventListener('click', handler));\n\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n\n    unmount();\n    act(() => fireEvent.click(window));\n\n    expect(handler).toHaveBeenCalledTimes(1);\n  });\n});\n",
    "/src/use-event-listener.ts": "import { RefObject, useEffect, useRef } from 'react';\n\nexport default function useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n  KM extends keyof MediaQueryListEventMap,\n  T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n  eventName: KW | KH | KM,\n  handler: (\n    event:\n      | WindowEventMap[KW]\n      | HTMLElementEventMap[KH]\n      | SVGElementEventMap[KH]\n      | MediaQueryListEventMap[KM]\n      | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const latestHandler = useRef(handler);\n  latestHandler.current = handler;\n\n  useEffect(() => {\n    const targetElement: T | Window = element?.current ?? window;\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    }\n\n    const listener: typeof handler = (event) => {\n      latestHandler.current(event);\n    };\n\n    targetElement.addEventListener(eventName, listener, options);\n\n    return () => {\n      targetElement.removeEventListener(eventName, listener, options);\n    };\n  }, [eventName, element, options]);\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that subscribes to browser events",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-event-listener"
      }
    ],
    "href": "/questions/javascript/use-event-listener",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "use-event-listener",
    "subtitle": null,
    "title": "useEventListener",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @template T\n *\n * @param {string} eventName\n * @param {(event) => void} handler\n * @param {import(\"react\").RefObject<T> | undefined} [element]\n * @param {boolean | AddEventListenerOptions | undefined} [options]\n */\nexport default function useEventListener(eventName, handler, element, options) {\n  throw 'Not implemented';\n}",
    "ts": "import { RefObject } from 'react';\n\nexport default function useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n  KM extends keyof MediaQueryListEventMap,\n  T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n  eventName: KW | KH | KM,\n  handler: (\n    event:\n      | WindowEventMap[KW]\n      | HTMLElementEventMap[KH]\n      | SVGElementEventMap[KH]\n      | MediaQueryListEventMap[KM]\n      | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var v=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var M=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),L=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!h.call(t,o)&&o!==r&&s(t,o,{get:()=>e[o],enumerable:!(a=u(e,o))||a.enumerable});return t};var x=(t,e,r)=>(r=t!=null?v(p(t)):{},i(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),H=t=>i(s({},\"__esModule\",{value:!0}),t);var l=M((T,d)=>{d.exports=_jsx_runtime});var j={};L(j,{default:()=>K});var n=x(l());var c=MDXCodeBlock;var m=`import { RefObject, useEffect, useRef } from 'react';\n\nexport default function useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n  KM extends keyof MediaQueryListEventMap,\n  T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n  eventName: KW | KH | KM,\n  handler: (\n    event:\n      | WindowEventMap[KW]\n      | HTMLElementEventMap[KH]\n      | SVGElementEventMap[KH]\n      | MediaQueryListEventMap[KM]\n      | Event,\n  ) => void,\n  element?: RefObject<T>,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const latestHandler = useRef(handler);\n  latestHandler.current = handler;\n\n  useEffect(() => {\n    const targetElement: T | Window = element?.current ?? window;\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    }\n\n    const listener: typeof handler = (event) => {\n      latestHandler.current(event);\n    };\n\n    targetElement.addEventListener(eventName, listener, options);\n\n    return () => {\n      targetElement.removeEventListener(eventName, listener, options);\n    };\n  }, [eventName, element, options]);\n}\n`;function E(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useEventListener\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" to attach and detach event listeners to the target element with \",(0,n.jsx)(e.code,{children:\"addEventListener\"}),\" and \",(0,n.jsx)(e.code,{children:\"removeEventListener\"}),\", respectively.\"]}),`\n`,(0,n.jsx)(c,{children:m})]})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(E,t)})):E(t)}var K=y;return H(j);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-event-listener.ts",
    "run": "/src/use-event-listener.run.test.ts",
    "submit": "/src/use-event-listener.submit.test.tsx"
  }
}