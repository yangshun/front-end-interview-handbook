{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-cycle\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-cycle.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-cycle.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useCycle from './use-cycle';\n\ndescribe('useCycle', () => {\n  test('return values', () => {\n    const modes = ['low', 'medium', 'high'];\n    const { result } = renderHook(() => useCycle(...modes));\n\n    expect(result.current[0]).toBe(modes[0]);\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('cycle', () => {\n    const modes = ['low', 'medium', 'high'];\n    const { result } = renderHook(() => useCycle(...modes));\n\n    act(() => {\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(modes[1]);\n  });\n});\n",
    "/src/use-cycle.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useCycle from './use-cycle';\n\ndescribe('useCycle', () => {\n  test('return values', () => {\n    const modes = ['low', 'medium', 'high'];\n    const { result } = renderHook(() => useCycle(...modes));\n\n    expect(result.current[0]).toBe(modes[0]);\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('cycle', () => {\n    const modes = ['low', 'medium', 'high'];\n    const { result } = renderHook(() => useCycle(...modes));\n\n    act(() => {\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(modes[1]);\n  });\n\n  test('cycle should reset to first element', () => {\n    const modes = ['low', 'medium', 'high'];\n    const { result } = renderHook(() => useCycle(...modes));\n\n    act(() => {\n      result.current[1]();\n      result.current[1]();\n      result.current[1]();\n    });\n\n    expect(result.current[0]).toBe(modes[0]);\n  });\n});\n",
    "/src/use-cycle.ts": "import { useCallback, useState } from 'react';\n\nexport default function useCycle<T>(...args: T[]) {\n  const [index, setIndex] = useState(0);\n\n  const cycle = useCallback(() => {\n    setIndex((index) => (index + 1) % args.length);\n  }, []);\n\n  return [args[index], cycle] as const;\n}\n"
  },
  "skeleton": {
    "js": "export default function useCycle(...args) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useCycle<T>(...args: T[]) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-cycle.ts",
    "run": "/src/use-cycle.run.test.ts",
    "submit": "/src/use-cycle.submit.test.ts"
  }
}