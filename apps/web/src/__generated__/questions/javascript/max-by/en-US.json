{
  "description": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var s=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},l=(r,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!p.call(r,i)&&i!==t&&c(r,i,{get:()=>e[i],enumerable:!(d=s(e,i))||d.enumerable});return r};var y=(r,e,t)=>(t=r!=null?m(x(r)):{},l(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),j=r=>l(c({},\"__esModule\",{value:!0}),r);var o=f((T,a)=>{a.exports=_jsx_runtime});var w={};g(w,{default:()=>v,frontmatter:()=>_});var n=y(o()),_={title:\"Max By\",excerpt:\"Implement a function that finds the maximum element based on the specified criteria\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"maxBy(array, iteratee)\"}),\" that finds the element inside \",(0,n.jsx)(e.code,{children:\"array\"}),\" with the maximum value after going through \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\". The \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" is invoked with one argument: (value).\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to iterate over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The iteratee invoked per element.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(*)\"})}),\": Returns the maximum value.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`maxBy([{ n: 1 }, { n: 2 }], (o) => o.n); // => { n: 2 }\n\nmaxBy([1, 2], (o) => -o); // => 1\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should ignore elements where \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" produces \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`maxBy([{ n: 1 }, { n: 2 }], (o) => o.m); // => undefined\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#maxBy\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.maxBy\"})]})}),`\n`]})]})}function B(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var v=B;return j(w);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/max-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/max-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/max-by.run.test.ts": "import maxBy from './max-by';\n\ndescribe('maxBy', () => {\n  test('empty array', () => {\n    expect(maxBy([], (o: any) => o.m)).toEqual(undefined);\n  });\n\n  test('no matching value', () => {\n    expect(maxBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual(undefined);\n  });\n\n  test('regular test case', () => {\n    expect(\n      maxBy([{ n: 1 }, { n: 2 }], function (o: any) {\n        return o.n;\n      }),\n    ).toEqual({ n: 2 });\n  });\n});\n",
    "/src/max-by.submit.test.ts": "import maxBy from './max-by';\n\ndescribe('maxBy', () => {\n  test('empty input array', () => {\n    expect(maxBy([], (o: any) => o.n)).toEqual(undefined);\n  });\n\n  test('nested arrays', () => {\n    expect(maxBy([{ n: 1 }, { n: 2 }], (o: any) => o.n)).toEqual({ n: 2 });\n    expect(\n      maxBy(\n        [{ data: { score: 10 } }, { data: { score: 20 } }],\n        (o: any) => o.data.score,\n      ),\n    ).toEqual({ data: { score: 20 } });\n  });\n\n  test('strings comparison', () => {\n    expect(\n      maxBy(['apple', 'pear', 'banana'], (fruit: string) => fruit.length),\n    ).toEqual('banana');\n  });\n\n  test('non-existent property', () => {\n    expect(maxBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual(undefined);\n  });\n\n  test('mixed data types', () => {\n    expect(maxBy([1, '2', 3], (item: any) => Number(item))).toEqual(3);\n  });\n\n  test('null or undefined property values', () => {\n    expect(\n      maxBy([{ n: null }, { n: 10 }, { n: undefined }], (o: any) => o.n),\n    ).toEqual({ n: 10 });\n    expect(\n      maxBy([{ n: undefined }, { n: undefined }], (o: any) => o.n),\n    ).toEqual(undefined);\n  });\n\n  test('iterator function returns non-numeric values', () => {\n    expect(\n      maxBy(\n        [{ name: 'Alice' }, { name: 'Bob' }, { name: 'Charlie' }],\n        (o: any) => o.name,\n      ),\n    ).toEqual({ name: 'Charlie' });\n    expect(\n      maxBy([{ flag: true }, { flag: false }], (o: any) => o.flag),\n    ).toEqual({\n      flag: true,\n    });\n  });\n\n  test('objects with nested arrays', () => {\n    expect(\n      maxBy([{ values: [1, 2, 3] }, { values: [4, 5, 6] }], (o: any) =>\n        Math.max(...o.values),\n      ),\n    ).toEqual({ values: [4, 5, 6] });\n  });\n\n  test('date comparison', () => {\n    const dates = [\n      new Date(2020, 1, 1),\n      new Date(2021, 1, 1),\n      new Date(2019, 1, 1),\n    ];\n    expect(maxBy(dates, (date: Date) => date)).toEqual(new Date(2021, 1, 1));\n  });\n\n  test('mixed object types', () => {\n    expect(\n      maxBy(\n        [{ n: 5 }, { m: 'string' }, { n: 10, m: 'string' }],\n        (o: any) => o.n || 0,\n      ),\n    ).toEqual({ n: 10, m: 'string' });\n  });\n\n  test('large arrays', () => {\n    const largeArray = Array.from({ length: 10000 }, (_, i) => ({ n: i }));\n    expect(maxBy(largeArray, (o: any) => o.n)).toEqual({ n: 9999 });\n  });\n\n  test('iterator function with computation', () => {\n    expect(\n      maxBy(\n        [{ values: [1, 2, 3] }, { values: [10, 20] }, { values: [5, 5, 5, 5] }],\n        (o: any) => o.values.reduce((sum: any, v: any) => sum + v, 0),\n      ),\n    ).toEqual({ values: [10, 20] });\n  });\n});\n",
    "/src/max-by.ts": "export default function maxBy(array: Array<any>, iteratee: Function): any {\n  let result: any, computed: any;\n\n  // Iterate through array to find the maximum `result`.\n  for (const value of array) {\n    const current: any = iteratee(value);\n    // Check whether `computed` is assigned any value yet then compare with `current`, else assign an initial value to `computed` where `current` is not `null`.\n    if (current != null && (computed === undefined || current > computed)) {\n      computed = current; // Store the calculated value of the current `result`.\n      result = value;\n    }\n  }\n  return result;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1710720000,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function that finds the maximum element based on the specified criteria",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/max-by",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "group-by",
      "min-by"
    ],
    "slug": "max-by",
    "subtitle": null,
    "title": "Max By",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n */\nexport default function maxBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function maxBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => any,\n): any {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var u=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var n in e)u(r,n,{get:e[n],enumerable:!0})},c=(r,e,n,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!x.call(r,a)&&a!==n&&u(r,a,{get:()=>e[a],enumerable:!(o=y(e,a))||o.enumerable});return r};var k=(r,e,n)=>(n=r!=null?p(v(r)):{},c(e||!r||!r.__esModule?u(n,\"default\",{value:r,enumerable:!0}):n,r)),B=r=>c(u({},\"__esModule\",{value:!0}),r);var i=g((M,l)=>{l.exports=_jsx_runtime});var C={};w(C,{default:()=>T});var t=k(i());var d=MDXCodeBlock;var h=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n */\nexport default function maxBy(array, iteratee) {\n  let result, computed;\n\n  // Iterate through array to find the maximum \\`result\\`.\n  for (const value of array) {\n    const current = iteratee(value);\n    // Check whether \\`computed\\` is assigned any value yet then compare with \\`current\\`, else assign an initial value to \\`computed\\` where \\`current\\` is not \\`null\\`.\n    if (current != null && (computed === undefined || current > computed)) {\n      computed = current; // Store the calculated value of the current \\`result\\`.\n      result = value;\n    }\n  }\n  return result;\n}\n`;var s=\"export default function maxBy(array: Array<any>, iteratee: Function): any {\\n  let result: any, computed: any;\\n\\n  // Iterate through array to find the maximum `result`.\\n  for (const value of array) {\\n    const current: any = iteratee(value);\\n    // Check whether `computed` is assigned any value yet then compare with `current`, else assign an initial value to `computed` where `current` is not `null`.\\n    if (current != null && (computed === undefined || current > computed)) {\\n      computed = current; // Store the calculated value of the current `result`.\\n      result = value;\\n    }\\n  }\\n  return result;\\n}\\n\";function m(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here's a solution that finds the maximum element in \",(0,t.jsx)(e.code,{children:\"array\"}),\" based on a given \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\". It iterates through the \",(0,t.jsx)(e.code,{children:\"array\"}),\", calls the \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\" function with the array element, and tracks the element that produces the maximum value.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Two variables are used:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"result\"}),\": Tracks the maximum element to return.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"computed\"}),\": Tracks the computed value of the current maximum element which will be used to compare with the computed values of subsequent elements.\"]}),`\n`]}),`\n`,(0,t.jsx)(d,{languages:{jsx:h,tsx:s}}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Because \",(0,t.jsx)(e.code,{children:\"iteratee\"}),\" is user-provided and can return a value of any type, we have to pay special attention to ignore computed values that cannot be compared, like \",(0,t.jsx)(e.code,{children:\"null\"}),\" and \",(0,t.jsx)(e.code,{children:\"undefined\"}),\". For such computed values, they should be ignored entirely.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The function should also return the first occurrence of the element that produces the maximum computed value, even though many elements in the array can produce the same maximum computed value.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#maxBy\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.maxBy\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(m,r)})):m(r)}var T=_;return B(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/max-by.ts",
    "run": "/src/max-by.run.test.ts",
    "submit": "/src/max-by.submit.test.ts"
  }
}