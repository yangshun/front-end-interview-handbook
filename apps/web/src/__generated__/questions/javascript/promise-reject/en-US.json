{
  "description": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var c in e)o(r,c,{get:e[c],enumerable:!0})},s=(r,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!u.call(r,t)&&t!==c&&o(r,t,{get:()=>e[t],enumerable:!(i=m(e,t))||i.enumerable});return r};var x=(r,e,c)=>(c=r!=null?h(j(r)):{},s(e||!r||!r.__esModule?o(c,\"default\",{value:r,enumerable:!0}):c,r)),P=r=>s(o({},\"__esModule\",{value:!0}),r);var d=b((M,a)=>{a.exports=_jsx_runtime});var _={};f(_,{default:()=>y,frontmatter:()=>g});var n=x(d()),g={title:\"Promise.reject\",excerpt:\"Implement a function to return a Promise object rejected with a reason\"};function l(r){let e=Object.assign({blockquote:\"blockquote\",p:\"p\",code:\"code\",em:\"em\",a:\"a\",h2:\"h2\",pre:\"pre\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Promise.reject()\"}),\" static method returns a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" object that is rejected with a given reason.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[\"Source: \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\",children:\"Promise.reject() - JavaScript | MDN\"})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Unlike \",(0,n.jsx)(e.code,{children:\"Promise.resolve()\"}),\", \",(0,n.jsx)(e.code,{children:\"Promise.reject()\"}),\" always wraps \",(0,n.jsx)(e.code,{children:\"reason\"}),\" in a new \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" object, even when \",(0,n.jsx)(e.code,{children:\"reason\"}),\" is already a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Implement the \",(0,n.jsx)(e.code,{children:\"Promise.reject()\"}),\" function as \",(0,n.jsx)(e.code,{children:\"promiseReject\"}),\". You can ignore the case where \",(0,n.jsx)(e.code,{children:\"this\"}),\" is referenced within the implemented function.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`try {\n  promiseReject('Mayday!');\n} catch (err) {\n  console.log(err); // Mayday!\n}\n`})})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var y=w;return P(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/promise-reject\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/promise-reject.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/promise-reject.run.test.ts": "import promiseReject from './promise-reject';\n\ndescribe('promiseReject', () => {\n  test('returns promise', async () => {\n    expect.assertions(1);\n    try {\n      const p = promiseReject(1);\n      expect(p).toBeInstanceOf(Promise);\n      await p;\n    } catch {}\n  });\n\n  test('rejects', async () => {\n    const p = promiseReject(42);\n    expect(p).rejects.toBe(42);\n  });\n\n  test('argument is promise', async () => {\n    expect.assertions(1);\n    try {\n      const p = promiseReject(new Promise((resolve) => resolve(42)));\n      expect(p).toBeInstanceOf(Promise);\n      await p;\n    } catch {}\n  });\n});\n",
    "/src/promise-reject.submit.test.ts": "import promiseReject from './promise-reject';\n\ndescribe('promiseReject', () => {\n  describe('non-promise', () => {\n    test('returns promise', async () => {\n      expect.assertions(1);\n      try {\n        const p = promiseReject(1);\n        expect(p).toBeInstanceOf(Promise);\n        await p;\n      } catch {}\n    });\n\n    test('rejects', async () => {\n      const p = promiseReject(42);\n      expect(p).rejects.toBe(42);\n    });\n  });\n\n  describe('promise', () => {\n    test('returns promise', async () => {\n      expect.assertions(1);\n      try {\n        const p = promiseReject(new Promise((resolve) => resolve(42)));\n        expect(p).toBeInstanceOf(Promise);\n        await p;\n      } catch {}\n    });\n\n    test('returns different promise instance', async () => {\n      expect.assertions(1);\n      try {\n        const reason = new Promise((resolve) => resolve(42));\n        const p = promiseReject(reason);\n        expect(p).not.toBe(reason);\n        await p;\n      } catch {}\n    });\n\n    test('rejects', async () => {\n      const p = promiseReject(42);\n      expect(p).rejects.toBe(42);\n    });\n\n    test('use with catch', (done) => {\n      expect.assertions(1);\n      const p = promiseReject(42);\n      p.catch((err) => {\n        expect(err).toBe(42);\n        done();\n      });\n    });\n  });\n\n  test('use with Promise.all()', async () => {\n    const p0 = promiseReject(3);\n    const p1 = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve('foo');\n      }, 100);\n    });\n\n    expect(Promise.all([p0, p1])).rejects.toBe(3);\n  });\n\n  test('use with Promise.allSettled()', async () => {\n    const p0 = promiseReject(2);\n    const p1 = promiseReject(3);\n\n    const res = await Promise.allSettled([p0, p1]);\n    expect(res).toEqual([\n      {\n        status: 'rejected',\n        reason: 2,\n      },\n      {\n        status: 'rejected',\n        reason: 3,\n      },\n    ]);\n  });\n\n  test('use with Promise.any()', async () => {\n    expect.assertions(2);\n    const p0 = promiseReject(2);\n\n    try {\n      await Promise.any([p0]);\n    } catch (err: any) {\n      expect(err).toBeInstanceOf(AggregateError);\n      expect(err.errors).toEqual([2]);\n    }\n  });\n\n  test('use with Promise.race()', async () => {\n    const p0 = promiseReject(2);\n    const p1 = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(3);\n      }, 10);\n    });\n\n    expect(Promise.race([p0, p1])).rejects.toBe(2);\n  });\n});\n",
    "/src/promise-reject.ts": "export default function promiseReject<T = never>(reason: any): Promise<T> {\n  return new Promise((_, reject) => reject(reason));\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [
      "google",
      "bytedance"
    ],
    "created": 1690329600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a function to return a Promise object rejected with a reason",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/promise-reject",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "promise-with-resolvers"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "promise-resolve",
      "promise-timeout"
    ],
    "slug": "promise-reject",
    "subtitle": null,
    "title": "Promise.reject",
    "topics": [
      "async"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {*} reason\n * @returns Promise\n */\nexport default function promiseReject(reason) {\n  throw 'Not implemented';\n}",
    "ts": "export default function promiseReject<T = never>(reason: any): Promise<T> {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var _=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var o in e)s(r,o,{get:e[o],enumerable:!0})},i=(r,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of f(e))!P.call(r,t)&&t!==o&&s(r,t,{get:()=>e[t],enumerable:!(c=p(e,t))||c.enumerable});return r};var g=(r,e,o)=>(o=r!=null?u(x(r)):{},i(e||!r||!r.__esModule?s(o,\"default\",{value:r,enumerable:!0}):o,r)),y=r=>i(s({},\"__esModule\",{value:!0}),r);var d=_((X,a)=>{a.exports=_jsx_runtime});var R={};w(R,{default:()=>D});var n=g(d());var m=MDXCodeBlock;var l=`/**\n * @param {*} reason\n * @returns Promise\n */\nexport default function promiseReject(reason) {\n  return new Promise((_, reject) => reject(reason));\n}\n`;var h=`export default function promiseReject<T = never>(reason: any): Promise<T> {\n  return new Promise((_, reject) => reject(reason));\n}\n`;function j(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Promise.reject\"}),\" returns a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" that is rejected. It is essentially a shorthand for \",(0,n.jsx)(e.code,{children:\"new Promise((resolve, reject) => reject(reason))\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The only thing we need to note is to wrap the \",(0,n.jsx)(e.code,{children:\"reason\"}),\" value in a new \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" object even when \",(0,n.jsx)(e.code,{children:\"reason\"}),\" is already a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\".\"]}),`\n`,(0,n.jsx)(m,{languages:{jsx:l,tsx:h}})]})}function C(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(j,r)})):j(r)}var D=C;return y(R);})();\n;return Component;",
  "workspace": {
    "main": "/src/promise-reject.ts",
    "run": "/src/promise-reject.run.test.ts",
    "submit": "/src/promise-reject.submit.test.ts"
  }
}