{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/singleton\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/singleton.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/singleton.run.test.ts": "import Singleton from './singleton';\nimport Singleton2 from './singleton';\n\ndescribe('singleton', () => {\n  test('returns an object with the required method', () => {\n    expect(Singleton).toBeInstanceOf(Object);\n    expect(Singleton.getInstance).toBeInstanceOf(Function);\n  });\n\n  describe('instance', () => {\n    test('getInstance returns a Map', () => {\n      expect(Singleton.getInstance()).toBeInstanceOf(Map);\n    });\n\n    test('Map methods work', () => {\n      const globalMap = Singleton.getInstance();\n      globalMap.set('count', 42);\n      expect(globalMap.get('count')).toBe(42);\n    });\n\n    test('separate modules use the same instance', () => {\n      const globalMap = Singleton.getInstance();\n      globalMap.set('count', 42);\n\n      const globalMap2 = Singleton2.getInstance();\n      expect(globalMap2.get('count')).toBe(42);\n    });\n  });\n});\n",
    "/src/singleton.submit.test.ts": "import Singleton from './singleton';\nimport Singleton2 from './singleton';\n\ndescribe('singleton', () => {\n  test('returns an object with the required method', () => {\n    expect(Singleton).toBeInstanceOf(Object);\n    expect(Singleton.getInstance).toBeInstanceOf(Function);\n  });\n\n  describe('instance', () => {\n    test('getInstance returns a Map', () => {\n      expect(Singleton.getInstance()).toBeInstanceOf(Map);\n    });\n\n    test('Map methods work', () => {\n      const globalMap = Singleton.getInstance();\n      globalMap.set('count', 42);\n      expect(globalMap.get('count')).toBe(42);\n    });\n\n    test('separate modules use the same instance', () => {\n      const globalMap = Singleton.getInstance();\n      globalMap.set('count', 42);\n\n      const globalMap2 = Singleton2.getInstance();\n      expect(globalMap2.get('count')).toBe(42);\n    });\n  });\n});\n",
    "/src/singleton.ts": "const globalMap = new Map();\n\nexport default {\n  getInstance() {\n    return globalMap;\n  },\n};\n"
  },
  "skeleton": {
    "js": "// No skeleton is provided. Export an object that has a single `getInstance()` method.",
    "ts": "// No skeleton is provided. Export an object that has a single `getInstance()` method."
  },
  "workspace": {
    "main": "/src/singleton.ts",
    "run": "/src/singleton.run.test.ts",
    "submit": "/src/singleton.submit.test.ts"
  }
}