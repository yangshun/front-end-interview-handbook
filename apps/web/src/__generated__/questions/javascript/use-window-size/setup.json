{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-window-size\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-window-size.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-window-size.run.test.ts": "import { renderHook } from '@testing-library/react';\n\nimport useWindowSize from './use-window-size';\n\ndescribe('useWindowSize', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useWindowSize());\n\n    expect(typeof result.current).toBe('object');\n    expect(typeof result.current.width).toBe('number');\n    expect(typeof result.current.height).toBe('number');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useWindowSize());\n\n    expect(result.current.width).toBe(window.innerWidth);\n    expect(result.current.height).toBe(window.innerHeight);\n  });\n});\n",
    "/src/use-window-size.submit.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useWindowSize from './use-window-size';\n\ndescribe('useWindowSize', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useWindowSize());\n\n    expect(typeof result.current).toBe('object');\n    expect(typeof result.current.width).toBe('number');\n    expect(typeof result.current.height).toBe('number');\n  });\n\n  test('initial value', () => {\n    const { result } = renderHook(() => useWindowSize());\n\n    expect(result.current.width).toBe(window.innerWidth);\n    expect(result.current.height).toBe(window.innerHeight);\n  });\n\n  test('resize', () => {\n    const { result } = renderHook(() => useWindowSize());\n\n    act(() => {\n      window.innerWidth = 100;\n      window.innerHeight = 200;\n      fireEvent.resize(window);\n    });\n\n    expect(result.current.width).toBe(100);\n    expect(result.current.height).toBe(200);\n  });\n});\n",
    "/src/use-window-size.ts": "import { useState, useLayoutEffect } from 'react';\n\ninterface WindowSize {\n  height: number;\n  width: number;\n}\n\nexport default function useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    height: 0,\n    width: 0,\n  });\n\n  useLayoutEffect(() => {\n    const resize = () =>\n      setWindowSize({\n        height: window.innerHeight,\n        width: window.innerWidth,\n      });\n\n    resize();\n    window.addEventListener('resize', resize);\n\n    return () => {\n      window.removeEventListener('resize', resize);\n    };\n  }, []);\n\n  return windowSize;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @typedef {Object} WindowSize\n * @property {number} height\n * @property {number} width\n */\n/**\n * @returns {WindowSize}\n */\nexport default function useWindowSize() {\n  throw 'Not implemented';\n}",
    "ts": "interface WindowSize {\n  height: number;\n  width: number;\n}\n\nexport default function useWindowSize(): WindowSize {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-window-size.ts",
    "run": "/src/use-window-size.run.test.ts",
    "submit": "/src/use-window-size.submit.test.ts"
  }
}