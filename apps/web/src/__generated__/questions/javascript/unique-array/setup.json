{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/unique-array\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/unique-array.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/unique-array.run.test.ts": "import uniqueArray from './unique-array';\n\ndescribe('uniqueArray', () => {\n  test('empty array', () => {\n    expect(uniqueArray([])).toEqual([]);\n  });\n\n  test('one value', () => {\n    expect(uniqueArray([0])).toEqual([0]);\n  });\n\n  test('different values', () => {\n    expect(uniqueArray([2, 3])).toEqual([2, 3]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqueArray([2, 1, 2])).toEqual([2, 1]);\n  });\n});\n",
    "/src/unique-array.submit.test.ts": "import uniqueArray from './unique-array';\n\ndescribe('uniqueArray', () => {\n  test('empty array', () => {\n    expect(uniqueArray([])).toEqual([]);\n  });\n\n  test('one value', () => {\n    expect(uniqueArray([0])).toEqual([0]);\n  });\n\n  test('different values', () => {\n    expect(uniqueArray([2, 3])).toEqual([2, 3]);\n    expect(uniqueArray([0, 1, 2, 3])).toEqual([0, 1, 2, 3]);\n  });\n\n  test('duplicate values', () => {\n    expect(uniqueArray([2, 1, 2])).toEqual([2, 1]);\n    expect(uniqueArray([2, 2, 1])).toEqual([2, 1]);\n    expect(uniqueArray([2, 1, 2, 3])).toEqual([2, 1, 3]);\n  });\n\n  test('string values', () => {\n    expect(uniqueArray(['foo', 'bar', 'foo'])).toEqual(['foo', 'bar']);\n    expect(uniqueArray(['foo', 'bar', 'bar', 'foo'])).toEqual(['foo', 'bar']);\n    expect(uniqueArray(['1', '2', '2', '3'])).toEqual(['1', '2', '3']);\n  });\n\n  test('boolean values', () => {\n    expect(uniqueArray([false])).toEqual([false]);\n    expect(uniqueArray([false, true])).toEqual([false, true]);\n    expect(uniqueArray([true, false, true])).toEqual([true, false]);\n    expect(uniqueArray([true, true, false])).toEqual([true, false]);\n  });\n\n  test('null-ish values', () => {\n    expect(uniqueArray([null])).toEqual([null]);\n    expect(uniqueArray([null, null])).toEqual([null]);\n    expect(uniqueArray([null, undefined])).toEqual([null, undefined]);\n    expect(uniqueArray([null, undefined, null])).toEqual([null, undefined]);\n    expect(uniqueArray([null, null, undefined])).toEqual([null, undefined]);\n  });\n\n  test('mixed values', () => {\n    expect(uniqueArray([2, 1, '2', '1'])).toEqual([2, 1, '2', '1']);\n    expect(uniqueArray(['2', 2, 2, 1, 1, '2', '1'])).toEqual(['2', 2, 1, '1']);\n    expect(uniqueArray([true, 'true', true])).toEqual([true, 'true']);\n  });\n});\n",
    "/src/unique-array.ts": "export default function uniqueArray<T extends ReadonlyArray<unknown>>(\n  array: T,\n): Array<T[number]> {\n  return Array.from(new Set(array));\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array\n * @return {Array}\n */\nexport default function uniqueArray(array) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function uniqueArray<T extends ReadonlyArray<unknown>>(\n  array: T,\n): Array<T[number]> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/unique-array.ts",
    "run": "/src/unique-array.run.test.ts",
    "submit": "/src/unique-array.submit.test.ts"
  }
}