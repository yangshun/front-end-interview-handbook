{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/in-range\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/in-range.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/in-range.run.test.ts": "import inRange from './in-range';\n\ndescribe('inRange', () => {\n  test('both `start` and `end` specified', () => {\n    expect(inRange(1, 1, 5)).toBe(true);\n    expect(inRange(0, 1, 5)).toBe(false);\n  });\n\n  test('only 2 arguments specified', () => {\n    expect(inRange(3, 5)).toBe(true);\n    expect(inRange(6, 5)).toBe(false);\n  });\n\n  test('swap `start` and `end` when `start` > `end`', () => {\n    expect(inRange(2, 5, 1)).toBe(true);\n    expect(inRange(-3, -2, -6)).toBe(true);\n  });\n});\n",
    "/src/in-range.submit.test.ts": "import inRange from './in-range';\n\ndescribe('inRange', () => {\n  test('both `start` and `end` specified', () => {\n    expect(inRange(1, 1, 5)).toBe(true);\n    expect(inRange(3, 1, 5)).toBe(true);\n    expect(inRange(0, 1, 5)).toBe(false);\n    expect(inRange(5, 1, 5)).toBe(false);\n  });\n\n  test('differently signed `start` and positive `end`', () => {\n    expect(inRange(-1, -2, 5)).toBe(true);\n    expect(inRange(5, -2, 5)).toBe(false);\n    expect(inRange(-1, 5, -2)).toBe(true);\n  });\n\n  test('only 2 arguments specified', () => {\n    expect(inRange(3, 5)).toBe(true);\n    expect(inRange(5, 5)).toBe(false);\n    expect(inRange(6, 5)).toBe(false);\n  });\n\n  test('swap `start` and `end` when `start` > `end`', () => {\n    expect(inRange(2, 5, 1)).toBe(true);\n    expect(inRange(-3, -2, -6)).toBe(true);\n  });\n\n  test('floating point value', () => {\n    expect(inRange(0.5, 5)).toBe(true);\n    expect(inRange(1.2, 1, 5)).toBe(true);\n    expect(inRange(5.2, 5)).toBe(false);\n    expect(inRange(0.5, 1, 5)).toBe(false);\n    expect(inRange(-4.5, -2, -6)).toBe(true);\n  });\n});\n",
    "/src/in-range.ts": "export default function inRange(\n  value: number,\n  startParam: number,\n  endParam?: number,\n): boolean {\n  let start = startParam;\n  let end = endParam;\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  }\n\n  if (start < end) {\n    return value >= start && value < end;\n  }\n\n  return value >= end && value < start;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} value The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nexport default function inRange(value, start, end) {\n  throw 'Not implemented';\n}",
    "ts": "export default function inRange(\n  value: number,\n  start: number,\n  end?: number,\n): boolean {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/in-range.ts",
    "run": "/src/in-range.run.test.ts",
    "submit": "/src/in-range.submit.test.ts"
  }
}