{
  "description": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var l in e)s(n,l,{get:e[l],enumerable:!0})},o=(n,e,l,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!p.call(n,r)&&r!==l&&s(n,r,{get:()=>e[r],enumerable:!(a=m(e,r))||a.enumerable});return n};var y=(n,e,l)=>(l=n!=null?h(u(n)):{},o(e||!n||!n.__esModule?s(l,\"default\",{value:n,enumerable:!0}):l,n)),C=n=>o(s({},\"__esModule\",{value:!0}),n);var c=g((O,d)=>{d.exports=_jsx_runtime});var k={};f(k,{default:()=>D,frontmatter:()=>v});var t=y(c()),v={title:\"jQuery Class Manipulation\",excerpt:\"Implement a set of jQuery-like functions that manipulates classes on a DOM element\"};function i(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",code:\"code\",pre:\"pre\",h2:\"h2\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" If you haven't completed the \",(0,t.jsx)(e.a,{href:\"/questions/javascript/jquery-css\",children:(0,t.jsx)(e.code,{children:\"jQuery.css\"})}),\" question, you should attempt that first.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Before \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\",children:(0,t.jsx)(e.code,{children:\"Element.classList\"})}),\" and \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\",children:(0,t.jsx)(e.code,{children:\"DOMTokenList\"})}),\" were part of the browser standards, it was a hassle to manipulate classes on a DOM element.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://jquery.com/\",children:\"jQuery\"}),\" is a library that simplifies DOM manipulation (among other things). jQuery (using the \",(0,t.jsx)(e.code,{children:\"$\"}),\" alias function), provided convenient APIs to toggle, add, and remove classes from elements via \",(0,t.jsx)(e.code,{children:\".toggleClass()\"}),\", \",(0,t.jsx)(e.code,{children:\".addClass()\"}),\" and \",(0,t.jsx)(e.code,{children:\".removeClass()\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// <button class=\"foo bar\">Click me</button>\n$('button').toggleClass('bar'); // <button class=\"foo\">Click me</button>\n$('button').addClass('baz'); // <button class=\"foo baz\">Click me</button>\n$('button').removeClass('foo'); // <button class=\"baz\">Click me</button>\n$('button').toggleClass('bar'); // <button class=\"baz bar\">Click me</button>\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"The return value of most jQuery manipulation APIs is the jQuery object itself so that method calls can be chained. The above can be further simplified again:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// <button class=\"foo bar\">Click me</button>\n$('button')\n  .toggleClass('bar')\n  .addClass('baz')\n  .removeClass('foo')\n  .toggleClass('bar');\n// <button class=\"baz bar\">Click me</button>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement the \",(0,t.jsx)(e.code,{children:\"toggleClass()\"}),\", \",(0,t.jsx)(e.code,{children:\"addClass()\"}),\" and \",(0,t.jsx)(e.code,{children:\"removeClass()\"}),\" methods according to the following specifications. Do not use \",(0,t.jsx)(e.code,{children:\"Element.classList\"}),\" and methods to manipulate \",(0,t.jsx)(e.code,{children:\"DOMTokenList\"}),\" otherwise the problem becomes quite trivial.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": The official jQuery library selects all matched elements and modified all matched elements. However, for this question we can assume there will only be a maximum of one element matching the selector.\"]}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"toggleClass(className, state)\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Add or remove one or more classes from the matched element, depending on either the class's presence or the value of the state argument.\"}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Parameter\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"className\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"string\"})}),(0,t.jsx)(e.td,{children:\"One or more classes (separated by spaces) to be toggled for the matched element.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"state\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"boolean\"})}),(0,t.jsx)(e.td,{children:\"An optional boolean value to determine whether the class(es) should be added or removed.\"})]})]})]}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"addClass(className)\"})}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Parameter\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsx)(e.tbody,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"className\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"string\"})}),(0,t.jsx)(e.td,{children:\"One or more classes (separated by spaces) to be added to the matched element.\"})]})})]}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"removeClass(className)\"})}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Parameter\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsx)(e.tbody,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"className\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"string\"})}),(0,t.jsx)(e.td,{children:\"One or more classes (separated by spaces) to be removed from the matched element.\"})]})})]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(i,n)})):i(n)}var D=j;return C(k);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a set of jQuery-like functions that manipulates classes on a DOM element",
    "title": "jQuery Class Manipulation"
  },
  "solution": "var Component=(()=>{var g=Object.create;var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var n in e)l(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of N(e))!y.call(t,a)&&a!==n&&l(t,a,{get:()=>e[a],enumerable:!(r=p(e,a))||r.enumerable});return t};var v=(t,e,n)=>(n=t!=null?g(C(t)):{},o(e||!t||!t.__esModule?l(n,\"default\",{value:t,enumerable:!0}):n,t)),S=t=>o(l({},\"__esModule\",{value:!0}),t);var h=j((_,i)=>{i.exports=_jsx_runtime});var q={};b(q,{default:()=>k});var s=v(h());var c=MDXCodeBlock;var d=`/**\n * @param {string} className\n * @return {Set<string>}\n */\nfunction classNameTokenSet(className) {\n  return new Set(className.trim().split(/\\\\s+/));\n}\n\n/**\n * @param {string} selector\n * @return {{toggleClass: Function, addClass: Function, removeClass: Function}}\n */\nexport default function $(selector) {\n  const element = document.querySelector(selector);\n\n  return {\n    /**\n     * @param {string} className\n     * @param {boolean} state\n     * @return {Object|void}\n     */\n    toggleClass: function (className, state) {\n      // No-op if there is no matching element.\n      if (element == null) {\n        return this;\n      }\n\n      const classes = classNameTokenSet(className);\n      const elementClasses = classNameTokenSet(element.className);\n\n      classes.forEach((cls) => {\n        const shouldRemove =\n          state === undefined ? elementClasses.has(cls) : !state;\n        shouldRemove\n          ? elementClasses.delete(cls) // Remove if state is not defined and element contains the class or state is false.\n          : elementClasses.add(cls);\n      });\n\n      element.className = Array.from(elementClasses).join(' ');\n      return this;\n    },\n    /**\n     * @param {string} className\n     * @return {Object}\n     */\n    addClass: function (className) {\n      this.toggleClass(className, true);\n      return this;\n    },\n    /**\n     * @param {string} className\n     * @return {Object}\n     */\n    removeClass: function (className) {\n      this.toggleClass(className, false);\n      return this;\n    },\n  };\n}\n`;var m=`interface JQuery {\n  toggleClass: (className: string, state?: boolean) => JQuery;\n  addClass: (className: string) => JQuery;\n  removeClass: (className: string) => JQuery;\n}\n\nfunction classNameTokenSet(className: string): Set<string> {\n  return new Set(className.trim().split(/\\\\s+/));\n}\n\nexport default function $(selector: string): JQuery {\n  const element = document.querySelector(selector);\n\n  return {\n    toggleClass: function (className: string, state?: boolean): JQuery {\n      // No-op if there is no matching element.\n      if (element == null) {\n        return this;\n      }\n\n      const classes = classNameTokenSet(className);\n      const elementClasses = classNameTokenSet(element.className);\n\n      classes.forEach((cls) => {\n        const shouldRemove =\n          state === undefined ? elementClasses.has(cls) : !state;\n        shouldRemove\n          ? elementClasses.delete(cls) // Remove if state is not defined and element contains the class or state is false.\n          : elementClasses.add(cls);\n      });\n\n      element.className = Array.from(elementClasses).join(' ');\n      return this;\n    },\n    addClass: function (className: string): JQuery {\n      this.toggleClass(className, true);\n      return this;\n    },\n    removeClass: function (className): JQuery {\n      this.toggleClass(className, false);\n      return this;\n    },\n  };\n}\n`;var u=`function classNameTokenSet(className) {\n  return new Set(className.trim().split(/\\\\s+/));\n}\n\nclass jQuery {\n  constructor(selector) {\n    this.element = document.querySelector(selector);\n  }\n\n  toggleClass(className, state) {\n    // No-op if there is no matching element.\n    if (this.element == null) {\n      return undefined;\n    }\n\n    const classes = classNameTokenSet(className);\n    const elementClasses = classNameTokenSet(this.element.className);\n\n    classes.forEach((cls) => {\n      const shouldRemove =\n        state === undefined ? elementClasses.has(cls) : !state;\n      shouldRemove\n        ? elementClasses.delete(cls) // Remove if state is not defined and element contains the class or state is false.\n        : elementClasses.add(cls);\n    });\n\n    this.element.className = Array.from(elementClasses).join(' ');\n    return this;\n  }\n  addClass(className) {\n    this.toggleClass(className, true);\n    return this;\n  }\n  removeClass(className) {\n    this.toggleClass(className, false);\n    return this;\n  }\n}\n\nexport default function $(element) {\n  return new jQuery(element);\n}\n`;function f(t){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",code:\"code\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:\"Note:\"}),\" If you haven't completed the \",(0,s.jsx)(e.a,{href:\"/questions/javascript/jquery-css\",children:(0,s.jsx)(e.code,{children:\"jQuery.css\"})}),\" question, you should attempt that first.\"]}),`\n`,(0,s.jsx)(e.h2,{children:\"Clarification questions\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"What should happen if there are no elements match the selector?\",`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"In jQuery when there are no matched elements, nothing occurs, so we can follow that.\"}),`\n`]}),`\n`]}),`\n`,(0,s.jsxs)(e.li,{children:[\"Can there be duplicate classes in the parameters and on the element?\",`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Yes there can be.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,s.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"Method chaining is not the focus of the question given you just have to return \",(0,s.jsx)(e.code,{children:\"this\"}),\" at the end of every method in the skeleton which already contains the structure of an object-based approach. Hence it's important to have completed the \",(0,s.jsx)(e.a,{href:\"/questions/javascript/jquery-css\",children:(0,s.jsx)(e.code,{children:\"jQuery.css\"})}),\" question first.\"]}),`\n`,(0,s.jsxs)(e.p,{children:[\"The bulk of the complexity is in the \",(0,s.jsx)(e.code,{children:\"toggleClass\"}),\" method. We first need to parse the \",(0,s.jsx)(e.code,{children:\"className\"}),\" parameter and the element's \",(0,s.jsx)(e.code,{children:\"className\"}),\" properties into a set of class strings. Then that's followed by manipulation of the element's class set according to the \",(0,s.jsx)(e.code,{children:\"className\"}),\" input. We iterate through the classes in the \",(0,s.jsx)(e.code,{children:\"className\"}),\" input and depending on whether \",(0,s.jsx)(e.code,{children:\"state\"}),\" is explicitly defined and whether the element's classes contain the input class, add/delete the class from the set.\"]}),`\n`,(0,s.jsxs)(e.p,{children:[\"Lastly, we modify the element's \",(0,s.jsx)(e.code,{children:\"className\"}),\" by concatenating the classes back into a single string.\"]}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:\"addClass\"}),\" and \",(0,s.jsx)(e.code,{children:\"removeClass\"}),\" can be implemented trivially by using \",(0,s.jsx)(e.code,{children:\"toggleClass\"}),\" with \",(0,s.jsx)(e.code,{children:\"state\"}),\" set as \",(0,s.jsx)(e.code,{children:\"true\"}),\" and \",(0,s.jsx)(e.code,{children:\"false\"}),\" respectively.\"]}),`\n`,(0,s.jsx)(c,{languages:{jsx:d,tsx:m}}),`\n`,(0,s.jsx)(e.h2,{children:\"Alternative Solution\"}),`\n`,(0,s.jsx)(e.p,{children:\"An alternative class-based approach can be found below which is a bit longer and overkill.\"}),`\n`,(0,s.jsx)(c,{children:u}),`\n`,(0,s.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"No elements match the selector. We should handle gracefully instead of erroring.\"}),`\n`,(0,s.jsxs)(e.li,{children:[\"The \",(0,s.jsx)(e.code,{children:\"className\"}),\" string can contain duplicate classes.\"]}),`\n`,(0,s.jsxs)(e.li,{children:[\"The \",(0,s.jsx)(e.code,{children:\"className\"}),\" string can contain leading/trailing whitespace and also more than one space character between classes.\"]}),`\n`,(0,s.jsxs)(e.li,{children:[\"The element's \",(0,s.jsx)(e.code,{children:\"className\"}),\" can contain uppercase classes which shouldn't be matched in \",(0,s.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\",children:\"Standards Mode for browsers\"}),\".\"]}),`\n`]}),`\n`,(0,s.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"CSS fundamentals.\"}),`\n`]}),`\n`,(0,s.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"Arrow functions has a lexical scoping to the \",(0,s.jsx)(e.code,{children:\"this\"}),\" context, and should not be used as methods on objects as the \",(0,s.jsx)(e.code,{children:\"this\"}),\" will not be referring to the object. Thus the methods cannot be defined as an arrow function if the return value is an object.\"]}),`\n`]}),`\n`,(0,s.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://api.jquery.com/toggleClass/\",children:\".toggleClass() | jQuery API Documentation\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://api.jquery.com/addClass/\",children:\".addClass() | jQuery API Documentation\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://api.jquery.com/removeClass/\",children:\".removeClass() | jQuery API Documentation\"})}),`\n`]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(f,t)})):f(t)}var k=T;return S(q);})();\n;return Component;"
}