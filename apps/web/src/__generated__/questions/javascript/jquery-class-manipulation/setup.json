{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/jquery-class-manipulation\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/jquery-class-manipulation.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/jquery-class-manipulation.run.test.ts": "import $ from './jquery-class-manipulation';\n\ndescribe('jQuery', () => {\n  beforeEach(() => {\n    document.body.innerHTML = '<button class=\"foo bar baz\">Click me</button>';\n  });\n\n  test('toggleClass', () => {\n    $('button').toggleClass('qux');\n    expect(document.querySelector('button')!.className).toBe('foo bar baz qux');\n  });\n\n  test('addClass', () => {\n    $('button').addClass('qux');\n    expect(document.querySelector('button')!.className).toBe('foo bar baz qux');\n  });\n\n  test('removeClass', () => {\n    $('button').removeClass('bar');\n    expect(document.querySelector('button')!.className).toBe('foo baz');\n  });\n});\n",
    "/src/jquery-class-manipulation.submit.test.ts": "import $ from './jquery-class-manipulation';\n\ndescribe('jQuery', () => {\n  beforeEach(() => {\n    document.body.innerHTML = '<button class=\"foo bar baz\">Click me</button>';\n  });\n\n  describe('toggleClass', () => {\n    describe('one class name', () => {\n      test('add', () => {\n        $('button').toggleClass('qux');\n        expect(document.querySelector('button')!.className).toBe(\n          'foo bar baz qux',\n        );\n      });\n\n      test('remove', () => {\n        $('button').toggleClass('foo');\n        expect(document.querySelector('button')!.className).toBe('bar baz');\n      });\n    });\n\n    describe('multiple class names', () => {\n      test('add', () => {\n        $('button').toggleClass('qux quux');\n        expect(document.querySelector('button')!.className).toBe(\n          'foo bar baz qux quux',\n        );\n      });\n\n      test('remove', () => {\n        $('button').toggleClass('foo baz');\n        expect(document.querySelector('button')!.className).toBe('bar');\n      });\n\n      test('add and remove', () => {\n        $('button').toggleClass('qux foo');\n        expect(document.querySelector('button')!.className).toBe('bar baz qux');\n      });\n    });\n  });\n\n  describe('explicit add', () => {\n    test('one class name', () => {\n      $('button').toggleClass('qux', true);\n      expect(document.querySelector('button')!.className).toBe(\n        'foo bar baz qux',\n      );\n    });\n\n    test('multiple class names', () => {\n      $('button').toggleClass('qux quux', true);\n      expect(document.querySelector('button')!.className).toBe(\n        'foo bar baz qux quux',\n      );\n    });\n\n    test('classes already exist', () => {\n      $('button').toggleClass('foo bar', true);\n      expect(document.querySelector('button')!.className).toBe('foo bar baz');\n    });\n  });\n\n  describe('explicit remove', () => {\n    test('one class name', () => {\n      $('button').toggleClass('bar', false);\n      expect(document.querySelector('button')!.className).toBe('foo baz');\n    });\n\n    test('multiple class names', () => {\n      $('button').toggleClass('bar foo', false);\n      expect(document.querySelector('button')!.className).toBe('baz');\n    });\n\n    test(\"classes don't exist\", () => {\n      $('button').toggleClass('qux quux', false);\n      expect(document.querySelector('button')!.className).toBe('foo bar baz');\n    });\n  });\n\n  describe('addClass', () => {\n    test('one class name', () => {\n      $('button').addClass('qux');\n      expect(document.querySelector('button')!.className).toBe(\n        'foo bar baz qux',\n      );\n    });\n\n    test('multiple class names', () => {\n      $('button').addClass('qux quux');\n      expect(document.querySelector('button')!.className).toBe(\n        'foo bar baz qux quux',\n      );\n    });\n\n    test('classes already exist', () => {\n      $('button').addClass('foo bar');\n      expect(document.querySelector('button')!.className).toBe('foo bar baz');\n    });\n  });\n\n  describe('removeClass', () => {\n    test('one class name', () => {\n      $('button').removeClass('bar');\n      expect(document.querySelector('button')!.className).toBe('foo baz');\n    });\n\n    test('multiple class names', () => {\n      $('button').removeClass('bar foo');\n      expect(document.querySelector('button')!.className).toBe('baz');\n    });\n\n    test(\"classes don't exist\", () => {\n      $('button').removeClass('qux quux');\n      expect(document.querySelector('button')!.className).toBe('foo bar baz');\n    });\n  });\n\n  describe('class names with spaces', () => {\n    beforeEach(() => {\n      document.body.innerHTML =\n        '<button class=\" foo   bar  baz    \">Click me</button>';\n    });\n\n    test('toggle', () => {\n      $('button').toggleClass(' qux  ');\n      expect(document.querySelector('button')!.className).toBe(\n        'foo bar baz qux',\n      );\n    });\n\n    test('toggle multiple', () => {\n      $('button').toggleClass(' qux   foo');\n      expect(document.querySelector('button')!.className).toBe('bar baz qux');\n    });\n\n    test('explicit add', () => {\n      $('button').addClass('   quxx    qux   ');\n      expect(document.querySelector('button')!.className).toBe(\n        'foo bar baz quxx qux',\n      );\n    });\n\n    test('explicit remove', () => {\n      $('button').removeClass('   bar foo   ');\n      expect(document.querySelector('button')!.className).toBe('baz');\n    });\n  });\n\n  test('can be chained', () => {\n    $('button')\n      .toggleClass(' qux  ')\n      .toggleClass(' baz  ')\n      .addClass('corge')\n      .removeClass('foo');\n    expect(document.querySelector('button')!.className).toBe('bar qux corge');\n  });\n});\n",
    "/src/jquery-class-manipulation.ts": "interface JQuery {\n  toggleClass: (className: string, state?: boolean) => JQuery;\n  addClass: (className: string) => JQuery;\n  removeClass: (className: string) => JQuery;\n}\n\nfunction classNameTokenSet(className: string): Set<string> {\n  return new Set(className.trim().split(/\\s+/));\n}\n\nexport default function $(selector: string): JQuery {\n  const element = document.querySelector(selector);\n\n  return {\n    toggleClass: function (className: string, state?: boolean): JQuery {\n      // No-op if there is no matching element.\n      if (element == null) {\n        return this;\n      }\n\n      const classes = classNameTokenSet(className);\n      const elementClasses = classNameTokenSet(element.className);\n\n      classes.forEach((cls) => {\n        const shouldRemove =\n          state === undefined ? elementClasses.has(cls) : !state;\n        shouldRemove\n          ? elementClasses.delete(cls) // Remove if state is not defined and element contains the class or state is false.\n          : elementClasses.add(cls);\n      });\n\n      element.className = Array.from(elementClasses).join(' ');\n      return this;\n    },\n    addClass: function (className: string): JQuery {\n      this.toggleClass(className, true);\n      return this;\n    },\n    removeClass: function (className): JQuery {\n      this.toggleClass(className, false);\n      return this;\n    },\n  };\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {string} selector\n * @return {{toggleClass: Function, addClass: Function, removeClass: Function}}\n */\nexport default function $(selector) {\n  const element = document.querySelector(selector);\n\n  return {\n    /**\n     * @param {string} className\n     * @param {boolean} [state]\n     * @return {Object|void}\n     */\n    toggleClass: function (className, state) {\n      throw 'Not implemented!';\n    },\n    /**\n     * @param {string} className\n     * @return {Object}\n     */\n    addClass: function (className) {\n      throw 'Not implemented!';\n    },\n    /**\n     * @param {string} className\n     * @return {Object}\n     */\n    removeClass: function (className) {\n      throw 'Not implemented!';\n    },\n  };\n}",
    "ts": "interface JQuery {\n  toggleClass: (className: string, state?: boolean) => JQuery;\n  addClass: (className: string) => JQuery;\n  removeClass: (className: string) => JQuery;\n}\n\nexport default function $(selector: string): JQuery {\n  const element = document.querySelector(selector);\n\n  return {\n    toggleClass: function (className: string, state?: boolean): JQuery {\n      throw 'Not implemented!';\n    },\n    addClass: function (className: string): JQuery {\n      throw 'Not implemented!';\n    },\n    removeClass: function (className): JQuery {\n      throw 'Not implemented!';\n    },\n  };\n}"
  },
  "workspace": {
    "main": "/src/jquery-class-manipulation.ts",
    "run": "/src/jquery-class-manipulation.run.test.ts",
    "submit": "/src/jquery-class-manipulation.submit.test.ts"
  }
}