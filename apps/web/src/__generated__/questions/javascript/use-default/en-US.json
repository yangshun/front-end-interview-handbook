{
  "description": "var Component=(()=>{var c=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!p.call(t,l)&&l!==r&&s(t,l,{get:()=>e[l],enumerable:!(a=h(e,l))||a.enumerable});return t};var v=(t,e,r)=>(r=t!=null?c(f(t)):{},i(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),j=t=>i(s({},\"__esModule\",{value:!0}),t);var o=x((C,u)=>{u.exports=_jsx_runtime});var k={};g(k,{default:()=>b,frontmatter:()=>U});var n=v(o()),U={title:\"useDefault\",excerpt:\"Implement a hook that returns the default value when state is null or undefined\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useDefault\"}),\" hook that returns the default value when state is \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const initialUser = { name: 'Marshall' };\n  const defaultUser = { name: 'Mathers' };\n  const [user, setUser] = useDefault(defaultUser, initialUser);\n\n  return (\n    <div>\n      <div>User: {user.name}</div>\n      <input onChange={(e) => setUser({ name: e.target.value })} />\n      <button onClick={() => setUser(null)}>reset</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defaultValue\"}),\": the default value to be returned when the state is \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"initialValue\"}),\": the initial value of the state. This argument should be the same as the first argument of the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDefault\"}),\" hook returns the same values as the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook.\"]})]})}function _(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var b=_;return j(k);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-default\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-default.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-default.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useDefault from './use-default';\n\ndescribe('useDefault', () => {\n  test('initial values', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    expect(result.current[0]).toBe(initialValue);\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('default value when null', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](null);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n\n  test('default value when undefined', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](undefined);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n});\n",
    "/src/use-default.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useDefault from './use-default';\n\ndescribe('useDefault', () => {\n  test('initial values', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    expect(result.current[0]).toBe(initialValue);\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('default value when null', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](null);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n\n  test('default value when undefined', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](undefined);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n\n  test('not default value when 0', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](0);\n    });\n\n    expect(result.current[0]).not.toBe(defaultValue);\n  });\n\n  test('not default value when false', () => {\n    const defaultValue = true;\n    const initialValue = true;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](false);\n    });\n\n    expect(result.current[0]).not.toBe(defaultValue);\n  });\n\n  test('can set value', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](3);\n    });\n\n    expect(result.current[0]).toBe(3);\n  });\n\n  test('can set value with function', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      // @ts-ignore\n      result.current[1]((prev) => prev + 1);\n    });\n\n    expect(result.current[0]).toBe(3);\n  });\n\n  test('works with non-integers', () => {\n    const defaultValue = 'hello';\n    const initialValue = 'world';\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1]('test');\n    });\n\n    expect(result.current[0]).toBe('test');\n\n    act(() => {\n      result.current[1]((prev) => prev + '!');\n    });\n\n    expect(result.current[0]).toBe('test!');\n  });\n});\n",
    "/src/use-default.ts": "import { useState } from 'react';\n\nexport default function useDefault<TStateType>(\n  defaultValue: TStateType,\n  initialValue: TStateType | (() => TStateType),\n) {\n  const [value, setValue] = useState<TStateType | undefined | null>(\n    initialValue,\n  );\n\n  if (value === undefined || value === null) {\n    return [defaultValue, setValue] as const;\n  }\n\n  return [value, setValue] as const;\n}\n"
  },
  "info": {
    "excerpt": "Implement a hook that returns the default value when state is null or undefined",
    "title": "useDefault"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "easy",
    "duration": 15,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-default"
      }
    ],
    "href": "/questions/javascript/use-default",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "use-default",
    "subtitle": null,
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "export default function useDefault(defaultValue, initialValue) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useDefault<TStateType>(\n  defaultValue: TStateType,\n  initialValue: TStateType | (() => TStateType),\n) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,u)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!T.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(u=p(e,o))||u.enumerable});return t};var S=(t,e,r)=>(r=t!=null?f(y(t)):{},i(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),g=t=>i(a({},\"__esModule\",{value:!0}),t);var s=v((k,l)=>{l.exports=_jsx_runtime});var D={};x(D,{default:()=>_});var n=S(s());var c=MDXCodeBlock;var d=`import { useState } from 'react';\n\nexport default function useDefault<TStateType>(\n  defaultValue: TStateType,\n  initialValue: TStateType | (() => TStateType),\n) {\n  const [value, setValue] = useState<TStateType | undefined | null>(\n    initialValue,\n  );\n\n  if (value === undefined || value === null) {\n    return [defaultValue, setValue] as const;\n  }\n\n  return [value, setValue] as const;\n}\n`;function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This hook is very similar to the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook, but it conditionally returns \",(0,n.jsx)(e.code,{children:\"defaultValue\"}),\" as the first element of the returned tuple when the current state \",(0,n.jsx)(e.code,{children:\"value\"}),\" is \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(c,{children:d}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you're using TypeScript, this should be a warm up for you to start writing generic functions! To ensure that the inferred return type is a tuple and not just an array of unioned types, use \",(0,n.jsx)(e.code,{children:\"as const\"}),\" or provide the explicit return type in the function signature.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You just have to be careful to not simply check for \",(0,n.jsx)(e.code,{children:\"!value\"}),\" since \",(0,n.jsx)(e.code,{children:\"0\"}),\" or \",(0,n.jsx)(e.code,{children:\"false\"}),\" are also valid values for the state.\"]})]})}function V(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var _=V;return g(D);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-default.ts",
    "run": "/src/use-default.run.test.ts",
    "submit": "/src/use-default.submit.test.ts"
  }
}