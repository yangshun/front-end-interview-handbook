{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-default\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-default.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-default.run.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useDefault from './use-default';\n\ndescribe('useDefault', () => {\n  test('initial values', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    expect(result.current[0]).toBe(initialValue);\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('default value when null', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](null);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n\n  test('default value when undefined', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](undefined);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n});\n",
    "/src/use-default.submit.test.ts": "import { act, renderHook } from '@testing-library/react';\n\nimport useDefault from './use-default';\n\ndescribe('useDefault', () => {\n  test('initial values', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    expect(result.current[0]).toBe(initialValue);\n    expect(typeof result.current[1]).toBe('function');\n  });\n\n  test('default value when null', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](null);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n\n  test('default value when undefined', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](undefined);\n    });\n\n    expect(result.current[0]).toBe(defaultValue);\n  });\n\n  test('not default value when 0', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](0);\n    });\n\n    expect(result.current[0]).not.toBe(defaultValue);\n  });\n\n  test('not default value when false', () => {\n    const defaultValue = true;\n    const initialValue = true;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](false);\n    });\n\n    expect(result.current[0]).not.toBe(defaultValue);\n  });\n\n  test('can set value', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1](3);\n    });\n\n    expect(result.current[0]).toBe(3);\n  });\n\n  test('can set value with function', () => {\n    const defaultValue = 1;\n    const initialValue = 2;\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      // @ts-ignore\n      result.current[1]((prev) => prev + 1);\n    });\n\n    expect(result.current[0]).toBe(3);\n  });\n\n  test('works with non-integers', () => {\n    const defaultValue = 'hello';\n    const initialValue = 'world';\n\n    const { result } = renderHook(() => useDefault(defaultValue, initialValue));\n\n    act(() => {\n      result.current[1]('test');\n    });\n\n    expect(result.current[0]).toBe('test');\n\n    act(() => {\n      result.current[1]((prev) => prev + '!');\n    });\n\n    expect(result.current[0]).toBe('test!');\n  });\n});\n",
    "/src/use-default.ts": "import { useState } from 'react';\n\nexport default function useDefault<TStateType>(\n  defaultValue: TStateType,\n  initialValue: TStateType | (() => TStateType),\n) {\n  const [value, setValue] = useState<TStateType | undefined | null>(\n    initialValue,\n  );\n\n  if (value === undefined || value === null) {\n    return [defaultValue, setValue] as const;\n  }\n\n  return [value, setValue] as const;\n}\n"
  },
  "skeleton": {
    "js": "export default function useDefault(defaultValue, initialValue) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useDefault<TStateType>(\n  defaultValue: TStateType,\n  initialValue: TStateType | (() => TStateType),\n) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-default.ts",
    "run": "/src/use-default.run.test.ts",
    "submit": "/src/use-default.submit.test.ts"
  }
}