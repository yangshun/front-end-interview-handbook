{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-click-anywhere\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-click-anywhere.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-click-anywhere.run.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useClickAnywhere from './use-click-anywhere';\n\ndescribe('useClickAnywhere', () => {\n  test('returns nothing', () => {\n    const { result } = renderHook(() => useClickAnywhere(() => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls the handler when window is clicked', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n  });\n});\n",
    "/src/use-click-anywhere.submit.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useClickAnywhere from './use-click-anywhere';\n\ndescribe('useClickAnywhere', () => {\n  test('returns nothing', () => {\n    const { result } = renderHook(() => useClickAnywhere(() => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls the handler when window is clicked', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n  });\n\n  test('calls the handler on multiple clicks', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(2);\n  });\n\n  /**\n   * `dblclick` fires after two `click` events, so we need to make sure that the handler is not called\n   * for the third time when the user double-clicks.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event\n   */\n  test('does not call the handler on dblclick event', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.doubleClick(window);\n    });\n\n    expect(counter).toBe(0);\n  });\n\n  test('does not call the handler on mousedown event', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.mouseDown(window);\n    });\n\n    expect(counter).toBe(0);\n  });\n\n  test('does not call the handler on mouseup event', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.mouseUp(window);\n    });\n\n    expect(counter).toBe(0);\n  });\n\n  test('removes the event listener on unmount', () => {\n    let counter = 0;\n\n    const { unmount } = renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n\n    unmount();\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n  });\n});\n",
    "/src/use-click-anywhere.ts": "import { useEffect } from 'react';\n\nexport default function useClickAnywhere(handler: (event: MouseEvent) => void) {\n  useEffect(() => {\n    window.addEventListener('click', handler);\n\n    return () => {\n      window.removeEventListener('click', handler);\n    };\n  }, []);\n}\n"
  },
  "skeleton": {
    "js": "export default function useClickAnywhere(handler) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useClickAnywhere(handler: (event: MouseEvent) => void) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-click-anywhere.ts",
    "run": "/src/use-click-anywhere.run.test.ts",
    "submit": "/src/use-click-anywhere.submit.test.ts"
  }
}