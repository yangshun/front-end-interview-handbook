{
  "description": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),C=(n,e)=>{for(var c in e)r(n,c,{get:e[c],enumerable:!0})},s=(n,e,c,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!x.call(n,o)&&o!==c&&r(n,o,{get:()=>e[o],enumerable:!(l=u(e,o))||l.enumerable});return n};var f=(n,e,c)=>(c=n!=null?d(p(n)):{},s(e||!n||!n.__esModule?r(c,\"default\",{value:n,enumerable:!0}):c,n)),g=n=>s(r({},\"__esModule\",{value:!0}),n);var i=k((A,h)=>{h.exports=_jsx_runtime});var y={};C(y,{default:()=>w,frontmatter:()=>j});var t=f(i()),j={title:\"useClickAnywhere\",excerpt:\"Implement a hook that handles click events anywhere on the document\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a \",(0,t.jsx)(e.code,{children:\"useClickAnywhere\"}),\" hook that handles click events anywhere on the document.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  const [count, setCount] = useState(0);\n\n  useClickAnyWhere(() => {\n    setCount((prev) => prev + 1);\n  });\n\n  return <p>Click count: {count}</p>;\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"handler: (event: MouseEvent) => void\"}),\": The function to be called when a click event is detected anywhere on the document\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,t.jsx)(e.p,{children:\"Nothing.\"})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var w=v;return g(y);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-click-anywhere\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-click-anywhere.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-click-anywhere.run.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useClickAnywhere from './use-click-anywhere';\n\ndescribe('useClickAnywhere', () => {\n  test('returns nothing', () => {\n    const { result } = renderHook(() => useClickAnywhere(() => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls the handler when window is clicked', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n  });\n});\n",
    "/src/use-click-anywhere.submit.test.ts": "import { act, fireEvent, renderHook } from '@testing-library/react';\n\nimport useClickAnywhere from './use-click-anywhere';\n\ndescribe('useClickAnywhere', () => {\n  test('returns nothing', () => {\n    const { result } = renderHook(() => useClickAnywhere(() => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('calls the handler when window is clicked', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n  });\n\n  test('calls the handler on multiple clicks', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(2);\n  });\n\n  /**\n   * `dblclick` fires after two `click` events, so we need to make sure that the handler is not called\n   * for the third time when the user double-clicks.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event\n   */\n  test('does not call the handler on dblclick event', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.doubleClick(window);\n    });\n\n    expect(counter).toBe(0);\n  });\n\n  test('does not call the handler on mousedown event', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.mouseDown(window);\n    });\n\n    expect(counter).toBe(0);\n  });\n\n  test('does not call the handler on mouseup event', () => {\n    let counter = 0;\n\n    renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.mouseUp(window);\n    });\n\n    expect(counter).toBe(0);\n  });\n\n  test('removes the event listener on unmount', () => {\n    let counter = 0;\n\n    const { unmount } = renderHook(() =>\n      useClickAnywhere(() => {\n        counter += 1;\n      }),\n    );\n\n    expect(counter).toBe(0);\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n\n    unmount();\n\n    act(() => {\n      fireEvent.click(window);\n    });\n\n    expect(counter).toBe(1);\n  });\n});\n",
    "/src/use-click-anywhere.ts": "import { useEffect } from 'react';\n\nexport default function useClickAnywhere(handler: (event: MouseEvent) => void) {\n  useEffect(() => {\n    window.addEventListener('click', handler);\n\n    return () => {\n      window.removeEventListener('click', handler);\n    };\n  }, []);\n}\n"
  },
  "info": {
    "excerpt": "Implement a hook that handles click events anywhere on the document",
    "title": "useClickAnywhere"
  },
  "metadata": {
    "access": "standard",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "easy",
    "duration": 15,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-click-anywhere"
      }
    ],
    "href": "/questions/javascript/use-click-anywhere",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "use-click-outside"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "use-click-anywhere",
    "subtitle": null,
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "export default function useClickAnywhere(handler) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useClickAnywhere(handler: (event: MouseEvent) => void) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},d=(n,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of p(e))!w.call(n,c)&&c!==o&&i(n,c,{get:()=>e[c],enumerable:!(r=f(e,c))||r.enumerable});return n};var x=(n,e,o)=>(o=n!=null?m(v(n)):{},d(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),g=n=>d(i({},\"__esModule\",{value:!0}),n);var s=k((M,h)=>{h.exports=_jsx_runtime});var _={};b(_,{default:()=>E});var t=x(s());var l=MDXCodeBlock;var a=`import { useEffect } from 'react';\n\nexport default function useClickAnywhere(handler: (event: MouseEvent) => void) {\n  useEffect(() => {\n    window.addEventListener('click', handler);\n\n    return () => {\n      window.removeEventListener('click', handler);\n    };\n  }, []);\n}\n`;function u(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useClickAnywhere\"}),\" hook can be implemented by making the provided handler function a \",(0,t.jsx)(e.code,{children:\"click\"}),\" event listener on the \",(0,t.jsx)(e.code,{children:\"window\"}),\" object whenever the component mounts.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useEffect\"}),\" is the React hook to use here, and the event listener is added when calling the hook. When adding event listeners, it's imperative to remember to remove the event listener when the component is unmounted. This can be achieved by returning a function within the \",(0,t.jsx)(e.code,{children:\"useEffect\"}),\" callback that unsubscribes from the event. This returned function is called when the component unmounts.\"]}),`\n`,(0,t.jsx)(l,{children:a})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var E=C;return g(_);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-click-anywhere.ts",
    "run": "/src/use-click-anywhere.run.test.ts",
    "submit": "/src/use-click-anywhere.submit.test.ts"
  }
}