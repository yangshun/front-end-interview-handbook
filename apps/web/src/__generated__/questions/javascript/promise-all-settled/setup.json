{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/promise-all-settled\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/promise-all-settled.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/promise-all-settled.run.test.ts": "import promiseAllSettled from './promise-all-settled';\n\ndescribe('promiseAllSettled', () => {\n  test('returns promise', () => {\n    const p = promiseAllSettled([]);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await promiseAllSettled([]);\n    expect(res).toEqual([]);\n  });\n\n  test('one promise', async () => {\n    expect.assertions(1);\n    const p0 = 2;\n\n    const res = await promiseAllSettled([p0]);\n    expect(res).toEqual([\n      {\n        status: 'fulfilled',\n        value: 2,\n      },\n    ]);\n  });\n\n  test('mix of resolve and reject', async () => {\n    expect.assertions(1);\n    const p0 = Promise.resolve(42);\n    const p1 = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(2);\n      }, 10);\n    });\n\n    const res = await promiseAllSettled([p0, p1]);\n    expect(res).toEqual([\n      {\n        status: 'fulfilled',\n        value: 42,\n      },\n      {\n        status: 'rejected',\n        reason: 2,\n      },\n    ]);\n  });\n});\n",
    "/src/promise-all-settled.submit.test.ts": "import promiseAllSettled from './promise-all-settled';\n\ndescribe('promiseAllSettled', () => {\n  test('returns promise', () => {\n    const p = promiseAllSettled([]);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await promiseAllSettled([]);\n    expect(res).toEqual([]);\n  });\n\n  describe('one promise', () => {\n    describe('resolve', () => {\n      test('value', async () => {\n        expect.assertions(1);\n        const p0 = 2;\n\n        const res = await promiseAllSettled([p0]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n        ]);\n      });\n\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n\n        const res = await promiseAllSettled([p0]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n        ]);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n        ]);\n      });\n    });\n\n    describe('reject', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(2);\n\n        const res = await promiseAllSettled([p0]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n        ]);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n        ]);\n      });\n    });\n  });\n\n  describe('multiple promises', () => {\n    describe('all resolve', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n        const p1 = Promise.resolve(3);\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n          {\n            status: 'fulfilled',\n            value: 3,\n          },\n        ]);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(2);\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n          {\n            status: 'fulfilled',\n            value: 3,\n          },\n        ]);\n      });\n\n      test('mixture', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 10);\n        });\n        const p1 = Promise.resolve(3);\n        const p2 = 4;\n\n        const res = await promiseAllSettled([p0, p1, p2]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n          {\n            status: 'fulfilled',\n            value: 3,\n          },\n          {\n            status: 'fulfilled',\n            value: 4,\n          },\n        ]);\n      });\n\n      test('many delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(1);\n          }, 200);\n        });\n        const p1 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(2);\n          }, 100);\n        });\n        const p2 = new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(3);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0, p1, p2]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 1,\n          },\n          {\n            status: 'fulfilled',\n            value: 2,\n          },\n          {\n            status: 'fulfilled',\n            value: 3,\n          },\n        ]);\n      });\n    });\n\n    describe('all reject', () => {\n      test('instant', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(2);\n        const p1 = Promise.reject(3);\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n          {\n            status: 'rejected',\n            reason: 3,\n          },\n        ]);\n      });\n\n      test('delayed', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(3);\n          }, 1);\n        });\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 3,\n          },\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n        ]);\n      });\n\n      test('mixture', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 42,\n          },\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n        ]);\n      });\n    });\n\n    describe('mix of resolve and reject', () => {\n      test('instant resolve delayed reject', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(42);\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 42,\n          },\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n        ]);\n      });\n\n      test('instant resolve instant reject', async () => {\n        expect.assertions(1);\n        const p0 = Promise.resolve(42);\n        const p1 = Promise.reject(2);\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'fulfilled',\n            value: 42,\n          },\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n        ]);\n      });\n\n      test('instant rejects', async () => {\n        expect.assertions(1);\n        const p0 = Promise.reject(42);\n        const p1 = Promise.reject(43);\n\n        const res = await promiseAllSettled([p0, p1]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 42,\n          },\n          {\n            status: 'rejected',\n            reason: 43,\n          },\n        ]);\n      });\n\n      test('many promises', async () => {\n        expect.assertions(1);\n        const p0 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(1);\n          }, 200);\n        });\n        const p1 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(2);\n          }, 100);\n        });\n        const p2 = new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(3);\n          }, 10);\n        });\n\n        const res = await promiseAllSettled([p0, p1, p2]);\n        expect(res).toEqual([\n          {\n            status: 'rejected',\n            reason: 1,\n          },\n          {\n            status: 'rejected',\n            reason: 2,\n          },\n          {\n            status: 'rejected',\n            reason: 3,\n          },\n        ]);\n      });\n    });\n  });\n});\n",
    "/src/promise-all-settled.ts": "interface PromiseFulfilledResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  status: 'rejected';\n  reason: any;\n}\n\nexport default function promiseAllSettled<T>(\n  iterable: Array<T>,\n): Promise<Array<PromiseFulfilledResult<T> | PromiseRejectedResult>> {\n  return new Promise((resolve) => {\n    const results = new Array(iterable.length);\n    let pending = iterable.length;\n\n    if (pending === 0) {\n      resolve(results);\n      return;\n    }\n\n    iterable.forEach(async (item, index) => {\n      try {\n        const value = await item;\n        results[index] = {\n          status: 'fulfilled',\n          value,\n        };\n      } catch (err) {\n        results[index] = {\n          status: 'rejected',\n          reason: err,\n        };\n      }\n\n      pending -= 1;\n      if (pending === 0) {\n        resolve(results);\n      }\n    });\n  });\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} iterable\n * @return {Promise<Array<{status: 'fulfilled', value: *}|{status: 'rejected', reason: *}>>}\n */\nexport default function promiseAllSettled(iterable) {\n  throw 'Not implemented!';\n}",
    "ts": "interface PromiseFulfilledResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  status: 'rejected';\n  reason: any;\n}\n\nexport default function promiseAllSettled<T>(\n  iterable: Array<T>,\n): Promise<Array<PromiseFulfilledResult<T> | PromiseRejectedResult>> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/promise-all-settled.ts",
    "run": "/src/promise-all-settled.run.test.ts",
    "submit": "/src/promise-all-settled.submit.test.ts"
  }
}