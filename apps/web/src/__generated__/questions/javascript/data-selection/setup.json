{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/data-selection\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/data-selection.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/data-selection.run.test.ts": "import selectData from './data-selection';\n\nfunction getDataSmall() {\n  return [\n    { user: 8, duration: 50, equipment: ['bench'] },\n    { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n    { user: 1, duration: 10, equipment: ['barbell'] },\n    { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n    { user: 7, duration: 200, equipment: ['bike'] },\n    { user: 2, duration: 200, equipment: ['treadmill'] },\n    { user: 2, duration: 200, equipment: ['bike'] },\n  ];\n}\n\ndescribe('selectData', () => {\n  test('empty data', () => {\n    expect(selectData([])).toEqual([]);\n  });\n\n  test('minDuration', () => {\n    const dataSmall = getDataSmall();\n    expect(selectData(dataSmall, { minDuration: 150 })).toEqual([\n      { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n      { user: 7, duration: 200, equipment: ['bike'] },\n      { user: 2, duration: 200, equipment: ['treadmill'] },\n      { user: 2, duration: 200, equipment: ['bike'] },\n    ]);\n  });\n\n  test('one equipment specified', () => {\n    const dataSmall = getDataSmall();\n    expect(selectData(dataSmall, { equipment: ['bike'] })).toEqual([\n      { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n      { user: 7, duration: 200, equipment: ['bike'] },\n      { user: 2, duration: 200, equipment: ['bike'] },\n    ]);\n  });\n\n  test('merging', () => {\n    const dataSmall = getDataSmall();\n    expect(\n      selectData(dataSmall, {\n        merge: true,\n        minDuration: 400,\n        equipment: ['treadmill', 'bench', 'barbell', 'dumbbell', 'bike'],\n      }),\n    ).toEqual([\n      {\n        user: 7,\n        duration: 450,\n        equipment: ['bike', 'dumbbell', 'kettlebell'],\n      },\n      { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n    ]);\n  });\n});\n",
    "/src/data-selection.submit.test.ts": "import selectData from './data-selection';\n\nfunction getDataSmall() {\n  return [\n    { user: 8, duration: 50, equipment: ['bench'] },\n    { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n    { user: 1, duration: 10, equipment: ['barbell'] },\n    { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n    { user: 7, duration: 200, equipment: ['bike'] },\n    { user: 2, duration: 200, equipment: ['treadmill'] },\n    { user: 2, duration: 200, equipment: ['bike'] },\n  ];\n}\n\ndescribe('selectData', () => {\n  test('empty data', () => {\n    expect(selectData([])).toEqual([]);\n    expect(selectData([], { user: 2 })).toEqual([]);\n    expect(selectData([], { merge: true })).toEqual([]);\n  });\n\n  test('does not mutate data', () => {\n    const dataSmall = getDataSmall();\n    selectData(dataSmall, { user: 1 });\n    selectData(dataSmall, { minDuration: 150 });\n    selectData(dataSmall, {\n      merge: true,\n      equipment: ['treadmill', 'bench', 'barbell', 'dumbbell', 'bike'],\n    });\n\n    const originalDataSmall = getDataSmall();\n    expect(dataSmall).toEqual(originalDataSmall);\n  });\n\n  test('no options', () => {\n    const dataSmall = getDataSmall();\n    const originalDataSmall = getDataSmall();\n    expect(selectData(dataSmall)).toEqual(originalDataSmall);\n  });\n\n  describe('user option', () => {\n    test('user with single session', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { user: 1 })).toEqual([\n        { user: 1, duration: 10, equipment: ['barbell'] },\n      ]);\n    });\n\n    test('user with multiple sessions', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { user: 2 })).toEqual([\n        { user: 2, duration: 200, equipment: ['treadmill'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n    });\n\n    test('non-existing user', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { user: 99 })).toEqual([]);\n    });\n  });\n\n  describe('minDuration option', () => {\n    test('low minDuration', () => {\n      const dataSmallTest1 = getDataSmall();\n      expect(selectData(dataSmallTest1, { minDuration: 150 })).toEqual([\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 7, duration: 200, equipment: ['bike'] },\n        { user: 2, duration: 200, equipment: ['treadmill'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n\n      const dataSmallTest2 = getDataSmall();\n      expect(selectData(dataSmallTest2, { minDuration: 151 })).toEqual([\n        { user: 7, duration: 200, equipment: ['bike'] },\n        { user: 2, duration: 200, equipment: ['treadmill'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n\n      const dataSmallTest3 = getDataSmall();\n      expect(selectData(dataSmallTest3, { minDuration: 200 })).toEqual([\n        { user: 7, duration: 200, equipment: ['bike'] },\n        { user: 2, duration: 200, equipment: ['treadmill'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n    });\n\n    test('high minDuration', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { minDuration: 400 })).toEqual([]);\n    });\n  });\n\n  describe('equipment option', () => {\n    test('no matching equipment', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { equipment: ['nah'] })).toEqual([]);\n    });\n\n    test('one equipment specified', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { equipment: ['bike'] })).toEqual([\n        { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n        { user: 7, duration: 200, equipment: ['bike'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n    });\n\n    test('multiple equipments specified', () => {\n      const dataSmallTest1 = getDataSmall();\n      expect(\n        selectData(dataSmallTest1, { equipment: ['bike', 'dumbbell'] }),\n      ).toEqual([\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n        { user: 7, duration: 200, equipment: ['bike'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n\n      const dataSmallTest2 = getDataSmall();\n      expect(\n        selectData(dataSmallTest2, {\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        }),\n      ).toEqual([\n        { user: 7, duration: 150, equipment: ['dumbbell', 'kettlebell'] },\n        { user: 7, duration: 100, equipment: ['bike', 'kettlebell'] },\n        { user: 7, duration: 200, equipment: ['bike'] },\n        { user: 2, duration: 200, equipment: ['bike'] },\n      ]);\n    });\n  });\n\n  describe('merge option', () => {\n    test('without other options', () => {\n      const dataSmall = getDataSmall();\n      expect(selectData(dataSmall, { merge: true })).toEqual([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 1, duration: 10, equipment: ['barbell'] },\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n    });\n\n    test('with user', () => {\n      const dataSmallTest1 = getDataSmall();\n      expect(selectData(dataSmallTest1, { merge: true, user: 1 })).toEqual([\n        { user: 1, duration: 10, equipment: ['barbell'] },\n      ]);\n\n      const dataSmallTest2 = getDataSmall();\n      expect(selectData(dataSmallTest2, { merge: true, user: 2 })).toEqual([\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n\n      const dataSmallTest3 = getDataSmall();\n      expect(selectData(dataSmallTest3, { merge: true, user: 7 })).toEqual([\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n      ]);\n    });\n\n    test('with minDuration', () => {\n      const dataSmallTest1 = getDataSmall();\n      expect(\n        selectData(dataSmallTest1, { merge: true, minDuration: 1000 }),\n      ).toEqual([]);\n\n      const dataSmallTest2 = getDataSmall();\n      expect(\n        selectData(dataSmallTest2, { merge: true, minDuration: 400 }),\n      ).toEqual([\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n    });\n\n    test('with equipment', () => {\n      const dataSmallTest1 = getDataSmall();\n      expect(\n        selectData(dataSmallTest1, { merge: true, equipment: ['bike'] }),\n      ).toEqual([\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n\n      const dataSmallTest2 = getDataSmall();\n      expect(\n        selectData(dataSmallTest2, { merge: true, equipment: ['treadmill'] }),\n      ).toEqual([{ user: 2, duration: 400, equipment: ['bike', 'treadmill'] }]);\n\n      const dataSmallTest3 = getDataSmall();\n      expect(\n        selectData(dataSmallTest3, {\n          merge: true,\n          equipment: ['treadmill', 'bench', 'barbell', 'dumbbell', 'bike'],\n        }),\n      ).toEqual([\n        { user: 8, duration: 50, equipment: ['bench'] },\n        { user: 1, duration: 10, equipment: ['barbell'] },\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n    });\n\n    test('with multiple options', () => {\n      const dataSmallTest1 = getDataSmall();\n      expect(\n        selectData(dataSmallTest1, {\n          merge: true,\n          minDuration: 400,\n          equipment: ['treadmill', 'bench', 'barbell', 'dumbbell', 'bike'],\n        }),\n      ).toEqual([\n        {\n          user: 7,\n          duration: 450,\n          equipment: ['bike', 'dumbbell', 'kettlebell'],\n        },\n        { user: 2, duration: 400, equipment: ['bike', 'treadmill'] },\n      ]);\n\n      const dataSmallTest2 = getDataSmall();\n      expect(\n        selectData(dataSmallTest2, {\n          merge: true,\n          minDuration: 400,\n          equipment: ['treadmill'],\n        }),\n      ).toEqual([{ user: 2, duration: 400, equipment: ['bike', 'treadmill'] }]);\n    });\n  });\n});\n",
    "/src/data-selection.ts": "function setHasOverlap<T>(setA: Set<T>, setB: Set<T>) {\n  // Bundler doesn't transpile properly when doing for-of for sets.\n  for (const val of Array.from(setA)) {\n    if (setB.has(val)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\ntype Session = { user: number; duration: number; equipment: Array<string> };\ntype Options = {\n  user?: number;\n  minDuration?: number;\n  equipment?: Array<string>;\n  merge?: boolean;\n};\n\nexport default function selectData(\n  sessions: Array<Session>,\n  options?: Options,\n): Array<Session> {\n  const reversedSessions = sessions.slice().reverse(); // Make a copy and reverse.\n  const sessionsForUser = new Map();\n  const sessionsProcessed: Array<{\n    user: number;\n    duration: number;\n    equipment: Set<string>;\n  }> = [];\n\n  reversedSessions.forEach((session) => {\n    if (options?.merge && sessionsForUser.has(session.user)) {\n      const userSession = sessionsForUser.get(session.user);\n      userSession.duration += session.duration;\n      session.equipment.forEach((equipment) => {\n        userSession.equipment.add(equipment);\n      });\n    } else {\n      const clonedSession = {\n        ...session,\n        equipment: new Set(session.equipment),\n      };\n\n      if (options?.merge) {\n        sessionsForUser.set(session.user, clonedSession);\n      }\n\n      sessionsProcessed.push(clonedSession);\n    }\n  });\n\n  sessionsProcessed.reverse();\n\n  const results: Array<Session> = [];\n  const optionEquipments = new Set(options?.equipment);\n  sessionsProcessed.forEach((session) => {\n    if (\n      (options?.user != null && options?.user !== session.user) ||\n      (optionEquipments.size > 0 &&\n        !setHasOverlap(optionEquipments, session.equipment)) ||\n      (options?.minDuration != null && options?.minDuration > session.duration)\n    ) {\n      return;\n    }\n\n    results.push({\n      ...session,\n      equipment: Array.from(session.equipment).sort(),\n    });\n  });\n\n  return results;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<{user: number, duration: number, equipment: Array<string>}>} sessions\n * @param {{user?: number, minDuration?: number, equipment?: Array<string>, merge?: boolean}} [options]\n * @return {Array}\n */\nexport default function selectData(sessions, options) {\n  throw 'Not implemented!';\n}",
    "ts": "type Session = { user: number; duration: number; equipment: Array<string> };\ntype Options = {\n  user?: number;\n  minDuration?: number;\n  equipment?: Array<string>;\n  merge?: boolean;\n};\n\nexport default function selectData(\n  sessions: Array<Session>,\n  options?: Options,\n): Array<Session> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/data-selection.ts",
    "run": "/src/data-selection.run.test.ts",
    "submit": "/src/data-selection.submit.test.ts"
  }
}