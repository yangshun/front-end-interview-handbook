{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/classnames\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/classnames.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/classnames.run.test.ts": "import classNames from './classnames';\n\ndescribe('classNames', () => {\n  test('empty values', () => {\n    expect(classNames([])).toEqual('');\n  });\n\n  test('single value', () => {\n    expect(classNames('foo')).toEqual('foo');\n  });\n\n  test('two values', () => {\n    expect(classNames('foo', 'bar')).toEqual('foo bar');\n  });\n\n  test('array values', () => {\n    expect(classNames(['foo', 'bar', 'baz'])).toEqual('foo bar baz');\n  });\n});\n",
    "/src/classnames.submit.test.ts": "import classNames from './classnames';\n\ndescribe('classNames', () => {\n  test('empty values', () => {\n    expect(classNames([])).toEqual('');\n  });\n\n  test('single value', () => {\n    expect(classNames('foo')).toEqual('foo');\n  });\n\n  test('two values', () => {\n    expect(classNames('foo', 'bar')).toEqual('foo bar');\n  });\n\n  test('array values', () => {\n    expect(classNames(['foo', 'bar', 'baz'])).toEqual('foo bar baz');\n  });\n\n  test('object values', () => {\n    expect(classNames({ 'foo-bar': true })).toEqual('foo-bar');\n    expect(classNames({ 'foo-bar': false })).toEqual('');\n    expect(classNames({ foo: true }, { bar: true })).toEqual('foo bar');\n    expect(classNames({ foo: true, bar: false, qux: true })).toEqual('foo qux');\n  });\n\n  test('mixed values', () => {\n    expect(\n      classNames(\n        'foo',\n        {\n          bar: true,\n          duck: false,\n        },\n        'baz',\n        { quux: true },\n      ),\n    ).toEqual('foo bar baz quux');\n    expect(\n      classNames('boo', true && 'loo', false && 'booz', {\n        foo: true,\n        bar: false,\n        baz: 1,\n      }),\n    ).toEqual('boo loo foo baz');\n  });\n\n  test('ignores falsey values', () => {\n    expect(\n      classNames(null, false, 'bar', undefined, 0, 1, { baz: null }, ''),\n    ).toEqual('bar 1');\n  });\n\n  test('recursively flattens arrays', () => {\n    expect(classNames('a', ['b', { c: true, d: false }])).toEqual('a b c');\n    expect(classNames('a', ['b', ['c', ['d']]])).toEqual('a b c d');\n  });\n});\n",
    "/src/classnames.ts": "export type ClassValue =\n  | ClassArray\n  | ClassDictionary\n  | string\n  | number\n  | null\n  | boolean\n  | undefined;\nexport type ClassDictionary = Record<string, any>;\nexport type ClassArray = Array<ClassValue>;\n\nexport default function classNames(...args: Array<ClassValue>): string {\n  const classes: Array<string> = [];\n\n  args.forEach((arg) => {\n    // Ignore falsey values.\n    if (!arg) {\n      return;\n    }\n\n    const argType = typeof arg;\n\n    // Handle string and numbers.\n    if (argType === 'string' || argType === 'number') {\n      classes.push(String(arg));\n      return;\n    }\n\n    // Handle arrays.\n    if (Array.isArray(arg)) {\n      classes.push(classNames(...arg));\n      return;\n    }\n\n    // Handle objects.\n    if (argType === 'object') {\n      const objArg = arg as ClassDictionary;\n      for (const key in objArg) {\n        // Only process non-inherited keys.\n        if (Object.hasOwn(objArg, key) && objArg[key]) {\n          classes.push(key);\n        }\n      }\n\n      return;\n    }\n  });\n\n  return classes.join(' ');\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {...(any|Object|Array<any|Object|Array>)} args\n * @return {string}\n */\nexport default function classNames(...args) {\n  throw 'Not implemented!';\n}",
    "ts": "export type ClassValue =\n  | ClassArray\n  | ClassDictionary\n  | string\n  | number\n  | null\n  | boolean\n  | undefined;\nexport type ClassDictionary = Record<string, any>;\nexport type ClassArray = Array<ClassValue>;\n\nexport default function classNames(...args: Array<ClassValue>): string {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/classnames.ts",
    "run": "/src/classnames.run.test.ts",
    "submit": "/src/classnames.submit.test.ts"
  }
}