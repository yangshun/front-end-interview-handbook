{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/drop-right-while\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/drop-right-while.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/drop-right-while.run.test.ts": "import dropRightWhile from './drop-right-while';\n\ndescribe('dropRightWhile', () => {\n  test('empty array', () => {\n    expect(dropRightWhile([], (value, _index, _array) => value > 3)).toEqual(\n      [],\n    );\n  });\n\n  test('drop some elements', () => {\n    expect(\n      dropRightWhile([1, 2, 3, 4, 5], (value, _index, _array) => value > 3),\n    ).toEqual([1, 2, 3]);\n  });\n\n  test('drop everything', () => {\n    expect(\n      dropRightWhile([1, 2, 3, 4, 5], (value, _index, _array) => value < 6),\n    ).toEqual([]);\n  });\n});\n",
    "/src/drop-right-while.submit.test.ts": "import dropRightWhile from './drop-right-while';\n\ndescribe('dropRightWhile', () => {\n  test('empty array', () => {\n    expect(dropRightWhile([], (value, _index, _array) => value > 3)).toEqual(\n      [],\n    );\n  });\n\n  test('drop elements from the right until predicate returns false', () => {\n    expect(\n      dropRightWhile([1, 2, 3, 4, 5], (value, _index, _array) => value > 3),\n    ).toEqual([1, 2, 3]);\n  });\n\n  test('predicate always returns true', () => {\n    expect(\n      dropRightWhile([1, 2, 3, 4, 5], (value, _index, _array) => value < 6),\n    ).toEqual([]);\n  });\n\n  test('predicate always returns false', () => {\n    expect(\n      dropRightWhile([1, 2, 3, 4, 5], (value, _index, _array) => value < 0),\n    ).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('should stop dropping once predicate is false', () => {\n    expect(\n      dropRightWhile([1, 6, 3, 7, 8], (value, _index, _array) => value > 5),\n    ).toEqual([1, 6, 3]);\n  });\n\n  describe('required arguments are passed', () => {\n    test('index is passed', () => {\n      const array = [1, 2, 3, 4, 5];\n      expect(\n        dropRightWhile(array, (_value, index, _array) => index >= 3),\n      ).toEqual([1, 2, 3]);\n    });\n\n    test('array is passed', () => {\n      const array = [20, 30, 40, 5, 4]; // length is 5\n      expect(\n        dropRightWhile(array, (value, _index, arr) => value <= arr.length),\n      ).toEqual([20, 30, 40]);\n    });\n  });\n\n  test('should not modify the original input array', () => {\n    const array = [1, 2, 3, 4, 5];\n    dropRightWhile(array, (value, _index, _array) => value > 3);\n    expect(array).toEqual([1, 2, 3, 4, 5]);\n  });\n});\n",
    "/src/drop-right-while.ts": "export default function dropRightWhile<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n): Array<T> {\n  let index = array.length - 1;\n\n  while (index >= 0 && predicate(array[index], index, array)) {\n    index--;\n  }\n\n  return array.slice(0, index + 1);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - The array to iterate over.\n * @param {Function} predicate - The function invoked per iteration.\n * @return {Array} Returns the slice of `array`.\n */\nexport default function dropRightWhile(array, predicate) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function dropRightWhile<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n): Array<T> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/drop-right-while.ts",
    "run": "/src/drop-right-while.run.test.ts",
    "submit": "/src/drop-right-while.submit.test.ts"
  }
}