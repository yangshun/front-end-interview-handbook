{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/union\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/union.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"target\": \"es2020\",\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/union.run.test.ts": "import union from './union';\n\ndescribe('union', () => {\n  test('empty input array', () => {\n    expect(union([])).toEqual([]);\n  });\n\n  test('single value', () => {\n    expect(union([0])).toEqual([0]);\n  });\n\n  test('two values', () => {\n    expect(union([1, 2, 2])).toEqual([1, 2]);\n  });\n});\n",
    "/src/union.submit.test.ts": "import union from './union';\n\ndescribe('union', () => {\n  test('empty input array', () => {\n    expect(union([])).toEqual([]);\n  });\n\n  test('single value', () => {\n    expect(union([0])).toEqual([0]);\n    expect(union(['a'])).toEqual(['a']);\n  });\n\n  test('numbers', () => {\n    expect(union([4, 2, 8, 2])).toEqual([4, 2, 8]);\n    expect(union([1, 1, 1, 2, 2])).toEqual([1, 2]);\n  });\n\n  test('mixed data type', () => {\n    expect(union([-4, 'a', -4])).toEqual([-4, 'a']);\n    expect(union([true, 2, 3, 2, 'b'])).toEqual([true, 2, 3, 'b']);\n  });\n\n  test('more than one array', () => {\n    expect(union(['a', 'b'], ['a', 'c'])).toEqual(['a', 'b', 'c']);\n    expect(union([-2, -2], [-2, -2, -2])).toEqual([-2]);\n  });\n\n  test('objects as elements', () => {\n    const obj1 = { a: 1 };\n    const obj2 = { b: 2 };\n    expect(union([obj1], [obj1, obj2])).toEqual([obj1, obj2]);\n  });\n\n  test('false values', () => {\n    expect(union([null], [null, undefined])).toStrictEqual([null, undefined]);\n    expect(union([false, null, 0], [NaN, undefined])).toStrictEqual([\n      false,\n      null,\n      0,\n      NaN,\n      undefined,\n    ]);\n  });\n\n  test('large arrays', () => {\n    const largeArray1 = Array.from({ length: 1000 }, (_, i) => i);\n    const largeArray2 = Array.from({ length: 1000 }, (_, i) => i * 2);\n    expect(union(largeArray1, largeArray2).length).toBeLessThanOrEqual(1500);\n  });\n\n  test('complex elements', () => {\n    const date1 = new Date(2020, 1, 1);\n    const date2 = new Date(2021, 1, 1);\n    expect(union([date1], [date2])).toEqual([date1, date2]);\n  });\n});\n",
    "/src/union.ts": "export default function union<T>(...arrays: Array<Array<T>>): Array<T> {\r\n  const result: Array<T> = [];\r\n\r\n  arrays.forEach((array) => {\r\n    array.forEach((item: T) => {\r\n      // Check if the result array contains the `item`; if not, add it to the result.\r\n      if (!result.includes(item)) {\r\n        result.push(item);\r\n      }\r\n    });\r\n  });\r\n\r\n  return result;\r\n}\r\n"
  },
  "skeleton": {
    "js": "/**\n * @param {...Array} [arrays] Array from which the elements are all numbers.\n * @return {Array} Returns the new array of combined values.\n */\nexport default function union(...arrays) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function union<T>(...arrays: Array<Array<T>>): Array<T> {\r\n  throw 'Not implemented!';\r\n}"
  },
  "workspace": {
    "main": "/src/union.ts",
    "run": "/src/union.run.test.ts",
    "submit": "/src/union.submit.test.ts"
  }
}