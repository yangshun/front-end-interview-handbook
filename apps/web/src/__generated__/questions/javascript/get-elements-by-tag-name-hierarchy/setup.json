{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/get-elements-by-tag-name-hierarchy\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/get-elements-by-tag-name-hierarchy.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/get-elements-by-tag-name-hierarchy.run.test.ts": "import getElementsByTagNameHierarchy from './get-elements-by-tag-name-hierarchy';\n\nfunction checkResults(expected: NodeListOf<Element>, received: Array<Element>) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByTagNameHierarchy()', () => {\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByTagNameHierarchy(doc, 'div');\n    const expected = doc.querySelectorAll('div');\n\n    checkResults(expected, els);\n  });\n\n  test('single element with no nodes', () => {\n    const doc = new DOMParser().parseFromString(`<div></div>`, 'text/html');\n\n    const els = getElementsByTagNameHierarchy(doc, 'div');\n    const expected = doc.querySelectorAll('div');\n\n    checkResults(expected, els);\n  });\n\n  describe('single layer', () => {\n    test('single descendant node', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div><span></span></div>`,\n        'text/html',\n      );\n\n      const els = getElementsByTagNameHierarchy(doc, 'div span');\n      const expected = doc.querySelectorAll('div span');\n\n      checkResults(expected, els);\n    });\n\n    test('multiple matching descendant nodes', () => {\n      const doc = new DOMParser().parseFromString(\n        `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <span>Span 2</span>\n        </div>`,\n        'text/html',\n      );\n\n      const els = getElementsByTagNameHierarchy(doc, 'div span');\n      const expected = doc.querySelectorAll('div span');\n\n      checkResults(expected, els);\n    });\n  });\n\n  test('non-existent tags', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByTagNameHierarchy(doc, 'img');\n    const expected = doc.querySelectorAll('img');\n\n    checkResults(expected, els);\n  });\n\n  test('ignores comment nodes', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div>\n        <!-- Here's a comment -->\n        <div>Hello</div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByTagNameHierarchy(doc, 'div');\n    const expected = doc.querySelectorAll('div');\n\n    checkResults(expected, els);\n  });\n});\n",
    "/src/get-elements-by-tag-name-hierarchy.submit.test.ts": "import getElementsByTagNameHierarchy from './get-elements-by-tag-name-hierarchy';\n\nfunction checkResults(expected: NodeListOf<Element>, received: Array<Element>) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\ndescribe('getElementsByTagNameHierarchy()', () => {\n  test('empty tree', () => {\n    const doc = new DOMParser().parseFromString(``, 'text/html');\n    const els = getElementsByTagNameHierarchy(doc, 'div');\n    const expected = doc.querySelectorAll('div');\n\n    checkResults(expected, els);\n  });\n\n  test('single element with no nodes', () => {\n    const doc = new DOMParser().parseFromString(`<div></div>`, 'text/html');\n\n    const els = getElementsByTagNameHierarchy(doc, 'div');\n    const expected = doc.querySelectorAll('div');\n\n    checkResults(expected, els);\n  });\n\n  describe('varying tag token length', () => {\n    describe('one tag', () => {\n      test('no match', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span></span>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'p');\n        const expected = doc.querySelectorAll('p');\n        checkResults(expected, els);\n      });\n\n      test('one match', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span></span>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'span');\n        const expected = doc.querySelectorAll('span');\n        checkResults(expected, els);\n      });\n\n      test('two matches', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span></span>\n            <p></p>\n            <span></span>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'span');\n        const expected = doc.querySelectorAll('span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p></p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'span');\n        const expected = doc.querySelectorAll('span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches deep', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p>\n              <span>\n                <span></span>\n              </span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'span');\n        const expected = doc.querySelectorAll('span');\n        checkResults(expected, els);\n      });\n    });\n\n    describe('two tags', () => {\n      test('no match', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span></span>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'span div');\n        const expected = doc.querySelectorAll('span div');\n        checkResults(expected, els);\n      });\n\n      test('one match', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span></span>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div span');\n        const expected = doc.querySelectorAll('div span');\n        checkResults(expected, els);\n      });\n\n      test('two matches', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span></span>\n            <p></p>\n            <span></span>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div span');\n        const expected = doc.querySelectorAll('div span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p></p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div span');\n        const expected = doc.querySelectorAll('div span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches deep', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p>\n              <span>\n                <span></span>\n              </span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'p span');\n        const expected = doc.querySelectorAll('p span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches deep same tag', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p>\n              <span>\n                <span></span>\n              </span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'span span');\n        const expected = doc.querySelectorAll('span span');\n        checkResults(expected, els);\n      });\n    });\n\n    describe('three tags', () => {\n      test('no match', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <p>\n              <span></span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div span p');\n        const expected = doc.querySelectorAll('div span p');\n        checkResults(expected, els);\n      });\n\n      test('one match', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <p>\n              <span></span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div p span');\n        const expected = doc.querySelectorAll('div p span');\n        checkResults(expected, els);\n      });\n\n      test('two matches', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <p>\n              <span></span>\n            </p>\n            <p>\n              <span></span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div p span');\n        const expected = doc.querySelectorAll('div p span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p></p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div span span');\n        const expected = doc.querySelectorAll('div span span');\n        checkResults(expected, els);\n      });\n\n      test('inner matches deep', () => {\n        const doc = new DOMParser().parseFromString(\n          `<div>\n            <span>\n              <span></span>\n            </span>\n            <p>\n              <span>\n                <span></span>\n              </span>\n            </p>\n          </div>`,\n          'text/html',\n        );\n\n        const els = getElementsByTagNameHierarchy(doc, 'div p span');\n        const expected = doc.querySelectorAll('div p span');\n        checkResults(expected, els);\n      });\n    });\n  });\n\n  test('huge DOM tree', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n        <div>\n          <div>\n            <p>\n              <div>\n                <div>\n                  <span></span>\n                  <div>\n                    <div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </p>\n          </div>\n        </div>\n        <div>\n          <div>\n            <div>\n              <p>\n                <div>\n                  <span></span>\n                  <div>\n                    <div>\n                      <div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </p>\n            </div>\n          </div>\n        </div>`,\n      'text/html',\n    );\n\n    checkResults(\n      doc.querySelectorAll('div div'),\n      getElementsByTagNameHierarchy(doc, 'div div'),\n    );\n    checkResults(\n      doc.querySelectorAll('span'),\n      getElementsByTagNameHierarchy(doc, 'span'),\n    );\n    checkResults(\n      doc.querySelectorAll('div p'),\n      getElementsByTagNameHierarchy(doc, 'div p'),\n    );\n    checkResults(\n      doc.querySelectorAll('div p span'),\n      getElementsByTagNameHierarchy(doc, 'div p span'),\n    );\n    checkResults(\n      doc.querySelectorAll('div div span'),\n      getElementsByTagNameHierarchy(doc, 'div div span'),\n    );\n    checkResults(\n      doc.querySelectorAll('p span'),\n      getElementsByTagNameHierarchy(doc, 'p span'),\n    );\n    checkResults(\n      doc.querySelectorAll('div p div span'),\n      getElementsByTagNameHierarchy(doc, 'div p div span'),\n    );\n  });\n\n  test('ignores comment nodes', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div>\n        <!-- Here's a comment -->\n        <div>Hello</div>\n      </div>`,\n      'text/html',\n    );\n\n    const els = getElementsByTagNameHierarchy(doc, 'div');\n    const expected = doc.querySelectorAll('div');\n\n    checkResults(expected, els);\n  });\n\n  test('mixed case tag names', () => {\n    const doc = new DOMParser().parseFromString(\n      `<div>\n          <span>Span</span>\n          <p>Paragraph</p>\n          <div>\n            <div>\n              <span>Hello</span>\n            </div>\n          </div>\n        </div>\n        <div>Hello</div>`,\n      'text/html',\n    );\n\n    const divs = getElementsByTagNameHierarchy(doc, 'DIV div');\n    const expectedDivs = doc.querySelectorAll('DIV div'.toLocaleLowerCase());\n    checkResults(expectedDivs, divs);\n\n    const spans = getElementsByTagNameHierarchy(doc, 'div P sPaN');\n    const expectedSpans = doc.querySelectorAll(\n      'div P sPaN'.toLocaleLowerCase(),\n    );\n    checkResults(expectedSpans, spans);\n  });\n});\n",
    "/src/get-elements-by-tag-name-hierarchy.ts": "export default function getElementsByTagNameHierarchy(\n  document: Document,\n  tagNames: string,\n): Array<Element> {\n  const results: Array<Element> = [];\n  const tagTokens = tagNames.toUpperCase().trim().split(/\\s+/);\n  const lastIndex = tagTokens.length - 1;\n\n  if (tagTokens.length === 0) {\n    return results;\n  }\n\n  function traverse(el: Element, tagTokenIndex: number) {\n    if (el == null) {\n      return;\n    }\n\n    const currentTagToken = tagTokens[tagTokenIndex];\n    const elementMatchesCurrentTag = el.tagName === currentTagToken;\n    const isLastTag = tagTokenIndex === lastIndex;\n\n    if (elementMatchesCurrentTag && isLastTag) {\n      results.push(el);\n    }\n\n    const nextIndex = elementMatchesCurrentTag\n      ? Math.min(tagTokenIndex + 1, lastIndex) // So as not to increment past the last index.\n      : tagTokenIndex;\n\n    for (const child of el.children) {\n      traverse(child, nextIndex);\n    }\n  }\n\n  traverse(document.body, 0);\n\n  return results;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Document} document\n * @param {string} tagNames\n * @return {Array<Element>}\n */\nexport default function getElementsByTagNameHierarchy(document, tagNames) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function getElementsByTagNameHierarchy(\n  document: Document,\n  tagNames: string,\n): Array<Element> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/get-elements-by-tag-name-hierarchy.ts",
    "run": "/src/get-elements-by-tag-name-hierarchy.run.test.ts",
    "submit": "/src/get-elements-by-tag-name-hierarchy.submit.test.ts"
  }
}