{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/html-serializer\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/html-serializer.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/html-serializer.run.test.ts": "import serializeHTML from './html-serializer';\n\ndescribe('HTML serializer', () => {\n  test('single children', () => {\n    expect(\n      serializeHTML({\n        tag: 'div',\n        children: ['foo'],\n      }),\n    ).toEqual('<div>\\n\\tfoo\\n</div>');\n  });\n\n  test('single tag two children', () => {\n    expect(serializeHTML({ children: ['bar1', 'bar2'], tag: 'span' })).toEqual(\n      '<span>\\n\\tbar1\\n\\tbar2\\n</span>',\n    );\n  });\n});\n",
    "/src/html-serializer.submit.test.ts": "import serializeHTML from './html-serializer';\n\ndescribe('HTML serializer', () => {\n  describe('single tag', () => {\n    test('single children', () => {\n      expect(\n        serializeHTML({\n          tag: 'div',\n          children: ['foo'],\n        }),\n      ).toEqual('<div>\\n\\tfoo\\n</div>');\n    });\n\n    test('single tag two children', () => {\n      expect(\n        serializeHTML({ children: ['bar1', 'bar2'], tag: 'span' }),\n      ).toEqual('<span>\\n\\tbar1\\n\\tbar2\\n</span>');\n    });\n  });\n\n  test('deeply nested', () => {\n    expect(\n      serializeHTML({\n        tag: 'body',\n        children: [\n          { tag: 'div', children: [{ tag: 'span', children: ['foo', 'bar'] }] },\n          { tag: 'div', children: ['baz'] },\n        ],\n      }),\n    ).toEqual(\n      '<body>\\n\\t<div>\\n\\t\\t<span>\\n\\t\\t\\tfoo\\n\\t\\t\\tbar\\n\\t\\t</span>\\n\\t</div>\\n\\t<div>\\n\\t\\tbaz\\n\\t</div>\\n</body>',\n    );\n  });\n});\n",
    "/src/html-serializer.ts": "type Element = string | { tag: string; children: Array<string | Element> };\n\nexport default function serializeHTML(element: Element, indent = '\\t'): string {\n  function traverse(element: Element, depth = 0): string {\n    if (typeof element === 'string') {\n      return `${indent.repeat(depth)}${element}`;\n    }\n\n    return [\n      `${indent.repeat(depth)}<${element.tag.toLowerCase()}>`,\n      ...element.children.flatMap((child) => traverse(child, depth + 1)),\n      `${indent.repeat(depth)}</${element.tag.toLowerCase()}>`,\n    ].join('\\n');\n  }\n\n  return traverse(element);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Object} element\n * @return {string}\n */\nexport default function serializeHTML(element) {\n  throw 'Not implemented!';\n}",
    "ts": "type Element = { tag: string; children: Array<string | Element> };\n\nexport default function serializeHTML(element: Element): string {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/html-serializer.ts",
    "run": "/src/html-serializer.run.test.ts",
    "submit": "/src/html-serializer.submit.test.ts"
  }
}