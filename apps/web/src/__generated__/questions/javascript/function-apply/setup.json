{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/function-apply\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/function-apply.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/function-apply.run.test.ts": "import './function-apply';\n\ndescribe('Function.prototype.myApply', () => {\n  const person = {\n    name: 'John',\n  };\n\n  function getName(this: any) {\n    return this.name;\n  }\n\n  function sum(...args: Array<number>) {\n    return args.reduce((acc, num) => acc + num, 0);\n  }\n\n  test('Function.prototype.myApply is a function', () => {\n    expect(typeof Function.prototype.myApply).toBe('function');\n  });\n\n  test('`this` is bound', () => {\n    expect(getName.myApply(person)).toStrictEqual('John');\n  });\n\n  test('with a parameter', () => {\n    expect(sum.myApply(null, [1])).toBe(1);\n  });\n});\n",
    "/src/function-apply.submit.test.ts": "import './function-apply';\n\ndescribe('Function.prototype.myApply', () => {\n  const person = {\n    name: 'John',\n  };\n\n  function getName(this: any) {\n    return this.name;\n  }\n\n  function sum(...args: Array<number>) {\n    return args.reduce((acc, num) => acc + num, 0);\n  }\n\n  function greeting(this: any, prefix: string, message: string) {\n    return `${prefix} ${this.name}, ${message}`;\n  }\n\n  test('Function.prototype.myApply is a function', () => {\n    expect(typeof Function.prototype.myApply).toBe('function');\n  });\n\n  test('`this` is bound', () => {\n    expect(getName.myApply(person)).toStrictEqual('John');\n  });\n\n  describe('without `this`', () => {\n    test('single parameter', () => {\n      expect(sum.myApply(null, [1])).toBe(1);\n    });\n\n    test('two parameters', () => {\n      expect(sum.myApply(null, [1, 2])).toBe(3);\n    });\n\n    test('three parameters', () => {\n      expect(sum.myApply(null, [1, 2, 3])).toBe(6);\n    });\n  });\n\n  test('`this` and parameters', () => {\n    expect(greeting.myApply(person, ['Hello', 'how are you?'])).toStrictEqual(\n      'Hello John, how are you?',\n    );\n  });\n});\n",
    "/src/function-apply.ts": "interface Function {\n  myApply(this: any, thisArg: any, argArray?: any[]): any;\n}\n\nFunction.prototype.myApply = function (thisArg, argArray = []) {\n  return this.bind(thisArg)(...argArray);\n};\n"
  },
  "skeleton": {
    "js": "/**\n * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n * @param thisArg The object to be used as the this object.\n * @param argArray A set of arguments to be passed to the function.\n * @return {any}\n */\nFunction.prototype.myApply = function (thisArg, argArray) {\n  throw 'Not implemented!';\n};",
    "ts": "interface Function {\n  myApply(this: any, thisArg: any, argArray?: any[]): any;\n}\n\nFunction.prototype.myApply = function (thisArg, args) {\n  throw 'Not implemented!';\n};"
  },
  "workspace": {
    "main": "/src/function-apply.ts",
    "run": "/src/function-apply.run.test.ts",
    "submit": "/src/function-apply.submit.test.ts"
  }
}