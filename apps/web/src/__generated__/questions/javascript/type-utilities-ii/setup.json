{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/type-utilities-ii\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/type-utilities-ii.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/type-utilities-ii.run.test.ts": "import {\n  isArray,\n  isFunction,\n  isObject,\n  isPlainObject,\n} from './type-utilities-ii';\n\ndescribe('type-utilities-ii', () => {\n  test('isArray', () => {\n    expect(isArray([])).toBe(true);\n  });\n\n  test('isFunction', () => {\n    function identity<T>(x: T): T {\n      return x;\n    }\n\n    expect(isFunction(identity)).toBe(true);\n  });\n\n  test('isObject', () => {\n    expect(isObject({ a: 1 })).toBe(true);\n  });\n\n  test('isPlainObject', () => {\n    expect(isPlainObject({})).toBe(true);\n  });\n});\n",
    "/src/type-utilities-ii.submit.test.ts": "import {\n  isArray,\n  isFunction,\n  isObject,\n  isPlainObject,\n} from './type-utilities-ii';\n\ndescribe('type-utilities-ii', () => {\n  describe('isArray', () => {\n    test('array', () => {\n      expect(isArray([])).toBe(true);\n      expect(isArray([1, 2])).toBe(true);\n      expect(isArray([1])).toBe(true);\n      expect(isArray(new Array(3))).toBe(true);\n      expect(isArray(Array(3))).toBe(true);\n      expect(isArray(Array.from({ length: 10 }, (_, i) => i))).toBe(true);\n    });\n\n    test('non-array', () => {\n      expect(isArray(true)).toBe(false);\n      expect(isArray(false)).toBe(false);\n      expect(isArray('true')).toBe(false);\n      expect(isArray(new Date())).toBe(false);\n      expect(isArray(new Error())).toBe(false);\n      expect(isArray({ a: 1 })).toBe(false);\n      expect(isArray(/x/)).toBe(false);\n      expect(isArray('a')).toBe(false);\n      expect(isArray(null)).toBe(false);\n      expect(isArray(undefined)).toBe(false);\n      expect(isArray(1)).toBe(false);\n      expect(isArray(NaN)).toBe(false);\n      expect(isArray(Symbol('symbol'))).toBe(false);\n      expect(isArray(new Uint8Array(32))).toBe(false);\n    });\n  });\n\n  describe('isFunction', () => {\n    test('function declarations', () => {\n      function identity<T>(x: T): T {\n        return x;\n      }\n      expect(isFunction(identity)).toBe(true);\n    });\n\n    test('arrow functions', () => {\n      const identity = <T>(x: T) => {\n        return x;\n      };\n      expect(isFunction(identity)).toBe(true);\n    });\n\n    test('non-function', () => {\n      expect(isFunction(true)).toBe(false);\n      expect(isFunction(false)).toBe(false);\n      expect(isFunction('true')).toBe(false);\n      expect(isFunction([1, 2, 3])).toBe(false);\n      expect(isFunction(new Date())).toBe(false);\n      expect(isFunction(new Error())).toBe(false);\n      expect(isFunction({ a: 1 })).toBe(false);\n      expect(isFunction(/x/)).toBe(false);\n      expect(isFunction('a')).toBe(false);\n      expect(isFunction(null)).toBe(false);\n      expect(isFunction(undefined)).toBe(false);\n      expect(isFunction(1)).toBe(false);\n      expect(isFunction(NaN)).toBe(false);\n      expect(isFunction(Symbol('symbol'))).toBe(false);\n    });\n  });\n\n  describe('isObject', () => {\n    test('object', () => {\n      expect(isObject([1, 2, 3])).toBe(true);\n      expect(isObject(Object(false))).toBe(true);\n      expect(isObject(new Date())).toBe(true);\n      expect(isObject(new Error())).toBe(true);\n      expect(isObject({ a: 1 })).toBe(true);\n      expect(isObject(Object(0))).toBe(true);\n      expect(isObject(/x/)).toBe(true);\n      expect(isObject(Object('a'))).toBe(true);\n      expect(isObject(new Set())).toBe(true);\n      expect(isObject(new Map())).toBe(true);\n      expect(isObject(() => {})).toBe(true);\n    });\n\n    test('class instance', () => {\n      class Foo {\n        value: number;\n\n        constructor(value: number) {\n          this.value = value;\n        }\n      }\n\n      expect(isObject(new Foo(1))).toBe(true);\n    });\n\n    test('function instance', () => {\n      function Foo(this: any, value: number) {\n        this.value = value;\n      }\n\n      expect(isObject(new (Foo as any)(1))).toBe(true);\n    });\n\n    test('non-object', () => {\n      expect(isObject(true)).toBe(false);\n      expect(isObject(false)).toBe(false);\n      expect(isObject('true')).toBe(false);\n      expect(isObject('a')).toBe(false);\n      expect(isObject(null)).toBe(false);\n      expect(isObject(undefined)).toBe(false);\n      expect(isObject(1)).toBe(false);\n      expect(isObject(NaN)).toBe(false);\n      expect(isObject(Symbol('symbol'))).toBe(false);\n    });\n  });\n\n  describe('isPlainObject', () => {\n    test('object literals', () => {\n      function Foo(this: any, value: any) {\n        this.value = value;\n      }\n\n      expect(isPlainObject({})).toBe(true);\n      expect(isPlainObject({ a: 1 })).toBe(true);\n      expect(isPlainObject({ constructor: Foo })).toBe(true);\n    });\n\n    test('object without prototype', () => {\n      expect(isPlainObject(Object.create(null))).toBe(true);\n    });\n\n    test('class instance', () => {\n      class Foo {\n        value: number;\n\n        constructor(value: number) {\n          this.value = value;\n        }\n      }\n\n      expect(isPlainObject(new Foo(1))).toBe(false);\n    });\n\n    test('function instance', () => {\n      function Foo(this: any, value: any) {\n        this.value = value;\n      }\n\n      expect(isPlainObject(new (Foo as any)(1))).toBe(false);\n    });\n\n    test('non-plain objects', () => {\n      expect(isPlainObject(true)).toBe(false);\n      expect(isPlainObject(false)).toBe(false);\n      expect(isPlainObject('true')).toBe(false);\n      expect(isPlainObject([1, 2, 3])).toBe(false);\n      expect(isPlainObject(new Date())).toBe(false);\n      expect(isPlainObject(new Error())).toBe(false);\n      expect(isPlainObject(/x/)).toBe(false);\n      expect(isPlainObject('a')).toBe(false);\n      expect(isPlainObject(null)).toBe(false);\n      expect(isPlainObject(undefined)).toBe(false);\n      expect(isPlainObject(1)).toBe(false);\n      expect(isPlainObject(NaN)).toBe(false);\n      expect(isPlainObject(Symbol('symbol'))).toBe(false);\n      expect(isPlainObject(new Set())).toBe(false);\n      expect(isPlainObject(new Map())).toBe(false);\n    });\n  });\n});\n",
    "/src/type-utilities-ii.ts": "export function isArray(value: unknown): boolean {\n  return Array.isArray(value);\n}\n\n// Alternative to isArray.\nexport function isArrayAlt(value: unknown): boolean {\n  // For null and undefined.\n  if (value == null) {\n    return false;\n  }\n\n  return value.constructor === Array;\n}\n\nexport function isFunction(value: unknown): boolean {\n  return typeof value === 'function';\n}\n\nexport function isObject(value: unknown): boolean {\n  // For null and undefined.\n  if (value == null) {\n    return false;\n  }\n\n  const type = typeof value;\n  return type === 'object' || type === 'function';\n}\n\nexport function isPlainObject(value: unknown): boolean {\n  // For null and undefined.\n  if (value == null) {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(value);\n  return prototype === null || prototype === Object.prototype;\n}\n\n// Alternative to isPlainObject, Lodash's implementation.\nexport function isPlainObjectAlternative(value: unknown): boolean {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  // For objects created via Object.create(null);\n  if (Object.getPrototypeOf(value) === null) {\n    return true;\n  }\n\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n}\n"
  },
  "skeleton": {
    "js": "export function isArray(value) {\n  throw 'Not implemented!';\n}\n\nexport function isFunction(value) {\n  throw 'Not implemented!';\n}\n\nexport function isObject(value) {\n  throw 'Not implemented!';\n}\n\nexport function isPlainObject(value) {\n  throw 'Not implemented!';\n}",
    "ts": "export function isArray(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isFunction(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isObject(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isPlainObject(value: unknown): boolean {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/type-utilities-ii.ts",
    "run": "/src/type-utilities-ii.run.test.ts",
    "submit": "/src/type-utilities-ii.submit.test.ts"
  }
}