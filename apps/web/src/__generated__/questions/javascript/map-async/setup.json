{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/map-async\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/map-async.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/map-async.run.test.ts": "import mapAsync from './map-async';\n\nconst asyncIdentity = (x: number) => Promise.resolve(x);\nconst asyncDouble = (x: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x * 2);\n    }, 10);\n  });\n\ndescribe('mapAsync', () => {\n  test('returns promise', () => {\n    const p = mapAsync([], asyncIdentity);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await mapAsync([], asyncIdentity);\n    expect(res).toEqual([]);\n  });\n\n  test('resolved', async () => {\n    expect.assertions(1);\n    const res = await mapAsync([1, 2], asyncDouble);\n    expect(res).toEqual([2, 4]);\n  });\n});\n",
    "/src/map-async.submit.test.ts": "import mapAsync from './map-async';\n\nconst asyncIdentity = (x: number) => Promise.resolve(x);\nconst asyncDouble = (x: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x * 2);\n    }, 10);\n  });\nconst asyncSquare = (x: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x * x);\n    }, 10);\n  });\nconst asyncRejectOdd = (x: number) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (x % 2 === 1) {\n        reject(x * 3);\n      }\n\n      resolve(x * 2);\n    }, 10);\n  });\n\ndescribe('mapAsync', () => {\n  test('returns promise', () => {\n    const p = mapAsync([], asyncIdentity);\n    expect(p).toBeInstanceOf(Promise);\n  });\n\n  test('empty input array', async () => {\n    expect.assertions(1);\n    const res = await mapAsync([], asyncIdentity);\n    expect(res).toEqual([]);\n  });\n\n  test('single item', async () => {\n    expect.assertions(1);\n    const res = await mapAsync([3], asyncDouble);\n    expect(res).toEqual([6]);\n  });\n\n  describe('multiple items', () => {\n    test('two items', async () => {\n      expect.assertions(1);\n      const res = await mapAsync([1, 2], asyncDouble);\n      expect(res).toEqual([2, 4]);\n    });\n\n    test('three items', async () => {\n      expect.assertions(1);\n      const res = await mapAsync([2, 3, 4], asyncSquare);\n      expect(res).toEqual([4, 9, 16]);\n    });\n\n    test('some rejected', async () => {\n      expect.assertions(1);\n      await expect(mapAsync([2, 3], asyncRejectOdd)).rejects.toBe(9);\n    });\n  });\n});\n",
    "/src/map-async.ts": "export default function mapAsync<T, U>(\n  iterable: Array<T>,\n  callbackFn: (value: T) => Promise<U>,\n): Promise<Array<U>> {\n  return new Promise((resolve, reject) => {\n    const results = new Array(iterable.length);\n    let unresolved = iterable.length;\n\n    if (unresolved === 0) {\n      resolve(results);\n      return;\n    }\n\n    iterable.forEach((item, index) => {\n      callbackFn(item)\n        .then((value) => {\n          results[index] = value;\n          unresolved -= 1;\n\n          if (unresolved === 0) {\n            resolve(results);\n          }\n        })\n        .catch((err) => reject(err));\n    });\n  });\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<any>} iterable\n * @param {Function} callbackFn\n *\n * @return {Promise}\n */\nexport default function mapAsync(iterable, callbackFn) {\n  throw 'Not implemented';\n}",
    "ts": "export default function mapAsync<T, U>(\n  iterable: Array<T>,\n  callbackFn: (value: T) => Promise<U>,\n): Promise<Array<U>> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/map-async.ts",
    "run": "/src/map-async.run.test.ts",
    "submit": "/src/map-async.submit.test.ts"
  }
}