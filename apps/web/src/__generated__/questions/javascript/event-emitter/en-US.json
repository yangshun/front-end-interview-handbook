{
  "description": "var Component=(()=>{var a=Object.create;var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),u=(n,e)=>{for(var r in e)d(n,r,{get:e[r],enumerable:!0})},h=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(n,i)&&i!==r&&d(n,i,{get:()=>e[i],enumerable:!(c=m(e,i))||c.enumerable});return n};var g=(n,e,r)=>(r=n!=null?a(v(n)):{},h(e||!n||!n.__esModule?d(r,\"default\",{value:n,enumerable:!0}):r,n)),w=n=>h(d({},\"__esModule\",{value:!0}),n);var o=f((j,l)=>{l.exports=_jsx_runtime});var N={};u(N,{default:()=>y,frontmatter:()=>E});var t=g(o()),E={title:\"Event Emitter\",excerpt:\"Implement a class that can subscribe to and emit events that trigger attached callback functions\"};function s(n){let e=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",code:\"code\",pre:\"pre\",h2:\"h2\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"In the \",(0,t.jsx)(e.a,{href:\"https://www.patterns.dev/posts/observer-pattern/\",children:(0,t.jsx)(e.strong,{children:\"observer pattern\"})}),\" (also commonly known as the publish-subscribe model), we can observe/subscribe to events emitted by publishers and execute code whenever an event happens.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement an \",(0,t.jsxs)(e.a,{href:\"https://nodejs.org/api/events.html#class-eventemitter\",children:[(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" class\"]}),\" similar to the one in \",(0,t.jsx)(e.a,{href:\"https://nodejs.org/api/events.html\",children:\"Node.js\"}),\" that follows such an observer pattern.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Example usage of the \",(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" class:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const emitter = new EventEmitter();\n\nfunction addTwoNumbers(a, b) {\n  console.log(\\`The sum is \\${a + b}\\`);\n}\nemitter.on('foo', addTwoNumbers);\nemitter.emit('foo', 2, 5);\n// > \"The sum is 7\"\n\nemitter.on('foo', (a, b) => console.log(\\`The product is \\${a * b}\\`));\nemitter.emit('foo', 4, 5);\n// > \"The sum is 9\"\n// > \"The product is 20\"\n\nemitter.off('foo', addTwoNumbers);\nemitter.emit('foo', -3, 9);\n// > \"The product is -27\"\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Implement the following APIs:\"}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"new EventEmitter()\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Creates an instance of the \",(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" class. Events and listeners are isolated within the \",(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" instances they're added to, aka listeners shouldn't react to events emitted by other \",(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" instances.\"]}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"emitter.on(eventName, listener)\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Adds a callback function (\",(0,t.jsx)(e.code,{children:\"listener\"}),\") that will be invoked when an event with the name \",(0,t.jsx)(e.code,{children:\"eventName\"}),\" is emitted.\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Parameter\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"eventName\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"string\"})}),(0,t.jsx)(e.td,{children:\"The name of the event.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"listener\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"Function\"})}),(0,t.jsx)(e.td,{children:\"The callback function to be invoked when the event occurs.\"})]})]})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Returns the \",(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" instance so that calls can be chained.\"]}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"emitter.off(eventName, listener)\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Removes the specified \",(0,t.jsx)(e.code,{children:\"listener\"}),\" from the list of listeners for the event with the name \",(0,t.jsx)(e.code,{children:\"eventName\"}),\".\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Parameter\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"eventName\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"string\"})}),(0,t.jsx)(e.td,{children:\"The name of the event.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"listener\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"Function\"})}),(0,t.jsx)(e.td,{children:\"Callback function to be removed from the list of listeners for the event.\"})]})]})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Returns the \",(0,t.jsx)(e.code,{children:\"EventEmitter\"}),\" instance so that calls can be chained.\"]}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.code,{children:\"emitter.emit(eventName[, ...args])\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Invokes each of the listeners listening to \",(0,t.jsx)(e.code,{children:\"eventName\"}),\" with the supplied arguments in order.\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Parameter\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"eventName\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"string\"})}),(0,t.jsx)(e.td,{children:\"The name of the event.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"...args\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"any\"})}),(0,t.jsx)(e.td,{children:\"Arguments to invoke the list of listener functions with.\"})]})]})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Returns \",(0,t.jsx)(e.code,{children:\"true\"}),\" if the event had listeners, \",(0,t.jsx)(e.code,{children:\"false\"}),\" otherwise.\"]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s(n)}var y=T;return w(N);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/event-emitter\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/event-emitter.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/event-emitter.run.test.ts": "import EventEmitter from './event-emitter';\n\ndescribe('EventEmitter', () => {\n  test('constructor', () => {\n    const emitter = new EventEmitter();\n    expect(emitter).toBeInstanceOf(EventEmitter);\n  });\n\n  test('subscribe', () => {\n    const emitter = new EventEmitter();\n    let a = 0;\n    emitter.on('foo', () => {\n      a = 1;\n    });\n    emitter.emit('foo');\n\n    expect(a).toBe(1);\n  });\n\n  test('emit', () => {\n    const emitter = new EventEmitter();\n\n    let sum = 0;\n    emitter.on('foo', (a: number) => {\n      sum = a;\n    });\n    emitter.emit('foo', 3);\n    expect(sum).toBe(3);\n\n    emitter.emit('foo', 5);\n    expect(sum).toBe(5);\n  });\n});\n",
    "/src/event-emitter.submit.test.ts": "import EventEmitter from './event-emitter';\n\ndescribe('EventEmitter', () => {\n  test('constructor', () => {\n    const emitter = new EventEmitter();\n    expect(emitter).toBeInstanceOf(EventEmitter);\n  });\n\n  describe('methods can be chained', () => {\n    test('on() can be chained', () => {\n      const emitter = new EventEmitter();\n      emitter.on('foo', () => {}).on('foo', () => {});\n    });\n\n    test('off() can be chained', () => {\n      const emitter = new EventEmitter();\n      emitter.off('foo', () => {}).off('foo', () => {});\n    });\n  });\n\n  describe('subscribe', () => {\n    test('single listener', () => {\n      const emitter = new EventEmitter();\n      let a = 0;\n      emitter.on('foo', () => {\n        a = 1;\n      });\n      emitter.emit('foo');\n\n      expect(a).toBe(1);\n    });\n\n    test('multiple listeners', () => {\n      const emitter = new EventEmitter();\n      let a = 0,\n        b = 1;\n      emitter.on('foo', () => {\n        a = 1;\n      });\n      emitter.on('foo', () => {\n        b = 3;\n      });\n      emitter.emit('foo');\n\n      expect(a).toBe(1);\n      expect(b).toBe(3);\n    });\n\n    test('multiple events', () => {\n      const emitter = new EventEmitter();\n      let a = 0,\n        b = 1;\n      emitter.on('foo', () => {\n        a = 1;\n      });\n      emitter.on('bar', () => {\n        b = 3;\n      });\n      emitter.emit('foo');\n      expect(a).toBe(1);\n      expect(b).toBe(1);\n\n      emitter.emit('bar');\n      expect(b).toBe(3);\n    });\n\n    test('same listener added multiple times', () => {\n      const emitter = new EventEmitter();\n\n      let num = 1;\n      function double() {\n        num *= 2;\n      }\n\n      emitter.on('double', double);\n      emitter.emit('double');\n      expect(num).toBe(2);\n\n      emitter.on('double', double);\n      emitter.emit('double');\n      expect(num).toBe(8);\n    });\n  });\n\n  describe('emit', () => {\n    test('existing event returns true', () => {\n      const emitter = new EventEmitter();\n\n      emitter.on('foo', () => {});\n      expect(emitter.emit('foo')).toBe(true);\n    });\n\n    describe('listeners are invoked with arguments', () => {\n      test('single argument', () => {\n        const emitter = new EventEmitter();\n\n        let sum = 0;\n        emitter.on('foo', (a: number) => {\n          sum = a;\n        });\n        emitter.emit('foo', 3);\n        expect(sum).toBe(3);\n\n        emitter.emit('foo', 5);\n        expect(sum).toBe(5);\n      });\n\n      test('two arguments', () => {\n        const emitter = new EventEmitter();\n\n        let sum = 0;\n        emitter.on('foo', (a: number, b: number) => {\n          sum = a + b;\n        });\n        emitter.emit('foo', 3, 5);\n        expect(sum).toBe(8);\n\n        emitter.emit('foo', 4, 13);\n        expect(sum).toBe(17);\n      });\n\n      test('three arguments', () => {\n        const emitter = new EventEmitter();\n\n        let product = 0;\n        emitter.on('foo', (a: number, b: number, c: number) => {\n          product = a * b * c;\n        });\n        emitter.emit('foo', 3, 5, 6);\n        expect(product).toBe(90);\n\n        emitter.emit('foo', 4, 13, 9);\n        expect(product).toBe(468);\n      });\n    });\n\n    describe('non-existing event name returns false', () => {\n      test('custom event', () => {\n        const emitter = new EventEmitter();\n\n        expect(emitter.emit('foo')).toBe(false);\n      });\n\n      test('same name as built-in event', () => {\n        const emitter = new EventEmitter();\n\n        expect(emitter.emit('toString')).toBe(false);\n      });\n    });\n  });\n\n  describe('unsubscribe', () => {\n    test('single listener', () => {\n      const emitter = new EventEmitter();\n\n      let sum = 0;\n      function addTwoNumbers(a: number, b: number) {\n        sum = a + b;\n      }\n      emitter.on('foo', addTwoNumbers);\n      expect(emitter.emit('foo', 2, 5)).toBe(true);\n      expect(sum).toBe(7);\n\n      emitter.off('foo', addTwoNumbers);\n      expect(emitter.emit('foo', -3, 9)).toBe(false);\n      expect(sum).toBe(7);\n    });\n\n    test('multiple listeners', () => {\n      const emitter = new EventEmitter();\n\n      let sum = 0;\n      function addTwoNumbers(a: number, b: number) {\n        sum = a + b;\n      }\n      emitter.on('foo', addTwoNumbers);\n      expect(emitter.emit('foo', 2, 5)).toBe(true);\n      expect(sum).toBe(7);\n\n      let product = 0;\n      function multiplyTwoNumbers(a: number, b: number) {\n        product = a * b;\n      }\n      emitter.on('foo', multiplyTwoNumbers);\n      expect(emitter.emit('foo', 4, 5)).toBe(true);\n      expect(sum).toBe(9);\n      expect(product).toBe(20);\n\n      emitter.off('foo', addTwoNumbers);\n      expect(emitter.emit('foo', -3, 9)).toBe(true);\n      expect(sum).toBe(9);\n      expect(product).toBe(-27);\n\n      emitter.off('foo', multiplyTwoNumbers);\n      expect(emitter.emit('foo', 3, 7)).toBe(false);\n      expect(sum).toBe(9);\n      expect(product).toBe(-27);\n    });\n\n    test('multiple events', () => {\n      const emitter = new EventEmitter();\n\n      let sum = 0;\n      function addTwoNumbers(a: number, b: number) {\n        sum = a + b;\n      }\n      emitter.on('foo', addTwoNumbers);\n      expect(emitter.emit('foo', 2, 5)).toBe(true);\n      expect(sum).toBe(7);\n\n      expect(emitter.emit('bar', 3, 7)).toBe(false);\n      emitter.on('bar', addTwoNumbers);\n      expect(emitter.emit('bar', 3, 7)).toBe(true);\n      expect(sum).toBe(10);\n\n      emitter.off('foo', addTwoNumbers);\n      expect(emitter.emit('foo', -3, 9)).toBe(false);\n      expect(sum).toBe(10);\n\n      emitter.off('bar', addTwoNumbers);\n      expect(emitter.emit('bar', -3, 9)).toBe(false);\n      expect(sum).toBe(10);\n    });\n\n    test('same listener added multiple times removed correctly', () => {\n      const emitter = new EventEmitter();\n\n      let num = 1;\n      function double() {\n        num *= 2;\n      }\n\n      emitter.on('double', double);\n      emitter.emit('double');\n      expect(num).toBe(2);\n\n      emitter.on('double', double);\n      emitter.emit('double');\n      expect(num).toBe(8);\n\n      emitter.off('double', double);\n      emitter.emit('double');\n      expect(num).toBe(16);\n\n      emitter.off('double', double);\n      emitter.emit('double');\n      expect(num).toBe(16);\n    });\n  });\n});\n",
    "/src/event-emitter.ts": "interface IEventEmitter {\n  on(eventName: string, listener: Function): IEventEmitter;\n  off(eventName: string, listener: Function): IEventEmitter;\n  emit(eventName: string, ...args: Array<any>): boolean;\n}\n\nexport default class EventEmitter implements IEventEmitter {\n  _events: Record<string, Array<Function>>;\n\n  constructor() {\n    // Avoid creating objects via `{}` to exclude unwanted properties\n    // on the prototype (such as `.toString`).\n    this._events = Object.create(null);\n  }\n\n  on(eventName: string, listener: Function): IEventEmitter {\n    if (!Object.hasOwn(this._events, eventName)) {\n      this._events[eventName] = [];\n    }\n\n    this._events[eventName].push(listener);\n    return this;\n  }\n\n  off(eventName: string, listener: Function): IEventEmitter {\n    // Ignore non-existing eventNames.\n    if (!Object.hasOwn(this._events, eventName)) {\n      return this;\n    }\n\n    const listeners = this._events[eventName];\n\n    // Find only first instance of the listener.\n    const index = listeners.findIndex(\n      (listenerItem) => listenerItem === listener,\n    );\n\n    if (index < 0) {\n      return this;\n    }\n\n    this._events[eventName].splice(index, 1);\n    return this;\n  }\n\n  emit(eventName: string, ...args: Array<any>): boolean {\n    // Return false for non-existing eventNames or events without listeners.\n    if (\n      !Object.hasOwn(this._events, eventName) ||\n      this._events[eventName].length === 0\n    ) {\n      return false;\n    }\n\n    // Make a clone of the listeners in case one of the listeners\n    // mutates this listener array.\n    const listeners = this._events[eventName].slice();\n    listeners.forEach((listener) => {\n      listener.apply(null, args);\n    });\n\n    return true;\n  }\n}\n"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [
      "google",
      "lyft",
      "rippling",
      "tiktok",
      "bytedance",
      "microsoft"
    ],
    "created": 1669420800,
    "difficulty": "medium",
    "duration": 20,
    "excerpt": "Implement a class that can subscribe to and emit events that trigger attached callback functions",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/event-emitter",
    "importance": "medium",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "event-emitter-ii"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "event-emitter-ii",
      "jquery-class-manipulation"
    ],
    "slug": "event-emitter",
    "subtitle": null,
    "title": "Event Emitter",
    "topics": [
      "oop"
    ]
  },
  "skeleton": {
    "js": "// You are free to use alternative approaches of\n// instantiating the EventEmitter as long as the\n// default export is correct.\n\nexport default class EventEmitter {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  on(eventName, listener) {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  off(eventName, listener) {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * @param {string} eventName\n   * @param  {...any} args\n   * @returns {boolean}\n   */\n  emit(eventName, ...args) {\n    throw 'Not implemented!';\n  }\n}",
    "ts": "interface IEventEmitter {\n  on(eventName: string, listener: Function): IEventEmitter;\n  off(eventName: string, listener: Function): IEventEmitter;\n  emit(eventName: string, ...args: Array<any>): boolean;\n}\n\n// You are free to use alternative approaches of\n// instantiating the EventEmitter as long as the\n// default export is correct.\nexport default class EventEmitter implements IEventEmitter {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  on(eventName: string, listener: Function): IEventEmitter {\n    throw 'Not implemented!';\n  }\n\n  off(eventName: string, listener: Function): IEventEmitter {\n    throw 'Not implemented!';\n  }\n\n  emit(eventName: string, ...args: Array<any>): boolean {\n    throw 'Not implemented!';\n  }\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!N.call(t,r)&&r!==i&&s(t,r,{get:()=>e[r],enumerable:!(l=f(e,r))||l.enumerable});return t};var E=(t,e,i)=>(i=t!=null?p(b(t)):{},c(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),j=t=>c(s({},\"__esModule\",{value:!0}),t);var h=w((C,a)=>{a.exports=_jsx_runtime});var k={};y(k,{default:()=>I});var n=E(h());var o=MDXCodeBlock;var d=`export default class EventEmitter {\n  constructor() {\n    // Avoid creating objects via \\`{}\\` to exclude unwanted properties\n    // on the prototype (such as \\`.toString\\`).\n    this._events = Object.create(null);\n  }\n\n  on(eventName, listener) {\n    if (!Object.hasOwn(this._events, eventName)) {\n      this._events[eventName] = [];\n    }\n\n    this._events[eventName].push(listener);\n    return this;\n  }\n\n  off(eventName, listener) {\n    // Ignore non-existing eventNames.\n    if (!Object.hasOwn(this._events, eventName)) {\n      return this;\n    }\n\n    const listeners = this._events[eventName];\n\n    // Find only first instance of the listener.\n    const index = listeners.findIndex(\n      (listenerItem) => listenerItem === listener,\n    );\n\n    if (index < 0) {\n      return this;\n    }\n\n    this._events[eventName].splice(index, 1);\n    return this;\n  }\n\n  emit(eventName, ...args) {\n    // Return false for non-existing eventNames or events without listeners.\n    if (\n      !Object.hasOwn(this._events, eventName) ||\n      this._events[eventName].length === 0\n    ) {\n      return false;\n    }\n\n    // Make a clone of the listeners in case one of the listeners\n    // mutates this listener array.\n    const listeners = this._events[eventName].slice();\n    listeners.forEach((listener) => {\n      listener.apply(null, args);\n    });\n\n    return true;\n  }\n}\n`;var m=`interface IEventEmitter {\n  on(eventName: string, listener: Function): IEventEmitter;\n  off(eventName: string, listener: Function): IEventEmitter;\n  emit(eventName: string, ...args: Array<any>): boolean;\n}\n\nexport default class EventEmitter implements IEventEmitter {\n  _events: Record<string, Array<Function>>;\n\n  constructor() {\n    // Avoid creating objects via \\`{}\\` to exclude unwanted properties\n    // on the prototype (such as \\`.toString\\`).\n    this._events = Object.create(null);\n  }\n\n  on(eventName: string, listener: Function): IEventEmitter {\n    if (!Object.hasOwn(this._events, eventName)) {\n      this._events[eventName] = [];\n    }\n\n    this._events[eventName].push(listener);\n    return this;\n  }\n\n  off(eventName: string, listener: Function): IEventEmitter {\n    // Ignore non-existing eventNames.\n    if (!Object.hasOwn(this._events, eventName)) {\n      return this;\n    }\n\n    const listeners = this._events[eventName];\n\n    // Find only first instance of the listener.\n    const index = listeners.findIndex(\n      (listenerItem) => listenerItem === listener,\n    );\n\n    if (index < 0) {\n      return this;\n    }\n\n    this._events[eventName].splice(index, 1);\n    return this;\n  }\n\n  emit(eventName: string, ...args: Array<any>): boolean {\n    // Return false for non-existing eventNames or events without listeners.\n    if (\n      !Object.hasOwn(this._events, eventName) ||\n      this._events[eventName].length === 0\n    ) {\n      return false;\n    }\n\n    // Make a clone of the listeners in case one of the listeners\n    // mutates this listener array.\n    const listeners = this._events[eventName].slice();\n    listeners.forEach((listener) => {\n      listener.apply(null, args);\n    });\n\n    return true;\n  }\n}\n`;var u=`export default function EventEmitter() {\n  // Avoid creating objects via \\`{}\\` to exclude unwanted properties\n  // on the prototype (such as \\`.toString\\`).\n  this._events = Object.create(null);\n}\n\n/**\n * @param {string} eventName\n * @param {Function} listener\n * @returns {EventEmitter}\n */\nEventEmitter.prototype.on = function (eventName, listener) {\n  if (!Object.hasOwn(this._events, eventName)) {\n    this._events[eventName] = [];\n  }\n\n  this._events[eventName].push(listener);\n  return this;\n};\n\n/**\n * @param {string} eventName\n * @param {Function} listener\n * @returns {EventEmitter}\n */\nEventEmitter.prototype.off = function (eventName, listener) {\n  // Ignore non-existing eventNames.\n  if (!Object.hasOwn(this._events, eventName)) {\n    return this;\n  }\n\n  const listeners = this._events[eventName];\n\n  // Find only first instance of the listener.\n  const index = listeners.findIndex(\n    (listenerItem) => listenerItem === listener,\n  );\n\n  if (index < 0) {\n    return this;\n  }\n\n  this._events[eventName].splice(index, 1);\n  return this;\n};\n\n/**\n * @param {string} eventName\n * @param  {...any} args\n * @returns {boolean}\n */\nEventEmitter.prototype.emit = function (eventName, ...args) {\n  // Return false for non-existing eventNames or events without listeners.\n  if (\n    !Object.hasOwn(this._events, eventName) ||\n    this._events[eventName].length === 0\n  ) {\n    return false;\n  }\n\n  // Make a clone of the listeners in case one of the listeners\n  // mutates this listener array.\n  const listeners = this._events[eventName].slice();\n  listeners.forEach((listener) => {\n    listener.apply(null, args);\n  });\n\n  return true;\n};\n`;function v(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\",h3:\"h3\",h4:\"h4\",pre:\"pre\",em:\"em\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"An event-based interaction model is the most common way of building user interfaces. The DOM is also built around this model with the \",(0,n.jsx)(e.code,{children:\"document.addEventListener()\"}),\" and \",(0,n.jsx)(e.code,{children:\"document.removeEventListener()\"}),\" APIs to allow responding to events like \",(0,n.jsx)(e.code,{children:\"click\"}),\", \",(0,n.jsx)(e.code,{children:\"hover\"}),\", \",(0,n.jsx)(e.code,{children:\"input\"}),\", etc.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Clarification questions\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following are good questions to ask the interviewer to demonstrate your thoughtfulness. Depending on their response, you might need to adjust the implementation accordingly.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Can \",(0,n.jsx)(e.code,{children:\"emitter.emit()\"}),\" be called without any arguments besides the \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes, it can be.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Can the same listener be added multiple times with the same \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Yes, it can be. It will be called once for each time it is added when \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" is emitted in the order they were added.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Following up on the question above, what should happen if a listener is added multiple times and \",(0,n.jsx)(e.code,{children:\"emitter.off()\"}),\" is being called once for that listener?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The listener will only be removed once.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Can non-existent events be emitted?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes, but nothing should happen and the code should not error or crash.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"What should the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value of the listeners be?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"It can be \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Can listeners contain code that invoke methods on the emitter instance?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes, but we can ignore that scenario for this question.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"What if the listener callbacks throw an error during \",(0,n.jsx)(e.code,{children:\"emitter.emit()\"}),\"?\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The error should be caught and not halt the rest of the execution. However, we will not test for this case.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"We will handle all the above cases except for the last two cases.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Data Structure\"}),`\n`,(0,n.jsx)(e.p,{children:\"Firstly, we have to decide on the data structure to store the events and the listeners. We can either use:\"}),`\n`,(0,n.jsxs)(e.h4,{children:[\"1. Map of \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"s to an array of listener functions.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`events = {\n  foo: [Function1, Function3],\n  bar: [Function2],\n};\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Pros:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Fast lookup of the list of listeners for an \",(0,n.jsx)(e.code,{children:\"eventName\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Cons:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Since \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" is provided by the user, it can be any value and might conflict with existing keys on \",(0,n.jsx)(e.code,{children:\"Object.prototype\"}),\" such as \",(0,n.jsx)(e.code,{children:\"toString\"}),\". We will handle this situation.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"2. A flat array of \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" and listener pairs.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`events = [\n  { eventName: 'foo', listener: Function1 },\n  { eventName: 'bar', listener: Function2 },\n  { eventName: 'foo', listener: Function3 },\n];\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Pros:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Simple, flat structure.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Cons:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Requires O(n) time to find the listeners for an event because you have to look through the entire list of events.\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"emit()\"}),\" and \",(0,n.jsx)(e.code,{children:\"off()\"}),\" operations will require iterating through the array, you can't instantly determine if an event exists and ignore emission of non-existent events.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Potentially more space needed to store the data because of the repeated object fields and \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" strings.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Approach #1 is clearly superior, so we will use that. To mitigate the issue of user-provided \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"s conflicting with keys on \",(0,n.jsx)(e.code,{children:\"Object.prototype\"}),\", we can instantiate the \",(0,n.jsx)(e.code,{children:\"_events\"}),\" object with \",(0,n.jsx)(e.code,{children:\"Object.create(null)\"}),\" or use a ES6 \",(0,n.jsx)(e.code,{children:\"Map\"}),\" class.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Implementing \",(0,n.jsx)(e.code,{children:\"EventEmitter.on()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Implementing \",(0,n.jsx)(e.code,{children:\"EventEmitter.on()\"}),\" is pretty straightforward. Firstly check if \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" is present as a key of the \",(0,n.jsx)(e.code,{children:\"_events\"}),\" object and make the value an empty array (for the list of listeners for that event) if it is the first time this \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" is encountered. Then push the \",(0,n.jsx)(e.code,{children:\"listener\"}),\" into the array.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"this\"}),\" so that the method can be chained.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Implementing \",(0,n.jsx)(e.code,{children:\"EventEmitter.off()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"First check if \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" is present as a key of the \",(0,n.jsx)(e.code,{children:\"_events\"}),\" object. If no events with \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" exists, we do not need to proceed further and can do an early \",(0,n.jsx)(e.code,{children:\"return\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since we only want to remove the first instance of any matching \",(0,n.jsx)(e.code,{children:\"listener\"}),\", we'll use \",(0,n.jsx)(e.code,{children:\"listeners.findIndex()\"}),\" and remove \",(0,n.jsx)(e.em,{children:\"only one\"}),\" instance via \",(0,n.jsx)(e.code,{children:\".splice()\"}),\", instead of using something like \",(0,n.jsx)(e.code,{children:\".filter()\"}),\" which will remove all matching instances.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"this\"}),\" so that the method can be chained.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Implementing \",(0,n.jsx)(e.code,{children:\"EventEmitter.emit()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Check if the \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" exists or has any events and we can terminate and return \",(0,n.jsx)(e.code,{children:\"false\"}),\" if the \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" doesn't exist or if there are no listeners for \",(0,n.jsx)(e.code,{children:\"eventName\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To pass the rest of the arguments to each listener, we have to use \",(0,n.jsx)(e.code,{children:\"...args\"}),\" in the method signature to capture all other arguments as the variable \",(0,n.jsx)(e.code,{children:\"args\"}),\". The listeners can be called with \",(0,n.jsx)(e.code,{children:\"args\"}),\" via \",(0,n.jsx)(e.code,{children:\"Function.prototype.apply()\"}),\" or \",(0,n.jsx)(e.code,{children:\"Function.prototype.call()\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Built-in object properties colliding with user-provided \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"s\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"As mentioned above, if you're using a plain JavaScript object to map \",(0,n.jsx)(e.code,{children:\"eventName\"}),\" to callbacks, one potential issue is using \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"s that clash with properties existing on JavaScript objects such as \",(0,n.jsx)(e.code,{children:\"valueOf\"}),\" and \",(0,n.jsx)(e.code,{children:\"toString\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const emitter = new EventEmitter();\nemitter.emit('toString'); // Might crash because the property does exist on the object.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Two ways to handle this:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" instead of an object. This is the modern approach.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Create your plain JavaScript object with \",(0,n.jsx)(e.code,{children:\"Object.create(null)\"}),\" so that the object does not have a prototype and no additional properties.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Class-based Solution\"}),`\n`,(0,n.jsx)(o,{languages:{jsx:d,tsx:m}}),`\n`,(0,n.jsx)(e.h3,{children:\"Function prototype-based Solution\"}),`\n`,(0,n.jsx)(o,{children:u}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The same listener function can be added more than once for the same event. Removal should be done in order of adding.\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"emitter.emit()\"}),\" is called without any arguments.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Methods are called with non-existing \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"s.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"eventName\"}),\"s are built-in object properties like \",(0,n.jsx)(e.code,{children:\"valueOf\"}),\", \",(0,n.jsx)(e.code,{children:\"toString\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Object-oriented programming.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Using the right data structures.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Handling of variadic arguments.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Object chaining.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Arrow functions have a lexical scoping to the \",(0,n.jsx)(e.code,{children:\"this\"}),\" context, hence they should not be used as methods on objects as the \",(0,n.jsx)(e.code,{children:\"this\"}),\" will not be referring to the object. Thus the \",(0,n.jsx)(e.code,{children:\"emitter.on()\"}),\" and \",(0,n.jsx)(e.code,{children:\"emitter.off()\"}),\" methods cannot be defined as an arrow function if the return value is the \",(0,n.jsx)(e.code,{children:\"this\"}),\" object.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Node.js' \",(0,n.jsx)(e.code,{children:\"EventEmitter\"}),\"'s implementation allows \",(0,n.jsx)(e.code,{children:\"eventName\"}),\"s to be symbols which we don't allow here.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nodejs.org/api/events.html#class-eventemitter\",children:\"EventEmitter | Node.js\"})}),`\n`]})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(v,t)})):v(t)}var I=F;return j(k);})();\n;return Component;",
  "workspace": {
    "main": "/src/event-emitter.ts",
    "run": "/src/event-emitter.run.test.ts",
    "submit": "/src/event-emitter.submit.test.ts"
  }
}