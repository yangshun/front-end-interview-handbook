{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/flatten\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/flatten.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/flatten.run.test.ts": "import flatten from './flatten';\n\ndescribe('flatten array', () => {\n  test('empty array', () => {\n    expect(flatten([])).toEqual([]);\n  });\n\n  test('nested array', () => {\n    expect(flatten([1, [2]])).toEqual([1, 2]);\n  });\n\n  test('multiple levels of nesting', () => {\n    expect(flatten([1, [2, [3]]])).toEqual([1, 2, 3]);\n  });\n});\n",
    "/src/flatten.submit.test.ts": "import flatten from './flatten';\n\ndescribe('flatten array', () => {\n  test('empty array', () => {\n    expect(flatten([])).toEqual([]);\n    expect(flatten([[], [[]], [[], [[[]]]]])).toEqual([]);\n  });\n\n  test('single-element array', () => {\n    expect(flatten([1])).toEqual([1]);\n    expect(flatten(['foo'])).toEqual(['foo']);\n    expect(flatten([undefined])).toEqual([undefined]);\n  });\n\n  test('array with only one level', () => {\n    expect(flatten([1, 2, 3])).toEqual([1, 2, 3]);\n    expect(flatten(['foo', 'bar'])).toEqual(['foo', 'bar']);\n    expect(flatten([null, true, undefined])).toEqual([null, true, undefined]);\n  });\n\n  test('array with multiple levels of nesting', () => {\n    expect(flatten([0, 1, 2, [3, 4]])).toEqual([0, 1, 2, 3, 4]);\n    expect(flatten([1, [2, [3]]])).toEqual([1, 2, 3]);\n    expect(\n      flatten([\n        [1, 2],\n        [3, 4],\n      ]),\n    ).toEqual([1, 2, 3, 4]);\n    expect(flatten(['foo', ['bar']])).toEqual(['foo', 'bar']);\n    expect(flatten([[null, [true]], undefined])).toEqual([\n      null,\n      true,\n      undefined,\n    ]);\n  });\n\n  test('list-style array', () => {\n    expect(flatten([1, [2, [3, [4, [5]]]]])).toEqual([1, 2, 3, 4, 5]);\n    expect(flatten([[[[[1], 2], 3], 4], 5])).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  test('deeply-nested single-element array', () => {\n    expect(flatten([[[[1]]]])).toEqual([1]);\n  });\n});\n",
    "/src/flatten.ts": "type ArrayValue = any | Array<ArrayValue>;\n\nexport default function flatten(value: Array<ArrayValue>): Array<any> {\n  return value.reduce(\n    (acc, curr) => acc.concat(Array.isArray(curr) ? flatten(curr) : curr),\n    [],\n  );\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<*|Array>} value\n * @return {Array}\n */\nexport default function flatten(value) {\n  throw 'Not implemented!';\n}",
    "ts": "type ArrayValue = any | Array<ArrayValue>;\n\nexport default function flatten(value: Array<ArrayValue>): Array<any> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/flatten.ts",
    "run": "/src/flatten.run.test.ts",
    "submit": "/src/flatten.submit.test.ts"
  }
}