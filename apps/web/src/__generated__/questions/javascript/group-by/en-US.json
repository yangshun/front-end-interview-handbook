{
  "description": "var Component=(()=>{var s=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},i=(r,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(r,o)&&o!==t&&a(r,o,{get:()=>e[o],enumerable:!(c=u(e,o))||c.enumerable});return r};var j=(r,e,t)=>(t=r!=null?s(m(r)):{},i(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),x=r=>i(a({},\"__esModule\",{value:!0}),r);var l=y((T,d)=>{d.exports=_jsx_runtime});var v={};f(v,{default:()=>b,frontmatter:()=>B});var n=j(l()),B={title:\"Group By\",excerpt:\"Implement a function that groups values in an array based on a function or property name\"};function h(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"groupBy(array, iteratee)\"}),\" that takes an array and an \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" function, and groups the values in the array based on the \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`groupBy(array, iteratee);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to iterate over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"iteratee\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The iteratee to transform elements. The function is invoked with one argument: (value).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.code,{children:\"(Object)\"})}),\": Returns the composed aggregate object.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\ngroupBy([{ n: 3 }, { n: 5 }, { n: 3 }], (o) => o.n);\n// => { '3': [{ n: 3 }, { n: 3 }], '5': [{ n: 5 }] }\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The function should return \",(0,n.jsx)(e.code,{children:\"{}\"}),\" when \",(0,n.jsx)(e.code,{children:\"array\"}),\" is empty and treat \",(0,n.jsx)(e.code,{children:\"null\"}),\" / \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" keys after going through \",(0,n.jsx)(e.code,{children:\"iteratee\"}),\" as it is.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`groupBy([], (o) => o); // => {}\n\ngroupBy([{ n: 1 }, { n: 2 }], (o) => o.m); // => { undefined: [{ n: 1 }, { n: 2 }] }\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#groupBy\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.groupBy\"})]})}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var b=_;return x(v);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/group-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/group-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/group-by.run.test.ts": "import groupBy from './group-by';\n\ndescribe('groupBy', () => {\n  test('empty array', () => {\n    expect(groupBy([], (o: any) => o)).toEqual({});\n  });\n\n  test('function iteratees', () => {\n    expect(groupBy([6.1, 4.2, 6.3], Math.floor)).toEqual({\n      4: [4.2],\n      6: [6.1, 6.3],\n    });\n  });\n\n  test('multiple element arrays', () => {\n    expect(groupBy(['one', 'two', 'three'], (o: string) => o.length)).toEqual({\n      3: ['one', 'two'],\n      5: ['three'],\n    });\n  });\n});\n",
    "/src/group-by.submit.test.ts": "import groupBy from './group-by';\n\ndescribe('groupBy', () => {\n  test('empty array', () => {\n    expect(groupBy([], (o: any) => o)).toEqual({});\n  });\n\n  describe('function iteratees', () => {\n    test('single-element arrays', () => {\n      expect(groupBy([6.1], Math.floor)).toEqual({ 6: [6.1] });\n    });\n\n    test('two-element arrays', () => {\n      expect(groupBy([6.1, 4.2], Math.floor)).toEqual({ 4: [4.2], 6: [6.1] });\n    });\n\n    test('multiple element arrays', () => {\n      expect(groupBy([6.1, 4.2, 6.3], Math.floor)).toEqual({\n        4: [4.2],\n        6: [6.1, 6.3],\n      });\n    });\n\n    test('keys that are also properties', () => {\n      expect(groupBy(['one', 'two', 'three'], () => 'length')).toEqual({\n        length: ['one', 'two', 'three'],\n      });\n    });\n  });\n\n  describe('property iteratees', () => {\n    test('single-element arrays', () => {\n      expect(groupBy(['one'], (o: string) => o.length)).toEqual({ 3: ['one'] });\n    });\n\n    test('two-element arrays', () => {\n      expect(groupBy(['one', 'two'], (o: string) => o.length)).toEqual({\n        3: ['one', 'two'],\n      });\n    });\n\n    test('multiple element arrays', () => {\n      expect(groupBy(['one', 'two', 'three'], (o: string) => o.length)).toEqual(\n        {\n          3: ['one', 'two'],\n          5: ['three'],\n        },\n      );\n    });\n\n    test('groups elements of array of objects by a property', () => {\n      const users = [\n        { user: 'barney', age: 36 },\n        { user: 'fred', age: 40 },\n        { user: 'pebbles', age: 1 },\n      ];\n\n      expect(groupBy(users, (o: any) => o.age)).toEqual({\n        36: [{ user: 'barney', age: 36 }],\n        40: [{ user: 'fred', age: 40 }],\n        1: [{ user: 'pebbles', age: 1 }],\n      });\n    });\n  });\n\n  test('does not mutate the original array', () => {\n    const arr = ['one', 'two', 'three'];\n    const copy = arr.slice();\n    groupBy(arr, (o: string) => o.length);\n    expect(arr).toEqual(copy);\n  });\n\n  test('false values', () => {\n    expect(groupBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual({\n      undefined: [{ n: 1 }, { n: 2 }],\n    });\n  });\n});\n",
    "/src/group-by.ts": "export default function groupBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | string,\n): Record<string, Array<T>> {\n  const result: Record<string, Array<T>> = {};\n\n  for (const element of array) {\n    const key = iteratee(element);\n    if (!Object.prototype.hasOwnProperty.call(result, key)) {\n      result[key] = [];\n    }\n\n    result[key].push(element);\n  }\n\n  return result;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [
      "linkedin"
    ],
    "created": 1690502400,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a function that groups values in an array based on a function or property name",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/group-by",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "count-by"
    ],
    "slug": "group-by",
    "subtitle": null,
    "title": "Group By",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function groupBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | string,\n): Record<string, Array<T>> {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),T=(r,e)=>{for(var n in e)a(r,n,{get:e[n],enumerable:!0})},l=(r,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!j.call(r,o)&&o!==n&&a(r,o,{get:()=>e[o],enumerable:!(c=f(e,o))||c.enumerable});return r};var A=(r,e,n)=>(n=r!=null?g(k(r)):{},l(e||!r||!r.__esModule?a(n,\"default\",{value:r,enumerable:!0}):n,r)),O=r=>l(a({},\"__esModule\",{value:!0}),r);var u=x((F,i)=>{i.exports=_jsx_runtime});var M={};T(M,{default:()=>C});var t=A(u());var s=MDXCodeBlock;var h=`/**\n * @param {Array|Object} array The array to iterate over.\n * @param {Function} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  const result = {};\n\n  for (const element of array) {\n    const key = iteratee(element);\n    if (!Object.prototype.hasOwnProperty.call(result, key)) {\n      result[key] = [];\n    }\n\n    result[key].push(element);\n  }\n\n  return result;\n}\n`;var d=`export default function groupBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | string,\n): Record<string, Array<T>> {\n  const result: Record<string, Array<T>> = {};\n\n  for (const element of array) {\n    const key = iteratee(element);\n    if (!Object.prototype.hasOwnProperty.call(result, key)) {\n      result[key] = [];\n    }\n\n    result[key].push(element);\n  }\n\n  return result;\n}\n`;var y=`/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function groupBy(array, iteratee) {\n  const result = Object.create(null);\n\n  for (const element of array) {\n    const key = iteratee(element);\n    result[key] ??= [];\n    result[key].push(element);\n  }\n\n  return result;\n}\n`;var p=`export default function groupBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | string,\n): Record<string, Array<T>> {\n  const result: Record<string, Array<T>> = Object.create(null);\n  for (const element of array) {\n    const key = iteratee(element);\n    result[key] ??= [];\n    result[key].push(element);\n  }\n  return result;\n}\n`;function m(r){let e=Object.assign({h2:\"h2\",h3:\"h3\",ol:\"ol\",li:\"li\",code:\"code\",p:\"p\",a:\"a\",ul:\"ul\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Approach 1: Standard method of basic functions\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Create an empty \",(0,t.jsx)(e.code,{children:\"results\"}),\" object to store the group of occurrences of each key.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through the array and determine the key for each element by calling \",(0,t.jsx)(e.code,{children:\"iteratee(element)\"}),\". If the key does not exist within the \",(0,t.jsx)(e.code,{children:\"results\"}),\" object, set the value for that key to an empty array. Next, append the element into that key.\"]}),`\n`]}),`\n`,(0,t.jsx)(s,{languages:{jsx:h,tsx:d}}),`\n`,(0,t.jsx)(e.h3,{children:\"Approach 2: Using nullish coalescing assignment operator\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"An alternative way to create the \",(0,t.jsx)(e.code,{children:\"result\"}),\" object is to use the \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment\",children:\"nullish coalescing assignment operator\"}),\" to set the value to \",(0,t.jsx)(e.code,{children:\"[]\"}),\" if \",(0,t.jsx)(e.code,{children:\"key\"}),\" doesn't exist within \",(0,t.jsx)(e.code,{children:\"result\"}),\". Note that using nullish coalescing assignment operator means you might be accessing inherited properties, which is not desired, but since the object is created via \",(0,t.jsx)(e.code,{children:\"Object.create(null)\"}),\", there will not be inherited properties and is safe to use.\"]}),`\n`,(0,t.jsx)(s,{languages:{jsx:y,tsx:p}}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.a,{href:\"https://lodash.com/docs/#groupBy\",children:[\"Lodash \",(0,t.jsx)(e.code,{children:\"_.groupBy\"})]})}),`\n`]})]})}function R(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(m,r)})):m(r)}var C=R;return O(M);})();\n;return Component;",
  "workspace": {
    "main": "/src/group-by.ts",
    "run": "/src/group-by.run.test.ts",
    "submit": "/src/group-by.submit.test.ts"
  }
}