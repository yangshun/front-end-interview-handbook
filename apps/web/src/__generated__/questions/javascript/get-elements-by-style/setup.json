{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/get-elements-by-style\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/get-elements-by-style.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/get-elements-by-style.run.test.ts": "import getElementsByStyle from './get-elements-by-style';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\nfunction createElementFromHtmlString(htmlString: string) {\n  // Use `document.createElement()` because jsdom@16 has some issues with `getComputedStyle()`\n  // with elements created using `DOMParser().parseFromString()`.\n  const body = document.createElement('body');\n  body.innerHTML = htmlString.trim(); // Trimming to avoid any leading whitespace nodes.\n  return body;\n}\n\ndescribe('getElementsByStyle()', () => {\n  test('empty tree', () => {\n    const bodyEl = createElementFromHtmlString(``);\n    const els = getElementsByStyle(bodyEl, 'font-size', '12px');\n    const expected = bodyEl.getElementsByTagName('');\n\n    checkResults(expected, els);\n  });\n\n  test('matching span', () => {\n    const bodyEl = createElementFromHtmlString(`\n      <div>\n        <span style=\"font-size: 12px\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`);\n\n    const els = getElementsByStyle(bodyEl, 'font-size', '12px');\n    const expected = bodyEl.getElementsByTagName('span');\n\n    checkResults(expected, els);\n  });\n\n  test('multiple matching elements', () => {\n    const bodyEl = createElementFromHtmlString(`\n      <div>\n        <span style=\"font-size: 12px\">Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`);\n\n    const els = getElementsByStyle(bodyEl, 'font-size', '12px');\n    const expected = bodyEl.getElementsByTagName('span');\n\n    checkResults(expected, els);\n  });\n});\n",
    "/src/get-elements-by-style.submit.test.ts": "import getElementsByStyle from './get-elements-by-style';\n\nfunction checkResults(\n  expected: HTMLCollectionOf<Element>,\n  received: Array<Element>,\n) {\n  expect(received.length).toBe(expected.length);\n  // Inefficient O(n^2) check so that order doesn't matter.\n  for (let i = 0; i < expected.length; i++) {\n    expect(received.some((node) => node.isEqualNode(expected[i]))).toBe(true);\n  }\n}\n\nfunction createElementFromHtmlString(htmlString: string) {\n  // Use `document.createElement()` because jsdom@16 has some issues with `getComputedStyle()`\n  // with elements created using `DOMParser().parseFromString()`.\n  const div = document.createElement('div');\n  div.innerHTML = htmlString.trim(); // Trimming to avoid any leading whitespace nodes.\n  return div;\n}\n\ndescribe('getElementsByStyle()', () => {\n  test('empty tree', () => {\n    const containerEl = createElementFromHtmlString(``);\n    const els = getElementsByStyle(containerEl, 'font-size', '12px');\n    const expected = containerEl.getElementsByTagName('');\n\n    checkResults(expected, els);\n  });\n\n  test('no matches', () => {\n    const containerEl = createElementFromHtmlString(\n      `<div>\n        <span>Span</span>\n        <p>Paragraph</p>\n        <div></div>\n      </div>`,\n    );\n\n    const els = getElementsByStyle(containerEl, 'font-size', '120px');\n    const expected = containerEl.getElementsByTagName('');\n    checkResults(expected, els);\n  });\n\n  describe('matches', () => {\n    test('matching span', () => {\n      const containerEl = createElementFromHtmlString(\n        `<div>\n          <span style=\"font-size: 12px\">Span</span>\n          <p>Paragraph</p>\n          <div></div>\n        </div>`,\n      );\n\n      const els = getElementsByStyle(containerEl, 'font-size', '12px');\n      const expected = containerEl.getElementsByTagName('span');\n      checkResults(expected, els);\n    });\n\n    test('multiple matching elements', () => {\n      const containerEl = createElementFromHtmlString(\n        `<div>\n          <span style=\"font-size: 12px\">Span</span>\n          <p>Paragraph</p>\n          <div></div>\n          <span style=\"font-size: 12px\">Span 2</span>\n        </div>`,\n      );\n\n      const els = getElementsByStyle(containerEl, 'font-size', '12px');\n      const expected = containerEl.getElementsByTagName('span');\n      checkResults(expected, els);\n    });\n\n    test('matches one level of children', () => {\n      const containerEl = createElementFromHtmlString(\n        `<div id=\"root\">\n          <span class=\"match\" style=\"color: rgb(255, 255, 255)\">\n            Span\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </span>\n          <p>Paragraph</p>\n          <div>\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </div>\n        </div>`,\n      );\n\n      const els = getElementsByStyle(\n        containerEl.querySelector('#root')!,\n        'color',\n        'rgb(255, 255, 255)',\n      );\n      const expected = containerEl.getElementsByClassName('match');\n      checkResults(expected, els);\n    });\n\n    test('matches two levels of children', () => {\n      const containerEl = createElementFromHtmlString(\n        `<div id=\"root\">\n          <span class=\"match\" style=\"color: rgb(255, 255, 255)\">\n            Span\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </span>\n          <div>\n            <p>\n              <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n            </p>\n          </div>\n          <div>\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </div>\n        </div>`,\n      );\n\n      const els = getElementsByStyle(\n        containerEl.querySelector('#root')!,\n        'color',\n        'rgb(255, 255, 255)',\n      );\n      const expected = containerEl.getElementsByClassName('match');\n      checkResults(expected, els);\n    });\n\n    test('ignores comment nodes', () => {\n      const containerEl = createElementFromHtmlString(\n        `<div id=\"root\">\n          <span class=\"match\" style=\"color: rgb(255, 255, 255)\">\n            <!-- Here's a comment -->\n            Span\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </span>\n          <p>Paragraph</p>\n          <div>\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </div>\n        </div>`,\n      );\n\n      const els = getElementsByStyle(\n        containerEl.querySelector('#root')!,\n        'color',\n        'rgb(255, 255, 255)',\n      );\n      const expected = containerEl.getElementsByClassName('match');\n      checkResults(expected, els);\n    });\n\n    test(\"doesn't include itself\", () => {\n      const containerEl = createElementFromHtmlString(\n        `<div id=\"root\" style=\"color: rgb(255, 255, 255)\">\n          <span class=\"match\" style=\"color: rgb(255, 255, 255)\">\n            <!-- Here's a comment -->\n            Span\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </span>\n          <p>Paragraph</p>\n          <div>\n            <span class=\"match\" style=\"color: rgb(255, 255, 255)\">Span</span>\n          </div>\n        </div>`,\n      );\n\n      const els = getElementsByStyle(\n        containerEl.querySelector('#root')!,\n        'color',\n        'rgb(255, 255, 255)',\n      );\n      const expected = containerEl.getElementsByClassName('match');\n      checkResults(expected, els);\n    });\n  });\n});\n",
    "/src/get-elements-by-style.ts": "export default function getElementsByStyle(\n  element: Element,\n  property: string,\n  value: string,\n): Array<Element> {\n  const elements: Array<Element> = [];\n\n  function traverse(el: Element) {\n    if (el == null) {\n      return;\n    }\n\n    const computedStyles = getComputedStyle(el);\n    if (computedStyles.getPropertyValue(property) === value) {\n      elements.push(el);\n    }\n\n    for (const child of el.children) {\n      traverse(child);\n    }\n  }\n\n  for (const child of element.children) {\n    traverse(child);\n  }\n\n  return elements;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Element} element\n * @param {string} property\n * @param {string} value\n * @return {Array<Element>}\n */\nexport default function getElementsByStyle(element, property, value) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function getElementsByStyle(\n  element: Element,\n  property: string,\n  value: string,\n): Array<Element> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/get-elements-by-style.ts",
    "run": "/src/get-elements-by-style.run.test.ts",
    "submit": "/src/get-elements-by-style.submit.test.ts"
  }
}