{
  "description": "var Component=(()=>{var a=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var o in e)l(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!m.call(t,r)&&r!==o&&l(t,r,{get:()=>e[r],enumerable:!(d=u(e,r))||d.enumerable});return t};var k=(t,e,o)=>(o=t!=null?a(y(t)):{},s(e||!t||!t.__esModule?l(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>s(l({},\"__esModule\",{value:!0}),t);var i=f((K,c)=>{c.exports=_jsx_runtime});var j={};g(j,{default:()=>w,frontmatter:()=>v});var n=k(i()),v={title:\"useKeyPress\",excerpt:\"Implement a hook that subscribes to keyboard events\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",strong:\"strong\",a:\"a\",h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useKeyPress\"}),\" hook that detects and performs an action for keyboard events\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component() {\n  useKeyPress('a', (e) => {\n    e.preventDefault();\n    console.log('The \"a\" key was pressed');\n  });\n\n  return null;\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": Even though the hook is called \",(0,n.jsx)(e.code,{children:\"useKeyPress\"}),\", the \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" browser event is \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event\",children:\"deprecated\"}),\" and should not be used.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"key: string\"}),\": The key to detect. It must be a \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\",children:\"valid key value\"}),\" that is usually obtained from \",(0,n.jsx)(e.code,{children:\"KeyboardEvent.key\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"callback: (event: KeyboardEvent) => void\"}),\": A function that is called when the key identified by \",(0,n.jsx)(e.code,{children:\"key\"}),\" is pressed\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"options\"}),\": An optional object with the following properties:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"target: EventTarget\"}),\": The target element to listen for the key press. This defaults to \",(0,n.jsx)(e.code,{children:\"window\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"event: 'keydown' | 'keyup'\"}),\": The event to listen for, defaults to \",(0,n.jsx)(e.code,{children:\"'keydown'\"})]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Nothing.\"})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var w=x;return b(j);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-key-press\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-key-press.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"@testing-library/user-event\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-key-press.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport useKeyPress from './use-key-press';\n\ndescribe('useKeyPress', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useKeyPress('', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('triggers on key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('a');\n    });\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not trigger on different key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('b');\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n});\n",
    "/src/use-key-press.submit.test.tsx": "import React from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport useKeyPress from './use-key-press';\n\ndescribe('useKeyPress', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useKeyPress('', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('triggers on key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('a');\n    });\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not trigger on different key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('b');\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n\n  test('does not trigger on other target', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    const page = render(<input type=\"text\" />);\n    const input = page.getByRole('textbox');\n    renderHook(() => useKeyPress('a', callback, { target: input }));\n\n    act(() => {\n      user.keyboard('a');\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n\n  test('triggers with other target', () => {\n    const callback = jest.fn();\n    const page = render(<input type=\"text\" />);\n    const input = page.getByRole('textbox');\n    renderHook(() => useKeyPress('a', callback, { target: input }));\n\n    act(() => {\n      fireEvent.keyDown(input, { key: 'a' });\n      fireEvent.keyPress(input, { key: 'a' });\n    });\n\n    expect(callback).toHaveBeenCalled();\n  });\n\n  test('triggers on keyup if specified', () => {\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback, { event: 'keyup' }));\n\n    act(() => {\n      fireEvent.keyUp(window, { key: 'a' });\n    });\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not trigger if unmounted', () => {\n    const callback = jest.fn();\n    const { unmount } = renderHook(() => useKeyPress('a', callback));\n\n    unmount();\n\n    act(() => {\n      fireEvent.keyDown(window, { key: 'a' });\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n});\n",
    "/src/use-key-press.ts": "import { useEffect } from 'react';\n\nexport default function useKeyPress(\n  key: string,\n  callback: (e: KeyboardEvent) => void,\n  {\n    event = 'keydown',\n    target = window,\n  }: { event?: 'keydown' | 'keyup'; target?: EventTarget } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  return useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.key !== key) {\n        return;\n      }\n\n      callback(e);\n    };\n\n    target.addEventListener(event, handler as EventListener);\n\n    return () => {\n      target.removeEventListener(event, handler as EventListener);\n    };\n  }, [key, callback, event, target]);\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "phillmont",
    "companies": [],
    "created": 1742169600,
    "difficulty": "medium",
    "duration": 15,
    "excerpt": "Implement a hook that subscribes to keyboard events",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/javascript/use-key-press"
      }
    ],
    "href": "/questions/javascript/use-key-press",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "use-event-listener"
    ],
    "slug": "use-key-press",
    "subtitle": null,
    "title": "useKeyPress",
    "topics": [
      "react-hooks"
    ]
  },
  "skeleton": {
    "js": "/**\n * @callback callback\n * @param {KeyboardEvent} e\n */\n\n/**\n * @typedef {Object} UseKeyPressOptions\n * @property {'keyup' | 'keydown'} event\n * @property {EventTarget} target\n */\n\n/**\n * @param {string} key\n * @param {callback} callback\n * @param {UseKeyPressOptions} options\n */\nexport default function useKeyPress(\n  key,\n  callback,\n  { event = 'keydown', target = window } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useKeyPress(\n  key: string,\n  callback: (e: KeyboardEvent) => void,\n  {\n    event = 'keydown',\n    target = window,\n  }: { event?: 'keydown' | 'keyup'; target?: EventTarget } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var c=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!y.call(t,o)&&o!==r&&c(t,o,{get:()=>e[o],enumerable:!(d=k(e,o))||d.enumerable});return t};var w=(t,e,r)=>(r=t!=null?f(v(t)):{},a(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),E=t=>a(c({},\"__esModule\",{value:!0}),t);var s=p((L,i)=>{i.exports=_jsx_runtime});var _={};g(_,{default:()=>j});var n=w(s());var l=MDXCodeBlock;var h=`import { useEffect } from 'react';\n\nexport default function useKeyPress(\n  key: string,\n  callback: (e: KeyboardEvent) => void,\n  {\n    event = 'keydown',\n    target = window,\n  }: { event?: 'keydown' | 'keyup'; target?: EventTarget } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  return useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.key !== key) {\n        return;\n      }\n\n      callback(e);\n    };\n\n    target.addEventListener(event, handler as EventListener);\n\n    return () => {\n      target.removeEventListener(event, handler as EventListener);\n    };\n  }, [key, callback, event, target]);\n}\n`;function u(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useKeyPress\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" to attach a \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" or \",(0,n.jsx)(e.code,{children:\"keyup\"}),\" event listener to the \",(0,n.jsx)(e.code,{children:\"target\"}),\" element. The effect will call \",(0,n.jsx)(e.code,{children:\"callback\"}),\" if the \",(0,n.jsx)(e.code,{children:\"KeyboardEvent\"}),\"'s \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" matches the provided \",(0,n.jsx)(e.code,{children:\"key\"}),\".\"]}),`\n`,(0,n.jsx)(l,{children:h})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var j=x;return E(_);})();\n;return Component;",
  "workspace": {
    "main": "/src/use-key-press.ts",
    "run": "/src/use-key-press.run.test.ts",
    "submit": "/src/use-key-press.submit.test.tsx"
  }
}