{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-key-press\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-key-press.ts\",\n  \"dependencies\": {\n    \"@testing-library/react\": \"14.0.0\",\n    \"@testing-library/user-event\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-key-press.run.test.ts": "import { act, renderHook } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport useKeyPress from './use-key-press';\n\ndescribe('useKeyPress', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useKeyPress('', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('triggers on key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('a');\n    });\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not trigger on different key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('b');\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n});\n",
    "/src/use-key-press.submit.test.tsx": "import React from 'react';\nimport { act, fireEvent, render, renderHook } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport useKeyPress from './use-key-press';\n\ndescribe('useKeyPress', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useKeyPress('', () => {}));\n\n    expect(result.current).toBe(undefined);\n  });\n\n  test('triggers on key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('a');\n    });\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not trigger on different key press', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback));\n\n    act(() => {\n      user.keyboard('b');\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n\n  test('does not trigger on other target', () => {\n    const user = userEvent.setup();\n\n    const callback = jest.fn();\n    const page = render(<input type=\"text\" />);\n    const input = page.getByRole('textbox');\n    renderHook(() => useKeyPress('a', callback, { target: input }));\n\n    act(() => {\n      user.keyboard('a');\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n\n  test('triggers with other target', () => {\n    const callback = jest.fn();\n    const page = render(<input type=\"text\" />);\n    const input = page.getByRole('textbox');\n    renderHook(() => useKeyPress('a', callback, { target: input }));\n\n    act(() => {\n      fireEvent.keyDown(input, { key: 'a' });\n      fireEvent.keyPress(input, { key: 'a' });\n    });\n\n    expect(callback).toHaveBeenCalled();\n  });\n\n  test('triggers on keyup if specified', () => {\n    const callback = jest.fn();\n    renderHook(() => useKeyPress('a', callback, { event: 'keyup' }));\n\n    act(() => {\n      fireEvent.keyUp(window, { key: 'a' });\n    });\n\n    expect(callback).toHaveBeenCalledTimes(1);\n  });\n\n  test('does not trigger if unmounted', () => {\n    const callback = jest.fn();\n    const { unmount } = renderHook(() => useKeyPress('a', callback));\n\n    unmount();\n\n    act(() => {\n      fireEvent.keyDown(window, { key: 'a' });\n    });\n\n    expect(callback).not.toHaveBeenCalled();\n  });\n});\n",
    "/src/use-key-press.ts": "import { useEffect } from 'react';\n\nexport default function useKeyPress(\n  key: string,\n  callback: (e: KeyboardEvent) => void,\n  {\n    event = 'keydown',\n    target = window,\n  }: { event?: 'keydown' | 'keyup'; target?: EventTarget } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  return useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.key !== key) {\n        return;\n      }\n\n      callback(e);\n    };\n\n    target.addEventListener(event, handler as EventListener);\n\n    return () => {\n      target.removeEventListener(event, handler as EventListener);\n    };\n  }, [key, callback, event, target]);\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @callback callback\n * @param {KeyboardEvent} e\n */\n\n/**\n * @typedef {Object} UseKeyPressOptions\n * @property {'keyup' | 'keydown'} event\n * @property {EventTarget} target\n */\n\n/**\n * @param {string} key\n * @param {callback} callback\n * @param {UseKeyPressOptions} options\n */\nexport default function useKeyPress(\n  key,\n  callback,\n  { event = 'keydown', target = window } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  throw 'Not implemented';\n}",
    "ts": "export default function useKeyPress(\n  key: string,\n  callback: (e: KeyboardEvent) => void,\n  {\n    event = 'keydown',\n    target = window,\n  }: { event?: 'keydown' | 'keyup'; target?: EventTarget } = {\n    event: 'keydown',\n    target: window,\n  },\n) {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-key-press.ts",
    "run": "/src/use-key-press.run.test.ts",
    "submit": "/src/use-key-press.submit.test.tsx"
  }
}