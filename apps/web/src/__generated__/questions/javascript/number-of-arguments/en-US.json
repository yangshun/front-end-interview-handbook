{
  "description": "var Component=(()=>{var m=Object.create;var a=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var p=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},i=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of d(e))!g.call(n,s)&&s!==r&&a(n,s,{get:()=>e[s],enumerable:!(c=l(e,s))||c.enumerable});return n};var w=(n,e,r)=>(r=n!=null?m(f(n)):{},i(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),j=n=>i(a({},\"__esModule\",{value:!0}),n);var u=p((y,o)=>{o.exports=_jsx_runtime});var _={};b(_,{default:()=>O,frontmatter:()=>x});var t=w(u()),x={title:\"Number of Arguments\",excerpt:\"Implement a function that returns the number of arguments it was called with\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",h2:\"h2\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Implement a function \",(0,t.jsx)(e.code,{children:\"numberOfArguments\"}),\", to return the number of arguments it was called with. Note that this value is the actual number of arguments, which can be more or less than the defined parameter count (which is determined by \",(0,t.jsx)(e.code,{children:\"Function.prototype.length\"}),\").\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"P.S. There's no practical use for this function. However, it is useful to know how to determine the number of arguments, which can be useful for questions that require writing variadic functions like \",(0,t.jsx)(e.a,{href:\"/questions/javascript/classnames\",children:\"Classnames\"}),\" and \",(0,t.jsx)(e.a,{href:\"/questions/javascript/curry-ii\",children:\"Curry II\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`numberOfArguments(); // 0\nnumberOfArguments(1); // 1\nnumberOfArguments(2, 3); // 2\nnumberOfArguments('a', 'b', 'c'); // 3\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length\",children:\"arguments.length | MDN\"})})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var O=v;return j(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/number-of-arguments\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/number-of-arguments.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/number-of-arguments.run.test.ts": "import numberOfArguments from './number-of-arguments';\n\ndescribe('numberOfArguments', () => {\n  test('no arguments', () => {\n    expect(numberOfArguments()).toBe(0);\n  });\n\n  test('one argument', () => {\n    expect(numberOfArguments(0)).toBe(1);\n  });\n\n  test('two arguments', () => {\n    expect(numberOfArguments(0, 1)).toBe(2);\n  });\n});\n",
    "/src/number-of-arguments.submit.test.ts": "import numberOfArguments from './number-of-arguments';\n\ndescribe('numberOfArguments', () => {\n  test('no arguments', () => {\n    expect(numberOfArguments()).toBe(0);\n  });\n\n  test('one argument', () => {\n    expect(numberOfArguments(0)).toBe(1);\n    expect(numberOfArguments(null)).toBe(1);\n    expect(numberOfArguments(undefined)).toBe(1);\n    expect(numberOfArguments(NaN)).toBe(1);\n    expect(numberOfArguments(true)).toBe(1);\n    expect(numberOfArguments(false)).toBe(1);\n    expect(numberOfArguments([1, 2, 3])).toBe(1);\n    expect(numberOfArguments({})).toBe(1);\n  });\n\n  test('two arguments', () => {\n    expect(numberOfArguments(0, 1)).toBe(2);\n    expect(numberOfArguments(true, false)).toBe(2);\n    expect(numberOfArguments([1, 2, 3], [4, 5, 6])).toBe(2);\n    expect(numberOfArguments({}, [])).toBe(2);\n  });\n\n  test('multiple arguments', () => {\n    expect(numberOfArguments(0, 1, 2)).toBe(3);\n    expect(numberOfArguments(true, false, null)).toBe(3);\n    expect(numberOfArguments([1, 2, 3], [4, 5, 6], [7, 8, 9])).toBe(3);\n    expect(numberOfArguments(...[1, 2, 3])).toBe(3);\n    expect(numberOfArguments({}, [], new Set())).toBe(3);\n  });\n});\n",
    "/src/number-of-arguments.ts": "export default function numberOfArguments(...args: Array<any>): number {\n  return arguments.length;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1683331200,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": "Implement a function that returns the number of arguments it was called with",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/number-of-arguments",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "classnames",
      "curry"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "function-length"
    ],
    "slug": "number-of-arguments",
    "subtitle": null,
    "title": "Number of Arguments",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {...any} args\n * @return {number}\n */\nexport default function numberOfArguments() {\n  throw 'Not implemented';\n}",
    "ts": "export default function numberOfArguments(...args: Array<any>): number {\n  throw 'Not implemented';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var A=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),v=(r,e)=>{for(var t in e)s(r,t,{get:e[t],enumerable:!0})},u=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!y.call(r,a)&&a!==t&&s(r,a,{get:()=>e[a],enumerable:!(i=b(e,a))||i.enumerable});return r};var O=(r,e,t)=>(t=r!=null?p(j(r)):{},u(e||!r||!r.__esModule?s(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>u(s({},\"__esModule\",{value:!0}),r);var l=A((S,c)=>{c.exports=_jsx_runtime});var C={};v(C,{default:()=>k});var n=O(l());var o=MDXCodeBlock;var d=`/**\n * @param {...any} args\n * @return {number}\n */\nexport default function numberOfArguments() {\n  return arguments.length;\n}\n`;var h=`export default function numberOfArguments(...args: Array<any>): number {\n  return arguments.length;\n}\n`;var m=`/**\n * @param {...any} args\n * @return {number}\n */\nexport default function numberOfArguments(...args) {\n  return args.length;\n}\n`;var f=`export default function numberOfArguments(...args: Array<any>): number {\n  return args.length;\n}\n`;function g(r){let e=Object.assign({h2:\"h2\",h3:\"h3\",code:\"code\",p:\"p\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Approach 1: Using \",(0,n.jsx)(e.code,{children:\"arguments\"}),\" object\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"arguments\"}),\" object is an array-like object that is accessible inside functions and it contains values or arguments passed to that function. Hence we can use \",(0,n.jsx)(e.code,{children:\"arguments.length\"}),\" to determine the number of arguments passed.\"]}),`\n`,(0,n.jsx)(o,{languages:{jsx:d,tsx:h}}),`\n`,(0,n.jsx)(e.h3,{children:\"Approach 2: Using rest parameters\"}),`\n`,(0,n.jsx)(e.p,{children:\"The rest parameter syntax allows a function to accept a variable number of arguments as an array. It can be used with named parameters before it, but by using it solely as the function's parameters (like in the skeleton code), it captures all arguments passed to the function.\"}),`\n`,(0,n.jsx)(o,{languages:{jsx:m,tsx:f}}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Calling a function with \",(0,n.jsx)(e.code,{children:\"undefined\"}),\". \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" is still counted as a parameter. Default function parameters will be initialized with default values if no value or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" is passed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function foo(a = 1) {\n  return a;\n}\n\nfoo(undefined); // 1\nfoo(); // 1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsx)(e.p,{children:\"What happens for functions that have default parameters? The answer is that they behave exactly the same.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function foo(a = 1, b = 2) {\n  return arguments.length;\n}\n\nfoo(); // 0\nfoo(3); // 1\nfoo(undefined); // 1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\",children:\"The arguments object | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\",children:\"Rest parameters | MDN\"})}),`\n`]})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(g,r)})):g(r)}var k=T;return w(C);})();\n;return Component;",
  "workspace": {
    "main": "/src/number-of-arguments.ts",
    "run": "/src/number-of-arguments.run.test.ts",
    "submit": "/src/number-of-arguments.submit.test.ts"
  }
}