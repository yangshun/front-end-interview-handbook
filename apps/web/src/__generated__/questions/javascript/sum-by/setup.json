{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/sum-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/sum-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/sum-by.run.test.ts": "import sumBy from './sum-by';\n\ndescribe('sumBy', () => {\n  test('no matching value', () => {\n    expect(sumBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual(undefined);\n  });\n\n  test('iteratee as a string', () => {\n    expect(sumBy([{ n: 1 }, { n: 3 }], (o: any) => o.n)).toEqual(4);\n  });\n\n  test('iteratee as a function', () => {\n    expect(sumBy([{ n: 1 }, { n: 3 }], (o: any) => o.n)).toEqual(4);\n  });\n});\n",
    "/src/sum-by.submit.test.ts": "import sumBy from './sum-by';\n\ndescribe('sumBy', () => {\n  test('empty input array', () => {\n    expect(sumBy([], (o: any) => o.n)).toEqual(0);\n  });\n\n  test('iteratee as a function', () => {\n    expect(\n      sumBy(\n        [{ data: { score: 10 } }, { data: { score: 20 } }],\n        (o: any) => o.data.score,\n      ),\n    ).toEqual(30);\n  });\n\n  test('strings comparison', () => {\n    expect(\n      sumBy(['apple', 'pear', 'banana'], (fruit: any) => fruit.length),\n    ).toEqual(15);\n  });\n\n  test('non-existent property', () => {\n    expect(sumBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual(undefined);\n    expect(sumBy([{ n: 1 }, { m: 2 }], (o: any) => o.m)).toEqual(2);\n  });\n\n  test('mixed data types', () => {\n    expect(sumBy([1, '2', 3], (item: any) => Number(item))).toEqual(6);\n  });\n\n  test('missing property in some objects', () => {\n    expect(sumBy([{ a: 1 }, { b: 2 }, { c: 3 }], (obj: any) => obj.d)).toEqual(\n      undefined,\n    );\n    expect(\n      sumBy([{ a: 1, b: 2 }, { b: 3 }, { c: 4 }], (obj: any) => obj.b),\n    ).toEqual(5);\n  });\n\n  test('nested property', () => {\n    expect(\n      sumBy(\n        [\n          { data: { nested: { value: 5 } } },\n          { data: { nested: { value: 10 } } },\n        ],\n        (obj: any) => obj.data.nested.value,\n      ),\n    ).toEqual(15);\n  });\n\n  test('null or undefined values', () => {\n    expect(\n      sumBy([{ a: null }, { a: undefined }, { a: 3 }], (obj: any) => obj.a),\n    ).toEqual(3);\n  });\n\n  test('negative values', () => {\n    expect(sumBy([{ a: 1 }, { a: -3 }, { a: 5 }], (obj: any) => obj.a)).toEqual(\n      3,\n    );\n    expect(\n      sumBy([{ a: -2 }, { a: -4 }, { a: -6 }], (obj: any) => obj.a),\n    ).toEqual(-12);\n  });\n});\n",
    "/src/sum-by.ts": "export default function sumBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): Number | undefined {\n  let sum = 0,\n    found = false;\n  if (array.length == 0) {\n    return 0;\n  }\n\n  // Iterate through `array` to find the sum.\n  for (const value of array) {\n    const current = iteratee(value);\n    if (current != null) {\n      sum += current; // Store the calculated value of the current `result`.\n      found = true; // Check if there is any element that fulfills `iteratee`.\n    }\n  }\n\n  if (!found) {\n    return undefined;\n  }\n  return sum;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Number | undefined} Returns the sum.\n */\nexport default function sumBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function sumBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | undefined,\n): Number | undefined {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/sum-by.ts",
    "run": "/src/sum-by.run.test.ts",
    "submit": "/src/sum-by.submit.test.ts"
  }
}