{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/is-empty\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/is-empty.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/is-empty.run.test.ts": "import isEmpty from './is-empty';\n\ndescribe('isEmpty', () => {\n  test('primitives', () => {\n    expect(isEmpty(true)).toBe(true);\n    expect(isEmpty(1)).toBe(true);\n  });\n\n  test('strings', () => {\n    expect(isEmpty('')).toBe(true);\n    expect(isEmpty('foo')).toBe(false);\n  });\n\n  test('objects', () => {\n    expect(isEmpty({})).toBe(true);\n    expect(isEmpty({ foo: 1 })).toBe(false);\n  });\n});\n",
    "/src/is-empty.submit.test.ts": "import isEmpty from './is-empty';\n\ndescribe('isEmpty', () => {\n  test('empty values', () => {\n    expect(isEmpty(true)).toBe(true);\n    expect(isEmpty(1)).toBe(true);\n    expect(isEmpty(NaN)).toBe(true);\n    expect(isEmpty(/x/)).toBe(true);\n    expect(isEmpty(Symbol('x'))).toBe(true);\n  });\n\n  describe('strings', () => {\n    test('empty string', () => {\n      expect(isEmpty('')).toBe(true);\n    });\n\n    test('non-empty string', () => {\n      expect(isEmpty('a')).toBe(false);\n    });\n  });\n\n  describe('objects', () => {\n    test('empty object', () => {\n      expect(isEmpty({})).toBe(true);\n    });\n\n    test('non-empty object', () => {\n      expect(isEmpty({ a: 0 })).toBe(false);\n    });\n\n    test('object that has a `length` property', () => {\n      expect(isEmpty({ length: 0 })).toBe(false);\n    });\n\n    test('objects with negative lengths', function () {\n      function Foo() {}\n      Foo.prototype.length = -1;\n\n      expect(isEmpty(new (Foo as any)())).toBe(true);\n    });\n\n    test('non-number lengths', function () {\n      expect(isEmpty({ length: '0' })).toBe(false);\n    });\n  });\n\n  describe('maps', function () {\n    test('empty map', () => {\n      const map = new Map();\n      expect(isEmpty(map)).toBe(true);\n    });\n\n    test('non-empty map', () => {\n      const map = new Map([['a', 1]]);\n      expect(isEmpty(map)).toBe(false);\n    });\n  });\n\n  describe('sets', function () {\n    test('empty set', () => {\n      const set = new Set();\n      expect(isEmpty(set)).toBe(true);\n    });\n\n    test('non-empty set', () => {\n      const set = new Set([1]);\n      expect(isEmpty(set)).toBe(false);\n    });\n  });\n\n  describe('arrays', () => {\n    test('empty array', () => {\n      expect(isEmpty([])).toBe(true);\n    });\n\n    test('non-empty array', () => {\n      expect(isEmpty([1])).toBe(false);\n    });\n  });\n});\n",
    "/src/is-empty.ts": "export default function isEmpty(value: unknown): boolean {\n  if (value == null) {\n    return true;\n  }\n\n  // Arrays/Strings.\n  if (Array.isArray(value) || typeof value === 'string') {\n    return value.length === 0;\n  }\n\n  // Maps/Sets.\n  if (value instanceof Map || value instanceof Set) {\n    return value.size === 0;\n  }\n\n  // Plain objects.\n  const prototype = Object.getPrototypeOf(value);\n  if (prototype === null || prototype === Object.prototype) {\n    return Object.keys(value).length === 0;\n  }\n\n  return true;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n */\nexport default function isEmpty(value) {\n  throw 'Not implemented';\n}",
    "ts": "export default function isEmpty(value: unknown): boolean {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/is-empty.ts",
    "run": "/src/is-empty.run.test.ts",
    "submit": "/src/is-empty.submit.test.ts"
  }
}