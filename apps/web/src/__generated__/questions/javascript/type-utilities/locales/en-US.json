{
  "description": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var l in e)r(n,l,{get:e[l],enumerable:!0})},d=(n,e,l,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of f(e))!p.call(n,c)&&c!==l&&r(n,c,{get:()=>e[c],enumerable:!(t=u(e,c))||t.enumerable});return n};var g=(n,e,l)=>(l=n!=null?h(v(n)):{},d(e||!n||!n.__esModule?r(l,\"default\",{value:n,enumerable:!0}):l,n)),b=n=>d(r({},\"__esModule\",{value:!0}),n);var a=m((_,o)=>{o.exports=_jsx_runtime});var q={};y(q,{default:()=>x,frontmatter:()=>w});var i=g(a()),w={title:\"Type Utilities\",excerpt:\"Implement utilities to determine primitive variable types in JavaScript\"};function s(n){let e=Object.assign({p:\"p\",a:\"a\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[\"JavaScript is a dynamically typed language, which means the types of variable can be changed during runtime. Many interview questions involve recursion of values that contain values of different types and how to handle each value type (e.g. different code is needed to iterate over an array vs an object). Knowledge of handling the JavaScript types is crucial to solving questions like \",(0,i.jsx)(e.a,{href:\"/questions/javascript/deep-clone\",children:\"Deep Clone\"}),\" and \",(0,i.jsx)(e.a,{href:\"/questions/javascript/deep-equal\",children:\"Deep Equal\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:\"In this question, we will implement the following utility functions to determine the types of primitive values.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"isBoolean(value)\"}),\": Return \",(0,i.jsx)(e.code,{children:\"true\"}),\" if \",(0,i.jsx)(e.code,{children:\"value\"}),\" is a boolean, \",(0,i.jsx)(e.code,{children:\"false\"}),\" otherwise.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"isNumber(value)\"}),\": Return \",(0,i.jsx)(e.code,{children:\"true\"}),\" if \",(0,i.jsx)(e.code,{children:\"value\"}),\" is a number, \",(0,i.jsx)(e.code,{children:\"false\"}),\" otherwise. Note that \",(0,i.jsx)(e.code,{children:\"NaN\"}),\" is considered a number.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"isNull(value)\"}),\": Return \",(0,i.jsx)(e.code,{children:\"true\"}),\" if \",(0,i.jsx)(e.code,{children:\"value\"}),\" is \",(0,i.jsx)(e.code,{children:\"null\"}),\", \",(0,i.jsx)(e.code,{children:\"false\"}),\" otherwise.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"isString(value)\"}),\": Return \",(0,i.jsx)(e.code,{children:\"true\"}),\" if \",(0,i.jsx)(e.code,{children:\"value\"}),\" is a \",(0,i.jsx)(e.code,{children:\"String\"}),\", else \",(0,i.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"isSymbol(value)\"}),\": Return \",(0,i.jsx)(e.code,{children:\"true\"}),\" if \",(0,i.jsx)(e.code,{children:\"value\"}),\" is a \",(0,i.jsx)(e.code,{children:\"Symbol\"}),\" primitive, else \",(0,i.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"isUndefined(value)\"}),\": Return \",(0,i.jsx)(e.code,{children:\"true\"}),\" if \",(0,i.jsx)(e.code,{children:\"value\"}),\" is \",(0,i.jsx)(e.code,{children:\"undefined\"}),\", else \",(0,i.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(s,n)})):s(n)}var x=j;return b(q);})();\n;return Component;",
  "info": {
    "excerpt": "Implement utilities to determine primitive variable types in JavaScript",
    "title": "Type Utilities"
  },
  "solution": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var o in e)l(n,o,{get:e[o],enumerable:!0})},r=(n,e,o,u)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of v(e))!y.call(n,i)&&i!==o&&l(n,i,{get:()=>e[i],enumerable:!(u=m(e,i))||u.enumerable});return n};var w=(n,e,o)=>(o=n!=null?h(x(n)):{},r(e||!n||!n.__esModule?l(o,\"default\",{value:n,enumerable:!0}):o,n)),k=n=>r(l({},\"__esModule\",{value:!0}),n);var s=b((D,a)=>{a.exports=_jsx_runtime});var B={};g(B,{default:()=>S});var t=w(s());var c=MDXCodeBlock;var d=`export function isBoolean(value) {\n  return value === true || value === false;\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n\nexport function isNull(value) {\n  return value === null;\n}\n\nexport function isString(value) {\n  return typeof value === 'string';\n}\n\nexport function isSymbol(value) {\n  return typeof value === 'symbol';\n}\n\nexport function isUndefined(value) {\n  return value === undefined;\n}\n`;var f=`export function isBoolean(value: unknown): boolean {\n  return value === true || value === false;\n}\n\nexport function isNumber(value: unknown): boolean {\n  return typeof value === 'number';\n}\n\nexport function isNull(value: unknown): boolean {\n  return value === null;\n}\n\nexport function isString(value: unknown): boolean {\n  return typeof value === 'string';\n}\n\nexport function isSymbol(value: unknown): boolean {\n  return typeof value === 'symbol';\n}\n\nexport function isUndefined(value: unknown): boolean {\n  return value === undefined;\n}\n`;function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Implementing these utility functions won't be an entire interview question itself, but you likely need to implement some of these utility functions as part of solving more complex interview questions.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Most of the functions involve only one line and you might not even need to write a separate function for a single line of logic. The more important thing here is to know how to check for each data type.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"It's also important to note the difference between \",(0,t.jsx)(e.code,{children:\"null\"}),\" and \",(0,t.jsx)(e.code,{children:\"undefined\"}),\". \",(0,t.jsx)(e.code,{children:\"null == undefined\"}),\" is \",(0,t.jsx)(e.code,{children:\"true\"}),\", so we need to use \",(0,t.jsx)(e.code,{children:\"===\"}),\" if the intention is to check for exact \",(0,t.jsx)(e.code,{children:\"null\"}),\" and \",(0,t.jsx)(e.code,{children:\"undefined\"}),\" values.\"]}),`\n`,(0,t.jsx)(c,{languages:{jsx:d,tsx:f}}),`\n`,(0,t.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Familiarity with JavaScript types.\"}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var S=M;return k(B);})();\n;return Component;"
}