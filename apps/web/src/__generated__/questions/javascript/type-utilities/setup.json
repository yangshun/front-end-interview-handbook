{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/type-utilities\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/type-utilities.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/type-utilities.run.test.ts": "import {\n  isBoolean,\n  isNumber,\n  isNull,\n  isString,\n  isSymbol,\n  isUndefined,\n} from './type-utilities';\n\ndescribe('type-utilities', () => {\n  test('isBoolean', () => {\n    expect(isBoolean(true)).toBe(true);\n  });\n\n  test('isNumber', () => {\n    expect(isNumber(1)).toBe(true);\n  });\n\n  test('isNull', () => {\n    expect(isNull(null)).toBe(true);\n  });\n\n  test('isString', () => {\n    expect(isString('hello')).toBe(true);\n  });\n\n  test('isSymbol', () => {\n    expect(isSymbol(Symbol('hello'))).toBe(true);\n  });\n\n  test('isUndefined', () => {\n    expect(isUndefined(undefined)).toBe(true);\n  });\n});\n",
    "/src/type-utilities.submit.test.ts": "import {\n  isBoolean,\n  isNumber,\n  isNull,\n  isString,\n  isSymbol,\n  isUndefined,\n} from './type-utilities';\n\ndescribe('type-utilities', () => {\n  describe('isBoolean', () => {\n    test('true', () => {\n      expect(isBoolean(true)).toBe(true);\n    });\n\n    test('false', () => {\n      expect(isBoolean(false)).toBe(true);\n    });\n\n    test('non-boolean', () => {\n      expect(isBoolean('true')).toBe(false);\n      expect(isBoolean([1, 2, 3])).toBe(false);\n      expect(isBoolean(new Date())).toBe(false);\n      expect(isBoolean(new Error())).toBe(false);\n      expect(isBoolean({ a: 1 })).toBe(false);\n      expect(isBoolean(/x/)).toBe(false);\n      expect(isBoolean('a')).toBe(false);\n      expect(isBoolean(null)).toBe(false);\n      expect(isBoolean(undefined)).toBe(false);\n      expect(isBoolean(1)).toBe(false);\n      expect(isBoolean(NaN)).toBe(false);\n      expect(isBoolean(Symbol('symbol'))).toBe(false);\n    });\n  });\n\n  describe('isNumber', () => {\n    test('numbers', () => {\n      expect(isNumber(1)).toBe(true);\n      expect(isNumber(0)).toBe(true);\n      expect(isNumber(-2)).toBe(true);\n      expect(isNumber(5)).toBe(true);\n    });\n\n    test('NaN', () => {\n      expect(isNumber(NaN)).toBe(true);\n    });\n\n    test('non-numbers', () => {\n      expect(isNumber('true')).toBe(false);\n      expect(isNumber([1, 2, 3])).toBe(false);\n      expect(isNumber(true)).toBe(false);\n      expect(isNumber(false)).toBe(false);\n      expect(isNumber(new Date())).toBe(false);\n      expect(isNumber(new Error())).toBe(false);\n      expect(isNumber({ a: 1 })).toBe(false);\n      expect(isNumber(/x/)).toBe(false);\n      expect(isNumber('a')).toBe(false);\n      expect(isNumber(null)).toBe(false);\n      expect(isNumber(undefined)).toBe(false);\n      expect(isNumber(Symbol('symbol'))).toBe(false);\n    });\n  });\n\n  describe('isNull', () => {\n    test('null', () => {\n      expect(isNull(null)).toBe(true);\n    });\n\n    test('undefined', () => {\n      expect(isNull(undefined)).toBe(false);\n    });\n\n    test('non-null', () => {\n      expect(isNull('true')).toBe(false);\n      expect(isNull([1, 2, 3])).toBe(false);\n      expect(isNull(true)).toBe(false);\n      expect(isNull(false)).toBe(false);\n      expect(isNull(new Date())).toBe(false);\n      expect(isNull(new Error())).toBe(false);\n      expect(isNull({ a: 1 })).toBe(false);\n      expect(isNull(/x/)).toBe(false);\n      expect(isNull('a')).toBe(false);\n      expect(isNull(undefined)).toBe(false);\n      expect(isNull(1)).toBe(false);\n      expect(isNull(NaN)).toBe(false);\n      expect(isNull(Symbol('symbol'))).toBe(false);\n    });\n  });\n\n  describe('isString', () => {\n    test('strings', () => {\n      expect(isString('hello')).toBe(true);\n      expect(isString('')).toBe(true);\n      expect(isString('1234')).toBe(true);\n    });\n\n    test('non-string', () => {\n      expect(isString([1, 2, 3])).toBe(false);\n      expect(isString(true)).toBe(false);\n      expect(isString(false)).toBe(false);\n      expect(isString(new Date())).toBe(false);\n      expect(isString(new Error())).toBe(false);\n      expect(isString({ a: 1 })).toBe(false);\n      expect(isString(/x/)).toBe(false);\n      expect(isString(null)).toBe(false);\n      expect(isString(undefined)).toBe(false);\n      expect(isString(1)).toBe(false);\n      expect(isString(NaN)).toBe(false);\n      expect(isString(Symbol('symbol'))).toBe(false);\n    });\n  });\n\n  describe('isSymbol', () => {\n    test('symbols', () => {\n      expect(isSymbol(Symbol('hello'))).toBe(true);\n      expect(isSymbol(Symbol(2))).toBe(true);\n    });\n\n    test('non-symbols', () => {\n      expect(isSymbol('true')).toBe(false);\n      expect(isSymbol([1, 2, 3])).toBe(false);\n      expect(isSymbol(true)).toBe(false);\n      expect(isSymbol(false)).toBe(false);\n      expect(isSymbol(new Date())).toBe(false);\n      expect(isSymbol(new Error())).toBe(false);\n      expect(isSymbol({ a: 1 })).toBe(false);\n      expect(isSymbol(/x/)).toBe(false);\n      expect(isSymbol('a')).toBe(false);\n      expect(isSymbol(null)).toBe(false);\n      expect(isSymbol(undefined)).toBe(false);\n      expect(isSymbol(1)).toBe(false);\n      expect(isSymbol(NaN)).toBe(false);\n    });\n  });\n\n  describe('isUndefined', () => {\n    test('undefined', () => {\n      expect(isUndefined(undefined)).toBe(true);\n    });\n\n    test('null', () => {\n      expect(isUndefined(null)).toBe(false);\n    });\n\n    test('non-undefined', () => {\n      expect(isUndefined('true')).toBe(false);\n      expect(isUndefined([1, 2, 3])).toBe(false);\n      expect(isUndefined(true)).toBe(false);\n      expect(isUndefined(false)).toBe(false);\n      expect(isUndefined(new Date())).toBe(false);\n      expect(isUndefined(new Error())).toBe(false);\n      expect(isUndefined({ a: 1 })).toBe(false);\n      expect(isUndefined(/x/)).toBe(false);\n      expect(isUndefined('a')).toBe(false);\n      expect(isUndefined(null)).toBe(false);\n      expect(isUndefined(1)).toBe(false);\n      expect(isUndefined(NaN)).toBe(false);\n      expect(isUndefined(Symbol('symbol'))).toBe(false);\n    });\n  });\n});\n",
    "/src/type-utilities.ts": "export function isBoolean(value: unknown): boolean {\n  return value === true || value === false;\n}\n\nexport function isNumber(value: unknown): boolean {\n  return typeof value === 'number';\n}\n\nexport function isNull(value: unknown): boolean {\n  return value === null;\n}\n\nexport function isString(value: unknown): boolean {\n  return typeof value === 'string';\n}\n\nexport function isSymbol(value: unknown): boolean {\n  return typeof value === 'symbol';\n}\n\nexport function isUndefined(value: unknown): boolean {\n  return value === undefined;\n}\n"
  },
  "skeleton": {
    "js": "export function isBoolean(value) {\n  throw 'Not implemented!';\n}\n\nexport function isNumber(value) {\n  throw 'Not implemented!';\n}\n\nexport function isNull(value) {\n  throw 'Not implemented!';\n}\n\nexport function isString(value) {\n  throw 'Not implemented!';\n}\n\nexport function isSymbol(value) {\n  throw 'Not implemented!';\n}\n\nexport function isUndefined(value) {\n  throw 'Not implemented!';\n}",
    "ts": "export function isBoolean(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isNumber(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isNull(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isString(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isSymbol(value: unknown): boolean {\n  throw 'Not implemented!';\n}\n\nexport function isUndefined(value: unknown): boolean {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/type-utilities.ts",
    "run": "/src/type-utilities.run.test.ts",
    "submit": "/src/type-utilities.submit.test.ts"
  }
}