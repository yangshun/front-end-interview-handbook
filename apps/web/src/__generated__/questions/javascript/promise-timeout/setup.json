{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/promise-timeout\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/promise-timeout.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/promise-timeout.run.test.ts": "import promiseTimeout from './promise-timeout';\n\ndescribe('promiseTimeout', () => {\n  test('returns a promise', () => {\n    const promise = promiseTimeout(Promise.resolve(1), 100);\n    expect(promise).toBeInstanceOf(Promise);\n  });\n\n  test('resolves before timeout', async () => {\n    const promise = promiseTimeout(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(42);\n        }, 50);\n      }),\n      100,\n    );\n    await expect(promise).resolves.toBe(42);\n  });\n\n  test('timeout', async () => {\n    const promise = promiseTimeout(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(42);\n        }, 200);\n      }),\n      100,\n    );\n    await expect(promise).rejects.toBe('Promise timeout');\n  });\n});\n",
    "/src/promise-timeout.submit.test.ts": "import promiseTimeout from './promise-timeout';\n\ndescribe('promiseTimeout', () => {\n  test('returns a promise', () => {\n    const promise = promiseTimeout(Promise.resolve(1), 100);\n    expect(promise).toBeInstanceOf(Promise);\n  });\n\n  describe('settled', () => {\n    describe('resolved', () => {\n      test('immediately', async () => {\n        const promise = promiseTimeout(Promise.resolve(42), 100);\n        await expect(promise).resolves.toBe(42);\n      });\n\n      test('next tick', async () => {\n        const promise = promiseTimeout(\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve(42);\n            }, 0);\n          }),\n          100,\n        );\n        await expect(promise).resolves.toBe(42);\n      });\n\n      test('before timeout', async () => {\n        const promise = promiseTimeout(\n          new Promise((resolve) => {\n            setTimeout(() => {\n              resolve(42);\n            }, 50);\n          }),\n          100,\n        );\n        await expect(promise).resolves.toBe(42);\n      });\n    });\n\n    describe('rejected', () => {\n      test('immediately', async () => {\n        const promise = promiseTimeout(Promise.reject(42), 100);\n        await expect(promise).rejects.toBe(42);\n      });\n\n      test('next tick', async () => {\n        const promise = promiseTimeout(\n          new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(42);\n            }, 0);\n          }),\n          100,\n        );\n        await expect(promise).rejects.toBe(42);\n      });\n\n      test('before timeout', async () => {\n        const promise = promiseTimeout(\n          new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(42);\n            }, 50);\n          }),\n          100,\n        );\n        await expect(promise).rejects.toBe(42);\n      });\n    });\n  });\n\n  describe('timeout', () => {\n    test('immediate', async () => {\n      const promise = promiseTimeout(\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(42);\n          }, 500);\n        }),\n        0,\n      );\n\n      await expect(promise).rejects.toBe('Promise timeout');\n    });\n\n    test('all immediate', async () => {\n      const promise = promiseTimeout(\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(42);\n          }, 0);\n        }),\n        0,\n      );\n      await expect(promise).resolves.toBe(42);\n    });\n\n    test('non-immediate', async () => {\n      const promise = promiseTimeout(\n        new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(42);\n          }, 200);\n        }),\n        100,\n      );\n      await expect(promise).rejects.toBe('Promise timeout');\n    });\n  });\n});\n",
    "/src/promise-timeout.ts": "export default function promiseTimeout<T>(\n  promise: Promise<T>,\n  duration: number,\n): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject('Promise timeout');\n    }, duration);\n\n    promise\n      .then(resolve)\n      .catch(reject)\n      .finally(() => {\n        clearTimeout(timeoutId);\n      });\n  });\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {Promise<T>} promise\n * @param {number} duration\n * @return {Promise<T>}\n */\nexport default function promiseTimeout(promise, duration) {\n  throw 'Not implemented';\n}",
    "ts": "export default function promiseTimeout<T>(\n  promise: Promise<T>,\n  duration: number,\n): Promise<T> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/promise-timeout.ts",
    "run": "/src/promise-timeout.run.test.ts",
    "submit": "/src/promise-timeout.submit.test.ts"
  }
}