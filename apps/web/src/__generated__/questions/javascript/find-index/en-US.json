{
  "description": "var Component=(()=>{var s=Object.create;var t=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var p=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var i in e)t(r,i,{get:e[i],enumerable:!0})},c=(r,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of m(e))!x.call(r,d)&&d!==i&&t(r,d,{get:()=>e[d],enumerable:!(a=u(e,d))||a.enumerable});return r};var y=(r,e,i)=>(i=r!=null?s(f(r)):{},c(e||!r||!r.__esModule?t(i,\"default\",{value:r,enumerable:!0}):i,r)),I=r=>c(t({},\"__esModule\",{value:!0}),r);var h=p((T,l)=>{l.exports=_jsx_runtime});var w={};g(w,{default:()=>j,frontmatter:()=>v});var n=y(h()),v={title:\"Find Index\",excerpt:\"Implement a function that returns the index of the first element in the array that satisfies the provided testing function\"};function o(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a function \",(0,n.jsx)(e.code,{children:\"findIndex(array, predicate, [fromIndex=0])\"}),\" that takes an array of values, a function \",(0,n.jsx)(e.code,{children:\"predicate\"}),\", and an optional \",(0,n.jsx)(e.code,{children:\"fromIndex\"}),\" number argument, and returns the index of the first element in the array that satisfies the provided testing function \",(0,n.jsx)(e.code,{children:\"predicate\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`findIndex(array, predicate, [(fromIndex = 0)]);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": The array to inspect.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"predicate\"}),\" \",(0,n.jsx)(e.em,{children:\"(Function)\"}),\": The function invoked per iteration.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"[fromIndex=0]\"}),\" \",(0,n.jsx)(e.em,{children:\"(number)\"}),\": The index to search from.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Predicate signature: The \",(0,n.jsx)(e.code,{children:\"predicate\"}),\" function is invoked with three arguments: \",(0,n.jsx)(e.code,{children:\"(value, index, array)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"value\"}),\": The current element being iterated.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"index\"}),\": The index of the current element.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\": The original input array.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(number)\"}),\": Returns the index of the found element, else \",(0,n.jsx)(e.code,{children:\"-1\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [1, 2, 3, 4, 5];\n\n// Search for the first value in the array that is greater than 3.\nfindIndex(arr, (num) => num > 3); // => 3\n\n// Start searching from index 4 (inclusive).\nfindIndex(arr, (num) => num > 3, 4); // => 4\n\n// No such element exists.\nfindIndex(arr, (num) => num > 10, 3); // => -1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,n.jsx)(e.p,{children:\"Your function should handle negative and out of bound indices, as demonstrated in the examples below.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Negative: negative integers count back from the last item in the array. \",(0,n.jsx)(e.code,{children:\"-1\"}),\" means the last element in the array, \",(0,n.jsx)(e.code,{children:\"-2\"}),\" means the second last element, and so on.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Out of bound: if \",(0,n.jsx)(e.code,{children:\"index < -(array.length)\"}),\", start searching from index 0. If \",(0,n.jsx)(e.code,{children:\"index\"}),\" >= \",(0,n.jsx)(e.code,{children:\"array.length\"}),\", no search will take place and you should return -1.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [1, 2, 3, 4, 5];\n\n// Start searching from index 2 (inclusive).\nfindIndex(arr, (num) => num > 2, -3); // => 2\n\nfindIndex(arr, (num) => num % 2 === 0, -3); // => 3\n\n// Start from 0 if fromIndex < -(array.length)\nfindIndex(arr, (num) => num > 2, -10); // => 2\n\n// Search rightwards from index that's already out of bounds,\n// which will always result in -1.\nfindIndex(arr, (num) => num > 2, 10); // => -1\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#findIndex\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.findIndex\"})]})}),`\n`]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(o,r)})):o(r)}var j=b;return I(w);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/find-index\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/find-index.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/find-index.run.test.ts": "import findIndex from './find-index';\n\ndescribe('findIndex', () => {\n  test('empty array', () => {\n    expect(findIndex([], (num: number) => num % 2 === 0)).toBe(-1);\n  });\n\n  test('finds index of first even number', () => {\n    expect(findIndex([4, 12, 8, 130, 44], (num: number) => num % 2 === 0)).toBe(\n      0,\n    );\n    expect(findIndex([5, 12, 8, 130, 44], (num: number) => num % 2 === 0)).toBe(\n      1,\n    );\n  });\n});\n",
    "/src/find-index.submit.test.ts": "import findIndex from './find-index';\n\ndescribe('findIndex', () => {\n  const basicArr = [5, 12, 8, 130, 44, 99, 32, 15];\n  const mixedArr = [10, 'apple', 20, 'banana', 30, 'cherry', 40];\n  const objArr = [{ id: 1 }, { id: 5 }, { id: 10 }, { id: 5 }, { id: 15 }];\n  const searchArr = [5, 12, 8, 130, 44, 99, 32, 15]; // Indices 0-7\n\n  describe('empty array', () => {\n    test('empty array always returns -1', () => {\n      expect(\n        findIndex(\n          [],\n          (value: any, _index: number, _array: any[]) => value === 0,\n        ),\n      ).toBe(-1);\n    });\n    test('empty array with positive fromIndex', () => {\n      expect(\n        findIndex(\n          [],\n          (value: any, _index: number, _array: any[]) => value === 0,\n          5,\n        ),\n      ).toBe(-1);\n    });\n    test('empty array with negative fromIndex', () => {\n      expect(\n        findIndex(\n          [],\n          (value: any, _index: number, _array: any[]) => value === 0,\n          -5,\n        ),\n      ).toBe(-1);\n    });\n  });\n\n  describe('basic functionality', () => {\n    test('finds index of first even number', () => {\n      expect(\n        findIndex(\n          [4, 12, 8, 130, 44],\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n        ),\n      ).toBe(0);\n      expect(\n        findIndex(\n          basicArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n        ),\n      ).toBe(1); // 12 is the first even\n    });\n    test('finds index of first odd number', () => {\n      expect(\n        findIndex(\n          basicArr,\n          (num: number, _index: number, _array: number[]) => num % 2 !== 0,\n        ),\n      ).toBe(0); // 5 is the first odd\n      expect(\n        findIndex(\n          [4, 12, 8, 130, 44, 99],\n          (num: number, _index: number, _array: number[]) => num % 2 !== 0,\n        ),\n      ).toBe(5); // 99 is the first odd\n    });\n    test('finds index of first string', () => {\n      expect(\n        findIndex(\n          mixedArr,\n          (val: any, _index: number, _array: any[]) => typeof val === 'string',\n        ),\n      ).toBe(1); // 'apple'\n    });\n    test('finds index of first string longer than 5 chars', () => {\n      expect(\n        findIndex(\n          mixedArr,\n          (val: any, _index: number, _array: any[]) =>\n            typeof val === 'string' && val.length > 5,\n        ),\n      ).toBe(3); // 'banana'\n    });\n    test('finds index of first object with id > 5', () => {\n      expect(\n        findIndex(\n          objArr,\n          (obj: { id: number }, _index: number, _array: any[]) => obj.id > 5,\n        ),\n      ).toBe(2); // { id: 10 }\n    });\n    test('finds index using index parameter', () => {\n      // Find first element whose value is less than its index\n      expect(\n        findIndex(\n          [5, 4, 3, 2, 1],\n          (val: number, index: number, _array: number[]) => val < index,\n        ),\n      ).toBe(3); // value 2 at index 3\n    });\n    test('finds index using array parameter', () => {\n      // Find first element greater than the last element\n      expect(\n        findIndex(\n          [10, 5, 20, 15, 18],\n          (val: number, _index: number, arr: number[]) =>\n            val > arr[arr.length - 1],\n        ),\n      ).toBe(2); // 20 > 18\n    });\n  });\n\n  describe('no element passes test', () => {\n    test('no element passes test (simple)', () => {\n      expect(\n        findIndex(\n          [5, 12, 8, 130, 44],\n          (num: number, _index: number, _array: number[]) => num > 200,\n        ),\n      ).toBe(-1);\n    });\n    test('no element passes test (type mismatch)', () => {\n      expect(\n        findIndex(\n          [1, 2, 3, 4],\n          (val: any, _index: number, _array: any[]) => typeof val === 'string',\n        ),\n      ).toBe(-1);\n    });\n    test('no element passes test (always false predicate)', () => {\n      expect(\n        findIndex(\n          [1, 2, 3, 4],\n          (_val: any, _index: number, _array: any[]) => false,\n        ),\n      ).toBe(-1);\n    });\n    test('no element passes test (object property)', () => {\n      expect(\n        findIndex(\n          objArr,\n          (obj: { id: number }, _index: number, _array: any[]) =>\n            obj.id === 100,\n        ),\n      ).toBe(-1);\n    });\n  });\n\n  describe('searches from given positive start index', () => {\n    test('basic', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n          1,\n        ),\n      ).toBe(1); // Start at 12, finds 12\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 10 === 0,\n          2,\n        ),\n      ).toBe(3); // Start at 8, finds 130\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n          4,\n        ),\n      ).toBe(4); // Start at 44, finds 44\n    });\n    test('searches from start index, finds later element', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 32,\n          2,\n        ),\n      ).toBe(6); // Start at 8, find 32\n    });\n    test('searches from start index, finds element at start index', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 130,\n          3,\n        ),\n      ).toBe(3); // Start at 130, find 130\n    });\n    test('searches from start index, no match found after start', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 5,\n          1,\n        ),\n      ).toBe(-1); // Start at 12, look for 5, not found\n    });\n    test('using index predicate', () => {\n      // Find first element where index > 5, starting search from index 4\n      expect(\n        findIndex(\n          searchArr,\n          (_val: number, index: number, _array: number[]) => index > 5,\n          4,\n        ),\n      ).toBe(6); // Start at 44 (idx 4), check 99 (idx 5), find 32 (idx 6)\n    });\n  });\n\n  describe('handles negative start index', () => {\n    // searchArr = [5, 12, 8, 130, 44, 99, 32, 15]; // Length 8\n    // Indices:    0   1  2    3   4   5   6   7\n    // Negative:  -8  -7 -6   -5  -4  -3  -2  -1\n    test('basic', () => {\n      // Start at index 6 (-2), find num > 30 -> finds 32 at index 6\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 30,\n          -2,\n        ),\n      ).toBe(6);\n      // Start at index 4 (-4), find num < 50 -> finds 44 at index 4\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num < 50,\n          -4,\n        ),\n      ).toBe(4);\n    });\n    test('negative start index -1 (last element)', () => {\n      // Start at index 7 (-1), find num === 15 -> finds 15 at index 7\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 15,\n          -1,\n        ),\n      ).toBe(7);\n      // Start at index 7 (-1), find num > 100 -> returns -1\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 100,\n          -1,\n        ),\n      ).toBe(-1);\n    });\n    test('negative start index -array.length (starts at 0)', () => {\n      // Start at index 0 (-8), find num > 100 -> finds 130 at index 3\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 100,\n          -8,\n        ),\n      ).toBe(3);\n    });\n    test('negative start index mid-array', () => {\n      // Start at index 3 (-5), find num === 99 -> finds 99 at index 5\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 99,\n          -5,\n        ),\n      ).toBe(5);\n    });\n    test('negative start index, no match found after start', () => {\n      // Start at index 5 (-3), no number < 10 after that -> returns -1\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num < 10,\n          -3,\n        ),\n      ).toBe(-1);\n    });\n  });\n\n  describe('handles out of bound index', () => {\n    // searchArr = [5, 12, 8, 130, 44, 99, 32, 15]; // Length 8\n    test('positive out of bound index (start >= length)', () => {\n      // Start at index 8 (length), should find nothing\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num >= 0,\n          8,\n        ),\n      ).toBe(-1);\n      // Start at index 10 (way out), should find nothing\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num >= 0,\n          10,\n        ),\n      ).toBe(-1);\n    });\n    test('negative out of bound index (start < -length)', () => {\n      // Start at index -10 (resolves to 0), find num > 100 -> finds 130 at index 3\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 100,\n          -10,\n        ),\n      ).toBe(3);\n      // Start at index -9 (resolves to 0), find first even -> finds 12 at index 1\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n          -9,\n        ),\n      ).toBe(1);\n    });\n    test('negative out of bound index far below -length', () => {\n      // Start at index -100 (resolves to 0), find num === 8 -> finds 8 at index 2\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 8,\n          -100,\n        ),\n      ).toBe(2);\n    });\n  });\n});\n",
    "/src/find-index.ts": "export default function findIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex: number = 0,\n): number {\n  const length = array.length;\n  const startIndex =\n    fromIndex >= 0 ? fromIndex : Math.max(length + fromIndex, 0);\n\n  for (let index = startIndex; index < length; index++) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n"
  },
  "info": {
    "excerpt": "Implement a function that returns the index of the first element in the array that satisfies the provided testing function",
    "title": "Find Index"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [],
    "created": 1682726400,
    "difficulty": "easy",
    "duration": 10,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/find-index",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "find-last-index"
    ],
    "slug": "find-index",
    "subtitle": null,
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * This function returns the index of the first element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1, indicating that no element passed the test.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=0] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findIndex(array, predicate, fromIndex = 0) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function findIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex: number = 0,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var d=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),T=(n,e)=>{for(var t in e)d(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!g.call(n,a)&&a!==t&&d(n,a,{get:()=>e[a],enumerable:!(i=u(e,a))||i.enumerable});return n};var j=(n,e,t)=>(t=n!=null?m(I(n)):{},o(e||!n||!n.__esModule?d(t,\"default\",{value:n,enumerable:!0}):t,n)),_=n=>o(d({},\"__esModule\",{value:!0}),n);var x=y((v,s)=>{s.exports=_jsx_runtime});var X={};T(X,{default:()=>D});var r=j(x());var c=MDXCodeBlock;var h=`/**\n * This function returns the index of the first element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1, indicating that no element passed the test.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=0] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findIndex(array, predicate, fromIndex = 0) {\n  const length = array.length;\n  const startIndex =\n    fromIndex >= 0 ? fromIndex : Math.max(length + fromIndex, 0);\n\n  for (let index = startIndex; index < length; index++) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n`;var f=`export default function findIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex: number = 0,\n): number {\n  const length = array.length;\n  const startIndex =\n    fromIndex >= 0 ? fromIndex : Math.max(length + fromIndex, 0);\n\n  for (let index = startIndex; index < length; index++) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n`;function l(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\",code:\"code\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsx)(c,{languages:{jsx:h,tsx:f}}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#findIndex\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.findIndex\"})]})}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)}var D=C;return _(X);})();\n;return Component;",
  "workspace": {
    "main": "/src/find-index.ts",
    "run": "/src/find-index.run.test.ts",
    "submit": "/src/find-index.submit.test.ts"
  }
}