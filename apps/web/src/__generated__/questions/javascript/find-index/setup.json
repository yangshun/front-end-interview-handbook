{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/find-index\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/find-index.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/find-index.run.test.ts": "import findIndex from './find-index';\n\ndescribe('findIndex', () => {\n  test('empty array', () => {\n    expect(findIndex([], (num: number) => num % 2 === 0)).toBe(-1);\n  });\n\n  test('finds index of first even number', () => {\n    expect(findIndex([4, 12, 8, 130, 44], (num: number) => num % 2 === 0)).toBe(\n      0,\n    );\n    expect(findIndex([5, 12, 8, 130, 44], (num: number) => num % 2 === 0)).toBe(\n      1,\n    );\n  });\n});\n",
    "/src/find-index.submit.test.ts": "import findIndex from './find-index';\n\ndescribe('findIndex', () => {\n  const basicArr = [5, 12, 8, 130, 44, 99, 32, 15];\n  const mixedArr = [10, 'apple', 20, 'banana', 30, 'cherry', 40];\n  const objArr = [{ id: 1 }, { id: 5 }, { id: 10 }, { id: 5 }, { id: 15 }];\n  const searchArr = [5, 12, 8, 130, 44, 99, 32, 15]; // Indices 0-7\n\n  describe('empty array', () => {\n    test('empty array always returns -1', () => {\n      expect(\n        findIndex(\n          [],\n          (value: any, _index: number, _array: any[]) => value === 0,\n        ),\n      ).toBe(-1);\n    });\n    test('empty array with positive fromIndex', () => {\n      expect(\n        findIndex(\n          [],\n          (value: any, _index: number, _array: any[]) => value === 0,\n          5,\n        ),\n      ).toBe(-1);\n    });\n    test('empty array with negative fromIndex', () => {\n      expect(\n        findIndex(\n          [],\n          (value: any, _index: number, _array: any[]) => value === 0,\n          -5,\n        ),\n      ).toBe(-1);\n    });\n  });\n\n  describe('basic functionality', () => {\n    test('finds index of first even number', () => {\n      expect(\n        findIndex(\n          [4, 12, 8, 130, 44],\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n        ),\n      ).toBe(0);\n      expect(\n        findIndex(\n          basicArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n        ),\n      ).toBe(1); // 12 is the first even\n    });\n    test('finds index of first odd number', () => {\n      expect(\n        findIndex(\n          basicArr,\n          (num: number, _index: number, _array: number[]) => num % 2 !== 0,\n        ),\n      ).toBe(0); // 5 is the first odd\n      expect(\n        findIndex(\n          [4, 12, 8, 130, 44, 99],\n          (num: number, _index: number, _array: number[]) => num % 2 !== 0,\n        ),\n      ).toBe(5); // 99 is the first odd\n    });\n    test('finds index of first string', () => {\n      expect(\n        findIndex(\n          mixedArr,\n          (val: any, _index: number, _array: any[]) => typeof val === 'string',\n        ),\n      ).toBe(1); // 'apple'\n    });\n    test('finds index of first string longer than 5 chars', () => {\n      expect(\n        findIndex(\n          mixedArr,\n          (val: any, _index: number, _array: any[]) =>\n            typeof val === 'string' && val.length > 5,\n        ),\n      ).toBe(3); // 'banana'\n    });\n    test('finds index of first object with id > 5', () => {\n      expect(\n        findIndex(\n          objArr,\n          (obj: { id: number }, _index: number, _array: any[]) => obj.id > 5,\n        ),\n      ).toBe(2); // { id: 10 }\n    });\n    test('finds index using index parameter', () => {\n      // Find first element whose value is less than its index\n      expect(\n        findIndex(\n          [5, 4, 3, 2, 1],\n          (val: number, index: number, _array: number[]) => val < index,\n        ),\n      ).toBe(3); // value 2 at index 3\n    });\n    test('finds index using array parameter', () => {\n      // Find first element greater than the last element\n      expect(\n        findIndex(\n          [10, 5, 20, 15, 18],\n          (val: number, _index: number, arr: number[]) =>\n            val > arr[arr.length - 1],\n        ),\n      ).toBe(2); // 20 > 18\n    });\n  });\n\n  describe('no element passes test', () => {\n    test('no element passes test (simple)', () => {\n      expect(\n        findIndex(\n          [5, 12, 8, 130, 44],\n          (num: number, _index: number, _array: number[]) => num > 200,\n        ),\n      ).toBe(-1);\n    });\n    test('no element passes test (type mismatch)', () => {\n      expect(\n        findIndex(\n          [1, 2, 3, 4],\n          (val: any, _index: number, _array: any[]) => typeof val === 'string',\n        ),\n      ).toBe(-1);\n    });\n    test('no element passes test (always false predicate)', () => {\n      expect(\n        findIndex(\n          [1, 2, 3, 4],\n          (_val: any, _index: number, _array: any[]) => false,\n        ),\n      ).toBe(-1);\n    });\n    test('no element passes test (object property)', () => {\n      expect(\n        findIndex(\n          objArr,\n          (obj: { id: number }, _index: number, _array: any[]) =>\n            obj.id === 100,\n        ),\n      ).toBe(-1);\n    });\n  });\n\n  describe('searches from given positive start index', () => {\n    test('basic', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n          1,\n        ),\n      ).toBe(1); // Start at 12, finds 12\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 10 === 0,\n          2,\n        ),\n      ).toBe(3); // Start at 8, finds 130\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n          4,\n        ),\n      ).toBe(4); // Start at 44, finds 44\n    });\n    test('searches from start index, finds later element', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 32,\n          2,\n        ),\n      ).toBe(6); // Start at 8, find 32\n    });\n    test('searches from start index, finds element at start index', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 130,\n          3,\n        ),\n      ).toBe(3); // Start at 130, find 130\n    });\n    test('searches from start index, no match found after start', () => {\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 5,\n          1,\n        ),\n      ).toBe(-1); // Start at 12, look for 5, not found\n    });\n    test('using index predicate', () => {\n      // Find first element where index > 5, starting search from index 4\n      expect(\n        findIndex(\n          searchArr,\n          (_val: number, index: number, _array: number[]) => index > 5,\n          4,\n        ),\n      ).toBe(6); // Start at 44 (idx 4), check 99 (idx 5), find 32 (idx 6)\n    });\n  });\n\n  describe('handles negative start index', () => {\n    // searchArr = [5, 12, 8, 130, 44, 99, 32, 15]; // Length 8\n    // Indices:    0   1  2    3   4   5   6   7\n    // Negative:  -8  -7 -6   -5  -4  -3  -2  -1\n    test('basic', () => {\n      // Start at index 6 (-2), find num > 30 -> finds 32 at index 6\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 30,\n          -2,\n        ),\n      ).toBe(6);\n      // Start at index 4 (-4), find num < 50 -> finds 44 at index 4\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num < 50,\n          -4,\n        ),\n      ).toBe(4);\n    });\n    test('negative start index -1 (last element)', () => {\n      // Start at index 7 (-1), find num === 15 -> finds 15 at index 7\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 15,\n          -1,\n        ),\n      ).toBe(7);\n      // Start at index 7 (-1), find num > 100 -> returns -1\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 100,\n          -1,\n        ),\n      ).toBe(-1);\n    });\n    test('negative start index -array.length (starts at 0)', () => {\n      // Start at index 0 (-8), find num > 100 -> finds 130 at index 3\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 100,\n          -8,\n        ),\n      ).toBe(3);\n    });\n    test('negative start index mid-array', () => {\n      // Start at index 3 (-5), find num === 99 -> finds 99 at index 5\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 99,\n          -5,\n        ),\n      ).toBe(5);\n    });\n    test('negative start index, no match found after start', () => {\n      // Start at index 5 (-3), no number < 10 after that -> returns -1\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num < 10,\n          -3,\n        ),\n      ).toBe(-1);\n    });\n  });\n\n  describe('handles out of bound index', () => {\n    // searchArr = [5, 12, 8, 130, 44, 99, 32, 15]; // Length 8\n    test('positive out of bound index (start >= length)', () => {\n      // Start at index 8 (length), should find nothing\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num >= 0,\n          8,\n        ),\n      ).toBe(-1);\n      // Start at index 10 (way out), should find nothing\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num >= 0,\n          10,\n        ),\n      ).toBe(-1);\n    });\n    test('negative out of bound index (start < -length)', () => {\n      // Start at index -10 (resolves to 0), find num > 100 -> finds 130 at index 3\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num > 100,\n          -10,\n        ),\n      ).toBe(3);\n      // Start at index -9 (resolves to 0), find first even -> finds 12 at index 1\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num % 2 === 0,\n          -9,\n        ),\n      ).toBe(1);\n    });\n    test('negative out of bound index far below -length', () => {\n      // Start at index -100 (resolves to 0), find num === 8 -> finds 8 at index 2\n      expect(\n        findIndex(\n          searchArr,\n          (num: number, _index: number, _array: number[]) => num === 8,\n          -100,\n        ),\n      ).toBe(2);\n    });\n  });\n});\n",
    "/src/find-index.ts": "export default function findIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex: number = 0,\n): number {\n  const length = array.length;\n  const startIndex =\n    fromIndex >= 0 ? fromIndex : Math.max(length + fromIndex, 0);\n\n  for (let index = startIndex; index < length; index++) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * This function returns the index of the first element in the array that satisfies the provided testing function.\n * Otherwise, it returns -1, indicating that no element passed the test.\n *\n * @param {Array} array - The array to search.\n * @param {Function} predicate - The function invoked per iteration.\n * @param {number} [fromIndex=0] - The index to start searching from.\n * @returns The index of the found element, else -1.\n */\nexport default function findIndex(array, predicate, fromIndex = 0) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function findIndex<T>(\n  array: Array<T>,\n  predicate: (value: T, index: number, array: Array<T>) => boolean,\n  fromIndex: number = 0,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/find-index.ts",
    "run": "/src/find-index.run.test.ts",
    "submit": "/src/find-index.submit.test.ts"
  }
}