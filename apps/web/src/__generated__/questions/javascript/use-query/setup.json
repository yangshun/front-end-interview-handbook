{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/use-query\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/use-query.ts\",\n  \"dependencies\": {\n    \"@sinonjs/fake-timers\": \"14.0.0\",\n    \"@testing-library/react\": \"14.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"@types/react\": \"18.2.25\",\n    \"@types/react-dom\": \"18.2.10\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/use-query.run.test.ts": "import { renderHook, waitFor } from '@testing-library/react';\n\nimport useQuery from './use-query';\n\ndescribe('useQuery', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useQuery(async () => true));\n\n    expect(typeof result.current).toBe('object');\n    expect(result.current).toHaveProperty('status');\n  });\n\n  test('loading state', () => {\n    const { result } = renderHook(() => useQuery(async () => true));\n\n    expect(result.current.status).toBe('loading');\n  });\n\n  test('success state', async () => {\n    const { result } = renderHook(() => useQuery(async () => 10));\n\n    await waitFor(() => {\n      expect(result.current).toEqual({\n        status: 'success',\n        data: 10,\n      });\n    });\n  });\n\n  test('error state', async () => {\n    const error = new Error('error');\n\n    const { result } = renderHook(() =>\n      useQuery(async () => {\n        throw error;\n      }),\n    );\n\n    await waitFor(() => {\n      expect(result.current).toStrictEqual({\n        status: 'error',\n        error,\n      });\n    });\n  });\n});\n",
    "/src/use-query.submit.test.ts": "import { renderHook, waitFor } from '@testing-library/react';\nimport FakeTimers from '@sinonjs/fake-timers';\n\nimport useQuery from './use-query';\n\ndescribe('useQuery', () => {\n  test('return values', () => {\n    const { result } = renderHook(() => useQuery(async () => true));\n\n    expect(typeof result.current).toBe('object');\n    expect(result.current).toHaveProperty('status');\n  });\n\n  describe('states', () => {\n    test('loading', () => {\n      const { result } = renderHook(() => useQuery(async () => true));\n\n      expect(result.current.status).toBe('loading');\n    });\n\n    test('success', async () => {\n      const { result } = renderHook(() => useQuery<number>(async () => 10));\n\n      await waitFor(() => {\n        expect(result.current).toEqual({\n          status: 'success',\n          data: 10,\n        });\n      });\n    });\n\n    test('error', async () => {\n      const error = new Error('error');\n\n      const { result } = renderHook(() =>\n        useQuery(async () => {\n          throw error;\n        }),\n      );\n\n      await waitFor(() => {\n        expect(result.current).toStrictEqual({\n          status: 'error',\n          error,\n        });\n      });\n    });\n  });\n\n  describe('dependency array', () => {\n    test('sequential', async () => {\n      const { rerender, result } = renderHook(\n        ({ deps }) => useQuery(async () => deps, deps),\n        {\n          initialProps: { deps: [1] },\n        },\n      );\n\n      expect(result.current.status).toBe('loading');\n      await waitFor(() => {\n        expect(result.current).toEqual({\n          status: 'success',\n          data: [1],\n        });\n      });\n\n      rerender({ deps: [2] });\n      expect(result.current.status).toBe('loading');\n      await waitFor(() => {\n        expect(result.current).toEqual({\n          status: 'success',\n          data: [2],\n        });\n      });\n    });\n\n    test('overlapping', async () => {\n      const fn = jest.fn();\n      const clock = FakeTimers.createClock();\n\n      const { rerender, result } = renderHook(\n        ({ deps }) =>\n          useQuery(\n            () =>\n              new Promise((resolve) => {\n                fn();\n                clock.setTimeout(() => resolve(deps), 200);\n              }),\n            deps,\n          ),\n        {\n          initialProps: { deps: [1] },\n        },\n      );\n\n      expect(result.current.status).toBe('loading');\n\n      clock.tick(50);\n\n      rerender({ deps: [2] });\n      expect(result.current.status).toBe('loading');\n\n      clock.tick(300);\n\n      await waitFor(() => {\n        expect(fn).toHaveBeenCalledTimes(2);\n        expect(result.current).toEqual({\n          status: 'success',\n          data: [2],\n        });\n      });\n    });\n  });\n\n  describe('cancellation of outdated callbacks', () => {\n    test('first resolves after second', async () => {\n      const fn = jest.fn();\n      const clock = FakeTimers.createClock();\n\n      const { rerender, result } = renderHook(\n        ({ deps }) =>\n          useQuery(\n            () =>\n              new Promise((resolve) => {\n                fn();\n                clock.setTimeout(() => resolve(deps[0]), deps[0]);\n              }),\n            deps,\n          ),\n        {\n          initialProps: { deps: [500] },\n        },\n      );\n\n      expect(result.current.status).toBe('loading');\n\n      clock.tick(20);\n\n      rerender({ deps: [200] });\n      expect(result.current.status).toBe('loading');\n\n      clock.tick(1000);\n\n      await waitFor(() => {\n        expect(fn).toHaveBeenCalledTimes(2);\n        expect(result.current).toEqual({\n          status: 'success',\n          data: 200,\n        });\n      });\n    });\n\n    test('first rejects after second', async () => {\n      const fn = jest.fn();\n      const clock = FakeTimers.createClock();\n\n      const { rerender, result } = renderHook(\n        ({ deps }) =>\n          useQuery(\n            () =>\n              new Promise((resolve, reject) => {\n                fn();\n                clock.setTimeout(\n                  () => (deps[0] > 300 ? resolve(42) : reject(24)),\n                  deps[0],\n                );\n              }),\n            deps,\n          ),\n        {\n          initialProps: { deps: [400] },\n        },\n      );\n\n      expect(result.current.status).toBe('loading');\n\n      clock.tick(20);\n\n      rerender({ deps: [200] });\n      expect(result.current.status).toBe('loading');\n\n      clock.tick(1000);\n\n      await waitFor(() => {\n        expect(fn).toHaveBeenCalledTimes(2);\n        expect(result.current).toEqual({\n          status: 'error',\n          error: 24,\n        });\n      });\n    });\n  });\n\n  test('works with timer', async () => {\n    const fn = jest.fn();\n    const clock = FakeTimers.createClock();\n\n    const { result } = renderHook(() =>\n      useQuery(\n        () =>\n          new Promise((resolve) => {\n            fn();\n            clock.setTimeout(() => resolve(true), 1000);\n          }),\n      ),\n    );\n\n    expect(result.current.status).toBe('loading');\n\n    clock.tick(1200);\n\n    await waitFor(() => {\n      expect(fn).toHaveBeenCalled();\n      expect(result.current.status).toBe('success');\n    });\n  });\n\n  describe('handle unmounting', () => {\n    test('stale resolve', async () => {\n      const fn = jest.fn();\n      const clock = FakeTimers.createClock();\n\n      const { result, unmount } = renderHook(() =>\n        useQuery(\n          () =>\n            new Promise((resolve) => {\n              clock.setTimeout(() => {\n                fn();\n                resolve(true);\n              }, 1000);\n            }),\n        ),\n      );\n\n      expect(result.current.status).toBe('loading');\n\n      unmount();\n      clock.tick(1200);\n\n      await waitFor(() => {\n        expect(fn).toHaveBeenCalled();\n        expect(result.current.status).toBe('loading');\n      });\n    });\n\n    test('stale reject', async () => {\n      const fn = jest.fn();\n      const clock = FakeTimers.createClock();\n\n      const { result, unmount } = renderHook(() =>\n        useQuery(\n          () =>\n            new Promise((_, reject) => {\n              clock.setTimeout(() => {\n                fn();\n                reject(true);\n              }, 1000);\n            }),\n        ),\n      );\n\n      expect(result.current.status).toBe('loading');\n\n      unmount();\n      clock.tick(1200);\n\n      await waitFor(() => {\n        expect(fn).toHaveBeenCalled();\n        expect(result.current.status).toBe('loading');\n      });\n    });\n  });\n});\n",
    "/src/use-query.ts": "import { DependencyList, useEffect, useState } from 'react';\n\ntype AsyncState<T> =\n  | { status: 'loading' }\n  | { status: 'success'; data: T }\n  | { status: 'error'; error: Error };\n\nexport default function useQuery<T>(\n  fn: () => Promise<T>,\n  deps: DependencyList = [],\n): AsyncState<T> {\n  const [state, setState] = useState<AsyncState<T>>({\n    status: 'loading',\n  });\n\n  useEffect(() => {\n    let ignore = false;\n\n    setState({ status: 'loading' });\n\n    fn()\n      .then((data) => {\n        if (ignore) {\n          return;\n        }\n\n        setState({ status: 'success', data });\n      })\n      .catch((error) => {\n        if (ignore) {\n          return;\n        }\n\n        setState({ status: 'error', error });\n      });\n\n    return () => {\n      ignore = true;\n    };\n  }, deps);\n\n  return state;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @template T\n * @param {() => Promise<T>} fn\n * @param {import(\"react\").DependencyList} deps\n */\nexport default function useQuery(fn, deps = []) {\n  throw 'Not implemented';\n}",
    "ts": "import { DependencyList } from 'react';\n\ntype AsyncState<T> =\n  | { status: 'loading' }\n  | { status: 'success'; data: T }\n  | { status: 'error'; error: Error };\n\nexport default function useQuery<T>(\n  fn: () => Promise<T>,\n  deps: DependencyList = [],\n): AsyncState<T> {\n  throw 'Not implemented';\n}"
  },
  "workspace": {
    "main": "/src/use-query.ts",
    "run": "/src/use-query.run.test.ts",
    "submit": "/src/use-query.submit.test.ts"
  }
}