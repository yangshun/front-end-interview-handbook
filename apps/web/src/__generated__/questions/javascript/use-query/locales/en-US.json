{
  "description": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},d=(r,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!f.call(r,i)&&i!==t&&o(r,i,{get:()=>e[i],enumerable:!(s=u(e,i))||s.enumerable});return r};var x=(r,e,t)=>(t=r!=null?h(m(r)):{},d(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),y=r=>d(o({},\"__esModule\",{value:!0}),r);var l=g((w,c)=>{c.exports=_jsx_runtime});var T={};j(T,{default:()=>q,frontmatter:()=>b});var n=x(l()),b={title:\"useQuery\",excerpt:\"Implement a hook that manages a promise resolution\"};function a(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"useQuery\"}),\" hook that manages a promise resolution which can be used to fetch data.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`export default function Component({ param }) {\n  const request = useQuery(async () => {\n    const response = await getDataFromServer(param);\n    return response.data;\n  }, [param]);\n\n  return (\n    <div>\n      {request.loading && <p>Loading...</p>}\n      {request.error && <p>Error: {request.error.message}</p>}\n      {request.data && <p>Data: {request.data}</p>}\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fn: () => Promise\"}),\": A function that returns a promise\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"deps: DependencyList\"}),\": An array of dependencies, similar to the second argument of \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\". Unlike \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\", this defaults to \",(0,n.jsx)(e.code,{children:\"[]\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Returns\"}),`\n`,(0,n.jsx)(e.p,{children:\"The hook returns an object that has different properties depending on the state of the promise.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Pending:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"status: 'loading'\"}),\": The promise is still pending\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Rejected:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"status: 'error'\"}),\": The promise was rejected\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"error: Error\"}),\": The error that caused the promise to be rejected\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Fulfilled:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"status: 'success'\"}),\": The promise was resolved\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"data\"}),\": The data resolved by the promise returned by \",(0,n.jsx)(e.code,{children:\"fn\"})]}),`\n`]}),`\n`]}),`\n`]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(a,r)})):a(r)}var q=_;return y(T);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a hook that manages a promise resolution",
    "title": "useQuery"
  },
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var T=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!y.call(t,s)&&s!==r&&o(t,s,{get:()=>e[s],enumerable:!(i=p(e,s))||i.enumerable});return t};var x=(t,e,r)=>(r=t!=null?f(g(t)):{},a(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),S=t=>a(o({},\"__esModule\",{value:!0}),t);var d=T((E,c)=>{c.exports=_jsx_runtime});var _={};w(_,{default:()=>v});var n=x(d());var h=MDXCodeBlock;var u=`import { DependencyList, useEffect, useState } from 'react';\n\ntype AsyncState<T> =\n  | { status: 'loading' }\n  | { status: 'success'; data: T }\n  | { status: 'error'; error: Error };\n\nexport default function useQuery<T>(\n  fn: () => Promise<T>,\n  deps: DependencyList = [],\n): AsyncState<T> {\n  const [state, setState] = useState<AsyncState<T>>({\n    status: 'loading',\n  });\n\n  useEffect(() => {\n    let ignore = false;\n\n    setState({ status: 'loading' });\n\n    fn()\n      .then((data) => {\n        if (ignore) {\n          return;\n        }\n\n        setState({ status: 'success', data });\n      })\n      .catch((error) => {\n        if (ignore) {\n          return;\n        }\n\n        setState({ status: 'error', error });\n      });\n\n    return () => {\n      ignore = true;\n    };\n  }, deps);\n\n  return state;\n}\n`;function l(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useQuery\"}),\" hook can be implemented with \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" to begin the promise resolution and update the states accordingly.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The challenge here is to realize that promise resolutions are asynchronous from React updates, so there is a possibility of race conditions when the dependencies change before a pending promise is resolved.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To prevent this, we can use an \",(0,n.jsx)(e.code,{children:\"ignore\"}),\" flag to ignore the promise resolution if it is no longer relevant (e.g. deps have changed, the component has been unmounted). The \",(0,n.jsx)(e.code,{children:\"ignore\"}),\" is initialized within the function's closure; each time \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" runs, the function has its own \",(0,n.jsx)(e.code,{children:\"ignore\"}),\" instance variable and can refer to it when the promise is resolved and it has to decide whether to use the results.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This approach is \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useEffect#fetching-data-with-effects\",children:\"well-documented in the React documentation\"}),\".\"]}),`\n`,(0,n.jsx)(h,{children:u})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var v=j;return S(_);})();\n;return Component;"
}