{
  "description": "var Component=(()=>{var d=Object.create;var t=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var y=(i,n)=>()=>(n||i((n={exports:{}}).exports,n),n.exports),u=(i,n)=>{for(var r in n)t(i,r,{get:n[r],enumerable:!0})},c=(i,n,r,l)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of S(n))!j.call(i,o)&&o!==r&&t(i,o,{get:()=>n[o],enumerable:!(l=g(n,o))||l.enumerable});return i};var p=(i,n,r)=>(r=i!=null?d(h(i)):{},c(n||!i||!i.__esModule?t(r,\"default\",{value:i,enumerable:!0}):r,i)),b=i=>c(t({},\"__esModule\",{value:!0}),i);var a=y((_,s)=>{s.exports=_jsx_runtime});var O={};u(O,{default:()=>N,frontmatter:()=>m});var e=p(a()),m={title:\"JSON.stringify II\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u5C06 JavaScript \\u503C\\u8F6C\\u6362\\u4E3A JSON \\u5B57\\u7B26\\u4E32\\u7684\\u51FD\\u6570\"};function f(i){let n=Object.assign({p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\"},i.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"\\u5B9E\\u73B0\\u4F60\\u7684 \",(0,e.jsx)(n.code,{children:\"jsonStringify\"}),\" \\u51FD\\u6570\\uFF0C\\u5C06 JavaScript \\u503C\\u8F6C\\u6362\\u4E3A JSON \\u5B57\\u7B26\\u4E32\\uFF0C\\u7C7B\\u4F3C\\u4E8E \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\",children:(0,e.jsx)(n.code,{children:\"JSON.stringify\"})}),\"\\u3002\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"\\u4F60\\u53EF\\u4EE5\\u5FFD\\u7565\\u539F\\u59CB API \\u4E2D\\u7684 \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#parameters\",children:\"\\u7B2C\\u4E8C\\u4E2A\\u548C\\u7B2C\\u4E09\\u4E2A\"}),\" \\u53EF\\u9009\\u53C2\\u6570\\u3002\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"\\u8BE5\\u51FD\\u6570\\u7684\\u884C\\u4E3A\\u5E94\\u4E0E\\u4EFB\\u4F55\\u6570\\u636E\\u7C7B\\u578B\\u7684 \",(0,e.jsx)(n.code,{children:\"JSON.stringify()\"}),\" \\u5B8C\\u5168\\u76F8\\u540C\\u3002\\u8BF7\\u53C2\\u8003\\u4E0B\\u9762\\u7684\\u4F8B\\u5B50\\u3002\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"\\u5176\\u4ED6\\u60C5\\u51B5\\uFF1A\",`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"\\u5FAA\\u73AF\\u5F15\\u7528\\uFF1A\\u629B\\u51FA \",(0,e.jsx)(n.code,{children:\"TypeError('Converting circular structure to JSON')\"}),\"\\u3002\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"BigInt\"}),\"\\uFF1A\\u629B\\u51FA \",(0,e.jsx)(n.code,{children:\"TypeError('Do not know how to serialize a BigInt')\"}),\"\\u3002\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"\\u4F8B\\u5B50\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`jsonStringify({ foo: 'bar' }); // '{\"foo\":\"bar\"}'\njsonStringify({ foo: 'bar', bar: [1, 2, 3] }); // '{\"foo\":\"bar\",bar:[1,2,3]}'\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"\\u5176\\u4ED6\\u7C7B\\u578B\\u53CA\\u5176\\u9884\\u671F\\u884C\\u4E3A\\uFF1A\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`jsonStringify(); // undefined\njsonStringify(undefined); // undefined\njsonStringify(null); // 'null'\njsonStringify(true); // 'true'\njsonStringify(false); // 'false'\njsonStringify(1); // '1'\njsonStringify(Infinity); // 'null'\njsonStringify(NaN); // 'null'\njsonStringify('foo'); // '\"foo\"'\njsonStringify('\"foo\"') === '\"\\\\\\\\\"foo\\\\\\\\\"\"'; // \\u539F\\u59CB\\u8F93\\u5165\\u4E2D\\u5B58\\u5728\\u7684\\u53CC\\u5F15\\u53F7\\u4F7F\\u7528\\u53CD\\u659C\\u6760\\u8F6C\\u4E49\njsonStringify(Symbol('foo')); // undefined\njsonStringify(() => {}); // undefined\njsonStringify(['foo', 'bar']); // '[\"foo\",\"bar\"]'\njsonStringify(/foo/); // '{}'\njsonStringify(new Map()); // '{}'\njsonStringify(new Set()); // '{}'\n`})})]})}function J(i={}){let{wrapper:n}=i.components||{};return n?(0,e.jsx)(n,Object.assign({},i,{children:(0,e.jsx)(f,i)})):f(i)}var N=J;return b(O);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/json-stringify-ii\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/json-stringify-ii.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/json-stringify-ii.run.test.ts": "import jsonStringify from './json-stringify-ii';\n\ndescribe('jsonStringify', () => {\n  test('strings', () => {\n    expect(jsonStringify('123')).toEqual('\"123\"');\n  });\n\n  test('array', () => {\n    expect(jsonStringify([1, 2, 3])).toEqual('[1,2,3]');\n  });\n\n  test('object', () => {\n    expect(jsonStringify({ name: 'John', age: 30 })).toEqual(\n      '{\"name\":\"John\",\"age\":30}',\n    );\n  });\n});\n",
    "/src/json-stringify-ii.submit.test.ts": "import jsonStringify from './json-stringify-ii';\n\ndescribe('jsonStringify', () => {\n  describe('primitives', () => {\n    test('undefined', () => {\n      expect(jsonStringify(undefined)).toEqual(undefined);\n    });\n\n    test('null', () => {\n      expect(jsonStringify(null)).toEqual('null');\n    });\n\n    test('boolean', () => {\n      expect(jsonStringify(true)).toEqual('true');\n      expect(jsonStringify(false)).toEqual('false');\n    });\n\n    test('numbers', () => {\n      expect(jsonStringify(1)).toEqual('1');\n      expect(jsonStringify(-1)).toEqual('-1');\n    });\n\n    test('strings', () => {\n      expect(jsonStringify('123')).toEqual('\"123\"');\n      expect(jsonStringify('foo')).toEqual('\"foo\"');\n      expect(jsonStringify('\"foo\"')).toEqual('\"\\\\\"foo\\\\\"\"');\n    });\n  });\n\n  describe('special values', () => {\n    test('NaN', () => {\n      expect(jsonStringify(NaN)).toEqual('null');\n    });\n\n    test('infinity', () => {\n      expect(jsonStringify(Infinity)).toEqual('null');\n    });\n\n    test('symbol', () => {\n      expect(jsonStringify(Symbol('foo'))).toEqual(undefined);\n    });\n\n    test('functions', () => {\n      expect(jsonStringify(() => {})).toEqual(undefined);\n      expect(jsonStringify(function () {})).toEqual(undefined);\n    });\n\n    test('regexp', () => {\n      expect(jsonStringify(/foo/)).toEqual('{}');\n    });\n\n    test('map', () => {\n      expect(jsonStringify(new Map())).toEqual('{}');\n    });\n\n    test('set', () => {\n      expect(jsonStringify(new Set())).toEqual('{}');\n    });\n\n    test('date', () => {\n      const date = new Date();\n      expect(jsonStringify(date)).toEqual(`\"${date.toISOString()}\"`);\n    });\n\n    test('BigInt throws', () => {\n      expect(() => jsonStringify(BigInt(1234567890))).toThrow();\n    });\n  });\n\n  describe('arrays', () => {\n    test('empty', () => {\n      expect(jsonStringify([])).toEqual('[]');\n    });\n\n    test('non-nested', () => {\n      expect(jsonStringify([1, 2, 3])).toEqual('[1,2,3]');\n      expect(jsonStringify([true, false])).toEqual('[true,false]');\n      expect(jsonStringify(['1', '2', '3'])).toEqual('[\"1\",\"2\",\"3\"]');\n      expect(jsonStringify([{}, {}])).toEqual('[{},{}]');\n      expect(jsonStringify([null, null])).toEqual('[null,null]');\n    });\n\n    test('nested', () => {\n      expect(jsonStringify([[]])).toEqual('[[]]');\n      expect(jsonStringify([[[]]])).toEqual('[[[]]]');\n      expect(jsonStringify([[], []])).toEqual('[[],[]]');\n      expect(jsonStringify([[1], [2]])).toEqual('[[1],[2]]');\n      expect(jsonStringify([1, [2, [3, [4, []]]]])).toEqual(\n        '[1,[2,[3,[4,[]]]]]',\n      );\n      expect(jsonStringify([1, 2, [3, 4, [5, 6], 7, 8]])).toEqual(\n        '[1,2,[3,4,[5,6],7,8]]',\n      );\n    });\n\n    test('mixed', () => {\n      expect(\n        jsonStringify([\n          42,\n          'Hello, World!',\n          true,\n          null,\n          { name: 'John', age: 30 },\n          [1, 2, 3],\n        ]),\n      ).toEqual(\n        '[42,\"Hello, World!\",true,null,{\"name\":\"John\",\"age\":30},[1,2,3]]',\n      );\n    });\n  });\n\n  describe('objects', () => {\n    test('empty', () => {\n      expect(jsonStringify({})).toEqual('{}');\n    });\n\n    test('non-nested', () => {\n      expect(jsonStringify({ foo: 1 })).toEqual('{\"foo\":1}');\n      expect(jsonStringify({ foo: true })).toEqual('{\"foo\":true}');\n      expect(jsonStringify({ foo: false })).toEqual('{\"foo\":false}');\n      expect(jsonStringify({ foo: 'bar' })).toEqual('{\"foo\":\"bar\"}');\n      expect(jsonStringify({ foo: [] })).toEqual('{\"foo\":[]}');\n      expect(jsonStringify({ foo: null })).toEqual('{\"foo\":null}');\n    });\n\n    test('nested', () => {\n      expect(jsonStringify({ foo: { foo: true } })).toEqual(\n        '{\"foo\":{\"foo\":true}}',\n      );\n      expect(jsonStringify({ foo: true, bar: { foo: 2 } })).toEqual(\n        '{\"foo\":true,\"bar\":{\"foo\":2}}',\n      );\n    });\n\n    test('mixed', () => {\n      expect(\n        jsonStringify({\n          name: 'foo',\n          age: 18,\n          attr: ['coding', 123],\n        }),\n      ).toEqual('{\"name\":\"foo\",\"age\":18,\"attr\":[\"coding\",123]}');\n    });\n\n    test('JSON-incompatible values', () => {\n      expect(jsonStringify([1, 2, 3])).toEqual('[1,2,3]');\n      expect(\n        jsonStringify({\n          name: 'foo',\n          age: 18,\n          attr: ['coding', 123],\n          uni: Symbol(2),\n          sayHi: function () {\n            console.log('hi');\n          },\n          info: {\n            sister: 'lily',\n            age: 16,\n            intro: {\n              money: undefined,\n              job: null,\n            },\n          },\n        }),\n      ).toEqual(\n        '{\"name\":\"foo\",\"age\":18,\"attr\":[\"coding\",123],\"info\":{\"sister\":\"lily\",\"age\":16,\"intro\":{\"job\":null}}}',\n      );\n    });\n  });\n\n  test('cyclic objects', () => {\n    const foo: any = {};\n    foo.a = foo;\n\n    expect(() => {\n      jsonStringify(foo);\n    }).toThrow('Converting circular structure to JSON');\n  });\n});\n",
    "/src/json-stringify-ii.ts": "function isCyclic(input: unknown): boolean {\n  const seen = new Set();\n\n  function dfsHelper(value: unknown): boolean {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n\n    seen.add(value);\n    return Object.values(value).some(\n      (value_) => seen.has(value_) || dfsHelper(value_),\n    );\n  }\n\n  return dfsHelper(input);\n}\n\nconst QUOTE_ESCAPE = /\"/g;\n\nexport default function jsonStringify(value: unknown): string | undefined {\n  if (isCyclic(value)) {\n    throw new TypeError('Converting circular structure to JSON');\n  }\n\n  if (typeof value === 'bigint') {\n    throw new TypeError('Do not know how to serialize a BigInt');\n  }\n\n  if (value === null) {\n    // Handle null first because the type of null is 'object'.\n    return 'null';\n  }\n\n  const type = typeof value;\n\n  if (type === 'number') {\n    if (Number.isNaN(value) || !Number.isFinite(value)) {\n      // For NaN and Infinity we return 'null'.\n      return 'null';\n    }\n    return String(value);\n  }\n\n  if (type === 'boolean') {\n    return String(value);\n  }\n\n  if (type === 'function' || type === 'undefined' || type === 'symbol') {\n    return undefined; // Not the string 'undefined'.\n  }\n\n  if (type === 'string') {\n    // Wrap in double quotes/\n    return `\"${(value as string).replace(QUOTE_ESCAPE, '\\\\\"')}\"`;\n  }\n\n  // At this point `value` is either an array, a plain object,\n  // or other unsupported object types such as `Map` and `Set`.\n  if (typeof (value as any).toJSON === 'function') {\n    // If value has user-provided `toJSON` method, we use that instead.\n    return jsonStringify((value as any).toJSON());\n  }\n\n  if (Array.isArray(value)) {\n    const arrayValues = value.map((item) => jsonStringify(item));\n    return `[${arrayValues.join(',')}]`;\n  }\n\n  // `value` is a plain object.\n  const objectEntries = Object.entries(value as Object)\n    .map(([key, value]) => {\n      const shouldIgnoreEntry =\n        typeof key === 'symbol' ||\n        value === undefined ||\n        typeof value === 'function' ||\n        typeof value === 'symbol';\n\n      if (shouldIgnoreEntry) {\n        return;\n      }\n\n      return `\"${key}\":${jsonStringify(value)}`;\n    })\n    .filter((value) => value !== undefined);\n\n  return `{${objectEntries.join(',')}}`;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "zhenghao",
    "companies": [
      "snap",
      "amazon",
      "google"
    ],
    "created": 1653177600,
    "difficulty": "hard",
    "duration": 45,
    "excerpt": "实现一个将 JavaScript 值转换为 JSON 字符串的函数",
    "featured": true,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/json-stringify-ii",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "html-serializer"
    ],
    "slug": "json-stringify-ii",
    "subtitle": null,
    "title": "JSON.stringify II",
    "topics": [
      "recursion"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {*} value\n * @return {string}\n */\nexport default function jsonStringify(value) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function jsonStringify(value: unknown): string {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var y=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var m=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},u=(r,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of v(e))!S.call(r,i)&&i!==t&&o(r,i,{get:()=>e[i],enumerable:!(l=p(e,i))||l.enumerable});return r};var b=(r,e,t)=>(t=r!=null?y(g(r)):{},u(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),N=r=>u(o({},\"__esModule\",{value:!0}),r);var c=m((x,a)=>{a.exports=_jsx_runtime});var _={};j(_,{default:()=>w});var n=b(c());var s=MDXCodeBlock;var d=`function isCyclic(input) {\n  const seen = new Set();\n\n  function dfsHelper(value) {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n\n    seen.add(value);\n    return Object.values(value).some(\n      (value_) => seen.has(value_) || dfsHelper(value_),\n    );\n  }\n\n  return dfsHelper(input);\n}\n\nconst QUOTE_ESCAPE = /\"/g;\n\n/**\n * @param {*} value\n * @return {string}\n */\nexport default function jsonStringify(value) {\n  if (isCyclic(value)) {\n    throw new TypeError('Converting circular structure to JSON');\n  }\n\n  if (typeof value === 'bigint') {\n    throw new TypeError('Do not know how to serialize a BigInt');\n  }\n\n  if (value === null) {\n    // Handle null first because the type of null is 'object'.\n    return 'null';\n  }\n\n  const type = typeof value;\n\n  if (type === 'number') {\n    if (Number.isNaN(value) || !Number.isFinite(value)) {\n      // For NaN and Infinity we return 'null'.\n      return 'null';\n    }\n    return String(value);\n  }\n\n  if (type === 'boolean') {\n    return String(value);\n  }\n\n  if (type === 'function' || type === 'undefined' || type === 'symbol') {\n    return undefined; // Not the string 'undefined'.\n  }\n\n  if (type === 'string') {\n    // Wrap in double quotes/\n    return \\`\"\\${value.replace(QUOTE_ESCAPE, '\\\\\\\\\"')}\"\\`;\n  }\n\n  // At this point \\`value\\` is either an array, a plain object,\n  // or other unsupported object types such as \\`Map\\` and \\`Set\\`.\n  if (typeof value.toJSON === 'function') {\n    // If value has user-provided \\`toJSON\\` method, we use that instead.\n    return jsonStringify(value.toJSON());\n  }\n\n  if (Array.isArray(value)) {\n    const arrayValues = value.map((item) => jsonStringify(item));\n    return \\`[\\${arrayValues.join(',')}]\\`;\n  }\n\n  // \\`value\\` is a plain object.\n  const objectEntries = Object.entries(value)\n    .map(([key, value]) => {\n      const shouldIgnoreEntry =\n        typeof key === 'symbol' ||\n        value === undefined ||\n        typeof value === 'function' ||\n        typeof value === 'symbol';\n\n      if (shouldIgnoreEntry) {\n        return;\n      }\n\n      return \\`\"\\${key}\":\\${jsonStringify(value)}\\`;\n    })\n    .filter((value) => value !== undefined);\n\n  return \\`{\\${objectEntries.join(',')}}\\`;\n}\n`;var f=`function isCyclic(input: unknown): boolean {\n  const seen = new Set();\n\n  function dfsHelper(value: unknown): boolean {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n\n    seen.add(value);\n    return Object.values(value).some(\n      (value_) => seen.has(value_) || dfsHelper(value_),\n    );\n  }\n\n  return dfsHelper(input);\n}\n\nconst QUOTE_ESCAPE = /\"/g;\n\nexport default function jsonStringify(value: unknown): string | undefined {\n  if (isCyclic(value)) {\n    throw new TypeError('Converting circular structure to JSON');\n  }\n\n  if (typeof value === 'bigint') {\n    throw new TypeError('Do not know how to serialize a BigInt');\n  }\n\n  if (value === null) {\n    // Handle null first because the type of null is 'object'.\n    return 'null';\n  }\n\n  const type = typeof value;\n\n  if (type === 'number') {\n    if (Number.isNaN(value) || !Number.isFinite(value)) {\n      // For NaN and Infinity we return 'null'.\n      return 'null';\n    }\n    return String(value);\n  }\n\n  if (type === 'boolean') {\n    return String(value);\n  }\n\n  if (type === 'function' || type === 'undefined' || type === 'symbol') {\n    return undefined; // Not the string 'undefined'.\n  }\n\n  if (type === 'string') {\n    // Wrap in double quotes/\n    return \\`\"\\${(value as string).replace(QUOTE_ESCAPE, '\\\\\\\\\"')}\"\\`;\n  }\n\n  // At this point \\`value\\` is either an array, a plain object,\n  // or other unsupported object types such as \\`Map\\` and \\`Set\\`.\n  if (typeof (value as any).toJSON === 'function') {\n    // If value has user-provided \\`toJSON\\` method, we use that instead.\n    return jsonStringify((value as any).toJSON());\n  }\n\n  if (Array.isArray(value)) {\n    const arrayValues = value.map((item) => jsonStringify(item));\n    return \\`[\\${arrayValues.join(',')}]\\`;\n  }\n\n  // \\`value\\` is a plain object.\n  const objectEntries = Object.entries(value as Object)\n    .map(([key, value]) => {\n      const shouldIgnoreEntry =\n        typeof key === 'symbol' ||\n        value === undefined ||\n        typeof value === 'function' ||\n        typeof value === 'symbol';\n\n      if (shouldIgnoreEntry) {\n        return;\n      }\n\n      return \\`\"\\${key}\":\\${jsonStringify(value)}\\`;\n    })\n    .filter((value) => value !== undefined);\n\n  return \\`{\\${objectEntries.join(',')}}\\`;\n}\n`;function h(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"\\u8FD9\\u662F\\u4E00\\u4E2A\\u96BE\\u9898\\uFF0C\\u8FD9\\u4E0D\\u4E00\\u5B9A\\u662F\\u56E0\\u4E3A\\u903B\\u8F91\\u6216\\u7B97\\u6CD5\\u96BE\\u4EE5\\u7406\\u89E3\\uFF08\\u5C3D\\u7BA1\\u5B58\\u5728\\u67D0\\u4E9B\\u590D\\u6742\\u6027\\uFF09\\uFF0C\\u66F4\\u591A\\u7684\\u662F\\u56E0\\u4E3A\\u60A8\\u5FC5\\u987B\\u975E\\u5E38\\u719F\\u6089 \",(0,n.jsx)(e.code,{children:\"JSON.stringify\"}),\" API\\uFF0C\\u5E76\\u4E14\\u4E86\\u89E3\\u5F53\\u4F20\\u9012\\u7ED9\\u8BE5\\u51FD\\u6570\\u7684\\u4E0D\\u662F JSON \\u652F\\u6301\\u7684\\u6570\\u636E\\u7C7B\\u578B\\uFF08\\u4F8B\\u5982\\u51FD\\u6570\\u3001\",(0,n.jsx)(e.code,{children:\"regex\"}),\" \\u548C \",(0,n.jsx)(e.code,{children:\"Date\"}),\" \\u5BF9\\u8C61\\uFF09\\u65F6\\u7684\\u6240\\u6709\\u590D\\u6742\\u6027\\u3002\\u5728\\u9762\\u8BD5\\u4E2D\\u88AB\\u8981\\u6C42\\u5B9E\\u73B0\\u4E00\\u4E2A\\u5904\\u7406\\u8FD9\\u4E48\\u591A\\u6570\\u636E\\u7C7B\\u578B\\u7684\\u89E3\\u51B3\\u65B9\\u6848\\u7684\\u53EF\\u80FD\\u6027\\u6781\\u4F4E\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,n.jsx)(e.h3,{children:\"\\u5904\\u7406\\u6570\\u636E\\u7C7B\\u578B\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5F53\\u76F4\\u63A5\\u4F20\\u9012\\u4E0D\\u652F\\u6301\\u7684\\u7C7B\\u578B \",(0,n.jsx)(e.code,{children:\"undefined\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"Symbol\"}),\" \\u548C \",(0,n.jsx)(e.code,{children:\"Function\"}),\" \\u65F6\\uFF0CJSON.stringify \\u8F93\\u51FA \",(0,n.jsx)(e.code,{children:\"undefined\"}),\"\\uFF08\\u4E0D\\u662F\\u5B57\\u7B26\\u4E32 \",(0,n.jsx)(e.code,{children:\"'undefined'\"}),\"\\uFF09\\uFF1A\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`JSON.stringify(undefined); // undefined\nJSON.stringify(Symbol('foo')); // undefined\nJSON.stringify(() => {}); // undefined\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5BF9\\u4E8E\\u5176\\u4ED6\\u5185\\u7F6E\\u5BF9\\u8C61\\u7C7B\\u578B\\uFF08\\u9664\\u4E86 \",(0,n.jsx)(e.code,{children:\"Function\"}),\" \\u548C \",(0,n.jsx)(e.code,{children:\"Date\"}),\"\\uFF09\\u4F8B\\u5982 \",(0,n.jsx)(e.code,{children:\"Map\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"Set\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"Regex\"}),\" \\u7B49\\uFF0C\",(0,n.jsx)(e.code,{children:\"JSON.stringify\"}),\" \\u5C06\\u8FD4\\u56DE\\u4E00\\u4E2A\\u7A7A\\u5BF9\\u8C61\\u5B57\\u9762\\u91CF\\u7684\\u5B57\\u7B26\\u4E32\\uFF0C\\u5373 \",(0,n.jsx)(e.code,{children:\"{}\"}),\"\\uFF1A\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`JSON.stringify(/foo/); // '{}'\nJSON.stringify(new Map()); // '{}'\nJSON.stringify(new Set()); //'{}'\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"NaN\"}),\" \\u548C \",(0,n.jsx)(e.code,{children:\"Infinity\"}),\" \\u88AB\\u8F6C\\u6362\\u4E3A \",(0,n.jsx)(e.code,{children:\"null\"}),\"\\uFF0C\\u5E76\\u4E14 \",(0,n.jsx)(e.code,{children:\"Date\"}),\" \\u5BF9\\u8C61\\u88AB \",(0,n.jsx)(e.code,{children:\"JSON.stringify\"}),\" \\u7F16\\u7801\\u4E3A ISO \\u5B57\\u7B26\\u4E32\\uFF0C\\u56E0\\u4E3A \",(0,n.jsx)(e.code,{children:\"Date.prototype.toJSON\"}),\"\\u3002\\u662F\\u7684\\uFF0C\\u6211\\u4EEC\\u5C06\\u4E0D\\u5F97\\u4E0D\\u5904\\u7406\\u8F93\\u5165\\u503C\\u4E2D\\u5B58\\u5728\\u7684\\u81EA\\u5B9A\\u4E49 \",(0,n.jsx)(e.code,{children:\"toJSON\"}),\" \\u65B9\\u6CD5\\u3002\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"\\u5FAA\\u73AF\\u5F15\\u7528\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u6700\\u540E\\uFF0C\",(0,n.jsx)(e.code,{children:\"JSON.stringify\"}),\" \\u53EF\\u4EE5\\u68C0\\u6D4B\\u5FAA\\u73AF\\u5BF9\\u8C61\\uFF0C\\u5373\\u5177\\u6709\\u5FAA\\u73AF\\u5F15\\u7528\\u7684\\u5BF9\\u8C61\\uFF0C\\u5E76\\u901A\\u8FC7\\u629B\\u51FA\\u9519\\u8BEF\\u6765\\u505C\\u6B62\\u5B57\\u7B26\\u4E32\\u5316\\u3002\\u6211\\u4EEC\\u4E5F\\u5C06\\u4E0D\\u5F97\\u4E0D\\u8003\\u8651\\u8FD9\\u4E00\\u70B9\\u3002\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const foo = {};\nfoo.a = foo;\n\nJSON.stringify(foo); // \\u274C Uncaught TypeError: Converting circular structure to JSON\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u4E3A\\u4E86\\u68C0\\u6D4B\\u5BF9\\u8C61\\u4E2D\\u7684\\u5FAA\\u73AF\\u5F15\\u7528\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u4F7F\\u7528 \",(0,n.jsx)(e.code,{children:\"Set\"}),\" \\u6765\\u8DDF\\u8E2A\\u6211\\u4EEC\\u5728\\u904D\\u5386\\u5BF9\\u8C61\\u65F6\\u8BBF\\u95EE\\u8FC7\\u7684\\u5C5E\\u6027\\u503C\\u3002\\u4E00\\u65E6\\u6211\\u4EEC\\u627E\\u5230\\u96C6\\u5408\\u4E2D\\u5DF2\\u5B58\\u5728\\u7684\\u503C\\uFF0C\\u6211\\u4EEC\\u5C31\\u77E5\\u9053\\u8BE5\\u5BF9\\u8C61\\u5177\\u6709\\u5FAA\\u73AF\\u5F15\\u7528\\u3002\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u4EE5\\u4E0B\\u662F\\u6211\\u4EEC\\u7F16\\u5199\\u5B83\\u7684\\u65B9\\u5F0F\\uFF1A\"}),`\n`,(0,n.jsx)(s,{languages:{jsx:d,tsx:f}}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u7B14\\u8BB0\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u5F53\\u524D\\u7684\\u5B9E\\u73B0\\u4ECD\\u7136\\u5B58\\u5728\\u672A\\u6DB5\\u76D6\\u7684\\u8FB9\\u7F18\\u60C5\\u51B5\\u3002\\u5982\\u679C\\u60A8\\u6709\\u5174\\u8DA3\\u4E86\\u89E3\\u66F4\\u591A\\u4FE1\\u606F\\uFF0C\\u8BF7\\u67E5\\u770B \",(0,n.jsx)(e.a,{href:\"https://262.ecma-international.org/5.1/#sec-15.12.3\",children:\"\\u89C4\\u8303\"}),\"\\u3002\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u7279\\u522B\\u662F\\uFF0C\\u50CF \",(0,n.jsx)(e.code,{children:\"\\\\n\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"\\\\t\"}),\" \\u8FD9\\u6837\\u7684\\u7279\\u6B8A\\u5B57\\u7B26\\u9700\\u8981\\u5206\\u522B\\u8F6C\\u6362\\u4E3A \",(0,n.jsx)(e.code,{children:\"\\\\\\\\n\"}),\"\\u3001\",(0,n.jsx)(e.code,{children:\"\\\\\\\\t\"}),\"\\u3002\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u4E00\\u4E2A\\u53EF\\u80FD\\u7684\\u540E\\u7EED\\u95EE\\u9898\\u53EF\\u80FD\\u662F\\u8BA9\\u5B83\\u66F4\\u5FEB\\u3002\\u5F53\\u524D\\u7684\\u5B9E\\u73B0\\u6D89\\u53CA\\u9891\\u7E41\\u7684\\u8FD0\\u884C\\u65F6\\u7C7B\\u578B\\u68C0\\u67E5\\uFF0C\\u8FD9\\u662F\\u7531\\u4E8E JavaScript \\u8BED\\u8A00\\u7684\\u52A8\\u6001\\u7C7B\\u578B\\u7279\\u6027\\u3002\\u6211\\u4EEC\\u53EF\\u4EE5\\u4F7F\\u4E0A\\u8FF0 \",(0,n.jsx)(e.code,{children:\"JSON.stringify\"}),\" \\u7684\\u5B9E\\u73B0\\u66F4\\u5FEB\\u7684\\u4E00\\u79CD\\u65B9\\u6CD5\\u662F\\u8BA9\\u7528\\u6237\\u63D0\\u4F9B\\u5BF9\\u8C61\\u7684\\u6A21\\u5F0F\\uFF08\\u4F8B\\u5982\\uFF0C\\u4F7F\\u7528 \",(0,n.jsx)(e.a,{href:\"https://json-schema.org/\",children:\"JSON Schema\"}),\"\\uFF09\\uFF0C\\u8FD9\\u6837\\u6211\\u4EEC\\u5C31\\u53EF\\u4EE5\\u5728\\u5E8F\\u5217\\u5316\\u4E4B\\u524D\\u77E5\\u9053\\u5BF9\\u8C61\\u7684\\u7ED3\\u6784\\u3002\\u8FD9\\u53EF\\u4EE5\\u4E3A\\u6211\\u4EEC\\u8282\\u7701\\u5927\\u91CF\\u731C\\u6D4B\\u3002\\u4E8B\\u5B9E\\u4E0A\\uFF0C\\u8BB8\\u591A \",(0,n.jsx)(e.code,{children:\"JSON.stringify\"}),\" \\u66FF\\u4EE3\\u5E93\\u90FD\\u662F\\u4EE5\\u8FD9\\u79CD\\u65B9\\u5F0F\\u5B9E\\u73B0\\u7684\\uFF0C\\u4EE5\\u4F7F\\u5E8F\\u5217\\u5316\\u66F4\\u5FEB\\u3002\\u4E00\\u4E2A\\u4F8B\\u5B50\\u662F \",(0,n.jsx)(e.a,{href:\"https://github.com/fastify/fast-json-stringify\",children:\"fast-json-stringify\"}),\"\\u3002\"]}),`\n`]})]})}function E(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var w=E;return N(_);})();\n;return Component;",
  "workspace": {
    "main": "/src/json-stringify-ii.ts",
    "run": "/src/json-stringify-ii.run.test.ts",
    "submit": "/src/json-stringify-ii.submit.test.ts"
  }
}