{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/debounce-ii\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/debounce-ii.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/debounce-ii.run.test.ts": "import debounce from './debounce-ii';\n\ndescribe('debounce', () => {\n  test('can be initialized', () => {\n    const increment = debounce(() => 1, 50);\n\n    expect(increment).toBeTruthy();\n  });\n\n  test('executes after duration', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    expect(i).toBe(0);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n    }, 20);\n  });\n\n  test('immediately cancel', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    increment();\n    expect(i).toBe(0);\n    increment.cancel();\n\n    setTimeout(() => {\n      expect(i).toBe(0);\n      done();\n      // Add a longer delay because the browser timer is unreliable.\n    }, 20);\n  });\n\n  test('immediately flush', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    increment.flush();\n    expect(i).toBe(1);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n      // Add a longer delay because the browser timer is unreliable.\n    }, 100);\n  });\n});\n",
    "/src/debounce-ii.submit.test.ts": "import debounce from './debounce-ii';\n\ndescribe('debounce', () => {\n  test('can be initialized', () => {\n    const increment = debounce(() => 1, 50);\n\n    expect(increment).toBeTruthy();\n  });\n\n  describe('basic functionality', () => {\n    test('executes after duration', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n      }, 20);\n    });\n\n    describe('uses arguments', () => {\n      test('called once', (done) => {\n        let i = 21;\n        const increment = debounce((a: number, b: number) => {\n          i += a * b;\n        }, 10);\n\n        expect(i).toBe(21);\n        increment(3, 7);\n        expect(i).toBe(21);\n\n        setTimeout(() => {\n          expect(i).toBe(42);\n          done();\n        }, 20);\n      });\n\n      test('uses arguments of latest invocation', (done) => {\n        let i = 21;\n        const increment = debounce((a: number, b: number) => {\n          i += a * b;\n        }, 10);\n\n        expect(i).toBe(21);\n        increment(3, 7);\n        increment(4, 5);\n        expect(i).toBe(21);\n\n        setTimeout(() => {\n          expect(i).toBe(41);\n          done();\n        }, 20);\n      });\n    });\n\n    test('execute once even after calling it multiple times', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 20);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      increment();\n      increment();\n      expect(i).toBe(0);\n\n      // Should not fire yet.\n      setTimeout(() => {\n        expect(i).toBe(0);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n      }, 30);\n    });\n\n    test('duration extended if called again during window', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 100);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      expect(i).toBe(0);\n\n      // Should not fire yet.\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment();\n        expect(i).toBe(0);\n      }, 50);\n\n      setTimeout(() => {\n        // Still 0 because we fired again at t=50, increment will only happen at t=150\n        expect(i).toBe(0);\n      }, 125);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 1500);\n    });\n\n    test('callbacks can access `this`', (done) => {\n      const increment = debounce(function (this: any, delta: number) {\n        this.val += delta;\n      }, 10);\n\n      const obj = {\n        val: 2,\n        increment,\n      };\n\n      expect(obj.val).toBe(2);\n      obj.increment(3);\n      expect(obj.val).toBe(2);\n\n      setTimeout(() => {\n        expect(obj.val).toBe(5);\n        done();\n      }, 20);\n    });\n  });\n\n  describe('cancel', () => {\n    test('immediately cancel', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      expect(i).toBe(0);\n      increment.cancel();\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 20);\n    });\n\n    test('cancel after a while', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 20);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment.cancel();\n        expect(i).toBe(0);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('cancel after callback has fired should not crash', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        increment.cancel();\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n  });\n\n  describe('flush', () => {\n    test('immediately flush', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      increment.flush();\n      expect(i).toBe(1);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('flush after a while', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 30);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment.flush();\n        expect(i).toBe(1);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('flush uses arguments of latest invocation', (done) => {\n      let i = 0;\n      const increment = debounce((val: number) => {\n        i += val;\n      }, 30);\n\n      expect(i).toBe(0);\n      increment(3);\n      increment(5);\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment.flush();\n        expect(i).toBe(5);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(5);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('flush after callback has fired should not execute', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n      }, 20);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        increment.flush();\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('callbacks can access `this`', (done) => {\n      const increment = debounce(function (this: any, delta: number) {\n        this.val += delta;\n      }, 10);\n\n      const obj = {\n        val: 2,\n        increment,\n      };\n\n      expect(obj.val).toBe(2);\n      obj.increment(3);\n      expect(obj.val).toBe(2);\n      obj.increment.flush();\n      expect(obj.val).toBe(5);\n\n      setTimeout(() => {\n        expect(obj.val).toBe(5);\n        done();\n      }, 100);\n    });\n\n    describe('flush should not be invoked without any delayed callbacks', () => {\n      test('invoked after delay', (done) => {\n        let i = 0;\n        const increment = debounce(() => {\n          i++;\n        }, 10);\n\n        expect(i).toBe(0);\n        increment();\n        expect(i).toBe(0);\n\n        setTimeout(() => {\n          expect(i).toBe(1);\n          increment.flush();\n          expect(i).toBe(1);\n          done();\n          // Add a longer delay because the browser timer is unreliable.\n        }, 100);\n      });\n\n      test('already flushed', (done) => {\n        let i = 0;\n        const increment = debounce(() => {\n          i++;\n        }, 10);\n\n        expect(i).toBe(0);\n        increment.flush();\n        expect(i).toBe(0);\n\n        setTimeout(() => {\n          increment.flush();\n          expect(i).toBe(0);\n          done();\n          // Add a longer delay because the browser timer is unreliable.\n        }, 100);\n      });\n\n      test('already cancelled', (done) => {\n        let i = 0;\n        const increment = debounce(() => {\n          i++;\n        }, 50);\n\n        expect(i).toBe(0);\n        increment();\n        increment.cancel();\n        expect(i).toBe(0);\n\n        setTimeout(() => {\n          increment.flush();\n          expect(i).toBe(0);\n          done();\n        }, 20);\n      });\n    });\n  });\n});\n",
    "/src/debounce-ii.ts": "interface DebouncedFunction extends Function {\n  cancel: () => void;\n  flush: () => void;\n}\n\nexport default function debounce(\n  func: Function,\n  wait: number,\n): DebouncedFunction {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let context: any = undefined;\n  let argsToInvoke: Array<any> | undefined = undefined;\n\n  function clearTimer() {\n    clearTimeout(timeoutId);\n    timeoutId = undefined;\n  }\n\n  function invoke() {\n    // Don't invoke if there's no pending callback.\n    if (timeoutId == null) {\n      return;\n    }\n\n    clearTimer();\n    func.apply(context, argsToInvoke);\n  }\n\n  function fn(this: any, ...args: Array<any>) {\n    clearTimer();\n    argsToInvoke = args;\n    context = this;\n    timeoutId = setTimeout(function () {\n      invoke();\n    }, wait);\n  }\n\n  fn.cancel = clearTimer;\n  fn.flush = invoke;\n  return fn;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Function} func\n * @param {number} wait\n * @return {Function}\n */\nexport default function debounce(func, wait) {\n  throw 'Not implemented!';\n}",
    "ts": "interface DebouncedFunction extends Function {\n  cancel: () => void;\n  flush: () => void;\n}\n\nexport default function debounce(\n  func: Function,\n  wait: number,\n): DebouncedFunction {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/debounce-ii.ts",
    "run": "/src/debounce-ii.run.test.ts",
    "submit": "/src/debounce-ii.submit.test.ts"
  }
}