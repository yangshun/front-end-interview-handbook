{
  "description": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var c in e)i(t,c,{get:e[c],enumerable:!0})},l=(t,e,c,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!f.call(t,o)&&o!==c&&i(t,o,{get:()=>e[o],enumerable:!(a=u(e,o))||a.enumerable});return t};var v=(t,e,c)=>(c=t!=null?h(b(t)):{},l(e||!t||!t.__esModule?i(c,\"default\",{value:t,enumerable:!0}):c,t)),w=t=>l(i({},\"__esModule\",{value:!0}),t);var s=p((D,d)=>{d.exports=_jsx_runtime});var j={};g(j,{default:()=>I,frontmatter:()=>y});var n=v(s()),y={title:\"Debounce II\",excerpt:\"Implement a debounce function that comes with a cancel method to cancel delayed invocations and a flush method to immediately invoke them\"};function r(t){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",code:\"code\",ol:\"ol\",li:\"li\",h2:\"h2\",pre:\"pre\",ul:\"ul\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/javascript/debounce\",children:\"Debounce\"}),\", you should complete that first before attempting this question.\"]}),`\n`,(0,n.jsx)(e.p,{children:'Debouncing is a technique used to control how many times we allow a function to be executed over time. When a JavaScript function is debounced with a wait time of X milliseconds, it must wait until after X milliseconds have elapsed since the debounced function was last called. You almost certainly have encountered debouncing in your daily lives before \\u2014 when entering an elevator. Only after X duration of not pressing the \"Door open\" button (the debounced function not being called) will the elevator door actually close (the callback function is executed).'}),`\n`,(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"debounce\"}),\" function which accepts a callback function and a \",(0,n.jsx)(e.code,{children:\"wait\"}),\" duration. Calling \",(0,n.jsx)(e.code,{children:\"debounce()\"}),\" returns a function which has debounce invocations of the callback function following the behavior described above.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Additionally, the \",(0,n.jsx)(e.code,{children:\"debounce\"}),\" function comes with two extra methods:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"cancel()\"}),\" method to cancel pending invocations.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"flush()\"}),\" method to immediately invoke any delayed invocations.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let i = 0;\nfunction increment() {\n  i++;\n}\nconst debouncedIncrement = debounce(increment, 100);\n\n// t = 0: Call debouncedIncrement().\ndebouncedIncrement(); // i = 0\n\n// t = 50: Cancel the delayed increment.\ndebouncedIncrement.cancel();\n\n// t = 100: increment() was not invoked and i is still 0.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Flushing to instantly call the debounced function.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let i = 0;\nfunction increment() {\n  i++;\n}\nconst debouncedIncrement = debounce(increment, 100);\n\n// t = 0: Call debouncedIncrement().\ndebouncedIncrement(); // i = 0\n\n// t = 50: i is still 0 because 100ms have not passed.\n// t = 51:\ndebouncedIncrement.flush(); // i is now 1 because flush causes() the callback to be immediately invoked.\n\n// t = 100: i is already 1. The callback has been called before\n// and won't be called again.\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" Due to the use of delays in the tests for this question, tests can take a while to complete execution.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://lodash.com/docs/4.17.15#debounce\",children:\"Debounce on Lodash Documentation\"})}),`\n`]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(r,t)})):r(t)}var I=x;return w(j);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/debounce-ii\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/debounce-ii.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/debounce-ii.run.test.ts": "import debounce from './debounce-ii';\n\ndescribe('debounce', () => {\n  test('can be initialized', () => {\n    const increment = debounce(() => 1, 50);\n\n    expect(increment).toBeTruthy();\n  });\n\n  test('executes after duration', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    expect(i).toBe(0);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n    }, 20);\n  });\n\n  test('immediately cancel', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    increment();\n    expect(i).toBe(0);\n    increment.cancel();\n\n    setTimeout(() => {\n      expect(i).toBe(0);\n      done();\n      // Add a longer delay because the browser timer is unreliable.\n    }, 20);\n  });\n\n  test('immediately flush', (done) => {\n    let i = 0;\n    const increment = debounce(() => {\n      i++;\n    }, 10);\n\n    expect(i).toBe(0);\n    increment();\n    increment.flush();\n    expect(i).toBe(1);\n\n    setTimeout(() => {\n      expect(i).toBe(1);\n      done();\n      // Add a longer delay because the browser timer is unreliable.\n    }, 100);\n  });\n});\n",
    "/src/debounce-ii.submit.test.ts": "import debounce from './debounce-ii';\n\ndescribe('debounce', () => {\n  test('can be initialized', () => {\n    const increment = debounce(() => 1, 50);\n\n    expect(increment).toBeTruthy();\n  });\n\n  describe('basic functionality', () => {\n    test('executes after duration', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n      }, 20);\n    });\n\n    describe('uses arguments', () => {\n      test('called once', (done) => {\n        let i = 21;\n        const increment = debounce((a: number, b: number) => {\n          i += a * b;\n        }, 10);\n\n        expect(i).toBe(21);\n        increment(3, 7);\n        expect(i).toBe(21);\n\n        setTimeout(() => {\n          expect(i).toBe(42);\n          done();\n        }, 20);\n      });\n\n      test('uses arguments of latest invocation', (done) => {\n        let i = 21;\n        const increment = debounce((a: number, b: number) => {\n          i += a * b;\n        }, 10);\n\n        expect(i).toBe(21);\n        increment(3, 7);\n        increment(4, 5);\n        expect(i).toBe(21);\n\n        setTimeout(() => {\n          expect(i).toBe(41);\n          done();\n        }, 20);\n      });\n    });\n\n    test('execute once even after calling it multiple times', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 20);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      increment();\n      increment();\n      expect(i).toBe(0);\n\n      // Should not fire yet.\n      setTimeout(() => {\n        expect(i).toBe(0);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n      }, 30);\n    });\n\n    test('duration extended if called again during window', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 100);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      expect(i).toBe(0);\n\n      // Should not fire yet.\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment();\n        expect(i).toBe(0);\n      }, 50);\n\n      setTimeout(() => {\n        // Still 0 because we fired again at t=50, increment will only happen at t=150\n        expect(i).toBe(0);\n      }, 125);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 1500);\n    });\n\n    test('callbacks can access `this`', (done) => {\n      const increment = debounce(function (this: any, delta: number) {\n        this.val += delta;\n      }, 10);\n\n      const obj = {\n        val: 2,\n        increment,\n      };\n\n      expect(obj.val).toBe(2);\n      obj.increment(3);\n      expect(obj.val).toBe(2);\n\n      setTimeout(() => {\n        expect(obj.val).toBe(5);\n        done();\n      }, 20);\n    });\n  });\n\n  describe('cancel', () => {\n    test('immediately cancel', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      expect(i).toBe(0);\n      increment.cancel();\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 20);\n    });\n\n    test('cancel after a while', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 20);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment.cancel();\n        expect(i).toBe(0);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('cancel after callback has fired should not crash', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        increment.cancel();\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n  });\n\n  describe('flush', () => {\n    test('immediately flush', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      increment.flush();\n      expect(i).toBe(1);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('flush after a while', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 30);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment.flush();\n        expect(i).toBe(1);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('flush uses arguments of latest invocation', (done) => {\n      let i = 0;\n      const increment = debounce((val: number) => {\n        i += val;\n      }, 30);\n\n      expect(i).toBe(0);\n      increment(3);\n      increment(5);\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(0);\n        increment.flush();\n        expect(i).toBe(5);\n      }, 10);\n\n      setTimeout(() => {\n        expect(i).toBe(5);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('flush after callback has fired should not execute', (done) => {\n      let i = 0;\n      const increment = debounce(() => {\n        i++;\n      }, 10);\n\n      expect(i).toBe(0);\n      increment();\n      expect(i).toBe(0);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n      }, 20);\n\n      setTimeout(() => {\n        expect(i).toBe(1);\n        increment.flush();\n        expect(i).toBe(1);\n        done();\n        // Add a longer delay because the browser timer is unreliable.\n      }, 100);\n    });\n\n    test('callbacks can access `this`', (done) => {\n      const increment = debounce(function (this: any, delta: number) {\n        this.val += delta;\n      }, 10);\n\n      const obj = {\n        val: 2,\n        increment,\n      };\n\n      expect(obj.val).toBe(2);\n      obj.increment(3);\n      expect(obj.val).toBe(2);\n      obj.increment.flush();\n      expect(obj.val).toBe(5);\n\n      setTimeout(() => {\n        expect(obj.val).toBe(5);\n        done();\n      }, 100);\n    });\n\n    describe('flush should not be invoked without any delayed callbacks', () => {\n      test('invoked after delay', (done) => {\n        let i = 0;\n        const increment = debounce(() => {\n          i++;\n        }, 10);\n\n        expect(i).toBe(0);\n        increment();\n        expect(i).toBe(0);\n\n        setTimeout(() => {\n          expect(i).toBe(1);\n          increment.flush();\n          expect(i).toBe(1);\n          done();\n          // Add a longer delay because the browser timer is unreliable.\n        }, 100);\n      });\n\n      test('already flushed', (done) => {\n        let i = 0;\n        const increment = debounce(() => {\n          i++;\n        }, 10);\n\n        expect(i).toBe(0);\n        increment.flush();\n        expect(i).toBe(0);\n\n        setTimeout(() => {\n          increment.flush();\n          expect(i).toBe(0);\n          done();\n          // Add a longer delay because the browser timer is unreliable.\n        }, 100);\n      });\n\n      test('already cancelled', (done) => {\n        let i = 0;\n        const increment = debounce(() => {\n          i++;\n        }, 50);\n\n        expect(i).toBe(0);\n        increment();\n        increment.cancel();\n        expect(i).toBe(0);\n\n        setTimeout(() => {\n          increment.flush();\n          expect(i).toBe(0);\n          done();\n        }, 20);\n      });\n    });\n  });\n});\n",
    "/src/debounce-ii.ts": "interface DebouncedFunction extends Function {\n  cancel: () => void;\n  flush: () => void;\n}\n\nexport default function debounce(\n  func: Function,\n  wait: number,\n): DebouncedFunction {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let context: any = undefined;\n  let argsToInvoke: Array<any> | undefined = undefined;\n\n  function clearTimer() {\n    clearTimeout(timeoutId);\n    timeoutId = undefined;\n  }\n\n  function invoke() {\n    // Don't invoke if there's no pending callback.\n    if (timeoutId == null) {\n      return;\n    }\n\n    clearTimer();\n    func.apply(context, argsToInvoke);\n  }\n\n  function fn(this: any, ...args: Array<any>) {\n    clearTimer();\n    argsToInvoke = args;\n    context = this;\n    timeoutId = setTimeout(function () {\n      invoke();\n    }, wait);\n  }\n\n  fn.cancel = clearTimer;\n  fn.flush = invoke;\n  return fn;\n}\n"
  },
  "metadata": {
    "access": "premium",
    "author": "yangshun",
    "companies": [
      "flipkart",
      "google",
      "lyft",
      "walmart",
      "yelp",
      "microsoft",
      "linkedin"
    ],
    "created": 1670630400,
    "difficulty": "medium",
    "duration": 20,
    "excerpt": "Implement a debounce function that comes with a cancel method to cancel delayed invocations and a flush method to immediately invoke them",
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/debounce-ii",
    "importance": "high",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "throttle"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "debounce",
      "throttle"
    ],
    "slug": "debounce-ii",
    "subtitle": null,
    "title": "Debounce II",
    "topics": [
      "async"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {Function} func\n * @param {number} wait\n * @return {Function}\n */\nexport default function debounce(func, wait) {\n  throw 'Not implemented!';\n}",
    "ts": "interface DebouncedFunction extends Function {\n  cancel: () => void;\n  flush: () => void;\n}\n\nexport default function debounce(\n  func: Function,\n  wait: number,\n): DebouncedFunction {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var T=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),k=(i,e)=>{for(var t in e)o(i,t,{get:e[t],enumerable:!0})},r=(i,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of g(e))!v.call(i,c)&&c!==t&&o(i,c,{get:()=>e[c],enumerable:!(l=p(e,c))||l.enumerable});return i};var w=(i,e,t)=>(t=i!=null?m(b(i)):{},r(e||!i||!i.__esModule?o(t,\"default\",{value:i,enumerable:!0}):t,i)),x=i=>r(o({},\"__esModule\",{value:!0}),i);var a=T((_,d)=>{d.exports=_jsx_runtime});var j={};k(j,{default:()=>F});var n=w(a());var h=MDXCodeBlock;var u=`/**\n * @param {Function} func\n * @param {number} wait\n * @return {Function}\n */\nexport default function debounce(func, wait = 0) {\n  let timeoutId = null;\n  let context = undefined;\n  let argsToInvoke = undefined;\n\n  function clearTimer() {\n    clearTimeout(timeoutId);\n    timeoutId = null;\n  }\n\n  function invoke() {\n    // Don't invoke if there's no pending callback.\n    if (timeoutId == null) {\n      return;\n    }\n\n    clearTimer();\n    func.apply(context, argsToInvoke);\n  }\n\n  function fn(...args) {\n    clearTimer();\n    argsToInvoke = args;\n    context = this;\n    timeoutId = setTimeout(function () {\n      invoke();\n    }, wait);\n  }\n\n  fn.cancel = clearTimer;\n  fn.flush = invoke;\n  return fn;\n}\n`;var s=`interface DebouncedFunction extends Function {\n  cancel: () => void;\n  flush: () => void;\n}\n\nexport default function debounce(\n  func: Function,\n  wait: number,\n): DebouncedFunction {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined;\n  let context: any = undefined;\n  let argsToInvoke: Array<any> | undefined = undefined;\n\n  function clearTimer() {\n    clearTimeout(timeoutId);\n    timeoutId = undefined;\n  }\n\n  function invoke() {\n    // Don't invoke if there's no pending callback.\n    if (timeoutId == null) {\n      return;\n    }\n\n    clearTimer();\n    func.apply(context, argsToInvoke);\n  }\n\n  function fn(this: any, ...args: Array<any>) {\n    clearTimer();\n    argsToInvoke = args;\n    context = this;\n    timeoutId = setTimeout(function () {\n      invoke();\n    }, wait);\n  }\n\n  fn.cancel = clearTimer;\n  fn.flush = invoke;\n  return fn;\n}\n`;function f(i){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",code:\"code\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/javascript/debounce\",children:\"Debounce\"}),\", you should complete that first before attempting this question.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Observe that the function is more complicated now that we have to implement two additional methods, \",(0,n.jsx)(e.code,{children:\"cancel\"}),\" and \",(0,n.jsx)(e.code,{children:\"flush\"}),\". There's also duplicate functionality here:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Flow\"}),(0,n.jsx)(e.th,{children:\"Cancel existing timer\"}),(0,n.jsx)(e.th,{children:\"Invoke original function\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[\"Debounced function called before \",(0,n.jsx)(e.code,{children:\"wait\"}),\" is up\"]}),(0,n.jsx)(e.td,{children:\"\\u2705\"}),(0,n.jsx)(e.td,{children:\"\\u2705\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"cancel()\"})}),(0,n.jsx)(e.td,{children:\"\\u2705\"}),(0,n.jsx)(e.td,{})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"flush()\"})}),(0,n.jsx)(e.td,{children:\"\\u2705\"}),(0,n.jsx)(e.td,{children:\"\\u2705\"})]})]})]}),`\n`,(0,n.jsx)(e.p,{children:\"We can create two helper functions:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"invoke\"}),\" to call the original function with the latest provided arguments.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"clearTimer\"}),\" to cancel an existing timer/timeout.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"invoke\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Unlike in the first Debounce question, the callback can be prematurely invoked via \",(0,n.jsx)(e.code,{children:\"flush()\"}),\". Once a delayed callback is \",(0,n.jsx)(e.code,{children:\"flush()\"}),\"-ed, further \",(0,n.jsx)(e.code,{children:\"flush()\"}),\"es shouldn't do anything. So we need to keep track of whether there is an existing pending callback to be invoked and we can use \",(0,n.jsx)(e.code,{children:\"timeoutId\"}),\" to do that. If \",(0,n.jsx)(e.code,{children:\"timeoutId\"}),\" is \",(0,n.jsx)(e.code,{children:\"null\"}),\", there's no pending callback. If it's a number (value returned from \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\"), then there's a pending callback.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hence we should check if \",(0,n.jsx)(e.code,{children:\"timeoutId == null\"}),\" before we proceed with the invocations. We should also clear any existing timers.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since \",(0,n.jsx)(e.code,{children:\"invoke\"}),\" can be called from two places (within the \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\" after a delay and manually through \",(0,n.jsx)(e.code,{children:\"flush\"}),\"), we need to save a reference to the arguments the original function needs (\",(0,n.jsx)(e.code,{children:\"this\"}),\" and the arguments) by creating two new function-level variables \",(0,n.jsx)(e.code,{children:\"context\"}),\" and \",(0,n.jsx)(e.code,{children:\"argsToInvoke\"}),\". They are written to when the debounced function is being called and when \",(0,n.jsx)(e.code,{children:\"invoke\"}),\" is being called, its values will then be used and the original function is called using \",(0,n.jsx)(e.code,{children:\"func.apply\"}),\"/\",(0,n.jsx)(e.code,{children:\"func.call\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"clearTimer\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The implementation of \",(0,n.jsx)(e.code,{children:\"clearTimer\"}),\" is simple, we can do \",(0,n.jsx)(e.code,{children:\"clearTimeout(timeoutId)\"}),\" and set \",(0,n.jsx)(e.code,{children:\"timeoutId\"}),\" to be \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,n.jsx)(h,{languages:{jsx:u,tsx:s}}),`\n`,(0,n.jsx)(e.h2,{children:\"Edge Cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The main pitfall in this question is invoking the callback function with the correct \",(0,n.jsx)(e.code,{children:\"this\"}),\" and the arguments. Since the callback function will be invoked by other objects, the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" will be lost. We retain a reference to \",(0,n.jsx)(e.code,{children:\"this\"}),\" outside the \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\" (by saving it in a function-level variable called \",(0,n.jsx)(e.code,{children:\"context\"}),\") and pass it into \",(0,n.jsx)(e.code,{children:\"func.apply()\"}),\"/\",(0,n.jsx)(e.code,{children:\"func.call()\"}),\" as the first argument. The same is done for the arguments the function expects.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We should not implement \",(0,n.jsx)(e.code,{children:\"fn\"}),\" using an arrow function because the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" within arrow functions has lexical scope, i.e., it is bound to the context in which the function is created, not to the environment in which the function is called. For the other functions, it doesn't matter if we use function declarations or arrow functions.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Closures.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"How \",(0,n.jsx)(e.code,{children:\"this\"}),\" works.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Invoking functions via \",(0,n.jsx)(e.code,{children:\"Function.prototype.apply()\"}),\"/\",(0,n.jsx)(e.code,{children:\"Function.prototype.call()\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"clearTimeout()\"}),\" is a forgiving function and passing an invalid ID to \",(0,n.jsx)(e.code,{children:\"clearTimeout()\"}),\" silently does nothing; no exception is thrown. Hence we don't have to check for \",(0,n.jsx)(e.code,{children:\"timeoutID == null\"}),\" before using \",(0,n.jsx)(e.code,{children:\"clearTimeout()\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://css-tricks.com/debouncing-throttling-explained-examples/\",children:\"Debouncing and Throttling Explained Through Examples\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://medium.com/@griffinmichl/implementing-debounce-in-javascript-eab51a12311e\",children:\"Implementing Debounce in JavaScript\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout\",children:\"clearTimeout() - Web APIs | MDN\"})}),`\n`]})]})}function D(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(f,i)})):f(i)}var F=D;return x(j);})();\n;return Component;",
  "workspace": {
    "main": "/src/debounce-ii.ts",
    "run": "/src/debounce-ii.run.test.ts",
    "submit": "/src/debounce-ii.submit.test.ts"
  }
}