{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/mean\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/mean.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/mean.run.test.ts": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toBeNaN();\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n  });\n\n  test('two values', () => {\n    expect(mean([1, 3])).toEqual(2);\n  });\n});\n",
    "/src/mean.submit.test.ts": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toBeNaN();\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n    expect(mean([1])).toEqual(1);\n  });\n\n  test('two values', () => {\n    expect(mean([0, 0])).toEqual(0);\n    expect(mean([1, 3])).toEqual(2);\n    expect(mean([0, 6])).toEqual(3);\n  });\n\n  test('positive values', () => {\n    expect(mean([4, 2, 8, 6])).toEqual(5);\n    expect(mean([0, 1, 2, 3, 4])).toEqual(2);\n  });\n\n  test('negative values', () => {\n    expect(mean([-4, -2, -8, -6])).toEqual(-5);\n    expect(mean([0, -1, -2, -3, -4])).toEqual(-2);\n  });\n\n  test('same values', () => {\n    expect(mean([0, 0, 0])).toEqual(0);\n    expect(mean([1, 1, 1, 1])).toEqual(1);\n    expect(mean([-2, -2, -2, -2, -2])).toEqual(-2);\n  });\n\n  test('mean is not exact', () => {\n    expect(mean([0, -1, -2, -3])).toBeCloseTo(-1.5);\n    expect(mean([1, 2, 2])).toBeCloseTo(1.6666666666666667);\n    expect(mean([1, 3, 5, 4, 2, 2, 6, 2])).toBeCloseTo(3.125);\n  });\n\n  test('decimal values', () => {\n    expect(mean([-1.3, -2, 3])).toBeCloseTo(-0.1);\n    expect(mean([-1, 2, 0.2])).toBeCloseTo(0.4);\n    expect(mean([1, -2, -2])).toBeCloseTo(-1);\n  });\n});\n",
    "/src/mean.ts": "export default function mean(array: Array<number>): number {\r\n  let total: number = 0;\r\n\r\n  // Calculate the sum of all numbers in the array.\r\n  for (let i = 0; i < array.length; i++) {\r\n    total += array[i];\r\n  }\r\n\r\n  // Calculate the mean from the sum.\r\n  return total / array.length;\r\n}\r\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - Array from which the elements are all numbers.\n * @return {Number} Returns mean.\n */\nexport default function mean(array) {\n  throw 'Not implemented!';\n}",
    "ts": "/**\r\n * @param {Array<number>} array - Array from which the elements are all numbers.\r\n * @return {number} Returns mean.\r\n */\r\nexport default function mean(array: number[]): number {\r\n  throw 'Not implemented!';\r\n}"
  },
  "workspace": {
    "main": "/src/mean.ts",
    "run": "/src/mean.run.test.ts",
    "submit": "/src/mean.submit.test.ts"
  }
}