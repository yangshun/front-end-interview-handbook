{
  "description": "var Component=(()=>{var s=Object.create;var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var c in e)d(r,c,{get:e[c],enumerable:!0})},i=(r,e,c,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!x.call(r,a)&&a!==c&&d(r,a,{get:()=>e[a],enumerable:!(l=m(e,a))||l.enumerable});return r};var y=(r,e,c)=>(c=r!=null?s(u(r)):{},i(e||!r||!r.__esModule?d(c,\"default\",{value:r,enumerable:!0}):c,r)),_=r=>i(d({},\"__esModule\",{value:!0}),r);var o=j((D,h)=>{h.exports=_jsx_runtime});var M={};g(M,{default:()=>b,frontmatter:()=>N});var n=y(o()),N={title:\"\\u5747\\u503C\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u53EF\\u4EE5\\u627E\\u5230\\u6570\\u7EC4\\u5185\\u6570\\u503C\\u5747\\u503C\\u7684\\u51FD\\u6570\"};function t(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",em:\"em\",pre:\"pre\",ul:\"ul\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u51FD\\u6570 \",(0,n.jsx)(e.code,{children:\"mean(array)\"}),\"\\uFF0C\\u8BE5\\u51FD\\u6570\\u8FD4\\u56DE \",(0,n.jsx)(e.code,{children:\"array\"}),\" \\u5185\\u6570\\u503C\\u7684\\u5747\\u503C\\uFF08\\u4E5F\\u79F0\\u4E3A\\u5E73\\u5747\\u503C\\uFF09\\uFF0C\",(0,n.jsx)(e.code,{children:\"array\"}),\" \\u662F\\u4E00\\u4E2A\\u6570\\u5B57\\u6570\\u7EC4\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u53C2\\u6570\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"array\"}),\" \",(0,n.jsx)(e.em,{children:\"(Array)\"}),\": \\u6570\\u5B57\\u6570\\u7EC4\\u3002\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8FD4\\u56DE\\u503C\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"(Number)\"}),\": \\u8FD4\\u56DE \",(0,n.jsx)(e.code,{children:\"array\"}),\" \\u4E2D\\u6570\\u503C\\u7684\\u5747\\u503C\\u3002\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u4F8B\\u5B50\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`mean([4, 2, 8, 6]); // => 5\\r\nmean([1, 2, 3, 4]); // => 2.5\\r\nmean([1, 2, 2]); // => 1.6666666666666667\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u5982\\u679C \",(0,n.jsx)(e.code,{children:\"array\"}),\" \\u4E3A\\u7A7A\\uFF0C\\u5219\\u8BE5\\u51FD\\u6570\\u5E94\\u8FD4\\u56DE \",(0,n.jsx)(e.code,{children:\"NaN\"}),\"\\u3002\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`mean([]); // => NaN\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"\\u8D44\\u6E90\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://lodash.com/docs/#mean\",children:[\"Lodash \",(0,n.jsx)(e.code,{children:\"_.mean\"})]})}),`\n`]})]})}function f(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(t,r)})):t(r)}var b=f;return _(M);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/mean\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/mean.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/mean.run.test.ts": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toBeNaN();\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n  });\n\n  test('two values', () => {\n    expect(mean([1, 3])).toEqual(2);\n  });\n});\n",
    "/src/mean.submit.test.ts": "import mean from './mean';\n\ndescribe('mean', () => {\n  test('empty input array', () => {\n    expect(mean([])).toBeNaN();\n  });\n\n  test('single value', () => {\n    expect(mean([0])).toEqual(0);\n    expect(mean([1])).toEqual(1);\n  });\n\n  test('two values', () => {\n    expect(mean([0, 0])).toEqual(0);\n    expect(mean([1, 3])).toEqual(2);\n    expect(mean([0, 6])).toEqual(3);\n  });\n\n  test('positive values', () => {\n    expect(mean([4, 2, 8, 6])).toEqual(5);\n    expect(mean([0, 1, 2, 3, 4])).toEqual(2);\n  });\n\n  test('negative values', () => {\n    expect(mean([-4, -2, -8, -6])).toEqual(-5);\n    expect(mean([0, -1, -2, -3, -4])).toEqual(-2);\n  });\n\n  test('same values', () => {\n    expect(mean([0, 0, 0])).toEqual(0);\n    expect(mean([1, 1, 1, 1])).toEqual(1);\n    expect(mean([-2, -2, -2, -2, -2])).toEqual(-2);\n  });\n\n  test('mean is not exact', () => {\n    expect(mean([0, -1, -2, -3])).toBeCloseTo(-1.5);\n    expect(mean([1, 2, 2])).toBeCloseTo(1.6666666666666667);\n    expect(mean([1, 3, 5, 4, 2, 2, 6, 2])).toBeCloseTo(3.125);\n  });\n\n  test('decimal values', () => {\n    expect(mean([-1.3, -2, 3])).toBeCloseTo(-0.1);\n    expect(mean([-1, 2, 0.2])).toBeCloseTo(0.4);\n    expect(mean([1, -2, -2])).toBeCloseTo(-1);\n  });\n});\n",
    "/src/mean.ts": "export default function mean(array: Array<number>): number {\r\n  let total: number = 0;\r\n\r\n  // Calculate the sum of all numbers in the array.\r\n  for (let i = 0; i < array.length; i++) {\r\n    total += array[i];\r\n  }\r\n\r\n  // Calculate the mean from the sum.\r\n  return total / array.length;\r\n}\r\n"
  },
  "info": {
    "excerpt": "实现一个可以找到数组内数值均值的函数",
    "title": "均值"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1710633600,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "javascript",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/javascript/mean",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "array-reduce"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "mean",
    "subtitle": null,
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array - Array from which the elements are all numbers.\n * @return {Number} Returns mean.\n */\nexport default function mean(array) {\n  throw 'Not implemented!';\n}",
    "ts": "/**\r\n * @param {Array<number>} array - Array from which the elements are all numbers.\r\n * @return {number} Returns mean.\r\n */\r\nexport default function mean(array: number[]): number {\r\n  throw 'Not implemented!';\r\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var A=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),k=(a,e)=>{for(var n in e)o(a,n,{get:e[n],enumerable:!0})},h=(a,e,n,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of b(e))!x.call(a,t)&&t!==n&&o(a,t,{get:()=>e[t],enumerable:!(l=g(e,t))||l.enumerable});return a};var w=(a,e,n)=>(n=a!=null?f(v(a)):{},h(e||!a||!a.__esModule?o(n,\"default\",{value:a,enumerable:!0}):n,a)),S=a=>h(o({},\"__esModule\",{value:!0}),a);var u=A((R,s)=>{s.exports=_jsx_runtime});var q={};k(q,{default:()=>T});var r=w(u());var i=MDXCodeBlock;var c=`/**\n * @param {Array} array - Array from which the elements are all numbers.\n * @return {Number} Returns the mean.\n */\nexport default function mean(array) {\n  let total = 0;\n\n  // Calculate the sum of all numbers in the array.\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n\n  // Calculate the mean from the sum.\n  return total / array.length;\n}\n`;var m=`export default function mean(array: Array<number>): number {\\r\n  let total: number = 0;\\r\n\\r\n  // Calculate the sum of all numbers in the array.\\r\n  for (let i = 0; i < array.length; i++) {\\r\n    total += array[i];\\r\n  }\\r\n\\r\n  // Calculate the mean from the sum.\\r\n  return total / array.length;\\r\n}\\r\n`;var d=`export default function mean(array: Array<number>): number {\n  return array.reduce((a, b) => a + b, 0) / array.length;\n}\n`;var p=`/**\n * @param {Array} array - Array from which the elements are all numbers.\n * @return {Number} Returns the mean.\n */\nexport default function mean(array) {\n  return array.reduce((a, b) => a + b, 0) / array.length;\n}\n`;function y(a){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\"},a.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsx)(e.p,{children:\"This question is a simple one that involve two parts, summing up the numbers in the array then dividing by the number of items in the array.\"}),`\n`,(0,r.jsx)(e.h3,{children:\"Approach 1: Sum using for loop\"}),`\n`,(0,r.jsx)(e.p,{children:\"This solution uses a for loop to sum up all the numbers.\"}),`\n`,(0,r.jsx)(i,{languages:{jsx:c,tsx:m}}),`\n`,(0,r.jsxs)(e.h3,{children:[\"Approach 2: Sum using \",(0,r.jsx)(e.code,{children:\"Array.prototype.reduce()\"})]}),`\n`,(0,r.jsxs)(e.p,{children:[\"A shorter version is to use \",(0,r.jsx)(e.code,{children:\"Array.prototype.reduce()\"}),\" to perform the summation.\"]}),`\n`,(0,r.jsx)(i,{languages:{jsx:p,tsx:d}}),`\n`,(0,r.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Surprisingly enough, an empty array does not require special handling. Division by zero in JavaScript gives \",(0,r.jsx)(e.code,{children:\"Infinity\"}),\" if the numerator is non-zero, and `NaN when the numerator is zero, which is exactly what is required.\"]}),`\n`,(0,r.jsxs)(e.p,{children:[`It is possible that the sum of the numbers in the array becomes too big that it \"overflows\". Strictly speaking, overflowing doesn't occur in JavaScript, values larger than `,(0,r.jsx)(e.code,{children:\"Number.MAX_VALUE\"}),\" are represented as \",(0,r.jsx)(e.code,{children:\"Infinity\"}),\" and will lose their actual value.\"]}),`\n`,(0,r.jsx)(e.p,{children:\"To handle large value cases, we can split the array into smaller equal chunks and calculate the average for each chunk. The final average can be determined by taking the average of each chunk's averages. Not all array lengths can be divided into equal chunks, so the key idea here is to divide as small as possible, then take a weighted average of the chunks that depends on the size of each chunk.\"}),`\n`,(0,r.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://lodash.com/docs/#mean\",children:[\"Lodash \",(0,r.jsx)(e.code,{children:\"_.mean\"})]})}),`\n`]})]})}function N(a={}){let{wrapper:e}=a.components||{};return e?(0,r.jsx)(e,Object.assign({},a,{children:(0,r.jsx)(y,a)})):y(a)}var T=N;return S(q);})();\n;return Component;",
  "workspace": {
    "main": "/src/mean.ts",
    "run": "/src/mean.run.test.ts",
    "submit": "/src/mean.submit.test.ts"
  }
}