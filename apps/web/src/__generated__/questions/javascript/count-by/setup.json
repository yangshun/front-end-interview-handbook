{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/count-by\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/count-by.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/count-by.run.test.ts": "import countBy from './count-by';\n\ndescribe('countBy', () => {\n  test('empty array', () => {\n    expect(countBy([], Math.floor)).toEqual({});\n  });\n\n  test('single-element arrays', () => {\n    expect(countBy([6.1], Math.floor)).toEqual({ 6: 1 });\n  });\n\n  test('two-element arrays', () => {\n    expect(countBy([6.1, 4.2], Math.floor)).toEqual({ 4: 1, 6: 1 });\n  });\n});\n",
    "/src/count-by.submit.test.ts": "import countBy from './count-by';\n\ndescribe('countBy', () => {\n  test('empty array', () => {\n    expect(countBy([], Math.floor)).toEqual({});\n  });\n\n  test('undefined keys', () => {\n    expect(countBy([{ n: 1 }, { n: 2 }], (o: any) => o.m)).toEqual({\n      undefined: 2,\n    });\n  });\n\n  describe('function iteratees', () => {\n    test('single-element arrays', () => {\n      expect(countBy([6.1], Math.floor)).toEqual({ 6: 1 });\n    });\n\n    test('two-element arrays', () => {\n      expect(countBy([6.1, 4.2], Math.floor)).toEqual({ 4: 1, 6: 1 });\n    });\n\n    test('multiple element arrays', () => {\n      expect(countBy([6.1, 4.2, 6.3], Math.floor)).toEqual({ 4: 1, 6: 2 });\n    });\n\n    test('keys that are also properties', () => {\n      expect(\n        countBy(['one', 'two', 'three'], (val: string) => 'length'),\n      ).toEqual({\n        length: 3,\n      });\n    });\n  });\n\n  test('does not mutate the original array', () => {\n    const arr = [6.1, 4.2, 6.3];\n    const copy = arr.slice();\n    const result = countBy(arr, Math.floor);\n    expect(result).toEqual({ 4: 1, 6: 2 });\n    expect(arr).toEqual(copy); // Ensure original array is unchanged\n  });\n});\n",
    "/src/count-by.ts": "export default function countBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | string | undefined,\n): Record<string, number> {\n  const result: Record<string, number> = {};\n\n  for (const element of array) {\n    const key = String(iteratee(element));\n    if (!Object.prototype.hasOwnProperty.call(result, key)) {\n      result[key] = 0;\n    }\n\n    result[key]++;\n  }\n\n  return result;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns the composed aggregate object.\n */\nexport default function countBy(array, iteratee) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function countBy<T>(\n  array: Array<T>,\n  iteratee: (value: T) => number | string,\n): Record<string, number> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/count-by.ts",
    "run": "/src/count-by.run.test.ts",
    "submit": "/src/count-by.submit.test.ts"
  }
}