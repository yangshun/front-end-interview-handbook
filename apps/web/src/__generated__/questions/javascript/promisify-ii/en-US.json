{
  "description": "var Component=(()=>{var f=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var i in e)r(o,i,{get:e[i],enumerable:!0})},a=(o,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!p.call(o,t)&&t!==i&&r(o,t,{get:()=>e[t],enumerable:!(s=h(e,t))||s.enumerable});return o};var b=(o,e,i)=>(i=o!=null?f(d(o)):{},a(e||!o||!o.__esModule?r(i,\"default\",{value:o,enumerable:!0}):i,o)),j=o=>a(r({},\"__esModule\",{value:!0}),o);var c=g((_,l)=>{l.exports=_jsx_runtime});var x={};y(x,{default:()=>k,frontmatter:()=>v});var n=b(c()),v={title:\"Promisify II\",excerpt:\"Implement a promisify function that allows the original function to override the return value\"};function u(o){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",code:\"code\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/javascript/promisify\",children:\"Promisify\"}),\", which you should complete first before attempting this question.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"/questions/javascript/promisify\",children:\"Promisify\"}),\", the \",(0,n.jsx)(e.code,{children:\"promisify\"}),\" function returns a promise for a function following the common callback-last error-first callback style, i.e. taking a \",(0,n.jsx)(e.code,{children:\"(err, value) => ...\"}),\" callback as the last argument. However, \",(0,n.jsx)(e.code,{children:\"promisify\"}),\" does not work for functions that do not follow that exact signature.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In Node.js, using the \",(0,n.jsx)(e.code,{children:\"util.promisify.custom\"}),\" symbol, one can override the return value of \",(0,n.jsx)(e.code,{children:\"util.promisify()\"}),\", which is useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument. This is especially useful for functions with a legacy format that's incompatible with \",(0,n.jsx)(e.code,{children:\"util.promisify\"}),\"'s callback-last convention.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Example usage in Node.js.\nconst util = require('node:util');\n\nfunction doSomething(callback, foo) {\n  // ...\n}\n\ndoSomething[util.promisify.custom] = (foo) => {\n  return getPromiseSomehow();\n};\n\nconst promisified = util.promisify(doSomething);\nconsole.log(promisified === doSomething[util.promisify.custom]);\n// prints 'true'\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Implement a \",(0,n.jsx)(e.code,{children:\"promisify\"}),\" function that has support for custom return values. Use the symbol \",(0,n.jsx)(e.code,{children:\"Symbol.for('util.promisify.custom')\"}),\" as the key for the overridden value.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Example function with callback as the first argument.\n// The callback has the signature \\`(err, value) => any\\`.\nfunction foo(callback, url, options) {\n  apiCall(url, options)\n    .then((data) => callback(null, data))\n    .catch((err) => callback(err));\n}\n\nfoo[Symbol.for('util.promisify.custom')] = (url, options) => {\n  return new Promise((resolve, reject) => {\n    foo(\n      (err, data) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(data);\n      },\n      url,\n      options,\n    );\n  });\n};\n\nconst promisifiedFoo = foo[Symbol.for('util.promisify.custom')]; // true\nconst data = await promisifiedFoo('example.com', { foo: 1 });\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nodejs.org/api/util.html#custom-promisified-functions\",children:\"Custom promisified functions | Node.js\"})}),`\n`]})]})}function w(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(u,o)})):u(o)}var k=w;return j(x);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a promisify function that allows the original function to override the return value",
    "title": "Promisify II"
  },
  "solution": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var T=(r,o)=>()=>(o||r((o={exports:{}}).exports,o),o.exports),j=(r,o)=>{for(var t in o)i(r,t,{get:o[t],enumerable:!0})},u=(r,o,t,s)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let n of p(o))!b.call(r,n)&&n!==t&&i(r,n,{get:()=>o[n],enumerable:!(s=h(o,n))||s.enumerable});return r};var S=(r,o,t)=>(t=r!=null?d(g(r)):{},u(o||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),x=r=>u(i({},\"__esModule\",{value:!0}),r);var m=T((M,c)=>{c.exports=_jsx_runtime});var P={};j(P,{default:()=>F});var e=S(m());var l=MDXCodeBlock;var f=`const promisifyCustomSymbol = Symbol.for('util.promisify.custom');\n\n/**\n * @callback func\n * @returns Function\n */\nexport default function promisify(func) {\n  if (func[promisifyCustomSymbol]) {\n    return func[promisifyCustomSymbol];\n  }\n\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      func.call(this, ...args, (err, result) =>\n        err ? reject(err) : resolve(result),\n      );\n    });\n  };\n}\n`;var a=`const promisifyCustomSymbol = Symbol.for('util.promisify.custom');\n\ntype Func = (...args: any[]) => void;\ntype Return<T> = (this: any, ...args: any[]) => Promise<T>;\ntype WithSymbol<T> = { [promisifyCustomSymbol]: Return<T> };\ntype Param<T> = Func | WithSymbol<T>;\n\nexport default function promisify<T>(func: Param<T>): Return<T> {\n  if ((func as WithSymbol<T>)[promisifyCustomSymbol]) {\n    return (func as WithSymbol<T>)[promisifyCustomSymbol];\n  }\n\n  return function (...args) {\n    return new Promise<T>((resolve, reject) => {\n      (func as Func).call(this, ...args, (err: any, result: T) =>\n        err ? reject(err) : resolve(result),\n      );\n    });\n  };\n}\n`;function y(r){let o=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",code:\"code\",ul:\"ul\",li:\"li\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(o.p,{children:[(0,e.jsx)(o.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,e.jsx)(o.a,{href:\"/questions/javascript/promisify\",children:\"Promisify\"}),\", which you should complete first before attempting this question.\"]}),`\n`,(0,e.jsx)(o.h2,{children:\"Solution\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"The only addition you need to make is to check if the \",(0,e.jsx)(o.code,{children:\"func\"}),\" argument has the custom \",(0,e.jsx)(o.code,{children:\"Symbol.for('util.promisify.custom')\"}),\" defined and return the corresponding value if so.\"]}),`\n`,(0,e.jsx)(l,{languages:{jsx:f,tsx:a}}),`\n`,(0,e.jsx)(o.h2,{children:\"Resources\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsx)(o.li,{children:(0,e.jsx)(o.a,{href:\"https://nodejs.org/api/util.html#custom-promisified-functions\",children:\"Custom promisified functions | Node.js\"})}),`\n`]})]})}function _(r={}){let{wrapper:o}=r.components||{};return o?(0,e.jsx)(o,Object.assign({},r,{children:(0,e.jsx)(y,r)})):y(r)}var F=_;return x(P);})();\n;return Component;"
}