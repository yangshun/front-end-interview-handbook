{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/staircase-climbing-combinations\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/staircase-climbing-combinations.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [[\"steps\", 1]],\n    \"output\": 1,\n    \"explanation\": \"There is only one way i.e take 1-step\"\n  },\n  {\n    \"input\": [[\"steps\", 2]],\n    \"output\": 2,\n    \"explanation\": \"There are two ways, either take two 1-step or take one 2-step\"\n  },\n  {\n    \"input\": [[\"steps\", 3]],\n    \"output\": 3,\n    \"explanation\": \"There are three ways: 1-step three times, 1-step then 2-step, 2-step then 1-step\"\n  }\n]\n",
    "/src/staircase-climbing-combinations.run.test.ts": "import fn from './staircase-climbing-combinations';\nimport runTestCases from './run.tests.json';\n\ndescribe('staircaseClimbingCombinations', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = ${example.input[0][1]}`, () => {\n      expect(fn(example.input[0][1])).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/staircase-climbing-combinations.submit.test.ts": "import staircaseClimbingCombinations from './staircase-climbing-combinations';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('staircaseClimbingCombinations', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`steps = ${example.input[0][1]}`, () => {\n      expect(staircaseClimbingCombinations(example.input[0][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/staircase-climbing-combinations.ts": "export default function staircaseClimbingCombinations(steps: number): number {\n  // Create an array 'dp' of size n+1 initialized with -1\n  // This array will store the number of distinct ways to reach each step\n  const dp: number[] = new Array(steps + 1).fill(-1);\n\n  // Base cases\n  // There is 1 way to reach step 0 (do nothing)\n  dp[0] = 1;\n  // There is 1 way to reach step 1 (a single step)\n  dp[1] = 1;\n\n  // Fill the dp array using the recurrence relation\n  // dp[i] = dp[i-1] + dp[i-2]\n  // This relation comes from the fact that you can reach step i either from step i-1 or step i-2\n  for (let i = 2; i <= steps; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n\n  // The value at dp[n] will be the number of distinct ways to reach the top of the staircase\n  return dp[steps];\n}\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"steps\", 5]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"steps\", 6]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"steps\", 1]],\n    \"output\": 1\n  },\n  {\n    \"input\": [[\"steps\", 8]],\n    \"output\": 34\n  },\n  {\n    \"input\": [[\"steps\", 8]],\n    \"output\": 34\n  },\n  {\n    \"input\": [[\"steps\", 10]],\n    \"output\": 89\n  },\n  {\n    \"input\": [[\"steps\", 7]],\n    \"output\": 21\n  },\n  {\n    \"input\": [[\"steps\", 5]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"steps\", 6]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"steps\", 7]],\n    \"output\": 21\n  },\n  {\n    \"input\": [[\"steps\", 28]],\n    \"output\": 514229\n  },\n  {\n    \"input\": [[\"steps\", 45]],\n    \"output\": 1836311903\n  },\n  {\n    \"input\": [[\"steps\", 10]],\n    \"output\": 89\n  },\n  {\n    \"input\": [[\"steps\", 39]],\n    \"output\": 102334155\n  },\n  {\n    \"input\": [[\"steps\", 19]],\n    \"output\": 6765\n  },\n  {\n    \"input\": [[\"steps\", 16]],\n    \"output\": 1597\n  },\n  {\n    \"input\": [[\"steps\", 3]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"steps\", 28]],\n    \"output\": 514229\n  },\n  {\n    \"input\": [[\"steps\", 24]],\n    \"output\": 75025\n  },\n  {\n    \"input\": [[\"steps\", 22]],\n    \"output\": 28657\n  },\n  {\n    \"input\": [[\"steps\", 38]],\n    \"output\": 63245986\n  },\n  {\n    \"input\": [[\"steps\", 16]],\n    \"output\": 1597\n  },\n  {\n    \"input\": [[\"steps\", 20]],\n    \"output\": 10946\n  },\n  {\n    \"input\": [[\"steps\", 34]],\n    \"output\": 9227465\n  },\n  {\n    \"input\": [[\"steps\", 16]],\n    \"output\": 1597\n  },\n  {\n    \"input\": [[\"steps\", 32]],\n    \"output\": 3524578\n  },\n  {\n    \"input\": [[\"steps\", 23]],\n    \"output\": 46368\n  },\n  {\n    \"input\": [[\"steps\", 31]],\n    \"output\": 2178309\n  },\n  {\n    \"input\": [[\"steps\", 40]],\n    \"output\": 165580141\n  },\n  {\n    \"input\": [[\"steps\", 29]],\n    \"output\": 832040\n  },\n  {\n    \"input\": [[\"steps\", 40]],\n    \"output\": 165580141\n  },\n  {\n    \"input\": [[\"steps\", 20]],\n    \"output\": 10946\n  },\n  {\n    \"input\": [[\"steps\", 36]],\n    \"output\": 24157817\n  },\n  {\n    \"input\": [[\"steps\", 22]],\n    \"output\": 28657\n  },\n  {\n    \"input\": [[\"steps\", 3]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"steps\", 20]],\n    \"output\": 10946\n  },\n  {\n    \"input\": [[\"steps\", 38]],\n    \"output\": 63245986\n  },\n  {\n    \"input\": [[\"steps\", 30]],\n    \"output\": 1346269\n  },\n  {\n    \"input\": [[\"steps\", 15]],\n    \"output\": 987\n  },\n  {\n    \"input\": [[\"steps\", 45]],\n    \"output\": 1836311903\n  },\n  {\n    \"input\": [[\"steps\", 44]],\n    \"output\": 1134903170\n  },\n  {\n    \"input\": [[\"steps\", 5]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"steps\", 15]],\n    \"output\": 987\n  },\n  {\n    \"input\": [[\"steps\", 21]],\n    \"output\": 17711\n  },\n  {\n    \"input\": [[\"steps\", 24]],\n    \"output\": 75025\n  },\n  {\n    \"input\": [[\"steps\", 27]],\n    \"output\": 317811\n  },\n  {\n    \"input\": [[\"steps\", 18]],\n    \"output\": 4181\n  },\n  {\n    \"input\": [[\"steps\", 2]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"steps\", 5]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"steps\", 7]],\n    \"output\": 21\n  },\n  {\n    \"input\": [[\"steps\", 38]],\n    \"output\": 63245986\n  },\n  {\n    \"input\": [[\"steps\", 29]],\n    \"output\": 832040\n  },\n  {\n    \"input\": [[\"steps\", 41]],\n    \"output\": 267914296\n  },\n  {\n    \"input\": [[\"steps\", 38]],\n    \"output\": 63245986\n  },\n  {\n    \"input\": [[\"steps\", 6]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"steps\", 26]],\n    \"output\": 196418\n  },\n  {\n    \"input\": [[\"steps\", 44]],\n    \"output\": 1134903170\n  },\n  {\n    \"input\": [[\"steps\", 25]],\n    \"output\": 121393\n  },\n  {\n    \"input\": [[\"steps\", 12]],\n    \"output\": 233\n  },\n  {\n    \"input\": [[\"steps\", 39]],\n    \"output\": 102334155\n  },\n  {\n    \"input\": [[\"steps\", 37]],\n    \"output\": 39088169\n  },\n  {\n    \"input\": [[\"steps\", 3]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"steps\", 35]],\n    \"output\": 14930352\n  },\n  {\n    \"input\": [[\"steps\", 45]],\n    \"output\": 1836311903\n  },\n  {\n    \"input\": [[\"steps\", 21]],\n    \"output\": 17711\n  },\n  {\n    \"input\": [[\"steps\", 9]],\n    \"output\": 55\n  },\n  {\n    \"input\": [[\"steps\", 3]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"steps\", 31]],\n    \"output\": 2178309\n  },\n  {\n    \"input\": [[\"steps\", 28]],\n    \"output\": 514229\n  },\n  {\n    \"input\": [[\"steps\", 30]],\n    \"output\": 1346269\n  },\n  {\n    \"input\": [[\"steps\", 32]],\n    \"output\": 3524578\n  },\n  {\n    \"input\": [[\"steps\", 45]],\n    \"output\": 1836311903\n  },\n  {\n    \"input\": [[\"steps\", 11]],\n    \"output\": 144\n  },\n  {\n    \"input\": [[\"steps\", 9]],\n    \"output\": 55\n  },\n  {\n    \"input\": [[\"steps\", 39]],\n    \"output\": 102334155\n  },\n  {\n    \"input\": [[\"steps\", 36]],\n    \"output\": 24157817\n  },\n  {\n    \"input\": [[\"steps\", 44]],\n    \"output\": 1134903170\n  },\n  {\n    \"input\": [[\"steps\", 16]],\n    \"output\": 1597\n  },\n  {\n    \"input\": [[\"steps\", 16]],\n    \"output\": 1597\n  },\n  {\n    \"input\": [[\"steps\", 2]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"steps\", 23]],\n    \"output\": 46368\n  },\n  {\n    \"input\": [[\"steps\", 45]],\n    \"output\": 1836311903\n  },\n  {\n    \"input\": [[\"steps\", 31]],\n    \"output\": 2178309\n  },\n  {\n    \"input\": [[\"steps\", 17]],\n    \"output\": 2584\n  },\n  {\n    \"input\": [[\"steps\", 23]],\n    \"output\": 46368\n  },\n  {\n    \"input\": [[\"steps\", 32]],\n    \"output\": 3524578\n  },\n  {\n    \"input\": [[\"steps\", 5]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"steps\", 17]],\n    \"output\": 2584\n  },\n  {\n    \"input\": [[\"steps\", 2]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"steps\", 8]],\n    \"output\": 34\n  },\n  {\n    \"input\": [[\"steps\", 33]],\n    \"output\": 5702887\n  },\n  {\n    \"input\": [[\"steps\", 9]],\n    \"output\": 55\n  },\n  {\n    \"input\": [[\"steps\", 22]],\n    \"output\": 28657\n  },\n  {\n    \"input\": [[\"steps\", 5]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"steps\", 43]],\n    \"output\": 701408733\n  },\n  {\n    \"input\": [[\"steps\", 8]],\n    \"output\": 34\n  },\n  {\n    \"input\": [[\"steps\", 22]],\n    \"output\": 28657\n  },\n  {\n    \"input\": [[\"steps\", 22]],\n    \"output\": 28657\n  },\n  {\n    \"input\": [[\"steps\", 40]],\n    \"output\": 165580141\n  },\n  {\n    \"input\": [[\"steps\", 2]],\n    \"output\": 2\n  }\n]\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} steps\n * @return {number}\n */\nexport default function staircaseClimbingCombinations(steps) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function staircaseClimbingCombinations(steps: number): number {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/staircase-climbing-combinations.ts",
    "run": "/src/staircase-climbing-combinations.run.test.ts",
    "submit": "/src/staircase-climbing-combinations.submit.test.ts"
  }
}