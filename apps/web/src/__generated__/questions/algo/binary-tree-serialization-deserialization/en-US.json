{
  "description": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),z=(r,e)=>{for(var i in e)a(r,i,{get:e[i],enumerable:!0})},l=(r,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of f(e))!g.call(r,t)&&t!==i&&a(r,t,{get:()=>e[t],enumerable:!(o=m(e,t))||o.enumerable});return r};var b=(r,e,i)=>(i=r!=null?p(T(r)):{},l(e||!r||!r.__esModule?a(i,\"default\",{value:r,enumerable:!0}):i,r)),y=r=>l(a({},\"__esModule\",{value:!0}),r);var s=x((C,d)=>{d.exports=_jsx_runtime});var D={};z(D,{default:()=>w,frontmatter:()=>_});var n=b(s());var c=MDXTestExamples;var h=[{input:[[\"root\",[5,3,8,1,4,6,9]]],output:[5,3,8,1,4,6,9],explanation:\"The tree structure remains unchanged after serialization and deserialization.\"},{input:[[\"root\",[1,null,2]]],output:[1,null,2],explanation:\"The tree structure remains unchanged after serialization and deserialization.\"},{input:[[\"root\",[2,1,7]]],output:[2,1,7],explanation:\"The tree structure remains unchanged after serialization and deserialization.\"}];var _={title:\"Binary Tree Serialization and Deserialization\",excerpt:\"Implement a function to serialize and deserialize a binary tree\"};function u(r){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Design a method to serialize and deserialize a binary tree. There are no specific constraints on how the serialization and deserialization should be implemented; the key requirement is that the serialized binary tree must be convertible back into the original tree structure.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The binary tree is represented by a collection of \",(0,n.jsx)(e.code,{children:\"TreeNode\"}),\"s, where each node has optional \",(0,n.jsx)(e.code,{children:\"left\"}),\" and \",(0,n.jsx)(e.code,{children:\"right\"}),\" child nodes, which are also \",(0,n.jsx)(e.code,{children:\"TreeNode\"}),\"s.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"TreeNode\"}),\" has the following interface:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`interface TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"serializeBinaryTree\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"root: TreeNode\"}),\": Root node of the tree. Examples display a \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Breadth-first_search\",children:\"level-order traversal\"}),\" of the tree\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"deserializeBinaryTree\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"data: string\"}),\": String representation of the tree. The format is up to you to design\"]}),`\n`]}),`\n`,(0,n.jsx)(c,{testCases:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"1 <= Number of nodes <= 10,000\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"1 <= \",(0,n.jsx)(e.code,{children:\"TreeNode.val\"}),\" <= 1,000,000\"]}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var w=j;return y(D);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a function to serialize and deserialize a binary tree",
    "title": "Binary Tree Serialization and Deserialization"
  },
  "solution": "var Component=(()=>{var f=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var z=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var r in e)l(i,r,{get:e[r],enumerable:!0})},o=(i,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of g(e))!v.call(i,n)&&n!==r&&l(i,n,{get:()=>e[n],enumerable:!(s=m(e,n))||s.enumerable});return i};var b=(i,e,r)=>(r=i!=null?f(p(i)):{},o(e||!i||!i.__esModule?l(r,\"default\",{value:i,enumerable:!0}):r,i)),T=i=>o(l({},\"__esModule\",{value:!0}),i);var d=z((D,a)=>{a.exports=_jsx_runtime});var I={};y(I,{default:()=>R});var t=b(d());var h=MDXCodeBlock;var c=`class TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n\n  constructor(\n    val: number,\n    left: TreeNode | null = null,\n    right: TreeNode | null = null,\n  ) {\n    this.val = val;\n    this.left = left;\n    this.right = right;\n  }\n}\n\nfunction serializeImpl(root: TreeNode | null, str: string): string {\n  // Base case: if the node is null, add \"null,\" to the string\n  if (root === null) {\n    str += 'null,';\n  } else {\n    // Otherwise, add the current node's value to the string\n    str += root.val.toString() + ',';\n    // Recursively serialize the left and right subtrees\n    str = serializeImpl(root.left, str);\n    str = serializeImpl(root.right, str);\n  }\n  return str;\n}\n\nexport function serializeBinaryTree(root: TreeNode | null): string {\n  return serializeImpl(root, '');\n}\n\nfunction deserializeImpl(dataList: string[]): TreeNode | null {\n  // Base case: if the current element is \"null\", remove it and return null\n  if (dataList[0] === 'null') {\n    dataList.shift(); // Remove the first element from the list\n    return null;\n  }\n\n  // Otherwise, create a new TreeNode with the first element of the list\n  const root = new TreeNode(Number(dataList[0]));\n  dataList.shift(); // Remove the first element from the list\n\n  // Recursively deserialize the left and right subtrees\n  root.left = deserializeImpl(dataList);\n  root.right = deserializeImpl(dataList);\n\n  return root;\n}\n\nexport function deserializeBinaryTree(data: string): TreeNode | null {\n  // Split the serialized string into a list of strings\n  const dataArray = data.split(',');\n  const dataList = dataArray.filter((item) => item !== ''); // Remove any empty strings\n\n  return deserializeImpl(dataList);\n}\n`;function u(i){let e=Object.assign({h2:\"h2\",p:\"p\",h4:\"h4\",ul:\"ul\",li:\"li\",code:\"code\",h3:\"h3\",ol:\"ol\",strong:\"strong\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"1. Using DFS\"}),`\n`,(0,t.jsx)(e.p,{children:\"Serialization and deserialization of a binary tree involves converting the tree structure into a string representation and reconstructing the tree from the string, respectively. The solution uses a depth-first traversal (DFS) approach to achieve this.\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Serialization\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Each node's value is appended to a string, followed by its left and right subtrees serialized recursively.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"If a node is \",(0,t.jsx)(e.code,{children:\"null\"}),\", it is represented as the string \",(0,t.jsx)(e.code,{children:'\"null\"'}),\" to preserve the tree's structure.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{children:\"Deserialization\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"The serialized string is split into a list of node values for traversal.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"A \",(0,t.jsx)(e.code,{children:\"null\"}),\" value indicates the end of a branch, while other values are used to create tree nodes.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Recursively, left and right subtrees are deserialized to reconstruct the tree.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Serialization\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Check if the current node is \",(0,t.jsx)(e.code,{children:\"null\"}),\". If it is, append \",(0,t.jsx)(e.code,{children:'\"null,\"'}),\" to the string and return.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Append the value of the current node to the string, followed by a comma.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Recursively serialize the left subtree and append it to the string.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Recursively serialize the right subtree and append it to the string.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Return the serialized string.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{children:\"Deserialization\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Split the serialized string by commas to form a list of node values.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Check if the first element in the list is \",(0,t.jsx)(e.code,{children:'\"null\"'}),\". If it is, remove it from the list and return \",(0,t.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Create a \",(0,t.jsx)(e.code,{children:\"TreeNode\"}),\" using the first element of the list, converting it to a number.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Remove the first element from the list.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Recursively deserialize the left subtree and assign it to the node's left child.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Recursively deserialize the right subtree and assign it to the node's right child.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Return the reconstructed tree node.\"}),`\n`]}),`\n`,(0,t.jsx)(h,{children:c}),`\n`,(0,t.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Time complexity: O(n)\"}),\". Both serialization and deserialization traverse all \",(0,t.jsx)(e.code,{children:\"n\"}),\" nodes of the binary tree once.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Space complexity: O(n)\"}),\". The recursion stack for DFS and the space required to store the serialized string or list scale with the size of the tree.\"]}),`\n`]})]})}function N(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var R=N;return T(I);})();\n;return Component;"
}