{
  "description": "var Component=(()=>{var x=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},c=(n,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!g.call(n,r)&&r!==i&&a(n,r,{get:()=>e[r],enumerable:!(o=u(e,r))||o.enumerable});return n};var T=(n,e,i)=>(i=n!=null?x(f(n)):{},c(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),_=n=>c(a({},\"__esModule\",{value:!0}),n);var d=w((k,l)=>{l.exports=_jsx_runtime});var C={};j(C,{default:()=>b,frontmatter:()=>D});var t=T(d());var s=MDXTestExamples;var m=[{input:[[\"matrix\",[[1,4],[2,6]]]],output:[[2,1],[6,4]],explanation:\"The 2x2 matrix is rotated 90 degrees clockwise.\"},{input:[[\"matrix\",[[1,2,3],[4,5,6],[7,8,9]]]],output:[[7,4,1],[8,5,2],[9,6,3]],explanation:\"The 3x3 matrix is rotated 90 degrees clockwise.\"},{input:[[\"matrix\",[[3]]]],output:[[3]],explanation:\"The 1x1 matrix remains the same after rotation.\"}];var D={title:\"Matrix Rotation\",excerpt:\"Implement a function to rotate the given matrix by 90 degrees\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Given an \",(0,t.jsx)(e.code,{children:\"n\"}),\" x \",(0,t.jsx)(e.code,{children:\"n\"}),\" two-dimensional array \",(0,t.jsx)(e.code,{children:\"matrix\"}),\", rotate the matrix 90 degrees clockwise in-place. This means the input two-dimensional matrix should be modified directly without using any additional 2D matrices.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"matrix: number[][]\"}),\": A 2D array \",(0,t.jsx)(e.code,{children:\"matrix\"}),\" of size \",(0,t.jsx)(e.code,{children:\"n\"}),\" x \",(0,t.jsx)(e.code,{children:\"n\"})]}),`\n`]}),`\n`,(0,t.jsx)(s,{testCases:m}),`\n`,(0,t.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:\"n = matrix.length = matrix[i].length\"})}),`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"n\"}),\" <= 20\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"-1000 <= \",(0,t.jsx)(e.code,{children:\"matrix[row][col]\"}),\" <= 1000\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Use O(1) extra space\"}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var b=M;return _(C);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/matrix-rotation\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/matrix-rotation.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/matrix-rotation.run.test.ts": "import fn from './matrix-rotation';\nimport runTestCases from './run.tests.json';\n\ndescribe('matrixRotation', () => {\n  (runTestCases as any[]).forEach((example: any) => {\n    test(`matrix = ${JSON.stringify(example.input[0][1], null, 2)}`, () => {\n      // Call the function which mutates the matrix\n      fn(example.input[0][1]);\n      // After the mutation, check if the input matrix matches the expected output\n      expect(example.input[0][1]).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/matrix-rotation.submit.test.ts": "import matrixRotation from './matrix-rotation';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('matrixRotation', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`matrix = ${JSON.stringify(example.input[0][1], null, 2)}`, () => {\n      // Call the function which mutates the matrix\n      matrixRotation(example.input[0][1]);\n      // After the mutation, check if the input matrix matches the expected output\n      expect(example.input[0][1]).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/matrix-rotation.ts": "export default function matrixRotation(matrix: number[][]): void {\n  // Get the number of rows (or columns) of the matrix\n  let n = matrix.length;\n\n  // Loop through each layer of the matrix\n  // The outer loop goes over each \"layer\" from the outside towards the center\n  for (let i = 0; i < Math.floor((n + 1) / 2); i++) {\n    // The inner loop goes over each element in the layer\n    for (let j = 0; j < Math.floor(n / 2); j++) {\n      // Store the value of the top-left element temporarily\n      let temp = matrix[n - 1 - j][i];\n\n      // Move the bottom-left element to the top-left\n      matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1];\n\n      // Move the bottom-right element to the bottom-left\n      matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 - i];\n\n      // Move the top-right element to the bottom-right\n      matrix[j][n - 1 - i] = matrix[i][j];\n\n      // Move the stored top-left element to the top-right\n      matrix[i][j] = temp;\n    }\n  }\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [1, 4],\n          [2, 6]\n        ]\n      ]\n    ],\n    \"output\": [\n      [2, 1],\n      [6, 4]\n    ],\n    \"explanation\": \"The 2x2 matrix is rotated 90 degrees clockwise.\"\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]\n        ]\n      ]\n    ],\n    \"output\": [\n      [7, 4, 1],\n      [8, 5, 2],\n      [9, 6, 3]\n    ],\n    \"explanation\": \"The 3x3 matrix is rotated 90 degrees clockwise.\"\n  },\n  {\n    \"input\": [[\"matrix\", [[3]]]],\n    \"output\": [[3]],\n    \"explanation\": \"The 1x1 matrix remains the same after rotation.\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"matrix\", [[5]]]],\n    \"output\": [[5]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [1, 4],\n          [2, 6]\n        ]\n      ]\n    ],\n    \"output\": [\n      [2, 1],\n      [6, 4]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [7, 2, 1],\n          [7, 7, 2],\n          [3, 7, 8]\n        ]\n      ]\n    ],\n    \"output\": [\n      [3, 7, 7],\n      [7, 7, 2],\n      [8, 2, 1]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [3, 4],\n          [8, 6]\n        ]\n      ]\n    ],\n    \"output\": [\n      [8, 3],\n      [6, 4]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [6, 4, 6, 5],\n          [1, 7, 1, 1],\n          [0, 6, 0, 5],\n          [9, 8, 9, 2]\n        ]\n      ]\n    ],\n    \"output\": [\n      [9, 0, 1, 6],\n      [8, 6, 7, 4],\n      [9, 0, 1, 6],\n      [2, 5, 1, 5]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [1, 5, 7, 8],\n          [3, 8, 1, 3],\n          [0, 8, 9, 2],\n          [6, 4, 2, 7]\n        ]\n      ]\n    ],\n    \"output\": [\n      [6, 0, 3, 1],\n      [4, 8, 8, 5],\n      [2, 9, 1, 7],\n      [7, 2, 3, 8]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [5, 5, 0, 8],\n          [9, 7, 8, 8],\n          [7, 2, 8, 4],\n          [9, 1, 6, 5]\n        ]\n      ]\n    ],\n    \"output\": [\n      [9, 7, 9, 5],\n      [1, 2, 7, 5],\n      [6, 8, 8, 0],\n      [5, 4, 8, 8]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [9, 3, 5, 0, 7],\n          [5, 7, 0, 0, 9],\n          [8, 1, 7, 5, 2],\n          [1, 0, 6, 7, 3],\n          [2, 9, 6, 0, 9]\n        ]\n      ]\n    ],\n    \"output\": [\n      [2, 1, 8, 5, 9],\n      [9, 0, 1, 7, 3],\n      [6, 6, 7, 0, 5],\n      [0, 7, 5, 0, 0],\n      [9, 3, 2, 9, 7]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[5]]]],\n    \"output\": [[5]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [2, 8, 2, 8],\n          [4, 1, 7, 1],\n          [3, 8, 6, 6],\n          [6, 6, 1, 8]\n        ]\n      ]\n    ],\n    \"output\": [\n      [6, 3, 4, 2],\n      [6, 8, 1, 8],\n      [1, 6, 7, 2],\n      [8, 6, 1, 8]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-475, 737, -609],\n          [690, 190, 546],\n          [882, -524, -942]\n        ]\n      ]\n    ],\n    \"output\": [\n      [882, 690, -475],\n      [-524, 190, 737],\n      [-942, 546, -609]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-288, 382, 205, 323, 310],\n          [745, 904, 774, 696, 737],\n          [-741, -953, 291, -624, 730],\n          [-269, -234, -943, -151, 85],\n          [366, 7, 659, -434, 295]\n        ]\n      ]\n    ],\n    \"output\": [\n      [366, -269, -741, 745, -288],\n      [7, -234, -953, 904, 382],\n      [659, -943, 291, 774, 205],\n      [-434, -151, -624, 696, 323],\n      [295, 85, 730, 737, 310]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[-919]]]],\n    \"output\": [[-919]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [133, -134],\n          [428, -456]\n        ]\n      ]\n    ],\n    \"output\": [\n      [428, 133],\n      [-456, -134]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[146]]]],\n    \"output\": [[146]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [149, 337],\n          [160, -444]\n        ]\n      ]\n    ],\n    \"output\": [\n      [160, 149],\n      [-444, 337]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [581, 453, 588, 178, 929, 126, -280],\n          [-18, 284, 264, 416, -597, 20, 333],\n          [990, 896, -724, 805, 976, 449, -433],\n          [-677, -579, -149, -81, -324, 228, -800],\n          [-518, -825, -762, -437, -918, -142, 109],\n          [829, 552, 935, -742, -576, -383, -316],\n          [-424, -18, -588, -857, 25, 155, -779]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-424, 829, -518, -677, 990, -18, 581],\n      [-18, 552, -825, -579, 896, 284, 453],\n      [-588, 935, -762, -149, -724, 264, 588],\n      [-857, -742, -437, -81, 805, 416, 178],\n      [25, -576, -918, -324, 976, -597, 929],\n      [155, -383, -142, 228, 449, 20, 126],\n      [-779, -316, 109, -800, -433, 333, -280]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-889, -438, -969, -70, -392, -629, -222],\n          [684, -878, -709, 394, -726, -356, -214],\n          [988, -453, 934, -413, 577, -521, -951],\n          [-799, 14, -708, -497, -222, 214, 698],\n          [756, -969, 605, -558, 852, -521, 872],\n          [-933, 370, -580, -881, -392, 505, -62],\n          [741, -453, 199, -834, -493, 906, -855]\n        ]\n      ]\n    ],\n    \"output\": [\n      [741, -933, 756, -799, 988, 684, -889],\n      [-453, 370, -969, 14, -453, -878, -438],\n      [199, -580, 605, -708, 934, -709, -969],\n      [-834, -881, -558, -497, -413, 394, -70],\n      [-493, -392, 852, -222, 577, -726, -392],\n      [906, 505, -521, 214, -521, -356, -629],\n      [-855, -62, 872, 698, -951, -214, -222]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [499, 603, 106, -1000, 775, -622, -938, -155, -903, 467],\n          [-493, -725, -659, -194, -553, -42, -335, 64, 772, -644],\n          [978, -470, 529, 13, -979, 72, 963, 103, 693, -368],\n          [956, -61, -728, 587, 191, -921, 696, 270, -27, -140],\n          [244, 216, -475, 583, -207, 195, 369, 999, -678, 377],\n          [-436, 262, 177, -995, 381, 716, 681, 26, -427, 969],\n          [-765, 435, 358, 694, 771, 101, -275, -309, 719, 636],\n          [416, -167, 723, -403, 462, -207, 195, 421, -401, 818],\n          [-282, -7, -737, 166, -77, -572, 562, 78, -675, 498],\n          [-790, 628, -207, 122, -457, 458, -698, -188, -129, -530]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-790, -282, 416, -765, -436, 244, 956, 978, -493, 499],\n      [628, -7, -167, 435, 262, 216, -61, -470, -725, 603],\n      [-207, -737, 723, 358, 177, -475, -728, 529, -659, 106],\n      [122, 166, -403, 694, -995, 583, 587, 13, -194, -1000],\n      [-457, -77, 462, 771, 381, -207, 191, -979, -553, 775],\n      [458, -572, -207, 101, 716, 195, -921, 72, -42, -622],\n      [-698, 562, 195, -275, 681, 369, 696, 963, -335, -938],\n      [-188, 78, 421, -309, 26, 999, 270, 103, 64, -155],\n      [-129, -675, -401, 719, -427, -678, -27, 693, 772, -903],\n      [-530, 498, 818, 636, 969, 377, -140, -368, -644, 467]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [377, 749, -618],\n          [290, 73, -595],\n          [943, -907, 176]\n        ]\n      ]\n    ],\n    \"output\": [\n      [943, 290, 377],\n      [-907, 73, 749],\n      [176, -595, -618]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [222, -327, 671, 765, -251, 297, -877, 470, -123],\n          [519, 984, 260, -455, 644, -47, -779, 853, 755],\n          [12, -262, 423, 53, -641, 647, 397, -916, 735],\n          [798, -6, -877, -892, 508, 960, 188, 808, -366],\n          [756, -704, 816, -783, -186, -97, -549, -512, -992],\n          [-626, 934, -595, 773, -697, 607, -871, 146, -811],\n          [-167, 899, -583, 759, -547, 289, 930, 452, -302],\n          [-991, 133, -688, 988, -431, -669, 515, -618, 817],\n          [93, 230, -713, -421, 819, 528, -954, 988, -69]\n        ]\n      ]\n    ],\n    \"output\": [\n      [93, -991, -167, -626, 756, 798, 12, 519, 222],\n      [230, 133, 899, 934, -704, -6, -262, 984, -327],\n      [-713, -688, -583, -595, 816, -877, 423, 260, 671],\n      [-421, 988, 759, 773, -783, -892, 53, -455, 765],\n      [819, -431, -547, -697, -186, 508, -641, 644, -251],\n      [528, -669, 289, 607, -97, 960, 647, -47, 297],\n      [-954, 515, 930, -871, -549, 188, 397, -779, -877],\n      [988, -618, 452, 146, -512, 808, -916, 853, 470],\n      [-69, 817, -302, -811, -992, -366, 735, 755, -123]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-470, -244, 445, -172, 380, -196, 215],\n          [-718, 214, -285, -825, 915, -336, -146],\n          [-220, 324, -524, -116, -450, -553, 857],\n          [945, 88, 535, -842, -396, 952, -879],\n          [978, -757, -780, 777, 811, 900, 961],\n          [-966, -176, -508, -722, 252, 535, 464],\n          [-532, -70, 499, -511, 43, -121, -492]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-532, -966, 978, 945, -220, -718, -470],\n      [-70, -176, -757, 88, 324, 214, -244],\n      [499, -508, -780, 535, -524, -285, 445],\n      [-511, -722, 777, -842, -116, -825, -172],\n      [43, 252, 811, -396, -450, 915, 380],\n      [-121, 535, 900, 952, -553, -336, -196],\n      [-492, 464, 961, -879, 857, -146, 215]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-390, -11, -813],\n          [438, -305, 5],\n          [-831, 832, 920]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-831, 438, -390],\n      [832, -305, -11],\n      [920, 5, -813]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[-272]]]],\n    \"output\": [[-272]]\n  },\n  {\n    \"input\": [[\"matrix\", [[593]]]],\n    \"output\": [[593]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-458, -120, -859, -262, -397, -166, -212],\n          [-126, 841, 798, 672, 641, -573, -207],\n          [312, -641, 447, 953, -538, -542, 536],\n          [985, 695, 948, -779, -961, 931, 216],\n          [450, -520, 992, -725, 446, -484, 761],\n          [862, 27, 224, 797, 92, 149, -555],\n          [-552, -279, 399, -487, 368, 253, -549]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-552, 862, 450, 985, 312, -126, -458],\n      [-279, 27, -520, 695, -641, 841, -120],\n      [399, 224, 992, 948, 447, 798, -859],\n      [-487, 797, -725, -779, 953, 672, -262],\n      [368, 92, 446, -961, -538, 641, -397],\n      [253, 149, -484, 931, -542, -573, -166],\n      [-549, -555, 761, 216, 536, -207, -212]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [608, 568, 604, 517, -487, -916, 137, -79],\n          [728, 863, 15, -526, -613, 285, -699, 814],\n          [183, 296, 251, -752, -580, 875, -889, -107],\n          [955, -874, -173, 717, 426, 683, -482, -56],\n          [-996, -615, 816, -192, 539, 694, -124, -870],\n          [23, 673, 61, 800, 726, 975, 20, -730],\n          [997, 145, -637, 345, 940, -566, -670, -500],\n          [-244, -430, -38, 431, -96, -870, -230, -512]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-244, 997, 23, -996, 955, 183, 728, 608],\n      [-430, 145, 673, -615, -874, 296, 863, 568],\n      [-38, -637, 61, 816, -173, 251, 15, 604],\n      [431, 345, 800, -192, 717, -752, -526, 517],\n      [-96, 940, 726, 539, 426, -580, -613, -487],\n      [-870, -566, 975, 694, 683, 875, 285, -916],\n      [-230, -670, 20, -124, -482, -889, -699, 137],\n      [-512, -500, -730, -870, -56, -107, 814, -79]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[-353]]]],\n    \"output\": [[-353]]\n  },\n  {\n    \"input\": [[\"matrix\", [[-328]]]],\n    \"output\": [[-328]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [77, 421, 63],\n          [552, 880, 188],\n          [854, -403, -959]\n        ]\n      ]\n    ],\n    \"output\": [\n      [854, 552, 77],\n      [-403, 880, 421],\n      [-959, 188, 63]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-396, 208, 812, -585, 791, 857, -537, -774],\n          [565, 66, -171, -875, -393, 434, -300, -34],\n          [-607, 358, 509, -62, 636, -41, 977, 325],\n          [-180, -236, 787, 394, -711, -181, -48, -791],\n          [-403, 201, -328, 45, 747, -232, -396, -455],\n          [-950, 149, 606, -512, -927, -344, 859, 792],\n          [-221, -492, -282, -329, -89, 451, 147, -19],\n          [93, -835, 281, -73, -19, 82, 866, 507]\n        ]\n      ]\n    ],\n    \"output\": [\n      [93, -221, -950, -403, -180, -607, 565, -396],\n      [-835, -492, 149, 201, -236, 358, 66, 208],\n      [281, -282, 606, -328, 787, 509, -171, 812],\n      [-73, -329, -512, 45, 394, -62, -875, -585],\n      [-19, -89, -927, 747, -711, 636, -393, 791],\n      [82, 451, -344, -232, -181, -41, 434, 857],\n      [866, 147, 859, -396, -48, 977, -300, -537],\n      [507, -19, 792, -455, -791, 325, -34, -774]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-763, -215],\n          [996, 727]\n        ]\n      ]\n    ],\n    \"output\": [\n      [996, -763],\n      [727, -215]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-366, -586, -872],\n          [-338, -995, 760],\n          [968, -835, -528]\n        ]\n      ]\n    ],\n    \"output\": [\n      [968, -338, -366],\n      [-835, -995, -586],\n      [-528, 760, -872]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [4, -476, -763, -398],\n          [-118, 837, -62, -293],\n          [295, -387, -901, -824],\n          [-949, -398, 910, -990]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-949, 295, -118, 4],\n      [-398, -387, 837, -476],\n      [910, -901, -62, -763],\n      [-990, -824, -293, -398]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [494, 533, -778, -17, -635, -614, -552, 693, -638],\n          [-225, 870, -323, -265, -792, 985, -116, 264, -926],\n          [-460, -354, 830, 685, 65, -296, 389, 750, -586],\n          [405, -334, 533, -164, -580, -968, -475, 366, -366],\n          [590, -224, 432, 291, -188, -77, 764, -53, -991],\n          [-437, -208, 26, 301, 759, 97, 836, -346, 463],\n          [353, 299, -306, -608, 528, 310, -649, -144, -873],\n          [-866, 39, 21, -132, -439, 725, 424, 357, -986],\n          [-916, 124, -361, 110, 113, -822, 21, 218, -590]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-916, -866, 353, -437, 590, 405, -460, -225, 494],\n      [124, 39, 299, -208, -224, -334, -354, 870, 533],\n      [-361, 21, -306, 26, 432, 533, 830, -323, -778],\n      [110, -132, -608, 301, 291, -164, 685, -265, -17],\n      [113, -439, 528, 759, -188, -580, 65, -792, -635],\n      [-822, 725, 310, 97, -77, -968, -296, 985, -614],\n      [21, 424, -649, 836, 764, -475, 389, -116, -552],\n      [218, 357, -144, -346, -53, 366, 750, 264, 693],\n      [-590, -986, -873, 463, -991, -366, -586, -926, -638]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-677, 390, -224, -652, 681, 988, -490, -861],\n          [-219, -429, 326, 357, -599, 766, 568, 538],\n          [394, 332, 177, -345, -363, 884, 341, 892],\n          [-254, 44, -124, 24, 947, -907, 130, 177],\n          [700, 936, 880, 965, -11, 227, -46, 771],\n          [338, -192, 679, -791, -561, -395, 274, 439],\n          [232, 862, -137, 12, -145, 382, -7, -518],\n          [280, -802, -530, -131, -908, 140, 285, -6]\n        ]\n      ]\n    ],\n    \"output\": [\n      [280, 232, 338, 700, -254, 394, -219, -677],\n      [-802, 862, -192, 936, 44, 332, -429, 390],\n      [-530, -137, 679, 880, -124, 177, 326, -224],\n      [-131, 12, -791, 965, 24, -345, 357, -652],\n      [-908, -145, -561, -11, 947, -363, -599, 681],\n      [140, 382, -395, 227, -907, 884, 766, 988],\n      [285, -7, 274, -46, 130, 341, 568, -490],\n      [-6, -518, 439, 771, 177, 892, 538, -861]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [772, 731, -955, -104, -384, -618, 237, -556],\n          [-926, -107, -320, -990, 459, -940, 762, 600],\n          [-984, 45, -785, 554, 459, 226, 104, 698],\n          [542, 9, -774, -602, 336, -789, -249, 644],\n          [-952, 810, 728, -281, 283, 736, 363, -309],\n          [-179, 562, -358, -869, 963, 843, -679, 412],\n          [0, 789, 833, -51, 272, 613, -454, -975],\n          [894, -794, 451, 718, 116, -746, 573, -95]\n        ]\n      ]\n    ],\n    \"output\": [\n      [894, 0, -179, -952, 542, -984, -926, 772],\n      [-794, 789, 562, 810, 9, 45, -107, 731],\n      [451, 833, -358, 728, -774, -785, -320, -955],\n      [718, -51, -869, -281, -602, 554, -990, -104],\n      [116, 272, 963, 283, 336, 459, 459, -384],\n      [-746, 613, 843, 736, -789, 226, -940, -618],\n      [573, -454, -679, 363, -249, 104, 762, 237],\n      [-95, -975, 412, -309, 644, 698, 600, -556]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-176, -234, 572, 136, -768, 134, 463, 850],\n          [-624, -206, -668, -113, 470, 268, 47, -334],\n          [429, -867, -60, 245, -167, 954, -47, -368],\n          [822, 555, -267, -810, -458, 812, -301, 475],\n          [233, 483, -104, -549, -441, -210, 670, 769],\n          [-107, -805, 813, -823, 345, 205, 60, -28],\n          [-840, 227, -987, -357, 68, -84, -135, -10],\n          [-294, 727, -15, -209, -612, 911, -19, 219]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-294, -840, -107, 233, 822, 429, -624, -176],\n      [727, 227, -805, 483, 555, -867, -206, -234],\n      [-15, -987, 813, -104, -267, -60, -668, 572],\n      [-209, -357, -823, -549, -810, 245, -113, 136],\n      [-612, 68, 345, -441, -458, -167, 470, -768],\n      [911, -84, 205, -210, 812, 954, 268, 134],\n      [-19, -135, 60, 670, -301, -47, 47, 463],\n      [219, -10, -28, 769, 475, -368, -334, 850]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [258, 312, -637],\n          [-829, -70, 139],\n          [-345, -248, 913]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-345, -829, 258],\n      [-248, -70, 312],\n      [913, 139, -637]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[875]]]],\n    \"output\": [[875]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [195, -393, 205, -981, 195, 471, -10, -218, 81],\n          [-575, -976, 429, 916, 669, 658, 540, 476, 657],\n          [624, -575, -913, -849, -683, 548, -217, -341, -758],\n          [557, 240, -668, -767, -119, -323, 544, 99, -439],\n          [786, 243, -301, 786, 169, -44, 142, 240, -113],\n          [235, -448, 630, -698, -169, -652, -1000, 396, 138],\n          [-78, -345, -846, 499, 280, 63, 71, 772, -723],\n          [852, 853, -760, 632, 671, 843, -481, -304, -901],\n          [-725, 632, 647, -976, 748, -305, 992, 1, -680]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-725, 852, -78, 235, 786, 557, 624, -575, 195],\n      [632, 853, -345, -448, 243, 240, -575, -976, -393],\n      [647, -760, -846, 630, -301, -668, -913, 429, 205],\n      [-976, 632, 499, -698, 786, -767, -849, 916, -981],\n      [748, 671, 280, -169, 169, -119, -683, 669, 195],\n      [-305, 843, 63, -652, -44, -323, 548, 658, 471],\n      [992, -481, 71, -1000, 142, 544, -217, 540, -10],\n      [1, -304, 772, 396, 240, 99, -341, 476, -218],\n      [-680, -901, -723, 138, -113, -439, -758, 657, 81]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-237, -250, 214, 832, 403, 703, 912, 288, 961],\n          [-323, 659, -686, -662, -360, 508, -235, 438, -891],\n          [97, 836, 941, 50, -469, 621, 179, -518, 312],\n          [117, 179, -564, -569, -20, -431, -898, 50, 516],\n          [-47, -367, -43, 270, 493, -766, 672, 143, 522],\n          [964, 431, 653, 725, 936, -360, 970, -333, 622],\n          [-346, 537, -463, -157, -395, 327, 185, -814, 668],\n          [-405, -563, -857, 351, -592, -272, -104, -29, -269],\n          [-430, -782, 0, 249, 348, 369, 132, 262, 59]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-430, -405, -346, 964, -47, 117, 97, -323, -237],\n      [-782, -563, 537, 431, -367, 179, 836, 659, -250],\n      [0, -857, -463, 653, -43, -564, 941, -686, 214],\n      [249, 351, -157, 725, 270, -569, 50, -662, 832],\n      [348, -592, -395, 936, 493, -20, -469, -360, 403],\n      [369, -272, 327, -360, -766, -431, 621, 508, 703],\n      [132, -104, 185, 970, 672, -898, 179, -235, 912],\n      [262, -29, -814, -333, 143, 50, -518, 438, 288],\n      [59, -269, 668, 622, 522, 516, 312, -891, 961]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-619, -923],\n          [-367, 84]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-367, -619],\n      [84, -923]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [80, 515],\n          [913, -895]\n        ]\n      ]\n    ],\n    \"output\": [\n      [913, 80],\n      [-895, 515]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [726, -883],\n          [-493, 586]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-493, 726],\n      [586, -883]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[-379]]]],\n    \"output\": [[-379]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-890, 441, 625],\n          [443, 623, -589],\n          [751, 297, -359]\n        ]\n      ]\n    ],\n    \"output\": [\n      [751, 443, -890],\n      [297, 623, 441],\n      [-359, -589, 625]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [415, 481, 645, 48, 602, 637, -285, 491, -944],\n          [675, 478, 888, -866, 467, -701, 806, 865, 30],\n          [978, 837, -214, -347, 354, -971, 742, -155, -524],\n          [275, -376, 44, -222, 623, 789, 120, -9, 909],\n          [386, 479, 473, 80, 409, -601, -82, 652, -121],\n          [-839, 378, 223, 337, -728, -69, -223, 66, 631],\n          [-797, 158, -892, -163, 641, -727, -61, -656, 337],\n          [-517, -22, -567, 872, -960, 80, -435, 286, -492],\n          [-774, 120, -42, 409, -136, 561, 324, 451, 886]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-774, -517, -797, -839, 386, 275, 978, 675, 415],\n      [120, -22, 158, 378, 479, -376, 837, 478, 481],\n      [-42, -567, -892, 223, 473, 44, -214, 888, 645],\n      [409, 872, -163, 337, 80, -222, -347, -866, 48],\n      [-136, -960, 641, -728, 409, 623, 354, 467, 602],\n      [561, 80, -727, -69, -601, 789, -971, -701, 637],\n      [324, -435, -61, -223, -82, 120, 742, 806, -285],\n      [451, 286, -656, 66, 652, -9, -155, 865, 491],\n      [886, -492, 337, 631, -121, 909, -524, 30, -944]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-830, 218, -827, 609, -74, 741, 757, 233, -653],\n          [857, -149, -375, -646, -143, 962, 597, -947, 311],\n          [925, 348, -740, 713, -989, 992, -318, -437, -444],\n          [-447, 334, 361, 934, -180, 419, -318, -639, -121],\n          [-880, -5, -56, 254, -917, -913, -907, 310, -954],\n          [634, 873, -733, 904, -872, -618, -426, 3, 534],\n          [776, 658, -989, 105, -336, -810, -962, 754, 719],\n          [-85, -541, 908, 25, 832, 252, 796, 916, 675],\n          [657, -332, -391, 124, -211, -745, -556, 134, 717]\n        ]\n      ]\n    ],\n    \"output\": [\n      [657, -85, 776, 634, -880, -447, 925, 857, -830],\n      [-332, -541, 658, 873, -5, 334, 348, -149, 218],\n      [-391, 908, -989, -733, -56, 361, -740, -375, -827],\n      [124, 25, 105, 904, 254, 934, 713, -646, 609],\n      [-211, 832, -336, -872, -917, -180, -989, -143, -74],\n      [-745, 252, -810, -618, -913, 419, 992, 962, 741],\n      [-556, 796, -962, -426, -907, -318, -318, 597, 757],\n      [134, 916, 754, 3, 310, -639, -437, -947, 233],\n      [717, 675, 719, 534, -954, -121, -444, 311, -653]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-677, -449, 698, -934],\n          [-369, -85, -673, 898],\n          [-514, 604, 61, -982],\n          [978, -840, -81, 820]\n        ]\n      ]\n    ],\n    \"output\": [\n      [978, -514, -369, -677],\n      [-840, 604, -85, -449],\n      [-81, 61, -673, 698],\n      [820, -982, 898, -934]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [482, -796, 331, 982, 228, 391, 76, -829, -918, -836],\n          [171, -882, -427, 549, -415, -537, -83, 608, -565, -139],\n          [857, -794, -869, -487, 975, 635, -613, 14, -981, -872],\n          [777, 181, 231, -750, -239, -216, 2, -664, 55, -632],\n          [315, -850, 202, -474, -444, -545, 413, -553, 455, -905],\n          [-369, 237, 424, -319, 388, -317, 986, 374, -906, 734],\n          [640, 73, -61, -642, -881, 299, 612, 302, -482, 97],\n          [-644, 708, -75, 903, -416, -639, 224, 199, 190, -420],\n          [974, 507, -842, -818, 171, -199, 604, 921, -411, -969],\n          [192, -613, -602, -441, -671, 510, 947, -969, -456, -767]\n        ]\n      ]\n    ],\n    \"output\": [\n      [192, 974, -644, 640, -369, 315, 777, 857, 171, 482],\n      [-613, 507, 708, 73, 237, -850, 181, -794, -882, -796],\n      [-602, -842, -75, -61, 424, 202, 231, -869, -427, 331],\n      [-441, -818, 903, -642, -319, -474, -750, -487, 549, 982],\n      [-671, 171, -416, -881, 388, -444, -239, 975, -415, 228],\n      [510, -199, -639, 299, -317, -545, -216, 635, -537, 391],\n      [947, 604, 224, 612, 986, 413, 2, -613, -83, 76],\n      [-969, 921, 199, 302, 374, -553, -664, 14, 608, -829],\n      [-456, -411, 190, -482, -906, 455, 55, -981, -565, -918],\n      [-767, -969, -420, 97, 734, -905, -632, -872, -139, -836]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [872, 228, -435, 224, -719, -888, 507],\n          [276, -68, 750, -940, -851, -783, -949],\n          [-47, -451, 734, 542, 801, 729, -245],\n          [-424, 170, -292, -112, 297, 351, -130],\n          [214, 686, -418, 711, 878, 166, 363],\n          [53, -281, -376, -331, -31, 603, 91],\n          [-280, 584, -58, -927, -529, -891, 775]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-280, 53, 214, -424, -47, 276, 872],\n      [584, -281, 686, 170, -451, -68, 228],\n      [-58, -376, -418, -292, 734, 750, -435],\n      [-927, -331, 711, -112, 542, -940, 224],\n      [-529, -31, 878, 297, 801, -851, -719],\n      [-891, 603, 166, 351, 729, -783, -888],\n      [775, 91, 363, -130, -245, -949, 507]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[63]]]],\n    \"output\": [[63]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [847, 158, -776, -210, -946, 819],\n          [271, -351, 142, -514, -98, -64],\n          [-664, 155, -453, -123, -751, 454],\n          [-469, 383, 365, -74, -208, 187],\n          [944, -911, -774, 143, -943, 627],\n          [874, -7, -505, -380, -82, -591]\n        ]\n      ]\n    ],\n    \"output\": [\n      [874, 944, -469, -664, 271, 847],\n      [-7, -911, 383, 155, -351, 158],\n      [-505, -774, 365, -453, 142, -776],\n      [-380, 143, -74, -123, -514, -210],\n      [-82, -943, -208, -751, -98, -946],\n      [-591, 627, 187, 454, -64, 819]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-113, -358, 755, -827, 531, -856, 255, -112, -412],\n          [-645, -295, -625, 997, 227, 110, 597, 711, 981],\n          [443, 653, -534, 489, 682, 654, -528, 289, -96],\n          [-390, -591, 345, 550, 745, -1, 801, 889, -333],\n          [841, -705, -454, 246, -628, -431, -494, 511, -676],\n          [-651, 87, 22, 349, 301, -246, -875, 700, -371],\n          [-529, -360, 919, -296, 859, 376, -934, 767, 889],\n          [895, 832, -79, -896, -371, -665, -709, -519, -730],\n          [204, 290, -305, -822, -604, -341, 411, 457, -562]\n        ]\n      ]\n    ],\n    \"output\": [\n      [204, 895, -529, -651, 841, -390, 443, -645, -113],\n      [290, 832, -360, 87, -705, -591, 653, -295, -358],\n      [-305, -79, 919, 22, -454, 345, -534, -625, 755],\n      [-822, -896, -296, 349, 246, 550, 489, 997, -827],\n      [-604, -371, 859, 301, -628, 745, 682, 227, 531],\n      [-341, -665, 376, -246, -431, -1, 654, 110, -856],\n      [411, -709, -934, -875, -494, 801, -528, 597, 255],\n      [457, -519, 767, 700, 511, 889, 289, 711, -112],\n      [-562, -730, 889, -371, -676, -333, -96, 981, -412]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [96, 328, -366, -109, -636, -409, -123],\n          [637, -513, 679, -900, 986, 674, 405],\n          [-95, 691, 428, -419, -391, -61, -868],\n          [17, 543, 845, -389, -531, 431, -979],\n          [22, 723, 510, -399, 896, 650, 351],\n          [-578, 540, 238, 113, 790, -489, -310],\n          [294, -371, -340, 960, 923, 146, 114]\n        ]\n      ]\n    ],\n    \"output\": [\n      [294, -578, 22, 17, -95, 637, 96],\n      [-371, 540, 723, 543, 691, -513, 328],\n      [-340, 238, 510, 845, 428, 679, -366],\n      [960, 113, -399, -389, -419, -900, -109],\n      [923, 790, 896, -531, -391, 986, -636],\n      [146, -489, 650, 431, -61, 674, -409],\n      [114, -310, 351, -979, -868, 405, -123]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [632, 805, 427, -217, -763, 945, -904, -560, -287, 301],\n          [-733, 520, 928, -848, 51, -277, 354, -74, 586, 167],\n          [-5, -85, 334, 878, 499, 582, -872, -14, 979, 600],\n          [130, 4, -9, -324, 25, -657, -337, 580, 774, 709],\n          [913, -812, 208, -498, -736, -958, -713, -583, 595, -915],\n          [509, 384, 717, -319, 137, -121, -150, -938, 315, -161],\n          [651, -57, 506, 370, -336, 982, 839, -501, 717, 228],\n          [910, -627, 768, -936, 361, 927, -220, 694, -776, -602],\n          [-863, -676, 340, -158, -404, -875, 16, -816, 924, -444],\n          [840, 869, 691, -153, 65, 119, -348, -716, 559, -601]\n        ]\n      ]\n    ],\n    \"output\": [\n      [840, -863, 910, 651, 509, 913, 130, -5, -733, 632],\n      [869, -676, -627, -57, 384, -812, 4, -85, 520, 805],\n      [691, 340, 768, 506, 717, 208, -9, 334, 928, 427],\n      [-153, -158, -936, 370, -319, -498, -324, 878, -848, -217],\n      [65, -404, 361, -336, 137, -736, 25, 499, 51, -763],\n      [119, -875, 927, 982, -121, -958, -657, 582, -277, 945],\n      [-348, 16, -220, 839, -150, -713, -337, -872, 354, -904],\n      [-716, -816, 694, -501, -938, -583, 580, -14, -74, -560],\n      [559, 924, -776, 717, 315, 595, 774, 979, 586, -287],\n      [-601, -444, -602, 228, -161, -915, 709, 600, 167, 301]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-996, -818, 569],\n          [624, 763, -188],\n          [148, 706, -754]\n        ]\n      ]\n    ],\n    \"output\": [\n      [148, 624, -996],\n      [706, 763, -818],\n      [-754, -188, 569]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [266, -260, 209, -841, -539, 526, -938, 436],\n          [518, 209, 359, 214, -353, -365, 806, -298],\n          [690, -689, 443, 66, 747, 300, -426, 164],\n          [457, 241, -59, 127, -420, 62, -361, 610],\n          [-181, -484, 679, 99, -762, 641, -516, 389],\n          [-510, -662, -446, -646, 688, -892, 972, 440],\n          [509, -197, 970, 440, -959, -420, -571, 371],\n          [810, 286, -539, -442, 109, 787, -365, -980]\n        ]\n      ]\n    ],\n    \"output\": [\n      [810, 509, -510, -181, 457, 690, 518, 266],\n      [286, -197, -662, -484, 241, -689, 209, -260],\n      [-539, 970, -446, 679, -59, 443, 359, 209],\n      [-442, 440, -646, 99, 127, 66, 214, -841],\n      [109, -959, 688, -762, -420, 747, -353, -539],\n      [787, -420, -892, 641, 62, 300, -365, 526],\n      [-365, -571, 972, -516, -361, -426, 806, -938],\n      [-980, 371, 440, 389, 610, 164, -298, 436]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-387, -705, 865, -393, 14, 214, -366, -534, 33, -88],\n          [599, 394, 172, 432, 561, 98, 442, -878, -711, 157],\n          [-988, -785, 702, 131, -157, -358, 842, 598, -827, -763],\n          [319, 506, -807, 559, 230, -31, -311, -613, -876, -319],\n          [-529, 502, -136, 844, -782, 831, 71, -682, 111, -779],\n          [-938, -565, -555, -268, -775, -195, -774, -754, -375, 380],\n          [572, 708, -190, -447, 360, -740, 279, 608, -378, -142],\n          [54, -214, 976, -346, 760, -31, 330, 82, 951, 52],\n          [151, -439, 453, -567, -696, -412, 587, -217, -745, 558],\n          [441, 402, 161, -28, 984, -42, -316, 240, -540, -231]\n        ]\n      ]\n    ],\n    \"output\": [\n      [441, 151, 54, 572, -938, -529, 319, -988, 599, -387],\n      [402, -439, -214, 708, -565, 502, 506, -785, 394, -705],\n      [161, 453, 976, -190, -555, -136, -807, 702, 172, 865],\n      [-28, -567, -346, -447, -268, 844, 559, 131, 432, -393],\n      [984, -696, 760, 360, -775, -782, 230, -157, 561, 14],\n      [-42, -412, -31, -740, -195, 831, -31, -358, 98, 214],\n      [-316, 587, 330, 279, -774, 71, -311, 842, 442, -366],\n      [240, -217, 82, 608, -754, -682, -613, 598, -878, -534],\n      [-540, -745, 951, -378, -375, 111, -876, -827, -711, 33],\n      [-231, 558, 52, -142, 380, -779, -319, -763, 157, -88]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-329, -1000, -739, 675, -948, 787, -961, -677],\n          [-595, -905, 102, 770, 514, -112, 641, 128],\n          [-450, -447, 722, -183, -435, -463, 570, 848],\n          [-492, -735, 680, -533, -407, -684, -134, -208],\n          [908, 254, 997, -222, 467, -700, 572, -857],\n          [475, 376, 825, 636, -180, -834, 421, 565],\n          [10, -695, -446, 984, -365, -711, -408, -530],\n          [-465, -469, 354, 989, -424, -116, 635, -252]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-465, 10, 475, 908, -492, -450, -595, -329],\n      [-469, -695, 376, 254, -735, -447, -905, -1000],\n      [354, -446, 825, 997, 680, 722, 102, -739],\n      [989, 984, 636, -222, -533, -183, 770, 675],\n      [-424, -365, -180, 467, -407, -435, 514, -948],\n      [-116, -711, -834, -700, -684, -463, -112, 787],\n      [635, -408, 421, 572, -134, 570, 641, -961],\n      [-252, -530, 565, -857, -208, 848, 128, -677]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [820, 226],\n          [-185, -201]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-185, 820],\n      [-201, 226]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-210, 102, 427, -902, -615, 159, -961, -319, -375],\n          [-892, 903, 980, 302, 496, 469, 195, 705, 419],\n          [276, -887, -690, -984, -273, 772, -994, -720, 75],\n          [461, -286, -143, 528, -834, 623, 80, 607, -618],\n          [94, -22, 996, 708, 851, 583, -641, 542, 919],\n          [-219, 546, -80, -280, 121, -33, -461, -18, -543],\n          [-858, 732, 668, 442, 579, -300, -470, 371, 552],\n          [810, -496, 380, -489, 948, -517, 297, 594, 268],\n          [304, -68, 564, 37, -857, -502, -936, -272, 901]\n        ]\n      ]\n    ],\n    \"output\": [\n      [304, 810, -858, -219, 94, 461, 276, -892, -210],\n      [-68, -496, 732, 546, -22, -286, -887, 903, 102],\n      [564, 380, 668, -80, 996, -143, -690, 980, 427],\n      [37, -489, 442, -280, 708, 528, -984, 302, -902],\n      [-857, 948, 579, 121, 851, -834, -273, 496, -615],\n      [-502, -517, -300, -33, 583, 623, 772, 469, 159],\n      [-936, 297, -470, -461, -641, 80, -994, 195, -961],\n      [-272, 594, 371, -18, 542, 607, -720, 705, -319],\n      [901, 268, 552, -543, 919, -618, 75, 419, -375]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-338, 1, 162],\n          [-359, 364, 759],\n          [-571, -196, 443]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-571, -359, -338],\n      [-196, 364, 1],\n      [443, 759, 162]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-769, 827, 991, 108, 312, 16, 790],\n          [-79, -364, 600, 466, 975, 767, -595],\n          [-27, -62, -905, 738, 784, 573, -33],\n          [-819, -983, 919, -328, 280, -77, -541],\n          [-199, 882, 984, 742, -344, 947, -600],\n          [-899, -122, -741, 544, 106, -504, 853],\n          [702, 464, 791, 223, 828, 510, -329]\n        ]\n      ]\n    ],\n    \"output\": [\n      [702, -899, -199, -819, -27, -79, -769],\n      [464, -122, 882, -983, -62, -364, 827],\n      [791, -741, 984, 919, -905, 600, 991],\n      [223, 544, 742, -328, 738, 466, 108],\n      [828, 106, -344, 280, 784, 975, 312],\n      [510, -504, 947, -77, 573, 767, 16],\n      [-329, 853, -600, -541, -33, -595, 790]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-661, 986, -240, -842, 789, -922, -714],\n          [415, -15, 471, -97, -489, -166, -233],\n          [987, 785, 939, -92, -597, -545, -426],\n          [-292, 757, -260, -402, -263, 793, -332],\n          [-87, -291, -640, -409, 150, 434, -218],\n          [899, 68, 785, -199, 395, -197, -467],\n          [-868, -339, -580, -724, -204, 280, -875]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-868, 899, -87, -292, 987, 415, -661],\n      [-339, 68, -291, 757, 785, -15, 986],\n      [-580, 785, -640, -260, 939, 471, -240],\n      [-724, -199, -409, -402, -92, -97, -842],\n      [-204, 395, 150, -263, -597, -489, 789],\n      [280, -197, 434, 793, -545, -166, -922],\n      [-875, -467, -218, -332, -426, -233, -714]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [473, 776, -27, 307, -649, -875, 144, -411],\n          [325, -82, -607, 423, 339, -926, -807, -547],\n          [117, 30, -966, -879, 589, -28, 985, 305],\n          [233, 64, 631, -682, -812, 37, -246, 344],\n          [697, 372, 135, -770, 803, 27, -222, -687],\n          [-3, 916, -824, -319, 194, -109, 323, 726],\n          [744, -288, -336, 646, -1000, -931, 839, 267],\n          [122, 989, 370, -489, 323, -224, 944, 675]\n        ]\n      ]\n    ],\n    \"output\": [\n      [122, 744, -3, 697, 233, 117, 325, 473],\n      [989, -288, 916, 372, 64, 30, -82, 776],\n      [370, -336, -824, 135, 631, -966, -607, -27],\n      [-489, 646, -319, -770, -682, -879, 423, 307],\n      [323, -1000, 194, 803, -812, 589, 339, -649],\n      [-224, -931, -109, 27, 37, -28, -926, -875],\n      [944, 839, 323, -222, -246, 985, -807, 144],\n      [675, 267, 726, -687, 344, 305, -547, -411]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-206, 338, 119, -464, 102, 361, 541],\n          [-634, -522, -689, -274, -204, 989, -513],\n          [807, -873, -368, -941, -188, -986, -415],\n          [118, -200, -365, 310, -837, -931, 233],\n          [606, 567, 867, 989, 263, -967, -988],\n          [334, 234, 923, 130, -853, 745, -282],\n          [-821, 343, -499, 536, 480, -63, -224]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-821, 334, 606, 118, 807, -634, -206],\n      [343, 234, 567, -200, -873, -522, 338],\n      [-499, 923, 867, -365, -368, -689, 119],\n      [536, 130, 989, 310, -941, -274, -464],\n      [480, -853, 263, -837, -188, -204, 102],\n      [-63, 745, -967, -931, -986, 989, 361],\n      [-224, -282, -988, 233, -415, -513, 541]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-973, -980, -14, 607, -51],\n          [417, -676, 446, -604, -72],\n          [369, -778, 718, 302, -247],\n          [343, 270, 677, 914, -162],\n          [-213, 59, -826, -251, -484]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-213, 343, 369, 417, -973],\n      [59, 270, -778, -676, -980],\n      [-826, 677, 718, 446, -14],\n      [-251, 914, 302, -604, 607],\n      [-484, -162, -247, -72, -51]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-697, -813, 152, 606, 621, -774],\n          [532, -895, 527, 476, -754, 796],\n          [124, -901, -922, -305, 894, 126],\n          [503, -957, 919, 829, 817, 663],\n          [-594, -295, -288, -590, -391, -764],\n          [-179, -610, -16, 60, -458, -713]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-179, -594, 503, 124, 532, -697],\n      [-610, -295, -957, -901, -895, -813],\n      [-16, -288, 919, -922, 527, 152],\n      [60, -590, 829, -305, 476, 606],\n      [-458, -391, 817, 894, -754, 621],\n      [-713, -764, 663, 126, 796, -774]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-831, -448, -245, 626, 212],\n          [581, -123, -359, 828, -722],\n          [896, -223, 353, 142, -258],\n          [-987, -382, -742, -290, 526],\n          [-60, -870, 938, 846, 414]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-60, -987, 896, 581, -831],\n      [-870, -382, -223, -123, -448],\n      [938, -742, 353, -359, -245],\n      [846, -290, 142, 828, 626],\n      [414, 526, -258, -722, 212]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-671, -644, -634, 847, 407, -228, 171, -651, -758],\n          [90, -450, 284, 225, -896, -875, -753, -46, 938],\n          [628, -477, -824, 299, 708, -834, 933, -468, 351],\n          [784, 460, 613, 768, 932, 164, 471, -296, -995],\n          [-971, 66, -190, -287, 584, -482, -480, -872, -658],\n          [406, -58, 455, 692, -491, -356, -412, -847, -123],\n          [687, 547, 872, -873, -557, 333, -132, -197, -662],\n          [-937, -29, 60, -333, -212, 550, 508, -918, 971],\n          [732, 398, -245, -675, -765, -414, 398, 753, -416]\n        ]\n      ]\n    ],\n    \"output\": [\n      [732, -937, 687, 406, -971, 784, 628, 90, -671],\n      [398, -29, 547, -58, 66, 460, -477, -450, -644],\n      [-245, 60, 872, 455, -190, 613, -824, 284, -634],\n      [-675, -333, -873, 692, -287, 768, 299, 225, 847],\n      [-765, -212, -557, -491, 584, 932, 708, -896, 407],\n      [-414, 550, 333, -356, -482, 164, -834, -875, -228],\n      [398, 508, -132, -412, -480, 471, 933, -753, 171],\n      [753, -918, -197, -847, -872, -296, -468, -46, -651],\n      [-416, 971, -662, -123, -658, -995, 351, 938, -758]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [725, 474, 147],\n          [474, 710, -29],\n          [-765, -32, 156]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-765, 474, 725],\n      [-32, 710, 474],\n      [156, -29, 147]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-882, 613, -685, 820, -471, 789, 207, -642],\n          [276, 716, -445, 966, -431, 904, -928, -425],\n          [-193, 209, 209, -126, 129, 717, -981, -672],\n          [456, 289, 490, -723, 727, -275, -613, 845],\n          [758, -778, 878, 810, -87, 152, -891, 722],\n          [-585, 801, -284, 681, 555, -521, -772, -365],\n          [489, -401, -569, 644, 296, -986, -964, -165],\n          [493, 489, 629, -286, -147, -960, -919, 949]\n        ]\n      ]\n    ],\n    \"output\": [\n      [493, 489, -585, 758, 456, -193, 276, -882],\n      [489, -401, 801, -778, 289, 209, 716, 613],\n      [629, -569, -284, 878, 490, 209, -445, -685],\n      [-286, 644, 681, 810, -723, -126, 966, 820],\n      [-147, 296, 555, -87, 727, 129, -431, -471],\n      [-960, -986, -521, 152, -275, 717, 904, 789],\n      [-919, -964, -772, -891, -613, -981, -928, 207],\n      [949, -165, -365, 722, 845, -672, -425, -642]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [504, 67, 251],\n          [-335, -817, -425],\n          [-656, -871, 327]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-656, -335, 504],\n      [-871, -817, 67],\n      [327, -425, 251]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-905, -934, 755],\n          [-401, 671, -10],\n          [-681, 392, 803]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-681, -401, -905],\n      [392, 671, -934],\n      [803, -10, 755]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-504, -448, -504, 83, 125],\n          [671, -703, -344, 765, 533],\n          [-146, -162, -997, 613, 421],\n          [173, -63, -458, -527, 598],\n          [318, 653, 275, -368, 610]\n        ]\n      ]\n    ],\n    \"output\": [\n      [318, 173, -146, 671, -504],\n      [653, -63, -162, -703, -448],\n      [275, -458, -997, -344, -504],\n      [-368, -527, 613, 765, 83],\n      [610, 598, 421, 533, 125]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [412, 323, 661, -499, 662, 407, 391, 191, 70],\n          [657, 101, -516, 790, 79, 227, -289, 548, 776],\n          [-195, 287, -607, 432, 493, -386, -35, -772, 514],\n          [948, -755, -308, -365, -855, 89, -816, 901, -185],\n          [-133, 570, -368, -748, -468, -783, 804, 963, -267],\n          [39, -570, -332, -143, -705, -448, -402, 244, 700],\n          [-181, 857, 104, 9, 708, -79, 800, -415, -19],\n          [509, -379, 15, 111, -871, -514, -437, -791, -869],\n          [-76, 669, -276, 772, -968, 907, -486, -758, 124]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-76, 509, -181, 39, -133, 948, -195, 657, 412],\n      [669, -379, 857, -570, 570, -755, 287, 101, 323],\n      [-276, 15, 104, -332, -368, -308, -607, -516, 661],\n      [772, 111, 9, -143, -748, -365, 432, 790, -499],\n      [-968, -871, 708, -705, -468, -855, 493, 79, 662],\n      [907, -514, -79, -448, -783, 89, -386, 227, 407],\n      [-486, -437, 800, -402, 804, -816, -35, -289, 391],\n      [-758, -791, -415, 244, 963, 901, -772, 548, 191],\n      [124, -869, -19, 700, -267, -185, 514, 776, 70]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-187, -370, 994, 749, 326, -781, 266],\n          [-434, -150, -158, 527, 12, 649, -954],\n          [-938, -221, 26, -461, 961, 244, 389],\n          [449, 29, -161, -798, 865, 987, 699],\n          [505, -101, -635, -611, -575, 400, -145],\n          [100, 9, -571, -469, -340, -422, -758],\n          [298, -124, 759, -634, 313, 607, -22]\n        ]\n      ]\n    ],\n    \"output\": [\n      [298, 100, 505, 449, -938, -434, -187],\n      [-124, 9, -101, 29, -221, -150, -370],\n      [759, -571, -635, -161, 26, -158, 994],\n      [-634, -469, -611, -798, -461, 527, 749],\n      [313, -340, -575, 865, 961, 12, 326],\n      [607, -422, 400, 987, 244, 649, -781],\n      [-22, -758, -145, 699, 389, -954, 266]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-659, -595, 905, -533, -948, 622, -581],\n          [737, 627, 144, -836, -259, -550, -948],\n          [976, -165, 665, -174, -668, 956, 772],\n          [-227, 724, 956, 277, 575, 799, -530],\n          [-775, 391, 737, 584, -687, 541, -765],\n          [790, -931, 306, -621, 911, 746, 743],\n          [-590, 674, -399, 429, -744, 628, 19]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-590, 790, -775, -227, 976, 737, -659],\n      [674, -931, 391, 724, -165, 627, -595],\n      [-399, 306, 737, 956, 665, 144, 905],\n      [429, -621, 584, 277, -174, -836, -533],\n      [-744, 911, -687, 575, -668, -259, -948],\n      [628, 746, 541, 799, 956, -550, 622],\n      [19, 743, -765, -530, 772, -948, -581]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [908, 290, -790, 272, 595, 55],\n          [640, -782, -86, -729, -499, 576],\n          [-874, 281, 628, 308, 740, -214],\n          [138, -277, 213, 21, 835, -945],\n          [306, 715, -573, -540, 651, 464],\n          [499, -935, -153, 211, 972, 754]\n        ]\n      ]\n    ],\n    \"output\": [\n      [499, 306, 138, -874, 640, 908],\n      [-935, 715, -277, 281, -782, 290],\n      [-153, -573, 213, 628, -86, -790],\n      [211, -540, 21, 308, -729, 272],\n      [972, 651, 835, 740, -499, 595],\n      [754, 464, -945, -214, 576, 55]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-341, 173, 272, -88, -620, -608, -136],\n          [704, 959, 492, -376, -521, 169, 67],\n          [207, -992, -399, -490, 458, 4, 12],\n          [-331, -72, 386, 672, 795, 49, -898],\n          [505, 465, 22, 617, -969, -369, -835],\n          [998, 785, -506, -697, -727, -19, -10],\n          [-920, -447, 268, 124, -420, -209, 504]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-920, 998, 505, -331, 207, 704, -341],\n      [-447, 785, 465, -72, -992, 959, 173],\n      [268, -506, 22, 386, -399, 492, 272],\n      [124, -697, 617, 672, -490, -376, -88],\n      [-420, -727, -969, 795, 458, -521, -620],\n      [-209, -19, -369, 49, 4, 169, -608],\n      [504, -10, -835, -898, 12, 67, -136]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-810, -939, 778],\n          [540, 566, 183],\n          [358, 527, -144]\n        ]\n      ]\n    ],\n    \"output\": [\n      [358, 540, -810],\n      [527, 566, -939],\n      [-144, 183, 778]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-376, 324, -223, 857, 301],\n          [374, 522, 152, -486, -653],\n          [222, -737, 564, -80, 331],\n          [332, -972, -302, -193, 54],\n          [-964, -603, 420, -317, -87]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-964, 332, 222, 374, -376],\n      [-603, -972, -737, 522, 324],\n      [420, -302, 564, 152, -223],\n      [-317, -193, -80, -486, 857],\n      [-87, 54, 331, -653, 301]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-902, 286],\n          [-411, -211]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-411, -902],\n      [-211, 286]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-492, -517, -509, 920, 40],\n          [-733, -532, 352, 273, 394],\n          [21, -252, 353, -888, 498],\n          [384, 684, -960, -796, -699],\n          [900, 478, 880, -175, 862]\n        ]\n      ]\n    ],\n    \"output\": [\n      [900, 384, 21, -733, -492],\n      [478, 684, -252, -532, -517],\n      [880, -960, 353, 352, -509],\n      [-175, -796, -888, 273, 920],\n      [862, -699, 498, 394, 40]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-526, 727, 673, -139, -871, 127, -710, 945, -721],\n          [-945, 507, 520, -865, 360, -938, 397, -134, -812],\n          [-680, -354, 315, -231, 651, -974, -314, -326, 825],\n          [-338, -673, 965, 278, -940, -238, -867, 367, 352],\n          [-620, 70, 112, 374, -418, -755, -543, -840, -734],\n          [292, 16, -652, -151, 852, -731, 801, -669, -769],\n          [-267, 622, 220, -851, 37, 550, 719, 195, -536],\n          [-846, -989, -270, -81, -690, -838, 467, 571, 459],\n          [-552, -613, -907, -576, -726, -849, 916, 375, 657]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-552, -846, -267, 292, -620, -338, -680, -945, -526],\n      [-613, -989, 622, 16, 70, -673, -354, 507, 727],\n      [-907, -270, 220, -652, 112, 965, 315, 520, 673],\n      [-576, -81, -851, -151, 374, 278, -231, -865, -139],\n      [-726, -690, 37, 852, -418, -940, 651, 360, -871],\n      [-849, -838, 550, -731, -755, -238, -974, -938, 127],\n      [916, 467, 719, 801, -543, -867, -314, 397, -710],\n      [375, 571, 195, -669, -840, 367, -326, -134, 945],\n      [657, 459, -536, -769, -734, 352, 825, -812, -721]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[-52]]]],\n    \"output\": [[-52]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [105, -125],\n          [-350, -405]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-350, 105],\n      [-405, -125]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-239, -359, 986, -358, -376, 844, -549],\n          [219, 739, 283, 990, 400, -619, -136],\n          [-205, -185, 628, 754, 711, 686, -338],\n          [-405, -295, 707, 95, 575, 966, -553],\n          [-619, -710, 511, 35, 63, 449, 620],\n          [10, -325, 420, 507, -125, 526, -906],\n          [-431, -237, -162, 77, -388, 440, 562]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-431, 10, -619, -405, -205, 219, -239],\n      [-237, -325, -710, -295, -185, 739, -359],\n      [-162, 420, 511, 707, 628, 283, 986],\n      [77, 507, 35, 95, 754, 990, -358],\n      [-388, -125, 63, 575, 711, 400, -376],\n      [440, 526, 449, 966, 686, -619, 844],\n      [562, -906, 620, -553, -338, -136, -549]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-121, -318, 995, -19, -933, -127],\n          [-123, 665, 255, 958, 975, 395],\n          [709, 815, 920, 554, 695, -222],\n          [-957, 611, -611, 401, -172, 13],\n          [712, 963, 40, 528, -635, -971],\n          [349, 682, -633, 499, -186, 430]\n        ]\n      ]\n    ],\n    \"output\": [\n      [349, 712, -957, 709, -123, -121],\n      [682, 963, 611, 815, 665, -318],\n      [-633, 40, -611, 920, 255, 995],\n      [499, 528, 401, 554, 958, -19],\n      [-186, -635, -172, 695, 975, -933],\n      [430, -971, 13, -222, 395, -127]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-470, -693, 66, 375, -258],\n          [357, 100, -90, -431, -311],\n          [-877, -13, 107, 615, 330],\n          [-398, 308, 62, -399, -954],\n          [-544, -104, 675, 566, -316]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-544, -398, -877, 357, -470],\n      [-104, 308, -13, 100, -693],\n      [675, 62, 107, -90, 66],\n      [566, -399, 615, -431, 375],\n      [-316, -954, 330, -311, -258]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-19, -278, -128, 89, -576, 514],\n          [529, 704, -583, 386, 574, 737],\n          [975, 913, 903, 107, -4, -455],\n          [-973, -950, -115, -596, 465, 425],\n          [360, 898, 537, -38, -130, 973],\n          [872, -362, 1, -758, -390, -444]\n        ]\n      ]\n    ],\n    \"output\": [\n      [872, 360, -973, 975, 529, -19],\n      [-362, 898, -950, 913, 704, -278],\n      [1, 537, -115, 903, -583, -128],\n      [-758, -38, -596, 107, 386, 89],\n      [-390, -130, 465, -4, 574, -576],\n      [-444, 973, 425, -455, 737, 514]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [776, 20, -757, 997, -339, 956],\n          [178, -808, 854, 759, 249, -844],\n          [-573, -16, -181, 725, -669, 122],\n          [-594, -40, 620, -737, 422, 73],\n          [-803, 834, -763, -466, 698, 671],\n          [-433, 868, -810, 256, -916, -950]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-433, -803, -594, -573, 178, 776],\n      [868, 834, -40, -16, -808, 20],\n      [-810, -763, 620, -181, 854, -757],\n      [256, -466, -737, 725, 759, 997],\n      [-916, 698, 422, -669, 249, -339],\n      [-950, 671, 73, 122, -844, 956]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-911, 150, 610, 150, 207, -810, 900, -270, -990],\n          [-778, 867, 711, 453, 273, 687, 188, -367, 357],\n          [-626, 709, -530, 17, -297, -481, -266, 878, 36],\n          [424, -999, -397, 975, 171, -487, -824, -116, -113],\n          [166, -707, 550, -956, -889, -24, 844, -745, 798],\n          [-394, 729, 385, -468, -58, -531, 273, 930, 607],\n          [-997, 782, 475, -119, 940, -312, 863, 428, -232],\n          [558, -723, 143, 416, 265, -155, -461, 851, 62],\n          [-238, -984, -500, -654, -365, -258, 237, 554, 715]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-238, 558, -997, -394, 166, 424, -626, -778, -911],\n      [-984, -723, 782, 729, -707, -999, 709, 867, 150],\n      [-500, 143, 475, 385, 550, -397, -530, 711, 610],\n      [-654, 416, -119, -468, -956, 975, 17, 453, 150],\n      [-365, 265, 940, -58, -889, 171, -297, 273, 207],\n      [-258, -155, -312, -531, -24, -487, -481, 687, -810],\n      [237, -461, 863, 273, 844, -824, -266, 188, 900],\n      [554, 851, 428, 930, -745, -116, 878, -367, -270],\n      [715, 62, -232, 607, 798, -113, 36, 357, -990]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-471, 447, -691, 727, 710, -557],\n          [839, -390, 411, 70, -238, -536],\n          [802, 730, 579, -600, 651, 55],\n          [-619, -272, 406, -588, -988, -636],\n          [-226, -782, -121, 6, -105, -34],\n          [-310, -644, -850, -19, 133, -975]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-310, -226, -619, 802, 839, -471],\n      [-644, -782, -272, 730, -390, 447],\n      [-850, -121, 406, 579, 411, -691],\n      [-19, 6, -588, -600, 70, 727],\n      [133, -105, -988, 651, -238, 710],\n      [-975, -34, -636, 55, -536, -557]\n    ]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [-421, -159, 476],\n          [-296, -111, 712],\n          [-847, 771, -599]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-847, -296, -421],\n      [771, -111, -159],\n      [-599, 712, 476]\n    ]\n  },\n  {\n    \"input\": [[\"matrix\", [[-488]]]],\n    \"output\": [[-488]]\n  },\n  {\n    \"input\": [[\"matrix\", [[424]]]],\n    \"output\": [[424]]\n  },\n  {\n    \"input\": [\n      [\n        \"matrix\",\n        [\n          [640, 161, -769, 471, -421, -57],\n          [386, 89, 62, 479, 680, 904],\n          [-573, 779, -284, 184, 397, 569],\n          [-81, 396, 415, 189, 772, -102],\n          [-775, -163, 905, -815, -987, -924],\n          [-870, 83, 498, -450, -481, -650]\n        ]\n      ]\n    ],\n    \"output\": [\n      [-870, -775, -81, -573, 386, 640],\n      [83, -163, 396, 779, 89, 161],\n      [498, 905, 415, -284, 62, -769],\n      [-450, -815, 189, 184, 479, 471],\n      [-481, -987, 772, 397, 680, -421],\n      [-650, -924, -102, 569, 904, -57]\n    ]\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1722038400,
    "difficulty": "medium",
    "duration": 45,
    "excerpt": "Implement a function to rotate the given matrix by 90 degrees",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/matrix-rotation",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "matrix-rotation",
    "subtitle": null,
    "title": "Matrix Rotation",
    "topics": [
      "matrix"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {number[][]} matrix\n * @return {void}\n */\nexport default function matrixRotation(matrix) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function matrixRotation(matrix: number[][]): void {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var y=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),v=(i,e)=>{for(var n in e)r(i,n,{get:e[n],enumerable:!0})},a=(i,e,n,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!j.call(i,o)&&o!==n&&r(i,o,{get:()=>e[o],enumerable:!(h=g(e,o))||h.enumerable});return i};var w=(i,e,n)=>(n=i!=null?f(x(i)):{},a(e||!i||!i.__esModule?r(n,\"default\",{value:i,enumerable:!0}):n,i)),T=i=>a(r({},\"__esModule\",{value:!0}),i);var s=y((F,c)=>{c.exports=_jsx_runtime});var O={};v(O,{default:()=>k});var t=w(s());var l=MDXCodeBlock;var m=`export default function matrixRotation(matrix: number[][]): void {\n  // Get the number of rows (or columns) of the matrix\n  let n = matrix.length;\n\n  // Loop through each layer of the matrix\n  // The outer loop goes over each \"layer\" from the outside towards the center\n  for (let i = 0; i < Math.floor((n + 1) / 2); i++) {\n    // The inner loop goes over each element in the layer\n    for (let j = 0; j < Math.floor(n / 2); j++) {\n      // Store the value of the top-left element temporarily\n      let temp = matrix[n - 1 - j][i];\n\n      // Move the bottom-left element to the top-left\n      matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1];\n\n      // Move the bottom-right element to the bottom-left\n      matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 - i];\n\n      // Move the top-right element to the bottom-right\n      matrix[j][n - 1 - i] = matrix[i][j];\n\n      // Move the stored top-left element to the top-right\n      matrix[i][j] = temp;\n    }\n  }\n}\n`;var d=`export default function matrixRotation(matrix: number[][]): void {\n  // Get the number of rows (or columns) of the matrix\n  const n = matrix.length;\n\n  // Step 1: Transpose the matrix\n  // Transposing involves swapping matrix[i][j] with matrix[j][i]\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];\n    }\n  }\n\n  // Step 2: Reflect the matrix horizontally\n  // Reflecting involves swapping elements in each row, from the start to the middle\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n / 2; j++) {\n      [matrix[i][j], matrix[i][n - 1 - j]] = [\n        matrix[i][n - 1 - j],\n        matrix[i][j],\n      ];\n    }\n  }\n}\n`;function p(i){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",h3:\"h3\",ol:\"ol\",code:\"code\",strong:\"strong\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"1. Rotating Group of Four Cells\"}),`\n`,(0,t.jsx)(e.p,{children:\"The task involves rotating a square matrix 90 degrees clockwise in place. This means the transformation must not use additional memory for another matrix. The solution uses a group rotation approach to move values within each layer of the matrix.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The intuition is that for a 90-degree clockwise rotation:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"The element at the top-left corner moves to the top-right.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The top-right element moves to the bottom-right.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The bottom-right element moves to the bottom-left.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The bottom-left element moves to the top-left.\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"This transformation can be achieved by iterating through the matrix layer by layer. Each layer represents a set of nested squares, starting from the outermost layer and moving towards the center. For each layer, elements are swapped in groups of four, effectively performing the rotation without additional memory usage.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Get the size of the matrix \",(0,t.jsx)(e.code,{children:\"n\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through the matrix by layers:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The outer loop processes each layer from the outside to the center. The number of layers is \",(0,t.jsx)(e.code,{children:\"Math.floor((n + 1) / 2)\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The inner loop processes the elements within a layer. The number of elements in each layer is determined by \",(0,t.jsx)(e.code,{children:\"Math.floor(n / 2)\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"For each group of four cells in the current layer:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Temporarily store the top-left element.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Move the bottom-left element to the top-left position.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Move the bottom-right element to the bottom-left position.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Move the top-right element to the bottom-right position.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Assign the stored top-left value to the top-right position.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.li,{children:\"Repeat the process for all layers.\"}),`\n`]}),`\n`,(0,t.jsx)(l,{children:m}),`\n`,(0,t.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:[\"Time complexity: O(n\",(0,t.jsx)(\"sup\",{children:\"2\"}),\")\"]}),\". Each element in the matrix is visited once during the layer-wise traversal.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Space complexity: O(1)\"}),\". The rotation is performed in place without using additional memory.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"2. Using Transpose of Matrix\"}),`\n`,(0,t.jsx)(e.p,{children:\"The task involves rotating a square matrix 90 degrees clockwise in place. This transformation can be achieved in two steps: transposing the matrix and then reflecting it horizontally.\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Transpose\"}),\": The transpose operation swaps rows and columns by exchanging the element at position \",(0,t.jsx)(e.code,{children:\"(i, j)\"}),\" with the element at \",(0,t.jsx)(e.code,{children:\"(j, i)\"}),\". This step converts the rows of the original matrix into columns of the resulting matrix.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Reflect horizontally\"}),\": After transposing, reflecting the matrix horizontally swaps elements in each row, exchanging the leftmost elements with the rightmost ones. This completes the 90-degree clockwise rotation.\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"This approach efficiently manipulates the matrix in place without requiring additional space for another matrix.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Retrieve the size of the matrix \",(0,t.jsx)(e.code,{children:\"n\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Perform the transpose operation:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through each row \",(0,t.jsx)(e.code,{children:\"i\"}),\" of the matrix.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"For each row, iterate through columns \",(0,t.jsx)(e.code,{children:\"j\"}),\" where \",(0,t.jsx)(e.code,{children:\"j > i\"}),\" to avoid redundant swaps.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Swap the elements at \",(0,t.jsx)(e.code,{children:\"(i, j)\"}),\" and \",(0,t.jsx)(e.code,{children:\"(j, i)\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Perform the horizontal reflection:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through each row \",(0,t.jsx)(e.code,{children:\"i\"}),\" of the matrix.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"For each row, iterate through the first half of the columns \",(0,t.jsx)(e.code,{children:\"j\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Swap the elements at \",(0,t.jsx)(e.code,{children:\"(i, j)\"}),\" and \",(0,t.jsx)(e.code,{children:\"(i, n-1-j)\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.li,{children:\"The matrix is now rotated 90 degrees clockwise.\"}),`\n`]}),`\n`,(0,t.jsx)(l,{children:d}),`\n`,(0,t.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:[\"Time complexity: O(n\",(0,t.jsx)(\"sup\",{children:\"2\"}),\")\"]}),\". Both the transpose and reflection operations involve visiting each element of the matrix once.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Space complexity: O(1)\"}),\". The rotation is performed in place without using additional memory.\"]}),`\n`]})]})}function R(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(p,i)})):p(i)}var k=R;return T(O);})();\n;return Component;",
  "workspace": {
    "main": "/src/matrix-rotation.ts",
    "run": "/src/matrix-rotation.run.test.ts",
    "submit": "/src/matrix-rotation.submit.test.ts"
  }
}