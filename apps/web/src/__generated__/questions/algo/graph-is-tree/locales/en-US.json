{
  "description": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var d in e)i(r,d,{get:e[d],enumerable:!0})},o=(r,e,d,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!b.call(r,t)&&t!==d&&i(r,t,{get:()=>e[t],enumerable:!(c=m(e,t))||c.enumerable});return r};var v=(r,e,d)=>(d=r!=null?p(f(r)):{},o(e||!r||!r.__esModule?i(d,\"default\",{value:r,enumerable:!0}):d,r)),T=r=>o(i({},\"__esModule\",{value:!0}),r);var a=x((M,l)=>{l.exports=_jsx_runtime});var C={};y(C,{default:()=>A,frontmatter:()=>_});var n=v(a());var h=MDXTestExamples;var s=[{input:[[\"num\",5],[\"edges\",[[3,4],[0,3],[1,2],[0,1]]]],output:!0,explanation:\"The graph consists of 5 nodes (0, 1, 2, 3, 4) connected by 4 edges. All nodes are reachable from any other node, and there are no cycles. The graph has exactly num - 1 = 4 edges, satisfying the conditions for a valid tree.\"},{input:[[\"num\",5],[\"edges\",[[0,1],[1,2],[2,3],[3,4],[1,4]]]],output:!1,explanation:\"Although all nodes are connected, the graph contains a cycle (e.g., 1 -> 4 -> 3 -> 1), which violates the condition of being acyclic. Hence, the graph is not a valid tree.\"},{input:[[\"num\",3],[\"edges\",[[0,1]]]],output:!1,explanation:\"The graph consists of 3 nodes (0, 1, 2), but only 1 edge is provided. This leaves node 2 disconnected, violating the condition of being connected. Hence, the graph is not a valid tree.\"}];var _={title:\"Is the Graph a Tree\",excerpt:\"Implement a function to determine if a graph is a valid tree\"};function u(r){let e=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",a:\"a\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Consider a graph with \",(0,n.jsx)(e.code,{children:\"num\"}),\" nodes, labeled from \",(0,n.jsx)(e.code,{children:\"0\"}),\" to \",(0,n.jsx)(e.code,{children:\"num - 1\"}),\". Given \",(0,n.jsx)(e.code,{children:\"num\"}),\" and a list of edges where each \",(0,n.jsx)(e.code,{children:\"edges[i] = [a, b]\"}),\" represents an undirected connection between nodes \",(0,n.jsx)(e.code,{children:\"a\"}),\" and \",(0,n.jsx)(e.code,{children:\"b\"}),\", determine whether the provided edges form a valid tree.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Tree_(abstract_data_type)\",children:\"valid tree\"})}),\" is a connected, acyclic graph that spans all \",(0,n.jsx)(e.code,{children:\"num\"}),\" nodes. This means:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"All nodes must be reachable from any other node\"}),`\n`,(0,n.jsx)(e.li,{children:\"The graph must not contain any cycles\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"The graph must have exactly \",(0,n.jsx)(e.code,{children:\"num - 1\"}),\" edges, where \",(0,n.jsx)(e.code,{children:\"num\"}),\" is the number of nodes\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if the edges form a valid tree; otherwise, return \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"num: number\"}),\": Number of nodes in the graph\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"edges: Array<[number, number]>\"}),\": A 2D array where \",(0,n.jsx)(e.code,{children:\"edges[i] = [a, b]\"}),\" represents an undirected edge between nodes \",(0,n.jsx)(e.code,{children:\"a\"}),\" and \",(0,n.jsx)(e.code,{children:\"b\"})]}),`\n`]}),`\n`,(0,n.jsx)(h,{testCases:s}),`\n`,(0,n.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"1 <= \",(0,n.jsx)(e.code,{children:\"num\"}),\" <= 1000\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"1 <= \",(0,n.jsx)(e.code,{children:\"edges.length\"}),\" <= 1000\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"edges[i].length\"}),\" == 2\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"0 <= \",(0,n.jsx)(e.code,{children:\"a\"}),\", \",(0,n.jsx)(e.code,{children:\"b\"}),\" < \",(0,n.jsx)(e.code,{children:\"num\"})]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"a != b\"})}),`\n`,(0,n.jsx)(e.li,{children:\"There are no self-loops or repeated edges\"}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var A=j;return T(C);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a function to determine if a graph is a valid tree",
    "title": "Is the Graph a Tree"
  },
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var v=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),A=(r,e)=>{for(var i in e)o(r,i,{get:e[i],enumerable:!0})},a=(r,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!b.call(r,t)&&t!==i&&o(r,t,{get:()=>e[t],enumerable:!(d=m(e,t))||d.enumerable});return r};var w=(r,e,i)=>(i=r!=null?f(y(r)):{},a(e||!r||!r.__esModule?o(i,\"default\",{value:r,enumerable:!0}):i,r)),T=r=>a(o({},\"__esModule\",{value:!0}),r);var s=v((D,l)=>{l.exports=_jsx_runtime});var I={};A(I,{default:()=>k});var n=w(s());var c=MDXCodeBlock;var h=`// Create an adjacency list to represent the graph\nfunction createAdjacencyList(\n  num: number,\n  edges: Array<[number, number]>,\n): Map<number, number[]> {\n  const adjacencyList = new Map<number, number[]>();\n  for (let i = 0; i < num; i++) {\n    adjacencyList.set(i, []);\n  }\n  for (const edge of edges) {\n    adjacencyList.get(edge[0])!.push(edge[1]);\n    adjacencyList.get(edge[1])!.push(edge[0]);\n  }\n  return adjacencyList;\n}\n\n// Depth First Search (DFS) function\nfunction dfs(\n  node: number,\n  parent: number,\n  adjacencyList: Map<number, number[]>,\n  seen: Set<number>,\n): boolean {\n  if (seen.has(node)) return false;\n  seen.add(node);\n  for (const neighbor of adjacencyList.get(node)!) {\n    if (parent !== neighbor) {\n      const result = dfs(neighbor, node, adjacencyList, seen);\n      if (!result) return false;\n    }\n  }\n  return true;\n}\n\n// Main function to check if a given graph is a valid tree\nexport default function graphIsTree(\n  num: number,\n  edges: Array<[number, number]>,\n): boolean {\n  if (edges.length !== num - 1) {\n    return false;\n  }\n\n  const adjacencyList = createAdjacencyList(num, edges);\n  const seen = new Set<number>();\n\n  // We return true if no cycles were detected,\n  // AND the entire graph has been reached.\n  return dfs(0, -1, adjacencyList, seen) && seen.size === num;\n}\n`;var u=`// Union-Find data structure with path compression and union by size\nfunction createUnionFind(num: number) {\n  const parent: number[] = new Array(num);\n  const size: number[] = new Array(num);\n\n  for (let node = 0; node < num; node++) {\n    parent[node] = node;\n    size[node] = 1;\n  }\n\n  // Find method with path compression\n  const find = (A: number): number => {\n    let root = A;\n    while (parent[root] !== root) {\n      root = parent[root];\n    }\n    while (A !== root) {\n      const oldRoot = parent[A];\n      parent[A] = root;\n      A = oldRoot;\n    }\n    return root;\n  };\n\n  // Union method with union by size optimization\n  const union = (A: number, B: number): boolean => {\n    const rootA = find(A);\n    const rootB = find(B);\n\n    if (rootA === rootB) {\n      return false;\n    }\n\n    if (size[rootA] < size[rootB]) {\n      parent[rootA] = rootB;\n      size[rootB] += size[rootA];\n    } else {\n      parent[rootB] = rootA;\n      size[rootA] += size[rootB];\n    }\n    return true;\n  };\n\n  return { find, union };\n}\n\nexport default function graphIsTree(\n  num: number,\n  edges: Array<[number, number]>,\n): boolean {\n  // Condition 1: The graph must contain num - 1 edges.\n  if (edges.length !== num - 1) {\n    return false;\n  }\n\n  // Condition 2: The graph must contain a single connected component.\n  const { union } = createUnionFind(num);\n\n  // Add each edge. Check if a merge happened, because if it didn't, there must be a cycle.\n  for (const edge of edges) {\n    const [A, B] = edge;\n    if (!union(A, B)) {\n      return false;\n    }\n  }\n\n  // If we got this far, there are no cycles.\n  return true;\n}\n`;function p(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\",strong:\"strong\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"1. Graph Theory And DFS\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The problem is to determine whether a given undirected graph is a valid tree. A tree is defined as a connected graph with no cycles and exactly \",(0,n.jsx)(e.code,{children:\"n - 1\"}),\" edges for \",(0,n.jsx)(e.code,{children:\"n\"}),\" nodes.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The intuition behind the solution is to verify two key properties:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The graph should be connected, meaning all nodes must be reachable starting from any node.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The graph should have no cycles.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A depth-first search (DFS) is used to traverse the graph while detecting cycles. The traversal starts from a single node, marking nodes as visited in a \",(0,n.jsx)(e.code,{children:\"Set\"}),\". During traversal, if a node is revisited (excluding the parent node in the traversal), a cycle is detected. Additionally, the number of edges is checked to ensure it is exactly \",(0,n.jsx)(e.code,{children:\"n - 1\"}),\", as this is a necessary condition for a valid tree.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This approach avoids redundant checks by combining the cycle detection and connectivity verification in a single DFS traversal.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Check if the number of edges is not equal to \",(0,n.jsx)(e.code,{children:\"num - 1\"}),\". If so, return \",(0,n.jsx)(e.code,{children:\"false\"}),\" because the graph cannot be a tree.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Create an adjacency list to represent the graph:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" where each node points to an empty array.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Populate the adjacency list by adding both endpoints of each edge to each other's neighbor list.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize an empty \",(0,n.jsx)(e.code,{children:\"Set\"}),\" called \",(0,n.jsx)(e.code,{children:\"seen\"}),\" to track visited nodes during traversal.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Define a recursive \",(0,n.jsx)(e.code,{children:\"dfs\"}),\" function:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If the current node is already in \",(0,n.jsx)(e.code,{children:\"seen\"}),\", return \",(0,n.jsx)(e.code,{children:\"false\"}),\" as this indicates a cycle.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Add the current node to \",(0,n.jsx)(e.code,{children:\"seen\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"For each neighbor of the current node:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Skip the parent node to avoid false-positive cycle detection.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Recursively call \",(0,n.jsx)(e.code,{children:\"dfs\"}),\" on the neighbor. If any recursive call detects a cycle, return \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"true\"}),\" after all neighbors are processed.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Call \",(0,n.jsx)(e.code,{children:\"dfs\"}),\" starting from node \",(0,n.jsx)(e.code,{children:\"0\"}),\" with \",(0,n.jsx)(e.code,{children:\"-1\"}),\" as the parent.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Verify the graph is connected by checking if the size of \",(0,n.jsx)(e.code,{children:\"seen\"}),\" is equal to \",(0,n.jsx)(e.code,{children:\"num\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if no cycles were detected and the graph is connected.\"]}),`\n`]}),`\n`,(0,n.jsx)(c,{children:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Time complexity: O(v + e)\"}),\". Each node (\",(0,n.jsx)(e.code,{children:\"v\"}),\") and edge (\",(0,n.jsx)(e.code,{children:\"e\"}),\") is visited once during the DFS traversal.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(v)\"}),\". The \",(0,n.jsx)(e.code,{children:\"seen\"}),\" set and adjacency list require space proportional to the number of nodes.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"2. Graph Theory And Union\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The problem is to determine whether a given undirected graph is a valid tree. A tree is a connected graph with no cycles and exactly \",(0,n.jsx)(e.code,{children:\"n - 1\"}),\" edges for \",(0,n.jsx)(e.code,{children:\"n\"}),\" nodes.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The union-find data structure is used to efficiently track connected components and detect cycles. Initially, each node is treated as its own component. The \",(0,n.jsx)(e.code,{children:\"union\"}),\" operation merges components when an edge connects two nodes, while the \",(0,n.jsx)(e.code,{children:\"find\"}),\" operation ensures efficient lookups for a node's component using path compression. If an edge connects two nodes already in the same component, a cycle is detected. Additionally, the graph must have exactly \",(0,n.jsx)(e.code,{children:\"n - 1\"}),\" edges for it to be a single connected component.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This approach eliminates redundant traversal of nodes and edges by directly managing the relationships between components using efficient union-find operations.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Check if the number of edges is not equal to \",(0,n.jsx)(e.code,{children:\"num - 1\"}),\". If so, return \",(0,n.jsx)(e.code,{children:\"false\"}),\" because the graph cannot be a tree.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize the union-find data structure:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Create an array \",(0,n.jsx)(e.code,{children:\"parent\"}),\" where each node is its own parent initially.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Create an array \",(0,n.jsx)(e.code,{children:\"size\"}),\" to track the size of each component, initializing all sizes to \",(0,n.jsx)(e.code,{children:\"1\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Define the \",(0,n.jsx)(e.code,{children:\"find\"}),\" function:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Traverse up the parent pointers until the root of the component is reached.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Apply path compression by making all nodes on the path point directly to the root.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Define the \",(0,n.jsx)(e.code,{children:\"union\"}),\" function:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use the \",(0,n.jsx)(e.code,{children:\"find\"}),\" function to determine the root components of the two nodes.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the roots are the same, a cycle is detected. Return \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Otherwise, merge the smaller component into the larger one and update the size.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through the list of edges:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use the \",(0,n.jsx)(e.code,{children:\"union\"}),\" function to merge the nodes connected by each edge.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If a cycle is detected during the process, return \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If no cycles are detected and the graph has \",(0,n.jsx)(e.code,{children:\"n - 1\"}),\" edges, return \",(0,n.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(c,{children:u}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Time complexity: O(e.\\u03B1(v))\"}),\". The \",(0,n.jsx)(e.code,{children:\"union\"}),\" and \",(0,n.jsx)(e.code,{children:\"find\"}),\" operations are nearly constant time due to path compression and union by size, where \\u03B1(v) is the inverse Ackermann function.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(v)\"}),\". The \",(0,n.jsx)(e.code,{children:\"parent\"}),\" and \",(0,n.jsx)(e.code,{children:\"size\"}),\" arrays require space proportional to the number of nodes (\",(0,n.jsx)(e.code,{children:\"v\"}),\").\"]}),`\n`]})]})}function x(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(p,r)})):p(r)}var k=x;return T(I);})();\n;return Component;"
}