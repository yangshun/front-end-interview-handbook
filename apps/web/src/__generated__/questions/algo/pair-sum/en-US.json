{
  "description": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},o=(t,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!f.call(t,i)&&i!==r&&s(t,i,{get:()=>e[i],enumerable:!(l=p(e,i))||l.enumerable});return t};var j=(t,e,r)=>(r=t!=null?m(b(t)):{},o(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),y=t=>o(s({},\"__esModule\",{value:!0}),t);var c=x((v,a)=>{a.exports=_jsx_runtime});var D={};w(D,{default:()=>M,frontmatter:()=>T});var n=j(c());var u=MDXTestExamples;var h=[{input:[[\"numbers\",[0,7,1,9]],[\"target\",7]],output:[0,1],explanation:\"numbers[0] plus numbers[1] = 7 which is target\"},{input:[[\"numbers\",[4,9,2,1,7]],[\"target\",5]],output:[0,3],explanation:\"numbers[3] plus numbers[0] = 5 which is target\"},{input:[[\"numbers\",[4,4]],[\"target\",8]],output:[0,1]}];var T={title:\"Pair sum\",excerpt:\"Implement a function to find two numbers within an array of integers that add up to a target integer\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Given an array of integers \",(0,n.jsx)(e.code,{children:\"numbers\"}),\", write a function that returns the indices of two integers within the \",(0,n.jsx)(e.code,{children:\"numbers\"}),\" array that sum up to a \",(0,n.jsx)(e.code,{children:\"target\"}),\" integer. The smaller index should appear first.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"numbers: number[]\"}),\": An array of integers\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"target: number\"}),\": An integer\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"There will always be exactly one solution for the given input\"}),`\n`,(0,n.jsx)(e.li,{children:\"The same element should not be used more than once\"}),`\n`]}),`\n`,(0,n.jsx)(u,{testCases:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"2 <= \",(0,n.jsx)(e.code,{children:\"numbers.length\"}),\" <= 100\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"-1000 <= \",(0,n.jsx)(e.code,{children:\"numbers[i]\"}),\" <= 1000\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"-1000 <= \",(0,n.jsx)(e.code,{children:\"target\"}),\" <= 1000\"]}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var M=C;return y(D);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/pair-sum\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/pair-sum.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/pair-sum.run.test.ts": "import fn from './pair-sum';\nimport runTestCases from './run.tests.json';\n\ndescribe('pairSum', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = [${example.input[0][1]}] ${example.input[1][0]} = ${example.input[1][1]}`, () => {\n      expect(fn(example.input[0][1], example.input[1][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/pair-sum.submit.test.ts": "import pairSum from './pair-sum';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('pairSum', () => {\n  submitTestCases.forEach((example: any) => {\n    test(`numbers = [${example.input[0][1]}] target = ${example.input[1][1]}`, () => {\n      expect(pairSum(example.input[0][1], example.input[1][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/pair-sum.ts": "export default function pairSum(numbers: number[], target: number): number[] {\n  const hash: { [key: number]: number } = {};\n\n  for (let i = 0; i < numbers.length; i++) {\n    const complement = target - numbers[i];\n\n    // Check if the complement exists (excluding the current element)\n    if (hash.hasOwnProperty(complement) && hash[complement] !== i) {\n      return [hash[complement], i];\n    }\n\n    // Store the number and its index in the hash map\n    hash[numbers[i]] = i;\n  }\n\n  // No solution found\n  return [];\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [\n      [\"numbers\", [0, 7, 1, 9]],\n      [\"target\", 7]\n    ],\n    \"output\": [0, 1],\n    \"explanation\": \"numbers[0] plus numbers[1] = 7 which is target\"\n  },\n  {\n    \"input\": [\n      [\"numbers\", [4, 9, 2, 1, 7]],\n      [\"target\", 5]\n    ],\n    \"output\": [0, 3],\n    \"explanation\": \"numbers[3] plus numbers[0] = 5 which is target\"\n  },\n  {\n    \"input\": [\n      [\"numbers\", [4, 4]],\n      [\"target\", 8]\n    ],\n    \"output\": [0, 1]\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [\n      [\"numbers\", [3, 9, 7, 1, -4, 8, 8, 8, 3]],\n      [\"target\", 3]\n    ],\n    \"output\": [2, 4]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [8, 3, 5, 9, 1, 2, 5, 3]],\n      [\"target\", 9]\n    ],\n    \"output\": [0, 4]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [7, 6, 2, 4, 1, 5, 6, 7, 7]],\n      [\"target\", 3]\n    ],\n    \"output\": [2, 4]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [5, 3, 9, 5, 1, 6, 3]],\n      [\"target\", 7]\n    ],\n    \"output\": [4, 5]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [1, 7, 9, 7, 6, 7, 3, 1, 4]],\n      [\"target\", 9]\n    ],\n    \"output\": [4, 6]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [2, 8, 6, 10]],\n      [\"target\", 10]\n    ],\n    \"output\": [0, 1]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [8, -6]],\n      [\"target\", 2]\n    ],\n    \"output\": [0, 1]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [1, 5, 2, -1, 5, 5, 5, 3]],\n      [\"target\", 2]\n    ],\n    \"output\": [3, 7]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [5, 10, 9, 1, 6, 3]],\n      [\"target\", 9]\n    ],\n    \"output\": [4, 5]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [8, -1, 10]],\n      [\"target\", 9]\n    ],\n    \"output\": [1, 2]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          339, 627, 113, 533, 279, 373, -594, -85, 992, 289, 116, 385, -540,\n          -782, -214, -292, 767, -845, -799, -104, 91, 427, 95, -503, -985, 615,\n          788, 774, 91, 907, 298, 480, -172, -1913, -600, 280, -59, 184, 720,\n          -683, 359, 912, -920, -664, -117, 837, -649, -15, 395, 455, -843, 432,\n          46, 927, 293\n        ]\n      ],\n      [\"target\", -921]\n    ],\n    \"output\": [8, 33]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          175, -773, 279, 741, -397, -377, -947, -520, 31, 995, 550, -267, -944,\n          893, 795, 696, 804, 138, 702, -800, 676, 566, -985, -183, 149, -914,\n          -312, -120, 720, -86, 457, -1341, 792, -569, -859, -540, -115, 892,\n          -409, -83, -235, 218, -306, 626, -562, -72, -156, -16, 381, 346, -491,\n          -915, 505, -17, 680, -903, -26, 608, -81\n        ]\n      ],\n      [\"target\", -549]\n    ],\n    \"output\": [31, 32]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          32, 93, -228, 938, -989, -322, -122, -752, -233, 214, 815, -972, -225,\n          786, 225, -85, -333, -241, 21, 117, 113, -520, -671, 66, -899, -646,\n          536, -355, -460, -701, 149, 618, 414, 601, 291, -860, -721, -295, 884,\n          169, 505, 606, 801, 454, 235, 916, -309, -654, -242, 109, 152, 171,\n          -893, 782, -599, -648, 679, 466, 542, 503, -837, -192, -749, 915,\n          -126, 620, 516, -148, 620, -786, -919, 95, -665, -744, -360, 527, 884,\n          772, 267, 19, -312, -230\n        ]\n      ],\n      [\"target\", -562]\n    ],\n    \"output\": [22, 49]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -214, 633, 607, 829, -22, -48, -173, 957, -3, 313, 602, -35, -438,\n          -370, -687, 355, -327, 453, 80, -856, -681, -240, -26, -820, -507,\n          -494, 227, 868, -979, -302, -112, -790, 657, -937, 642, -479, -165,\n          637, -153, 668, 319, 590, -105, -538, 741, 515, 803, 23, 217, -679,\n          -149, 595, 570, -422, -724, 971, -51, -599, -773, 257, -613, -669\n        ]\n      ],\n      [\"target\", 371]\n    ],\n    \"output\": [13, 44]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [912, -992, 27]],\n      [\"target\", 939]\n    ],\n    \"output\": [0, 2]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          415, -412, -45, -252, 876, 356, -430, 45, -208, -963, -536, -817, 672,\n          516, 478, 653, -496, 47, 711, 366, 278, 842, 159, 341, 112, -831, 954\n        ]\n      ],\n      [\"target\", -447]\n    ],\n    \"output\": [9, 13]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          926, 264, 29, 840, 400, -816, 869, 37, 913, 497, 776, -956, -543, 754,\n          -662, 825, -895, -108, -743, 545, 769, -349, 947, 674, 81, 184, -61,\n          700, -983, -633, 568, -127, -509, 500, 309, 284, 42, 619, 449, 271,\n          -642, 831, 134, 317, 294, -171, 910, -737, 827, -4, 510, 542, -635,\n          -540, -375, 460, 56, -569, 660, 226, 106, 139, 282, 126, 181, -446,\n          -822, 141, 595, -773, 805, -131, 932, -778, 874, 651, -668, 901, 682,\n          -98, -197, 790, 279, 854, -721, -746, -943, 813\n        ]\n      ],\n      [\"target\", -570]\n    ],\n    \"output\": [26, 32]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [-903, 292, 928, 103, 850, -389, 971, -777, -898, 781, 839, -659]\n      ],\n      [\"target\", 122]\n    ],\n    \"output\": [9, 11]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -559, 489, -522, -45, 229, -53, 599, -843, -311, -717, 198, 104, -542,\n          541, 525, 745, 992, -560, -349, -979, -686, 819, -405, -842, 621, 361,\n          -46, 354, 851, -666, 947, 556, -318, -584, 568, 530, -771, 362, 625,\n          412, 454, 557, 199, -656\n        ]\n      ],\n      [\"target\", -95]\n    ],\n    \"output\": [1, 33]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -509, -621, 736, 575, -382, 524, 268, -324, -29, -624, -6, -556, -441,\n          -73, 34, 605, 191, 978, 243, 652, 811, -992, -53, 0, 770, -741, 231,\n          -307, 638, -432, -807, -725, 487, 443, -8, 801, 687, 57, -106, -194,\n          -836, -669, -14, -341, 328, 47, -884, 651, 501, -646, 361, 174, 593,\n          -109, 919, -776, 236, -637, -701, 950, 487, -916, 37, 87, 13, 305,\n          -149, 861, -163, -77, -18, 843, 148, -11, 968, 99, 791, -24, -802,\n          -552, 832, -842, -516, -804, -138, -756, 667\n        ]\n      ],\n      [\"target\", -418]\n    ],\n    \"output\": [43, 69]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          871, -158, -975, -980, 306, -722, 244, -480, -622, -829, 265, 591,\n          -808, -403, 246, -875, 350, 423, 158, -104, 61, 842, 258, -350, 936,\n          997, -652, 881, 141, 357, 580, -414, -674, -927, -391, 114, -822,\n          -106, -2, 99, 739, -137, -869, -496, 378, -374, -967, -613, 572, -718,\n          466, 373, -288, 312, 570, 601, 20, -375, 630, 228, -528, -599, -198,\n          -469, 48, -95, -923, -672, -407, -247, 293\n        ]\n      ],\n      [\"target\", 418]\n    ],\n    \"output\": [20, 29]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          406, 9, -346, 462, 368, 96, -91, 572, -662, 812, 67, 778, -637, 404,\n          -602, 333, 720, -659, -110, -384, 783, -909, -1234, -247, -793, 201,\n          551, -805, -844, 666, -212, -147\n        ]\n      ],\n      [\"target\", -901]\n    ],\n    \"output\": [15, 22]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -252, 845, -98, 380, -193, 62, -208, 753, 740, 865, -165, -760, 248,\n          300, 982, -882, 728, -718, 717, -330, -359, -518, -48, 733, -206, 811,\n          795, 171, -616, -589, 463, -136, 230, -979, -418, 221, -836, -355,\n          977, -350, -256, 962, 411, 988\n        ]\n      ],\n      [\"target\", -179]\n    ],\n    \"output\": [27, 39]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          205, -921, -711, -739, -372, -147, -15, 663, 819, 633, -987, 497,\n          -811, -748, -79, 2, -856, -185, 82, 891, -24, -452, 673, -149, -458,\n          -566, -197, 747, 79, 746, -658, 700, -872, 367\n        ]\n      ],\n      [\"target\", -854]\n    ],\n    \"output\": [15, 16]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -432, -659, -154, -249, -3, -222, 757, -849, -185, -773, -190, -457,\n          -982, 575, 173, 136, -62, -775, 126, -1031, -30, 419, -830, 663, -947,\n          243, 319, 88, 964, -655, -219, -231, -358, 824, -922, -459, -83, -139,\n          -550, -968, 64, -430, -150, -79, 234, 402, 118, 380, 322, -556, -250,\n          480\n        ]\n      ],\n      [\"target\", -551]\n    ],\n    \"output\": [19, 51]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          459, -657, 981, 874, -4, 806, -999, 854, 298, -836, -758, 752, -482,\n          28, 724, -849, 231, -787, 621, -377, -664, -712, 389, -858, 314, 725,\n          -812, 592, -580, 355, -205, -390, 397, 488, -500, -516, -989, -462,\n          257, -565, -441, 113, 532, 583, 674, 252, -886, -728, 748, -193, 786,\n          -862, -654, -561, -613, -413, -308, 23, -945, 459, -589, 684, -733,\n          -313, 504, 685, -566, -89, 528, 250, 96, 803, -582, -726, -509, 477,\n          687, -271, 145, 877, 582, 652, 521, 894, -114\n        ]\n      ],\n      [\"target\", -789]\n    ],\n    \"output\": [26, 57]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          975, -829, -515, -194, 442, 455, -636, 360, -214, 708, 902, 316, -334,\n          -772, 282, 523, 399, -34, -96, 316, 891, 958, -48, -711, -593, -896,\n          -580, 548, -251, 569, -385, -759, -856, 663, 839, 901, -234, -644,\n          -152, 128, 97, 135, 14, -931, -563, 243, 587, 517, -524, -157, -241,\n          584, 741, 335, 134, 500, 895, 824, -487, 742, 920, 910, 386, -935,\n          819, -430, 706, 508, 30, 479, -541, -321, 806, 398, 433, 744, 319,\n          -464, -38, -80, -727, 313, -435, 392, 816, 221, 321, -990, 522, -352,\n          430\n        ]\n      ],\n      [\"target\", 777]\n    ],\n    \"output\": [4, 53]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          826, -724, -101, -789, -933, 889, -424, -748, 657, 554, -211, 322,\n          -23, 52, -459, 710, 814, -151, -955, -474, -256, 660, 168, -32, -723,\n          676, -737, -643, 460, -327, 335, -628, 955, 15, -584, -24, -833, -355,\n          829, 342, 153, 933, 116\n        ]\n      ],\n      [\"target\", 202]\n    ],\n    \"output\": [19, 25]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [-104, 415, -990, 936, 36, 635, -417, -323, -883, 171, -336, 608]\n      ],\n      [\"target\", 644]\n    ],\n    \"output\": [4, 11]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -699, 261, 881, 210, -526, 347, 85, -557, 233, 177, -937, 474, -999,\n          -110, -625, -545, -711, 831, 201, 596, 620, 566, 942, -668, 817, -654,\n          -483, 842, -621, 718, 389, 600, 950, 274, 499, 266, -666, -360, 214,\n          -271, 830, 914, 310\n        ]\n      ],\n      [\"target\", 276]\n    ],\n    \"output\": [22, 36]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          58, 932, 159, -472, 245, -238, -403, 870, -434, 669, -45, 441, 366,\n          280, -877, -88, 957, -852, 1412, -155, 623, 518, 668, 248, -473, 186,\n          -904, -900, 130, 214, -610, 476, -752, -75, 776, 183, -468, -171, 371,\n          477, -142\n        ]\n      ],\n      [\"target\", 512]\n    ],\n    \"output\": [18, 27]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          296, -489, -120, -854, 643, 372, 792, -738, -217, 201, -500, 214,\n          -781, 868, 127, -914, 673, -477, -214, 54, 481, -908, -38, 904, 891,\n          -262, -507, -269, 90, 27, 562, 795, -287, -562, -382, 194, -400, 713,\n          -25, 117, 82, -299, -623, -485, -965, -656, -675, -792, 842, 147,\n          -272, -636, -369, -281, 110, 936, 596, -527, -251, 599, -714, -116,\n          310, -397, 110, -726, -269, 690, -858, 334, 710, 823, -331, 500, -587,\n          -100, -828, -949, 764, 662, 449, -654, -352, -982, -939, 441, 993,\n          375, -604\n        ]\n      ],\n      [\"target\", 138]\n    ],\n    \"output\": [6, 81]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          885, -309, -744, 227, 491, -391, -798, -500, -405, 51, -183, -122,\n          -240, -964, -275, 34, 621, -443, 742, 853, -397, -421, -590, 914,\n          -362, -976, 102, 55, -826, -672, 488, 140\n        ]\n      ],\n      [\"target\", 848]\n    ],\n    \"output\": [3, 16]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -786, 879, -414, 968, 924, -346, -418, -123, 147, 996, -955, -668,\n          -85, -678, -716, -715, 1179, -64, -184, -225, -730, -853, -369, -21,\n          679, -867, 340, 851, -256\n        ]\n      ],\n      [\"target\", 833]\n    ],\n    \"output\": [5, 16]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -415, 243, 346, -777, 665, -512, -145, -169, 464, -603, -439, -51,\n          714, -417, -617, -207, -524, -309, 836, 311, -488, 228, 34, 517, -256,\n          0, 464, -79, -791, -759, 929, 19, -842, 292, 670, -39, -835, 937,\n          -718, 568, -980, 646, 47, 690, -173, 284, 888, -621, -781, -964, -495,\n          333, -42, 56, -916, 948, 920, 806, -715, 178, -758, 729, -865, 686,\n          165, 75, 921, 788, 90, 980, 380, 20, 596, -709, -991, 499, 412, 627,\n          -64\n        ]\n      ],\n      [\"target\", -380]\n    ],\n    \"output\": [15, 44]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -884, 441, 149, -780, -510, 685, 588, -249, -784, 860, -113, 226, 992,\n          -533, 742, 132, -185, 159, 67, -858, -977, -884, 813, 295, 323, 279,\n          -656, -581, -708, 912, -459, -171, 360, 621, 993, 316, -96, 78, 644,\n          -904, 33, 5, -223, 63, -81, 945, 924, -668, -918, -716, 324, 963,\n          -774, 831, -448, -296, 281, -898, 42, -338, 272, 331, -674, -147,\n          -202, 161, -624, 454, -947, -842, 844, 137, -781, -139, -95, -429,\n          803, -238, -968, 721, -105, 523, -138, 989, -877, 964, 357\n        ]\n      ],\n      [\"target\", -512]\n    ],\n    \"output\": [8, 60]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [587, 220, 705, 683, -868]],\n      [\"target\", -648]\n    ],\n    \"output\": [1, 4]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          608, 991, 100, -635, 191, -154, 350, -566, -473, 966, -223, -780, -89,\n          63, 28, -437, -195, -430, -93, -717, 192, -405, -928, 624, -547, -267,\n          617, 502, 317, 75, -336, -396, 283, 147, -887, 280, 48, -963, -178,\n          578, 265, 458, 431, -922, 689\n        ]\n      ],\n      [\"target\", -115]\n    ],\n    \"output\": [13, 38]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -985, 285, -724, 857, -554, -704, -559, -539, -886, -496, -740, 548,\n          461, -424, -139, -857, 309, -962, -971, -369, 90, -823, -107, -686,\n          -792, 68, 977, 366, 853, -158, -934, -205, 515, 901, 557, -189, -310,\n          -258, -243\n        ]\n      ],\n      [\"target\", 153]\n    ],\n    \"output\": [3, 5]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -177, 182, 813, 378, 863, -70, 920, 1045, -588, 883, 65, 628, -844,\n          -259, -493, -400, 944, -507, -904, -723, -544, 260, 631, -755, -939,\n          448, 573, 481, -843, 841, 381, 756, 314, -937, -12, -204, -516, 458,\n          -969, 665, -916, -16, 280, -818, 354, 927, 350, 826, 352, 914, -40,\n          438, -466, 546\n        ]\n      ],\n      [\"target\", 227]\n    ],\n    \"output\": [7, 43]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          802, 444, -717, -559, -156, 709, 427, -515, 885, -330, 812, 599, -710,\n          -786, 557, -680, 569, -181, 46, -907, 935, 187, -957, 943, 567, -85,\n          -703, 547, 358, -732, -61, 506, -492, -670, -414, -549, -557, 83, 681,\n          927, -739, -909, -903, -232, 1, 900, 622, -272, -490, -334, 434, -704,\n          874, -330, 400, -955, -90, 475, 437, -4, -788, -651, -577, -146, 710,\n          489, -661, -833, -474, -455, 20, -367, 216, -839, 616, -645, -300,\n          -830, 214, -925, -6, -194, -147, 72, -672, -466, 421, -736, 195, 673,\n          -415, -664, 812, -679, 121, -271, -311\n        ]\n      ],\n      [\"target\", -609]\n    ],\n    \"output\": [81, 90]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          30, -157, -635, -904, -221, -731, -558, -590, 977, -82, -283, -220,\n          -513, -309, 723, 510, 412, -435, -22, -714, 609, 956, -277, 827, 774,\n          -769, 811, -439, -60, -276\n        ]\n      ],\n      [\"target\", -295]\n    ],\n    \"output\": [3, 20]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          299, -276, -613, -782, 441, -264, 197, 78, -166, 307, 574, -618, -722,\n          802, -364, -81, 129, 552, -96, -86, -315, 351, -540, -925, 837, 33,\n          -568, 234, 27, -796, 924, -220, -718, -799, -189, 5, -303, 836, -426,\n          143, -188, 124, 574, 484, 899, 388, 329, 587, -667, -821, 583, 927,\n          20, 798, 915, -401, 581, 879, -582, -337, -371, 397, -463, -800, 431,\n          -640, 218, 250, 780, -314, -29, -3, -296, 98\n        ]\n      ],\n      [\"target\", -735]\n    ],\n    \"output\": [14, 60]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          378, -247, -840, -9, -12, 296, -433, -599, 952, -628, -436, -700,\n          -414, 573, -817, 336, -395, -790, -539, -285, -305, -650, 949, 199,\n          877, -740, -659, -529, -257, -480, 471, 148, 480, -176, -902, -114,\n          -431, -923, 383, 812, 256, -122, 404, 328, -581, -418, 932, -893, 930,\n          -880, -539, 973, -107, 452, 533, -219, 496, 633, 231, -494, 34, 151,\n          483, -234, -309\n        ]\n      ],\n      [\"target\", -140]\n    ],\n    \"output\": [5, 10]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          42, 730, -282, -524, 635, -118, -468, 257, 774, 961, 576, 490, -597,\n          807, 680, -706, 934, 926, 355, 799, 942, -839, -288, -398, 640, 571,\n          880, -124, -679, -452, -687, 444, 750, 123, -50, 417, -101, 466, 52,\n          -428, 393, 119, 171, 849, -201, 940, 948, 433, 922, 224, -107, 503,\n          428, -740, 541, 113, -801, 797, 980, -600, 287, -564, -40, 821, 531,\n          322, 786\n        ]\n      ],\n      [\"target\", 75]\n    ],\n    \"output\": [39, 51]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -731, -330, 132, 857, -411, 768, 903, -544, -134, 232, -657, -578, 58,\n          -971, 578, -672, -831, 922, -407, -338, 396, 507, -910, -657, 831,\n          1141, 889, -173, 220, 253, -665, -891, 307, 153, 477, -760, -165,\n          -573, 563, -69, 629, 622, -14, 503, -256, 903, 247, 540, 825, -259,\n          55, 123, 11, -960, 177, 885, -45, -368, 93, -753, -33, -303, 18, 282,\n          -163, 285, -988, 591, 259, 578, -242\n        ]\n      ],\n      [\"target\", 563]\n    ],\n    \"output\": [11, 25]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          979, 250, -822, -238, 944, 639, -195, -674, -361, 974, -118, -634,\n          -507, -371, 851, 761, -9, -699, -485, -933, -492, 615, -225, 343, 158,\n          -499, 721, -347, -457, 289, -123, 381, -581, 226, 735, -655, 993, 886,\n          534, 252, 210, 10, -71, -533, -917, -652, -487, -139, -907, -872,\n          -439, -710, -813, 799, 388, 54, 721, -292, -863, -541, -150, -48,\n          -637, 487, 436, -260, 210, 524, 789, -233, -513, -53, -22, 730, -57,\n          696, -788, -666, -320, 862, 752, -109, -360, -536, -844, -140, -680,\n          966, 780, -350, 484, 793, 998, -896, -996, -864, -657, 603\n        ]\n      ],\n      [\"target\", 380]\n    ],\n    \"output\": [73, 89]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          704, -673, -840, -228, -436, 412, 524, -475, 179, 111, 713, -211,\n          -929, 112, -117, 196, -841, -540, -715, 825, 616, -341, -562, 745,\n          914, 678, -27, -292\n        ]\n      ],\n      [\"target\", 608]\n    ],\n    \"output\": [5, 15]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -834, -675, -164, -559, -310, 768, 978, 545, 575, 924, -982, -849,\n          743, -526, 920, 550, -906, 334, -167, -380, -834, 739, 631, -660, -60,\n          709, 457, -435, 375, -154, 766, 644, 21, 729, 400, 441, -718, -958,\n          -774, -463, -989, -142, 541, -738, 503, -530, 542, 943, 721, -129,\n          923, -710, -88, 208, 747, 885, 134, 919, -196, 48, -747, -350, -580,\n          875, -767, -931, 501, -729, -662\n        ]\n      ],\n      [\"target\", -365]\n    ],\n    \"output\": [16, 42]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          325, -330, -439, 371, -944, -412, 473, 991, 936, -122, -783, 506, 542,\n          261, -139, 689, -773, -524, 690, 972, -970, 911, -481, -423, -986,\n          702, -772, -372, 425, -691, -637, -444, 209, 931, -176, -567, -486,\n          840, 910, -243, -310, -750, 857, -229, -594, -464, -891, -928, -645,\n          134, -575, -466, -976, 232, 280\n        ]\n      ],\n      [\"target\", -78]\n    ],\n    \"output\": [40, 53]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          720, -990, -370, 214, 942, -532, -65, -947, -113, 177, 510, 148, -51,\n          69, -688, 80, 40, 270, 194, 346, 517, -417, 60, 517, -92, -12, 433, 4,\n          444, -696, 262, -147, 47, -362, -704, -322, 564, -613, 568, -263, 221,\n          -160, 784, 634, 218, -451, -517, 719, 233, 477, -685, -802, -601, 186,\n          -978, 823, -482, 218, 256, 370, 508, -846, 852, -345, -67, 686, -154,\n          844, 394, -742, 551, -170, 224, 233, -76, -311, -79, -795, -941, 451,\n          -773, 89, -76, 388, -353, 175, -676, -86, 478\n        ]\n      ],\n      [\"target\", 343]\n    ],\n    \"output\": [12, 68]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [-107, -566, -600, -897]],\n      [\"target\", -707]\n    ],\n    \"output\": [0, 2]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -778, -498, -258, 665, 474, 751, -871, -158, 925, -958, 876, 529,\n          -119, -686, -565, 970, -297, 15, 57, -647, 422, 785, -669, -918, -87,\n          140, 152, -779, -185, -69, -640, -437, -634, 501, -700, 750, 289,\n          -639, 338, -238, -308, -184, 502, 3, -145, -900, 179, -511, -288,\n          -760, -872, 720, 999, 660, 486, -874, -615, 156, -174, -567, 365, 807,\n          714, 938, 275, -861, 830, -986, 206, 146, -623, -638, 598, -404, -202,\n          3, 330, 425, 150, 49, -516, 208, 623, -693, -381\n        ]\n      ],\n      [\"target\", 673]\n    ],\n    \"output\": [15, 16]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [-686, -999, 119, -417, 88, -116, -631, -243, 656, -1490, 863, 159, 992]\n      ],\n      [\"target\", -627]\n    ],\n    \"output\": [9, 10]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          40, 148, -115, 944, 757, -622, 390, -158, -470, -568, 302, 859, -300,\n          972, -564, 734, -994, -126, 720, 774, 842, -437, 131, -828, -201,\n          -537, 277, -528, 881, 51, 255, 242, -200, -699, -646, 420, 681, 593,\n          -54, 148, 909, 329, -155, 60, -123, -350, 744, -90, -36, -632, -750,\n          -196, -214, 764, -375, 925, -829, 696, 636, -228, 624, -172, 849, -65,\n          223, 0, -662, 251, -118, 109, 991, 819, 285, -178, -727, -647\n        ]\n      ],\n      [\"target\", -195]\n    ],\n    \"output\": [21, 31]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -28, 298, 445, 567, 879, -896, -224, 579, 313, 688, 900, 60, -368,\n          -220, 807, -923, 86, 283, -70, -267, -392, 955, 704, -15, 84, -415,\n          339, -239, 663, 825, 819, -234, 978, -540, -991, 988, -488, -501, 555,\n          -985, -286, 77, -33, -978, 309, 953, 603, 490, -102, 574, -458, 242,\n          134, 886, 128, 529, -873, 911, -154, -454, -766, -178, 55, -775, 289,\n          140, -7, -533, 272, -605, -799, 85, 99, -720, 73, -206, -60, -359,\n          -239, -127, 650, 487, 395, 178, 138, 699, -134, 690, -737, 641, 759,\n          -762, 404, 538, 380, 891, 483\n        ]\n      ],\n      [\"target\", 746]\n    ],\n    \"output\": [10, 58]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          617, 689, 356, -504, 720, -395, -386, 5, 19, 559, 118, -853, 860,\n          -598, 394, 723, -554, -230, -1518, 109\n        ]\n      ],\n      [\"target\", -901]\n    ],\n    \"output\": [0, 18]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -457, 553, 980, -824, -18, 772, 907, 317, 847, -484, -320, -898, -408,\n          -230, -4, -433, -350, -716, 557, -47, 43, 436, 253, 487, -597, 176,\n          752, -495, -488, 59, -689, -329, 265, -645, 922, 681, 849, -526, -130,\n          103, -41, -131, 177, -852, -98, -196, 976, -367, 458, -723, 890, -186,\n          295, -893, 392, 412, 179, -894, 144, 790, -166, 478, -284, -376, 117,\n          -646, 609, 120, -28, 936, -638, 88, -771, -691, -382, -768, 883, 986,\n          937, -190, 671, -181, 116, 504, -584, 293, -374, 612, -3\n        ]\n      ],\n      [\"target\", -62]\n    ],\n    \"output\": [43, 59]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -148, -99, -994, 829, -758, -352, -455, 284, -523, -8, 737, -647, 544,\n          597, -537, -438, -692, -102, 697, -762, 163, -840, -291, -585, 607,\n          861, 4, 319, -673, -447, -734, -858, 946, 188, 339, 669, -826, 919,\n          122, -669, -91, 202, 519, 532, 251, -764, -366, -805, 818, 836, -5,\n          -42, -313, -410, 87, 747, -29, -649, 410, -674, 558, 325, -860, 929,\n          -925, -706, 371, -173, 442, 828, -35, -758, -441, 899, -249\n        ]\n      ],\n      [\"target\", -447]\n    ],\n    \"output\": [41, 57]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          60, 265, 580, 180, -18, 501, -258, -861, -588, 229, 157, -756, -29,\n          -496, -926, -803, 864, -830, 820, 900, 226, -72, -312, -264, -899,\n          584, 753, 860, -1171, -174, 278, -657, -977, 540, 622, 604, -501, 260,\n          374, 722, -313, -495, 480, -527, 284, 882, 701, -640, -364, 200, 741,\n          165, 845, 433, 769, -429, -573, 416, 836, 283, 256, -954, 820, 603,\n          -984, -589, 91, -109, -440, -658, 332, 638, -151, 606, -955, 467, 995,\n          -335\n        ]\n      ],\n      [\"target\", -418]\n    ],\n    \"output\": [26, 28]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -788, -679, 781, -597, -684, -866, -947, -906, -622, -536, -659, 581,\n          201, -720, -517, -171, -438, 460, -257, 808, -451, -802, -413, -217,\n          584, 686, -626, -354, 856, -418, -917, 7, -150, -250, 473, 495, -937,\n          -866, -390, 745, -833, -457, 899, 981, 133, -979, -795, 35, 180, 533,\n          486, 830, -104, 650, 56, 1280, -458, 753, -744, -777, -311, -12, -33,\n          356, -72, -117, 853, 59, -552, 862, -117, -508, -319, 965, 845, -798,\n          921, 795, 322, -766, -682, 788, -805\n        ]\n      ],\n      [\"target\", 478]\n    ],\n    \"output\": [21, 55]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          797, -983, -356, -582, 598, 380, -960, -3, -455, 427, -477, -445, 554,\n          -731, 429, -904, 43, 847, -369, -284, 196, 479, -232, -114, 235, -158,\n          -181, -357, -72, -811, 231, -94, -156, -260, 151, 927, 320, 453, -692,\n          686, 823, 818, -365, 211, 98, -186, 106, 954, -912, 592, -788, 781,\n          -698, -706, -710, 766, 807, -677, -289, 145, 47, -644, -765, -630,\n          -752, -819, 250, -596, -690\n        ]\n      ],\n      [\"target\", 3]\n    ],\n    \"output\": [22, 24]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          819, -499, 804, -868, -599, 871, -419, -870, 530, -954, -845, 763,\n          485, -798, -363, 883, 777, 349, 944, 701, 96, -852, -650\n        ]\n      ],\n      [\"target\", -322]\n    ],\n    \"output\": [8, 21]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          986, -283, -239, 718, 791, -605, -750, 942, -112, -134, 507, 700,\n          -579, 275, 418, -446, 696, 62, 213, 418, 965, -105, 396, 27, -96,\n          -272, -637, 811, 784, -42, -290, -817, 516, -187, 281, 966, -906,\n          -570, 574, -817, 221, 272, -681, 926, 115, -973, 591, 788, -834, -817,\n          -221, 464, 293, -191, -50, 668, -489, -227, 822, 970, -127, 398, 895,\n          -28, 838, -663, -925, -740, -418, -713, -810, 160, 249, -119, 936,\n          823, 828, 794, -295, 273, 701, 890, 624, 395, -666, -432, 199, 600,\n          746, 455, -946, -805, 159, 353, 187, -860, 1, -226, 180\n        ]\n      ],\n      [\"target\", -143]\n    ],\n    \"output\": [13, 68]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [-526, 54, 98, 440]],\n      [\"target\", 494]\n    ],\n    \"output\": [1, 3]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -387, 489, -842, 233, 993, -574, 190, -341, -841, -840, -17, 821, 7,\n          781, -352, -366, 120, -372, 660, 795, -618, -273, -992, 224, 647, 163,\n          -57, -594, 742, -158, -792, -260, -530, -443, -490, -1762, -835, -278,\n          813, 793, 64, -789, 971, -147, 383, 562, -824, 160, -733, 864, -908,\n          -729, -517, -410, 175, -888, -872, 437, -721\n        ]\n      ],\n      [\"target\", -969]\n    ],\n    \"output\": [35, 39]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          810, -843, -724, 789, 992, -681, -543, -864, -465, -200, 678, 709,\n          471, -792, 351, 455, -464, 869, 350, -153, -579, 615, 748, -520, -238,\n          -801, -225, -27, 198, 478, -720, 171, 815, -96, 422, -227, -284, -288,\n          531, 121, 376, -445, -395, -545, 969, -141, 390, -380, 264, 259, 406,\n          234, -573\n        ]\n      ],\n      [\"target\", 670]\n    ],\n    \"output\": [48, 50]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -561, -987, 898, -966, 236, -658, 496, -974, 792, -539, 88, -425, 672,\n          858, 9, 968, 842, 80\n        ]\n      ],\n      [\"target\", 245]\n    ],\n    \"output\": [4, 14]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [-92, -628, -561, -297, -278, -624, 620, -604, -113, 561, 733, -716]\n      ],\n      [\"target\", -925]\n    ],\n    \"output\": [1, 3]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -371, -24, -996, -721, 122, 559, -604, -499, -128, -733, 254, 924,\n          -831, 295, -206, 931, 599, -793, -61, 421, -102, 904, 696, -997, -700,\n          -168, 804, 842, -948, 265, -736, -267, 419, -388, -38, -342, 407, 412,\n          64, 475, -94, -586, 622, -978, 776, 775, -316, -162, 280, 843, 911,\n          -649, 734, 775, -733, -656, -327, -819, 451, 966, -450, -746, -554,\n          -815, 48, 867, 507, 53, 866, 105, -20, -59, -539, -267, 341, -817,\n          441, 142, 579, -733, -741, -408, -899, 164\n        ]\n      ],\n      [\"target\", 930]\n    ],\n    \"output\": [38, 68]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          192, 651, -459, -512, -76, 0, 320, -332, 639, 136, -934, 54, -820,\n          -514, 572, 774, 447, -463, 385, 947, -328, -98\n        ]\n      ],\n      [\"target\", 501]\n    ],\n    \"output\": [11, 16]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          986, 476, 253, 974, 315, -62, -251, -682, -818, -593, -95, 778, -444,\n          709, 245, 603, -190, -238, -247, 25, 456, -631, 285, -472, 689, -946,\n          290, -562, -877, -376, 450, 42, 541, -64, 512, -971, 317, 438, -793,\n          717, -762, 188, 486, -60, 737, -671, -646, 417, 921, 870, -951, -212,\n          -885, -980, -850, 180, -910, -956, 952, 6, 55, 392, 737, -270, 863,\n          -939, -887, 269, 436, -845, 837, -495, 783, -687, 115, 403, 442, 933,\n          166, 185, -954, 251, 281, -43, -368, -308, -918, -175, 276, 675, 387,\n          474, -383, -618, -58\n        ]\n      ],\n      [\"target\", -249]\n    ],\n    \"output\": [37, 73]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [-66, -11, -618, -741, 652, 786, -553, -917, 434, -725]],\n      [\"target\", -564]\n    ],\n    \"output\": [1, 6]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -25, -541, 376, -686, 258, 157, -93, -68, -727, -345, 705, -855, 281,\n          -197, -880, 449, 327, 841, -964, 30, 621, 404, 110, -1600, 491, 437,\n          263, 22, -802, 382, 595, -760, -923, -920, -658, -232, -235, 25, -252,\n          -225, 196, 226, 696, 527, 115, -926, -680, -169, 722, -415, 938, 325,\n          270, -555, -269, 98, 773, -288, 412, -202, -629, -497, -2, -772, -835,\n          -236, 679, -457, -764, 341, 56, -385, 225, 215, -120, 885, -33, 60,\n          827, -581, -110, 891, 172, 60, 702, -587, -138, 755, 861, 188, -885,\n          -786, 916, -11, 660, 850\n        ]\n      ],\n      [\"target\", -759]\n    ],\n    \"output\": [17, 23]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -520, 180, -433, 95, 879, -35, -771, 247, 873, -862, -498, -497, -892,\n          -87, 959, -579, -790, 412, 214, -733, 849, -572, 138, -482, 352, -841,\n          -624, -8, -896, 500, -36, -84, -850, 406, -569, -899, 417, -974, -13,\n          625, 491, 954, -241, -205, -699, -251, -735, 241, 466, 290, -752, 430,\n          -291, 119, -709, 155, 664, 848, 721, 645, 27, 811, 230, 702, -353,\n          735, 626\n        ]\n      ],\n      [\"target\", 643]\n    ],\n    \"output\": [43, 57]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [329, -675, -883, 280, -450, 800, 479, 487, -1334, 109, 10]],\n      [\"target\", -855]\n    ],\n    \"output\": [6, 8]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -925, -474, -632, -826, -583, 744, -913, -406, -634, 48, 457, 765,\n          865, -248, 443, -582, 965, 587, -149, -930, -794, -469, 199, 361, 799,\n          -312, 240, -124, 32, 444, -14, -620, 591, 608, -785, -605, -954, -15,\n          -102, -913, 735, -667, 557, -84, 513, 437, -157, -986, -277, -328,\n          -20, -607, -143, 431, -102, -947, -348, -144, -432, 985, 202, -985,\n          -698, 435, -546, 313, 542, 33, -615, -988, 134, -576, -722, 916, 693,\n          589, -80, -149, -272, -696, -33, -591, 754, 639, -71, 815, 554, -239,\n          425, 613, -27, -667, -348, -406, 956, 371, -845, -343\n        ]\n      ],\n      [\"target\", -827]\n    ],\n    \"output\": [20, 80]\n  },\n  {\n    \"input\": [\n      [\"numbers\", [-627, -437, -99, -199, -425, 771, 79, 93, -1000]],\n      [\"target\", -298]\n    ],\n    \"output\": [2, 3]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -629, -65, -181, -919, 82, 317, 836, 989, 30, 814, 432, 600, 948,\n          -330, 414, -909, 285, -377, 299, -753, -191, 787, -988, -712, 618,\n          780, -897, 281, -935, -559, -717, -787, -705, -474, -435, 462, -100,\n          19, 766, 376, 36, -288, -456, 476, -158, -217, -574, 108, -549, -517,\n          778, 904, -424, -364, -734, 151, -770, -656, -2, -458, 781, -273,\n          -940, -35, -329\n        ]\n      ],\n      [\"target\", -495]\n    ],\n    \"output\": [14, 15]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          65, -718, -887, 900, -555, -677, 388, 188, -303, -851, 895, -783, 744,\n          -249, -546, 842, 757, -963, -824, 798, -884, -559, -82, 156, -655,\n          -35, 885, -808, -157, -736, -620, 427, 624, -45, -391, -626, -59, 900,\n          374, -759, 684, 539, -268, -647, -135, 461, 452, 532, 503, -75, -669,\n          133, 4, 817, 440, -200, -238, -625, -132, 160, 308, -389, 290, -340,\n          -300, 120, 691, -991, 777\n        ]\n      ],\n      [\"target\", -55]\n    ],\n    \"output\": [36, 52]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -182, -17, 54, -660, -173, 670, 425, -717, -655, -773, -874, 998, 139,\n          273, -455, 682, 222, -253, -189, -554, -903, -789, 530, -1, 447, 621,\n          -706, -731, -543, 559, 966, -381, -771, -679, -974, 769, 659, 111,\n          807, 59, 104, -876, 200, -332, -258, 449, -805, -77, -6, 925, -173,\n          371, -124, 219, -383, 262, 80, 356, -172, 439, 915, -57, 722, 28, 906,\n          934, 316, 872, -467, 381, -464, 611, -647, 923, -218, 131, 876, 236,\n          -551, -940, -988, -724, -375, 33\n        ]\n      ],\n      [\"target\", -128]\n    ],\n    \"output\": [0, 2]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          355, 102, -616, 886, -189, 309, -995, -866, 517, -64, -536, -878, 976,\n          -9, 347, 640\n        ]\n      ],\n      [\"target\", 350]\n    ],\n    \"output\": [3, 10]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -307, 445, -502, -417, -532, -511, 188, -426, -586, -102, 907, 303,\n          -425, -1000, 110, 532, 644, 542, 599, 353, 311, 372, -752, -255, 998,\n          398, -540, 42, 886, 485, -506, -531, -385, -689, -912, 845, 221, -145,\n          620, -380, 973, -698, 748, -242, 47, -330, 841, -969, -900, 732, 205,\n          435, -343, -267, -898, 98, -997, -68, -24, -759, 638, -382, -747, 941,\n          174, -16, -67, 540, 675, 192, -293, 844, -951, -261, -160, 615, -394,\n          761, 921, 978, -445, 537, -638, 986, -654, 761, 536, -357, -863, -571,\n          -750\n        ]\n      ],\n      [\"target\", 936]\n    ],\n    \"output\": [6, 42]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -741, 233, -173, 395, 723, -13, -63, -306, -984, -577, -33, 227, -273,\n          599, -733, 656, 261, -698, 357, 263, 893, -508, 126, 182, -498, -205,\n          -204, -15, 317, -182, -814, -130, 798, 267, -685, 458, 328, 130, 188,\n          -679\n        ]\n      ],\n      [\"target\", 124]\n    ],\n    \"output\": [26, 36]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          335, -224, -141, -891, 555, 439, -606, -505, 767, 60, -348, 463, -782,\n          56, -74, -777, 527, 230, 418, -206, 849, 331, 54, 352, -951, -943,\n          315, -978, 401, -477, -707, -19, 167, 888, -62, 937, 83, -775, -338,\n          438, 759, 960, 978, 637, -409, 876, -245, 39, -926, 679, -766, -536\n        ]\n      ],\n      [\"target\", 867]\n    ],\n    \"output\": [17, 43]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -169, -773, 546, 384, -155, -125, -328, -642, 467, 956, -890, -812,\n          -612, 180, -945, 132, 99, 18, 343, -689, 985, 853, -689, -435, 127,\n          936, 1299, -626\n        ]\n      ],\n      [\"target\", 487]\n    ],\n    \"output\": [11, 26]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -425, 654, -912, -973, -473, -44, 495, 388, -321, 824, 174, 785, -842,\n          -662, 99, 0, -963, -887, 719, -399, -221, 973, -472, 383, -111, 753,\n          -590, 37, -75, -826, 292, -587, -229, 894, 990, 591, -867, 803, 799,\n          452, -285, 885, 516, 347, -708, -858, 813, -288, -581, -64, 195, 462,\n          -308, -542, -287, -245, -869, -551, 797, 837, -771\n        ]\n      ],\n      [\"target\", 344]\n    ],\n    \"output\": [5, 7]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          589, -465, -847, -36, 470, 408, -80, -750, 34, 529, 723, -616, -268,\n          75, -921, 176, -959, 494, 207, 573, -536, -709, -449, -28, -298, 852,\n          417, -361, -621, -400, -188, -35, -212, 598, 645, 769, 895, -378,\n          -447, -255, -978, 60, -685, 128, 491, 581, 55, 370, -245, -621, 861,\n          150, 991\n        ]\n      ],\n      [\"target\", 228]\n    ],\n    \"output\": [0, 27]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          273, -602, 164, 797, -150, -217, 41, -23, 50, -235, -548, -536, -451,\n          -26, -235, 596, 464, 902\n        ]\n      ],\n      [\"target\", -765]\n    ],\n    \"output\": [5, 10]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          994, -676, -789, -1000, -601, -522, -290, -232, -5, -681, -548, -956,\n          -479, -254, -948, 259, -803, -756\n        ]\n      ],\n      [\"target\", -289]\n    ],\n    \"output\": [10, 15]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          852, 229, -374, -47, 8, 409, 248, -371, 557, 651, -339, 598, -193,\n          -912, 868, 236, -236, -557, -698, -528, 165, -662, -559, 470, -978,\n          -943, -171, 245, 118, 192, 201, 338, 246, -371\n        ]\n      ],\n      [\"target\", 324]\n    ],\n    \"output\": [0, 19]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          353, 89, -35, 919, 414, -309, -306, 742, 672, 768, 570, 177, 123, 154,\n          -562, -639, -598, -256, -710, 661, -686, -97, 814, -563, 957, -483,\n          286, 945, 850, -147, 789, 894, 825, -585, -375, 225, 873, -421, 262,\n          -241, -928, 756, -592, 971, -649, -999, 35, 317, -10, -998, -717,\n          -530, -350, 578, -313, 65, -610, 849, -414, -382, -339, 176, 788\n        ]\n      ],\n      [\"target\", 929]\n    ],\n    \"output\": [31, 46]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -307, 658, 79, -308, -115, 465, -495, -707, 362, 338, -717, -218, 118,\n          224, -320, -26, -637, -409, -796, 90, -654, 53, -184, -963, 260, -966,\n          169, -528, -474, 539, 188, -988, -417, 542, 523, -242, 939, 447, -623,\n          752, -961, 6, 702, -580, 317, -354, 233, 850, -60, -437, 182, 388,\n          785, 86, -585, -117, 463, 108, 461, -4, 943, 395, -611, 436, 770,\n          -313, 517, -228, -816, 608, 473, 180, -7, 453, 876, -12, 378, -112,\n          -181, -547, -278, 505, 126, -754, 655, -474, -958, 97, 29, -878, -326,\n          -485, 961, 395, 952, 385, 726, -346\n        ]\n      ],\n      [\"target\", -161]\n    ],\n    \"output\": [68, 84]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          407, -514, -181, -252, 789, -667, -82, 510, -443, 564, -478, -889,\n          535, 56, 667, -709, 770, 918, -304\n        ]\n      ],\n      [\"target\", -263]\n    ],\n    \"output\": [2, 6]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          661, 138, 439, -195, 714, -588, -956, -118, 549, 570, 521, 133, 504,\n          284, 405, -912, -780, 186, -122, -513, 294, 472, 616, -266, 825, -173,\n          985, 948, -158, -79, -365, -524, 749, 210, -922, 227, 274, -375, -105,\n          938, -551, 53, 841, 165, 942, 744, -452, -677, 328, -181, -398, -532,\n          -430, 357, -316, 838, -803, 787, 302, 135, 610, 853, -788, -374, -784,\n          935, 471, 88, 771, 718, 973, 235, 637, 776, 696, 344, -47, -951, 832,\n          -978, -170, 790, -615, 626, -218, -298, -59, 308, 559, 556, 409, -764,\n          -558, 867, -535, -981\n        ]\n      ],\n      [\"target\", 332]\n    ],\n    \"output\": [93, 94]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -238, 304, 309, -140, 536, -723, -605, -183, -325, -477, 2, 294, 384,\n          657, -305, 318, 9, -796, 207, 607, 876, -170, 879, 429, 497, -999,\n          877, 353, -508, -266\n        ]\n      ],\n      [\"target\", 511]\n    ],\n    \"output\": [1, 18]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          76, -754, 217, 902, 562, -534, 669, -230, -263, -987, 936, -663, 895,\n          -331, 573, 451, 599, 812, 191, 608, -710, -115, 208, 422, -559, 575,\n          -556, 429, 580, 311, 33, -315, -499, -898, -756, -289, 857, -15, -37,\n          636, 946, 326, 438, 111, 590, -883, 857, -503, -483, 179, 177, 229,\n          -957, -1000, -627, -549, -380, 658, -228, -245, -817, -642, -24, 437,\n          -708, 291, 434, 770, -296, -763, 165, 763, -139, -477, 844, 72, 239,\n          418, -498, -571, 196, -952, -44, -763, -244, -538, -182, 56, -679,\n          145, -128\n        ]\n      ],\n      [\"target\", 527]\n    ],\n    \"output\": [0, 15]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          302, 1380, -907, -784, 28, -34, -718, 614, 801, 190, 558, 466, -529,\n          970, 787, 951, -434, -587, 559, -438, -654, 497, -926, 337, 333, -920,\n          203, 653, 119, -7, 967, 619, -310, -164, -827, 904, 118, 566, -974,\n          89, 468, 124, -620, 88, 552, 155, 554, -280, -241, 323, -133, 881,\n          -45, -194, 30, -369, 880, -379, 128, 639, 625, -857, -609, -330, -802,\n          -937, 732, -316, 192, 91, 965, 344, -589, 428, 826, 919, -942, -441,\n          351, 519, 835, -345, 137, -93, 870, -316, 940, -548, 38, -709, -408,\n          -841, -131, 989, -505, -314, 36, 20\n        ]\n      ],\n      [\"target\", 454]\n    ],\n    \"output\": [1, 22]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          -794, -260, -185, -481, -560, 915, 767, 557, 490, 189, -971, -945,\n          772, -515, -575, 901, 755, -717, 331, 265, 51, 640, 273, 699, -65,\n          263, -593, -838, -307, 845, 992, 419, 319, 49, -526, -545, 767, -401,\n          987, 362, -749, 481, -214, -10, -673, -33, 673, -555\n        ]\n      ],\n      [\"target\", 146]\n    ],\n    \"output\": [2, 18]\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          247, -973, -450, -764, -174, 624, 793, -927, 5, -103, 524, -2, 301,\n          480, 92, 270, 780, -769, 998, 273, -604, 30, -547, -215, 669, 147,\n          -245, 330, -565, -679, -358, 974, 679, -573, -321, 212, 828, 352, 298,\n          704, -850, -715, 355, -306, 118, 428, 485, 474, 641, -848, -551, 31,\n          901, 789, -381, -141, 319, -810, 890, -406, -190, -310, -18, 341,\n          -863, 279, 60, 692, -975, -266, -964, 640\n        ]\n      ],\n      [\"target\", -348]\n    ],\n    \"output\": [9, 26]\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1718236800,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement a function to find two numbers within an array of integers that add up to a target integer",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/pair-sum",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "pair-sum",
    "subtitle": null,
    "title": "Pair sum",
    "topics": [
      "array"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nexport default function pairSum(numbers, target) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function pairSum(numbers: number[], target: number): number[] {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var h=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var i in e)h(t,i,{get:e[i],enumerable:!0})},o=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!x.call(t,r)&&r!==i&&h(t,r,{get:()=>e[r],enumerable:!(l=b(e,r))||l.enumerable});return t};var O=(t,e,i)=>(i=t!=null?f(y(t)):{},o(e||!t||!t.__esModule?h(i,\"default\",{value:t,enumerable:!0}):i,t)),T=t=>o(h({},\"__esModule\",{value:!0}),t);var c=k((M,s)=>{s.exports=_jsx_runtime});var F={};w(F,{default:()=>S});var n=O(c());var a=MDXCodeBlock;var d=`export default function pairSum(numbers: number[], target: number): number[] {\n  const hash: { [key: number]: number } = {};\n\n  for (let i = 0; i < numbers.length; i++) {\n    const complement = target - numbers[i];\n\n    // Check if the complement exists (excluding the current element)\n    if (hash.hasOwnProperty(complement) && hash[complement] !== i) {\n      return [hash[complement], i];\n    }\n\n    // Store the number and its index in the hash map\n    hash[numbers[i]] = i;\n  }\n\n  // No solution found\n  return [];\n}\n`;var m=`export default function pairSum(numbers: number[], target: number): number[] {\n  // Iterate through each element in the array\n  for (let i = 0; i < numbers.length; i++) {\n    // For each element, iterate through the elements that come after it\n    for (let j = i + 1; j < numbers.length; j++) {\n      // If the sum of the two elements equals the target, return their indices\n      if (numbers[j] === target - numbers[i]) {\n        return [i, j];\n      }\n    }\n  }\n  // Return an empty array if no solution is found\n  return [];\n}\n`;var u=`export default function pairSum(numbers: number[], target: number): number[] {\n  const hash: { [key: number]: number } = {};\n\n  // First pass: Populate the hash table with numbers and their indices\n  for (let i = 0; i < numbers.length; i++) {\n    hash[numbers[i]] = i;\n  }\n\n  // Second pass: Check for the complement\n  for (let i = 0; i < numbers.length; i++) {\n    const complement = target - numbers[i];\n\n    // Ensure complement exists and is not the same index as the current one\n    if (complement in hash && hash[complement] !== i) {\n      return [i, hash[complement]];\n    }\n  }\n\n  // If no solution is found\n  return [];\n}\n`;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ol:\"ol\",li:\"li\",ul:\"ul\",strong:\"strong\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"1. Brute Force\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The pair sum problem involves identifying two indices in an array such that their values add up to a specified target. The brute-force approach checks all possible pairs of elements in the array. For every element at index \",(0,n.jsx)(e.code,{children:\"i\"}),\", all subsequent elements at index \",(0,n.jsx)(e.code,{children:\"j > i\"}),\" are examined to determine if their sum matches the target. This ensures that all possible pairs are considered, making the solution straightforward but inefficient for large arrays.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use a loop with index \",(0,n.jsx)(e.code,{children:\"i\"}),\" to iterate through each element of the \",(0,n.jsx)(e.code,{children:\"numbers\"}),\" array.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"For each element at index \",(0,n.jsx)(e.code,{children:\"i\"}),\", use another loop with index \",(0,n.jsx)(e.code,{children:\"j\"}),\" to iterate through the elements that come after \",(0,n.jsx)(e.code,{children:\"i\"}),\" (\",(0,n.jsx)(e.code,{children:\"j > i\"}),\").\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Check if the sum of \",(0,n.jsx)(e.code,{children:\"numbers[i]\"}),\" and \",(0,n.jsx)(e.code,{children:\"numbers[j]\"}),\" is equal to the \",(0,n.jsx)(e.code,{children:\"target\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If the condition is true, return the indices \",(0,n.jsx)(e.code,{children:\"[i, j]\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"If no such pair is found after examining all pairs, return an empty array.\"}),`\n`]}),`\n`,(0,n.jsx)(a,{children:m}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Time complexity: O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\")\"]}),\". The outer loop runs \",(0,n.jsx)(e.code,{children:\"n\"}),\" times, and for each iteration, the inner loop runs up to \",(0,n.jsx)(e.code,{children:\"n - 1\"}),\" times, leading to quadratic time complexity.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(1)\"}),\". No additional data structures are used, and the space requirement is constant.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"2. Using Hash Map With Two Passes\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The previous brute-force solution involves checking all pairs of elements, resulting in O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\") time complexity due to repeated comparisons of element pairs. Thus, this approach removes redundant work by replacing the nested loops with efficient O(1) hash table lookups, reducing the time complexity to O(n).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This optimized solution uses a \",(0,n.jsx)(e.strong,{children:\"two-pass hash map\"}),\" approach:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The first pass constructs a hash table to store each element's value as a key and its index as a value.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"In the second pass, the algorithm checks if the complement of the current element (i.e., \",(0,n.jsx)(e.code,{children:\"target - numbers[i]\"}),\") exists in the hash table.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize an empty hash table \",(0,n.jsx)(e.code,{children:\"hash\"}),\" to store the numbers and their indices.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Perform the first pass through the array:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"For each element \",(0,n.jsx)(e.code,{children:\"numbers[i]\"}),\", store it in the hash table with its index as the value (\",(0,n.jsx)(e.code,{children:\"hash[numbers[i]] = i\"}),\").\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Perform the second pass through the array:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Calculate the \",(0,n.jsx)(e.code,{children:\"complement\"}),\" as \",(0,n.jsx)(e.code,{children:\"target - numbers[i]\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Check if the \",(0,n.jsx)(e.code,{children:\"complement\"}),\" exists in the hash table and ensure that its index is not the same as the current index.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the conditions are met, return the indices \",(0,n.jsx)(e.code,{children:\"[i, hash[complement]]\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"If no valid pair is found, return an empty array.\"}),`\n`]}),`\n`,(0,n.jsx)(a,{children:u}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Time complexity: O(n)\"}),\". The algorithm iterates through the array twice, and each hash table operation (insertion or lookup) takes O(1).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(n)\"}),\". In the worst case, all \",(0,n.jsx)(e.code,{children:\"n\"}),\" elements are stored in the hash map.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"3. Using Hash Map With One Pass\"}),`\n`,(0,n.jsx)(e.p,{children:\"The unnecessary work in the two-pass solution is the need for two iterations over the array. The optimized one-pass hash table approach eliminates this drawback by combining both steps into a single iteration:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"During the iteration, the algorithm calculates the complement of the current number.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If the complement is already present in the hash table, the pair is found, and the indices are returned.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If not, the current number and its index are added to the hash table for future lookups.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"This removes the need for a second pass, reducing unnecessary work and improving runtime efficiency.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize an empty hash table \",(0,n.jsx)(e.code,{children:\"hash\"}),\" to store numbers and their corresponding indices.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through the array \",(0,n.jsx)(e.code,{children:\"numbers\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Calculate the \",(0,n.jsx)(e.code,{children:\"complement\"}),\" as \",(0,n.jsx)(e.code,{children:\"target - numbers[i]\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Check if the \",(0,n.jsx)(e.code,{children:\"complement\"}),\" exists in the hash table:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If it does, return the indices \",(0,n.jsx)(e.code,{children:\"[hash[complement], i]\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Otherwise, add the current number and its index to the hash table.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"If no valid pair is found, return an empty array.\"}),`\n`]}),`\n`,(0,n.jsx)(a,{children:d}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Time complexity: O(n)\"}),\". The algorithm processes each element of the array exactly once, and each lookup or insertion in the hash table takes O(1).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(n)\"}),\". In the worst case, all \",(0,n.jsx)(e.code,{children:\"n\"}),\" elements are stored in the hash map.\"]}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var S=C;return T(F);})();\n;return Component;",
  "workspace": {
    "main": "/src/pair-sum.ts",
    "run": "/src/pair-sum.run.test.ts",
    "submit": "/src/pair-sum.submit.test.ts"
  }
}