{
  "description": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},s=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(i=b(e,o))||i.enumerable});return t};var v=(t,e,r)=>(r=t!=null?d(p(t)):{},s(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),j=t=>s(a({},\"__esModule\",{value:!0}),t);var l=g((X,u)=>{u.exports=_jsx_runtime});var M={};y(M,{default:()=>C,frontmatter:()=>_});var n=v(l());var h=MDXTestExamples;var c=[{input:[[\"numbers\",[1,2,3,1]]],output:4,explanation:\"The robber can steal a maximum of 4 by robbing house at index 0 (value 1) and house at index 2 (value 3).\"},{input:[[\"numbers\",[2,7,9,3,1]]],output:11,explanation:\"The robber can steal a maximum of 12 by robbing house at index 0 (value 2), house at index 2 (value 9).\"},{input:[[\"numbers\",[3,6,1,0,6,0,0,9]]],output:21,explanation:\"The robber can steal a maximum of 21 by robbing house at index 1 (value 6), house at index 4 (value 6), house at index 7 (value 9).\"}];var _={title:\"Neighborhood Theft (Circular)\",excerpt:\"Implement a function to find maximum money to rob in circular houses without alerting police\"};function m(t){let e=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"An experienced robber is planning a heist on a circular street. Every house contains a certain amount of money, and all houses are arranged in a circle, meaning the first house is next to the last one. Additionally, adjacent houses have connected security systems that alert the police if two neighboring houses are robbed on the same night.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Given an array of integers \",(0,n.jsx)(e.code,{children:\"numbers\"}),\", where each element represents the amount of money in a house, return the maximum amount of money the robber can steal without triggering the alarm.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"numbers: number[]\"}),\": An array of integers\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The robber cannot steal from two adjacent houses\"}),`\n`]}),`\n`,(0,n.jsx)(h,{testCases:c}),`\n`,(0,n.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"1 <= \",(0,n.jsx)(e.code,{children:\"numbers.length\"}),\" <= 100\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"0 <= \",(0,n.jsx)(e.code,{children:\"numbers[i]\"}),\" <= 400\"]}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=w;return j(M);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/neighborhood-theft-circular\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/neighborhood-theft-circular.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/neighborhood-theft-circular.run.test.ts": "import fn from './neighborhood-theft-circular';\nimport runTestCases from './run.tests.json';\n\ndescribe('neighborhoodTheftCircular', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = [${example.input[0][1]}]`, () => {\n      expect(fn(example.input[0][1])).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/neighborhood-theft-circular.submit.test.ts": "import neighborhoodTheftCircular from './neighborhood-theft-circular';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('neighborhoodTheftCircular', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`numbers = [${example.input[0][1]}]`, () => {\n      expect(neighborhoodTheftCircular(example.input[0][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/neighborhood-theft-circular.ts": "export default function neighborhoodTheftCircular(numbers: number[]): number {\n  // If there are no houses, return 0\n  if (numbers.length === 0) return 0;\n  // If there is only one house, return the amount in that house\n  if (numbers.length === 1) return numbers[0];\n\n  // Calculate the maximum amount of money that can be robbed by excluding either the first or the last house\n  const max1 = robSimple(numbers, 0, numbers.length - 2);\n  const max2 = robSimple(numbers, 1, numbers.length - 1);\n\n  // Return the maximum amount from the two calculated values\n  return Math.max(max1, max2);\n}\n\n// Helper function to find the maximum amount of money that can be robbed from a range of houses\nfunction robSimple(numbers: number[], start: number, end: number): number {\n  let t1 = 0,\n    t2 = 0;\n\n  // Iterate over the range of houses\n  for (let i = start; i <= end; i++) {\n    // Store the current value of t1 in a temporary variable\n    const temp = t1;\n    // Update t1 to be the maximum of robbing the current house plus the amount from t2, or the current value of t1\n    t1 = Math.max(numbers[i] + t2, t1);\n    // Update t2 to the previous value of t1\n    t2 = temp;\n  }\n\n  // Return the maximum amount of money that can be robbed from the given range of houses\n  return t1;\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [[\"numbers\", [1, 2, 3, 1]]],\n    \"output\": 4,\n    \"explanation\": \"The robber can steal a maximum of 4 by robbing house at index 0 (value 1) and house at index 2 (value 3).\"\n  },\n  {\n    \"input\": [[\"numbers\", [2, 7, 9, 3, 1]]],\n    \"output\": 11,\n    \"explanation\": \"The robber can steal a maximum of 12 by robbing house at index 0 (value 2), house at index 2 (value 9).\"\n  },\n  {\n    \"input\": [[\"numbers\", [3, 6, 1, 0, 6, 0, 0, 9]]],\n    \"output\": 21,\n    \"explanation\": \"The robber can steal a maximum of 21 by robbing house at index 1 (value 6), house at index 4 (value 6), house at index 7 (value 9).\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"numbers\", [5, 0, 3, 9, 4, 3]]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"numbers\", [9, 7, 0, 8, 0, 5]]],\n    \"output\": 20\n  },\n  {\n    \"input\": [[\"numbers\", [4, 1]]],\n    \"output\": 4\n  },\n  {\n    \"input\": [[\"numbers\", [0, 6, 7, 9, 9, 0, 8, 6]]],\n    \"output\": 24\n  },\n  {\n    \"input\": [[\"numbers\", [8, 3]]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"numbers\", [4, 8, 8, 4, 3]]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"numbers\", [4]]],\n    \"output\": 4\n  },\n  {\n    \"input\": [[\"numbers\", [3, 7, 9, 10, 9, 6, 1, 9]]],\n    \"output\": 32\n  },\n  {\n    \"input\": [[\"numbers\", [4, 4, 2, 10]]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"numbers\", [9, 6, 10, 4, 7, 2, 3, 10]]],\n    \"output\": 29\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          280, 389, 382, 71, 200, 2, 301, 191, 386, 354, 112, 70, 276, 48, 236,\n          236, 359, 14, 365, 136, 48, 219, 153, 348, 121, 292, 392, 394, 318,\n          391, 17, 291, 322, 347, 36, 339, 361, 40, 281, 97, 376, 263, 60, 264,\n          322, 98, 228, 239, 336, 115, 9, 95, 286, 316, 133, 284, 306, 73, 67,\n          239, 365, 64, 205, 304, 298, 378, 144, 209, 242, 14, 48, 168, 266,\n          332, 80, 84, 45, 31, 112, 220, 27, 164, 385, 303, 266, 177, 19, 396,\n          372, 257, 143, 156, 12, 376, 290, 54\n        ]\n      ]\n    ],\n    \"output\": 11904\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          198, 203, 367, 309, 255, 310, 88, 326, 269, 243, 320, 74, 368, 289,\n          194, 83, 65, 140, 340, 288, 394, 108, 193, 92, 205, 66, 120, 266, 245,\n          101, 323, 307, 97, 260, 190, 119, 386, 28, 382, 44, 350, 398, 105,\n          361, 16, 185, 81, 161, 2, 30, 150, 124, 370, 128, 336, 342, 176, 316,\n          318, 400, 256, 100\n        ]\n      ]\n    ],\n    \"output\": 7753\n  },\n  {\n    \"input\": [[\"numbers\", [219, 186, 260, 27, 398, 274, 30]]],\n    \"output\": 877\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          112, 269, 368, 76, 308, 361, 211, 30, 275, 194, 381, 27, 329, 273,\n          334, 295, 394, 62, 73, 229, 392, 147, 1, 180, 324, 185, 24, 55, 288,\n          301, 332, 187, 263, 281, 290, 88, 216, 117, 57, 385, 236, 324, 162,\n          385, 78, 198, 313, 203, 158, 113, 22, 134, 101, 217, 390, 322, 359,\n          36, 323, 216, 349, 283, 246, 206, 52, 115, 227, 83, 27, 248, 101, 272,\n          292, 280, 122, 258, 213, 111, 34, 1, 195, 74, 164, 119, 347, 252, 306,\n          300, 307, 59, 291, 365, 235\n        ]\n      ]\n    ],\n    \"output\": 11521\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          373, 214, 305, 72, 51, 248, 281, 204, 270, 299, 237, 150, 276, 317,\n          47, 84, 262, 296, 34, 384, 16, 232, 253, 75, 52, 24, 397, 377, 245,\n          267, 68, 123, 220, 187, 48, 269, 24, 260, 167, 325, 163, 365, 200,\n          184, 95, 218, 12, 132, 153, 270, 383, 298, 48, 172, 120, 337, 370,\n          378, 394, 85, 96, 56, 162, 245, 389, 56, 277, 374, 299, 356, 254, 297,\n          183, 384, 361, 47, 366, 97, 274, 109, 101, 21, 45, 51\n        ]\n      ]\n    ],\n    \"output\": 10046\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          345, 150, 235, 147, 184, 208, 215, 136, 393, 87, 78, 67, 89, 153, 335,\n          286, 281, 63, 292, 43, 98, 162, 383, 135, 283, 198, 321, 389, 276,\n          240, 23, 201, 171, 240, 240, 379, 120, 276, 367, 390, 232, 200, 8,\n          387, 51, 146, 270, 18, 111, 156, 155, 277, 400, 352, 22, 185, 255,\n          247, 76, 210, 392, 104, 300, 398, 16, 147, 160, 200, 182, 308, 236,\n          192, 376, 346, 152, 289, 324, 211, 257, 355, 222, 53, 72, 14, 90, 397,\n          364, 279, 283, 141, 279, 63, 7\n        ]\n      ]\n    ],\n    \"output\": 11326\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          261, 42, 46, 309, 364, 251, 92, 206, 47, 104, 359, 340, 398, 3, 36,\n          335, 266, 160, 138, 126, 11, 319, 301, 201, 140, 306, 368, 111, 47,\n          352, 152, 157, 155, 243, 353, 358, 95, 7, 330, 67, 74, 196, 172, 350,\n          150, 354, 48, 315, 80, 280, 61, 324, 254, 110, 340, 84, 287, 9, 273,\n          275, 191, 363\n        ]\n      ]\n    ],\n    \"output\": 7692\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          218, 81, 310, 132, 285, 241, 115, 236, 68, 363, 19, 280, 225, 181, 59,\n          224, 203, 190, 374, 136, 52, 261, 285, 179, 184, 104, 56, 88, 241, 35,\n          290, 249, 110, 322, 25, 206, 89, 240, 172, 17, 199, 13, 247, 92, 242,\n          376, 287, 324, 337, 125, 241\n        ]\n      ]\n    ],\n    \"output\": 5682\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          164, 221, 172, 133, 52, 366, 269, 227, 94, 374, 294, 295, 272, 190,\n          37, 17, 123, 265, 284, 349, 30, 78, 40, 232, 352, 137, 139, 380, 187,\n          146, 94, 124, 334, 283, 82, 250, 255, 313, 201, 139, 174, 305, 289,\n          106, 344, 394, 282, 148, 56, 383, 398, 376, 396, 209, 140, 287, 17,\n          120, 3, 359, 8, 146\n        ]\n      ]\n    ],\n    \"output\": 7352\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          87, 2, 268, 18, 202, 256, 65, 12, 296, 289, 284, 27, 373, 147, 223,\n          118, 7, 359\n        ]\n      ]\n    ],\n    \"output\": 2070\n  },\n  {\n    \"input\": [[\"numbers\", [317, 111, 371, 377, 1, 347, 133, 258]]],\n    \"output\": 1093\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          210, 51, 69, 310, 376, 73, 62, 191, 117, 169, 292, 164, 328, 371, 45,\n          121, 373, 348, 200, 71, 156, 14, 233, 317, 218, 216, 32, 168, 229, 38,\n          115, 124, 54, 11, 327, 343, 14, 5, 255, 379, 6, 123, 213, 165, 242,\n          247, 112, 308, 306, 55, 272, 221, 81, 252, 106, 302, 391, 312, 62,\n          245, 88, 23, 274, 258, 334, 222, 222, 207, 88, 369, 183, 24, 235, 327,\n          150, 309, 259, 39, 397, 361, 308, 97, 57, 338, 17, 3, 185, 252, 214,\n          127, 209, 370, 376, 124, 73, 99, 250, 276, 0\n        ]\n      ]\n    ],\n    \"output\": 10454\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          369, 125, 14, 147, 175, 247, 60, 280, 12, 119, 347, 102, 217, 306,\n          370, 325, 125, 11, 35, 359, 170, 395, 63, 35, 17, 6, 295, 340, 40,\n          328, 390, 197, 349, 30, 165, 41, 346, 165, 73, 381, 115, 232, 240,\n          241, 51, 115, 356, 303, 38, 293, 368, 269, 276, 277, 235, 164, 250,\n          363, 197, 170, 269, 347, 257, 306, 158, 318, 71, 307, 15, 336, 293,\n          236, 187, 82, 325, 213, 85, 388, 92, 392, 372, 214, 324, 38, 230, 366,\n          338, 134, 309, 237, 31, 59, 318, 135, 62, 185, 352\n        ]\n      ]\n    ],\n    \"output\": 11985\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          173, 140, 392, 298, 248, 9, 288, 50, 372, 312, 252, 340, 63, 99, 6,\n          395, 161, 79, 289, 150, 165, 156, 276, 231, 170, 191, 184, 289, 187,\n          124, 74, 7, 357, 171, 288, 237, 102, 0, 128\n        ]\n      ]\n    ],\n    \"output\": 4399\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          388, 275, 48, 252, 272, 172, 197, 27, 359, 241, 245, 241, 260, 18,\n          393, 196, 227, 53, 11, 262, 220, 4, 397, 259, 71, 145, 67, 362, 132,\n          183, 232, 6, 116, 293, 195, 32, 106, 26, 317, 135, 351, 277, 291, 234,\n          113, 111, 319, 173, 101, 120, 51\n        ]\n      ]\n    ],\n    \"output\": 5715\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          194, 42, 246, 163, 346, 392, 63, 146, 112, 132, 282, 30, 129, 127,\n          265, 244, 36, 332, 62, 342, 168, 104, 393, 24, 94, 313, 154, 301, 255,\n          208, 215, 335, 299, 207, 151, 367, 84, 134, 309, 270, 92, 242, 143,\n          81, 166, 120, 359, 4, 327, 25, 317, 151, 246, 154, 233, 50, 203, 2,\n          143, 72, 63, 102, 222, 173, 195, 88, 141, 65, 190, 71, 377, 379\n        ]\n      ]\n    ],\n    \"output\": 8280\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          219, 396, 384, 311, 59, 188, 32, 93, 198, 249, 59, 202, 362, 249, 154,\n          264, 184, 11, 191, 57, 36, 188, 78, 240, 72, 42, 228, 112\n        ]\n      ]\n    ],\n    \"output\": 2799\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [12, 24, 206, 131, 263, 8, 336, 144, 23, 278, 113, 182, 371, 85, 238]\n      ]\n    ],\n    \"output\": 1692\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          375, 319, 396, 374, 98, 168, 97, 350, 208, 399, 345, 86, 146, 281, 46,\n          84, 153, 175, 209, 270, 172, 56, 150, 356, 279, 317, 193, 156, 176,\n          189, 352, 90, 2, 267, 66, 48, 295, 307, 2, 7, 282, 128, 339, 348, 131,\n          244, 54, 280, 283, 126, 221, 3, 12, 113, 23, 314, 252, 309, 339, 247,\n          214, 369, 233, 321, 311, 72, 242, 2, 286, 6, 227, 379, 281\n        ]\n      ]\n    ],\n    \"output\": 8472\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          220, 354, 176, 144, 244, 129, 117, 247, 129, 346, 176, 267, 57, 184,\n          112, 54, 106, 43, 194, 347, 230, 374, 232, 187, 140, 124, 16, 237, 37,\n          170, 9, 254, 213, 41, 79, 50, 0, 329, 309, 261, 298, 276, 209, 324,\n          71, 145, 315, 156, 264, 273, 295, 317, 205, 111, 264, 367, 217, 313,\n          274, 288, 145, 6, 17, 300, 270, 369, 379, 393, 240, 275, 215, 208,\n          226, 84, 81, 188, 310, 304, 140, 301\n        ]\n      ]\n    ],\n    \"output\": 9226\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          144, 205, 105, 194, 319, 265, 152, 242, 233, 27, 377, 28, 9, 54, 64,\n          229, 279, 275, 345, 149, 23, 103\n        ]\n      ]\n    ],\n    \"output\": 2096\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          297, 267, 302, 200, 123, 390, 270, 1, 132, 235, 374, 207, 219, 311,\n          215, 268, 176, 308, 166, 187, 65, 160, 385, 391, 385, 309, 297, 282,\n          117\n        ]\n      ]\n    ],\n    \"output\": 3714\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          194, 247, 316, 205, 175, 359, 27, 89, 199, 274, 8, 231, 296, 221, 49,\n          354, 352, 97, 134, 13, 0, 313, 8, 105, 70, 127, 395, 138, 255, 331,\n          23, 270, 320, 209, 321, 343, 49, 382, 198, 196, 230, 335, 5, 288, 303,\n          138, 190, 334, 377, 394, 36, 276, 24, 383, 250, 381, 335, 62, 197,\n          320, 60, 259, 255, 129, 178, 385, 244, 188, 45, 279, 5, 280, 367, 275,\n          179, 128, 95, 342, 92, 325, 319, 166, 198, 96, 47, 171, 176, 314, 371,\n          286, 238, 156, 387, 8, 187, 383, 40\n        ]\n      ]\n    ],\n    \"output\": 12034\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          185, 126, 275, 337, 90, 349, 275, 243, 371, 59, 341, 95, 144, 71, 118,\n          344, 293, 363, 97, 327, 117, 303, 393, 251, 287, 207, 28, 305, 219,\n          379, 239, 276, 207, 32, 238, 209, 108, 147, 161, 60, 165, 381, 306,\n          272, 201, 139, 253, 371, 225, 147, 347, 190, 189, 282, 369, 186, 83,\n          354, 313, 75, 72, 70, 238, 375, 13, 385, 200, 253\n        ]\n      ]\n    ],\n    \"output\": 8510\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          240, 241, 370, 278, 55, 372, 81, 219, 192, 291, 264, 34, 365, 193,\n          376, 238, 12, 214, 75, 248, 77, 358, 119, 306, 292, 275, 175, 122,\n          225, 318, 219, 52, 18, 89, 110, 23, 66, 74, 371, 37, 303, 85, 316,\n          347, 194, 199, 66, 155, 259, 300, 53, 370, 339, 182, 269, 340, 344,\n          76, 400, 228, 19, 155, 43, 240, 202, 297, 399, 255, 5, 84, 14, 205,\n          381, 388, 204, 270, 105, 116, 347, 170\n        ]\n      ]\n    ],\n    \"output\": 9601\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          297, 367, 234, 252, 68, 162, 385, 368, 346, 293, 132, 9, 71, 102, 252,\n          177, 314, 154, 176, 259, 286, 355, 191, 232, 128, 193, 392, 236, 121,\n          234, 9, 397, 111, 42, 60, 175, 42, 270, 296, 372, 100, 331, 336, 349,\n          381\n        ]\n      ]\n    ],\n    \"output\": 5601\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          19, 6, 374, 251, 98, 314, 340, 152, 386, 234, 89, 188, 73, 230, 329,\n          302, 345, 378\n        ]\n      ]\n    ],\n    \"output\": 2296\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          102, 63, 63, 63, 364, 206, 178, 317, 109, 117, 346, 263, 362, 77, 266,\n          384, 341, 211, 70, 293, 104, 338, 380, 220, 31, 117, 275, 227, 362,\n          95, 373, 202, 52, 20, 41, 332, 114, 167, 25, 390, 16, 138, 378, 256,\n          389, 362, 274, 113, 10, 282, 138, 310, 273\n        ]\n      ]\n    ],\n    \"output\": 6596\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          72, 383, 50, 90, 176, 324, 60, 11, 148, 71, 296, 4, 182, 90, 213, 363,\n          97, 113, 140, 239, 206, 197, 62, 33\n        ]\n      ]\n    ],\n    \"output\": 2368\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          388, 18, 47, 110, 23, 367, 282, 370, 259, 244, 98, 154, 357, 100, 357,\n          221, 376, 279, 179, 61, 66, 311, 166, 239, 219, 169, 155, 295, 122,\n          144, 338, 324, 19, 130, 314, 31, 172, 262, 167, 343, 265, 139, 192,\n          399, 237, 236, 139, 181, 345, 278, 262, 204\n        ]\n      ]\n    ],\n    \"output\": 6530\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          105, 70, 37, 79, 127, 320, 299, 353, 140, 51, 259, 362, 143, 350, 7,\n          355, 284, 35, 365, 46, 100, 199, 189, 17, 1, 7, 102, 382, 46, 351, 343\n        ]\n      ]\n    ],\n    \"output\": 3369\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          165, 344, 154, 186, 227, 179, 289, 100, 140, 193, 127, 301, 175, 90,\n          154, 359, 392, 168, 96, 215, 325, 266, 225\n        ]\n      ]\n    ],\n    \"output\": 2546\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          183, 6, 23, 132, 352, 383, 394, 302, 81, 134, 387, 139, 20, 339, 278,\n          387, 208, 370, 330, 97, 88, 72, 212, 97, 65, 130, 277, 143, 289, 261,\n          28, 182, 309, 94, 273, 134, 176, 376, 299, 112, 205, 36, 225, 67, 226,\n          147, 182, 139, 20, 367, 391, 281, 183, 231, 114, 14, 297, 330, 360,\n          178, 396, 317, 126, 96, 255, 71, 68, 311, 371, 284, 225, 146, 144, 55,\n          230, 297, 387, 196, 146, 279, 110, 227, 178, 236, 89, 57, 300, 304,\n          220, 233, 269, 336, 220\n        ]\n      ]\n    ],\n    \"output\": 10789\n  },\n  {\n    \"input\": [[\"numbers\", [227, 139, 143, 300, 256, 313]]],\n    \"output\": 752\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          358, 270, 340, 216, 391, 362, 32, 167, 342, 45, 374, 366, 11, 240,\n          155, 74, 120, 135, 343, 192, 304, 198, 198, 87, 118, 21, 267, 206,\n          210, 82, 324, 232, 225, 88, 82, 137, 72, 245, 239, 299, 372, 153, 258,\n          249, 146, 287, 265, 107, 375, 67, 36, 285, 137, 128, 356, 300, 191,\n          226, 273, 102, 175, 231, 245, 397, 329, 269, 374, 335, 313, 291, 245,\n          342, 307, 148, 2, 89, 116, 38, 37, 343\n        ]\n      ]\n    ],\n    \"output\": 9310\n  },\n  {\n    \"input\": [[\"numbers\", [353, 280]]],\n    \"output\": 353\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          93, 287, 128, 322, 249, 360, 178, 339, 80, 269, 71, 352, 60, 192, 191,\n          87, 400, 65, 20, 267, 373, 373, 212, 396, 69, 230, 131, 45, 399, 155,\n          290, 352, 92, 237, 249, 285, 127, 163, 85, 355, 208, 50, 202, 208,\n          239, 22, 34, 248, 329, 180, 368, 36, 183, 143, 48, 66, 54, 224, 10,\n          58, 317, 364, 88, 26, 284, 200, 220, 126, 83, 115, 167, 156, 261, 41,\n          187, 14, 29, 17, 112, 196, 328, 221, 24, 181, 68, 245\n        ]\n      ]\n    ],\n    \"output\": 9742\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          196, 58, 285, 351, 308, 192, 120, 302, 144, 45, 301, 270, 58, 247,\n          211, 297, 35, 296, 206, 201, 261, 108, 154, 302, 34, 82, 354, 244,\n          315, 87, 357, 59, 242, 14, 87, 53, 361, 195, 135, 148, 0, 396, 222,\n          343, 312, 119, 204, 334, 323, 0, 89, 177, 83, 200, 390\n        ]\n      ]\n    ],\n    \"output\": 6366\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          36, 383, 35, 279, 329, 150, 221, 213, 394, 325, 130, 274, 71, 313, 84,\n          291, 67, 278, 346, 63, 195, 225, 74, 93, 177, 248, 30, 272, 382\n        ]\n      ]\n    ],\n    \"output\": 3522\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          99, 10, 89, 339, 50, 20, 227, 96, 300, 270, 363, 132, 34, 249, 326,\n          85, 234, 277, 261, 69, 261, 222, 207, 382, 96, 392, 221, 169, 342,\n          309, 351, 3, 86, 303, 142, 19\n        ]\n      ]\n    ],\n    \"output\": 4214\n  },\n  {\n    \"input\": [[\"numbers\", [138, 385, 314, 180, 397]]],\n    \"output\": 782\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          230, 287, 371, 64, 12, 301, 265, 58, 134, 309, 376, 248, 263, 7, 371,\n          243, 19, 356, 328, 231, 324, 74, 29, 25, 22, 396, 43, 120, 398, 380,\n          0, 33, 228, 256, 270, 141, 80, 285, 332, 0, 240, 309, 204, 303, 63,\n          163, 224, 242, 248, 381, 99, 46, 40, 359, 44, 147, 341, 63, 105, 372,\n          82, 50, 260, 332, 58, 383, 68, 229, 190, 120, 185, 97, 27, 249, 219,\n          151, 194, 316, 72, 229, 306, 66, 104, 305, 169, 235, 49, 161, 355,\n          187, 119, 275, 47, 179, 83, 254, 153, 334\n        ]\n      ]\n    ],\n    \"output\": 11017\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          313, 66, 358, 289, 242, 324, 25, 388, 107, 6, 315, 195, 159, 154, 64,\n          199, 48, 241, 108, 242, 178, 340, 135, 345, 44, 63, 280, 215, 74, 41,\n          230, 139, 297, 379, 305, 86, 238, 136, 132, 333, 307, 104, 173, 238,\n          159, 30, 354, 364, 166, 363, 98, 221, 239, 339, 300, 387, 87, 239,\n          387, 100, 112, 276, 109, 96\n        ]\n      ]\n    ],\n    \"output\": 7756\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          167, 56, 398, 175, 83, 291, 85, 80, 102, 253, 275, 35, 53, 110, 117,\n          199, 331, 7, 288, 228, 327, 331, 20, 307, 332, 194, 189, 308, 378,\n          147, 347, 272, 51, 30, 255, 215, 366, 232, 272, 90, 185, 26, 381, 237,\n          385, 248, 320, 0, 172, 36, 45, 121\n        ]\n      ]\n    ],\n    \"output\": 6047\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          311, 379, 257, 349, 211, 0, 57, 152, 256, 290, 367, 275, 181, 168,\n          127, 362, 157, 309, 378, 42, 311, 254, 264, 195, 383, 184, 301, 263,\n          399, 144, 27, 148, 293, 215, 49, 3, 299, 62, 44, 296, 216, 117, 164,\n          300, 45, 244, 257\n        ]\n      ]\n    ],\n    \"output\": 5687\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          26, 294, 99, 179, 172, 320, 208, 395, 13, 113, 275, 292, 177, 385,\n          324, 180, 52, 351, 301, 206, 177, 107, 93, 233, 227, 5, 159, 209, 243,\n          174, 54, 304\n        ]\n      ]\n    ],\n    \"output\": 3761\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          205, 250, 240, 239, 370, 34, 45, 188, 286, 229, 65, 201, 83, 342, 342,\n          187, 17, 139, 127, 35, 330, 222, 15\n        ]\n      ]\n    ],\n    \"output\": 2431\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          228, 165, 249, 319, 194, 351, 189, 73, 350, 391, 226, 6, 182, 368,\n          147, 360, 388, 164, 91, 223, 13\n        ]\n      ]\n    ],\n    \"output\": 2589\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          141, 148, 300, 183, 288, 2, 338, 176, 119, 115, 217, 177, 212, 11,\n          312, 202, 182, 363, 42, 339, 45, 213, 239, 156, 68, 160, 138, 82, 239,\n          274, 303, 346\n        ]\n      ]\n    ],\n    \"output\": 3719\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          139, 293, 240, 179, 389, 353, 303, 81, 241, 154, 111, 144, 116, 344,\n          197, 355, 138, 196, 282, 202, 220, 70, 282, 152, 223, 201, 323, 233,\n          141, 45, 353, 22, 65, 125, 343, 112, 78, 60, 24, 387, 73, 387, 169,\n          73, 320, 278, 196, 288, 5, 282, 153, 360, 353, 255, 248, 229, 181, 4,\n          369, 311, 184, 180, 11, 3, 49, 179, 57, 308, 239, 318, 260, 241, 22,\n          277, 250, 166, 278, 185, 245, 115, 274, 198, 179, 130, 349, 87, 185,\n          203, 135, 329, 382\n        ]\n      ]\n    ],\n    \"output\": 10832\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          241, 352, 64, 88, 248, 38, 210, 229, 393, 95, 195, 113, 105, 51, 275,\n          60, 14, 367, 347, 224, 97, 396, 327, 63, 296, 374, 185, 340, 179, 297,\n          40, 363, 353, 142, 207, 53, 234, 278, 70, 271\n        ]\n      ]\n    ],\n    \"output\": 4958\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          299, 209, 298, 383, 59, 301, 340, 150, 86, 235, 119, 86, 237, 248,\n          190, 117, 326, 111, 330, 14, 9, 369, 263\n        ]\n      ]\n    ],\n    \"output\": 2820\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          154, 232, 115, 283, 12, 198, 185, 281, 256, 229, 130, 109, 362, 383,\n          60, 367, 187, 307, 136, 372, 91, 337, 272, 68, 257, 277, 329, 209,\n          141, 122, 5, 381, 70, 25, 89, 389, 89, 11, 294, 387, 75, 393, 236,\n          381, 202, 43, 287, 290, 271, 216, 349, 31, 3, 319, 364, 68, 283, 368,\n          52, 335, 336, 239, 341, 166, 178, 9, 177, 377, 176, 352, 60, 283, 272,\n          100, 238, 253, 68, 78, 398, 326, 235, 295, 87, 125, 334, 162, 38, 28,\n          385, 195, 250, 138, 203, 392, 40, 391\n        ]\n      ]\n    ],\n    \"output\": 12184\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          111, 107, 220, 149, 65, 171, 210, 176, 66, 222, 224, 139, 400, 216,\n          10, 132, 31, 150, 75, 245, 85, 45, 354, 69, 198, 169, 44, 339, 386,\n          78, 336, 379, 184, 185, 87, 306, 391, 111, 278, 358\n        ]\n      ]\n    ],\n    \"output\": 4092\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          162, 329, 367, 262, 35, 110, 177, 249, 255, 324, 348, 124, 253, 328,\n          246, 88, 282, 388, 160, 137, 269, 86, 275, 251, 218, 53, 305, 114, 98,\n          172, 215, 39, 46, 67, 369, 13, 370, 110, 223, 388, 381, 237, 143, 71,\n          288, 99, 218, 354, 281, 332, 211, 390, 337, 121, 361, 115, 142, 194,\n          202, 142, 107, 44, 302, 225, 164, 76, 218, 237, 155, 234, 272, 134,\n          131, 137, 187, 145, 305, 259, 37, 298, 171, 140, 140, 255, 68, 213,\n          227, 208, 333, 292, 109, 275, 221, 348, 26, 107\n        ]\n      ]\n    ],\n    \"output\": 11270\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          279, 391, 197, 171, 182, 181, 267, 323, 236, 128, 12, 84, 231, 203,\n          255, 91, 64, 369, 231, 343, 384, 170, 44, 123, 271, 41, 22, 186, 48,\n          372, 67, 165, 67, 103, 233, 61, 374, 44, 170, 270, 354, 336\n        ]\n      ]\n    ],\n    \"output\": 4769\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [94, 2, 203, 8, 178, 106, 51, 189, 41, 141, 156, 140, 383, 53, 20]\n      ]\n    ],\n    \"output\": 1203\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          303, 298, 237, 148, 145, 163, 79, 269, 329, 399, 88, 53, 138, 88, 322,\n          125, 124, 331, 50, 198, 88, 54, 207, 335, 162, 144, 112, 373, 118,\n          265, 391, 174, 195, 358, 388, 107, 212, 265, 39, 336, 55, 105, 197,\n          332, 32, 11, 38, 52, 25, 173, 207, 44, 53, 151, 226, 350, 11, 382,\n          342, 57, 199, 16, 322, 175, 26, 334, 36, 345, 195, 268, 335, 133, 398,\n          336, 148, 40, 258, 111, 149, 269, 178, 14, 174\n        ]\n      ]\n    ],\n    \"output\": 9187\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          39, 231, 271, 150, 144, 2, 257, 385, 307, 277, 166, 30, 58, 268, 186,\n          320, 189, 137, 26, 249, 67, 283, 328, 251, 330, 13, 210, 304, 320,\n          337, 20, 310, 263, 181, 50, 326, 212, 16, 119, 182, 136, 80, 369, 285,\n          235, 98, 129, 13, 100, 269, 167, 170, 275, 137, 396, 203, 143, 360,\n          18, 363, 8, 297, 14, 177, 364, 310, 193, 197, 331, 321, 191, 50, 167,\n          196, 342, 317, 281, 151, 392, 362, 320, 244, 52, 3, 209, 106, 383\n        ]\n      ]\n    ],\n    \"output\": 10408\n  },\n  {\n    \"input\": [[\"numbers\", [269, 175, 268, 380, 6]]],\n    \"output\": 649\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          192, 258, 348, 372, 379, 150, 126, 176, 245, 230, 389, 329, 331, 357,\n          47, 67, 277, 269, 10, 237, 26, 276, 251, 290, 179, 24, 152, 46, 87,\n          282, 225, 199, 254, 384, 380, 37, 372, 51, 220, 30, 22, 44, 34, 244\n        ]\n      ]\n    ],\n    \"output\": 4989\n  },\n  {\n    \"input\": [\n      [\"numbers\", [25, 214, 185, 99, 299, 157, 88, 272, 94, 353, 375, 207]]\n    ],\n    \"output\": 1345\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          217, 33, 86, 301, 264, 167, 260, 125, 181, 168, 301, 382, 191, 368,\n          240, 46, 356, 168\n        ]\n      ]\n    ],\n    \"output\": 2114\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          121, 169, 238, 354, 15, 354, 160, 2, 238, 22, 396, 222, 148, 21, 392,\n          73, 102, 26, 153, 325, 175, 231, 45, 160, 347, 126, 286, 291, 163,\n          129, 15, 73, 349, 240, 291, 242, 220, 209, 93, 361, 365, 241, 297,\n          359, 209, 381, 161, 12, 140, 277, 91, 78, 155, 148, 360, 208, 372, 44,\n          51, 307, 113, 341, 249, 63, 381, 391, 381, 76, 369, 1, 121, 107, 31,\n          298, 29, 164, 173, 176, 10, 392\n        ]\n      ]\n    ],\n    \"output\": 9828\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          167, 154, 385, 91, 51, 20, 371, 271, 127, 314, 210, 336, 209, 19, 339,\n          232, 188, 57, 363, 224, 389, 135, 125, 151, 188, 60, 104, 228, 60, 57,\n          4, 303, 224, 226, 292, 226, 370, 163, 143, 383, 275, 292, 65, 202,\n          399, 320, 350, 322, 392, 190, 12, 269, 306, 186, 190, 183, 142, 145,\n          395, 4, 68, 327, 347, 82, 151, 370, 305, 133, 145, 4, 394, 5, 223, 171\n        ]\n      ]\n    ],\n    \"output\": 8960\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [374, 88, 393, 285, 315, 37, 262, 380, 116, 120, 308, 49, 265]\n      ]\n    ],\n    \"output\": 1770\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          130, 61, 183, 377, 309, 22, 25, 47, 14, 115, 224, 373, 260, 144, 350,\n          73, 151, 347, 374, 143, 380, 225, 270, 59, 383, 78, 229, 325, 136,\n          336, 388, 165, 159, 397, 104, 55, 328, 270, 283, 388, 3, 326, 166, 13,\n          207, 391, 163, 338, 18, 233, 44, 205, 125, 16, 46, 102, 112, 72, 71,\n          218, 283, 72, 286, 307, 114, 392, 103, 278, 43, 103, 390, 194, 363,\n          28, 327, 8\n        ]\n      ]\n    ],\n    \"output\": 9079\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          113, 288, 180, 219, 380, 9, 20, 299, 138, 173, 147, 214, 316, 158, 97,\n          72, 399, 293, 381, 66, 11, 188, 195, 98, 364, 351, 393, 365, 80, 186,\n          163, 335, 27, 363, 234, 68, 371, 283, 206, 74, 366, 340, 366, 128,\n          349, 362, 396, 28, 321, 400, 213, 159, 219, 325, 257, 289, 215, 79,\n          171, 149, 329, 56, 56, 314, 200, 54, 390, 95, 324, 97, 369, 120, 287,\n          59, 83, 374, 69, 142, 276, 89, 59, 364, 312, 199, 50, 43, 81, 204,\n          145, 266, 297, 331\n        ]\n      ]\n    ],\n    \"output\": 11739\n  },\n  {\n    \"input\": [[\"numbers\", [60, 34, 230, 102]]],\n    \"output\": 290\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          234, 106, 77, 168, 221, 277, 334, 119, 185, 329, 134, 210, 86, 8, 174,\n          392, 213, 93, 82, 297\n        ]\n      ]\n    ],\n    \"output\": 1999\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          290, 324, 110, 146, 233, 253, 224, 186, 59, 64, 397, 93, 171, 97, 264,\n          310, 95, 158, 394, 189, 256, 378, 149, 150, 19, 376, 393, 191, 247,\n          211, 22\n        ]\n      ]\n    ],\n    \"output\": 3543\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          55, 400, 127, 187, 377, 328, 251, 65, 358, 312, 281, 131, 76, 328,\n          153, 174, 193, 17, 323, 85, 374, 347, 198, 154, 4, 239, 268, 213, 355,\n          101, 326, 4, 188, 320, 236, 165, 279, 330, 299, 281, 286, 195, 191,\n          82, 137, 180, 311, 69, 20, 14, 89, 325, 142, 337, 105, 99, 377, 242,\n          335, 220, 259, 134, 249, 283, 247, 160, 154, 367, 372, 84, 122, 337,\n          320, 350, 358\n        ]\n      ]\n    ],\n    \"output\": 9438\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          385, 273, 375, 336, 73, 265, 330, 269, 122, 147, 51, 253, 317, 372,\n          351, 361, 212, 152, 128, 100, 130, 296, 83, 217, 390, 362, 31, 289,\n          116, 19, 398, 212, 279, 389, 69, 155, 156, 332, 224, 320, 260, 4, 158,\n          159, 292, 20, 373, 233, 325, 311, 72\n        ]\n      ]\n    ],\n    \"output\": 6585\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          395, 81, 91, 345, 54, 66, 49, 67, 355, 43, 311, 25, 114, 340, 270,\n          370, 168, 320, 228, 317, 315, 313, 40, 309, 103, 203, 84, 303, 227,\n          62, 201, 148, 77, 97, 143, 292, 316, 107, 54, 33, 306, 345\n        ]\n      ]\n    ],\n    \"output\": 5044\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          393, 400, 161, 32, 96, 362, 84, 65, 338, 190, 37, 152, 198, 291, 192,\n          292, 88, 297, 52, 206, 240, 64, 254, 173, 399, 376, 397, 250, 396, 67,\n          64, 376, 212, 251, 124, 297, 224, 353, 389, 173, 220, 78, 190, 301,\n          322, 326, 156, 359, 109, 209, 286, 133, 336, 28, 381, 210, 67, 210,\n          107, 1, 10, 279, 181\n        ]\n      ]\n    ],\n    \"output\": 7984\n  },\n  {\n    \"input\": [[\"numbers\", [185, 82, 76, 55, 42, 388, 56, 119, 88, 43, 143]]],\n    \"output\": 811\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          183, 202, 365, 309, 176, 88, 303, 243, 329, 165, 304, 185, 208, 261,\n          230, 125, 291, 343, 357, 162, 25, 285, 377, 256, 38, 46, 246, 62, 152,\n          323, 397, 53, 240, 169, 119, 239, 247, 109, 124, 170, 104, 126, 78,\n          325, 163, 385, 338, 296, 136, 292, 350, 114, 163, 56, 304, 73, 224,\n          356, 4, 139, 31, 129, 72, 54, 330, 126, 299, 223, 356, 395, 6, 312,\n          13, 187, 360\n        ]\n      ]\n    ],\n    \"output\": 8954\n  },\n  {\n    \"input\": [[\"numbers\", [88, 17, 173, 16, 69, 292, 322, 107]]],\n    \"output\": 652\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          179, 377, 77, 328, 280, 85, 283, 238, 46, 359, 108, 130, 9, 27, 352,\n          5, 172, 83, 290, 32, 111, 121, 73, 224, 218, 336, 331, 203, 26, 335,\n          160, 102, 215, 169, 177, 166, 379, 12, 350, 79, 260, 243, 118, 217,\n          118, 287, 329, 191, 162, 296, 353, 311, 234, 378, 318, 58, 248\n        ]\n      ]\n    ],\n    \"output\": 6859\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          77, 201, 9, 76, 39, 53, 263, 235, 50, 337, 290, 247, 83, 58, 83, 295,\n          140, 357, 384, 177, 229, 48, 10, 317, 302, 133, 42, 284, 362, 133,\n          280, 257, 236, 346, 349, 220, 143, 201, 318, 54, 215, 297, 286, 27,\n          65, 80, 311, 143, 91, 114, 286, 133, 335, 185, 176, 322, 7, 242\n        ]\n      ]\n    ],\n    \"output\": 6406\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [142, 259, 16, 207, 164, 86, 272, 135, 287, 196, 114, 181, 187]\n      ]\n    ],\n    \"output\": 1326\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          354, 76, 260, 120, 195, 297, 57, 190, 207, 358, 388, 106, 222, 248,\n          360, 233, 134, 197, 239, 277, 75\n        ]\n      ]\n    ],\n    \"output\": 2562\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          286, 25, 171, 115, 316, 321, 288, 224, 198, 248, 122, 146, 382, 169,\n          259, 141, 177, 393, 320, 89, 355, 116, 265, 191, 297, 107, 321, 9,\n          300, 289, 164, 22, 108, 45, 382, 105, 52, 331, 229, 193, 13, 245, 237,\n          283, 293, 224, 296\n        ]\n      ]\n    ],\n    \"output\": 5987\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          244, 311, 248, 320, 16, 105, 87, 217, 353, 60, 75, 382, 169, 117, 294,\n          357, 129, 365, 318, 191, 61, 341, 32, 187, 194, 96, 313, 130, 71, 369,\n          354, 48, 334, 201, 250, 352, 291, 236, 267, 292, 7, 396, 221, 144, 44,\n          166, 187, 225, 245, 47, 339, 29, 76, 384, 74, 22, 135, 386, 124, 185,\n          84, 307, 233, 353, 231, 217, 306, 54, 266, 255, 7, 129, 227\n        ]\n      ]\n    ],\n    \"output\": 8742\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          17, 8, 349, 341, 219, 172, 134, 234, 348, 75, 319, 323, 81, 258, 13,\n          368, 95, 73, 11, 231, 230, 48, 202, 125, 77, 360, 18, 192, 146, 20,\n          135, 380, 282, 237, 343, 166, 325, 27, 201, 126, 270, 235, 354, 219,\n          194, 385, 314, 12, 345, 277, 167, 168, 345, 183, 370, 372, 39, 271,\n          177, 65, 38, 233, 253, 123, 335, 342, 184, 285, 281, 48, 268, 215, 48,\n          217, 303, 69, 161, 378\n        ]\n      ]\n    ],\n    \"output\": 9090\n  },\n  {\n    \"input\": [[\"numbers\", [375, 142, 251, 25, 390, 83, 141, 90, 187, 190, 27]]],\n    \"output\": 1347\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          238, 74, 370, 38, 281, 279, 2, 102, 237, 118, 240, 167, 81, 276, 68,\n          244, 5, 390, 63, 19, 379, 329, 302, 30, 38, 231, 57, 22, 192, 119,\n          277, 94, 223, 15, 360, 317, 51, 374, 140, 231, 229, 139, 313, 117, 15,\n          71, 347, 22, 383, 398, 7, 206, 2, 302, 237, 204, 99, 88, 58, 210, 393,\n          260, 398, 212, 48, 376, 333, 108, 340, 351, 78, 58, 295, 378, 193,\n          148, 136, 183, 384\n        ]\n      ]\n    ],\n    \"output\": 9116\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          44, 153, 48, 199, 125, 31, 164, 282, 307, 356, 146, 224, 16, 199, 54,\n          323, 71, 345, 307, 208, 50, 127, 308, 112, 204, 384, 376, 366, 322,\n          329, 70, 170, 256, 13, 120, 71, 152, 30, 4, 370, 303, 277, 55, 354,\n          262, 184, 98, 312, 177, 107, 262, 398, 346, 70, 366, 171\n        ]\n      ]\n    ],\n    \"output\": 6706\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          155, 71, 34, 265, 358, 242, 104, 187, 63, 173, 48, 265, 59, 16, 172,\n          187, 396, 339, 134, 321, 305, 75, 42, 255, 307, 259, 67, 160, 288, 17,\n          380, 305, 308, 373, 213, 145, 385, 247, 241, 296, 33, 231, 23, 205,\n          243, 31, 393, 13, 127, 323, 266, 34, 244, 337, 106, 176, 345\n        ]\n      ]\n    ],\n    \"output\": 6549\n  },\n  {\n    \"input\": [\n      [\n        \"numbers\",\n        [\n          64, 361, 239, 339, 297, 320, 272, 270, 216, 393, 267, 35, 223, 131,\n          222, 130, 373, 166, 121, 14, 210, 339, 130, 169, 269, 89, 320, 184,\n          192, 207, 176, 32, 311, 139, 160, 314, 298, 24, 330, 344, 341, 41, 66,\n          101, 156, 270, 16, 26, 107\n        ]\n      ]\n    ],\n    \"output\": 5837\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1720828800,
    "difficulty": "medium",
    "duration": 45,
    "excerpt": "Implement a function to find maximum money to rob in circular houses without alerting police",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/neighborhood-theft-circular",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "neighborhood-theft-circular",
    "subtitle": null,
    "title": "Neighborhood Theft (Circular)",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {number[]} numbers\n * @return {number}\n */\nexport default function neighborhoodTheftCircular(numbers) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function neighborhoodTheftCircular(numbers: number[]): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var m=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)m(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(t,o)&&o!==r&&m(t,o,{get:()=>e[o],enumerable:!(i=d(e,o))||i.enumerable});return t};var C=(t,e,r)=>(r=t!=null?f(x(t)):{},a(e||!t||!t.__esModule?m(r,\"default\",{value:t,enumerable:!0}):r,t)),M=t=>a(m({},\"__esModule\",{value:!0}),t);var s=y((_,h)=>{h.exports=_jsx_runtime});var R={};v(R,{default:()=>j});var n=C(s());var u=MDXCodeBlock;var c=`export default function neighborhoodTheftCircular(numbers: number[]): number {\n  // If there are no houses, return 0\n  if (numbers.length === 0) return 0;\n  // If there is only one house, return the amount in that house\n  if (numbers.length === 1) return numbers[0];\n\n  // Calculate the maximum amount of money that can be robbed by excluding either the first or the last house\n  const max1 = robSimple(numbers, 0, numbers.length - 2);\n  const max2 = robSimple(numbers, 1, numbers.length - 1);\n\n  // Return the maximum amount from the two calculated values\n  return Math.max(max1, max2);\n}\n\n// Helper function to find the maximum amount of money that can be robbed from a range of houses\nfunction robSimple(numbers: number[], start: number, end: number): number {\n  let t1 = 0,\n    t2 = 0;\n\n  // Iterate over the range of houses\n  for (let i = start; i <= end; i++) {\n    // Store the current value of t1 in a temporary variable\n    const temp = t1;\n    // Update t1 to be the maximum of robbing the current house plus the amount from t2, or the current value of t1\n    t1 = Math.max(numbers[i] + t2, t1);\n    // Update t2 to the previous value of t1\n    t2 = temp;\n  }\n\n  // Return the maximum amount of money that can be robbed from the given range of houses\n  return t1;\n}\n`;var l=`export default function neighborhoodTheftCircular(numbers: number[]): number {\n  // If there are no houses, return 0\n  if (numbers.length === 0) return 0;\n  // If there is only one house, return the amount in that house\n  if (numbers.length === 1) return numbers[0];\n\n  // Calculate the maximum amount of money that can be robbed by excluding either the first or the last house\n  const max1 = robWithMemo(numbers, 0, numbers.length - 2);\n  const max2 = robWithMemo(numbers, 1, numbers.length - 1);\n\n  // Return the maximum amount from the two calculated values\n  return Math.max(max1, max2);\n}\n\n// Helper function to find the maximum amount of money that can be robbed from a range of houses using memoization\nfunction robWithMemo(numbers: number[], start: number, end: number): number {\n  // Initialize the memoization array with -1 indicating uncomputed values\n  const memo: number[] = new Array(numbers.length).fill(-1);\n\n  // Recursive function with memoization\n  function dp(i: number): number {\n    // Base case: if i is beyond the end of the range, return 0\n    if (i > end) return 0;\n\n    // Return the cached value if it's already computed\n    if (memo[i] !== -1) return memo[i];\n\n    // Recursively compute the maximum amount by choosing to rob or not rob the current house\n    const robCurrent = numbers[i] + dp(i + 2); // Rob current house and move to the house after next\n    const skipCurrent = dp(i + 1); // Skip current house and move to the next house\n\n    // Store the result in the memo array\n    memo[i] = Math.max(robCurrent, skipCurrent);\n\n    return memo[i];\n  }\n\n  // Start the recursion from the starting index\n  return dp(start);\n}\n`;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"1. Bottom-Up Dynamic Programming\"}),`\n`,(0,n.jsx)(e.p,{children:\"Time complexity: O(n)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`N is the length of the array\n`,(0,n.jsx)(u,{children:c})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"2. Top-Down Dynamic Programming\"}),`\n`,(0,n.jsx)(e.p,{children:\"Time complexity: O(n)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"N is the length of the array\"}),`\n`]}),`\n`,(0,n.jsx)(u,{children:l})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var j=T;return M(R);})();\n;return Component;",
  "workspace": {
    "main": "/src/neighborhood-theft-circular.ts",
    "run": "/src/neighborhood-theft-circular.run.test.ts",
    "submit": "/src/neighborhood-theft-circular.submit.test.ts"
  }
}