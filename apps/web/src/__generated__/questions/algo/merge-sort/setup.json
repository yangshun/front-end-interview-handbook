{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/merge-sort\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/merge-sort.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/merge-sort.run.test.ts": "import mergeSort from './merge-sort';\n\ndescribe('mergeSort', () => {\n  test('empty', () => {\n    expect(mergeSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(mergeSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(mergeSort([2, 1])).toEqual([1, 2]);\n    expect(mergeSort([1, 2])).toEqual([1, 2]);\n  });\n});\n",
    "/src/merge-sort.submit.test.ts": "import mergeSort from './merge-sort';\n\ndescribe('mergeSort', () => {\n  test('empty', () => {\n    expect(mergeSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(mergeSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(mergeSort([2, 1])).toEqual([1, 2]);\n    expect(mergeSort([1, 2])).toEqual([1, 2]);\n  });\n\n  test('more than two elements', () => {\n    expect(mergeSort([10, 2, 4])).toEqual([2, 4, 10]);\n    expect(mergeSort([4, 5, 6, 1, 2, 3])).toEqual([1, 2, 3, 4, 5, 6]);\n    expect(mergeSort([1, 2, 3, 4, 5, 0])).toEqual([0, 1, 2, 3, 4, 5]);\n    expect(mergeSort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(mergeSort([5, 4, 3, 2, 1, 10, 9, 8, 7, 6])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(mergeSort([98322, 3242, 876, -234, 34, 12331])).toEqual([\n      -234, 34, 876, 3242, 12331, 98322,\n    ]);\n  });\n\n  test('duplicate elements', () => {\n    expect(mergeSort([1, 1])).toEqual([1, 1]);\n    expect(mergeSort([2, 2, 2])).toEqual([2, 2, 2]);\n    expect(mergeSort([2, 1, 2])).toEqual([1, 2, 2]);\n    expect(mergeSort([1, 1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1, 1]);\n    expect(mergeSort([7, 2, 4, 3, 1, 2])).toEqual([1, 2, 2, 3, 4, 7]);\n  });\n});\n",
    "/src/merge-sort.ts": "export default function mergeSort(arr: Array<number>): Array<number> {\n  // Return if array only has 0 or 1 elements (base case).\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  // Divide the array into two.\n  const midPoint = Math.floor(arr.length / 2);\n  const left = arr.slice(0, midPoint);\n  const right = arr.slice(midPoint);\n\n  // Merge sort each half recursively.\n  const sortedLeft = mergeSort(left);\n  const sortedRight = mergeSort(right);\n\n  // Merge sorted halves.\n  return merge(sortedLeft, sortedRight);\n}\n\n/**\n * Merges two sorted arrays of elements into one.\n */\nfunction merge(left: Array<number>, right: Array<number>): Array<number> {\n  // Create an empty array to store the merged result.\n  const mergedResult = [];\n\n  let l = 0;\n  let r = 0;\n  // Repeatedly compare smallest element from each half\n  // and append it to the merged result.\n  // When one half runs out of elements,\n  // append all the elements of the remaining half to the merged array\n  while (l < left.length && r < right.length) {\n    if (left[l] < right[r]) {\n      mergedResult.push(left[l]);\n      l++;\n    } else {\n      mergedResult.push(right[r]);\n      r++;\n    }\n  }\n\n  // Append any remaining elements from each sides.\n  mergedResult.push(...left.slice(l), ...right.slice(r));\n  return mergedResult;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<number>} arr The input integer array to be sorted.\n * @return {Array<number>}\n */\nexport default function recursiveMergeSort(arr) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function recursiveMergeSort(arr: Array<number>): Array<number> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/merge-sort.ts",
    "run": "/src/merge-sort.run.test.ts",
    "submit": "/src/merge-sort.submit.test.ts"
  }
}