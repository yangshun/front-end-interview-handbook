{
  "description": "var Component=(()=>{var h=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var c in e)l(n,c,{get:e[c],enumerable:!0})},i=(n,e,c,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!x.call(n,r)&&r!==c&&l(n,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return n};var B=(n,e,c)=>(c=n!=null?h(p(n)):{},i(e||!n||!n.__esModule?l(c,\"default\",{value:n,enumerable:!0}):c,n)),S=n=>i(l({},\"__esModule\",{value:!0}),n);var o=b((v,d)=>{d.exports=_jsx_runtime});var f={};g(f,{default:()=>O,frontmatter:()=>T});var t=B(o()),T={title:\"\\u4E8C\\u53C9\\u641C\\u7D22\\u6811\",excerpt:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u4E8C\\u53C9\\u641C\\u7D22\\u6811\\u6570\\u636E\\u7ED3\\u6784\\uFF0C\\u5305\\u62EC\\u57FA\\u672C\\u7684 BST \\u64CD\\u4F5C\"};function a(n){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u652F\\u6301\\u4EE5\\u4E0B\\u64CD\\u4F5C\\u7684\\u4E8C\\u53C9\\u641C\\u7D22\\u6811 (BST) \\u6570\\u636E\\u7ED3\\u6784\\uFF1A\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"new BST()\"}),\"\\uFF1A\\u521B\\u5EFA\\u4E00\\u4E2A BST \\u7C7B\\u7684\\u5B9E\\u4F8B\\u3002\\u5B83\\u5C06\\u6839\\u8282\\u70B9\\u521D\\u59CB\\u5316\\u4E3A \",(0,t.jsx)(e.code,{children:\"null\"}),\"\\uFF0C\\u56E0\\u4E3A\\u6700\\u521D\\u6811\\u4E2D\\u6CA1\\u6709\\u8282\\u70B9\\u3002\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"insert(value)\"}),\"\\uFF1A\\u5C06\\u4E00\\u4E2A\\u65B0\\u503C\\u6DFB\\u52A0\\u5230 BST \\u4E2D\\u3002\\u65B0\\u503C\\u88AB\\u63D2\\u5165\\u5230\\u6B63\\u786E\\u7684\\u4F4D\\u7F6E\\u4EE5\\u4FDD\\u6301\\u4E8C\\u53C9\\u641C\\u7D22\\u6811\\u7684\\u987A\\u5E8F\\u3002\\u5982\\u679C\\u6811\\u4E3A\\u7A7A\\uFF0C\\u5219\\u65B0\\u503C\\u6210\\u4E3A\\u6839\\u8282\\u70B9\\u3002\\u6240\\u9700\\u7684\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\uFF1A\\u5E73\\u5747\\u4E3A O(log n)\\uFF0C\\u4F46\\u5728\\u6811\\u53D8\\u6210\\u7EBF\\u6027\\u94FE\\u7684\\u6700\\u574F\\u60C5\\u51B5\\u4E0B\\u53EF\\u80FD\\u4F1A\\u964D\\u4F4E\\u5230 O(n)\\u3002\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"search(value)\"}),\"\\uFF1A\\u5728 BST \\u4E2D\\u641C\\u7D22\\u4E00\\u4E2A\\u503C\\u3002\\u5982\\u679C\\u8BE5\\u503C\\u5B58\\u5728\\u4E8E\\u6811\\u4E2D\\uFF0C\\u5219\\u8FD4\\u56DE \",(0,t.jsx)(e.code,{children:\"true\"}),\"\\uFF1B\\u5426\\u5219\\uFF0C\\u8FD4\\u56DE \",(0,t.jsx)(e.code,{children:\"false\"}),\"\\u3002\\u6B64\\u64CD\\u4F5C\\u4E5F\\u9075\\u5FAA\\u5E73\\u5747\\u65F6\\u95F4\\u590D\\u6742\\u5EA6 O(log n)\\uFF0C\\u4F46\\u5728\\u6700\\u574F\\u60C5\\u51B5\\u4E0B\\u53EF\\u80FD\\u53D8\\u4E3A O(n)\\u3002\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"delete(value)\"}),\"\\uFF1A\\u5982\\u679C\\u5B58\\u5728\\uFF0C\\u5219\\u4ECE BST \\u4E2D\\u5220\\u9664\\u4E00\\u4E2A\\u503C\\u3002\\u6B64\\u65B9\\u6CD5\\u9700\\u8981\\u5904\\u7406\\u4E09\\u79CD\\u60C5\\u51B5\\uFF1A\\u5220\\u9664\\u6CA1\\u6709\\u5B50\\u8282\\u70B9\\u7684\\u8282\\u70B9\\u3001\\u4E00\\u4E2A\\u5B50\\u8282\\u70B9\\u7684\\u8282\\u70B9\\u6216\\u4E24\\u4E2A\\u5B50\\u8282\\u70B9\\u7684\\u8282\\u70B9\\u3002\\u8BE5\\u51FD\\u6570\\u5728\\u5220\\u9664\\u540E\\u4FDD\\u6301 BST \\u7684\\u5C5E\\u6027\\u3002\\u6240\\u9700\\u7684\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\uFF1A\\u5E73\\u5747\\u4E3A O(log n)\\uFF0C\\u4F46\\u5728\\u6700\\u574F\\u60C5\\u51B5\\u4E0B\\u53EF\\u80FD\\u4E3A O(n)\\u3002\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"\\u4F8B\\u5B50\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const bst = new BST();\nbst.insert(15);\nbst.insert(10);\nbst.insert(20);\nbst.search(10); // true\nbst.delete(10);\nbst.search(10); // false\n`})})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var O=j;return S(f);})();\n;return Component;",
  "info": {
    "excerpt": "实现一个二叉搜索树数据结构，包括基本的 BST 操作",
    "title": "二叉搜索树"
  },
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var n in e)o(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,u)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!T.call(t,l)&&l!==n&&o(t,l,{get:()=>e[l],enumerable:!(u=v(e,l))||u.enumerable});return t};var S=(t,e,n)=>(n=t!=null?f(g(t)):{},i(e||!t||!t.__esModule?o(n,\"default\",{value:t,enumerable:!0}):n,t)),B=t=>i(o({},\"__esModule\",{value:!0}),t);var s=m((M,c)=>{c.exports=_jsx_runtime});var y={};w(y,{default:()=>O});var r=S(s());var d=MDXCodeBlock;var a=`class Node {\n  constructor(value = null) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport default class BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n\n  /**\n   * Inserts a new value into the BST while maintaining BST properties.\n   * @param {*} value The value to be inserted into the BST.\n   */\n  insert(value) {\n    const newNode = new Node(value);\n    if (this.root === null) {\n      this.root = newNode;\n      return;\n    }\n\n    let currentNode = this.root;\n    let parent = null;\n    while (currentNode) {\n      parent = currentNode;\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n\n    if (value < parent.value) {\n      parent.left = newNode;\n    } else {\n      parent.right = newNode;\n    }\n  }\n\n  /**\n   * Searches for a value in the BST. Returns true if the value exists, false otherwise.\n   * @param {*} value The value to search for.\n   * @return {boolean} True if the value is found, false otherwise.\n   */\n  search(value) {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (value === currentNode.value) {\n        return true;\n      }\n      currentNode =\n        value < currentNode.value ? currentNode.left : currentNode.right;\n    }\n    return false;\n  }\n\n  /**\n   * Deletes a value from the BST, if it exists, while maintaining BST properties.\n   * @param {*} value The value to be deleted from the BST.\n   */\n  delete(value) {\n    let currentNode = this.root;\n    let parent = null;\n\n    // Find the node and its parent.\n    while (currentNode && currentNode.value !== value) {\n      parent = currentNode;\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n\n    if (!currentNode) {\n      return; // Node not found.\n    }\n\n    // Node has two children.\n    if (currentNode.left && currentNode.right) {\n      let successor = currentNode.right;\n      let successorParent = currentNode;\n\n      // Find the node with the smallest value in the right subtree and take note of its parent.\n      while (successor.left) {\n        successorParent = successor;\n        successor = successor.left;\n      }\n\n      currentNode.value = successor.value; // Replace value.\n      currentNode = successor; // Move pointer to successor, which will be deleted.\n      parent = successorParent;\n    }\n\n    // Node has one or zero children.\n    let child = currentNode.left ? currentNode.left : currentNode.right;\n\n    // If the node to be deleted is the root node.\n    if (!parent) {\n      this.root = child;\n    } else {\n      if (parent.left === currentNode) {\n        parent.left = child;\n      } else {\n        parent.right = child;\n      }\n    }\n  }\n}\n`;var h=`class Node<T> {\n  value: number | null;\n  left: Node<T> | null;\n  right: Node<T> | null;\n\n  constructor(value: number | null = null) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport default class BinarySearchTree<T> {\n  root: Node<T> | null;\n\n  constructor() {\n    this.root = null;\n  }\n\n  /**\n   * Inserts a new value into the BST while maintaining BST properties.\n   * @param value The value to be inserted into the BST.\n   */\n  insert(value: number): void {\n    const newNode = new Node(value);\n    if (this.root === null) {\n      this.root = newNode;\n      return;\n    }\n\n    let currentNode: Node<T> | null = this.root;\n    let parent: Node<T> | null = null;\n    while (currentNode) {\n      parent = currentNode;\n      if (value < currentNode.value!) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n\n    if (parent && value < parent.value!) {\n      parent.left = newNode;\n    } else if (parent) {\n      parent.right = newNode;\n    }\n  }\n\n  /**\n   * Searches for a value in the BST. Returns true if the value exists, false otherwise.\n   * @param value The value to search for.\n   * @return True if the value is found, false otherwise.\n   */\n  search(value: number): boolean {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (value === currentNode.value) {\n        return true;\n      }\n      currentNode =\n        value < currentNode.value! ? currentNode.left : currentNode.right;\n    }\n    return false;\n  }\n\n  /**\n   * Deletes a value from the BST, if it exists, while maintaining BST properties.\n   * @param value The value to be deleted from the BST.\n   */\n  delete(value: number): void {\n    let currentNode = this.root;\n    let parent: Node<T> | null = null;\n\n    // Find the node and its parent.\n    while (currentNode && currentNode.value !== value) {\n      parent = currentNode;\n      if (value < currentNode.value!) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n\n    if (!currentNode) {\n      return; // Node not found.\n    }\n\n    // Node has two children.\n    if (currentNode.left && currentNode.right) {\n      let successor = currentNode.right;\n      let successorParent = currentNode;\n\n      // Find the node with the smallest value in the right subtree and take note of its parent.\n      while (successor.left) {\n        successorParent = successor;\n        successor = successor.left;\n      }\n\n      currentNode.value = successor.value; // Replace value.\n      currentNode = successor; // Move pointer to successor, which will be deleted.\n      parent = successorParent;\n    }\n\n    // Node has one or zero children.\n    let child = currentNode.left ? currentNode.left : currentNode.right;\n\n    // If the node to be deleted is the root node.\n    if (!parent) {\n      this.root = child;\n    } else {\n      if (parent.left === currentNode) {\n        parent.left = child;\n      } else {\n        parent.right = child;\n      }\n    }\n  }\n}\n`;function N(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\",img:\"img\",strong:\"strong\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"\\u89E3\\u51B3\\u65B9\\u6848\"}),`\n`,(0,r.jsx)(e.p,{children:\"\\u4E8C\\u53C9\\u641C\\u7D22\\u6811 (BST) \\u662F\\u8BA1\\u7B97\\u673A\\u79D1\\u5B66\\u4E2D\\u7684\\u4E00\\u79CD\\u57FA\\u672C\\u6570\\u636E\\u7ED3\\u6784\\uFF0C\\u4E3B\\u8981\\u7528\\u4E8E\\u4EE5\\u6392\\u5E8F\\u987A\\u5E8F\\u7EF4\\u62A4\\u52A8\\u6001\\u53D8\\u5316\\u7684\\u6570\\u636E\\u96C6\\u3002BST \\u4E2D\\u7684\\u6BCF\\u4E2A\\u8282\\u70B9\\u90FD\\u5305\\u542B\\u4E00\\u4E2A\\u952E\\u548C\\u6307\\u5411\\u5176\\u5DE6\\u5B50\\u8282\\u70B9\\u548C\\u53F3\\u5B50\\u8282\\u70B9\\u7684\\u6307\\u9488\\u3002\\u8BE5\\u6811\\u7684\\u7ED3\\u6784\\u4F7F\\u5F97\\u5BF9\\u4E8E\\u4EFB\\u4F55\\u7ED9\\u5B9A\\u7684\\u8282\\u70B9\\uFF0C\\u5176\\u5DE6\\u5B50\\u6811\\u4E2D\\u7684\\u6240\\u6709\\u8282\\u70B9\\u90FD\\u5177\\u6709\\u5C0F\\u4E8E\\u8BE5\\u8282\\u70B9\\u952E\\u7684\\u952E\\uFF0C\\u5E76\\u4E14\\u5176\\u53F3\\u5B50\\u6811\\u4E2D\\u7684\\u6240\\u6709\\u8282\\u70B9\\u90FD\\u5177\\u6709\\u5927\\u4E8E\\u8BE5\\u8282\\u70B9\\u952E\\u7684\\u952E\\u3002\\u6B64\\u5C5E\\u6027\\u652F\\u6301\\u9AD8\\u6548\\u7684\\u641C\\u7D22\\u3001\\u63D2\\u5165\\u548C\\u5220\\u9664\\u64CD\\u4F5C\\u3002\"}),`\n`,(0,r.jsx)(d,{languages:{jsx:a,tsx:h}}),`\n`,(0,r.jsx)(e.h3,{children:\"\\u64CD\\u4F5C\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"new BST()\"}),\"\\uFF1A\\u521D\\u59CB\\u5316 BST \\u7684\\u65B0\\u5B9E\\u4F8B\\u3002\\u6784\\u9020\\u51FD\\u6570\\u5C06\\u6811\\u7684\\u6839\\u8BBE\\u7F6E\\u4E3A null\\uFF0C\\u8868\\u793A\\u6811\\u6700\\u521D\\u4E3A\\u7A7A\\u3002\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"insert(value)\"}),\"\\uFF1A\\u5C06\\u5177\\u6709\\u7ED9\\u5B9A\\u503C\\u7684\\u8282\\u70B9\\u6DFB\\u52A0\\u5230 BST\\u3002\\u5982\\u679C\\u6811\\u4E3A\\u7A7A\\uFF0C\\u5219\\u65B0\\u8282\\u70B9\\u5C06\\u6210\\u4E3A\\u6839\\u3002\\u5982\\u679C\\u4E0D\\u662F\\uFF0C\\u5219\\u4ECE\\u6839\\u5F00\\u59CB\\u904D\\u5386\\u6811\\uFF0C\\u4EE5\\u627E\\u5230\\u65B0\\u8282\\u70B9\\u4EE5\\u7EF4\\u62A4 BST \\u5C5E\\u6027\\u7684\\u6B63\\u786E\\u4F4D\\u7F6E\\u3002\\u6B64\\u64CD\\u4F5C\\u6D89\\u53CA\\u5C06\\u65B0\\u503C\\u4E0E\\u5F53\\u524D\\u8282\\u70B9\\u7684\\u503C\\u8FDB\\u884C\\u6BD4\\u8F83\\uFF0C\\u5E76\\u51B3\\u5B9A\\u5411\\u5DE6\\u6216\\u5411\\u53F3\\u79FB\\u52A8\\u3002\\u5E73\\u5747\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u4E3A O(log n)\\uFF0C\\u4F46\\u5982\\u679C\\u6309\\u5347\\u5E8F/\\u964D\\u5E8F\\u63D2\\u5165\\u503C\\uFF0C\\u5219\\u53EF\\u80FD\\u4F1A\\u964D\\u4F4E\\u5230 O(n)\\u3002\"]}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:\"/img/questions/binary-search-tree/insert.png\",alt:\"Insert\"})}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"search(value)\"}),\"\\uFF1A\\u641C\\u7D22\\u5305\\u542B\\u6307\\u5B9A\\u503C\\u7684\\u8282\\u70B9\\u3002\\u4ECE\\u6839\\u5F00\\u59CB\\uFF0C\\u6839\\u636E\\u76EE\\u6807\\u503C\\u4E0E\\u5F53\\u524D\\u8282\\u70B9\\u7684\\u503C\\u7684\\u6BD4\\u8F83\\u7ED3\\u679C\\uFF0C\\u5411\\u5DE6\\u6216\\u5411\\u53F3\\u904D\\u5386\\u6811\\u3002\\u91CD\\u590D\\u6B64\\u8FC7\\u7A0B\\uFF0C\\u76F4\\u5230\\u627E\\u5230\\u8BE5\\u503C\\u6216\\u5230\\u8FBE\\u53F6\\u5B50\\u3002\\u4E0E \",(0,r.jsx)(e.code,{children:\"insert(value)\"}),\" \\u7C7B\\u4F3C\\uFF0C\\u5E73\\u5747\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u4E3A O(log n)\\uFF0C\\u6700\\u574F\\u60C5\\u51B5\\u4E3A O(n)\\u3002\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"delete(value)\"}),\"\\uFF1A\\u4ECE BST \\u4E2D\\u5220\\u9664\\u5177\\u6709\\u6307\\u5B9A\\u503C\\u7684\\u8282\\u70B9\\u3002\\u6B64\\u64CD\\u4F5C\\u66F4\\u4E3A\\u590D\\u6742\\uFF0C\\u56E0\\u4E3A\\u5B83\\u9700\\u8981\\u5904\\u7406\\u4E09\\u79CD\\u60C5\\u51B5\\uFF1A\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"\\u53F6\\u8282\\u70B9\\uFF1A\\u76F4\\u63A5\\u5220\\u9664\\u8BE5\\u8282\\u70B9\\u3002\"}),`\n`,(0,r.jsx)(e.li,{children:\"\\u5177\\u6709\\u4E00\\u4E2A\\u5B50\\u8282\\u70B9\\u7684\\u8282\\u70B9\\uFF1A\\u5220\\u9664\\u8BE5\\u8282\\u70B9\\u5E76\\u5C06\\u5176\\u66FF\\u6362\\u4E3A\\u5176\\u5B50\\u8282\\u70B9\\u3002\"}),`\n`,(0,r.jsx)(e.li,{children:\"\\u5177\\u6709\\u4E24\\u4E2A\\u5B50\\u8282\\u70B9\\u7684\\u8282\\u70B9\\uFF1A\\u5C06\\u8282\\u70B9\\u7684\\u503C\\u66FF\\u6362\\u4E3A\\u53F3\\u5B50\\u6811\\u4E2D\\u7684\\u6700\\u5C0F\\u503C\\uFF0C\\u7136\\u540E\\u5220\\u9664\\u540E\\u7EE7\\u8282\\u70B9\\u3002\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:\"/img/questions/binary-search-tree/delete.png\",alt:\"Delete\"})}),`\n`,(0,r.jsx)(e.p,{children:\"\\u5220\\u9664\\u8FC7\\u7A0B\\u786E\\u4FDD\\u5728\\u5220\\u9664\\u8282\\u70B9\\u540E\\u7EF4\\u62A4 BST \\u5C5E\\u6027\\u3002\\u4E0E\\u63D2\\u5165\\u7C7B\\u4F3C\\uFF0C\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u5E73\\u5747\\u4E3A O(log n)\\uFF0C\\u4F46\\u53EF\\u80FD\\u53D8\\u4E3A O(n)\\u3002\"}),`\n`,(0,r.jsx)(e.h2,{children:\"\\u8FB9\\u7F18\\u60C5\\u51B5\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"\\u63D2\\u5165\\u6811\\u4E2D\\u5DF2\\u5B58\\u5728\\u7684\\u503C\\u3002\"}),`\n`,(0,r.jsx)(e.li,{children:\"\\u4ECE\\u7A7A\\u6811\\u6216\\u4E0D\\u5B58\\u5728\\u7684\\u503C\\u4E2D\\u5220\\u9664\\u8282\\u70B9\\u3002\"}),`\n`,(0,r.jsx)(e.li,{children:\"\\u641C\\u7D22\\u6811\\u4E2D\\u4E0D\\u5B58\\u5728\\u7684\\u503C\\u3002\"}),`\n`,(0,r.jsx)(e.li,{children:\"\\u5220\\u9664\\u4E8C\\u53C9\\u641C\\u7D22\\u6811\\u4E2D\\u7684\\u91CD\\u590D\\u503C\\u3002\"}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"\\u6280\\u672F\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"\\u4E2D\\u5E8F\\u904D\\u5386\"}),\"\\uFF1A\\u5728\\u5220\\u9664\\u64CD\\u4F5C\\u671F\\u95F4\\u7528\\u4E8E\\u67E5\\u627E\\u540E\\u7EE7\\u8282\\u70B9\\u3002\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"\\u9762\\u5411\\u5BF9\\u8C61\\u8BBE\\u8BA1\"}),\"\\uFF1A\\u4F7F\\u7528 Node \\u7C7B\\u8868\\u793A\\u6BCF\\u4E2A\\u6811\\u8282\\u70B9\\uFF0C\\u5E76\\u4F7F\\u7528 BST \\u7C7B\\u8FDB\\u884C\\u6811\\u64CD\\u4F5C\\uFF0C\\u4ECE\\u800C\\u63D0\\u4F9B\\u6E05\\u6670\\u7684\\u7ED3\\u6784\\u548C\\u5C01\\u88C5\\u3002\"]}),`\n`]}),`\n`,(0,r.jsxs)(e.p,{children:[\"\\u6B64\\u4E8C\\u53C9\\u641C\\u7D22\\u6811\\u5B9E\\u73B0\\u4F7F\\u7528\\u8FED\\u4EE3\\u89E3\\u51B3\\u65B9\\u6848\\uFF0C\\u800C \",(0,r.jsx)(e.code,{children:\"delete(value)\"}),\" \\u7684\\u9012\\u5F52\\u89E3\\u51B3\\u65B9\\u6848\\u53EF\\u80FD\\u66F4\\u5BB9\\u6613\\u5B9E\\u73B0\\u3002\"]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(N,t)})):N(t)}var O=j;return B(y);})();\n;return Component;"
}