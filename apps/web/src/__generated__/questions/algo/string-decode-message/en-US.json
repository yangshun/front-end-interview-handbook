{
  "description": "var Component=(()=>{var g=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},o=(t,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==i&&s(t,r,{get:()=>e[r],enumerable:!(d=u(e,r))||d.enumerable});return t};var y=(t,e,i)=>(i=t!=null?g(x(t)):{},o(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),j=t=>o(s({},\"__esModule\",{value:!0}),t);var c=b((C,a)=>{a.exports=_jsx_runtime});var _={};w(_,{default:()=>T,frontmatter:()=>B});var n=y(c());var l=MDXTestExamples;var h=[{input:[[\"str\",\"225\"]],output:3,explanation:\"'225' can be decoded as 'BY' (2 26), 'VE' (22 5), or 'BBE' (2 2 5).\"},{input:[[\"str\",\"10\"]],output:1,explanation:\"'10' can be decoded as 'J' (10).\"},{input:[[\"str\",\"1106\"]],output:1,explanation:\"'1106' can be decoded as 'AJF' (1 10 6). The grouping (11 06) is invalid because '06' is not a valid code.\"}];var B={title:\"Decode Message\",excerpt:\"Implement a function to count ways to decode a numeric string\"};function p(t){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",h3:\"h3\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"A secret message is encoded as a string of digits, where each digit or pair of digits represents a letter according to the following mapping:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"'1' \\u2192 'A', '2' \\u2192 'B', ..., '26' \\u2192 'Z'\"})}),`\n`,(0,n.jsx)(e.p,{children:'The message can be decoded in multiple ways depending on how the digits are grouped. For example, the string \"226\" can be interpreted as:'}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`\"2 26\" \\u2192 'BZ'`}),`\n`,(0,n.jsx)(e.li,{children:`\"22 6\" \\u2192 'VF'`}),`\n`,(0,n.jsx)(e.li,{children:`\"2 2 6\" \\u2192 'BBF'`}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Given a string \",(0,n.jsx)(e.code,{children:\"str\"}),\" that contains only digits, find out how many ways it can be decoded. If the string cannot be decoded in any valid way, return \",(0,n.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"str: string\"}),\": String consisting only of digits to decode\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The test cases are designed so that the answer fits within a 32-bit integer\"}),`\n`,(0,n.jsx)(e.li,{children:\"There may be strings that are impossible to decode\"}),`\n`,(0,n.jsx)(e.li,{children:'Not all digit groupings are valid. For example, \"06\" is invalid since numbers cannot have leading zeros'}),`\n`]}),`\n`,(0,n.jsx)(l,{testCases:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"1 <= \",(0,n.jsx)(e.code,{children:\"str.length\"}),\" <= 100\"]}),`\n`]})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var T=F;return j(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/string-decode-message\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/string-decode-message.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [[\"str\", \"225\"]],\n    \"output\": 3,\n    \"explanation\": \"'225' can be decoded as 'BY' (2 26), 'VE' (22 5), or 'BBE' (2 2 5).\"\n  },\n  {\n    \"input\": [[\"str\", \"10\"]],\n    \"output\": 1,\n    \"explanation\": \"'10' can be decoded as 'J' (10).\"\n  },\n  {\n    \"input\": [[\"str\", \"1106\"]],\n    \"output\": 1,\n    \"explanation\": \"'1106' can be decoded as 'AJF' (1 10 6). The grouping (11 06) is invalid because '06' is not a valid code.\"\n  }\n]\n",
    "/src/string-decode-message.run.test.ts": "import fn from './string-decode-message';\nimport runTestCases from './run.tests.json';\n\ndescribe('decodeMessage', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = [${example.input[0][1]}]`, () => {\n      expect(fn(example.input[0][1])).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/string-decode-message.submit.test.ts": "import decodeMessage from './string-decode-message';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('decodeMessage', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`str = [${example.input[0][1]}]`, () => {\n      expect(decodeMessage(example.input[0][1])).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/string-decode-message.ts": "export default function decodeMessage(str: string): number {\n  // DP array to store the subproblem results\n  const dp: number[] = new Array(str.length + 1).fill(0);\n\n  // Base case: There's one way to decode an empty string\n  dp[0] = 1;\n\n  // Ways to decode a string of size 1 is 1, unless the string is '0'\n  dp[1] = str[0] === '0' ? 0 : 1;\n\n  // Iterate through the string to fill the DP array\n  for (let i = 2; i <= str.length; i++) {\n    // Check if successful single digit decode is possible\n    if (str[i - 1] !== '0') {\n      dp[i] += dp[i - 1];\n    }\n\n    // Check if successful two-digit decode is possible\n    const twoDigit = parseInt(str.substring(i - 2, i), 10);\n    if (twoDigit >= 10 && twoDigit <= 26) {\n      dp[i] += dp[i - 2];\n    }\n  }\n\n  // The last element in the DP array contains the number of ways to decode the entire string\n  return dp[str.length];\n}\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"s\", \"951534\"]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"s\", \"67166\"]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"s\", \"388419\"]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"s\", \"2515\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [[\"s\", \"8258156555\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [[\"s\", \"120034\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"9097675\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"01\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"4\"]],\n    \"output\": 1\n  },\n  {\n    \"input\": [[\"s\", \"860453\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"3385141787121751355183621776586208471498\"]],\n    \"output\": 480\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"71364296515529662422928668231568254764764642594511453934799167145842192\"\n      ]\n    ],\n    \"output\": 9216\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"036116775472841673603561356205344831964268941428970691986001873779\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\"s\", \"572499747575836291497516468437229143186412954951284755792192\"]\n    ],\n    \"output\": 768\n  },\n  {\n    \"input\": [[\"s\", \"84134977126267\"]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"s\", \"26151296662153494853281681\"]],\n    \"output\": 48\n  },\n  {\n    \"input\": [[\"s\", \"16993118052213364462\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"49851349198996633922616519795241497854453486125847399429962139113111919175257783327613493\"\n      ]\n    ],\n    \"output\": 414720\n  },\n  {\n    \"input\": [[\"s\", \"4546127661201281786705\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"754826628382638443148467486854964462559574833\"]],\n    \"output\": 16\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"41996926750331854709976254741607952913903656754628287668619928554509\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"35258455412114\"]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"s\", \"511828130242806935063583362097253\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"315698472736574516316639973217998459542958\"]],\n    \"output\": 24\n  },\n  {\n    \"input\": [[\"s\", \"134189110979866557408783395037632592984054605488932\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"645716181738142976718174596632227224857266622292\"]],\n    \"output\": 3456\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"1118572396590270970688088590469902868885824573290849249656175637816775085557\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\"s\", \"35838885989842631594395621551923349644869914252782659262\"]\n    ],\n    \"output\": 768\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"1274543961024392546494641302278642956537223585730528195644732345261638075811396304076636919099568\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"3721951276664819432656978725821275396843752437382976153318299577443975931338449258\"\n      ]\n    ],\n    \"output\": 4608\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"81738644408588995236843386766693452107785208573218331190035555752592383659553526581910952254387258\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"7244652938158236971856386817531\"]],\n    \"output\": 32\n  },\n  {\n    \"input\": [\n      [\"s\", \"081641260382755652501389185124089072039544976892941946699114\"]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"1895747276913447\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [[\"s\", \"3329524276581979399719285150\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"82689559623983524763668897158345766328937531393672374649761999979853451\"\n      ]\n    ],\n    \"output\": 128\n  },\n  {\n    \"input\": [[\"s\", \"794097108352455283653545\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"173941357553216779697441936\"]],\n    \"output\": 24\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"98578343556606579629582625811607917370162365061738657511224140246760916402964716\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"35214314317244932143957111958277111573566395887886814518942359832996433244165679\"\n      ]\n    ],\n    \"output\": 57600\n  },\n  {\n    \"input\": [\n      [\"s\", \"2172917165167893377638835189550762883430553285018769774672038758\"]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"3948111189269543\"]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"s\", \"001\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"354129754321472265768375571512549498597552938948823626331966524681354298211252735982984973554914767\"\n      ]\n    ],\n    \"output\": 55296\n  },\n  {\n    \"input\": [[\"s\", \"265894901870856105980165226571598109123534393491728485\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"48258235745663418219731275673538479199279812333145298662615191129476253276646785852839625756666749\"\n      ]\n    ],\n    \"output\": 55296\n  },\n  {\n    \"input\": [[\"s\", \"3335213626445150450017204359698573372\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"28537855868364278596\"]],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"2019640896437146574650808437536052169913144921079635531178450547528787859909193\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"7416713\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\"s\", \"18624692182284824261263174169961235485723894897487900039424\"]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"5438146551993645293652576351188969311891118824185931648442928566245632175282261398192199\"\n      ]\n    ],\n    \"output\": 622080\n  },\n  {\n    \"input\": [[\"s\", \"00004238397725472432313\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"98483877643339142636232218\"]],\n    \"output\": 40\n  },\n  {\n    \"input\": [[\"s\", \"086585588255860527\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"7961294774136763278325176852869355657731646889\"]],\n    \"output\": 32\n  },\n  {\n    \"input\": [\n      [\"s\", \"514272871263936028845849568506507375502909847129393651999670\"]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"675434545581356378158456392\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [[\"s\", \"538175635607261823099178799860477836\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"34551839794581365624113775629791863477\"]],\n    \"output\": 48\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"6803067673607105167540214731613200021529513150938320286096745154935311693008863934588351698182908420\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"1588684881675644747792\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"569455906777996749385684368240300721121722603029306471496734643144280305707790547\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"229167999239227294812731185647336985533192678669239642921771813226242686944262916246873738986\"\n      ]\n    ],\n    \"output\": 884736\n  },\n  {\n    \"input\": [[\"s\", \"76\"]],\n    \"output\": 1\n  },\n  {\n    \"input\": [[\"s\", \"319159185188438629416113393957775937393\"]],\n    \"output\": 96\n  },\n  {\n    \"input\": [[\"s\", \"03651310280812778033837984743639015912043077753\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\"s\", \"579486439725347656566198698991965818273165445656136299415\"]\n    ],\n    \"output\": 128\n  },\n  {\n    \"input\": [\n      [\"s\", \"9425760211101812953748281207647732032146833726957321124941\"]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"158756196\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"2478564328687507871005238088238761143897166176076122980493545233981729886806491232624\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"722948919998819735499985727512291\"]],\n    \"output\": 24\n  },\n  {\n    \"input\": [[\"s\", \"9076869128683192706692994445880107279177748268223478917\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"7786397719762488494736999958853945879234236631163149149213565339243686649\"\n      ]\n    ],\n    \"output\": 1152\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"8890118529313548388363770750918868396008341490052613812744053903728935688783517316689\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"182243955385422151\"]],\n    \"output\": 30\n  },\n  {\n    \"input\": [[\"s\", \"55655244391898223236605773129542972236441951901197\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"562\"]],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"2634095797557772845570851799652233279340161708343364910542042823553394848\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\"s\", \"9656294327945494875745892836274889115276896267315476362766843\"]\n    ],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"s\", \"385339489153693385003052292\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"6217291396799\"]],\n    \"output\": 6\n  },\n  {\n    \"input\": [[\"s\", \"8152438987340851575483245480616849819\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"1171624489479229131747718827184229975899973575344134623736352264632474294891526446596848625\"\n      ]\n    ],\n    \"output\": 147456\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"102375750481249605191518786236721141619192322345516052865573853342\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"48573157718229982153217879494784575124576931943141426714496496143262372726\"\n      ]\n    ],\n    \"output\": 110592\n  },\n  {\n    \"input\": [[\"s\", \"0632427447221241788460457334207136\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"17336817288842589218941897155448333723366454873965933773615291187736393729591194668142\"\n      ]\n    ],\n    \"output\": 6912\n  },\n  {\n    \"input\": [[\"s\", \"2750515796459022624609\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"957\"]],\n    \"output\": 1\n  },\n  {\n    \"input\": [[\"s\", \"776639430598\"]],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"15176549868889478828965232433925196418412267952225579947868175472899592999716\"\n      ]\n    ],\n    \"output\": 12800\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"5200647416363054072166603736827369423820737048079524484190707260149738\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"1917247747336561671316947631271677175318716727316834441144435626121656251835767883549\"\n      ]\n    ],\n    \"output\": 491520\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"258474122742856554966955492389808438543554384390321479914521939123385954322530\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"163432644649\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"87123671671018279920800459503283286428464620738145183139380817570309588\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"21481212841171778318121262362583567763987219143583\"]],\n    \"output\": 34560\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"202165333802533957790030733466561804681438972427179040657812501670320872902974799439970398812514542\"\n      ]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [[\"s\", \"163251214449655338717875316265\"]],\n    \"output\": 160\n  }\n]\n"
  },
  "info": {
    "excerpt": "Implement a function to count ways to decode a numeric string",
    "title": "Decode Message"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1720742400,
    "difficulty": "medium",
    "duration": 40,
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/string-decode-message",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "string-decode-message",
    "subtitle": null,
    "topics": [
      "string",
      "dynamic-programming"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {str} str\n * @return {number}\n */\nexport default function decodeMessage(str) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function decodeMessage(str: string): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var g=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var t in e)o(n,t,{get:e[t],enumerable:!0})},s=(n,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!w.call(n,r)&&r!==t&&o(n,r,{get:()=>e[r],enumerable:!(d=f(e,r))||d.enumerable});return n};var T=(n,e,t)=>(t=n!=null?g(y(n)):{},s(e||!n||!n.__esModule?o(t,\"default\",{value:n,enumerable:!0}):t,n)),I=n=>s(o({},\"__esModule\",{value:!0}),n);var h=v((W,l)=>{l.exports=_jsx_runtime});var k={};x(k,{default:()=>O});var i=T(h());var c=MDXCodeBlock;var a=`export default function decodeMessage(str: string): number {\n  // DP array to store the subproblem results\n  const dp: number[] = new Array(str.length + 1).fill(0);\n\n  // Base case: There's one way to decode an empty string\n  dp[0] = 1;\n\n  // Ways to decode a string of size 1 is 1, unless the string is '0'\n  dp[1] = str[0] === '0' ? 0 : 1;\n\n  // Iterate through the string to fill the DP array\n  for (let i = 2; i <= str.length; i++) {\n    // Check if successful single digit decode is possible\n    if (str[i - 1] !== '0') {\n      dp[i] += dp[i - 1];\n    }\n\n    // Check if successful two-digit decode is possible\n    const twoDigit = parseInt(str.substring(i - 2, i), 10);\n    if (twoDigit >= 10 && twoDigit <= 26) {\n      dp[i] += dp[i - 2];\n    }\n  }\n\n  // The last element in the DP array contains the number of ways to decode the entire string\n  return dp[str.length];\n}\n`;var u=`// Recursive function with memoization to count the number of ways to decode a string\nfunction recursiveWithMemo(\n  index: number, // Current index in the string\n  str: string, // The input string to decode\n  memo: Map<number, number>, // Memoization map to store previously computed results\n): number {\n  // If the result for the current index is already computed, return it from the memo\n  if (memo.has(index)) {\n    return memo.get(index)!;\n  }\n  // If the current index has reached the end of the string, return 1 (valid decode)\n  if (index === str.length) {\n    return 1;\n  }\n  // If the current character is '0', return 0 (no valid decode)\n  if (str.charAt(index) === '0') {\n    return 0;\n  }\n  // If the current index is the last character, return 1 (single valid decode)\n  if (index === str.length - 1) {\n    return 1;\n  }\n\n  // Initialize the answer by decoding one character\n  let ans = recursiveWithMemo(index + 1, str, memo);\n\n  // Check if the next two characters form a valid number <= 26 and decode it\n  if (parseInt(str.substring(index, index + 2)) <= 26) {\n    ans += recursiveWithMemo(index + 2, str, memo);\n  }\n\n  // Store the computed result in the memo map\n  memo.set(index, ans);\n  return ans;\n}\n\nexport default function decodeMessage(str: string): number {\n  let memo = new Map<number, number>();\n  return recursiveWithMemo(0, str, memo);\n}\n`;var m=`export default function decodeMessage(str: string): number {\n  // Handle edge case: empty string\n  if (str.length === 0) return 0;\n\n  // Variables to store the last two results\n  let prev = 1; // Represents dp[i-2], initialized for empty string\n  let curr = str[0] === '0' ? 0 : 1; // Represents dp[i-1]\n\n  // Iterate through the string\n  for (let i = 2; i <= str.length; i++) {\n    let temp = 0; // Temporarily store the current dp[i]\n\n    // Check if successful single-digit decode is possible\n    if (str[i - 1] !== '0') {\n      temp += curr;\n    }\n\n    // Check if successful two-digit decode is possible\n    const twoDigit = parseInt(str.substring(i - 2, i), 10);\n    if (twoDigit >= 10 && twoDigit <= 26) {\n      temp += prev;\n    }\n\n    // Update prev and curr for the next iteration\n    prev = curr;\n    curr = temp;\n  }\n\n  // The last value of curr contains the result\n  return curr;\n}\n`;function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ol:\"ol\",li:\"li\",ul:\"ul\",strong:\"strong\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"1. Top-Down Dynamic Programming\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The problem of decoding a string into possible letter combinations can be visualized as navigating a decision tree. Each step in the string offers two choices: decode a single character or decode two characters (if they form a valid number between \",(0,i.jsx)(e.code,{children:\"10\"}),\" and \",(0,i.jsx)(e.code,{children:\"26\"}),\"). The goal is to count all valid decoding paths from the beginning to the end of the string.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Using a brute force recursive approach leads to redundant calculations because the same subproblem (e.g., decoding a substring starting at a specific index) is solved multiple times. This redundancy can be avoided by storing results of previously computed subproblems in a memoization map. The memoized solution optimally navigates the decision tree, ensuring each subproblem is solved only once, significantly improving efficiency.\"}),`\n`,(0,i.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Define a recursive function \",(0,i.jsx)(e.code,{children:\"recursiveWithMemo\"}),\" that:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Takes the current index, the input string, and a memoization map as arguments.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Checks if the result for the current index exists in the \",(0,i.jsx)(e.code,{children:\"memo\"}),\" and returns it if found.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Returns \",(0,i.jsx)(e.code,{children:\"1\"}),\" if the index reaches the end of the string (valid decode).\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Returns \",(0,i.jsx)(e.code,{children:\"0\"}),\" if the current character is \",(0,i.jsx)(e.code,{children:\"'0'\"}),\" (invalid decode).\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Returns \",(0,i.jsx)(e.code,{children:\"1\"}),\" if the current index points to the last character (valid decode).\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Initialize a variable \",(0,i.jsx)(e.code,{children:\"ans\"}),\" with the result of decoding the single character at the current index by calling \",(0,i.jsx)(e.code,{children:\"recursiveWithMemo\"}),\" with \",(0,i.jsx)(e.code,{children:\"index + 1\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Check if the next two characters form a valid number between \",(0,i.jsx)(e.code,{children:\"10\"}),\" and \",(0,i.jsx)(e.code,{children:\"26\"}),\":\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"If valid, add the result of decoding two characters by calling \",(0,i.jsx)(e.code,{children:\"recursiveWithMemo\"}),\" with \",(0,i.jsx)(e.code,{children:\"index + 2\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Store the computed result for the current index in the \",(0,i.jsx)(e.code,{children:\"memo\"}),\" map.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Return the value stored in \",(0,i.jsx)(e.code,{children:\"memo\"}),\" for the current index.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Implement a wrapper function \",(0,i.jsx)(e.code,{children:\"decodeMessage\"}),\" that:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Initializes an empty \",(0,i.jsx)(e.code,{children:\"Map\"}),\" for memoization.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Calls \",(0,i.jsx)(e.code,{children:\"recursiveWithMemo\"}),\" with the initial index \",(0,i.jsx)(e.code,{children:\"0\"}),\" and the input string.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(c,{children:u}),`\n`,(0,i.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Time complexity: O(n)\"}),\". Each index is processed only once due to memoization.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Space complexity: O(n)\"}),\". The \",(0,i.jsx)(e.code,{children:\"Map\"}),\" stores up to \",(0,i.jsx)(e.code,{children:\"n\"}),\" entries, and the recursion stack requires O(n) space in the worst case.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{children:\"2. Bottom-Up Dynamic Programming\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Instead of solving subproblems recursively, this approach iteratively computes the number of ways to decode the string by using results from smaller substrings. The intuition is to maintain a \",(0,i.jsx)(e.code,{children:\"dp\"}),\" array where each entry represents the number of ways to decode the substring up to that index.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This approach avoids the overhead of recursion and memoization by iteratively filling the \",(0,i.jsx)(e.code,{children:\"dp\"}),\" array in a single pass. The iterative nature ensures that each subproblem is solved only once, significantly optimizing both time and space.\"]}),`\n`,(0,i.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Initialize a \",(0,i.jsx)(e.code,{children:\"dp\"}),\" array of size \",(0,i.jsx)(e.code,{children:\"str.length + 1\"}),\" with all values set to \",(0,i.jsx)(e.code,{children:\"0\"}),\".\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Set \",(0,i.jsx)(e.code,{children:\"dp[0]\"}),\" to \",(0,i.jsx)(e.code,{children:\"1\"}),\" since there is one way to decode an empty string.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Set \",(0,i.jsx)(e.code,{children:\"dp[1]\"}),\" to \",(0,i.jsx)(e.code,{children:\"1\"}),\" if the first character is not \",(0,i.jsx)(e.code,{children:\"'0'\"}),\", otherwise set it to \",(0,i.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Iterate from index \",(0,i.jsx)(e.code,{children:\"2\"}),\" to \",(0,i.jsx)(e.code,{children:\"str.length\"}),\":\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"If the current character is not \",(0,i.jsx)(e.code,{children:\"'0'\"}),\", add \",(0,i.jsx)(e.code,{children:\"dp[i - 1]\"}),\" to \",(0,i.jsx)(e.code,{children:\"dp[i]\"}),\" for single-digit decoding.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Extract the last two characters as a two-digit number. If it is between \",(0,i.jsx)(e.code,{children:\"10\"}),\" and \",(0,i.jsx)(e.code,{children:\"26\"}),\", add \",(0,i.jsx)(e.code,{children:\"dp[i - 2]\"}),\" to \",(0,i.jsx)(e.code,{children:\"dp[i]\"}),\" for two-digit decoding.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Return the value in \",(0,i.jsx)(e.code,{children:\"dp[str.length]\"}),\", which represents the number of ways to decode the entire string.\"]}),`\n`]}),`\n`,(0,i.jsx)(c,{children:a}),`\n`,(0,i.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Time complexity: O(n)\"}),\". The algorithm iterates through the string once.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Space complexity: O(n)\"}),\". The \",(0,i.jsx)(e.code,{children:\"dp\"}),\" array stores intermediate results for each index of the string.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{children:\"3. Bottom-Up Dynamic Programming With Constant Space\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This solution improves the bottom-up dynamic programming approach by reducing the space complexity to O(1). Instead of maintaining a \",(0,i.jsx)(e.code,{children:\"dp\"}),\" array to store the results for all indices, this approach keeps track of only the last two results (\",(0,i.jsx)(e.code,{children:\"dp[i-2]\"}),\" and \",(0,i.jsx)(e.code,{children:\"dp[i-1]\"}),\"). This optimization is possible because the number of ways to decode a string at any position depends only on the results of the previous two positions.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The previous bottom-up solution used an array that required O(n) space. By replacing the array with two variables, this solution reduces space usage without affecting the correctness or time complexity. This improvement is particularly useful when processing large strings.\"}),`\n`,(0,i.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Handle the edge case where the string is empty by returning \",(0,i.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Initialize two variables:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"prev\"}),\" to represent \",(0,i.jsx)(e.code,{children:\"dp[i-2]\"}),\", set to \",(0,i.jsx)(e.code,{children:\"1\"}),\" for the base case of an empty string.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"curr\"}),\" to represent \",(0,i.jsx)(e.code,{children:\"dp[i-1]\"}),\", set to \",(0,i.jsx)(e.code,{children:\"1\"}),\" if the first character is not \",(0,i.jsx)(e.code,{children:\"'0'\"}),\", otherwise set to \",(0,i.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Iterate from index \",(0,i.jsx)(e.code,{children:\"2\"}),\" to \",(0,i.jsx)(e.code,{children:\"str.length\"}),\":\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Initialize a temporary variable \",(0,i.jsx)(e.code,{children:\"temp\"}),\" to store the current result.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"If the current character is not \",(0,i.jsx)(e.code,{children:\"'0'\"}),\", add \",(0,i.jsx)(e.code,{children:\"curr\"}),\" to \",(0,i.jsx)(e.code,{children:\"temp\"}),\" for single-digit decoding.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Extract the last two characters as a two-digit number. If it is between \",(0,i.jsx)(e.code,{children:\"10\"}),\" and \",(0,i.jsx)(e.code,{children:\"26\"}),\", add \",(0,i.jsx)(e.code,{children:\"prev\"}),\" to \",(0,i.jsx)(e.code,{children:\"temp\"}),\" for two-digit decoding.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Update \",(0,i.jsx)(e.code,{children:\"prev\"}),\" to \",(0,i.jsx)(e.code,{children:\"curr\"}),\" and \",(0,i.jsx)(e.code,{children:\"curr\"}),\" to \",(0,i.jsx)(e.code,{children:\"temp\"}),\" for the next iteration.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Return the value of \",(0,i.jsx)(e.code,{children:\"curr\"}),\", which contains the number of ways to decode the entire string.\"]}),`\n`]}),`\n`,(0,i.jsx)(c,{children:m}),`\n`,(0,i.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Time complexity: O(n)\"}),\". The solution iterates through the string once.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Space complexity: O(1)\"}),\". Only two variables are used to store intermediate results.\"]}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(p,n)})):p(n)}var O=C;return I(k);})();\n;return Component;",
  "workspace": {
    "main": "/src/string-decode-message.ts",
    "run": "/src/string-decode-message.run.test.ts",
    "submit": "/src/string-decode-message.submit.test.ts"
  }
}