{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/grid-distinct-paths\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/grid-distinct-paths.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/grid-distinct-paths.run.test.ts": "import fn from './grid-distinct-paths';\nimport runTestCases from './run.tests.json';\n\ndescribe('gridDistinctPaths', () => {\n  (runTestCases as any[]).forEach((example: any) => {\n    test(`${example.input[0][0]} = ${example.input[0][1]} ${example.input[1][0]} = ${example.input[1][1]}`, () => {\n      expect(fn(example.input[0][1], example.input[1][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/grid-distinct-paths.submit.test.ts": "import gridDistinctPaths from './grid-distinct-paths';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('gridDistinctPaths', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`m = ${example.input[0][1]} n = ${example.input[1][1]}`, () => {\n      expect(\n        gridDistinctPaths(example.input[0][1], example.input[1][1]),\n      ).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/grid-distinct-paths.ts": "export default function gridDistinctPaths(m: number, n: number): number {\n  // Create a 2D DP table (d) to store the number of unique paths reaching each cell.\n  // Initialize all cells to 1, representing 1 path (straight down or right from the top/left edge).\n  const d = new Array(m).fill(0).map(() => new Array(n).fill(1));\n\n  // Iterate through the table (excluding the first row and column since they already have 1 path).\n  for (let col = 1; col < m; col++) {\n    for (let row = 1; row < n; row++) {\n      // The number of unique paths reaching this cell (col, row) is the sum of:\n      //   - Paths reaching the cell above (col-1, row) - only one possible move (down).\n      //   - Paths reaching the cell to the left (col, row-1) - only one possible move (right).\n      d[col][row] = d[col - 1][row] + d[col][row - 1];\n    }\n  }\n\n  // The final element (d[m-1][n-1]) represents the total number of unique paths reaching the bottom-right corner.\n  return d[m - 1][n - 1];\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [\n      [\"m\", 3],\n      [\"n\", 2]\n    ],\n    \"output\": 3,\n    \"explanation\": \"The robot has 3 unique paths to reach the target point in a 3x2 grid: Right-Down-Down, Down-Down-Right, Down-Right-Down.\"\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 7]\n    ],\n    \"output\": 210,\n    \"explanation\": \"The robot can navigate a 5x7 grid using 210 unique paths to reach the target point.\"\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 4]\n    ],\n    \"output\": 220,\n    \"explanation\": \"The robot can navigate a 10x4 grid using 220 unique paths to reach the target point.\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 10]\n    ],\n    \"output\": 220\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 10]\n    ],\n    \"output\": 2002\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 8]\n    ],\n    \"output\": 792\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 5]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 10]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 10]\n    ],\n    \"output\": 220\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 8]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 10]\n    ],\n    \"output\": 715\n  },\n  {\n    \"input\": [\n      [\"m\", 9],\n      [\"n\", 22]\n    ],\n    \"output\": 4292145\n  },\n  {\n    \"input\": [\n      [\"m\", 19],\n      [\"n\", 11]\n    ],\n    \"output\": 13123110\n  },\n  {\n    \"input\": [\n      [\"m\", 31],\n      [\"n\", 2]\n    ],\n    \"output\": 31\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 28]\n    ],\n    \"output\": 31465\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 14]\n    ],\n    \"output\": 560\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 44]\n    ],\n    \"output\": 44\n  },\n  {\n    \"input\": [\n      [\"m\", 35],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 14],\n      [\"n\", 9]\n    ],\n    \"output\": 203490\n  },\n  {\n    \"input\": [\n      [\"m\", 24],\n      [\"n\", 4]\n    ],\n    \"output\": 2600\n  },\n  {\n    \"input\": [\n      [\"m\", 24],\n      [\"n\", 3]\n    ],\n    \"output\": 300\n  },\n  {\n    \"input\": [\n      [\"m\", 22],\n      [\"n\", 7]\n    ],\n    \"output\": 296010\n  },\n  {\n    \"input\": [\n      [\"m\", 15],\n      [\"n\", 2]\n    ],\n    \"output\": 15\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 29]\n    ],\n    \"output\": 6724520\n  },\n  {\n    \"input\": [\n      [\"m\", 3],\n      [\"n\", 50]\n    ],\n    \"output\": 1275\n  },\n  {\n    \"input\": [\n      [\"m\", 17],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 18],\n      [\"n\", 15]\n    ],\n    \"output\": 265182525\n  },\n  {\n    \"input\": [\n      [\"m\", 3],\n      [\"n\", 14]\n    ],\n    \"output\": 105\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 24]\n    ],\n    \"output\": 2600\n  },\n  {\n    \"input\": [\n      [\"m\", 22],\n      [\"n\", 10]\n    ],\n    \"output\": 14307150\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 30]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 15]\n    ],\n    \"output\": 3060\n  },\n  {\n    \"input\": [\n      [\"m\", 12],\n      [\"n\", 12]\n    ],\n    \"output\": 705432\n  },\n  {\n    \"input\": [\n      [\"m\", 23],\n      [\"n\", 4]\n    ],\n    \"output\": 2300\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 43]\n    ],\n    \"output\": 1533939\n  },\n  {\n    \"input\": [\n      [\"m\", 44],\n      [\"n\", 4]\n    ],\n    \"output\": 15180\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 42]\n    ],\n    \"output\": 148995\n  },\n  {\n    \"input\": [\n      [\"m\", 16],\n      [\"n\", 10]\n    ],\n    \"output\": 1307504\n  },\n  {\n    \"input\": [\n      [\"m\", 26],\n      [\"n\", 3]\n    ],\n    \"output\": 351\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 5]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\"m\", 22],\n      [\"n\", 11]\n    ],\n    \"output\": 44352165\n  },\n  {\n    \"input\": [\n      [\"m\", 12],\n      [\"n\", 8]\n    ],\n    \"output\": 31824\n  },\n  {\n    \"input\": [\n      [\"m\", 34],\n      [\"n\", 3]\n    ],\n    \"output\": 595\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 6]\n    ],\n    \"output\": 56\n  },\n  {\n    \"input\": [\n      [\"m\", 49],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 28],\n      [\"n\", 5]\n    ],\n    \"output\": 31465\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 15]\n    ],\n    \"output\": 817190\n  },\n  {\n    \"input\": [\n      [\"m\", 24],\n      [\"n\", 12]\n    ],\n    \"output\": 286097760\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 30]\n    ],\n    \"output\": 1623160\n  },\n  {\n    \"input\": [\n      [\"m\", 14],\n      [\"n\", 12]\n    ],\n    \"output\": 2496144\n  },\n  {\n    \"input\": [\n      [\"m\", 38],\n      [\"n\", 6]\n    ],\n    \"output\": 850668\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 42]\n    ],\n    \"output\": 73629072\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 28]\n    ],\n    \"output\": 5379616\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 26]\n    ],\n    \"output\": 736281\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 42]\n    ],\n    \"output\": 13244\n  },\n  {\n    \"input\": [\n      [\"m\", 47],\n      [\"n\", 9]\n    ],\n    \"output\": 1040465790\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 39]\n    ],\n    \"output\": 962598\n  },\n  {\n    \"input\": [\n      [\"m\", 30],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 16]\n    ],\n    \"output\": 16\n  },\n  {\n    \"input\": [\n      [\"m\", 37],\n      [\"n\", 9]\n    ],\n    \"output\": 177232627\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 11]\n    ],\n    \"output\": 92378\n  },\n  {\n    \"input\": [\n      [\"m\", 18],\n      [\"n\", 8]\n    ],\n    \"output\": 346104\n  },\n  {\n    \"input\": [\n      [\"m\", 16],\n      [\"n\", 8]\n    ],\n    \"output\": 170544\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 9]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 26]\n    ],\n    \"output\": 52451256\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 47]\n    ],\n    \"output\": 2349060\n  },\n  {\n    \"input\": [\n      [\"m\", 31],\n      [\"n\", 7]\n    ],\n    \"output\": 1947792\n  },\n  {\n    \"input\": [\n      [\"m\", 41],\n      [\"n\", 9]\n    ],\n    \"output\": 377348994\n  },\n  {\n    \"input\": [\n      [\"m\", 19],\n      [\"n\", 11]\n    ],\n    \"output\": 13123110\n  },\n  {\n    \"input\": [\n      [\"m\", 33],\n      [\"n\", 11]\n    ],\n    \"output\": 1471442973\n  },\n  {\n    \"input\": [\n      [\"m\", 9],\n      [\"n\", 3]\n    ],\n    \"output\": 45\n  },\n  {\n    \"input\": [\n      [\"m\", 23],\n      [\"n\", 11]\n    ],\n    \"output\": 64512240\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 36]\n    ],\n    \"output\": 4496388\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 39]\n    ],\n    \"output\": 45379620\n  },\n  {\n    \"input\": [\n      [\"m\", 37],\n      [\"n\", 8]\n    ],\n    \"output\": 32224114\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 42]\n    ],\n    \"output\": 42\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 30]\n    ],\n    \"output\": 1623160\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 7]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 32],\n      [\"n\", 2]\n    ],\n    \"output\": 32\n  },\n  {\n    \"input\": [\n      [\"m\", 13],\n      [\"n\", 6]\n    ],\n    \"output\": 6188\n  },\n  {\n    \"input\": [\n      [\"m\", 48],\n      [\"n\", 9]\n    ],\n    \"output\": 1217566350\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 16]\n    ],\n    \"output\": 1307504\n  },\n  {\n    \"input\": [\n      [\"m\", 20],\n      [\"n\", 8]\n    ],\n    \"output\": 657800\n  },\n  {\n    \"input\": [\n      [\"m\", 9],\n      [\"n\", 45]\n    ],\n    \"output\": 752538150\n  },\n  {\n    \"input\": [\n      [\"m\", 23],\n      [\"n\", 14]\n    ],\n    \"output\": 1476337800\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 32]\n    ],\n    \"output\": 52360\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 44]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 3]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 45]\n    ],\n    \"output\": 15890700\n  },\n  {\n    \"input\": [\n      [\"m\", 11],\n      [\"n\", 7]\n    ],\n    \"output\": 8008\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 42]\n    ],\n    \"output\": 10737573\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 16]\n    ],\n    \"output\": 170544\n  },\n  {\n    \"input\": [\n      [\"m\", 33],\n      [\"n\", 11]\n    ],\n    \"output\": 1471442973\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 13]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 17],\n      [\"n\", 17]\n    ],\n    \"output\": 601080390\n  },\n  {\n    \"input\": [\n      [\"m\", 15],\n      [\"n\", 21]\n    ],\n    \"output\": 1391975640\n  },\n  {\n    \"input\": [\n      [\"m\", 34],\n      [\"n\", 5]\n    ],\n    \"output\": 66045\n  },\n  {\n    \"input\": [\n      [\"m\", 19],\n      [\"n\", 5]\n    ],\n    \"output\": 7315\n  },\n  {\n    \"input\": [\n      [\"m\", 39],\n      [\"n\", 7]\n    ],\n    \"output\": 7059052\n  },\n  {\n    \"input\": [\n      [\"m\", 31],\n      [\"n\", 6]\n    ],\n    \"output\": 324632\n  },\n  {\n    \"input\": [\n      [\"m\", 21],\n      [\"n\", 15]\n    ],\n    \"output\": 1391975640\n  }\n]\n"
  },
  "skeleton": {
    "js": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nexport default function gridDistinctPaths(m, n) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function gridDistinctPaths(m: number, n: number): number {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/grid-distinct-paths.ts",
    "run": "/src/grid-distinct-paths.run.test.ts",
    "submit": "/src/grid-distinct-paths.submit.test.ts"
  }
}