{
  "description": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),D=(e,n)=>{for(var i in n)r(e,i,{get:n[i],enumerable:!0})},a=(e,n,i,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of g(n))!b.call(e,o)&&o!==i&&r(e,o,{get:()=>n[o],enumerable:!(c=p(n,o))||c.enumerable});return e};var w=(e,n,i)=>(i=e!=null?m(x(e)):{},a(n||!e||!e.__esModule?r(i,\"default\",{value:e,enumerable:!0}):i,e)),j=e=>a(r({},\"__esModule\",{value:!0}),e);var d=f((q,h)=>{h.exports=_jsx_runtime});var M={};D(M,{default:()=>C,frontmatter:()=>_});var t=w(d());var l=MDXTestExamples;var s=[{input:[[\"m\",3],[\"n\",2]],output:3,explanation:\"The robot has 3 unique paths to reach the target point in a 3x2 grid: Right-Down-Down, Down-Down-Right, Down-Right-Down.\"},{input:[[\"m\",5],[\"n\",7]],output:210,explanation:\"The robot can navigate a 5x7 grid using 210 unique paths to reach the target point.\"},{input:[[\"m\",10],[\"n\",4]],output:220,explanation:\"The robot can navigate a 10x4 grid using 220 unique paths to reach the target point.\"}];var _={title:\"Distinct Paths in Grid\",excerpt:\"Implement a function to calculate distinct paths for a robot moving on an m x n grid\"};function u(e){let n=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[\"A robot is situated on an \",(0,t.jsx)(n.code,{children:\"m\"}),\" x \",(0,t.jsx)(n.code,{children:\"n\"}),\" grid, starting at the top-left corner (\",(0,t.jsx)(n.code,{children:\"grid[0][0]\"}),\") with the goal of reaching the bottom-right corner (\",(0,t.jsx)(n.code,{children:\"grid[m - 1][n - 1]\"}),\"). In one step, the robot can only either move down or right by a single cell.\"]}),`\n`,(0,t.jsxs)(n.p,{children:[\"Given the integers \",(0,t.jsx)(n.code,{children:\"m\"}),\" and \",(0,t.jsx)(n.code,{children:\"n\"}),\", determine the number of distinct paths the robot can take to reach the bottom-right corner.\"]}),`\n`,(0,t.jsx)(n.h3,{children:\"Input\"}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:\"m: number\"}),\": An integer\"]}),`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:\"n: number\"}),\": An integer\"]}),`\n`]}),`\n`,(0,t.jsx)(l,{testCases:s}),`\n`,(0,t.jsx)(n.h3,{children:\"Constraints\"}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsx)(n.li,{children:\"The result will not exceed 2^31\"}),`\n`,(0,t.jsxs)(n.li,{children:[\"1 <= \",(0,t.jsx)(n.code,{children:\"m\"}),\", \",(0,t.jsx)(n.code,{children:\"n\"}),\" <= 100\"]}),`\n`]})]})}function v(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(u,e)})):u(e)}var C=v;return j(M);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/grid-distinct-paths\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/grid-distinct-paths.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/grid-distinct-paths.run.test.ts": "import fn from './grid-distinct-paths';\nimport runTestCases from './run.tests.json';\n\ndescribe('gridDistinctPaths', () => {\n  (runTestCases as any[]).forEach((example: any) => {\n    test(`${example.input[0][0]} = ${example.input[0][1]} ${example.input[1][0]} = ${example.input[1][1]}`, () => {\n      expect(fn(example.input[0][1], example.input[1][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/grid-distinct-paths.submit.test.ts": "import gridDistinctPaths from './grid-distinct-paths';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('gridDistinctPaths', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`m = ${example.input[0][1]} n = ${example.input[1][1]}`, () => {\n      expect(\n        gridDistinctPaths(example.input[0][1], example.input[1][1]),\n      ).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/grid-distinct-paths.ts": "export default function gridDistinctPaths(m: number, n: number): number {\n  // Create a 2D DP table (d) to store the number of unique paths reaching each cell.\n  // Initialize all cells to 1, representing 1 path (straight down or right from the top/left edge).\n  const d = new Array(m).fill(0).map(() => new Array(n).fill(1));\n\n  // Iterate through the table (excluding the first row and column since they already have 1 path).\n  for (let col = 1; col < m; col++) {\n    for (let row = 1; row < n; row++) {\n      // The number of unique paths reaching this cell (col, row) is the sum of:\n      //   - Paths reaching the cell above (col-1, row) - only one possible move (down).\n      //   - Paths reaching the cell to the left (col, row-1) - only one possible move (right).\n      d[col][row] = d[col - 1][row] + d[col][row - 1];\n    }\n  }\n\n  // The final element (d[m-1][n-1]) represents the total number of unique paths reaching the bottom-right corner.\n  return d[m - 1][n - 1];\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [\n      [\"m\", 3],\n      [\"n\", 2]\n    ],\n    \"output\": 3,\n    \"explanation\": \"The robot has 3 unique paths to reach the target point in a 3x2 grid: Right-Down-Down, Down-Down-Right, Down-Right-Down.\"\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 7]\n    ],\n    \"output\": 210,\n    \"explanation\": \"The robot can navigate a 5x7 grid using 210 unique paths to reach the target point.\"\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 4]\n    ],\n    \"output\": 220,\n    \"explanation\": \"The robot can navigate a 10x4 grid using 220 unique paths to reach the target point.\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 10]\n    ],\n    \"output\": 220\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 10]\n    ],\n    \"output\": 2002\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 8]\n    ],\n    \"output\": 792\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 5]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 10]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 10]\n    ],\n    \"output\": 220\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 8]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 10]\n    ],\n    \"output\": 715\n  },\n  {\n    \"input\": [\n      [\"m\", 9],\n      [\"n\", 22]\n    ],\n    \"output\": 4292145\n  },\n  {\n    \"input\": [\n      [\"m\", 19],\n      [\"n\", 11]\n    ],\n    \"output\": 13123110\n  },\n  {\n    \"input\": [\n      [\"m\", 31],\n      [\"n\", 2]\n    ],\n    \"output\": 31\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 28]\n    ],\n    \"output\": 31465\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 14]\n    ],\n    \"output\": 560\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 44]\n    ],\n    \"output\": 44\n  },\n  {\n    \"input\": [\n      [\"m\", 35],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 14],\n      [\"n\", 9]\n    ],\n    \"output\": 203490\n  },\n  {\n    \"input\": [\n      [\"m\", 24],\n      [\"n\", 4]\n    ],\n    \"output\": 2600\n  },\n  {\n    \"input\": [\n      [\"m\", 24],\n      [\"n\", 3]\n    ],\n    \"output\": 300\n  },\n  {\n    \"input\": [\n      [\"m\", 22],\n      [\"n\", 7]\n    ],\n    \"output\": 296010\n  },\n  {\n    \"input\": [\n      [\"m\", 15],\n      [\"n\", 2]\n    ],\n    \"output\": 15\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 29]\n    ],\n    \"output\": 6724520\n  },\n  {\n    \"input\": [\n      [\"m\", 3],\n      [\"n\", 50]\n    ],\n    \"output\": 1275\n  },\n  {\n    \"input\": [\n      [\"m\", 17],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 18],\n      [\"n\", 15]\n    ],\n    \"output\": 265182525\n  },\n  {\n    \"input\": [\n      [\"m\", 3],\n      [\"n\", 14]\n    ],\n    \"output\": 105\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 24]\n    ],\n    \"output\": 2600\n  },\n  {\n    \"input\": [\n      [\"m\", 22],\n      [\"n\", 10]\n    ],\n    \"output\": 14307150\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 30]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 15]\n    ],\n    \"output\": 3060\n  },\n  {\n    \"input\": [\n      [\"m\", 12],\n      [\"n\", 12]\n    ],\n    \"output\": 705432\n  },\n  {\n    \"input\": [\n      [\"m\", 23],\n      [\"n\", 4]\n    ],\n    \"output\": 2300\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 43]\n    ],\n    \"output\": 1533939\n  },\n  {\n    \"input\": [\n      [\"m\", 44],\n      [\"n\", 4]\n    ],\n    \"output\": 15180\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 42]\n    ],\n    \"output\": 148995\n  },\n  {\n    \"input\": [\n      [\"m\", 16],\n      [\"n\", 10]\n    ],\n    \"output\": 1307504\n  },\n  {\n    \"input\": [\n      [\"m\", 26],\n      [\"n\", 3]\n    ],\n    \"output\": 351\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 5]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\"m\", 22],\n      [\"n\", 11]\n    ],\n    \"output\": 44352165\n  },\n  {\n    \"input\": [\n      [\"m\", 12],\n      [\"n\", 8]\n    ],\n    \"output\": 31824\n  },\n  {\n    \"input\": [\n      [\"m\", 34],\n      [\"n\", 3]\n    ],\n    \"output\": 595\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 6]\n    ],\n    \"output\": 56\n  },\n  {\n    \"input\": [\n      [\"m\", 49],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 28],\n      [\"n\", 5]\n    ],\n    \"output\": 31465\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 15]\n    ],\n    \"output\": 817190\n  },\n  {\n    \"input\": [\n      [\"m\", 24],\n      [\"n\", 12]\n    ],\n    \"output\": 286097760\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 30]\n    ],\n    \"output\": 1623160\n  },\n  {\n    \"input\": [\n      [\"m\", 14],\n      [\"n\", 12]\n    ],\n    \"output\": 2496144\n  },\n  {\n    \"input\": [\n      [\"m\", 38],\n      [\"n\", 6]\n    ],\n    \"output\": 850668\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 42]\n    ],\n    \"output\": 73629072\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 28]\n    ],\n    \"output\": 5379616\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 26]\n    ],\n    \"output\": 736281\n  },\n  {\n    \"input\": [\n      [\"m\", 4],\n      [\"n\", 42]\n    ],\n    \"output\": 13244\n  },\n  {\n    \"input\": [\n      [\"m\", 47],\n      [\"n\", 9]\n    ],\n    \"output\": 1040465790\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 39]\n    ],\n    \"output\": 962598\n  },\n  {\n    \"input\": [\n      [\"m\", 30],\n      [\"n\", 1]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 16]\n    ],\n    \"output\": 16\n  },\n  {\n    \"input\": [\n      [\"m\", 37],\n      [\"n\", 9]\n    ],\n    \"output\": 177232627\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 11]\n    ],\n    \"output\": 92378\n  },\n  {\n    \"input\": [\n      [\"m\", 18],\n      [\"n\", 8]\n    ],\n    \"output\": 346104\n  },\n  {\n    \"input\": [\n      [\"m\", 16],\n      [\"n\", 8]\n    ],\n    \"output\": 170544\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 9]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 26]\n    ],\n    \"output\": 52451256\n  },\n  {\n    \"input\": [\n      [\"m\", 6],\n      [\"n\", 47]\n    ],\n    \"output\": 2349060\n  },\n  {\n    \"input\": [\n      [\"m\", 31],\n      [\"n\", 7]\n    ],\n    \"output\": 1947792\n  },\n  {\n    \"input\": [\n      [\"m\", 41],\n      [\"n\", 9]\n    ],\n    \"output\": 377348994\n  },\n  {\n    \"input\": [\n      [\"m\", 19],\n      [\"n\", 11]\n    ],\n    \"output\": 13123110\n  },\n  {\n    \"input\": [\n      [\"m\", 33],\n      [\"n\", 11]\n    ],\n    \"output\": 1471442973\n  },\n  {\n    \"input\": [\n      [\"m\", 9],\n      [\"n\", 3]\n    ],\n    \"output\": 45\n  },\n  {\n    \"input\": [\n      [\"m\", 23],\n      [\"n\", 11]\n    ],\n    \"output\": 64512240\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 36]\n    ],\n    \"output\": 4496388\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 39]\n    ],\n    \"output\": 45379620\n  },\n  {\n    \"input\": [\n      [\"m\", 37],\n      [\"n\", 8]\n    ],\n    \"output\": 32224114\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 42]\n    ],\n    \"output\": 42\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 30]\n    ],\n    \"output\": 1623160\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 7]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 32],\n      [\"n\", 2]\n    ],\n    \"output\": 32\n  },\n  {\n    \"input\": [\n      [\"m\", 13],\n      [\"n\", 6]\n    ],\n    \"output\": 6188\n  },\n  {\n    \"input\": [\n      [\"m\", 48],\n      [\"n\", 9]\n    ],\n    \"output\": 1217566350\n  },\n  {\n    \"input\": [\n      [\"m\", 10],\n      [\"n\", 16]\n    ],\n    \"output\": 1307504\n  },\n  {\n    \"input\": [\n      [\"m\", 20],\n      [\"n\", 8]\n    ],\n    \"output\": 657800\n  },\n  {\n    \"input\": [\n      [\"m\", 9],\n      [\"n\", 45]\n    ],\n    \"output\": 752538150\n  },\n  {\n    \"input\": [\n      [\"m\", 23],\n      [\"n\", 14]\n    ],\n    \"output\": 1476337800\n  },\n  {\n    \"input\": [\n      [\"m\", 5],\n      [\"n\", 32]\n    ],\n    \"output\": 52360\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 44]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 2],\n      [\"n\", 3]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 45]\n    ],\n    \"output\": 15890700\n  },\n  {\n    \"input\": [\n      [\"m\", 11],\n      [\"n\", 7]\n    ],\n    \"output\": 8008\n  },\n  {\n    \"input\": [\n      [\"m\", 7],\n      [\"n\", 42]\n    ],\n    \"output\": 10737573\n  },\n  {\n    \"input\": [\n      [\"m\", 8],\n      [\"n\", 16]\n    ],\n    \"output\": 170544\n  },\n  {\n    \"input\": [\n      [\"m\", 33],\n      [\"n\", 11]\n    ],\n    \"output\": 1471442973\n  },\n  {\n    \"input\": [\n      [\"m\", 1],\n      [\"n\", 13]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"m\", 17],\n      [\"n\", 17]\n    ],\n    \"output\": 601080390\n  },\n  {\n    \"input\": [\n      [\"m\", 15],\n      [\"n\", 21]\n    ],\n    \"output\": 1391975640\n  },\n  {\n    \"input\": [\n      [\"m\", 34],\n      [\"n\", 5]\n    ],\n    \"output\": 66045\n  },\n  {\n    \"input\": [\n      [\"m\", 19],\n      [\"n\", 5]\n    ],\n    \"output\": 7315\n  },\n  {\n    \"input\": [\n      [\"m\", 39],\n      [\"n\", 7]\n    ],\n    \"output\": 7059052\n  },\n  {\n    \"input\": [\n      [\"m\", 31],\n      [\"n\", 6]\n    ],\n    \"output\": 324632\n  },\n  {\n    \"input\": [\n      [\"m\", 21],\n      [\"n\", 15]\n    ],\n    \"output\": 1391975640\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1720742400,
    "difficulty": "medium",
    "duration": 35,
    "excerpt": "Implement a function to calculate distinct paths for a robot moving on an m x n grid",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/grid-distinct-paths",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "grid-distinct-paths",
    "subtitle": null,
    "title": "Distinct Paths in Grid",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nexport default function gridDistinctPaths(m, n) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function gridDistinctPaths(m: number, n: number): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),D=(t,e)=>{for(var r in e)l(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of w(e))!g.call(t,n)&&n!==r&&l(t,n,{get:()=>e[n],enumerable:!(c=f(e,n))||c.enumerable});return t};var x=(t,e,r)=>(r=t!=null?p(b(t)):{},a(e||!t||!t.__esModule?l(r,\"default\",{value:t,enumerable:!0}):r,t)),C=t=>a(l({},\"__esModule\",{value:!0}),t);var m=y((O,h)=>{h.exports=_jsx_runtime});var M={};D(M,{default:()=>_});var o=x(m());var i=MDXCodeBlock;var s=`export default function gridDistinctPaths(m: number, n: number): number {\n  // Create a 2D DP table (d) to store the number of unique paths reaching each cell.\n  // Initialize all cells to 1, representing 1 path (straight down or right from the top/left edge).\n  const d = new Array(m).fill(0).map(() => new Array(n).fill(1));\n\n  // Iterate through the table (excluding the first row and column since they already have 1 path).\n  for (let col = 1; col < m; col++) {\n    for (let row = 1; row < n; row++) {\n      // The number of unique paths reaching this cell (col, row) is the sum of:\n      //   - Paths reaching the cell above (col-1, row) - only one possible move (down).\n      //   - Paths reaching the cell to the left (col, row-1) - only one possible move (right).\n      d[col][row] = d[col - 1][row] + d[col][row - 1];\n    }\n  }\n\n  // The final element (d[m-1][n-1]) represents the total number of unique paths reaching the bottom-right corner.\n  return d[m - 1][n - 1];\n}\n`;var u=`export default function gridDistinctPaths(m: number, n: number): number {\n  // Create a memoization table to store previously calculated results (optional for top-down approach)\n  const memo = new Array(m).fill(null).map(() => new Array(n).fill(null));\n\n  // Recursive helper function to calculate the number of paths from a specific cell\n  function helper(row: number, col: number): number {\n    // Base cases:\n    if (row === m - 1 && col === n - 1) return 1; // Reached the destination (bottom-right) - 1 path\n    if (row >= m || col >= n) return 0; // Outside the grid - no paths possible\n\n    // Check if the value has already been calculated and stored in the memo table\n    if (memo[row][col] !== null) {\n      return memo[row][col];\n    }\n\n    // Calculate the number of paths by combining paths from below and to the right\n    const pathsDown = helper(row + 1, col);\n    const pathsRight = helper(row, col + 1);\n\n    // Memoize the result for future use\n    memo[row][col] = pathsDown + pathsRight;\n\n    return memo[row][col];\n  }\n\n  // Call the helper function to start from the top-left corner\n  return helper(0, 0);\n}\n`;function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"1. Bottom-Up Dynamic Programming\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Time complexity: O(n.m), where \",(0,o.jsx)(e.code,{children:\"m\"}),\" is the number of rows, and \",(0,o.jsx)(e.code,{children:\"n\"}),\" is the number of columns in the grid\"]}),`\n`,(0,o.jsx)(i,{children:s}),`\n`,(0,o.jsx)(e.h2,{children:\"2. Top-Down Dynamic Programming\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Time complexity: O(n.m), where \",(0,o.jsx)(e.code,{children:\"m\"}),\" is the number of rows, and \",(0,o.jsx)(e.code,{children:\"n\"}),\" is the number of columns in the grid\"]}),`\n`,(0,o.jsx)(i,{children:u})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(d,t)})):d(t)}var _=v;return C(M);})();\n;return Component;",
  "workspace": {
    "main": "/src/grid-distinct-paths.ts",
    "run": "/src/grid-distinct-paths.run.test.ts",
    "submit": "/src/grid-distinct-paths.submit.test.ts"
  }
}