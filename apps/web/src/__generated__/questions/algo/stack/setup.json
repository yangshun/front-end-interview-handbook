{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/stack\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/stack.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/stack.run.test.ts": "import Stack from './stack';\n\ndescribe('Stack', () => {\n  test('constructor', () => {\n    const s = new Stack();\n    expect(s instanceof Stack);\n  });\n\n  test('push()', () => {\n    const s = new Stack();\n    expect(s.push(100)).toBe(1);\n    expect(s.push(200)).toBe(2);\n  });\n\n  test('pop()', () => {\n    const s = new Stack();\n    s.push(100);\n    s.push(200);\n    expect(s.pop()).toBe(200);\n    expect(s.pop()).toBe(100);\n  });\n});\n",
    "/src/stack.submit.test.ts": "import Stack from './stack';\n\ndescribe('Stack', () => {\n  test('constructor', () => {\n    const s = new Stack();\n    expect(s instanceof Stack);\n  });\n\n  test('push()', () => {\n    const s = new Stack();\n    expect(s.push(100)).toBe(1);\n    expect(s.length()).toBe(1);\n    expect(s.push(200)).toBe(2);\n    expect(s.length()).toBe(2);\n  });\n\n  test('pop()', () => {\n    const s = new Stack();\n    s.push(100);\n    expect(s.length()).toBe(1);\n    expect(s.pop()).toBe(100);\n    expect(s.length()).toBe(0);\n    expect(s.pop()).toBe(undefined);\n  });\n\n  test('isEmpty()', () => {\n    const s = new Stack();\n    expect(s.isEmpty()).toBeTruthy();\n    s.push(100);\n    expect(s.isEmpty()).toBeFalsy();\n    s.pop();\n    expect(s.isEmpty()).toBeTruthy();\n  });\n\n  test('length()', () => {\n    const s = new Stack();\n    expect(s.length()).toBe(0);\n    s.push(100);\n    expect(s.length()).toBe(1);\n    s.push(200);\n    expect(s.length()).toBe(2);\n    s.pop();\n    expect(s.length()).toBe(1);\n    s.push(300);\n    expect(s.length()).toBe(2);\n  });\n\n  test('peek()', () => {\n    const s = new Stack();\n    expect(s.peek()).toBe(undefined);\n    s.push(100);\n    expect(s.peek()).toBe(100);\n    s.push(200);\n    expect(s.peek()).toBe(200);\n    s.pop();\n    expect(s.peek()).toBe(100);\n    s.push(300);\n    expect(s.peek()).toBe(300);\n    s.pop();\n    s.pop();\n    expect(s.peek()).toBe(undefined);\n  });\n});\n",
    "/src/stack.ts": "export default class Stack<T> {\n  _items: Array<T>;\n\n  constructor() {\n    this._items = [];\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   */\n  push(item: T): number {\n    return this._items.push(item);\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   */\n  pop(): T | undefined {\n    return this._items.pop();\n  }\n\n  /**\n   * Determines if the stack is empty.\n   */\n  isEmpty(): boolean {\n    return this.length() === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   */\n  peek(): T | undefined {\n    return this.isEmpty() ? undefined : this._items[this.length() - 1];\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   */\n  length(): number {\n    return this._items.length;\n  }\n}\n"
  },
  "skeleton": {
    "js": "export default class Stack {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  pop() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} `true` if the stack has no items, `false` otherwise.\n   */\n  isEmpty() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  peek() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    throw 'Not implemented!';\n  }\n}",
    "ts": "export default class Stack<T> {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   */\n  push(item: T): number {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   */\n  pop(): T | undefined {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Determines if the stack is empty.\n   */\n  isEmpty(): boolean {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   */\n  peek(): T | undefined {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   */\n  length(): number {\n    throw 'Not implemented!';\n  }\n}"
  },
  "workspace": {
    "main": "/src/stack.ts",
    "run": "/src/stack.run.test.ts",
    "submit": "/src/stack.submit.test.ts"
  }
}