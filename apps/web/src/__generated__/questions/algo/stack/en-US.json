{
  "description": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var c in e)s(n,c,{get:e[c],enumerable:!0})},o=(n,e,c,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!k.call(n,i)&&i!==c&&s(n,i,{get:()=>e[i],enumerable:!(a=m(e,i))||a.enumerable});return n};var g=(n,e,c)=>(c=n!=null?d(u(n)):{},o(e||!n||!n.__esModule?s(c,\"default\",{value:n,enumerable:!0}):c,n)),y=n=>o(s({},\"__esModule\",{value:!0}),n);var h=x((q,r)=>{r.exports=_jsx_runtime});var _={};f(_,{default:()=>O,frontmatter:()=>j});var t=g(h()),j={title:\"Stack\",excerpt:\"Implement a stack data structure containing the common stack methods\"};function l(n){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h2:\"h2\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"Implement a stack data structure in JavaScript that contains the following operations:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"new Stack()\"}),\": Creates an instance of a \",(0,t.jsx)(e.code,{children:\"Stack\"}),\" class that doesn't contain any items. The constructor does not accept any arguments.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"push()\"}),\": Pushes an item onto the top of the stack and returns the new length of the stack. Required time complexity: O(1).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"pop()\"}),\": Removes an item at the top of the stack and returns that item. Required time complexity: O(1).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"isEmpty()\"}),\": Determines if the stack is empty. Required time complexity: O(1).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"peek()\"}),\": Returns the item at the top of the stack without removing it from the stack. Required time complexity: O(1).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"length()\"}),\": Returns the number of items in the stack. Required time complexity: O(1).\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Examples\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const stack = new Stack();\nstack.isEmpty(); // true\nstack.push(1);\nstack.push(2);\nstack.length(); // 2\nstack.push(3);\nstack.peek(); // 3\nstack.pop(); // 3\nstack.isEmpty(); // false\n`})})]})}function R(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var O=R;return y(_);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/stack\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/stack.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/stack.run.test.ts": "import Stack from './stack';\n\ndescribe('Stack', () => {\n  test('constructor', () => {\n    const s = new Stack();\n    expect(s instanceof Stack);\n  });\n\n  test('push()', () => {\n    const s = new Stack();\n    expect(s.push(100)).toBe(1);\n    expect(s.push(200)).toBe(2);\n  });\n\n  test('pop()', () => {\n    const s = new Stack();\n    s.push(100);\n    s.push(200);\n    expect(s.pop()).toBe(200);\n    expect(s.pop()).toBe(100);\n  });\n});\n",
    "/src/stack.submit.test.ts": "import Stack from './stack';\n\ndescribe('Stack', () => {\n  test('constructor', () => {\n    const s = new Stack();\n    expect(s instanceof Stack);\n  });\n\n  test('push()', () => {\n    const s = new Stack();\n    expect(s.push(100)).toBe(1);\n    expect(s.length()).toBe(1);\n    expect(s.push(200)).toBe(2);\n    expect(s.length()).toBe(2);\n  });\n\n  test('pop()', () => {\n    const s = new Stack();\n    s.push(100);\n    expect(s.length()).toBe(1);\n    expect(s.pop()).toBe(100);\n    expect(s.length()).toBe(0);\n    expect(s.pop()).toBe(undefined);\n  });\n\n  test('isEmpty()', () => {\n    const s = new Stack();\n    expect(s.isEmpty()).toBeTruthy();\n    s.push(100);\n    expect(s.isEmpty()).toBeFalsy();\n    s.pop();\n    expect(s.isEmpty()).toBeTruthy();\n  });\n\n  test('length()', () => {\n    const s = new Stack();\n    expect(s.length()).toBe(0);\n    s.push(100);\n    expect(s.length()).toBe(1);\n    s.push(200);\n    expect(s.length()).toBe(2);\n    s.pop();\n    expect(s.length()).toBe(1);\n    s.push(300);\n    expect(s.length()).toBe(2);\n  });\n\n  test('peek()', () => {\n    const s = new Stack();\n    expect(s.peek()).toBe(undefined);\n    s.push(100);\n    expect(s.peek()).toBe(100);\n    s.push(200);\n    expect(s.peek()).toBe(200);\n    s.pop();\n    expect(s.peek()).toBe(100);\n    s.push(300);\n    expect(s.peek()).toBe(300);\n    s.pop();\n    s.pop();\n    expect(s.peek()).toBe(undefined);\n  });\n});\n",
    "/src/stack.ts": "export default class Stack<T> {\n  _items: Array<T>;\n\n  constructor() {\n    this._items = [];\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   */\n  push(item: T): number {\n    return this._items.push(item);\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   */\n  pop(): T | undefined {\n    return this._items.pop();\n  }\n\n  /**\n   * Determines if the stack is empty.\n   */\n  isEmpty(): boolean {\n    return this.length() === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   */\n  peek(): T | undefined {\n    return this.isEmpty() ? undefined : this._items[this.length() - 1];\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   */\n  length(): number {\n    return this._items.length;\n  }\n}\n"
  },
  "metadata": {
    "access": "free",
    "author": "yangshun",
    "companies": [],
    "created": 1670025600,
    "difficulty": "easy",
    "duration": 10,
    "excerpt": "Implement a stack data structure containing the common stack methods",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/stack",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [
      "queue"
    ],
    "published": true,
    "ranking": 100,
    "similarQuestions": [
      "queue"
    ],
    "slug": "stack",
    "subtitle": null,
    "title": "Stack",
    "topics": []
  },
  "skeleton": {
    "js": "export default class Stack {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  pop() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} `true` if the stack has no items, `false` otherwise.\n   */\n  isEmpty() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, `undefined` otherwise.\n   */\n  peek() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    throw 'Not implemented!';\n  }\n}",
    "ts": "export default class Stack<T> {\n  constructor() {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   */\n  push(item: T): number {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   */\n  pop(): T | undefined {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Determines if the stack is empty.\n   */\n  isEmpty(): boolean {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   */\n  peek(): T | undefined {\n    throw 'Not implemented!';\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   */\n  length(): number {\n    throw 'Not implemented!';\n  }\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var s=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),_=(n,e)=>{for(var i in e)s(n,i,{get:e[i],enumerable:!0})},a=(n,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let h of g(e))!b.call(n,h)&&h!==i&&s(n,h,{get:()=>e[h],enumerable:!(r=k(e,h))||r.enumerable});return n};var v=(n,e,i)=>(i=n!=null?f(y(n)):{},a(e||!n||!n.__esModule?s(i,\"default\",{value:n,enumerable:!0}):i,n)),T=n=>a(s({},\"__esModule\",{value:!0}),n);var d=w((C,c)=>{c.exports=_jsx_runtime});var D={};_(D,{default:()=>E});var t=v(d());var o=MDXCodeBlock;var l=`export default class Stack {\n  constructor() {\n    this._items = [];\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    return this._items.push(item);\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  pop() {\n    return this._items.pop();\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} \\`true\\` if the stack has no items, \\`false\\` otherwise.\n   */\n  isEmpty() {\n    return this.length() === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  peek() {\n    return this.isEmpty() ? undefined : this._items[this.length() - 1];\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    return this._items.length;\n  }\n}\n`;var m=`export default class Stack<T> {\n  _items: Array<T>;\n\n  constructor() {\n    this._items = [];\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   */\n  push(item: T): number {\n    return this._items.push(item);\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   */\n  pop(): T | undefined {\n    return this._items.pop();\n  }\n\n  /**\n   * Determines if the stack is empty.\n   */\n  isEmpty(): boolean {\n    return this.length() === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   */\n  peek(): T | undefined {\n    return this.isEmpty() ? undefined : this._items[this.length() - 1];\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   */\n  length(): number {\n    return this._items.length;\n  }\n}\n`;var p=`class Node {\n  constructor(value) {\n    this.value = value;\n    this.prev = null;\n  }\n}\n\nexport default class Stack {\n  constructor() {\n    this._top = null;\n    this._length = 0;\n  }\n\n  /**\n   * Pushes an item onto the top of the stack.\n   * @param {*} item The item to be pushed onto the stack.\n   * @return {number} The new length of the stack.\n   */\n  push(item) {\n    const node = new Node(item);\n    node.prev = this._top;\n    this._top = node;\n    this._length++;\n    return this._length;\n  }\n\n  /**\n   * Remove an item at the top of the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  pop() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n\n    const node = this._top;\n    this._top = node.prev;\n    node.prev = null;\n    this._length--;\n    return node.value;\n  }\n\n  /**\n   * Determines if the stack is empty.\n   * @return {boolean} \\`true\\` if the stack has no items, \\`false\\` otherwise.\n   */\n  isEmpty() {\n    return this._length === 0;\n  }\n\n  /**\n   * Returns the item at the top of the stack without removing it from the stack.\n   * @return {*} The item at the top of the stack if it is not empty, \\`undefined\\` otherwise.\n   */\n  peek() {\n    return this.isEmpty() ? undefined : this._top.value;\n  }\n\n  /**\n   * Returns the number of items in the stack.\n   * @return {number} The number of items in the stack.\n   */\n  length() {\n    return this._length;\n  }\n}\n`;function u(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Array-based solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The stack abstract data type can be easily implement in JavaScript with JavaScript \",(0,t.jsx)(e.code,{children:\"Array\"}),\"s. The main thing to note when implementing stacks is that that the operations should be O(1). Thankfully, JavaScript \",(0,t.jsx)(e.code,{children:\"Array\"}),\"'s \",(0,t.jsx)(e.code,{children:\"push()\"}),\" and \",(0,t.jsx)(e.code,{children:\"pop()\"}),\" operations are O(1) and the method signatures match the \",(0,t.jsx)(e.code,{children:\"Stack\"}),\"'s. Many of the methods are just simple wrappers around \",(0,t.jsx)(e.code,{children:\"Array\"}),\" methods.\"]}),`\n`,(0,t.jsx)(o,{languages:{jsx:l,tsx:m}}),`\n`,(0,t.jsx)(e.h3,{children:\"Linked list-based solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Stacks can also be implemented with singly-linked lists which are essentially a chain of connected nodes. To do that, we need to create a \",(0,t.jsx)(e.code,{children:\"Node\"}),\" class that has a \",(0,t.jsx)(e.code,{children:\"prev\"}),\" pointer, a reference to the \",(0,t.jsx)(e.code,{children:\"Node\"}),\" below if it's not the bottom item of the stack.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"push()\"}),\"-ing involves creating a new \",(0,t.jsx)(e.code,{children:\"Node\"}),\" and pointing the current top of the stack to that new \",(0,t.jsx)(e.code,{children:\"Node\"}),\"'s \",(0,t.jsx)(e.code,{children:\"prev\"}),\" field and updating a reference to the new top of the stack. \",(0,t.jsx)(e.code,{children:\"pop()\"}),\"-ing is the reverse where we find the \",(0,t.jsx)(e.code,{children:\"prev\"}),\" node of the current top and set it to be the new top of the stack.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since the time complexity of \",(0,t.jsx)(e.code,{children:\"length()\"}),\" has to be O(1) and counting the number of items in a linked list will take O(n), we need to separately track the number of items in the list with a \",(0,t.jsx)(e.code,{children:\"_length\"}),\" instance property and update it within the \",(0,t.jsx)(e.code,{children:\"push()\"}),\" and \",(0,t.jsx)(e.code,{children:\"pop()\"}),\" methods.\"]}),`\n`,(0,t.jsx)(o,{children:p}),`\n`,(0,t.jsx)(e.h2,{children:\"Edge cases\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Calling \",(0,t.jsx)(e.code,{children:\"pop()\"}),\" on empty stacks.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Calling \",(0,t.jsx)(e.code,{children:\"peek()\"}),\" on empty stacks.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Techniques\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Familiarity with JavaScript arrays.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Object-oriented programming.\"}),`\n`]})]})}function R(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var E=R;return T(D);})();\n;return Component;",
  "workspace": {
    "main": "/src/stack.ts",
    "run": "/src/stack.run.test.ts",
    "submit": "/src/stack.submit.test.ts"
  }
}