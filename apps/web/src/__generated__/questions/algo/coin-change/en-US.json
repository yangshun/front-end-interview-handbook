{
  "description": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var b=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),y=(t,n)=>{for(var i in n)r(t,i,{get:n[i],enumerable:!0})},a=(t,n,i,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of g(n))!x.call(t,o)&&o!==i&&r(t,o,{get:()=>n[o],enumerable:!(c=p(n,o))||c.enumerable});return t};var j=(t,n,i)=>(i=t!=null?d(f(t)):{},a(n||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),C=t=>a(r({},\"__esModule\",{value:!0}),t);var l=b((X,s)=>{s.exports=_jsx_runtime});var w={};y(w,{default:()=>M,frontmatter:()=>_});var e=j(l());var u=MDXTestExamples;var h=[{input:[[\"coins\",[3,7,4]],[\"target\",14]],output:2,explanation:\"We can form the target amount (14) using the following combination of coins: 7 + 7. This requires a minimum of 2 coins.\"},{input:[[\"coins\",[1]],[\"target\",0]],output:0,explanation:\"The target amount is 0, which requires no coins to reach. Even though there's only a 1 coin available, you can still form 0 using no coins.\"},{input:[[\"coins\",[2]],[\"target\",3]],output:-1,explanation:\"The only available coin denomination is 2. However, it's impossible to form the target amount (3) using just multiples of 2. Therefore, no combination of coins can reach 3, and the output is -1.\"}];var _={title:\"Minimum Coins for Change\",excerpt:\"Implement a function to return minimum coins needed to make the given amount\"};function m(t){let n=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Given an integer array \",(0,e.jsx)(n.code,{children:\"coins\"}),\" indicating different coin denominations and an integer \",(0,e.jsx)(n.code,{children:\"target\"}),\" denoting a total sum of money, return the minimum number of coins needed to make up the \",(0,e.jsx)(n.code,{children:\"target\"}),\". If it's not possible to make up the \",(0,e.jsx)(n.code,{children:\"target\"}),\" with any combination of the coins, return \",(0,e.jsx)(n.code,{children:\"-1\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Assume there's an infinite supply of each coin.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Input\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"coins: number[]\"}),\": An array of integers\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"target: number\"}),\": An integer\"]}),`\n`]}),`\n`,(0,e.jsx)(u,{testCases:h}),`\n`,(0,e.jsx)(n.h3,{children:\"Constraints\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"1 <= \",(0,e.jsx)(n.code,{children:\"coins.length\"}),\" <= 12\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"1 <= \",(0,e.jsx)(n.code,{children:\"coins[i]\"}),\" <= 1,000,000\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"0 <= \",(0,e.jsx)(n.code,{children:\"target\"}),\" <= 10,000\"]}),`\n`]})]})}function v(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(m,t)})):m(t)}var M=v;return C(w);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/coin-change\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/coin-change.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/coin-change.run.test.ts": "import fn from './coin-change';\nimport runTestCases from './run.tests.json';\n\ndescribe('minimumCoinsForChange', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = [${example.input[0][1]}] ${example.input[1][0]} = ${example.input[1][1]}`, () => {\n      expect(fn(example.input[0][1], example.input[1][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/coin-change.submit.test.ts": "import minimumCoinsForChange from './coin-change';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('minimumCoinsForChange', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`coins = [${example.input[0][1]}] target = ${example.input[1][1]}`, () => {\n      expect(\n        minimumCoinsForChange(example.input[0][1], example.input[1][1]),\n      ).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/coin-change.ts": "export default function minimumCoinsForChange(\n  coins: number[],\n  target: number,\n): number {\n  // Initialize a dp array with a large value (Infinity)\n  const dp: number[] = new Array(target + 1).fill(Number.MAX_VALUE);\n\n  // Base case: 0 coins are needed to make amount 0\n  dp[0] = 0;\n\n  // Iterate over each amount from 1 to the target amount\n  for (let i = 1; i <= target; i++) {\n    // Check each coin to see if it can contribute to the current amount\n    for (const coin of coins) {\n      if (i - coin >= 0) {\n        dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n      }\n    }\n  }\n\n  // If the value at dp[amount] is still Infinity, return -1 (not possible)\n  // Otherwise, return the minimum number of coins needed for the target amount\n  return dp[target] === Number.MAX_VALUE ? -1 : dp[target];\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [\n      [\"coins\", [3, 7, 4]],\n      [\"target\", 14]\n    ],\n    \"output\": 2,\n    \"explanation\": \"We can form the target amount (14) using the following combination of coins: 7 + 7. This requires a minimum of 2 coins.\"\n  },\n  {\n    \"input\": [\n      [\"coins\", [1]],\n      [\"target\", 0]\n    ],\n    \"output\": 0,\n    \"explanation\": \"The target amount is 0, which requires no coins to reach. Even though there's only a 1 coin available, you can still form 0 using no coins.\"\n  },\n  {\n    \"input\": [\n      [\"coins\", [2]],\n      [\"target\", 3]\n    ],\n    \"output\": -1,\n    \"explanation\": \"The only available coin denomination is 2. However, it's impossible to form the target amount (3) using just multiples of 2. Therefore, no combination of coins can reach 3, and the output is -1.\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [\n      [\"coins\", [6, 5, 5]],\n      [\"target\", 10]\n    ],\n    \"output\": 2\n  },\n  {\n    \"input\": [\n      [\"coins\", [7, 2, 6]],\n      [\"target\", 2]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"coins\", [2, 5, 3]],\n      [\"target\", 9]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\"coins\", [4, 1]],\n      [\"target\", 8]\n    ],\n    \"output\": 2\n  },\n  {\n    \"input\": [\n      [\"coins\", [1, 3, 6, 5]],\n      [\"target\", 7]\n    ],\n    \"output\": 2\n  },\n  {\n    \"input\": [\n      [\"coins\", [5, 2]],\n      [\"target\", 2]\n    ],\n    \"output\": 1\n  },\n  {\n    \"input\": [\n      [\"coins\", [5, 2, 2]],\n      [\"target\", 4]\n    ],\n    \"output\": 2\n  },\n  {\n    \"input\": [\n      [\"coins\", [5, 2, 5, 2, 2]],\n      [\"target\", 4]\n    ],\n    \"output\": 2\n  },\n  {\n    \"input\": [\n      [\"coins\", [7, 5, 1, 7, 3]],\n      [\"target\", 4]\n    ],\n    \"output\": 2\n  },\n  {\n    \"input\": [\n      [\"coins\", [1, 4, 7, 4, 2, 6, 5]],\n      [\"target\", 0]\n    ],\n    \"output\": 0\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4210, 2131, 3524, 3309, 4956, 3507, 4425, 3945, 2450, 2083, 4976, 2954]\n      ],\n      [\"target\", 9323]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1637, 5067, 342, 5552, 3207, 3764, 104, 3923, 1924, 307, 1373, 3275]\n      ],\n      [\"target\", 9973]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1687, 5222, 3342, 2067, 2063, 1186, 344, 145, 2496, 5250, 5907, 1397]\n      ],\n      [\"target\", 9398]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4321, 5697, 4119, 3374, 3336, 5067, 2990, 3541, 1353, 157, 4844, 4715]\n      ],\n      [\"target\", 9940]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [323, 2462, 4036, 2085, 2742, 1022, 262, 2732, 546, 4891, 5042, 967]\n      ],\n      [\"target\", 9075]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4796, 5318, 5826, 2696, 1520, 5361, 71, 3702, 2338, 3924, 2249, 4900]\n      ],\n      [\"target\", 9827]\n    ],\n    \"output\": 8\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2499, 927, 3087, 5435, 2309, 5297, 5982, 4141, 2752, 752, 3105, 5357]\n      ],\n      [\"target\", 9374]\n    ],\n    \"output\": 12\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [305, 5391, 4187, 2264, 602, 618, 6000, 1629, 5010, 2262, 2237, 833]\n      ],\n      [\"target\", 9835]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3769, 519, 4010, 3295, 1031, 1869, 1767, 2391, 2975, 1771, 3339, 4569]\n      ],\n      [\"target\", 9209]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2087, 4635, 2426, 4019, 5071, 782, 3339, 1050, 2053, 1832, 914, 941]\n      ],\n      [\"target\", 9889]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4713, 4332, 1539, 582, 5745, 4490, 1986, 3252, 3774, 4189, 3513, 464]\n      ],\n      [\"target\", 9428]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2346, 3534, 2012, 524, 451, 894, 233, 124, 702, 4525, 5859, 1178]\n      ],\n      [\"target\", 9525]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1602, 2636, 500, 2791, 4899, 3940, 3197, 1292, 4261, 1815, 1961, 4379]\n      ],\n      [\"target\", 9713]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [32, 4298, 123, 2680, 3831, 291, 264, 1480, 5767, 3408, 5664, 1691]\n      ],\n      [\"target\", 9419]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3936, 1169, 2993, 1439, 2274, 2547, 4902, 5142, 4233, 5767, 1700, 1635]\n      ],\n      [\"target\", 9500]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1761, 4975, 4334, 3181, 5640, 5291, 5362, 4566, 2349, 5130, 5017, 2847]\n      ],\n      [\"target\", 9901]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2337, 5577, 3028, 1160, 5397, 4334, 2378, 3034, 5689, 3046, 5115, 972]\n      ],\n      [\"target\", 9032]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4900, 4910, 474, 4690, 1383, 3991, 5240, 763, 617, 70, 4892, 5849]\n      ],\n      [\"target\", 9989]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2731, 1775, 2383, 29, 2459, 2113, 4611, 5549, 4114, 4104, 4836, 2696]\n      ],\n      [\"target\", 9730]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [698, 1396, 4925, 3194, 4874, 2666, 3538, 1556, 961, 1768, 5738, 4084]\n      ],\n      [\"target\", 9125]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4184, 212, 580, 965, 4365, 5095, 953, 326, 996, 2376, 3344, 4291]\n      ],\n      [\"target\", 9944]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [663, 1571, 3289, 5647, 2132, 4927, 5440, 5447, 222, 3434, 1952, 138]\n      ],\n      [\"target\", 9372]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [312, 4280, 3224, 4036, 4892, 3443, 5919, 705, 503, 5407, 2992, 574]\n      ],\n      [\"target\", 9982]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4257, 4147, 5450, 3894, 4864, 2746, 5933, 1633, 289, 4762, 742, 3643]\n      ],\n      [\"target\", 9859]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5282, 4695, 2704, 3317, 5336, 3595, 2397, 2057, 1239, 3400, 700, 1578]\n      ],\n      [\"target\", 9683]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [859, 5910, 3837, 3146, 4508, 2690, 3689, 5575, 3046, 5247, 2497, 693]\n      ],\n      [\"target\", 9921]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4342, 1658, 2402, 3935, 5136, 3968, 1757, 4777, 3830, 2270, 5472, 4299]\n      ],\n      [\"target\", 9058]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2286, 5862, 4883, 17, 1748, 1526, 2149, 1055, 5062, 4928, 3747, 2709]\n      ],\n      [\"target\", 9066]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [665, 944, 2822, 729, 2268, 1375, 1195, 776, 268, 5247, 238, 1474]\n      ],\n      [\"target\", 9415]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3748, 3756, 5137, 4928, 3339, 4446, 3255, 1542, 2087, 5887, 3411, 1326]\n      ],\n      [\"target\", 9443]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [528, 3585, 3904, 3958, 2600, 220, 2208, 2413, 336, 145, 2826, 5804]\n      ],\n      [\"target\", 9151]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5304, 487, 721, 3817, 3135, 3167, 4695, 4509, 2286, 3713, 4973, 198]\n      ],\n      [\"target\", 9346]\n    ],\n    \"output\": 12\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1644, 3369, 2715, 4679, 3729, 1789, 3583, 5948, 734, 5608, 3490, 5199]\n      ],\n      [\"target\", 9758]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1777, 5629, 2922, 1872, 3335, 605, 3064, 1745, 2538, 5498, 5843, 5711]\n      ],\n      [\"target\", 9728]\n    ],\n    \"output\": 11\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2243, 2260, 3419, 925, 3636, 3289, 2556, 1089, 3593, 761, 3226, 2025]\n      ],\n      [\"target\", 9210]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4294, 3222, 2747, 4792, 3849, 2214, 3865, 2348, 3385, 396, 2274, 2396]\n      ],\n      [\"target\", 9655]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3528, 1597, 1741, 1245, 3490, 2947, 5215, 2108, 56, 155, 2406, 5356]\n      ],\n      [\"target\", 9816]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1886, 1756, 1649, 4543, 1053, 2288, 54, 4634, 1554, 863, 2174, 1651]\n      ],\n      [\"target\", 9277]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4805, 2918, 613, 86, 5415, 3540, 5158, 5968, 2672, 4799, 333, 5903]\n      ],\n      [\"target\", 9272]\n    ],\n    \"output\": 9\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3528, 5193, 2162, 1101, 2847, 2263, 3357, 3991, 4292, 5865, 3331, 846]\n      ],\n      [\"target\", 9607]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5660, 5719, 3415, 3729, 4906, 50, 1720, 4066, 1626, 5396, 2844, 4325]\n      ],\n      [\"target\", 9330]\n    ],\n    \"output\": 17\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3161, 706, 559, 4673, 2247, 4480, 5487, 1008, 5323, 4198, 4785, 4680]\n      ],\n      [\"target\", 9263]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [105, 591, 684, 452, 5839, 4483, 424, 4590, 4124, 1825, 4909, 2201]\n      ],\n      [\"target\", 9317]\n    ],\n    \"output\": 8\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5068, 2313, 4345, 3372, 1877, 1102, 1110, 5127, 2006, 5066, 2725, 4196]\n      ],\n      [\"target\", 9821]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2555, 5590, 1331, 3685, 5340, 5382, 2699, 3815, 871, 3497, 4295, 4376]\n      ],\n      [\"target\", 9955]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1841, 3931, 1795, 1096, 1525, 264, 660, 3329, 522, 4360, 2128, 5802]\n      ],\n      [\"target\", 9366]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [570, 3736, 3793, 3572, 170, 5981, 908, 1427, 5734, 1102, 1390, 5339]\n      ],\n      [\"target\", 9584]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [447, 5244, 573, 2704, 5610, 3772, 723, 5466, 2645, 320, 431, 2162]\n      ],\n      [\"target\", 9396]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4816, 2497, 1695, 3139, 3793, 2956, 5543, 5021, 1359, 543, 4309, 3201]\n      ],\n      [\"target\", 9570]\n    ],\n    \"output\": 14\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4651, 5465, 1394, 5778, 587, 1863, 2572, 4006, 362, 1821, 1183, 5054]\n      ],\n      [\"target\", 9468]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1393, 2860, 4529, 4044, 2421, 2020, 4373, 2213, 1595, 3657, 524, 2659]\n      ],\n      [\"target\", 9121]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4056, 5926, 315, 4839, 4837, 1493, 3400, 1529, 3516, 508, 2455, 1817]\n      ],\n      [\"target\", 9784]\n    ],\n    \"output\": 8\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4928, 4618, 3511, 1102, 3213, 26, 5364, 1635, 3651, 4677, 632, 3160]\n      ],\n      [\"target\", 9374]\n    ],\n    \"output\": 17\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4419, 171, 2234, 5718, 2263, 2180, 1993, 4689, 3002, 1808, 5511, 4844]\n      ],\n      [\"target\", 9342]\n    ],\n    \"output\": 12\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1233, 1870, 3008, 5055, 575, 2199, 2429, 5909, 201, 904, 98, 231]\n      ],\n      [\"target\", 9260]\n    ],\n    \"output\": 9\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1820, 4594, 1123, 3592, 2685, 2663, 3725, 5305, 5289, 3286, 4956, 4493]\n      ],\n      [\"target\", 9577]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3905, 2483, 4415, 1169, 1600, 1041, 2706, 2423, 1584, 1223, 1928, 323]\n      ],\n      [\"target\", 9823]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1731, 3720, 2912, 2532, 5379, 1558, 2449, 5017, 3071, 2462, 2110, 2630]\n      ],\n      [\"target\", 9849]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1530, 4884, 2371, 2815, 3065, 4706, 1240, 4481, 430, 1664, 1610, 2223]\n      ],\n      [\"target\", 9484]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [493, 1726, 416, 5645, 1625, 3001, 1719, 2564, 3471, 136, 3606, 4112]\n      ],\n      [\"target\", 9134]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1118, 3738, 797, 3365, 2538, 1787, 3248, 1918, 2655, 1399, 1824, 3816]\n      ],\n      [\"target\", 9431]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [785, 2444, 5063, 2372, 2109, 3940, 5339, 1162, 3733, 201, 1547, 4488]\n      ],\n      [\"target\", 9414]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [740, 5716, 5718, 3613, 869, 2322, 838, 848, 4224, 1934, 3078, 1792]\n      ],\n      [\"target\", 9891]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2693, 5909, 3142, 2276, 2743, 4094, 567, 5995, 1772, 3246, 1100, 2327]\n      ],\n      [\"target\", 9569]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4828, 4221, 5265, 847, 3681, 4634, 4987, 1822, 4354, 5103, 3565, 585]\n      ],\n      [\"target\", 9616]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3572, 3529, 1476, 4861, 1054, 1759, 930, 1486, 1867, 1181, 2071, 4557]\n      ],\n      [\"target\", 9663]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2724, 29, 1416, 263, 873, 2256, 1077, 1551, 3839, 5221, 5602, 5336]\n      ],\n      [\"target\", 9704]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5783, 3537, 423, 809, 933, 1270, 5424, 945, 1143, 5948, 2318, 3131]\n      ],\n      [\"target\", 9617]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3587, 4149, 2571, 3018, 1693, 824, 4, 3184, 5881, 928, 3647, 338]\n      ],\n      [\"target\", 9046]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3720, 5146, 593, 805, 2698, 5508, 5484, 4140, 38, 970, 2480, 3482]\n      ],\n      [\"target\", 9001]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3152, 4628, 5399, 1472, 2826, 3449, 5165, 3568, 3330, 5069, 5563, 692]\n      ],\n      [\"target\", 9167]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [229, 366, 1977, 393, 4275, 3841, 1897, 3990, 4196, 1514, 5945, 527]\n      ],\n      [\"target\", 9690]\n    ],\n    \"output\": 9\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3695, 1992, 4095, 5785, 4012, 205, 1356, 2940, 821, 1719, 1505, 5771]\n      ],\n      [\"target\", 9692]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [370, 3725, 481, 2765, 1581, 4884, 454, 4675, 4167, 3679, 1301, 4872]\n      ],\n      [\"target\", 9218]\n    ],\n    \"output\": 3\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2242, 4925, 495, 3237, 2387, 1323, 2178, 2515, 4735, 3328, 5874, 3108]\n      ],\n      [\"target\", 9503]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3030, 3632, 3220, 4439, 1895, 703, 1728, 3382, 1998, 1048, 4693, 5990]\n      ],\n      [\"target\", 9737]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4292, 2255, 3417, 2752, 1365, 2229, 4033, 2797, 1314, 32, 4432, 919]\n      ],\n      [\"target\", 9282]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3137, 4583, 3707, 3227, 5508, 143, 4121, 1043, 4048, 3739, 1724, 4728]\n      ],\n      [\"target\", 9092]\n    ],\n    \"output\": 10\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [277, 4943, 5795, 2336, 2302, 2911, 515, 3174, 4736, 1547, 4233, 2285]\n      ],\n      [\"target\", 9454]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2096, 5834, 5513, 1164, 2354, 3891, 2134, 5683, 4319, 1830, 21, 1980]\n      ],\n      [\"target\", 9811]\n    ],\n    \"output\": 10\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4229, 514, 1934, 436, 1208, 1783, 46, 1852, 4604, 550, 2896, 3845]\n      ],\n      [\"target\", 9573]\n    ],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5475, 5471, 5608, 2925, 5056, 924, 1870, 1699, 5609, 3245, 1065, 2495]\n      ],\n      [\"target\", 9984]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4927, 411, 432, 1946, 5819, 5695, 2906, 3944, 1811, 3033, 5179, 4207]\n      ],\n      [\"target\", 9080]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3150, 46, 1531, 2716, 5178, 2285, 5478, 1962, 3350, 5083, 5186, 377]\n      ],\n      [\"target\", 9526]\n    ],\n    \"output\": 17\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4005, 1996, 2723, 161, 2965, 2115, 5557, 2132, 3313, 4625, 3711, 3226]\n      ],\n      [\"target\", 9674]\n    ],\n    \"output\": 7\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [2218, 5688, 1474, 979, 1228, 1947, 2031, 1600, 3434, 1907, 743, 4687]\n      ],\n      [\"target\", 9840]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [1546, 2936, 5388, 1843, 636, 2579, 4752, 2602, 68, 3776, 153, 3093]\n      ],\n      [\"target\", 9543]\n    ],\n    \"output\": 5\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [3332, 2096, 5921, 2448, 970, 3434, 1633, 1375, 2716, 991, 4131, 1539]\n      ],\n      [\"target\", 9014]\n    ],\n    \"output\": 6\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [5133, 2948, 4652, 2077, 3527, 1396, 4144, 5748, 5442, 1176, 4919, 759]\n      ],\n      [\"target\", 9260]\n    ],\n    \"output\": -1\n  },\n  {\n    \"input\": [\n      [\n        \"coins\",\n        [4122, 5828, 4212, 312, 5039, 2967, 4133, 4349, 794, 446, 3347, 4890]\n      ],\n      [\"target\", 9482]\n    ],\n    \"output\": 5\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1733616000,
    "difficulty": "medium",
    "duration": 40,
    "excerpt": "Implement a function to return minimum coins needed to make the given amount",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/coin-change",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "coin-change",
    "subtitle": null,
    "title": "Minimum Coins for Change",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {number[]} coins\n * @param {number} target\n * @return {number}\n */\nexport default function minimumCoinsForChange(coins, target) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function minimumCoinsForChange(\n  coins: number[],\n  target: number,\n): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var l=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),y=(e,n)=>{for(var t in n)r(e,t,{get:n[t],enumerable:!0})},c=(e,n,t,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of p(n))!b.call(e,o)&&o!==t&&r(e,o,{get:()=>n[o],enumerable:!(a=g(n,o))||a.enumerable});return e};var F=(e,n,t)=>(t=e!=null?l(C(e)):{},c(n||!e||!e.__esModule?r(t,\"default\",{value:e,enumerable:!0}):t,e)),I=e=>c(r({},\"__esModule\",{value:!0}),e);var u=x((B,s)=>{s.exports=_jsx_runtime});var v={};y(v,{default:()=>j});var i=F(u());var m=MDXCodeBlock;var d=`export default function minimumCoinsForChange(\n  coins: number[],\n  target: number,\n): number {\n  // Initialize a dp array with a large value (Infinity)\n  const dp: number[] = new Array(target + 1).fill(Number.MAX_VALUE);\n\n  // Base case: 0 coins are needed to make amount 0\n  dp[0] = 0;\n\n  // Iterate over each amount from 1 to the target amount\n  for (let i = 1; i <= target; i++) {\n    // Check each coin to see if it can contribute to the current amount\n    for (const coin of coins) {\n      if (i - coin >= 0) {\n        dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n      }\n    }\n  }\n\n  // If the value at dp[amount] is still Infinity, return -1 (not possible)\n  // Otherwise, return the minimum number of coins needed for the target amount\n  return dp[target] === Number.MAX_VALUE ? -1 : dp[target];\n}\n`;var h=`function minimumCoinsForChangeHelper(coins: number[], target: number): number {\n  // Base case: If the amount is 0, no coins are needed.\n  if (target === 0) {\n    return 0;\n  }\n\n  let minCoins = Infinity;\n\n  // Try each coin denomination.\n  for (const coin of coins) {\n    // Check if the coin denomination is not greater than the amount.\n    if (coin <= target) {\n      // Recursively calculate the minimum coins needed for the remaining amount.\n      const remainingCoins = minimumCoinsForChangeHelper(coins, target - coin);\n\n      // If a valid solution is found and it requires fewer coins, update minCoins.\n      if (remainingCoins !== -1 && remainingCoins + 1 < minCoins) {\n        minCoins = remainingCoins + 1;\n      }\n    }\n  }\n\n  // If no valid solution was found, return -1. Otherwise, return the minimum coins.\n  return minCoins === Infinity ? -1 : minCoins;\n}\n\nexport default function minimumCoinsForChange(\n  coins: number[],\n  target: number,\n): number {\n  return minimumCoinsForChangeHelper(coins, target);\n}\n`;function f(e){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{children:\"1. Brute Force Approach Using Recursion\"}),`\n`,(0,i.jsxs)(n.p,{children:[\"Time complexity: O(n\",(0,i.jsx)(\"sup\",{children:\"t\"}),\"), where \",(0,i.jsx)(n.code,{children:\"n\"}),\" is the number of different coin denominations, and \",(0,i.jsx)(n.code,{children:\"t\"}),\" is the target amount\"]}),`\n`,(0,i.jsx)(m,{children:h}),`\n`,(0,i.jsx)(n.h2,{children:\"2. Using Dynamic Programming\"}),`\n`,(0,i.jsxs)(n.p,{children:[\"Time complexity: O(n.t), where \",(0,i.jsx)(n.code,{children:\"n\"}),\" is the number of different coin denominations, and \",(0,i.jsx)(n.code,{children:\"t\"}),\" is the target amount\"]}),`\n`,(0,i.jsx)(m,{children:d})]})}function M(e={}){let{wrapper:n}=e.components||{};return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(f,e)})):f(e)}var j=M;return I(v);})();\n;return Component;",
  "workspace": {
    "main": "/src/coin-change.ts",
    "run": "/src/coin-change.run.test.ts",
    "submit": "/src/coin-change.submit.test.ts"
  }
}