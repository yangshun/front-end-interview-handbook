{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/bubble-sort\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/bubble-sort.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/bubble-sort.run.test.ts": "import bubbleSort from './bubble-sort';\n\ndescribe('bubbleSort', () => {\n  test('empty', () => {\n    expect(bubbleSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(bubbleSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(bubbleSort([2, 1])).toEqual([1, 2]);\n    expect(bubbleSort([1, 2])).toEqual([1, 2]);\n  });\n});\n",
    "/src/bubble-sort.submit.test.ts": "import bubbleSort from './bubble-sort';\n\ndescribe('bubbleSort', () => {\n  test('empty', () => {\n    expect(bubbleSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(bubbleSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(bubbleSort([2, 1])).toEqual([1, 2]);\n    expect(bubbleSort([1, 2])).toEqual([1, 2]);\n  });\n\n  test('more than two elements', () => {\n    expect(bubbleSort([10, 2, 4])).toEqual([2, 4, 10]);\n    expect(bubbleSort([4, 5, 6, 1, 2, 3])).toEqual([1, 2, 3, 4, 5, 6]);\n    expect(bubbleSort([1, 2, 3, 4, 5, 0])).toEqual([0, 1, 2, 3, 4, 5]);\n    expect(bubbleSort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(bubbleSort([5, 4, 3, 2, 1, 10, 9, 8, 7, 6])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(bubbleSort([98322, 3242, 876, -234, 34, 12331])).toEqual([\n      -234, 34, 876, 3242, 12331, 98322,\n    ]);\n  });\n\n  test('duplicate elements', () => {\n    expect(bubbleSort([1, 1])).toEqual([1, 1]);\n    expect(bubbleSort([2, 2, 2])).toEqual([2, 2, 2]);\n    expect(bubbleSort([2, 1, 2])).toEqual([1, 2, 2]);\n    expect(bubbleSort([1, 1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1, 1]);\n    expect(bubbleSort([7, 2, 4, 3, 1, 2])).toEqual([1, 2, 2, 3, 4, 7]);\n  });\n});\n",
    "/src/bubble-sort.ts": "export default function bubbleSort(arr: Array<number>): Array<number> {\n  // Do multiple iterations over the array.\n  for (let i: number = 0; i < arr.length; i++) {\n    // For each iteration, compare every adjacent pairs while ignoring the last i elements that are already sorted.\n    for (let j: number = 0; j < arr.length - i; j++) {\n      // If the left element in the pair is larger than the right one, swap their positions to ensure that elements are sorted ascendingly.\n      if (arr[j] > arr[j + 1]) {\n        let temp: number = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n\n  // Return the sorted array.\n  return arr;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<number>} arr The input integer array to be sorted.\n * @return {Array<number>}\n */\nexport default function bubbleSort(arr) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function bubbleSort(arr: Array<number>): Array<number> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/bubble-sort.ts",
    "run": "/src/bubble-sort.run.test.ts",
    "submit": "/src/bubble-sort.submit.test.ts"
  }
}