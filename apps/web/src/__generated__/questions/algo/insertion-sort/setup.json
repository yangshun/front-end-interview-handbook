{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/insertion-sort\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/insertion-sort.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/insertion-sort.run.test.ts": "import insertionSort from './insertion-sort';\n\ndescribe('insertionSort', () => {\n  test('empty', () => {\n    expect(insertionSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(insertionSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(insertionSort([2, 1])).toEqual([1, 2]);\n    expect(insertionSort([1, 2])).toEqual([1, 2]);\n  });\n});\n",
    "/src/insertion-sort.submit.test.ts": "import insertionSort from './insertion-sort';\n\ndescribe('insertionSort', () => {\n  test('empty', () => {\n    expect(insertionSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(insertionSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(insertionSort([2, 1])).toEqual([1, 2]);\n    expect(insertionSort([1, 2])).toEqual([1, 2]);\n  });\n\n  test('more than two elements', () => {\n    expect(insertionSort([10, 2, 4])).toEqual([2, 4, 10]);\n    expect(insertionSort([4, 5, 6, 1, 2, 3])).toEqual([1, 2, 3, 4, 5, 6]);\n    expect(insertionSort([1, 2, 3, 4, 5, 0])).toEqual([0, 1, 2, 3, 4, 5]);\n    expect(insertionSort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(insertionSort([5, 4, 3, 2, 1, 10, 9, 8, 7, 6])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(insertionSort([98322, 3242, 876, -234, 34, 12331])).toEqual([\n      -234, 34, 876, 3242, 12331, 98322,\n    ]);\n  });\n\n  test('duplicate elements', () => {\n    expect(insertionSort([1, 1])).toEqual([1, 1]);\n    expect(insertionSort([2, 2, 2])).toEqual([2, 2, 2]);\n    expect(insertionSort([2, 1, 2])).toEqual([1, 2, 2]);\n    expect(insertionSort([1, 1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1, 1]);\n    expect(insertionSort([7, 2, 4, 3, 1, 2])).toEqual([1, 2, 2, 3, 4, 7]);\n  });\n});\n",
    "/src/insertion-sort.ts": "export default function insertionSort(arr: Array<number>): Array<number> {\n  // Iterate through the array, starting with the 2nd element.\n  for (let i = 1; i < arr.length; i++) {\n    // Store the current value in a variable so it\n    // can be shifted to the correct position after the comparisons.\n    let currentValue = arr[i];\n\n    // Initialize a pointer for the index of the previous element\n    // so we can use it to iterate progressively backwards\n    // through preceding elements.\n    let j = i - 1;\n\n    // Keep iterating backwards through preceding elements\n    // as long as the previous element is greater than the current value.\n    while (j >= 0 && arr[j] > currentValue) {\n      // \"Move\" the previous element one position to the right.\n      // if it's bigger than currentValue.\n      arr[j + 1] = arr[j];\n\n      // Decrement the pointer so as to keep comparing with the\n      // previous element.\n      j--;\n    }\n\n    // Set the currentValue into its final position.\n    arr[j + 1] = currentValue;\n  }\n\n  // Return the sorted array.\n  return arr;\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<number>} arr The input integer array to be sorted.\n * @return {Array<number>}\n */\nexport default function insertionSort(arr) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function insertionSort(arr: Array<number>): Array<number> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/insertion-sort.ts",
    "run": "/src/insertion-sort.run.test.ts",
    "submit": "/src/insertion-sort.submit.test.ts"
  }
}