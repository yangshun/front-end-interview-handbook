{
  "description": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)o(n,r,{get:e[r],enumerable:!0})},d=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!x.call(n,i)&&i!==r&&o(n,i,{get:()=>e[i],enumerable:!(c=u(e,i))||c.enumerable});return n};var y=(n,e,r)=>(r=n!=null?m(p(n)):{},d(e||!n||!n.__esModule?o(r,\"default\",{value:n,enumerable:!0}):r,n)),j=n=>d(o({},\"__esModule\",{value:!0}),n);var a=w((v,l)=>{l.exports=_jsx_runtime});var E={};b(E,{default:()=>D,frontmatter:()=>_});var t=y(a());var h=MDXTestExamples;var s=[{input:[[\"grid\",[[\"a\",\"b\",\"c\",\"e\"],[\"s\",\"f\",\"c\",\"t\"],[\"a\",\"d\",\"e\",\"e\"]]],[\"target\",\"tee\"]],output:!0,explanation:\"The word 'tee' can be formed starting from the cell (1, 3).\"},{input:[[\"grid\",[[\"a\",\"b\"],[\"c\",\"d\"]]],[\"target\",\"abcd\"]],output:!1,explanation:\"The word 'abcd' cannot be formed. There's no way to move from 'b' to 'c' as required by the word.\"},{input:[[\"grid\",[[\"h\",\"e\",\"l\",\"l\",\"o\"],[\"w\",\"o\",\"r\",\"l\",\"d\"]]],[\"target\",\"hello\"]],output:!0,explanation:\"The word 'hello' is found in the first row of the grid.\"}];var _={title:\"Find Word in Grid\",excerpt:\"Implement a function to check the existence of a word in a grid\"};function g(n){let e=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Given a grid of characters with dimensions \",(0,t.jsx)(e.code,{children:\"m x n\"}),\", determine if a specified word can be formed by connecting adjacent characters in the grid.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The word can be formed by traveling through adjacent cells, where adjacent cells are those directly next to each other either horizontally or vertically. Each cell in the grid can only be used once for forming the word.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"grid: string[][]\"}),\": A 2D array of size \",(0,t.jsx)(e.code,{children:\"m x n\"}),\", where each element is a lowercase English letter\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"target: string\"}),\": A string to be searched for in the grid\"]}),`\n`]}),`\n`,(0,t.jsx)(h,{testCases:s}),`\n`,(0,t.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"grid.length\"}),\", \",(0,t.jsx)(e.code,{children:\"grid[i].length\"}),\" <= 6\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"target.length\"}),\" <= 15\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Both \",(0,t.jsx)(e.code,{children:\"grid\"}),\" and \",(0,t.jsx)(e.code,{children:\"target\"}),\" consist only of lowercase English letters\"]}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var D=C;return j(E);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/grid-find-word\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/grid-find-word.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/grid-find-word.run.test.ts": "import fn from './grid-find-word';\nimport runTestCases from './run.tests.json';\n\ndescribe('findWordInGrid', () => {\n  (runTestCases as any[]).forEach((example: any) => {\n    test(`grid = ${JSON.stringify(example.input[0][1], null, 2)} target = ${\n      example.input[1][1]\n    }`, () => {\n      expect(fn(example.input[0][1], example.input[1][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/grid-find-word.submit.test.ts": "import findWordInGrid from './grid-find-word';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('findWordInGrid', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`grid = ${JSON.stringify(example.input[0][1], null, 2)} target = ${\n      example.input[1][1]\n    }`, () => {\n      expect(\n        findWordInGrid(example.input[0][1], example.input[1][1]),\n      ).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/grid-find-word.ts": "export default function exist(grid: string[][], target: string): boolean {\n  const rows = grid.length; // Number of rows in the grid\n  const cols = grid[0].length; // Number of columns in the grid\n\n  function backtrack(row: number, col: number, suffix: string): boolean {\n    // Step 1: Check if we've matched the entire target word\n    if (suffix.length == 0) {\n      return true;\n    }\n\n    // Step 2: Check the boundaries and if the current cell matches the first character of the suffix\n    if (\n      row < 0 || // Out of bounds (top)\n      row == rows || // Out of bounds (bottom)\n      col < 0 || // Out of bounds (left)\n      col == cols || // Out of bounds (right)\n      grid[row][col] != suffix.charAt(0) // Current cell doesn't match the suffix character\n    ) {\n      return false;\n    }\n\n    // Step 3: Explore the neighbors in DFS\n    let ret = false;\n    // Mark the path before the next exploration\n    const temp = grid[row][col];\n    grid[row][col] = '#'; // Mark the current cell as visited\n\n    const directions = [\n      [0, 1], // Move right\n      [1, 0], // Move down\n      [0, -1], // Move left\n      [-1, 0], // Move up\n    ];\n\n    // Explore all possible directions\n    for (let [rowOffset, colOffset] of directions) {\n      ret = backtrack(row + rowOffset, col + colOffset, suffix.slice(1)); // Recursively check the next cell\n      if (ret) break; // If found, break out of the loop\n    }\n\n    // Step 4: Clean up and return the result\n    grid[row][col] = temp; // Restore the current cell's value\n    return ret; // Return whether we found the target word\n  }\n\n  // Iterate through each cell in the grid\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      if (backtrack(row, col, target)) return true; // Start backtracking from each cell\n    }\n  }\n  return false; // If no match is found, return false\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [\n      [\n        \"grid\",\n        [\n          [\"a\", \"b\", \"c\", \"e\"],\n          [\"s\", \"f\", \"c\", \"t\"],\n          [\"a\", \"d\", \"e\", \"e\"]\n        ]\n      ],\n      [\"target\", \"tee\"]\n    ],\n    \"output\": true,\n    \"explanation\": \"The word 'tee' can be formed starting from the cell (1, 3).\"\n  },\n  {\n    \"input\": [\n      [\n        \"grid\",\n        [\n          [\"a\", \"b\"],\n          [\"c\", \"d\"]\n        ]\n      ],\n      [\"target\", \"abcd\"]\n    ],\n    \"output\": false,\n    \"explanation\": \"The word 'abcd' cannot be formed. There's no way to move from 'b' to 'c' as required by the word.\"\n  },\n  {\n    \"input\": [\n      [\n        \"grid\",\n        [\n          [\"h\", \"e\", \"l\", \"l\", \"o\"],\n          [\"w\", \"o\", \"r\", \"l\", \"d\"]\n        ]\n      ],\n      [\"target\", \"hello\"]\n    ],\n    \"output\": true,\n    \"explanation\": \"The word 'hello' is found in the first row of the grid.\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"f\", \"e\", \"d\", \"a\", \"c\"],\n          [\"c\", \"c\", \"d\", \"b\", \"f\", \"e\"],\n          [\"c\", \"c\", \"a\", \"d\", \"f\", \"a\"],\n          [\"c\", \"b\", \"f\", \"e\", \"d\", \"b\"],\n          [\"b\", \"a\", \"c\", \"a\", \"d\", \"a\"],\n          [\"f\", \"c\", \"b\", \"a\", \"a\", \"d\"]\n        ]\n      ],\n      [\"word\", \"b\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"c\", \"f\", \"e\", \"f\", \"c\"],\n          [\"d\", \"c\", \"e\", \"c\", \"d\", \"b\"],\n          [\"d\", \"b\", \"c\", \"c\", \"d\", \"d\"],\n          [\"c\", \"b\", \"e\", \"a\", \"f\", \"d\"],\n          [\"a\", \"c\", \"e\", \"e\", \"e\", \"a\"],\n          [\"e\", \"f\", \"a\", \"e\", \"b\", \"d\"]\n        ]\n      ],\n      [\"word\", \"fd\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"c\", \"c\", \"c\", \"e\", \"e\"],\n          [\"f\", \"a\", \"e\", \"e\", \"f\", \"b\"],\n          [\"f\", \"e\", \"b\", \"e\", \"d\", \"a\"],\n          [\"e\", \"e\", \"e\", \"d\", \"a\", \"e\"],\n          [\"f\", \"a\", \"c\", \"a\", \"e\", \"d\"],\n          [\"a\", \"d\", \"b\", \"a\", \"d\", \"a\"]\n        ]\n      ],\n      [\"word\", \"f\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"f\", \"c\", \"a\", \"c\", \"e\"],\n          [\"c\", \"f\", \"f\", \"e\", \"c\", \"c\"],\n          [\"c\", \"f\", \"f\", \"c\", \"c\", \"a\"],\n          [\"d\", \"f\", \"e\", \"d\", \"e\", \"c\"],\n          [\"f\", \"f\", \"b\", \"f\", \"f\", \"d\"],\n          [\"c\", \"d\", \"a\", \"e\", \"f\", \"a\"]\n        ]\n      ],\n      [\"word\", \"fcb\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"e\", \"f\", \"d\", \"a\", \"a\"],\n          [\"b\", \"e\", \"d\", \"e\", \"e\", \"f\"],\n          [\"e\", \"f\", \"c\", \"d\", \"e\", \"c\"],\n          [\"a\", \"e\", \"f\", \"c\", \"c\", \"c\"],\n          [\"c\", \"d\", \"b\", \"a\", \"b\", \"e\"],\n          [\"a\", \"c\", \"d\", \"b\", \"f\", \"f\"]\n        ]\n      ],\n      [\"word\", \"adfb\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"e\", \"c\", \"c\", \"d\", \"b\"],\n          [\"d\", \"c\", \"a\", \"a\", \"d\", \"e\"],\n          [\"f\", \"b\", \"d\", \"e\", \"a\", \"b\"],\n          [\"a\", \"a\", \"d\", \"a\", \"a\", \"d\"],\n          [\"d\", \"b\", \"f\", \"b\", \"b\", \"c\"],\n          [\"c\", \"d\", \"e\", \"a\", \"a\", \"d\"]\n        ]\n      ],\n      [\"word\", \"c\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"c\", \"a\", \"d\", \"c\", \"d\"],\n          [\"c\", \"d\", \"b\", \"c\", \"a\", \"e\"],\n          [\"d\", \"b\", \"b\", \"d\", \"b\", \"b\"],\n          [\"a\", \"a\", \"c\", \"a\", \"f\", \"f\"],\n          [\"b\", \"b\", \"a\", \"c\", \"c\", \"e\"],\n          [\"d\", \"d\", \"b\", \"a\", \"f\", \"e\"]\n        ]\n      ],\n      [\"word\", \"edcf\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"f\", \"d\", \"e\", \"e\", \"e\"],\n          [\"e\", \"c\", \"a\", \"c\", \"f\", \"c\"],\n          [\"d\", \"e\", \"f\", \"c\", \"d\", \"c\"],\n          [\"e\", \"b\", \"c\", \"b\", \"d\", \"f\"],\n          [\"a\", \"e\", \"e\", \"d\", \"d\", \"b\"],\n          [\"d\", \"a\", \"c\", \"b\", \"a\", \"e\"]\n        ]\n      ],\n      [\"word\", \"caf\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"c\", \"b\", \"a\", \"f\", \"a\"],\n          [\"a\", \"f\", \"b\", \"a\", \"d\", \"a\"],\n          [\"b\", \"c\", \"c\", \"b\", \"b\", \"c\"],\n          [\"e\", \"b\", \"b\", \"b\", \"e\", \"d\"],\n          [\"b\", \"b\", \"c\", \"c\", \"b\", \"f\"],\n          [\"f\", \"f\", \"c\", \"b\", \"d\", \"a\"]\n        ]\n      ],\n      [\"word\", \"bfb\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"a\", \"f\", \"b\", \"c\", \"e\"],\n          [\"c\", \"f\", \"f\", \"c\", \"b\", \"a\"],\n          [\"a\", \"b\", \"a\", \"d\", \"d\", \"e\"],\n          [\"e\", \"b\", \"b\", \"c\", \"f\", \"b\"],\n          [\"a\", \"a\", \"d\", \"c\", \"f\", \"e\"],\n          [\"b\", \"a\", \"a\", \"c\", \"e\", \"d\"]\n        ]\n      ],\n      [\"word\", \"d\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"a\", \"a\", \"b\", \"f\", \"f\"],\n          [\"c\", \"d\", \"b\", \"d\", \"e\", \"a\"],\n          [\"e\", \"a\", \"f\", \"a\", \"d\", \"b\"],\n          [\"d\", \"a\", \"a\", \"b\", \"b\", \"f\"],\n          [\"e\", \"b\", \"e\", \"d\", \"c\", \"f\"],\n          [\"f\", \"e\", \"e\", \"a\", \"f\", \"b\"]\n        ]\n      ],\n      [\"word\", \"bdf\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"e\", \"b\", \"f\", \"d\", \"c\"],\n          [\"c\", \"a\", \"a\", \"f\", \"b\", \"d\"],\n          [\"f\", \"f\", \"d\", \"a\", \"c\", \"b\"],\n          [\"d\", \"a\", \"b\", \"f\", \"a\", \"a\"],\n          [\"f\", \"b\", \"b\", \"d\", \"f\", \"d\"],\n          [\"f\", \"e\", \"e\", \"d\", \"e\", \"c\"]\n        ]\n      ],\n      [\"word\", \"e\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"f\", \"f\", \"c\", \"b\", \"a\"],\n          [\"e\", \"b\", \"e\", \"b\", \"f\", \"c\"],\n          [\"d\", \"b\", \"c\", \"d\", \"f\", \"d\"],\n          [\"b\", \"b\", \"d\", \"b\", \"d\", \"e\"],\n          [\"b\", \"e\", \"d\", \"d\", \"e\", \"a\"],\n          [\"f\", \"b\", \"f\", \"c\", \"e\", \"d\"]\n        ]\n      ],\n      [\"word\", \"a\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"f\", \"d\", \"e\", \"f\", \"e\"],\n          [\"e\", \"c\", \"d\", \"f\", \"b\", \"a\"],\n          [\"e\", \"c\", \"b\", \"f\", \"a\", \"b\"],\n          [\"b\", \"b\", \"e\", \"a\", \"e\", \"e\"],\n          [\"e\", \"a\", \"d\", \"c\", \"e\", \"a\"],\n          [\"a\", \"b\", \"d\", \"d\", \"d\", \"d\"]\n        ]\n      ],\n      [\"word\", \"ffff\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"d\", \"b\", \"b\", \"a\", \"f\"],\n          [\"b\", \"c\", \"f\", \"b\", \"b\", \"f\"],\n          [\"e\", \"d\", \"e\", \"a\", \"f\", \"d\"],\n          [\"c\", \"f\", \"a\", \"b\", \"e\", \"e\"],\n          [\"f\", \"e\", \"c\", \"e\", \"f\", \"a\"],\n          [\"a\", \"c\", \"c\", \"d\", \"d\", \"a\"]\n        ]\n      ],\n      [\"word\", \"ebeb\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"d\", \"a\", \"f\", \"d\", \"d\"],\n          [\"f\", \"c\", \"a\", \"c\", \"f\", \"a\"],\n          [\"b\", \"d\", \"e\", \"a\", \"c\", \"b\"],\n          [\"a\", \"f\", \"b\", \"e\", \"c\", \"a\"],\n          [\"b\", \"f\", \"c\", \"c\", \"c\", \"a\"],\n          [\"a\", \"a\", \"b\", \"f\", \"e\", \"c\"]\n        ]\n      ],\n      [\"word\", \"fd\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"a\", \"c\", \"b\", \"b\", \"c\"],\n          [\"a\", \"f\", \"f\", \"b\", \"b\", \"d\"],\n          [\"b\", \"f\", \"f\", \"b\", \"a\", \"e\"],\n          [\"a\", \"e\", \"b\", \"b\", \"b\", \"d\"],\n          [\"b\", \"a\", \"f\", \"b\", \"c\", \"b\"],\n          [\"b\", \"e\", \"b\", \"f\", \"a\", \"d\"]\n        ]\n      ],\n      [\"word\", \"fad\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"e\", \"e\", \"b\", \"a\", \"d\"],\n          [\"d\", \"b\", \"e\", \"b\", \"d\", \"a\"],\n          [\"e\", \"f\", \"a\", \"f\", \"f\", \"f\"],\n          [\"a\", \"d\", \"e\", \"e\", \"a\", \"c\"],\n          [\"b\", \"d\", \"f\", \"f\", \"b\", \"d\"],\n          [\"d\", \"c\", \"e\", \"e\", \"f\", \"f\"]\n        ]\n      ],\n      [\"word\", \"bb\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"e\", \"a\", \"d\", \"d\", \"e\"],\n          [\"f\", \"f\", \"b\", \"b\", \"c\", \"b\"],\n          [\"e\", \"a\", \"b\", \"e\", \"b\", \"d\"],\n          [\"b\", \"a\", \"c\", \"c\", \"b\", \"c\"],\n          [\"c\", \"f\", \"c\", \"a\", \"f\", \"c\"],\n          [\"b\", \"c\", \"b\", \"e\", \"f\", \"f\"]\n        ]\n      ],\n      [\"word\", \"e\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"d\", \"a\", \"b\", \"a\", \"e\"],\n          [\"d\", \"b\", \"a\", \"c\", \"c\", \"d\"],\n          [\"e\", \"e\", \"d\", \"f\", \"c\", \"d\"],\n          [\"e\", \"e\", \"b\", \"b\", \"f\", \"d\"],\n          [\"d\", \"f\", \"e\", \"c\", \"b\", \"f\"],\n          [\"b\", \"b\", \"e\", \"c\", \"b\", \"d\"]\n        ]\n      ],\n      [\"word\", \"dc\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"f\", \"f\", \"d\", \"a\", \"d\"],\n          [\"d\", \"e\", \"d\", \"f\", \"c\", \"f\"],\n          [\"a\", \"d\", \"f\", \"b\", \"c\", \"a\"],\n          [\"d\", \"a\", \"a\", \"a\", \"d\", \"b\"],\n          [\"e\", \"e\", \"b\", \"e\", \"e\", \"d\"],\n          [\"a\", \"d\", \"b\", \"b\", \"f\", \"b\"]\n        ]\n      ],\n      [\"word\", \"db\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"e\", \"e\", \"c\", \"a\", \"f\"],\n          [\"d\", \"d\", \"d\", \"d\", \"c\", \"f\"],\n          [\"d\", \"b\", \"f\", \"f\", \"b\", \"f\"],\n          [\"b\", \"c\", \"b\", \"f\", \"e\", \"c\"],\n          [\"a\", \"f\", \"d\", \"e\", \"b\", \"e\"],\n          [\"b\", \"b\", \"a\", \"a\", \"e\", \"e\"]\n        ]\n      ],\n      [\"word\", \"a\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"f\", \"d\", \"f\", \"f\", \"b\"],\n          [\"c\", \"a\", \"d\", \"d\", \"f\", \"b\"],\n          [\"e\", \"b\", \"e\", \"b\", \"e\", \"e\"],\n          [\"b\", \"a\", \"b\", \"d\", \"e\", \"b\"],\n          [\"c\", \"d\", \"a\", \"a\", \"c\", \"a\"],\n          [\"e\", \"b\", \"f\", \"b\", \"c\", \"f\"]\n        ]\n      ],\n      [\"word\", \"cecc\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"b\", \"d\", \"f\", \"a\", \"d\"],\n          [\"d\", \"f\", \"e\", \"d\", \"c\", \"b\"],\n          [\"b\", \"f\", \"e\", \"c\", \"c\", \"a\"],\n          [\"e\", \"a\", \"b\", \"c\", \"f\", \"a\"],\n          [\"a\", \"c\", \"b\", \"d\", \"a\", \"a\"],\n          [\"e\", \"e\", \"d\", \"a\", \"f\", \"f\"]\n        ]\n      ],\n      [\"word\", \"afdf\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"a\", \"e\", \"b\", \"c\", \"a\"],\n          [\"e\", \"a\", \"d\", \"a\", \"b\", \"c\"],\n          [\"f\", \"f\", \"c\", \"b\", \"d\", \"a\"],\n          [\"e\", \"f\", \"d\", \"e\", \"f\", \"f\"],\n          [\"a\", \"b\", \"a\", \"d\", \"b\", \"a\"],\n          [\"c\", \"c\", \"f\", \"b\", \"e\", \"c\"]\n        ]\n      ],\n      [\"word\", \"cdc\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"f\", \"a\", \"c\", \"e\", \"c\"],\n          [\"b\", \"b\", \"f\", \"f\", \"d\", \"b\"],\n          [\"a\", \"c\", \"d\", \"f\", \"d\", \"b\"],\n          [\"e\", \"b\", \"a\", \"e\", \"c\", \"f\"],\n          [\"c\", \"e\", \"d\", \"a\", \"c\", \"c\"],\n          [\"f\", \"c\", \"c\", \"c\", \"f\", \"b\"]\n        ]\n      ],\n      [\"word\", \"dca\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"b\", \"a\", \"f\", \"f\", \"d\"],\n          [\"a\", \"c\", \"e\", \"a\", \"b\", \"e\"],\n          [\"d\", \"f\", \"e\", \"a\", \"b\", \"d\"],\n          [\"e\", \"a\", \"f\", \"a\", \"c\", \"c\"],\n          [\"f\", \"c\", \"c\", \"c\", \"e\", \"f\"],\n          [\"d\", \"a\", \"e\", \"f\", \"b\", \"c\"]\n        ]\n      ],\n      [\"word\", \"afa\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"b\", \"a\", \"c\", \"f\", \"f\"],\n          [\"b\", \"e\", \"c\", \"f\", \"f\", \"e\"],\n          [\"f\", \"e\", \"e\", \"d\", \"a\", \"d\"],\n          [\"d\", \"e\", \"f\", \"e\", \"e\", \"e\"],\n          [\"c\", \"e\", \"f\", \"b\", \"d\", \"a\"],\n          [\"e\", \"b\", \"b\", \"d\", \"e\", \"a\"]\n        ]\n      ],\n      [\"word\", \"fbeb\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"e\", \"e\", \"f\", \"d\", \"f\"],\n          [\"a\", \"c\", \"d\", \"f\", \"d\", \"b\"],\n          [\"a\", \"a\", \"d\", \"b\", \"d\", \"e\"],\n          [\"f\", \"b\", \"c\", \"a\", \"d\", \"e\"],\n          [\"a\", \"e\", \"a\", \"a\", \"d\", \"e\"],\n          [\"b\", \"e\", \"a\", \"b\", \"e\", \"f\"]\n        ]\n      ],\n      [\"word\", \"ebd\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"d\", \"e\", \"b\", \"e\", \"e\"],\n          [\"c\", \"b\", \"c\", \"c\", \"c\", \"f\"],\n          [\"a\", \"f\", \"f\", \"c\", \"f\", \"a\"],\n          [\"d\", \"d\", \"f\", \"f\", \"b\", \"f\"],\n          [\"f\", \"c\", \"f\", \"a\", \"d\", \"c\"],\n          [\"b\", \"b\", \"d\", \"e\", \"f\", \"b\"]\n        ]\n      ],\n      [\"word\", \"ee\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"c\", \"e\", \"a\", \"a\", \"f\"],\n          [\"e\", \"d\", \"c\", \"c\", \"b\", \"f\"],\n          [\"d\", \"e\", \"e\", \"a\", \"c\", \"b\"],\n          [\"c\", \"c\", \"c\", \"b\", \"d\", \"e\"],\n          [\"d\", \"d\", \"c\", \"c\", \"a\", \"b\"],\n          [\"c\", \"d\", \"e\", \"c\", \"c\", \"a\"]\n        ]\n      ],\n      [\"word\", \"adc\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"d\", \"a\", \"f\", \"d\", \"a\"],\n          [\"b\", \"c\", \"c\", \"a\", \"c\", \"e\"],\n          [\"f\", \"e\", \"c\", \"d\", \"f\", \"c\"],\n          [\"c\", \"c\", \"a\", \"e\", \"a\", \"f\"],\n          [\"e\", \"d\", \"c\", \"f\", \"e\", \"e\"],\n          [\"e\", \"f\", \"d\", \"e\", \"c\", \"d\"]\n        ]\n      ],\n      [\"word\", \"ccbe\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"d\", \"d\", \"a\", \"e\", \"e\"],\n          [\"f\", \"a\", \"f\", \"a\", \"c\", \"e\"],\n          [\"d\", \"b\", \"b\", \"c\", \"a\", \"c\"],\n          [\"b\", \"d\", \"d\", \"b\", \"d\", \"e\"],\n          [\"c\", \"c\", \"d\", \"b\", \"a\", \"c\"],\n          [\"f\", \"c\", \"b\", \"c\", \"a\", \"b\"]\n        ]\n      ],\n      [\"word\", \"d\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"f\", \"a\", \"a\", \"d\", \"f\"],\n          [\"b\", \"c\", \"c\", \"f\", \"d\", \"f\"],\n          [\"a\", \"c\", \"e\", \"a\", \"a\", \"f\"],\n          [\"f\", \"f\", \"b\", \"c\", \"c\", \"f\"],\n          [\"a\", \"b\", \"b\", \"e\", \"e\", \"c\"],\n          [\"a\", \"c\", \"e\", \"b\", \"b\", \"f\"]\n        ]\n      ],\n      [\"word\", \"ee\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"c\", \"a\", \"e\", \"b\", \"d\"],\n          [\"d\", \"f\", \"c\", \"b\", \"d\", \"e\"],\n          [\"f\", \"d\", \"a\", \"d\", \"c\", \"e\"],\n          [\"c\", \"b\", \"f\", \"b\", \"f\", \"c\"],\n          [\"a\", \"f\", \"a\", \"a\", \"c\", \"e\"],\n          [\"c\", \"d\", \"f\", \"f\", \"e\", \"c\"]\n        ]\n      ],\n      [\"word\", \"c\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"b\", \"a\", \"d\", \"f\", \"e\"],\n          [\"c\", \"b\", \"a\", \"c\", \"d\", \"e\"],\n          [\"b\", \"b\", \"e\", \"c\", \"f\", \"a\"],\n          [\"c\", \"e\", \"c\", \"a\", \"f\", \"a\"],\n          [\"d\", \"e\", \"b\", \"f\", \"c\", \"b\"],\n          [\"c\", \"f\", \"f\", \"f\", \"f\", \"c\"]\n        ]\n      ],\n      [\"word\", \"a\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"c\", \"b\", \"c\", \"f\", \"e\"],\n          [\"a\", \"e\", \"e\", \"f\", \"d\", \"f\"],\n          [\"d\", \"f\", \"e\", \"a\", \"d\", \"b\"],\n          [\"f\", \"b\", \"c\", \"d\", \"d\", \"c\"],\n          [\"a\", \"b\", \"b\", \"a\", \"d\", \"b\"],\n          [\"d\", \"f\", \"d\", \"d\", \"a\", \"a\"]\n        ]\n      ],\n      [\"word\", \"ca\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"c\", \"c\", \"c\", \"a\", \"c\"],\n          [\"d\", \"e\", \"b\", \"d\", \"e\", \"b\"],\n          [\"f\", \"b\", \"d\", \"f\", \"b\", \"b\"],\n          [\"b\", \"d\", \"c\", \"c\", \"b\", \"d\"],\n          [\"b\", \"c\", \"f\", \"c\", \"e\", \"d\"],\n          [\"b\", \"d\", \"a\", \"c\", \"c\", \"f\"]\n        ]\n      ],\n      [\"word\", \"cab\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"c\", \"c\", \"a\", \"e\", \"a\"],\n          [\"b\", \"c\", \"b\", \"e\", \"b\", \"f\"],\n          [\"c\", \"a\", \"e\", \"b\", \"e\", \"c\"],\n          [\"b\", \"b\", \"b\", \"b\", \"f\", \"f\"],\n          [\"f\", \"e\", \"b\", \"d\", \"e\", \"b\"],\n          [\"c\", \"b\", \"c\", \"e\", \"b\", \"c\"]\n        ]\n      ],\n      [\"word\", \"ec\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"a\", \"d\", \"a\", \"d\", \"a\"],\n          [\"d\", \"a\", \"f\", \"e\", \"a\", \"b\"],\n          [\"f\", \"a\", \"a\", \"f\", \"b\", \"d\"],\n          [\"d\", \"e\", \"b\", \"c\", \"a\", \"a\"],\n          [\"b\", \"c\", \"e\", \"b\", \"e\", \"e\"],\n          [\"c\", \"d\", \"a\", \"c\", \"c\", \"f\"]\n        ]\n      ],\n      [\"word\", \"ddcd\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"e\", \"c\", \"d\", \"a\", \"f\"],\n          [\"f\", \"f\", \"e\", \"f\", \"a\", \"a\"],\n          [\"a\", \"c\", \"e\", \"e\", \"f\", \"a\"],\n          [\"d\", \"e\", \"a\", \"b\", \"e\", \"b\"],\n          [\"b\", \"d\", \"a\", \"c\", \"d\", \"c\"],\n          [\"b\", \"f\", \"a\", \"f\", \"a\", \"d\"]\n        ]\n      ],\n      [\"word\", \"bc\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"a\", \"e\", \"e\", \"b\", \"f\"],\n          [\"e\", \"f\", \"e\", \"a\", \"e\", \"c\"],\n          [\"e\", \"c\", \"f\", \"f\", \"d\", \"b\"],\n          [\"f\", \"b\", \"a\", \"d\", \"d\", \"a\"],\n          [\"a\", \"e\", \"b\", \"f\", \"f\", \"e\"],\n          [\"a\", \"d\", \"e\", \"f\", \"e\", \"f\"]\n        ]\n      ],\n      [\"word\", \"a\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"f\", \"a\", \"b\", \"c\", \"f\"],\n          [\"e\", \"a\", \"a\", \"e\", \"f\", \"f\"],\n          [\"e\", \"e\", \"e\", \"d\", \"b\", \"e\"],\n          [\"f\", \"f\", \"a\", \"c\", \"e\", \"a\"],\n          [\"d\", \"c\", \"d\", \"a\", \"c\", \"e\"],\n          [\"b\", \"b\", \"b\", \"e\", \"b\", \"b\"]\n        ]\n      ],\n      [\"word\", \"cb\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"e\", \"b\", \"e\", \"a\", \"e\"],\n          [\"f\", \"b\", \"a\", \"b\", \"f\", \"d\"],\n          [\"d\", \"f\", \"a\", \"d\", \"e\", \"f\"],\n          [\"a\", \"d\", \"b\", \"f\", \"b\", \"b\"],\n          [\"c\", \"d\", \"e\", \"b\", \"f\", \"b\"],\n          [\"a\", \"f\", \"d\", \"f\", \"a\", \"c\"]\n        ]\n      ],\n      [\"word\", \"cfbd\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"d\", \"f\", \"d\", \"d\", \"a\"],\n          [\"f\", \"f\", \"d\", \"b\", \"e\", \"e\"],\n          [\"d\", \"a\", \"f\", \"f\", \"b\", \"b\"],\n          [\"d\", \"c\", \"c\", \"a\", \"f\", \"d\"],\n          [\"d\", \"b\", \"a\", \"d\", \"f\", \"f\"],\n          [\"e\", \"a\", \"a\", \"d\", \"f\", \"f\"]\n        ]\n      ],\n      [\"word\", \"d\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"d\", \"e\", \"b\", \"b\", \"c\"],\n          [\"c\", \"d\", \"a\", \"c\", \"f\", \"f\"],\n          [\"e\", \"c\", \"e\", \"d\", \"d\", \"b\"],\n          [\"e\", \"a\", \"f\", \"a\", \"f\", \"f\"],\n          [\"f\", \"a\", \"e\", \"c\", \"f\", \"a\"],\n          [\"c\", \"e\", \"a\", \"a\", \"f\", \"c\"]\n        ]\n      ],\n      [\"word\", \"b\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"f\", \"b\", \"c\", \"b\", \"e\"],\n          [\"f\", \"f\", \"e\", \"a\", \"a\", \"c\"],\n          [\"f\", \"b\", \"f\", \"a\", \"d\", \"f\"],\n          [\"d\", \"f\", \"e\", \"d\", \"c\", \"f\"],\n          [\"c\", \"d\", \"f\", \"b\", \"d\", \"d\"],\n          [\"b\", \"b\", \"f\", \"b\", \"f\", \"a\"]\n        ]\n      ],\n      [\"word\", \"def\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"e\", \"a\", \"d\", \"b\", \"f\"],\n          [\"b\", \"c\", \"c\", \"e\", \"f\", \"c\"],\n          [\"c\", \"c\", \"e\", \"c\", \"c\", \"d\"],\n          [\"c\", \"e\", \"e\", \"b\", \"a\", \"d\"],\n          [\"a\", \"b\", \"e\", \"b\", \"f\", \"b\"],\n          [\"c\", \"e\", \"a\", \"d\", \"d\", \"f\"]\n        ]\n      ],\n      [\"word\", \"ebfacf\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"f\", \"c\", \"c\", \"f\", \"f\", \"b\"],\n          [\"a\", \"b\", \"e\", \"e\", \"a\", \"f\"],\n          [\"b\", \"e\", \"a\", \"e\", \"d\", \"d\"],\n          [\"d\", \"d\", \"a\", \"a\", \"a\", \"c\"],\n          [\"e\", \"b\", \"e\", \"f\", \"d\", \"f\"],\n          [\"d\", \"b\", \"d\", \"f\", \"c\", \"d\"]\n        ]\n      ],\n      [\"word\", \"ec\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"a\", \"d\", \"e\", \"c\", \"f\", \"e\"],\n          [\"b\", \"d\", \"e\", \"a\", \"a\", \"c\"],\n          [\"c\", \"d\", \"b\", \"b\", \"f\", \"c\"],\n          [\"c\", \"b\", \"b\", \"c\", \"e\", \"b\"],\n          [\"c\", \"f\", \"b\", \"f\", \"c\", \"d\"],\n          [\"b\", \"e\", \"e\", \"e\", \"d\", \"a\"]\n        ]\n      ],\n      [\"word\", \"acaf\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"b\", \"a\"]]],\n      [\"word\", \"ushahp\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"e\", \"c\", \"k\", \"a\", \"o\", \"j\"],\n          [\"q\", \"o\", \"f\", \"u\", \"p\", \"f\"],\n          [\"e\", \"f\", \"a\", \"x\", \"k\", \"c\"]\n        ]\n      ],\n      [\"word\", \"zkxjnhwjq\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"r\"],\n          [\"k\", \"i\"],\n          [\"y\", \"a\"],\n          [\"t\", \"t\"]\n        ]\n      ],\n      [\"word\", \"sfo\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"y\", \"r\"],\n          [\"h\", \"s\"],\n          [\"z\", \"m\"],\n          [\"h\", \"d\"]\n        ]\n      ],\n      [\"word\", \"elrcuaoeleynh\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"w\", \"o\", \"t\", \"c\", \"t\", \"v\"],\n          [\"x\", \"f\", \"t\", \"j\", \"o\", \"l\"],\n          [\"p\", \"r\", \"x\", \"k\", \"a\", \"s\"]\n        ]\n      ],\n      [\"word\", \"tcqmmtcuy\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"w\", \"q\"],\n          [\"z\", \"d\"],\n          [\"y\", \"g\"],\n          [\"f\", \"x\"],\n          [\"k\", \"v\"],\n          [\"b\", \"l\"]\n        ]\n      ],\n      [\"word\", \"kbd\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"y\", \"r\", \"o\"],\n          [\"d\", \"p\", \"p\"],\n          [\"p\", \"q\", \"q\"],\n          [\"e\", \"o\", \"a\"],\n          [\"j\", \"y\", \"c\"]\n        ]\n      ],\n      [\"word\", \"d\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"m\"]]],\n      [\"word\", \"cuvmxbjohdoxgft\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"j\", \"j\", \"k\", \"m\", \"p\"],\n          [\"q\", \"s\", \"q\", \"f\", \"f\"]\n        ]\n      ],\n      [\"word\", \"eymvfpywusa\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"g\"], [\"g\"], [\"h\"]]],\n      [\"word\", \"nefyc\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"n\", \"r\", \"u\", \"d\"],\n          [\"f\", \"d\", \"d\", \"w\"],\n          [\"n\", \"b\", \"f\", \"p\"]\n        ]\n      ],\n      [\"word\", \"kocjfowado\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"z\", \"k\", \"a\", \"v\", \"w\"],\n          [\"s\", \"h\", \"g\", \"n\", \"n\"],\n          [\"l\", \"t\", \"a\", \"o\", \"v\"],\n          [\"t\", \"z\", \"r\", \"g\", \"h\"],\n          [\"d\", \"a\", \"t\", \"j\", \"k\"],\n          [\"k\", \"m\", \"g\", \"k\", \"h\"]\n        ]\n      ],\n      [\"word\", \"hrlkyn\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"u\", \"s\", \"p\"],\n          [\"j\", \"b\", \"x\"],\n          [\"a\", \"b\", \"i\"],\n          [\"z\", \"u\", \"s\"]\n        ]\n      ],\n      [\"word\", \"ashftyjg\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"i\", \"k\", \"c\", \"c\"],\n          [\"g\", \"v\", \"n\", \"h\"],\n          [\"q\", \"h\", \"l\", \"q\"],\n          [\"i\", \"k\", \"l\", \"e\"]\n        ]\n      ],\n      [\"word\", \"reqz\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"u\", \"k\", \"i\"],\n          [\"j\", \"r\", \"j\"],\n          [\"u\", \"o\", \"a\"],\n          [\"u\", \"p\", \"t\"]\n        ]\n      ],\n      [\"word\", \"nkzytmypotk\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"h\"]]],\n      [\"word\", \"jyc\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"o\", \"e\", \"x\", \"t\", \"n\", \"q\"],\n          [\"g\", \"d\", \"e\", \"c\", \"c\", \"h\"],\n          [\"z\", \"p\", \"m\", \"a\", \"f\", \"r\"],\n          [\"j\", \"w\", \"j\", \"m\", \"g\", \"o\"]\n        ]\n      ],\n      [\"word\", \"md\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"p\"]]],\n      [\"word\", \"pbqcwdf\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"q\", \"g\", \"k\", \"f\"],\n          [\"o\", \"u\", \"a\", \"w\"],\n          [\"y\", \"x\", \"t\", \"y\"]\n        ]\n      ],\n      [\"word\", \"cls\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"s\", \"a\", \"z\", \"s\"],\n          [\"v\", \"b\", \"m\", \"h\"],\n          [\"u\", \"f\", \"t\", \"r\"],\n          [\"i\", \"o\", \"b\", \"i\"],\n          [\"v\", \"j\", \"x\", \"z\"]\n        ]\n      ],\n      [\"word\", \"xyvdpxervcabyjk\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"f\", \"a\", \"t\", \"a\", \"l\"],\n          [\"v\", \"c\", \"u\", \"d\", \"w\", \"n\"],\n          [\"c\", \"q\", \"d\", \"j\", \"d\", \"b\"],\n          [\"v\", \"t\", \"c\", \"d\", \"o\", \"a\"],\n          [\"j\", \"k\", \"f\", \"g\", \"s\", \"q\"]\n        ]\n      ],\n      [\"word\", \"ogq\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"h\", \"w\", \"j\"],\n          [\"j\", \"i\", \"t\"],\n          [\"o\", \"a\", \"d\"],\n          [\"d\", \"b\", \"m\"],\n          [\"p\", \"s\", \"e\"],\n          [\"r\", \"r\", \"j\"]\n        ]\n      ],\n      [\"word\", \"lljpwdzqkgdpl\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"o\", \"b\", \"j\"],\n          [\"k\", \"b\", \"x\"],\n          [\"n\", \"t\", \"s\"],\n          [\"d\", \"l\", \"f\"],\n          [\"d\", \"w\", \"i\"]\n        ]\n      ],\n      [\"word\", \"loqekmwxn\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"q\", \"h\", \"k\", \"f\", \"i\"],\n          [\"u\", \"i\", \"i\", \"d\", \"p\"],\n          [\"m\", \"g\", \"g\", \"p\", \"s\"],\n          [\"c\", \"v\", \"g\", \"j\", \"b\"]\n        ]\n      ],\n      [\"word\", \"iiousnylhjhtpn\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"w\", \"h\", \"l\", \"j\", \"z\"],\n          [\"r\", \"k\", \"w\", \"h\", \"l\"],\n          [\"x\", \"l\", \"z\", \"e\", \"s\"],\n          [\"e\", \"a\", \"s\", \"s\", \"h\"],\n          [\"r\", \"y\", \"w\", \"z\", \"g\"],\n          [\"x\", \"m\", \"v\", \"r\", \"t\"]\n        ]\n      ],\n      [\"word\", \"bpgq\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"u\", \"g\", \"x\", \"r\", \"q\", \"g\"],\n          [\"y\", \"z\", \"j\", \"e\", \"y\", \"d\"],\n          [\"r\", \"d\", \"n\", \"k\", \"s\", \"w\"],\n          [\"w\", \"a\", \"t\", \"c\", \"d\", \"z\"]\n        ]\n      ],\n      [\"word\", \"qyeknt\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"b\", \"s\", \"i\", \"j\", \"p\"],\n          [\"b\", \"n\", \"u\", \"s\", \"t\"],\n          [\"s\", \"u\", \"h\", \"k\", \"d\"]\n        ]\n      ],\n      [\"word\", \"ilb\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"t\"], [\"t\"], [\"k\"], [\"u\"]]],\n      [\"word\", \"wiyzukytcsq\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"c\", \"o\", \"h\", \"z\"],\n          [\"d\", \"h\", \"p\", \"k\"],\n          [\"s\", \"t\", \"e\", \"j\"],\n          [\"d\", \"a\", \"x\", \"v\"],\n          [\"m\", \"o\", \"s\", \"i\"]\n        ]\n      ],\n      [\"word\", \"reuucuk\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"u\", \"w\", \"j\"],\n          [\"i\", \"w\", \"p\"]\n        ]\n      ],\n      [\"word\", \"dsqsco\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"x\", \"p\", \"x\", \"f\"],\n          [\"m\", \"l\", \"m\", \"u\"],\n          [\"r\", \"y\", \"c\", \"b\"],\n          [\"h\", \"b\", \"e\", \"g\"],\n          [\"c\", \"t\", \"s\", \"w\"]\n        ]\n      ],\n      [\"word\", \"ccpxxdffzrtvxg\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"u\", \"j\", \"g\", \"x\", \"h\", \"r\"],\n          [\"b\", \"z\", \"f\", \"v\", \"h\", \"i\"],\n          [\"w\", \"f\", \"h\", \"o\", \"g\", \"z\"],\n          [\"r\", \"p\", \"n\", \"w\", \"l\", \"m\"],\n          [\"b\", \"z\", \"q\", \"s\", \"h\", \"w\"]\n        ]\n      ],\n      [\"word\", \"aatyux\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"g\", \"p\", \"m\"],\n          [\"r\", \"a\", \"n\"],\n          [\"k\", \"k\", \"s\"],\n          [\"t\", \"x\", \"k\"],\n          [\"o\", \"v\", \"t\"],\n          [\"i\", \"y\", \"m\"]\n        ]\n      ],\n      [\"word\", \"wcicbtjajndr\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"q\", \"l\"],\n          [\"k\", \"l\"],\n          [\"n\", \"d\"],\n          [\"c\", \"u\"]\n        ]\n      ],\n      [\"word\", \"seakiz\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"l\", \"i\", \"f\", \"e\"]]],\n      [\"word\", \"wlwwbjiy\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"y\", \"s\", \"y\"]]],\n      [\"word\", \"pgnemfhjxjkg\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"a\"], [\"o\"]]],\n      [\"word\", \"mqgcwkbns\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"j\", \"r\", \"w\", \"v\"],\n          [\"o\", \"i\", \"l\", \"q\"],\n          [\"b\", \"j\", \"f\", \"p\"]\n        ]\n      ],\n      [\"word\", \"mv\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"l\"]]],\n      [\"word\", \"wif\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"e\"], [\"k\"], [\"l\"], [\"l\"], [\"i\"], [\"o\"]]],\n      [\"word\", \"fedjso\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"t\"], [\"j\"], [\"i\"], [\"f\"], [\"x\"], [\"g\"]]],\n      [\"word\", \"qjdhyodicjwtmb\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"d\", \"k\", \"m\", \"t\", \"y\"],\n          [\"k\", \"m\", \"n\", \"z\", \"k\"]\n        ]\n      ],\n      [\"word\", \"pfbqfkt\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"u\", \"u\", \"n\", \"m\", \"h\", \"t\"],\n          [\"t\", \"g\", \"q\", \"l\", \"b\", \"u\"],\n          [\"e\", \"o\", \"p\", \"r\", \"s\", \"u\"],\n          [\"o\", \"h\", \"c\", \"v\", \"n\", \"h\"],\n          [\"h\", \"n\", \"q\", \"d\", \"n\", \"a\"]\n        ]\n      ],\n      [\"word\", \"sguwfjbqwhxuaz\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"i\", \"n\", \"n\", \"u\", \"w\"]]],\n      [\"word\", \"ftzw\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"p\", \"e\", \"z\", \"s\", \"a\"],\n          [\"q\", \"o\", \"p\", \"f\", \"f\"],\n          [\"w\", \"t\", \"y\", \"b\", \"n\"],\n          [\"d\", \"k\", \"u\", \"f\", \"y\"],\n          [\"q\", \"c\", \"j\", \"j\", \"y\"],\n          [\"k\", \"i\", \"c\", \"p\", \"z\"]\n        ]\n      ],\n      [\"word\", \"bfyyz\"]\n    ],\n    \"output\": true\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"g\", \"e\", \"a\", \"i\", \"i\"],\n          [\"y\", \"e\", \"h\", \"z\", \"i\"],\n          [\"n\", \"j\", \"y\", \"r\", \"e\"],\n          [\"t\", \"u\", \"p\", \"o\", \"w\"],\n          [\"c\", \"m\", \"m\", \"y\", \"m\"]\n        ]\n      ],\n      [\"word\", \"xdbafi\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"v\", \"b\", \"z\", \"j\", \"n\"],\n          [\"d\", \"f\", \"i\", \"q\", \"r\"],\n          [\"l\", \"h\", \"t\", \"r\", \"r\"]\n        ]\n      ],\n      [\"word\", \"tll\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"j\", \"j\"],\n          [\"o\", \"b\"],\n          [\"i\", \"e\"],\n          [\"m\", \"v\"],\n          [\"p\", \"n\"],\n          [\"l\", \"w\"]\n        ]\n      ],\n      [\"word\", \"onacnr\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\n        \"board\",\n        [\n          [\"n\", \"w\", \"o\", \"n\", \"x\"],\n          [\"p\", \"m\", \"e\", \"j\", \"t\"]\n        ]\n      ],\n      [\"word\", \"bmwoqztfmeysuf\"]\n    ],\n    \"output\": false\n  },\n  {\n    \"input\": [\n      [\"board\", [[\"x\"], [\"u\"], [\"c\"]]],\n      [\"word\", \"vwnpouuogslxjuc\"]\n    ],\n    \"output\": false\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1722729600,
    "difficulty": "medium",
    "duration": 45,
    "excerpt": "Implement a function to check the existence of a word in a grid",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/grid-find-word",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "grid-find-word",
    "subtitle": null,
    "title": "Find Word in Grid",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {string[][]} grid\n * @param {string} target\n * @return {boolean}\n */\nexport default function findWordInGrid(grid, target) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function findWordInGrid(\n  grid: string[][],\n  target: string,\n): boolean {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var n in e)o(r,n,{get:e[n],enumerable:!0})},l=(r,e,n,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!w.call(r,i)&&i!==n&&o(r,i,{get:()=>e[i],enumerable:!(c=g(e,i))||c.enumerable});return r};var k=(r,e,n)=>(n=r!=null?f(m(r)):{},l(e||!r||!r.__esModule?o(n,\"default\",{value:r,enumerable:!0}):n,r)),v=r=>l(o({},\"__esModule\",{value:!0}),r);var s=b((D,h)=>{h.exports=_jsx_runtime});var I={};x(I,{default:()=>M});var t=k(s());var a=MDXCodeBlock;var d=`export default function exist(grid: string[][], target: string): boolean {\n  const rows = grid.length; // Number of rows in the grid\n  const cols = grid[0].length; // Number of columns in the grid\n\n  function backtrack(row: number, col: number, suffix: string): boolean {\n    // Step 1: Check if we've matched the entire target word\n    if (suffix.length == 0) {\n      return true;\n    }\n\n    // Step 2: Check the boundaries and if the current cell matches the first character of the suffix\n    if (\n      row < 0 || // Out of bounds (top)\n      row == rows || // Out of bounds (bottom)\n      col < 0 || // Out of bounds (left)\n      col == cols || // Out of bounds (right)\n      grid[row][col] != suffix.charAt(0) // Current cell doesn't match the suffix character\n    ) {\n      return false;\n    }\n\n    // Step 3: Explore the neighbors in DFS\n    let ret = false;\n    // Mark the path before the next exploration\n    const temp = grid[row][col];\n    grid[row][col] = '#'; // Mark the current cell as visited\n\n    const directions = [\n      [0, 1], // Move right\n      [1, 0], // Move down\n      [0, -1], // Move left\n      [-1, 0], // Move up\n    ];\n\n    // Explore all possible directions\n    for (let [rowOffset, colOffset] of directions) {\n      ret = backtrack(row + rowOffset, col + colOffset, suffix.slice(1)); // Recursively check the next cell\n      if (ret) break; // If found, break out of the loop\n    }\n\n    // Step 4: Clean up and return the result\n    grid[row][col] = temp; // Restore the current cell's value\n    return ret; // Return whether we found the target word\n  }\n\n  // Iterate through each cell in the grid\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      if (backtrack(row, col, target)) return true; // Start backtracking from each cell\n    }\n  }\n  return false; // If no match is found, return false\n}\n`;function u(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ol:\"ol\",li:\"li\",ul:\"ul\",strong:\"strong\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"1. Using Backtracking\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The problem requires finding if a given \",(0,t.jsx)(e.code,{children:\"target\"}),\" word exists in a 2D grid of characters. The word can be constructed by sequentially adjacent cells in the grid, moving up, down, left, or right. A cell cannot be reused within the same word construction.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The approach uses backtracking with depth-first search (DFS) to explore all possible paths starting from each cell in the grid. At each step, the algorithm checks if the current cell matches the next character of the \",(0,t.jsx)(e.code,{children:\"target\"}),\". If a mismatch occurs or the cell goes out of bounds, the path is abandoned. To ensure a cell is not revisited, it is temporarily marked as visited during the DFS exploration. After exploring all directions, the cell's value is restored to enable other paths to use it.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This method systematically explores all possible paths while pruning invalid paths early, optimizing the search process.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Retrieve the number of rows and columns in the grid.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Define a recursive \",(0,t.jsx)(e.code,{children:\"backtrack\"}),\" function:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"If the \",(0,t.jsx)(e.code,{children:\"suffix\"}),\" is empty, return \",(0,t.jsx)(e.code,{children:\"true\"}),\" because the entire word has been matched.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Check if the current cell is out of bounds or if it does not match the first character of the \",(0,t.jsx)(e.code,{children:\"suffix\"}),\". If so, return \",(0,t.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Mark the current cell as visited by temporarily changing its value to \",(0,t.jsx)(e.code,{children:\"'#'\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Define the four possible directions to explore: right, down, left, and up.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through the directions and recursively call the \",(0,t.jsx)(e.code,{children:\"backtrack\"}),\" function for the neighboring cells with the remaining \",(0,t.jsx)(e.code,{children:\"suffix\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Restore the cell's original value after exploring all directions.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Return \",(0,t.jsx)(e.code,{children:\"true\"}),\" if any direction leads to a successful match; otherwise, return \",(0,t.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Iterate through every cell in the grid:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Call the \",(0,t.jsx)(e.code,{children:\"backtrack\"}),\" function starting from the current cell with the full \",(0,t.jsx)(e.code,{children:\"target\"}),\" string.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"If the function returns \",(0,t.jsx)(e.code,{children:\"true\"}),\", the word exists in the grid.\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"If no starting cell leads to a match, return \",(0,t.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(a,{children:d}),`\n`,(0,t.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:[\"Time complexity: O(m.n.3\",(0,t.jsx)(\"sup\",{children:\"l\"}),\")\"]}),\". Each cell in the grid (\",(0,t.jsx)(e.code,{children:\"m.n\"}),\") can initiate a search, and for each character in the word (\",(0,t.jsx)(e.code,{children:\"l\"}),\"), up to 3 directions are explored (since we won't go back to where we come from).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Space complexity: O(l)\"}),\". The recursion stack depth is proportional to the length of the word (\",(0,t.jsx)(e.code,{children:\"l\"}),\").\"]}),`\n`]})]})}function O(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(u,r)})):u(r)}var M=O;return v(I);})();\n;return Component;",
  "workspace": {
    "main": "/src/grid-find-word.ts",
    "run": "/src/grid-find-word.run.test.ts",
    "submit": "/src/grid-find-word.submit.test.ts"
  }
}