{
  "description": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=>{for(var r in n)c(t,r,{get:n[r],enumerable:!0})},a=(t,n,r,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of g(n))!x.call(t,i)&&i!==r&&c(t,i,{get:()=>n[i],enumerable:!(s=b(n,i))||s.enumerable});return t};var w=(t,n,r)=>(r=t!=null?p(m(t)):{},a(n||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),_=t=>a(c({},\"__esModule\",{value:!0}),t);var d=f((X,o)=>{o.exports=_jsx_runtime});var A={};j(A,{default:()=>y,frontmatter:()=>C});var e=w(d());var l=MDXTestExamples;var h=[{input:[[\"str\",\"cat\"]],output:3,explanation:\"The palindromic substrings are 'c', 'a', and 't'.\"},{input:[[\"str\",\"racecar\"]],output:10,explanation:\"The palindromic substrings are 'r', 'a', 'c', 'e', 'c', 'a', 'r', 'cec', 'aceca', and 'racecar'.\"},{input:[[\"str\",\"bbb\"]],output:6,explanation:\"The palindromic substrings are 'b', 'b', 'b', 'bb', 'bb', and 'bbb'.\"}];var C={title:\"Palindromic Substrings\",excerpt:\"Implement a function to count all palindromic substrings in a string\"};function u(t){let n=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Given a string \",(0,e.jsx)(n.code,{children:\"str\"}),\", determine the total number of substrings that are palindromes.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"A \",(0,e.jsx)(n.strong,{children:\"palindrome\"}),\" is a sequence of characters that reads the same forward and backward (e.g., \",(0,e.jsx)(n.code,{children:\"racecar\"}),\").\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"A \",(0,e.jsx)(n.strong,{children:\"substring\"}),\" is any contiguous sequence of characters within a string. For example, the substrings of string \",(0,e.jsx)(n.code,{children:\"abc\"}),\" are \",(0,e.jsx)(n.code,{children:\"a\"}),\", \",(0,e.jsx)(n.code,{children:\"b\"}),\", \",(0,e.jsx)(n.code,{children:\"c\"}),\", \",(0,e.jsx)(n.code,{children:\"ab\"}),\", \",(0,e.jsx)(n.code,{children:\"bc\"}),\", and \",(0,e.jsx)(n.code,{children:\"abc\"}),\". A substring is formed by selecting a starting and ending point without skipping characters in between.\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Input\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"str: string\"}),\": A string\"]}),`\n`]}),`\n`,(0,e.jsx)(l,{testCases:h}),`\n`,(0,e.jsx)(n.h3,{children:\"Constraints\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"1 <= \",(0,e.jsx)(n.code,{children:\"str.length\"}),\" <= 1000\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"str\"}),\" contains only lowercase English letters\"]}),`\n`]})]})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(u,t)})):u(t)}var y=M;return _(A);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/string-palindromic-substrings\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/string-palindromic-substrings.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [[\"str\", \"cat\"]],\n    \"output\": 3,\n    \"explanation\": \"The palindromic substrings are 'c', 'a', and 't'.\"\n  },\n  {\n    \"input\": [[\"str\", \"racecar\"]],\n    \"output\": 10,\n    \"explanation\": \"The palindromic substrings are 'r', 'a', 'c', 'e', 'c', 'a', 'r', 'cec', 'aceca', and 'racecar'.\"\n  },\n  {\n    \"input\": [[\"str\", \"bbb\"]],\n    \"output\": 6,\n    \"explanation\": \"The palindromic substrings are 'b', 'b', 'b', 'bb', 'bb', and 'bbb'.\"\n  }\n]\n",
    "/src/string-palindromic-substrings.run.test.ts": "import fn from './string-palindromic-substrings';\nimport runTestCases from './run.tests.json';\n\ndescribe('countPalindromicSubstrings', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = ${example.input[0][1]}`, () => {\n      expect(fn(example.input[0][1])).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/string-palindromic-substrings.submit.test.ts": "import palindromicSubstrings from './string-palindromic-substrings';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('countPalindromicSubstrings', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`str = ${example.input[0][1]}`, () => {\n      expect(palindromicSubstrings(example.input[0][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/string-palindromic-substrings.ts": "export default function countPalindromicSubstrings(str: string): number {\n  let ans = 0;\n\n  // Iterate through each character in the string\n  for (let i = 0; i < str.length; i++) {\n    // Count odd-length palindromes with a single character center\n    ans += countPalindromesAroundCenter(str, i, i);\n\n    // Count even-length palindromes with consecutive characters as the center\n    ans += countPalindromesAroundCenter(str, i, i + 1);\n  }\n\n  return ans;\n}\n\nfunction countPalindromesAroundCenter(\n  str: string,\n  low: number,\n  high: number,\n): number {\n  let ans = 0;\n\n  // Expand around the center as long as the characters at the edges match\n  while (low >= 0 && high < str.length) {\n    if (str[low] !== str[high]) {\n      break; // Stop if characters don't match\n    }\n\n    // Expand the window outward\n    low--;\n    high++;\n\n    // Increment the palindrome count\n    ans++;\n  }\n\n  return ans;\n}\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"s\", \"gg\"]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"s\", \"fce\"]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"s\", \"ee\"]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"s\", \"bddk\"]],\n    \"output\": 5\n  },\n  {\n    \"input\": [[\"s\", \"cheehc\"]],\n    \"output\": 9\n  },\n  {\n    \"input\": [[\"s\", \"ak\"]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"s\", \"ifabddbafi\"]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"s\", \"faghe\"]],\n    \"output\": 5\n  },\n  {\n    \"input\": [[\"s\", \"kk\"]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"s\", \"iagj\"]],\n    \"output\": 4\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"wruzmdfkvurzcgpoisrzfcrjtanpjqlorzvpfpkiwocpgjkadatzgehmjllmvfdxdccxvacjsqsrjwrocdfckgwkeqxzaeywvustzfezrwpnfbdaaurfvimxxiqdislkhkkrekpobuxuaqewswycslxdkkfukubuyxtkwellzysdwboahablllvxavufkureujoqwzjxsvhhatmzgrunpiqqgjkqkkxffxkkqkjgqqipnurgzmtahhvsxjzwqojuerukfuvaxvlllbahaobwdsyzllewktxyubukufkkdxlscywsweqauxubopkerkkhklsidqixxmivfruaadbfnpwrzefztsuvwyeazxqekwgkcfdcorwjrsqsjcavxccdxdfvmlljmhegztadakjgpcowikpfpvzrolqjpnatjrcfzrsiopgczruvkfdmzurw\"\n      ]\n    ],\n    \"output\": 720\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"sbgfypbbveeadxgskyuywdxhaxfztxdwsbruuyjcqxsuxkqermosbcqpslyyizwptfmvbsoxnziqbxqwibtumdrsqbvaiftayetzsxyfoewoxarxpumykgudfnvlewhdtyuedbryumeghlhigcwjcrdfrbnsjqekyitqlqgbuqzrghlwamtlubftpqfmjqtjofwjuxgwfxduiskoffefksilzvxhvdrfzxqzmgcwzsoxpzocdqpmxggmivsljkjpjvberoe\"\n      ]\n    ],\n    \"output\": 275\n  },\n  {\n    \"input\": [[\"s\", \"zdyydz\"]],\n    \"output\": 9\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"cglciuyywdfvjcsovogpnhvabmkljtjtgxqwkinagkgfujhqhatfmiaqampkrkkiaiblrnqfubwjkvtfmuoaquaqwqysbnltcqdagrztswrlwlwqzzdvpbjtlnsrdmcsnsbdxzzjhcvipaqamjfidbftsrkcfzxqbmpuxwuxzboqtgfgedquetbmofdgqwlwazjsqajpezfalwchqymkyengxbiteoluihpixueiapufldyaamzkgverwmbsrhghdebhuujpxfwxbogpzzaknsaiglrsvarjymkztjvucpwwurqhk\"\n      ]\n    ],\n    \"output\": 329\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"epfkuvocutlgqitabmbzuqumgqlgtfadrodeloqfqoxxhiwkocbbaznguzexwylvigjxxrhqnhszmhlktkmfawyzoozywafmktklhmzshnqhrxxjgivlywxezugnzabbcokwihxxoqfqoledordaftglqgmuquzbmbatiqgltucovukfpe\"\n      ]\n    ],\n    \"output\": 283\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"upsxfylsdsaizrdtnaqttnkuhiuwbevyycjkkusdwhwcvdecoifpmkbkgcjwdpfctxbblotyufwfsrfqbetcymtyfrezmlcdnolbxjf\"\n      ]\n    ],\n    \"output\": 111\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"exsylgablqnyevkeluurrwdapmyqhiowegyfxfkkdikjjnhlewgmmuxzqgbrrsfurlzwtoinyswzcgoghwrqnzgijddpojeebiacaoceecoacaibeejopddjigznqrwhgogczwsyniotwzlrufsrrbgqzxummgwelhnjjkidkkfxfygewoihqympadwrruulekveynqlbaglysxe\"\n      ]\n    ],\n    \"output\": 334\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"rzxtrqqxvxxfkwjckhlrlpxvldnwkbqtyrvhfpryipfxziclghatmiqlexnfkduxmydurdxosfwswmvdvwglfohaigyomqjjgjndgudxymrxaxbrkmdnnsfaszaojgweeoepbqkoiioeiqorxdimlpuhomavidbldfvkyqwtkpcugrraqvuqvhlmpghfsvyhehiqkhufesycfhsidnxkvfjgpwjwrrptwkxzftbzvnpffgpnvdlhqxdyemjldk\"\n      ]\n    ],\n    \"output\": 273\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"cqqmyiyubtnilguzzyvysejvvsgvgkqfbhuybmjdmqimoljvzgvyfeiuxrtipwvzctnhybithpgmvcibosuvgjqjlughbhugurdkuywoffwzjnmwhozgjizkyolhfyxvccbkwdbrjnbslcllfiibzvuvooduinrjpkspqnrxuwruwvxbaooplrqrunzvbgunpjpvtnmfbrqfejvcenkdxeduaknpbaaornzphlslqqsutgfkeevcramrkpjwauxlkedbfyejkylgtjwjqcckcexhbfzrasctrlnhybsboxiufolfozdegzfhcldqnpruwakkikzjxccldyzwxacomjtnrgbwscobevoqrhzhazefesyyssftkoferimbajgkolfleaoybkicknvozzppflmypzwzusqgoajskcirzaqdyauohzenzpnajskwfdnsglcsjkksbnigckejjjccgmwgncnqmmqncngwmgccjjjekcginbskkjsclgsndfwksjanpznezhouaydqazricksjaogqsuzwzpymlfppzzovnkcikbyoaelflokgjabmirefoktfssyysefezahzhrqovebocswbgrntjmocaxwzydlccxjzkikkawurpnqdlchfzgedzoflofuixobsbyhnlrtcsarzfbhxeckccqjwjtglykjeyfbdeklxuawjpkrmarcveekfgtusqqlslhpznroaabpnkaudexdknecvjefqrbfmntvpjpnugbvznurqrlpooabxvwurwuxrnqpskpjrniudoovuvzbiifllclsbnjrbdwkbccvxyfhloykzijgzohwmnjzwffowyukdruguhbhguljqjgvusobicvmgphtibyhntczvwpitrxuiefyvgzvjlomiqmdjmbyuhbfqkgvgsvvjesyvyzzuglintbuyiymqqc\"\n      ]\n    ],\n    \"output\": 1521\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ennabzgomkqktzhxprwqzgkilfcctitvookwffcimacwssdcctrmxoxkuevxpyegliofzyntvmqjixyklttigvskthrppqswgxsfdvdvnzetkimkjvcfzyqsjhvmxixkiytmdvvjgzlwqqmzwatvfnzwnipgbmqatawvnvsageafupzckhysyogpwltmjcsflbgklhgbpkfjvrhzlwmhmfghliqyndncqyowspbqzwbkkuahlzvynvzcnbsbxrcadfhyrnrgjlgwogrbdxocuuhmkzznwufqpesymbpfwzzejsybstgkhgyadliemzucyoedgriictwqgwxxbzilekoyyvfigparmdzupupxodtyicpfzraknjvuvsdernfroeiuqgwiuivfpvnzkvmtaabvfcmkwsbcmvmuvrwsbjjrstwviujkddytqsnkedbgydvahlllchpwsmtpvlhbyjk\"\n      ]\n    ],\n    \"output\": 512\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"zjiqwaqxfftzsotgbkvwcexcoboszdkbugjdmsjtdoxjlgbuxdxtgquhaneqjgsjiggqpczcubftmrjyretchuefborfojgmjexuktpfddotnhgvabkkcsidnuqqthzlyoacptqwyhmfoadlxycpxzbohftxuvofnkimaismjdpmdeqddjgxuxcvcwuclkwrqinvgijujheutszrwdjihazjfnvovuajmwlywrflvtswdnyodrignyvjdkgyaysqbppmeqvjlfzlngyfrvqtdmcwxuntiyxicnwfufkdwrezteyrbwvqphjwjwcxketjxnimdnkiyxdqmmiveebcsiqxvqcnqhjwsoekewpukqqkdlaevketzsdwsixzdiqyczrrxtmcefsmdhpufktyrqhplhznnfxntvanknbsfdfwisyxtwebjwmhwgyffuyfpfziuktypvgqvdlirckvdkrhyunrnhdjexgysqfyieeiyfqsygxejdhnrnuyhrkdvkcrildvqgvpytkuizfpfyuffygwhmwjbewtxysiwfdfsbnknavtnxfnnzhlphqrytkfuphdmsfecmtxrrzcyqidzxiswdsztekvealdkqqkupwekeoswjhqncqvxqiscbeevimmqdxyikndminxjtekxcwjwjhpqvwbryetzerwdkfufwncixyitnuxwcmdtqvrfygnlzfljvqemppbqsyaygkdjvyngirdoyndwstvlfrwylwmjauvovnfjzahijdwrzstuehjujigvniqrwklcuwcvcxuxgjddqedmpdjmsiamiknfovuxtfhobzxpcyxldaofmhywqtpcaoylzhtqqundisckkbavghntoddfptkuxejmgjofrobfeuhcteryjrmtfbuczcpqggijsgjqenahuqgtxdxubgljxodtjsmdjgubkdzsobocxecwvkbgtosztffxqawqijz\"\n      ]\n    ],\n    \"output\": 1530\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"wtzjtipwfnzjhvnixgpmasoepacwydneytvepgexjbagzhpvdscpigcgkihcmnqrbaqspjgrdwhisfiebgrhivpsjlyqjksnigpsyelilrztllixpgnzapvgzkfggypdpjawhiqyfsuwfzphqvvhlhyxcecmfpxqydaluklgbodljhwihjknpiugpyltfqnxffssqyyxxklfbfserrmcakbciymafysdbkftlqizokillioapgqeekwlvmqdkwutquhddwxymsmdxzvyesjvdwkgqxyyrijeeyrtvkoxlzpodtkjehnjibxejjbdmbtntjkxmaidoqbfuauiwxwvhljmitlhkfvrzxpxsuuhpkwvaxfdpmaliifmcxpuaftxlmbqhkqjpfgkhyfogszgqvjkfwagnagfnkfpgougkjuyjunsjoacfumpekbzbnyzuig\"\n      ]\n    ],\n    \"output\": 480\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"fnihoyoqvekzmacbjxraihggawzdaptofzdyjhwdaqfupolumktmbojausjypbfyqplnwokktfqcwsovnhazdmqoyjtwaiasifetkcctqqgqhtpbbhiqqfozdrcmpifoxrcljcggijpsjnswzbiximrlhwsnbxcplzptrwttuefotpardouecpgqjjhaqiftghsemwebonqoywutqfxsifpmbaiurgozxvkjfallfabunlsrscvbeeatwfbbwwuozyfgqgvjuwxprvimpfgjlkfacgdkulyodlqiyjzidnsndfnxspdenufjakpscesgdcyxfzqkiqcwjhxpwpmfmszqnyqbadcttmexrfzwbqcssphewmjtseyfjewaoennjjztbnkropaktxffhojamctqwxwuxiwschbzjwqeycsazhsjyytkhdhzdyqnnjqnecwjkukitkggehdhzsrfyvpvvtccknrccsgpxqhznsadeiottoiedasnzhqxpgsccrnkcctvvpvyfrszhdheggktikukjwcenqjnnqydzhdhktyyjshzascyeqwjzbhcswixuwxwqtcmajohffxtkaporknbtzjjnneoawejfyestjmwehpsscqbwzfrxemttcdabqynqzsmfmpwpxhjwcqikqzfxycdgsecspkajfunedpsxnfdnsndizjyiqldoylukdgcafkljgfpmivrpxwujvgqgfyzouwwbbfwtaeebvcsrslnubafllafjkvxzogruiabmpfisxfqtuwyoqnobewmeshgtfiqahjjqgpceuodraptofeuttwrtpzlpcxbnswhlrmixibzwsnjspjiggcjlcrxofipmcrdzofqqihbbpthqgqqtccktefisaiawtjyoqmdzahnvoswcqftkkownlpqyfbpyjsuajobmtkmulopufqadwhjydzfotpadzwagghiarxjbcamzkevqoyohinf\"\n      ]\n    ],\n    \"output\": 1566\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"vigzltgslctudoobfbbzshymoexyjafhelqvhwiasnfgdpbygggshvkitnuwxnxlhntrbbyjuwuhyczjwebshukqjkqifmybxewtztgzmbzcpiwhylabbybxgckimnvsnvbqxcdgokzzqie\"\n      ]\n    ],\n    \"output\": 156\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"vxmywunyhcgejalszvzgsjyudojqhejcepirvwaadgxioillkvfkejwberdphwufoteqfqoqrommwznxiuzuhgnrsdqrdifrecrrfntynyydoduyuxigrmbnnveauqlyhijesuvizhkjyaikxcjzmdthtwtpqbmwkmgevntynsssxgkisdehkxbrmiyracgnsjjazyeohesmdtojdqyrzgybfyepslltefzsyvdbrnzsvxwlfgxueauvswryrbfzhnihzwycgyygswwxoeoujxmvtagvqyrgttoppidcdrerdlxfutgekypqgkoyasqwaxodwdhvjprhaigxofdfqcerdoydzfkkmebdjhtrdjdplmhedocpblbscpvjoyavcbtevvzacsjratqmnddfczspyxovthuchdegawihentmyokwdoxtuhqlwxjvcyxaynsowkevofhmwpnmslmeqzzgltrnpbpdcttcdpbpnrtlgzzqemlsmnpwmhfovekwosnyaxycvjxwlqhutxodwkoymtnehiwagedhcuhtvoxypszcfddnmqtarjscazvvetbcvayojvpcsblbpcodehmlpdjdrthjdbemkkfzdyodrecqfdfoxgiahrpjvhdwdoxawqsayokgqpykegtufxldrerdcdippottgryqvgatvmxjuoeoxwwsgyygcywzhinhzfbryrwsvuaeuxgflwxvsznrbdvyszfetllspeyfbygzryqdjotdmsehoeyzajjsngcaryimrbxkhedsikgxsssnytnvegmkwmbqptwthtdmzjcxkiayjkhzivusejihylquaevnnbmrgixuyudodyynytnfrrcerfidrqdsrnghuzuixnzwmmorqoqfqetofuwhpdrebwjekfvkllioixgdaawvripecjehqjoduyjsgzvzslajegchynuwymxv\"\n      ]\n    ],\n    \"output\": 1526\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"rzhbajnkpnkghtanlswgzjwprabhlmlijutzbjhtrvqlpyjmrxvllukthixcpqahgcvepqrhdcsfvcewdbgugwnlenbhwsarsombjcejzmvozafnfofizdggwsekufmqimdroyzhrxdeckiolhruqomzyvsvnayiagdzykudwbnkvqesanhfaekfduxmytyezzpxiwodptxzqixsfgbtuanmmmrcblpqoitidekvtykwwjabsopyvbbhqnekjdxjzytdeisnasknovorrrhjwyakhzhpewixjpdnyhqvmohfwjtrriixpyfuaqqjtiucl\"\n      ]\n    ],\n    \"output\": 344\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"khoorpzginqlutsxegjlawllrmjhqjhexjzczidhourrsyxlhqptxcnszhiyyhwmhrlrjdditklogzuqlotqaywqezoqykhryyihabgaoklwnyoqkapppbaepfkxlkbwvinhlbjmovxkdlxrfguuzqlgbumrwiraoudlybzedjtguegtlrdhmclwqwmmumllkqhvudpzdguprivnvubaqqtcnxalnyrnvxahcmsgplqvytbiiuaaarbmajrkbtoxljikjjijxfytcmsqcmelpvmjhebdeuwkasfupavugghvcqmwnypblfezaazdzeuhblgfuegyjtgppjetfkpguzknhckvhrnkffqdtcnbmivmooboyvismgktgyomcenvssqjksxlxkymerjincwyvzjkgbuvrohkbrxlllmigwfzpzyomjfbbevgsknmsblcegzhtricjjcirthzgeclbsmnksgvebbfjmoyzpzfwgimlllxrbkhorvubgkjzvywcnijremykxlxskjqssvnecmoygtkgmsivyoboomvimbnctdqffknrhvkchnkzugpkftejppgtjygeufglbhuezdzaazeflbpynwmqcvhgguvapufsakwuedbehjmvplemcqsmctyfxjijjkijlxotbkrjambraaauiibtyvqlpgsmchaxvnrynlaxnctqqabuvnvirpugdzpduvhqkllmummwqwlcmhdrltgeugtjdezbylduoariwrmubglqzuugfrxldkxvomjblhnivwbklxkfpeabpppakqoynwlkoagbahiyyrhkyqozeqwyaqtolquzgolktiddjrlrhmwhyyihzsncxtpqhlxysrruohdizczjxehjqhjmrllwaljgexstulqnigzproohk\"\n      ]\n    ],\n    \"output\": 1449\n  },\n  {\n    \"input\": [[\"s\", \"mulrexejryjbdihvejcqyofrwwtxrlxhuiynwhmeeonihtlo\"]],\n    \"output\": 51\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"pgvxzziitsfmpnnrmjxoaukcnsgykxffnzdnxryucyyfhifslxkwjylqisdnnyygfotpfvqwtdnrgovnuunazfxdamhqierceysrmqoohcjkgrszsvqdcgobjqxgroswanadkjnyxnrkqmbtgdrjbikstlwfzpphqfzhzfjybhumynnsoebjqyvbgfvllsorpjdcnpyolreriixglpcyjgyntrqqdzvdyjnzsxcuzqeavejltlelgrjuipuzodtpahvghimlrqhqxgkqcfsrdjoxasivulnnluvisaxojdrsfcqkgxqhqrlmihgvhaptdozupiujrgleltljevaeqzucxsznjydvzdqqrtnygjycplgxiirerloypncdjprosllvfgbvyqjbeosnnymuhbyjfzhzfqhppzfwltskibjrdgtbmqkrnxynjkdanawsorgxqjbogcdqvszsrgkjchooqmrsyecreiqhmadxfzanuunvogrndtwqvfptofgyynndsiqlyjwkxlsfihfyycuyrxndznffxkygsnckuaoxjmrnnpmfstiizzxvgp\"\n      ]\n    ],\n    \"output\": 907\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"xbhshvdfqqthxktylupsbkmufytdwnpaicispyulnyxgwuvgoqmmokodkjelmvxagdrfochkxasioavurihyosygupdilgifcbwmauetqmppmyxydzskdbyrguxvkgetswsvrksxebutcqcxjxebviezpttqvcebuzrkwxawchjxrljudikhcubsqgkfnggxujdhiztienikkkfbnzarucpetwpdcidtycxibefgqhkojpwrnlmbvqwkqdjzqhjnshtnashnlwtjtkebjgyv\"\n      ]\n    ],\n    \"output\": 293\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"hyutglgliacvnfhmwcqalqwaankuzcbxkboyklbvzjdgdbiwqeuifnsxpeevwxlrcnuntamjkzvpyzwgvppweatnkoatmvlnsybqiipnnpiiqbysnlvmtaokntaewppvgwzypvzkjmatnuncrlxwveepxsnfiueqwibdgdjzvblkyobkxbczuknaawqlaqcwmhfnvcailglgtuyh\"\n      ]\n    ],\n    \"output\": 328\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"hnupjmavsiaqesptbccuoontjjqjxrsrlwfbnyibvqxvstjazohwsdfwilrvjvetsfeznrgnpummgxlmwnavyktdgnojnhkmbfyrjkuwgmyxmiulhacebvvgdlzqudujcvzhwxfppdoxrzljwsqowabiuxnlwbbgcubvtzjyjvknmunojtdqxvmveerejlrnamhpfwopbobgfwrkgtflqvedidyrqymegthmopyybqijtzosavudtottjpfourtzsaycowetiuibpytjcqldtxqmlfcpkzevzocmzcygfmbrnaxphdenfpbip\"\n      ]\n    ],\n    \"output\": 334\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"vnbqxfadmzcnujwdwxiboskxsbsrfyyqmqnirszjqawvgmttdrpibxpyljesgzjxcfmwshjglgssdhfgpktzkjtxqpyjiqdjzizuizlbzojbiglbqdhnditqxoygdgrlcmlubvcmdrmnlaeluzvcxjqpoyafjsrvttddtzuqyiguoesrrecxbfyelfmwqqlmodyzsuhhyofjtiavjaknzvmtqvaggavqtmvznkajvaitjfoyhhuszydomlqqwmfleyfbxcerrseougiyquztddttvrsjfayopqjxcvzulealnmrdmcvbulmclrgdgyoxqtidnhdqblgibjozblziuzizjdqijypqxtjkztkpgfhdssglgjhswmfcxjzgsejlypxbiprdttmgvwaqjzsrinqmqyyfrsbsxksobixwdwjunczmdafxqbnv\"\n      ]\n    ],\n    \"output\": 690\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ttcksjpoordkgvytrhcsbejlwfilnfkoatocnjjehtllqkiwljdblerwvhlbrnzpiilfndngzcnimgcpfpohgghlpxwkwkmtcylwagevvhcgplltrqkihblmzuzapnckxxurrlpipcdrgbfxhvofeuplxvabpbwgycnkrymlmoykakykzzsramnlwzwberrvvvxzmmfqqraydvgdwzoejhwhuvfatyrs\"\n      ]\n    ],\n    \"output\": 255\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"uufkuoznfxgvxmqpcuzxfxwgwboqwautlspawvkkwkiwnnupmejutnzzudzsjplwoaozdmkblvmnzaqsjichmakovcugaufhrrbpqsmoodccjdismviojsauenkxuymzumbcemasvphojxhyrkoklgfzfymbpotgqseorcxqonyejvnrizhxxvkvtdkshbosicthxcujqqmubocwkazuvltjeivmtvqhecqavieipcruavxmrlnagasloulqjjoeceuzgbxqqmirnrrifzuzmmmepxlwpjdqglkehpzgcjxrmnuubofrbxmstknkdgeqbtakvjqbnbeseqscxjvjonurxqkrdzkkvpbbaffjchyidjijaovyikqttywmmhwceuvdunavvpzfuaaufzpvvanudvuecwhmmwyttqkiyvoajijdiyhcjffabbpvkkzdrkqxrunojvjxcsqesebnbqjvkatbqegdknktsmxbrfobuunmrxjcgzpheklgqdjpwlxpemmmzuzfirrnrimqqxbgzueceojjqluolsaganlrmxvaurcpieivaqcehqvtmviejtlvuzakwcobumqqjucxhtcisobhskdtvkvxxhzirnvjeynoqxcroesqgtopbmyfzfglkokryhxjohpvsamecbmuzmyuxkneuasjoivmsidjccdoomsqpbrrhfuagucvokamhcijsqaznmvlbkmdzoaowlpjszduzzntujempunnwikwkkvwapsltuawqobwgwxfxzucpqmxvgxfnzoukfuu\"\n      ]\n    ],\n    \"output\": 1272\n  },\n  {\n    \"input\": [[\"s\", \"mfdnjfeauluhxzzbrzmtjgeedldibirzg\"]],\n    \"output\": 38\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"oxefsypupbcnmlkdmoxeahihlvkwawwgjazxsdaepusycelzjjaszhlspnsnwevfxuhyiidqintgtkblszkiqvbnxutgwcululcpjyzqcjajkteenueunoamvisvkcawlkeemcqvvdqnurcbdmottvtahqfhahndifbggkectbbzwiavphnbmnyspvtqlvilxtxurxuspxnkngtpyfbjtbeucywregcoaznjtkydhylwwlrrlwwlyhdyktjnzaocgerwycuebtjbfyptgnknxpsuxruxtxlivlqtvpsynmbnhpvaiwzbbtcekggbfidnhahfqhatvttomdbcrunqdvvqcmeeklwackvsivmaonueuneetkjajcqzyjpclulucwgtuxnbvqikzslbktgtniqdiiyhuxfvewnsnpslhzsajjzlecysupeadsxzajgwwawkvlhihaexomdklmncbpupysfexo\"\n      ]\n    ],\n    \"output\": 767\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"xtfkmmqcfzfaymxuulntzttgsbvtpjesrgoapiuusybsuzwbxsgjprdpwzgpdzpftwvmcklfaizlvjrogwrgkbhyxrgeaxzgqyxardlgnm\"\n      ]\n    ],\n    \"output\": 112\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"wfglpwuvliwkvwtmtnxqkprckowzlbzikgdiqajgdduudvqlkuhaxmcalxffecdtbevgmnxsrwqwwzrvobqxanszpzascbbyvtslgwzabsdaqlezppeqpuvdxnjdznkirjirlpwahgufgcpzsszpcgfughawplrijriknzdjnxdvupqeppzelqadsbazwglstvybbcsazpzsnaxqbovrzwwqwrsxnmgvebtdceffxlacmxahuklqvduuddgjaqidgkizblzwokcrpkqxntmtwvkwilvuwplgfw\"\n      ]\n    ],\n    \"output\": 455\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"axvwermzkvhrpqjaiipupdfjyfvcweyvyygdkqivxqqqgjnbbnzjdgsdnhltdvzpejwvmskxjuobffkulkfprnbnuhsbtitudoyvhwusgogtowjrpebltlolwdxdjrtpsiqvtlnzjskxlqwkuudrxtiqrnnqpqkzelzfwmhusdevpuetpybslzeqzuwjffbvhhwmjddbnntqkvksdcioeoiiuvmtzlgpxvgbn\"\n      ]\n    ],\n    \"output\": 256\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"zetppzetdpkxrewckoekyjfilibgongasxptsbdewkgnqeyhvwgyrwhpkdwceftrtqdigexrzgtssjxnqodswgfwumewslskmaogjivwtlvdlsfsbyvrptyiteqooqetiytprvybsfsldvltwvijgoamkslswemuwfgwsdoqnxjsstgzrxegidqtrtfecwdkphwrygwvhyeqngkwedbstpxsagnogbilifjykeokcwerxkpdtezpptez\"\n      ]\n    ],\n    \"output\": 384\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"yohwsiozmkqaeuykyxxzvwwzvlbkgcdqyziikpmsmeftpwjcsrhiiyzkjhrxuuaztyurhoicagbvypjicittfjpkbxjhqcdkeixkkziwinvlutfzkkysbyckdztfsvdxoeenmcfoimttcqholzfagaqiadictkkbbbadlstulxitkhmnuxhitprtohvjqyzhywcibpwurwsopuutyllrmhbwbcknfpyucivftxpihcpkjdbyarxvqeqpsxppvtevllbeplpiakdcdqkcbhqjlybhiixonbejaqyrntukzbtorljsmlpxmdjalkdpfkgiiflhokvqupvqoeibeyzkiacpuhvthwoquqnlketsvqnbvordezezolwyhvzqxhpicxlmaqriifzatcuoawvruvemgjikstfjrrz\"\n      ]\n    ],\n    \"output\": 453\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"hircaracndaunmpepqujxkvrrfzhbarjabrmbjinrecxzdsyizouqtfqwtnvxirzqrgvhttfwmfckoamukgrdeuyhsdtajfdjuhwurpwrmmnwpivqmfcmakfddryelopdrlibcxuhwuhmznhohxbvqphdlhmldatxavjucsbnbqcgssfyrwffftbyxluprpetwhlvcetowlfrlxinnchpngughtxuqcdhdziybwocntbolfgkwmohzfkvwpkfrqqlstsiavsegwqikekfrmuwbhirswrpkuawojjunpfwpnmnitkoviodndvjcnxdgpkkzuyrtnvhnelukimtordbdzxxrmtwbwjtfihzntyscjjjvxdohvemkeqphijobuiazdxuqnhhwdnpkkkkpndwhhnquxdzaiubojihpqekmevhodxvjjjcsytnzhiftjwbwtmrxxzdbdrotmikulenhvntryuzkkpgdxncjvdndoivoktinmnpwfpnujjowaukprwsrihbwumrfkekiqwgesvaistslqqrfkpwvkfzhomwkgflobtncowbyizdhdcquxthgugnphcnnixlrflwotecvlhwteprpulxybtfffwryfssgcqbnbscujvaxtadlmhldhpqvbxhohnzmhuwhuxcbilrdpoleyrddfkamcfmqvipwnmmrwpruwhujdfjatdshyuedrgkumaokcfmwftthvgrqzrixvntwqftquoziysdzxcernijbmrbajrabhzfrrvkxjuqpepmnuadncaracrih\"\n      ]\n    ],\n    \"output\": 1263\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"kpibssulhvmraqsoiuircecmqceoxosiebvybkgflentcxrbjsthjxeikbeifbyhqzhakemqgzzixniixsitiwwgegivdyaybpxviaubkjynjdymlfepwfvmvegymgejgfkjpaninsqxqcekojurxixeljmfaivzxdexsvucrprmwpajbdimkjlxklsdtfkclkscouusrttawxcopyozrssmedvkxjwcchcq\"\n      ]\n    ],\n    \"output\": 248\n  },\n  {\n    \"input\": [\n      [\"s\", \"fxjuczxeiwxjozqowmbqaopafxvbsxxsbvxfapoaqbmwoqzojxwiexzcujxf\"]\n    ],\n    \"output\": 90\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"rwfcpczqwflshlkvcvvlxnkukqntwymbbymixxddoyqudphvxeakndxjilgyhussjzgvrjhjxkzuukxlppl\"\n      ]\n    ],\n    \"output\": 95\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"bgllimxkrjqtcmccaditbrgkzgaomobzytfqryhzyoauyrivvubfqsjkcbqkrrcudeeomvttjaduuojnkqlryyuuxxuuyyrlqknjouudajttvmoeeducrrkqbckjsqfbuvviryuaoyzhyrqftyzbomoagzkgrbtidaccmctqjrkxmillgb\"\n      ]\n    ],\n    \"output\": 289\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"zlejwzdecbfcquadsgjuykhskhvyuskhhucpoucaaoyblmywskmlptlbvbwhvqskzxbhwukarsjbytrvlslhycyvdszzutqfboubvsduiandujcaawbjvjcjswvtrcffgagualhceyqbnuurpshmnhdntsshfoux\"\n      ]\n    ],\n    \"output\": 173\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"rvfcasykpbckanszxuuqjqsfxlznidlxuxutikgoynbehbaksodxbldcacxssidflvxabruncroyphobyhizeofmkxbdhwkqczwdyvaccqprwpjfgizvrypgvilrgtfgtfojiufnxkrhhffxtgsyyablffiqlumeslvjfabeicacqtrlxecdvnxycsycupuvxidjgvxeeeozolekxbyuniahbcgcrhzyxvpjglfeinnkzbprlzhviivhzlrpbzknnieflgjpvxyzhrcgcbhainuybxkelozoeeexvgjdixvupucyscyxnvdcexlrtqcaciebafjvlsemulqifflbayysgtxffhhrkxnfuijoftgftgrlivgpyrvzigfjpwrpqccavydwzcqkwhdbxkmfoezihybohpyorcnurbaxvlfdissxcacdlbxdoskabhebnyogkituxuxldinzlxfsqjquuxzsnakcbpkysacfvr\"\n      ]\n    ],\n    \"output\": 773\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"gzaqfiigbaajxnpxynunsfvcrawfmqazjskpdihwglckmzavzlekgiimsdagmsvoigilkuevxyctjmsshvkpwepmnfnfdhdsrjueenhucokqriyonshfchicdvzgxwfzgoyqhlwxxrkjalbkmaepdmqrvhsgvhppvfwdwtwsix\"\n      ]\n    ],\n    \"output\": 184\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"gwjgbpciffvbxzynanvuogblyqmlpvtihazoqqevzeqppjjavgrbjmxqzkvwipifrqebywxiofwitxhjbmvcyhsrqkulitfxjvypxrqbpiafmgndlqykpctipoeipsorqafbifewllpqlnhealhgucxizvcvflooukqiwsrhrgdalqpfbzmyiotaesfxazefrwsurrqluzybvyuhynevvsijtvlvoafajqlvyyithvopupdprflxuveeatweekqozmpzbzmsxfyntbxjcsjyjgfbkyttykbfgjyjscjxbtnyfxsmzbzpmzoqkeewtaeevuxlfrpdpupovhtiyyvlqjafaovlvtjisvvenyhuyvbyzulqrruswrfezaxfseatoiymzbfpqladgrhrswiqkuoolfvcvzixcughlaehnlqpllwefibfaqrospieopitcpkyqldngmfaipbqrxpyvjxftilukqrshycvmbjhxtiwfoixwybeqrfipiwvkzqxmjbrgvajjppqezveqqozahitvplmqylbgouvnanyzxbvfficpbgjwg\"\n      ]\n    ],\n    \"output\": 891\n  },\n  {\n    \"input\": [[\"s\", \"pyeloqblc\"]],\n    \"output\": 9\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"pcxtadtsdpmynvveddjmopiyzhgjdcsfmdklwbyvhiwvpmerhadobjodtenwrjtagowycrrlqawcjegenizspxxsxpwyzjwplgdfporfyxbuskhmbnqawcbecaosinpmhcqevcggofnwsdtsodagjolpvlwrscqufhvmqeaynacvfkplebkvalaedavmbcoyluhawiftotzdevsyificquemdqnxuianldlfvlpjlakollulmwzhxuaqlcfmvkpsgpysgubxgwagnmieelbosipkmdudsunvynpywiapfvbacliehxalllsilnpsbudgtvsqrcrptbrzlbgbiuztecizdychwcueicbflnguipmovsiiqsbldjghbhvhzqeaicjzmhtyewjogzszfncdydkszjjzskdydcnfzszgojweythmzjciaeqzhvhbhgjdlbsqiisvompiugnlfbcieucwhcydzicetzuibgblzrbtprcrqsvtgdubspnlislllaxheilcabvfpaiwypnyvnusdudmkpisobleeimngawgxbugsypgspkvmfclqauxhzwmlullokaljplvfldlnaiuxnqdmeuqcifiysvedztotfiwahulyocbmvadealavkbelpkfvcanyaeqmvhfuqcsrwlvplojgadostdswnfoggcveqchmpnisoacebcwaqnbmhksubxyfropfdglpwjzywpxsxxpszinegejcwaqlrrcywogatjrwnetdojbodahrempvwihvybwlkdmfscdjghzyipomjddevvnympdstdatxcp\"\n      ]\n    ],\n    \"output\": 1280\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"pbhlohjvjcticqsvmfqymxoggnhpjfakcmpgqfoxfkljwqhwgeonmdoftvcxwqppgrjhsdmyyppuzhbbfflmjnvcbkdihhewbqyeutozzvfrzvbztecyxlgpruogftjdfmhdmymexzsuvceftqhcmqwqqeqvltmvluhekumkmwjluvgexuadzvlglgvmcftjgtxaleskghimfrasttxjxnonlvkslylbjkpiltuhguitqyocmmwelzjdtwxkfyjtosbqjtyairdlmrckwtydiegxwojxcpqtseulkcvleuxwukyafqmgrkvqrjpzdjwhufrgezukpecdinvfcugmdqqzlylpzkleuohzrwduwgyysotgdusljcckagntfrapdgsdjdrrpzfrxzueygmvxytkiuhqlllpepskgnbyaicpirtpgxcnf\"\n      ]\n    ],\n    \"output\": 468\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"bxrmdjammixtbomrnqvinawwmwwnuqwbvntqqrwwbeffvybhoqnmipgdcyxvvhtpehxbpdvviyidoeodzbvfgdwrurdgfkkhvtxbnbppudzkxckjpbtslqkopvgkkxceknhprnouvwyqclixjsgzwhusuptloprcloawzzmlvkchvmobjuhusjptaisjohifrhmvobfbspbpcqjavhfcuvlnmymtkuflzmtwjueeujwtmzlfuktmymnlvucfhvajqcpbpsbfbovmhrfihojsiatpjsuhujbomvhckvlmzzwaolcrpoltpusuhwzgsjxilcqywvuonrphnkecxkkgvpokqlstbpjkcxkzduppbnbxtvhkkfgdrurwdgfvbzdoeodiyivvdpbxhepthvvxycdgpimnqohbyvffebwwrqqtnvbwqunwwmwwanivqnrmobtximmajdmrxb\"\n      ]\n    ],\n    \"output\": 741\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"noudjeupughkxpsgsmsmavdmtgmisekcnvlfppzgbakvltdxdjemyipnsrsujscagpxloeycgijzxgrfqhhgvtvkwrklxpoqtqfdwdekicbitlvtczvizszndkkzwiknkntrfujgtwme\"\n      ]\n    ],\n    \"output\": 155\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"arexgedljxhwcyjlcizoatbrcgmcnmuuaetevprqbaixizdripnuwkuvdkuwlzegnfbxxlpbxqyrgfjgtgzvpavcybqijbhneoefnjdcryofgkdngzheimklzqnsomldbbvsuznichvxgiqndwztfwfupdlpyhcsjmzuylpoyrjsuaazohubbjtexjytnfocxundtqegyvlfquwbsvuupxjgtiyzpsslquhsdehmoigfnppkzxnglnkfheruzxofgicudjwrrdwirazyhlrqbujhnadykdcdzjuxpwfaaarhkzehbpeyqspxsoeiwtfkfpnddflvllvlfddnpfkftwieosxpsqyepbhezkhraaafwpxujzdcdkydanhjubqrlhyzariwdrrwjducigfoxzurehfknlgnxzkppnfgiomhedshuqlsspzyitgjxpuuvsbwuqflvygeqtdnuxcofntyjxetjbbuhozaausjryoplyuzmjschypldpufwftzwdnqigxvhcinzusvbbdlmosnqzlkmiehzgndkgfoyrcdjnfeoenhbjiqbycvapvzgtgjfgryqxbplxxbfngezlwukdvukwunpirdzixiabqrpveteauumncmgcrbtaozicljycwhxjldegxera\"\n      ]\n    ],\n    \"output\": 1029\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ozgltrqsvapytbkoibobyfypexkqaorfcwyvwhthlsqbtbqzccnfjcfnnndijzdonznrzogcufsovsjmnmwtlbmjebmnnawccrfglpykaldkkppbpnqquxwqtthneewumagrjgfcrbooifzhvgbdyjxvxrstqdxtzhrzhhrrtkvgnbxszfczebtfkpf\"\n      ]\n    ],\n    \"output\": 210\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"uaprypglvmhkmskdtnhzblmorzbtnjwtspsslxnffkhkxydypwacmalrjrlfpfmclozkdkickmtmtakagprpbkdmyzrhlcxhxzrpvmmdwnuketwxvsdfkgsgbzzffzzbgsgkfdsvxwtekunwdmmvprzxhxclhrzymdkbprpgakatmtmkcikdkzolcmfpflrjrlamcawpydyxkhkffnxlsspstwjntbzromlbzhntdksmkhmvlgpyrpau\"\n      ]\n    ],\n    \"output\": 406\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"nabspkpplgzktnomckpherikdxtmbrhyghmuuzxjttxyupbzxoejkbxjbkwxwrtbcgyyhwtkjlmudyvkwlvbuyycnpfpzcwskbhgrnsmbikajggvspjovnbjixkgdreerxaxptaakdadlgztoedegtspvxtkpejlhtjsnqneuqbuaquenbrquvxkrbaybwlsmadznwzqvfcqyclblgmjcviybvnysrugqvdhimwktceazqpgtdjihaakbbghneiedlawmnbsfkgrcqpffcqhuqyonbbatzopnyetcojevfvwkqpuhwkj\"\n      ]\n    ],\n    \"output\": 331\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ffgmgftwhycpshlzzzcnsrqyttuwdbypxjdirrperbldobtaygxlrhglnnpdclzldhipzowrdsleemojpcaulsqfnbztjwqpqrveubhggopdtslelfwxxtisdmwmiipjpdvxninbtyawsxqbnwaklbknaccyjycjuvjlakullwrrbwkaojajfsyfumqvlofuminxhuyspzmaqienwexxqbwecylabpynsownjthepuuxyhmmavefkxauaqcloghqcgatgdxcvpopmxkefczynxonqvuucrvnnetmdvobdouqidvhqrhrnzuuktcrmxjndcbsvhsojxcywpccuorvhtnonzpkwqetokyzzgdkmfawlatzcxkjxlbsdofsowotmrmjgmhqqliymzkqzttzqkzmyilqqhmgjmrmtowosfodsblxjkxcztalwafmkdgzzykoteqwkpznonthvrouccpwycxjoshvsbcdnjxmrctkuuznrhrqhvdiquodbovdmtennvrcuuvqnoxnyzcfekxmpopvcxdgtagcqhgolcqauaxkfevammhyxuupehtjnwosnypbalycewbqxxewneiqamzpsyuhxnimufolvqmufysfjajoakwbrrwllukaljvujcyjyccankblkawnbqxswaytbninxvdpjpiimwmdsitxxwflelstdpogghbuevrqpqwjtzbnfqsluacpjomeelsdrwozpihdlzlcdpnnlghrlxgyatbodlbreprridjxpybdwuttyqrsnczzzlhspcyhwtfgmgff\"\n      ]\n    ],\n    \"output\": 1286\n  },\n  {\n    \"input\": [[\"s\", \"qchiwqlyvdalrcqnemmhkqoejtrplbcjmevqmalczqbshjkdr\"]],\n    \"output\": 50\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"rghsbjdgpluuawtunkiqaghlsandsdfoazemostdbggulufzcpliygisgqcjqwbnreisjsvyhizgphzkbweodjxsdgjsfgzmnmghdfdcajwgkjsxbxktminegsmuttonrfilkvuyoneyipqosqimoekdfukbyjztzhlkijhuawdwrolytpxgmonnpzsmmbkjajvsxgyhjbrxoponurmsrlszhoeqxpqcgbqrgcklhtddygjwgxivgxscaqdafospjrqfaqmjpaknqdlpvgbusukikospttbavfnetmmmmtenfvabttpsokikusubgvpldqnkapjmqafqrjpsofadqacsxgvixgwjgyddthlkcgrqbgcqpxqeohzslrsmrunopoxrbjhygxsvjajkbmmszpnnomgxptylorwdwauhjiklhztzjybkufdkeomiqsoqpiyenoyuvklifrnottumsgenimtkxbxsjkgwjacdfdhgmnmzgfsjgdsxjdoewbkzhpgzihyvsjsiernbwqjcqgsigyilpczfuluggbdtsomezaofdsdnaslhgaqiknutwauulpgdjbshgr\"\n      ]\n    ],\n    \"output\": 927\n  },\n  {\n    \"input\": [[\"s\", \"eeznsgswvsfxajemkeuxz\"]],\n    \"output\": 23\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"odbjumbhjlrlttnpgjbkwamdmtryvdrpwvhtiutdvhbwxsdtiihoibmvuiapjjsgaiwawzoqkkhcxymnhembrsqhfngekzbuegxoeuxgezucqjksmtzndavzldbepafsxzymdofjtrftfukgbvnvoffteuswckhcasnnxpkksgqfmewkvfaebynxvrfklegrrrzrnxtuzlewbfibyhrzktqswspnitllhlgzkewbajzdzetalqozdniqdenbfohvvprijsjpruugcipavcqjegqeqrwilxqygyusiahvllmvkntneoeecjtzztjceeoentnkvmllvhaisuygyqxliwrqeqgejqcvapicguurpjsjirpvvhofbnedqindzoqlatezdzjabwekzglhlltinpswsqtkzrhybifbwelzutxnrzrrrgelkfrvxnybeafvkwemfqgskkpxnnsachkcwsuetffovnvbgkuftfrtjfodmyzxsfapebdlzvadnztmskjqcuzegxueoxgeubzkegnfhqsrbmehnmyxchkkqozwawiagsjjpaiuvmbiohiitdsxwbhvdtuithvwprdvyrtmdmawkbjgpnttlrljhbmujbdo\"\n      ]\n    ],\n    \"output\": 994\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"yeepuytebqbgzkjtpxeexnzahpiavihkutstgrcceaixxlqifokutxjobkzanxjkvmawhluizzdpemzmhcyusfdjrgufahbhktxbqsjjpzetnkkcgfxeuugdaqtspxzseftxubcxabgtdsvhfcjtwyvfqmnguxfvpcpkkvjkkouoxiidnidxqydglkduvlgyiastpnutgxoxwwyplfawjckmqljautjkcryyjjkhwwbtbqbllh\"\n      ]\n    ],\n    \"output\": 268\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"okacmrdcnyouyxvnjhvfpmyaphzmtidconusylpylhlvrmbwyyctlatscudfxdyquchmsvzvbkolwpodhxqewbjaxsqeyydjqohubzqowgsfmsbbtbpfhosoumtxygmrajeyamibttxucqvuibcsatpijmxbxaiinoubhqxcvqkhlyfzifwafapcvngscojjttuvnxwgfpxuttxycovvfdlwipjkjsjxsidvbkjixuhuozcmhwgcwousjsotxbokcttuhhvvrtaggyhggfmdmmvqhniframpajevrxldzjnmuryhpuysontpbopywwypobptnosyuphyrumnjzdlxrvejapmarfinhqvmmdmfgghyggatrvvhhuttckobxtosjsuowcgwhmczouhuxijkbvdisxjsjkjpiwldfvvocyxttuxpfgwxnvuttjjocsgnvcpafawfizfylhkqvcxqhbuoniiaxbxmjiptascbiuvqcuxttbimayejarmgyxtmuosohfpbtbbsmfsgwoqzbuhoqjdyyeqsxajbweqxhdopwlokbvzvsmhcuqydxfducstaltcyywbmrvlhlyplysunocditmzhpaympfvhjnvxyuoyncdrmcako\"\n      ]\n    ],\n    \"output\": 1003\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"dtfxhfacnyrnutpyovumrakngrzakxokrggcxrsgoykjbprjnlvqatdkdowxfwvfobgehsrwlufowlsawrdqjicigjyqajvfoyzmormcgazooyjknvxysqspjuqeqkbbdarduajaaquzltoweohegrbjuksxtjxocwyjjkzlzimsjzpsmlraxxwfmrykjbjqmqlnuxnknfmnsnqwjbnpjlvivhegegbkaabylbsdpiaowqjrdxudrarmxgepahyinjmktehafqewsbozdbrdrpmbkawxgmpgwjvuimykbgzemkpbcfmxbmgyqpvopcylaqscjhehsjjduprqnwcixfochyhecdhgwjdtxlakvzhqxidkqajicxwrzfnwfwnnooitkymwxvzaaobhwcgqatzxjlpxqlsvyzvqikfjwanwvonnxednhvyzvjvqcvgcwfnkrbuhoobfvkdjtiqffruifadavtzxezehb\"\n      ]\n    ],\n    \"output\": 521\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"tibkneqobdgcgnodtiezmlrnflkgagjybbqmvnlzbnowkccahulnlrnseuertudqpgveosnwzgbwxuxizxoxkhrfnlhluqubabcoxhheamwmkqgbhzrstfjerqqbtcjgrsgcltbpnhsdwntsidrpklbbfbcuuesjhqsbrfzbeirklswireqvdriodznyvpoxqhdfjguxvbcfocwjgospsunmtflkncaugkirkhshlsaauqkegdyozjjdgsuobjoxfjqjafhqiuwsllswuiqhfajqjfxojbousgdjjzoydgekquaaslhshkrikguacnklftmnuspsogjwcofcbvxugjfdhqxopvynzdoirdvqeriwslkriebzfrbsqhjseuucbfbblkprdistnwdshnpbtlcgsrgjctbqqrejftsrzhbgqkmwmaehhxocbabuqulhlnfrhkxoxzixuxwbgzwnsoevgpqdutreuesnrlnluhacckwonbzlnvmqbbyjgagklfnrlmzeitdongcgdboqenkbit\"\n      ]\n    ],\n    \"output\": 851\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"cjustzgynbgnpzavbuqlboiwfycpshulhhtioxlpofmcfaoondsoydthddsytahkdlmtmjrladhbsxv\"\n      ]\n    ],\n    \"output\": 83\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"bokyverxiqbkpyltuylpjpkiaghxvrkjolpowxqwssajchrbunbvoiztaqstfmrzfjryesrxaukqqswiszsguundoohjwfmxoovchttrrjxsgdlkuzxfocikuxpquybbyuqpxukicofxzukldgsxjrrtthcvooxmfwjhoodnuugszsiwsqqkuaxrseyrjfzrmftsqatziovbnubrhcjasswqxwoplojkrvxhgaikpjplyutlypkbqixrevykob\"\n      ]\n    ],\n    \"output\": 399\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"layjfwnbwsxignnvfhmvhmdgpogffssokjrfgnsmcgztqqkvtidnzqddldvkotdvdirktkmurofjseqshyzznvjnlcggnufkogvhsczizmaavsbjubsrdjktcjtrvdeelyjqefozwlhvzsoulejojxefioygyywlclytewapuazxhquvemmxqlkongungbdcnadwfldctfvrbtwdgjmzlb\"\n      ]\n    ],\n    \"output\": 232\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"fzprrtgyknmhgzizdirjkekytkvznjcevmoomvecjnzvktykekjridzizghmnkygtrrpzf\"\n      ]\n    ],\n    \"output\": 111\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"oupojebtuioqzkzuooqrevbziuqijokdieuwnjdimeqzrdkhhtoqrtnijyvoyumwksgecnhnmchybuzxzyahgvyekuemognswarscizjmikfmplokusfxcqwgnvzzkibrunjuqprfbdjiffcfooihjkvsqldfwcrluzwhmtkwznhuzqcwxtqjvxrcwelvqwpbbsvwreltwwrebsyhyteuglkbbmqjjcirvfacxafvtstunisafyvixrrezsqmpnkxwzeauxlnvlufzmbnhplilcnq\"\n      ]\n    ],\n    \"output\": 298\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ndtxggluttsubxipzicahqkgvqpuwjaxattrgnbzbnbfzynwmutxgpaiichnojdzovsbscybawtspynfqpvsgixmpeteqromlscwkzxeruupfcqdmnielzcgwtsbijvjulmbszjkhiaojzreqlfrlxpfftafanpyaugqqbqqyipmnpijqsorqqwqaytqazgnpsjoyfhlosbqojgbfissipfxvfrgggdcbyrdjlwyidqwfwfptcyjbcajfikwpotwfyxcygpgumtntukbgnidkxaszxggshrktpuduwibltwjrapnltkgubeerhlatayyvxriirxvyyatalhreebugktlnparjwtlbiwuduptkrhsggxzsaxkdingbkutntmugpgycxyfwtopwkifjacbjyctpfwfwqdiywljdrybcdgggrfvxfpissifbgjoqbsolhfyojspngzaqtyaqwqqrosqjipnmpiyqqbqqguaypnafatffpxlrflqerzjoaihkjzsbmlujvjibstwgczleinmdqcfpuurexzkwcslmorqetepmxigsvpqfnypstwabycsbsvozdjonhciiapgxtumwnyzfbnbzbngrttaxajwupqvgkqhacizpixbusttulggxtdn\"\n      ]\n    ],\n    \"output\": 1040\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"gtkbssdayfamskvvmwegwdxhralxmpkvsdbfkoqqwzvtqdodekkfjkhrsbtyjwptyqhkdbuvolkfedhigpcqgepzmlunweqryuxobvholgrobjzkvoecbmhirpmlpsmpdlxmssjeopvwpfmpeosggkrc\"\n      ]\n    ],\n    \"output\": 159\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"cwqdcggkqyjoprdnkreqikxzotekfupovsdfxembbpbzgjsmjimmhhrxhpkdvnnezifjwdzwnuvmmwmuozkpmxbxpeeuwqucbgtgfguuybtkmtmjaimmjslhvujgznbyazdsnqqzirbjlfyojcyxoenmdujuonlhpsstmrjoabqbyiabnskbtzulvsplnxoufefhfjeafluvsxohmzsglfbgldqvtrthdnrhcercsfabtelvrxdmnadusqcoccvelyvnhoazfjgfhqvtqjytuwuiglsslgiuwutyjqtvqhfgjfzaohnvylevccocqsudanmdxrvletbafscrechrndhtrtvqdlgbflgszmhoxsvulfaejfhfefuoxnlpsvluztbksnbaiybqbaojrmtssphlnoujudmneoxycjoyfljbrizqqnsdzaybnzgjuvhlsjmmiajmtmktbyuugfgtgbcuqwueepxbxmpkzoumwmmvunwzdwjfizennvdkphxrhhmmijmsjgzbpbbmexfdsvopufketozxkiqerkndrpojyqkggcdqwc\"\n      ]\n    ],\n    \"output\": 899\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ofbjeyjqfycfrovdxzqxfrfinotdgmwwvslpqnlohjjmmzqtnbgycfoeaiolicprbfgohhaifyfongmakouqhqqnpihlrusmfmtvnvqvlbrtjxexcnbveaaioyoffiqlroolwrogztvzuvzshhzxnpipltxegkoppdtxzvgpihdenfkskwecltilaabu\"\n      ]\n    ],\n    \"output\": 209\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"pvtxgshoydspytronwngflsyeodngcahkckllthczhxeqtlgildvaewabthmzlydyqdishpbmwampcesevcovrxayaawiaekjmchgaqxswzifwsfhqhyqqfxtdlrqdmazisbxebpltgyqvvuxvhuhxtgvfxybhdyuzhnwvpdlsuleatyqsyekftomebglfolshsblggznpijikacdiyxaxmmswsguzjqhbnijstafehnkaeopbrdipqwtmxaymxgcmkwstapwpuhnwuyadyxllxydayuwnhupwpatswkmcgxmyaxmtwqpidrbpoeaknhefatsjinbhqjzugswsmmxaxyidcakijipnzgglbshsloflgbemotfkeysqytaelusldpvwnhzuydhbyxfvgtxhuhvxuvvqygtlpbexbsizamdqrldtxfqqyhqhfswfizwsxqaghcmjkeaiwaayaxrvocvesecpmawmbphsidqydylzmhtbaweavdligltqexhzchtllkckhacgndoeyslfgnwnortypsdyohsgxtvp\"\n      ]\n    ],\n    \"output\": 867\n  },\n  {\n    \"input\": [[\"s\", \"kurxahftxokzwdvgtypqdcpcrfe\"]],\n    \"output\": 28\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"snmntxeloajmzjdptmtaoebrjiqyynufozdtmdqfvsmznljfspvintwrwykhbvswkectqckduflggstslcuxqbzriyjqcnhqcfkcxddrcpufeeirpkkgpdkdujwyxqxezlvcehedhuxgglangkmguvrhxhuowxvshmynsvesmfynxxvylyswengyipxcwbksnauepvhgimgfpgnzlpawrdujxyliqmwlugfnlayktssaxmgsbhcahpoguvbxevnbihyknedpyfqjvjlqxrubrhmfdlzsoowkwbmbhhxbrtuqceqdkmmylydamudloabwzmbbmzwbaoldumadylymmkdqecqutrbxhhbmbwkwooszldfmhrburxqljvjqfypdenkyhibnvexbvugophachbsgmxasstkyalnfgulwmqilyxjudrwaplzngpfgmighvpeuanskbwcxpiygnewsylyvxxnyfmsevsnymhsvxwouhxhrvugmkgnalggxuhdehecvlzexqxywjudkdpgkkprieefupcrddxckfcqhncqjyirzbqxuclstsgglfudkcqtcekwsvbhkywrwtnivpsfjlnzmsvfqdmtdzofunyyqijrbeoatmtpdjzmjaolextnmns\"\n      ]\n    ],\n    \"output\": 1017\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"occtjzqldnbxuyfqzyyclqjboimomkocwiwiwyyrpmgjrkuymxuyiiprwoqhwrtqeahvrrdrqxnnvupyhqkengmfpycwvjuvwrjqxjdpjrfkcfrxvthwdgkmbwcdxeeqaadestqmngiznyjighzhgvdtyjzmcuslxpfxtppscwtodgnlscjpncygoucntrcgowuaaissvxwfvhwsebzlrblqxrnmeyzlljoqvgqhotcseyckhcqtszjohhdamherihxnxmjusnrvmuuabbyrqjtsvzkgsvmarmhglwrxvshncqtnoxjdoaofczeysyayrsfgiiofrgythhncwzatdwtrvudmhtulhefrsxkiktlhvlnylzfndkpincyngbsupvlwbvtptgjseygowmronpyboeiqarqbrsqloaovontxaooxyczalkojroycaryxawuqweochdmeojvg\"\n      ]\n    ],\n    \"output\": 498\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ortuygdwwcohwjnufkhhsefkjbtwfckzhfxnmtzqsayacnhlvlpwwplvlhncayasqztmnxfhzkcfwtbjkfeshhkfunjwhocwwdgyutro\"\n      ]\n    ],\n    \"output\": 164\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"spkpmchngkpvaelbuamqmpxpioeqrduwaykleizlxtcspvvmbkipxyaosjbuqcjpcuqvdlswbjxffkijvxkjhltlkkdyrowgtiorquqbeyfnhifzoxbxgk\"\n      ]\n    ],\n    \"output\": 127\n  },\n  {\n    \"input\": [[\"s\", \"gmivzzvimg\"]],\n    \"output\": 15\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"cxbhftzddieakyxwyusrtenntffrdzpzaifkrfulwxmrjfklagrjleyvbcnddelgrsbdweqtsljfznkbjbcsupwsruxevkawdqagpiyzjwvbsjqapqkafxlvsixqsqbnwrkjyubtpvozjsqyuhxcgtwnwtxoiktivbxzyjkgakoyoqsihnnwiufjafegfdrcwofsvpfuljhzkmek\"\n      ]\n    ],\n    \"output\": 219\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"wiyxvvaaclzakijwfmrhyqvhqbrpimlwllxunvzmpzvkjrczzhgguvgupqqmmtnzzazurxlctlxgsnlhnwyujrzlugbowbefepqxlfogikxasbctbefkicwjbxbcvfcxdpoxkpmpldgcmizkgbmaudlljndyzczyivapsfchrbftidktrylbvphmdynvmvnffousmgsxnfavdetprnphmrqncudbsnbyidbdfeyyaeiaduhfnqdhpbmjyvpwbrcygnygzcwniqtlzbcobzxfmajihadvxesyklcvougkugnptkgxfryanpvobctuqorvmgjmxnorxyzqlnxiongxsirkehecmrbvenwddlzdhysrledvqlimqpvodfwbcrzajjktftyytftkjjazrcbwfdovpqmilqvdelrsyhdzlddwnevbrmcehekrisxgnoixnlqzyxronxmjgmvroqutcbovpnayrfxgktpngukguovclkysexvdahijamfxzbocbzltqinwczgyngycrbwpvyjmbphdqnfhudaieayyefdbdiybnsbducnqrmhpnrptedvafnxsgmsuoffnvmvnydmhpvblyrtkditfbrhcfspaviyzczydnjllduambgkzimcgdlpmpkxopdxcfvcbxbjwcikfebtcbsaxkigoflxqpefebwobgulzrjuywnhlnsgxltclxruzazzntmmqqpugvugghzzcrjkvzpmzvnuxllwlmiprbqhvqyhrmfwjikazlcaavvxyiw\"\n      ]\n    ],\n    \"output\": 1223\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"nvihaifhzosokkeneeydtunveceugygrkbfrpmosxcjxgshbnerwawxtkfccrqunkahcmsbbwmthslupgcpyhnzoycedayhqofdjvrbpeokpzktrfwmaxcvsuhkpeikdysvfhnshvchcnqphbwiyeiajobgjcuyxeaqpasqfmetelmnnbtjmymdymjlapdnfsvifwaeirscrenrmyqsbmmnjrr\"\n      ]\n    ],\n    \"output\": 233\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"digwwnyqxratolxpukhrumdofykctfrjvaulpqbuidqoaxcuxrqqrxucxaoqdiubqpluavjrftckyfodmurhkupxlotarxqynwwgid\"\n      ]\n    ],\n    \"output\": 155\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"qdutozcrjxrubrsfimbtoxjrqikbjgecpvjfkdzicunfimddoccbkosvkrfjxaggdfuuwhfrxgfehjqixjkfkkdmbdoicjuogqcjoitqqlmvkbppphyhsumuyegwjmdubkwzzqgnbnqnvupbvapevyowaejdqmtmwxbraxafqsozdlhiodjqxboywcoixcirqbhpnqklvtgrelcncynxyzlwjhqpngytegpshzcopsqgjqtgjhjrawktxpefkywjrkouyoawoluuufcjpavphaomaqnhnyetphxxtnjlyizkfissgvkneltgnagapodahxywcctavnktogiielgmpkazoldtvmrwowmutanwxvxnxslj\"\n      ]\n    ],\n    \"output\": 399\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"ghpmcafepglikiruvvqrcjttmcotcskcxknlgdtvudbwzuidvovxqbwclnlibdqysiedwnnabimjdhxhpphxhdjmibannwdeisyqdbilnlcwbqxvovdiuzwbduvtdglnkxcksctocmttjcrqvvurikilgpefacmphg\"\n      ]\n    ],\n    \"output\": 257\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"cxafstfpxylfhighqebbvpsqnqspknlqlnfckmjozxhouzfojthxzfddvwbwdtqlcwlijrzgsrguoeosxmtcuzpkfqhmivejujbngolhhrmtpsynwvijhabjhohyuptxeurbduptbhdyyzptpabhdyfpmdnwfhcmbdxlqgyxkxkbqnjcyndmqujnwjelyesldjtdlclvexqeqyvfoudxeczoqigbpyhelopxztywiuqufdkzhscmndoee\"\n      ]\n    ],\n    \"output\": 269\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"lmkhstqnizfveujblzyuxgtkbvvudoqudybsflgkscdtyzbgsrcsdwynytggruufoctqtfpnfsywzkdpwshqqqjzjusuvchehkibeiptmoxnlmbpwevferkfxmtyajbsoqlbbubynavyppeuniiplsjulphkehecttmuhwsxqsznogyntdbwnsqwtzkhqapfklwqdeuyfmsuxrfhbbvncrrilsgtlnjkjafntpzrbgpfbrvltyhcstfdyatzacppxggwhqvcacgwyzsvkwjreaudzwmnnbgddrkoarsdffffdsraokrddgbnnmwzduaerjwkvszywgcacvqhwggxppcaztaydftschytlvrbfpgbrzptnfajkjnltgslirrcnvbbhfrxusmfyuedqwlkfpaqhkztwqsnwbdtnygonzsqxswhumttcehekhplujslpiinueppyvanybubblqosbjaytmxfkrefvewpbmlnxomtpiebikhehcvusujzjqqqhswpdkzwysfnpftqtcofuurggtynywdscrsgbzytdcskglfsbyduqoduvvbktgxuyzlbjuevfzinqtshkml\"\n      ]\n    ],\n    \"output\": 948\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"siyhjjnnodcgxjxjpujzxhkjuyqyjvwpfeyddcwtwymkkugqfhtrlbrpsatsibuiiavvvcfahsvhcawidyskizgzkeuejsovhgxbyrgofoafrcrdsscacvubeuhlrwdyhdctoyszsihnsqzddrmabnntgidigcatbmacimkyvicrziujxzfjvwykdgfbnvzvubwiqfhzdmmywqkee\"\n      ]\n    ],\n    \"output\": 235\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"lnrpeiewipcentahaisjyytivjnlwbcmukxgposffvambjwdbcqsfuyuejnbthvyhcuajkiwycapnascoyaimzjhkggzhktbwezmpaspvpojdewhhitdrlkhtdhiskkqyzyhrgixxigrhyzyqkksihdthklrdtihhwedjopvpsapmzewbtkhzggkhjzmiayocsanpacywikjauchyvhtbnjeuyufsqcbdwjbmavffsopgxkumcbwlnjvityyjsiahatnecpiweieprnl\"\n      ]\n    ],\n    \"output\": 428\n  },\n  {\n    \"input\": [[\"s\", \"aezppkblevbpxehwri\"]],\n    \"output\": 19\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"rwvnreqebksqbzudlvuiezkpiugxlqyhyygjlkxlgfmahwzbuheponkzajmwddczkjcapzxoqrobkghenguoafsxsuqabsctjzwqmbawmnvffuulzbiraqyyqaribzluuffvnmwabmqwzjtcsbaqusxsfaougnehgkborqoxzpacjkzcddwmjazknopehubzwhamfglxkljgyyhyqlxguipkzeiuvlduzbqskbeqernvwr\"\n      ]\n    ],\n    \"output\": 371\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"jeeynoelhkjfjacpwhsuegofwnvmecwxrjaiebwsugothbbeusgbwhfugiktpbgjiyixekqzcrqlhmtorxlabewfaauocyaraakquacvtdxntcwvjgjzyhujvoecfjknhonyrnwabkzlzvjlvepjdiwiryvdhdnerabqudscaztapn\"\n      ]\n    ],\n    \"output\": 185\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"khcrddmjohmtgxvkcwonasufdjnkkwufjgbsckksolwqlayhpnpmhlptqmmajwuoemyhlmpaevgryenwmtuxkkfnncovgnizsqjiwvvxfywcrymudyfpwkzwbmymxqosvjlbtvlsdfxnbhqdkjffolfuddkzvgmlbsvgnwuifsalqwacqsemlcbusaykggtfpssaunumqfnzlatfordgtnkuavnmzxocrcwjswvovjzftxhhkhyfmrtdnmtkfhjfvmdphbehbnwvsrcxrkemhnmznobgmnnnqipijvleidsfanqoyglsmiojaqspkjwmyrbliuspebpbtjepiugluiqbvslgnbezotrqhpsvparhyixgujeaivmgfkohahlqxcwmkhxtgdokkexofprbsualfojxvvxjoflausbrpfoxekkodgtxhkmwcxqlhahokfgmviaejugxiyhrapvsphqrtozebnglsvbqiulguipejtbpbepsuilbrymwjkpsqajoimslgyoqnafsdielvjipiqnnnmgbonzmnhmekrxcrsvwnbhebhpdmvfjhfktmndtrmfyhkhhxtfzjvovwsjwcrcoxzmnvaukntgdroftalznfqmunuasspftggkyasubclmesqcawqlasfiuwngvsblmgvzkddufloffjkdqhbnxfdslvtbljvsoqxmymbwzkwpfydumyrcwyfxvvwijqszingvocnnfkkxutmwneyrgveapmlhymeouwjammqtplhmpnphyalqwloskkcsbgjfuwkknjdfusanowckvxgtmhojmddrchk\"\n      ]\n    ],\n    \"output\": 1289\n  },\n  {\n    \"input\": [\n      [\n        \"s\",\n        \"dwjkxgbdwagvpzyzukdhpvrvtyfrwabuyoznvsklaxfuhcdidqmigzfskeitdmellrmsboxgkbxpauallommvclpgtwstmiwzyyjwjazddqeqrekhsqqqtuldtowhfywblzvljrudsbckadxpwfqurpdmeuctfsyvlpojeprzgavqwjtwrxdzpfxrrepezrtljdkiqudwdovldcctvujvslpdymiqtidchzhyyczxghkhqvuwnxavcotaujdmlmgbirqegzoxlailhzsrhrwznekwvcilgyxibtclpfiwilzdundsltynxuoakysxgdyrzvksqamtxfqqnaiugpoqajdlhbtqratzkisaktafrrtpzlhvnoansqwnbwlyryuleudbwfv\"\n      ]\n    ],\n    \"output\": 419\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1723161600,
    "difficulty": "medium",
    "duration": 40,
    "excerpt": "Implement a function to count all palindromic substrings in a string",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/string-palindromic-substrings",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "string-palindromic-substrings",
    "subtitle": null,
    "title": "Palindromic Substrings",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {string} str\n * @return {number}\n */\nexport default function countPalindromicSubstrings(str) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function countPalindromicSubstrings(str: string): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var m=Object.create;var l=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var y=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),v=(i,e)=>{for(var r in e)l(i,r,{get:e[r],enumerable:!0})},c=(i,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of b(e))!x.call(i,t)&&t!==r&&l(i,t,{get:()=>e[t],enumerable:!(a=f(e,t))||a.enumerable});return i};var T=(i,e,r)=>(r=i!=null?m(w(i)):{},c(e||!i||!i.__esModule?l(r,\"default\",{value:i,enumerable:!0}):r,i)),I=i=>c(l({},\"__esModule\",{value:!0}),i);var d=y((B,s)=>{s.exports=_jsx_runtime});var A={};v(A,{default:()=>P});var n=T(d());var o=MDXCodeBlock;var h=`export default function countPalindromicSubstrings(str: string): number {\n  let ans = 0;\n\n  // Iterate through each character in the string\n  for (let i = 0; i < str.length; i++) {\n    // Count odd-length palindromes with a single character center\n    ans += countPalindromesAroundCenter(str, i, i);\n\n    // Count even-length palindromes with consecutive characters as the center\n    ans += countPalindromesAroundCenter(str, i, i + 1);\n  }\n\n  return ans;\n}\n\nfunction countPalindromesAroundCenter(\n  str: string,\n  low: number,\n  high: number,\n): number {\n  let ans = 0;\n\n  // Expand around the center as long as the characters at the edges match\n  while (low >= 0 && high < str.length) {\n    if (str[low] !== str[high]) {\n      break; // Stop if characters don't match\n    }\n\n    // Expand the window outward\n    low--;\n    high++;\n\n    // Increment the palindrome count\n    ans++;\n  }\n\n  return ans;\n}\n`;var u=`export default function countPalindromicSubstrings(str: string): number {\n  const n = str.length;\n  let ans = 0;\n\n  // If the string is empty, return 0\n  if (n === 0) {\n    return 0;\n  }\n\n  // Initialize a 2D array (dp) to store whether substrings are palindromic\n  const dp: boolean[][] = Array.from({ length: n }, () => Array(n).fill(false));\n\n  // Base case: single letter substrings are always palindromes\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = true;\n    ans++; // Count single letter palindromes\n  }\n\n  // Base case: check double letter substrings\n  for (let i = 0; i < n - 1; i++) {\n    dp[i][i + 1] = str[i] === str[i + 1];\n    ans += dp[i][i + 1] ? 1 : 0; // Count double letter palindromes\n  }\n\n  // Check all other substrings of length 3 to n\n  for (let len = 3; len <= n; len++) {\n    for (let i = 0; i <= n - len; i++) {\n      const j = i + len - 1; // Ending index of the substring\n      dp[i][j] = dp[i + 1][j - 1] && str[i] === str[j];\n      ans += dp[i][j] ? 1 : 0; // Count palindromes of length len\n    }\n  }\n\n  return ans;\n}\n`;var g=`function isPalindrome(str: string, low: number, high: number): boolean {\n  // Continue checking as long as the left index is less than the right index\n  while (low < high) {\n    // If characters at low and high do not match, it's not a palindrome\n    if (str[low] !== str[high]) {\n      return false;\n    }\n    // Move towards the center\n    low++;\n    high--;\n  }\n  // If all characters matched, it's a palindrome\n  return true;\n}\n\nexport default function countPalindromicSubstrings(str: string): number {\n  let ans = 0;\n\n  // Iterate over all possible starting points of substrings\n  for (let low = 0; low < str.length; low++) {\n    // Iterate over all possible ending points of substrings starting at low\n    for (let high = low; high < str.length; high++) {\n      // Increment ans if the substring s[low...high] is a palindrome\n      ans += isPalindrome(str, low, high) ? 1 : 0;\n    }\n  }\n\n  return ans;\n}\n`;function p(i){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ol:\"ol\",li:\"li\",code:\"code\",ul:\"ul\",strong:\"strong\",h4:\"h4\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"1. Using BruteForce\"}),`\n`,(0,n.jsx)(e.p,{children:\"A brute force approach checks every possible substring to determine if it is a palindrome. This is achieved by iterating through all possible starting and ending indices of substrings and using a helper function to validate if the substring is palindromic. A substring is a palindrome if it reads the same forward and backward.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Define a helper function \",(0,n.jsx)(e.code,{children:\"isPalindrome\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Take the string \",(0,n.jsx)(e.code,{children:\"str\"}),\", a starting index \",(0,n.jsx)(e.code,{children:\"low\"}),\", and an ending index \",(0,n.jsx)(e.code,{children:\"high\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use a \",(0,n.jsx)(e.code,{children:\"while\"}),\" loop to compare characters at \",(0,n.jsx)(e.code,{children:\"low\"}),\" and \",(0,n.jsx)(e.code,{children:\"high\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the characters do not match, return \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increment \",(0,n.jsx)(e.code,{children:\"low\"}),\" and decrement \",(0,n.jsx)(e.code,{children:\"high\"}),\" to move toward the center.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"true\"}),\" if all characters match.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize a variable \",(0,n.jsx)(e.code,{children:\"ans\"}),\" to store the count of palindromic substrings.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use a nested loop:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The outer loop iterates over all possible starting indices \",(0,n.jsx)(e.code,{children:\"low\"}),\" of substrings.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The inner loop iterates over all possible ending indices \",(0,n.jsx)(e.code,{children:\"high\"}),\" for the current starting index.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"For each pair of indices, check if the substring is a palindrome using the \",(0,n.jsx)(e.code,{children:\"isPalindrome\"}),\" function.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increment \",(0,n.jsx)(e.code,{children:\"ans\"}),\" by \",(0,n.jsx)(e.code,{children:\"1\"}),\" if the substring is a palindrome.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return the value of \",(0,n.jsx)(e.code,{children:\"ans\"}),\" as the total count of palindromic substrings.\"]}),`\n`]}),`\n`,(0,n.jsx)(o,{children:g}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Time complexity: O(n\",(0,n.jsx)(\"sup\",{children:\"3\"}),\")\"]}),\". There are O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\") substrings, and checking each substring for palindrome takes O(n) time.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(1)\"}),\". The algorithm uses constant space aside from the input string and loop variables.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"2. Using Dynamic Programming\"}),`\n`,(0,n.jsx)(e.p,{children:\"The dynamic programming approach improves the naive brute force method by avoiding repeated checks of overlapping substrings. The key intuition is that a substring is a palindrome if its two outermost characters are the same and the inner substring (excluding the outer characters) is also a palindrome. This recursive property is efficiently captured using a dynamic programming table.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"dp\"}),\" table stores whether a substring starting at index \",(0,n.jsx)(e.code,{children:\"i\"}),\" and ending at index \",(0,n.jsx)(e.code,{children:\"j\"}),\" is a palindrome. This eliminates redundant recalculations by building solutions incrementally, starting with smaller substrings and using their results to solve for larger substrings.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Handle the base case for an empty string by returning \",(0,n.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize a 2D array \",(0,n.jsx)(e.code,{children:\"dp\"}),\" of size \",(0,n.jsx)(e.code,{children:\"n x n\"}),\" with all values set to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through the string for substrings of length \",(0,n.jsx)(e.code,{children:\"1\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Set \",(0,n.jsx)(e.code,{children:\"dp[i][i]\"}),\" to \",(0,n.jsx)(e.code,{children:\"true\"}),\" for all indices \",(0,n.jsx)(e.code,{children:\"i\"}),\" since single-character substrings are always palindromes.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increment the count \",(0,n.jsx)(e.code,{children:\"ans\"}),\" for each single-character palindrome.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through the string for substrings of length \",(0,n.jsx)(e.code,{children:\"2\"}),\":\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Set \",(0,n.jsx)(e.code,{children:\"dp[i][i + 1]\"}),\" to \",(0,n.jsx)(e.code,{children:\"true\"}),\" if the two characters at indices \",(0,n.jsx)(e.code,{children:\"i\"}),\" and \",(0,n.jsx)(e.code,{children:\"i + 1\"}),\" are equal.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increment the count \",(0,n.jsx)(e.code,{children:\"ans\"}),\" for each double-character palindrome.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use nested loops to evaluate substrings of length \",(0,n.jsx)(e.code,{children:\"3\"}),\" and greater:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"For each substring starting at index \",(0,n.jsx)(e.code,{children:\"i\"}),\" and ending at index \",(0,n.jsx)(e.code,{children:\"j\"}),\", set \",(0,n.jsx)(e.code,{children:\"dp[i][j]\"}),\" to \",(0,n.jsx)(e.code,{children:\"true\"}),\" if:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The characters at \",(0,n.jsx)(e.code,{children:\"i\"}),\" and \",(0,n.jsx)(e.code,{children:\"j\"}),\" are the same.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The substring between \",(0,n.jsx)(e.code,{children:\"i\"}),\" and \",(0,n.jsx)(e.code,{children:\"j\"}),\" (\",(0,n.jsx)(e.code,{children:\"dp[i + 1][j - 1]\"}),\") is also a palindrome.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increment the count \",(0,n.jsx)(e.code,{children:\"ans\"}),\" for each palindrome found.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"ans\"}),\" as the total count of palindromic substrings.\"]}),`\n`]}),`\n`,(0,n.jsx)(o,{children:u}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Time complexity: O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\")\"]}),\". The outer loop iterates through substring lengths, and the inner loop iterates through all starting indices for substrings.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Space complexity: O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\")\"]}),\". The \",(0,n.jsx)(e.code,{children:\"dp\"}),\" table requires O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\") space to store results for all substrings.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"3. Using Centers of Palindromes\"}),`\n`,(0,n.jsx)(e.p,{children:\"The expanding from center approach optimizes the process of finding all palindromic substrings by focusing on potential centers of palindromes. The key intuition is that every palindrome can be expanded outward from its center. A center can either be a single character (for odd-length palindromes) or a pair of consecutive characters (for even-length palindromes). By iteratively expanding from each center, this approach avoids redundant calculations and does not require the use of additional space for a dynamic programming table.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This method improves upon the previous dynamic programming approach by reducing space usage. Instead of precomputing palindromic substrings for all possible lengths, it directly counts palindromes during the expansion process.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize a variable \",(0,n.jsx)(e.code,{children:\"ans\"}),\" to store the total count of palindromic substrings.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through each character in the string:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Treat the character at the current index as the center of an odd-length palindrome and call the helper function \",(0,n.jsx)(e.code,{children:\"countPalindromesAroundCenter\"}),\" with the same starting and ending index.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Treat the current character and the next character as the center of an even-length palindrome and call the helper function \",(0,n.jsx)(e.code,{children:\"countPalindromesAroundCenter\"}),\" with consecutive indices as the starting and ending points.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return \",(0,n.jsx)(e.code,{children:\"ans\"}),\" as the total count of palindromic substrings.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Helper function: \",(0,n.jsx)(e.code,{children:\"countPalindromesAroundCenter\"})]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Take the string \",(0,n.jsx)(e.code,{children:\"str\"}),\", a starting index \",(0,n.jsx)(e.code,{children:\"low\"}),\", and an ending index \",(0,n.jsx)(e.code,{children:\"high\"}),\" as input.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize a variable \",(0,n.jsx)(e.code,{children:\"ans\"}),\" to store the count of palindromes found during expansion.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use a \",(0,n.jsx)(e.code,{children:\"while\"}),\" loop to expand outward as long as:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The indices \",(0,n.jsx)(e.code,{children:\"low\"}),\" and \",(0,n.jsx)(e.code,{children:\"high\"}),\" are within the bounds of the string.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The characters at \",(0,n.jsx)(e.code,{children:\"low\"}),\" and \",(0,n.jsx)(e.code,{children:\"high\"}),\" match.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Increment \",(0,n.jsx)(e.code,{children:\"ans\"}),\" for each valid palindrome.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Decrement \",(0,n.jsx)(e.code,{children:\"low\"}),\" and increment \",(0,n.jsx)(e.code,{children:\"high\"}),\" to continue expanding.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Return the count \",(0,n.jsx)(e.code,{children:\"ans\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(o,{children:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Time complexity: O(n\",(0,n.jsx)(\"sup\",{children:\"2\"}),\")\"]}),\". For each character, the expansion can span the entire string in the worst case, leading to O(n) expansions for O(n) centers.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(1)\"}),\". The algorithm uses constant extra space for variables and does not require additional data structures.\"]}),`\n`]})]})}function O(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(p,i)})):p(i)}var P=O;return I(A);})();\n;return Component;",
  "workspace": {
    "main": "/src/string-palindromic-substrings.ts",
    "run": "/src/string-palindromic-substrings.run.test.ts",
    "submit": "/src/string-palindromic-substrings.submit.test.ts"
  }
}