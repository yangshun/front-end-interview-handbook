{
  "description": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),v=(e,n)=>{for(var i in n)o(e,i,{get:n[i],enumerable:!0})},a=(e,n,i,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of b(n))!x.call(e,r)&&r!==i&&o(e,r,{get:()=>n[r],enumerable:!(s=d(n,r))||s.enumerable});return e};var y=(e,n,i)=>(i=e!=null?h(f(e)):{},a(n||!e||!e.__esModule?o(i,\"default\",{value:e,enumerable:!0}):i,e)),j=e=>a(o({},\"__esModule\",{value:!0}),e);var m=g((w,u)=>{u.exports=_jsx_runtime});var D={};v(D,{default:()=>M,frontmatter:()=>C});var t=y(m());var l=MDXTestExamples;var c=[{input:[[\"num\",8]],output:1,explanation:\"The given number in binary (1000) has a total of one set bit\"},{input:[[\"num\",9]],output:2,explanation:\"The given number in binary (1001) has a total of two set bit\"},{input:[[\"num\",123]],output:6,explanation:\"The given number in binary (1111011) has a total of six set bit\"}];var C={title:\"Count Set Bits in a Binary Number\",excerpt:\"Implement a function to find set bits in binary representation of a given integer\"};function p(e){let n=Object.assign({p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[\"Given a positive integer \",(0,t.jsx)(n.code,{children:\"num\"}),\", determine the number of set bits (1s) present in the binary representation of the given number, commonly referred to as the Hamming weight.\"]}),`\n`,(0,t.jsx)(n.h3,{children:\"Input\"}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:\"num: number\"}),\": A positive integer\"]}),`\n`]}),`\n`,(0,t.jsx)(l,{testCases:c}),`\n`,(0,t.jsx)(n.h3,{children:\"Constraints\"}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsxs)(n.li,{children:[\"1 <= \",(0,t.jsx)(n.code,{children:\"num\"}),\" <= 2^31 - 1\"]}),`\n`]})]})}function T(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(p,e)})):p(e)}var M=T;return j(D);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/count-ones-in-binary\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/count-ones-in-binary.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/count-ones-in-binary.run.test.ts": "import fn from './count-ones-in-binary';\nimport runTestCases from './run.tests.json';\n\ndescribe('countOnesInBinary', () => {\n  runTestCases.forEach((example: any) => {\n    test(`${example.input[0][0]} = ${example.input[0][1]}`, () => {\n      expect(fn(example.input[0][1])).toStrictEqual(example.output);\n    });\n  });\n});\n",
    "/src/count-ones-in-binary.submit.test.ts": "import countOnesInBinary from './count-ones-in-binary';\nimport submitTestCases from './submit.tests.json';\n\ndescribe('countOnesInBinary', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`n = ${example.input[0][1]}`, () => {\n      expect(countOnesInBinary(example.input[0][1])).toStrictEqual(\n        example.output,\n      );\n    });\n  });\n});\n",
    "/src/count-ones-in-binary.ts": "export default function countOnesInBinary(num: number): number {\n  // Count the number of set bits using Brian Kernighan's algorithm\n  let count: number = 0;\n  while (num !== 0) {\n    count += num & 1; // Check the least significant bit whether it is a set bit and update the counting result\n    num >>>= 1; // Unsigned right shift by 1 bit\n  }\n  return count;\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [[\"num\", 8]],\n    \"output\": 1,\n    \"explanation\": \"The given number in binary (1000) has a total of one set bit\"\n  },\n  {\n    \"input\": [[\"num\", 9]],\n    \"output\": 2,\n    \"explanation\": \"The given number in binary (1001) has a total of two set bit\"\n  },\n  {\n    \"input\": [[\"num\", 123]],\n    \"output\": 6,\n    \"explanation\": \"The given number in binary (1111011) has a total of six set bit\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"num\", 10]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"num\", 2]],\n    \"output\": 1\n  },\n  {\n    \"input\": [[\"num\", 7]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"num\", 4]],\n    \"output\": 1\n  },\n  {\n    \"input\": [[\"num\", 10]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"num\", 5]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"num\", 10]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"num\", 10]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"num\", 7]],\n    \"output\": 3\n  },\n  {\n    \"input\": [[\"num\", 9]],\n    \"output\": 2\n  },\n  {\n    \"input\": [[\"num\", 89807355]],\n    \"output\": 17\n  },\n  {\n    \"input\": [[\"num\", 63916579]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 1003275]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 81460777]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 23592207]],\n    \"output\": 17\n  },\n  {\n    \"input\": [[\"num\", 40394595]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 96208418]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 44285010]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 81108551]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 48150108]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 88985995]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 12561831]],\n    \"output\": 17\n  },\n  {\n    \"input\": [[\"num\", 20278425]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 2988186]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 15087590]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 63759468]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 24369565]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 53592925]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 50415923]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 85728049]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 32637579]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 18542961]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 3114117]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 77048027]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 69631894]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 29387774]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 76554062]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 72374529]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"num\", 97034426]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 97814978]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 16433758]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 44762753]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 54599412]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 11025482]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 24596374]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 41544472]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 8109631]],\n    \"output\": 18\n  },\n  {\n    \"input\": [[\"num\", 41385647]],\n    \"output\": 19\n  },\n  {\n    \"input\": [[\"num\", 69431057]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 80679277]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 23857058]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 16318603]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 15524713]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 34992701]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 93449065]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 98629095]],\n    \"output\": 17\n  },\n  {\n    \"input\": [[\"num\", 95312957]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 72280995]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 46710957]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 57210904]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 55988491]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 97611493]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 43000900]],\n    \"output\": 7\n  },\n  {\n    \"input\": [[\"num\", 75173784]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 4400602]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 63500695]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 30123424]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 88918315]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 11244017]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 54124014]],\n    \"output\": 18\n  },\n  {\n    \"input\": [[\"num\", 58640526]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 26001927]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 82538737]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 28640466]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 54535008]],\n    \"output\": 8\n  },\n  {\n    \"input\": [[\"num\", 10878068]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 66641430]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 95008383]],\n    \"output\": 18\n  },\n  {\n    \"input\": [[\"num\", 44528311]],\n    \"output\": 16\n  },\n  {\n    \"input\": [[\"num\", 36538162]],\n    \"output\": 12\n  },\n  {\n    \"input\": [[\"num\", 28336553]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 33847637]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 742384]],\n    \"output\": 11\n  },\n  {\n    \"input\": [[\"num\", 20750834]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 58086172]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 95838385]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 36011237]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 97584705]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 38282853]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 52122773]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 71344782]],\n    \"output\": 9\n  },\n  {\n    \"input\": [[\"num\", 72183162]],\n    \"output\": 15\n  },\n  {\n    \"input\": [[\"num\", 81524199]],\n    \"output\": 19\n  },\n  {\n    \"input\": [[\"num\", 31301903]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 78314288]],\n    \"output\": 14\n  },\n  {\n    \"input\": [[\"num\", 78668946]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 82366582]],\n    \"output\": 13\n  },\n  {\n    \"input\": [[\"num\", 48696832]],\n    \"output\": 10\n  },\n  {\n    \"input\": [[\"num\", 44257440]],\n    \"output\": 9\n  },\n  {\n    \"input\": [[\"num\", 71697424]],\n    \"output\": 6\n  }\n]\n"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1718928000,
    "difficulty": "easy",
    "duration": 15,
    "excerpt": "Implement a function to find set bits in binary representation of a given integer",
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/count-ones-in-binary",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "count-ones-in-binary",
    "subtitle": null,
    "title": "Count Set Bits in a Binary Number",
    "topics": []
  },
  "skeleton": {
    "js": "/**\n * @param {number} num\n * @return {number}\n */\nexport default function countOnesInBinary(num) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function countOnesInBinary(num: number): number {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var x=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),j=(n,t)=>{for(var i in t)o(n,i,{get:t[i],enumerable:!0})},u=(n,t,i,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of f(t))!p.call(n,r)&&r!==i&&o(n,r,{get:()=>t[r],enumerable:!(s=g(t,r))||s.enumerable});return n};var _=(n,t,i)=>(i=n!=null?d(b(n)):{},u(t||!n||!n.__esModule?o(i,\"default\",{value:n,enumerable:!0}):i,n)),B=n=>u(o({},\"__esModule\",{value:!0}),n);var a=x((X,c)=>{c.exports=_jsx_runtime});var O={};j(O,{default:()=>M});var e=_(a());var m=MDXCodeBlock;var h=`export default function countOnesInBinary(num: number): number {\n  // Count the number of set bits using Brian Kernighan's algorithm\n  let count: number = 0;\n  while (num !== 0) {\n    count += num & 1; // Check the least significant bit whether it is a set bit and update the counting result\n    num >>>= 1; // Unsigned right shift by 1 bit\n  }\n  return count;\n}\n`;function l(n){let t=Object.assign({h2:\"h2\",p:\"p\"},n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h2,{children:\"1. Using Brian Kernighan's Algorithm\"}),`\n`,(0,e.jsx)(t.p,{children:\"Time complexity: O(1)\"}),`\n`,(0,e.jsx)(m,{children:h})]})}function y(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,Object.assign({},n,{children:(0,e.jsx)(l,n)})):l(n)}var M=y;return B(O);})();\n;return Component;",
  "workspace": {
    "main": "/src/count-ones-in-binary.ts",
    "run": "/src/count-ones-in-binary.run.test.ts",
    "submit": "/src/count-ones-in-binary.submit.test.ts"
  }
}