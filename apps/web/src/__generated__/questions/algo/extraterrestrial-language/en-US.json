{
  "description": "var Component=(()=>{var g=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var n in e)i(r,n,{get:e[n],enumerable:!0})},o=(r,e,n,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!b.call(r,a)&&a!==n&&i(r,a,{get:()=>e[a],enumerable:!(s=p(e,a))||s.enumerable});return r};var y=(r,e,n)=>(n=r!=null?g(f(r)):{},o(e||!r||!r.__esModule?i(n,\"default\",{value:r,enumerable:!0}):n,r)),_=r=>o(i({},\"__esModule\",{value:!0}),r);var l=x((k,c)=>{c.exports=_jsx_runtime});var E={};w(E,{default:()=>v,frontmatter:()=>C});var t=y(l());var d=MDXTestExamples;var h=[{input:[[\"words\",[\"cab\",\"abc\",\"bca\"]]],output:\"cab\",explanation:\"Comparing 'cab' and 'abc', the first differing characters are c and a, suggesting c comes before a. Comparing 'abc' and 'bca', the first differing characters are a and b, so a comes before b. Thus, the order of letters in the new alphabet is 'cab'.\"},{input:[[\"words\",[\"abc\",\"ab\"]]],output:\"\",explanation:\"The list is invalid because 'ab' should not come before 'abc'. A shorter word with the same prefix cannot appear after a longer word, so the sequence is impossible, and the result is an empty string.\"},{input:[[\"words\",[\"z\",\"x\",\"z\"]]],output:\"\",explanation:\"The sequence is invalid because 'z' appears both before and after 'x', which creates a contradiction in the order. This inconsistency makes it impossible to deduce a valid letter order, so the result is an empty string.\"}];var C={title:\"Extraterrestrial Language\",excerpt:\"Implement a function to verify and return an extraterrestrial language's alphabet order\"};function u(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h3:\"h3\",ul:\"ul\",li:\"li\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"An extraterrestrial language uses the English alphabet, but the letter order is unknown. A list of strings \",(0,t.jsx)(e.code,{children:\"words\"}),\" is provided, which represents words from the extraterrestrial language's dictionary, and it is claimed that these words are sorted according to the new language's \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Lexicographic_order\",children:\"lexicographical order\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If this claim is false, and the arrangement of strings in \",(0,t.jsx)(e.code,{children:\"words\"}),\" cannot match any possible letter order, return an empty string. Otherwise, return a string containing the unique letters of the extraterrestrial language sorted according to the language's rules. If multiple valid solutions exist, any of them are acceptable.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"words: string[]\"}),\": An array of strings where each string is a word in the extraterrestrial language\"]}),`\n`]}),`\n`,(0,t.jsx)(d,{testCases:h}),`\n`,(0,t.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"words.length\"}),\" <= 100\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"words[i].length\"}),\" <= 10\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"words[i]\"}),\" consists of only lowercase English letters\"]}),`\n`]})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(u,r)})):u(r)}var v=T;return _(E);})();\n;return Component;",
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/extraterrestrial-language\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/extraterrestrial-language.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n",
    "/src/extraterrestrial-language.run.test.ts": "import fn from './extraterrestrial-language';\nimport runTestCases from './run.tests.json';\n\ntype AdjacencyList = { [key: string]: string[] };\n\nfunction createGraph(words: string[]): AdjacencyList {\n  const adjList: AdjacencyList = {};\n\n  // Initialize the adjacency list with empty arrays for each unique character\n  for (const word of words) {\n    for (const c of word) {\n      if (!adjList[c]) {\n        adjList[c] = [];\n      }\n    }\n  }\n\n  // Step 1: Find all edges.\n  for (let i = 0; i < words.length - 1; i++) {\n    const word1 = words[i];\n    const word2 = words[i + 1];\n\n    // Find the first non-match and insert the corresponding relation.\n    for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n      if (word1[j] !== word2[j]) {\n        adjList[word1[j]].push(word2[j]);\n        break;\n      }\n    }\n  }\n\n  return adjList;\n}\n\nfunction isValidTopologicalSort(\n  adjList: AdjacencyList,\n  topologicalOrder: string,\n): boolean {\n  // Map to store the position of each character in the given topological order\n  const position: { [key: string]: number } = {};\n  for (let i = 0; i < topologicalOrder.length; i++) {\n    position[topologicalOrder[i]] = i;\n  }\n\n  // Iterate over each node and its adjacency list\n  for (const node in adjList) {\n    const neighbors = adjList[node];\n\n    // Ensure that for each neighbor, the current node appears before it in the topological order\n    for (const neighbor of neighbors) {\n      if (position[node] > position[neighbor]) {\n        return false; // The topological order is invalid\n      }\n    }\n  }\n\n  return true; // The topological order is valid\n}\n\nfunction arePermutations(str1: string, str2: string): boolean {\n  // If the lengths of the strings are different, they cannot be permutations\n  if (str1.length !== str2.length) {\n    return false;\n  }\n\n  // Create a frequency map for characters in str1\n  const charCount: { [key: string]: number } = {};\n\n  // Count characters in str1\n  for (const char of str1) {\n    charCount[char] = (charCount[char] || 0) + 1;\n  }\n\n  // Decrease the count based on characters in str2\n  for (const char of str2) {\n    if (!charCount[char]) {\n      // If a character in str2 is not found in charCount, they are not permutations\n      return false;\n    }\n    charCount[char] -= 1;\n  }\n\n  // If all counts are zero, the strings are permutations of each other\n  return Object.values(charCount).every((count) => count === 0);\n}\n\ndescribe('extraterrestrialLanguage', () => {\n  (runTestCases as any[]).forEach((example: any) => {\n    test(`${example.input[0][0]} = ${JSON.stringify(\n      example.input[0][1],\n      null,\n      2,\n    )}`, () => {\n      const output = fn(example.input[0][1]);\n      if (output === '') {\n        expect(output).toStrictEqual(example.output);\n      } else {\n        const graph = createGraph(example.input[0][1]);\n        const isValid = isValidTopologicalSort(graph, output);\n        expect(arePermutations(output, example.output)).toBe(true);\n        expect(isValid).toBe(true);\n      }\n    });\n  });\n});\n",
    "/src/extraterrestrial-language.submit.test.ts": "import extraterrestrialLanguage from './extraterrestrial-language';\nimport submitTestCases from './submit.tests.json';\n\ntype AdjacencyList = { [key: string]: string[] };\n\nfunction createGraph(words: string[]): AdjacencyList {\n  const adjList: AdjacencyList = {};\n\n  // Initialize the adjacency list with empty arrays for each unique character\n  for (const word of words) {\n    for (const c of word) {\n      if (!adjList[c]) {\n        adjList[c] = [];\n      }\n    }\n  }\n\n  // Step 1: Find all edges.\n  for (let i = 0; i < words.length - 1; i++) {\n    const word1 = words[i];\n    const word2 = words[i + 1];\n\n    // Find the first non-match and insert the corresponding relation.\n    for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n      if (word1[j] !== word2[j]) {\n        adjList[word1[j]].push(word2[j]);\n        break;\n      }\n    }\n  }\n\n  return adjList;\n}\n\nfunction isValidTopologicalSort(\n  adjList: AdjacencyList,\n  topologicalOrder: string,\n): boolean {\n  // Map to store the position of each character in the given topological order\n  const position: { [key: string]: number } = {};\n  for (let i = 0; i < topologicalOrder.length; i++) {\n    position[topologicalOrder[i]] = i;\n  }\n\n  // Iterate over each node and its adjacency list\n  for (const node in adjList) {\n    const neighbors = adjList[node];\n\n    // Ensure that for each neighbor, the current node appears before it in the topological order\n    for (const neighbor of neighbors) {\n      if (position[node] > position[neighbor]) {\n        return false; // The topological order is invalid\n      }\n    }\n  }\n\n  return true; // The topological order is valid\n}\n\nfunction arePermutations(str1: string, str2: string): boolean {\n  // If the lengths of the strings are different, they cannot be permutations\n  if (str1.length !== str2.length) {\n    return false;\n  }\n\n  // Create a frequency map for characters in str1\n  const charCount: { [key: string]: number } = {};\n\n  // Count characters in str1\n  for (const char of str1) {\n    charCount[char] = (charCount[char] || 0) + 1;\n  }\n\n  // Decrease the count based on characters in str2\n  for (const char of str2) {\n    if (!charCount[char]) {\n      // If a character in str2 is not found in charCount, they are not permutations\n      return false;\n    }\n    charCount[char] -= 1;\n  }\n\n  // If all counts are zero, the strings are permutations of each other\n  return Object.values(charCount).every((count) => count === 0);\n}\n\ndescribe('extraterrestrialLanguage', () => {\n  (submitTestCases as any[]).forEach((example: any) => {\n    test(`${example.input[0][0]} = ${JSON.stringify(\n      example.input[0][1],\n      null,\n      2,\n    )}`, () => {\n      const output = extraterrestrialLanguage(example.input[0][1]);\n      if (output === '') {\n        expect(output).toStrictEqual(example.output);\n      } else {\n        const graph = createGraph(example.input[0][1]);\n        const isValid = isValidTopologicalSort(graph, output);\n        expect(arePermutations(output, example.output)).toBe(true);\n        expect(isValid).toBe(true);\n      }\n    });\n  });\n});\n",
    "/src/extraterrestrial-language.ts": "export default function extraterrestrialLanguage(words: string[]): string {\n  // Step 0: Create data structures and find all unique letters.\n  const adjList: { [key: string]: string[] } = {};\n  const counts: { [key: string]: number } = {};\n\n  // Initialize the adjacency list and the counts map\n  for (const word of words) {\n    for (const c of word) {\n      if (!counts[c]) {\n        counts[c] = 0;\n        adjList[c] = [];\n      }\n    }\n  }\n\n  // Step 1: Find all edges.\n  for (let i = 0; i < words.length - 1; i++) {\n    const word1 = words[i];\n    const word2 = words[i + 1];\n\n    // Check that word2 is not a prefix of word1.\n    if (word1.length > word2.length && word1.startsWith(word2)) {\n      return '';\n    }\n\n    // Find the first non-match and insert the corresponding relation.\n    for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n      if (word1[j] !== word2[j]) {\n        adjList[word1[j]].push(word2[j]);\n        counts[word2[j]]++;\n        break;\n      }\n    }\n  }\n\n  // Step 2: Breadth-first search.\n  const sb: string[] = [];\n  const queue: string[] = [];\n\n  // Enqueue characters with no incoming edges (counts[c] === 0)\n  for (const c in counts) {\n    if (counts[c] === 0) {\n      queue.push(c);\n    }\n  }\n\n  // Perform BFS to build the result string\n  while (queue.length > 0) {\n    const c = queue.shift()!;\n    sb.push(c);\n    for (const next of adjList[c]) {\n      counts[next]--;\n      if (counts[next] === 0) {\n        queue.push(next);\n      }\n    }\n  }\n\n  // If the result length is less than the number of unique characters, return an empty string\n  if (sb.length < Object.keys(counts).length) {\n    return '';\n  }\n\n  return sb.join('');\n}\n",
    "/src/run.tests.json": "[\n  {\n    \"input\": [[\"words\", [\"cab\", \"abc\", \"bca\"]]],\n    \"output\": \"cab\",\n    \"explanation\": \"Comparing 'cab' and 'abc', the first differing characters are c and a, suggesting c comes before a. Comparing 'abc' and 'bca', the first differing characters are a and b, so a comes before b. Thus, the order of letters in the new alphabet is 'cab'.\"\n  },\n  {\n    \"input\": [[\"words\", [\"abc\", \"ab\"]]],\n    \"output\": \"\",\n    \"explanation\": \"The list is invalid because 'ab' should not come before 'abc'. A shorter word with the same prefix cannot appear after a longer word, so the sequence is impossible, and the result is an empty string.\"\n  },\n  {\n    \"input\": [[\"words\", [\"z\", \"x\", \"z\"]]],\n    \"output\": \"\",\n    \"explanation\": \"The sequence is invalid because 'z' appears both before and after 'x', which creates a contradiction in the order. This inconsistency makes it impossible to deduce a valid letter order, so the result is an empty string.\"\n  }\n]\n",
    "/src/submit.tests.json": "[\n  {\n    \"input\": [[\"words\", [\"opzx\", \"wal\", \"agdx\", \"o\", \"dkt\"]]],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [[\"words\", [\"rh\"]]],\n    \"output\": \"hr\"\n  },\n  {\n    \"input\": [[\"words\", [\"yuf\", \"jdzt\", \"w\", \"xvivm\", \"ez\"]]],\n    \"output\": \"ivtmzdfuyjwxe\"\n  },\n  {\n    \"input\": [[\"words\", [\"fbdct\", \"flw\", \"rvif\"]]],\n    \"output\": \"ivwtcdbflr\"\n  },\n  {\n    \"input\": [[\"words\", [\"apo\"]]],\n    \"output\": \"opa\"\n  },\n  {\n    \"input\": [[\"words\", [\"sban\", \"c\", \"k\", \"wm\", \"fd\"]]],\n    \"output\": \"dmnabsckwf\"\n  },\n  {\n    \"input\": [[\"words\", [\"d\"]]],\n    \"output\": \"d\"\n  },\n  {\n    \"input\": [[\"words\", [\"ntkm\", \"cvo\", \"htk\", \"pc\", \"deeup\"]]],\n    \"output\": \"euovmktnchpd\"\n  },\n  {\n    \"input\": [[\"words\", [\"bkn\", \"ft\", \"mcx\"]]],\n    \"output\": \"ctnxkbfm\"\n  },\n  {\n    \"input\": [[\"words\", [\"qyq\", \"of\", \"cctt\", \"fn\"]]],\n    \"output\": \"ntyqocf\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"zcdmthsgobylyqqzhtobgxwmvr\",\n          \"bomibaxccqpokvvmuxtswivdbrndqn\",\n          \"jptwqgdelotgmhemnftuqxcrndstgpuuoatncjctpsntyjttctiwoiqoxsgybgknelftyleundkhhwsktalrbsjrdbyurcbvs\",\n          \"hphezpuolqtbtmpdtffgeneitddvyounrzbtcirckeaemsknruhnkmjtidqhnhjofzztaeijleknwkbykktwzs\",\n          \"tbrdjyljicxxwftsxxdiilkygxajijipittxcegxxlxsdunhmzavymgjawpwhsf\",\n          \"edtgvtbenakuhybpokkdikjbwrfkurgnwrebnthygpmjqjzwkdgwjjvwoqpi\",\n          \"ntfxnpxlkntjmgawzmzwqspepcqmonrbihehgppkkapxaktmyhtmopvuzqxkkwnntuqzgzuyjgpwycrotmaulevcursbq\",\n          \"jwxvxpzhnqmphdvergjrliacasbskjfftlnzhhpvpsrbysa\",\n          \"tpftamotofxcgemnseuxmwvewnbibmfdpthtzktqb\",\n          \"wsetqtimntnujpfjlvtowtmgagkxhutkzcsayjwafkvlogsscpzpgnacttqukttx\",\n          \"kz\",\n          \"xlejhewloxjyjmnlexlkcdmhyiltnranjwgyhkqwoqxvowydfqsdjqjhsdqgekv\",\n          \"rzgwiyumvkkyrjpqt\",\n          \"zuoytrgfhlmwitoipnofqgbdwzelrdweeahyvmzddzcyahlvddpdyfyvq\",\n          \"attkopbhxbglenk\",\n          \"wccwossnpfsqphwulwfvmqatwlvllhidtvrgo\",\n          \"ecohytwvmrvtlptxxfiyhmsvxnfktndihkigcrguo\",\n          \"tovifr\",\n          \"nwlndkkztevuaijguixz\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"viwbnkwtwwrtntgawnkqmuwse\",\n          \"mizadrnrsxwgwcjbhofzpygwrojbsdkesjtpuokqoqzw\",\n          \"vczmuywhctrmtrzgnxbfsdtbeehmdgqhhmrihhfm\",\n          \"xpdwtkjcnxwuttngmbmxwteamuhxtqiicskmnrhlsutlpoubdecoshvqxmllhdymtycstsexbfaxftdsq\",\n          \"qoqktozpeaxtvadbdnuouyfpwxeewstlumj\",\n          \"euuieucziwjrhthhtdwttcacfwylztiatshbxcwdlrsbufikxqswywnnqratjniguqqcxgguqtotdc\",\n          \"mesrqiertno\",\n          \"mwarcjhrbbodzhvymd\",\n          \"lakhxlmfhlmyxeiirrtnhppleobedjilmrgniigzpmnzimvsxwwzuvojkgnlqloyecqyfdiertgzyutgbkwunagtzdljxmwl\",\n          \"seqsutjejhcjnw\",\n          \"vvbjrwanth\",\n          \"dotmtodxytsryyfcxmmfqhejbpurmdhslytgdjrjsxhblvgqptxtyuw\",\n          \"xktguxozeinxysmzxxtptdsfxunodrztxnmnijjdwxsrymsqfohksruxlegeajrenrlxytkvehvagaeaerinslcdkyojtzud\",\n          \"fzmnskwrzntxhotrziwqytwpnwymlvcxrwoasknlfnqufsftfewkhtggkhrmnpdsfvpdjyjtbtjchlvnpotejsdeadxwtfyxz\",\n          \"vlzwkj\",\n          \"gkxvzvlt\",\n          \"idwnadpcrjretagaleryycsuxydumbqrawwkuaenyvvdhqhermvhbzsyyuhrtqtmjhitzhzsvnaqtuxscgt\",\n          \"wrqaumddonrobmsngzqfkjkjbumqfcjptwvwx\",\n          \"gugkpjhskqbyqjurpisixjnmakjgrqlxjqckjkgygidtftvfeqisqqikssfrshfspxwtxccnyuvztrjmstqwobqamdtv\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"fdyyqcvnosfbdhaioepebuzharwjtzwxans\",\n          \"jghtlgyiyou\",\n          \"wduomzcpjtfmlvkxrohbvyulxtskaqdhhks\",\n          \"pecuhgqsadobvhuxfwkxezfwxmnrwxthpmnlajvhquiukezjpjmvcoukutrcsylppwhdcoaiusztmejryejgensidfbaaeavjyns\",\n          \"wssftcabehxtuzvgkmottzexceeebnbscgmzjmwtdwrtqohwextluvxhbzuikhcfmrywjtdaxgookoiwndvlgitc\",\n          \"fezrsixdktivcay\",\n          \"oxtrb\",\n          \"ojvhmhfpjfiodamtoxzlpeqksotbgxlrfgwmseqdiuntqrtwefyhikctipahtstamwmygohf\",\n          \"dsinumfcldegxendcxsykejojnubnwheyomuvwjhtxusolsxygbvtyvtarmntwwhprihakoozcaeuthywdva\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"tpseewhnvnllowxjvtdvtngydmrdltdptjsbkpjombtwucaztzfetrnzqzmti\",\n          \"qkulhmawizpnnjtirofltqsgrkqosshbjcqtzivdxcjhopxaldwcqswppmxqiu\"\n        ]\n      ]\n    ],\n    \"output\": \"ifzacukbrmygtpsewjhnvloxdq\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"wesyksvgiintbdksehutthqaf\",\n          \"tjdfszaikefdkxdgrujahmozgphtjyxhnfwipoaklbayibrgpijigfkdsnmtxweqlfbolwtznoitlfzfidoezpfniley\",\n          \"vnshmmnhpzdtcrqulgjrccdttadpgygcnbsimiq\",\n          \"wzmwvmtcbzmjvjydmrfutahsuhu\",\n          \"nirtxlpubsfdrtjqvwrqmzarcbrlttcqwlziencpj\",\n          \"ywxhwopbotrxugofbfrfsv\",\n          \"nikojvoqqkhfdqipxptzrdfbzmvegtflnatcbgacgirymuhzfrccqki\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"jdptdbwsuznpttcoqhostzdji\",\n          \"lrrozyueifmkrmegqckknnpdfgbwuftvkhqxban\",\n          \"afubbmwnodfcimmyleovyakrbyzuukfhflnzdnfqkuqrptwtkaqesmkujfembvhsdzxtsmtpohrxejctmkzi\",\n          \"rrttbxtnupcmuobewrhnduhjzlemdgvzhdbyqfwfoz\",\n          \"fytrszemwwvhs\",\n          \"vclwwhtacm\",\n          \"ftqswunfmvtvcqvtyiocccislltvppbhwuyzmbprhtuiwbzazkokaslbgqcrtsdztvttcgzwifccdqukilkvr\",\n          \"jakezoscrgvmxitblkbzeev\",\n          \"vdtvbhkluzivjo\",\n          \"zdktvqhmvmpxdrpzmumtdbwwqlnbngtntbcql\",\n          \"twgxsebkwabcxwqtzzwqhzqkcvwqfveapqpkcoexufrtltfggbrxgdldwletows\",\n          \"tnksuuokvwcrtsjflptoopjlnhatuewuicmwquettawwgtrssgygtjll\",\n          \"bifsioyaim\",\n          \"zuxkpthtvzp\",\n          \"qmrvolmoihnfywmwlsdzqtjvusfvcjmizidddowbnijaxxrxogmzrenpogbtib\",\n          \"fglfoonrudldkilytrivqvbhlkmmbsbzzdjbttmniaypuuhntzocfintxqublmtrrtghucvvlvtwokods\",\n          \"lalitbraohpxmlbdszpfbmaguullhrojtrdowlsuqb\",\n          \"xskgpcvfwfinmnjetnhbidpqqwdmziracysqdlqxfutdvftrqo\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"tnvpfepfvhyngahzng\",\n          \"vqzkqhntmmkoywuiqpizumtjfpqutntdtezieagojxpeewktccnkymgbkflhwe\",\n          \"mxobaumrstmgbukkvokqlnaojllwabahvcpqkchizbqtomcgumtqfpxraairdnttypwtsjzesdqaqaqzcjx\",\n          \"hftdntbmbbjihnwcgbgargwtbnkykdmmlraxotycxejexzwtsyckjxjustiwrnqpmjttkzvooklvfvqjludtaqbbpgy\",\n          \"vrmcrbxtkdropnskanhn\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"bkerfgqbhepegeltcvkwfzwdjrbzhpqdtzhlusmlqxbeearezoqvtqgmtvk\",\n          \"mfiatmktjbdylpqfqpwvwgbpwqcaluzezkxc\",\n          \"qgbkqkixacgbfvlldseephqjwvxqtyuwupbnetvetvggtttgjavmhkvfhobjjazpnvgqisuticjlbeonfoxxh\",\n          \"trzvintgkiafbedpttpxxqutkvtkmkkkhiytwsmrezvynbxzyrnvgzntybgheukfdwhosvhbxptkadzzrliempjtgzn\",\n          \"niuajt\",\n          \"tnekhecggdwxygtotouvsqqlrtlrifipgkmyr\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vjawavfzyawtmvbayykilqgdecmejbyinurxtdrcsbxwikttrlwflwn\",\n          \"mpfytgxiloatuquybddolmzkwjetonjavkwkztpepbejuvszyeuchpcuplknlrtncyqtktcfxn\",\n          \"utogjkwfukxjhmyatggrblyplexonnbydpcxfxycsbnspmzjeluzqudhceskfvwttfpzyxg\",\n          \"akgmzwottdsgfgjvpvjftgmiivlycdojtakwlffa\",\n          \"dtwpbowgqvzznpmqskwmrkgtgqpyucnqjxweutndca\",\n          \"tzxessritclutunftxhzazgiil\",\n          \"mxrsxydxtsgedhxxpnvmtdbaebzmcuvemvmxehtjp\",\n          \"qniqkmqrmtdzvjpkevmkcsqwuimmvutxyyalvupapbhgfurzaxxaargrpjtkyaqdpqm\",\n          \"enwlzibxapbosgvkkradwtwchczekjppvklkqwkydulretbertfttrqdptufqidmlltpicxnulyxvynuptcguustzuitf\",\n          \"xfawbfmndcacpqnejxngbbuokwucghotcpdgsrnue\",\n          \"xbetqvmuzlfk\",\n          \"nxijcfuxkkvjrgsulprtalsjxadwbhlkudocfvmdgbvrvtuqbdcbhbpecwndlyhtlbthrm\",\n          \"nktjaudnhvtngcykkkc\",\n          \"jibctlhiakukmpobfjwrlxzkyjcdqdwdszentmohdjfcwdjegjeahqamgptbolhkxndbvlbcxtdhnexlglqxejicrmdjqsdgcf\",\n          \"dxhwivbcgbtizgaezebkmaqjtylgybthtnkkgotvnrpsglzwiqzl\",\n          \"mnpndelokzsqgzkenoplc\",\n          \"zdgltmktxmueqvntzqbhawtntabrmdgzujattirmfkwfctxymihwh\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vefsg\",\n          \"vagfbhxtbhploakpladjopkuhcpeoadxfipdlhzofourjgwmgypogimrecubbldjdmnsycjanehncnzztmada\",\n          \"bsqrukhacppuorwakjvpgpipflmdrjofzklmrykogxlmketynqiankrslbxiyhifyahtyjxhcxrfakptuqocdwikqcbbidlk\"\n        ]\n      ]\n    ],\n    \"output\": \"qnymwrzicujdkvefsgtohxplba\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"ihzomjtupqzusleqcdvehricxvsrgttucrjkqfypwmakaabhlqcqigborncjhobltwzllzhntywtakhslcceghyeehrkjgtkr\",\n          \"ldcpfffsjmoddncsfvzfcpwqvftuqdsjwjqcodvwfbmltaywtmirbtwsvqckqsedomjpgh\",\n          \"vztlxkjybunmgdprgbrzhjsqqluvzyzuzuleorzjzmsgikpazmgegjittbxmilnwikaomupycvwylnacytohsle\",\n          \"dvhkfmhyrilpzsehudtislalngnssnwnxbjjaifowekimadftpktmg\",\n          \"brtpwsxnitwwacattqjqerpkszzesboynjllfdnkeqdka\",\n          \"axtpjidrpdqwabeflpvfzywoozutxlrvz\",\n          \"zsjydccfbhooyyldykczmklzvhytdtapweejetgcuzgc\",\n          \"tbuqoigtjtntoltmkuz\"\n        ]\n      ]\n    ],\n    \"output\": \"nwyfkgxrcihumojpqselvdbazt\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"sdbqrttiepgqndptryeoaszybiutgtitgladzltxobweofscuumypogvahtxlkielfpzhhspxacomstfxhzgtkg\",\n          \"itrzmzedbealjlafmkpmpasyfjdcixrjlbawwpsaiwdnltbfndsvlyotzpozmmcylqicvswyjnyegajtxxmyvvp\",\n          \"etky\",\n          \"kmewijjkuvodvhldrmgesvstgpzcgioewwmsgdzjwchamgbtlh\",\n          \"duncttdjppbjfgclwhklrnu\",\n          \"ftrkrcydptlhqlrbhaaui\",\n          \"vctigttutklzrkdzrbyytteeqonmzfnfupmuxnxqajpbnywurnwaytrlc\",\n          \"udgjgpslvqyeebrclcqtkimirtsx\",\n          \"tgqcjweqnigevyzjnprthaiprktcirqmzqtdvsuregzgcbpuckupkziybzfhrsnndukaijlrddoymturamcbffimcxqehzpkt\",\n          \"bngzfnuewirqdaagxeasquumsxjhaducivfztscfyyigceyiayjcpkoqzdkgquyicasmdumqrlaxexolqexfzvlgwodojzvzd\",\n          \"ghptnoceoxyknmaoscpmooatwekvuggpwrvbpmxtmykpefexuupabafqybzazilpnewjriwedexqwtpx\",\n          \"znjppfoeetvemcmsgbfyxjcaibtltzcyvtmglykatmzzxubojaeiitxapnljhixnxossykyypmdyadsaceecbuvptkpe\",\n          \"aovrwifnckiumasuwztfxfyghtrpemuqazogxsvuzqnlftybtzqxdd\",\n          \"hchwmvuu\",\n          \"azbxvjgxpbmcrbb\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"ibibayzorojllpoksykanvsgwfzxqfhyxhrclrblcirmwldvvkhcrtfygoj\",\n          \"vtxtzetmfqkrbuqadqrdwhlirkqxrkdztzpewbtsbflszowfrwlnzejwtfrhvobhvfexivs\",\n          \"bhcaeebvgqnnj\",\n          \"abknbaawvtpromrauinspkunfzpyhduzbmehpnvpjnidma\",\n          \"ooxjtjqvgrqmehhboqseditpucwdjxlnzkmdrgyxpyvtalavaymeon\",\n          \"uucttivlcncdacspkgptgwrfthismymtxfjskhvlhwtpwumpqowuxll\",\n          \"lhhcyfyvxsydfkbyoh\",\n          \"ytmgvhgxhcikavmpiehhutrbqghclpbbtrmumxpqvhsigdmtoiqgpcwazxhlwlbomptxkgcncsenedvqtcunwayzcwzolpgnqdic\",\n          \"tgpatpkvdwykcgtgwahhgeqbnccqyad\",\n          \"mbhirvfohsqrlxfcoxqgrtvfryltcdtbkikdjxtpsfkfqaxvjtfiiragtapdrkiethwsi\",\n          \"vtgrzwrleemboomdghjbfifykxtuvbevjpiugrn\",\n          \"uyidlarevpmduxbnobewme\",\n          \"thgcrqijyreraxagbttogpkdqipeoivvtukmxutqbqzygcvewqzghsgvdvkaokinqzmwtesptgcbdj\",\n          \"cihyykjfpckmztxetdozofqypqsovuoccnlvykkwnfbmtpskt\",\n          \"mojebbugityerpwkeusgyghutfytkorynewjkyvkqjocjgatytqqtkfirqifmzbayycvefiqtisuofruilc\",\n          \"owazuxtolqotxopedpnjnlgszyxagocwdflgi\",\n          \"ssatfbmjj\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"cpcbbnfngrgnlvhawzhixrkn\",\n          \"omnaukkrhteimideotoxrqkxbrfoqsthhr\",\n          \"vtznuvyxnpmrraxtivylw\",\n          \"ziidtexjbvhtzwrlhecimtqlhesktmefbovbgfbfgkjkfkaxrjrvjagmsrmzar\",\n          \"xlssjnsapeuta\",\n          \"zctqvrcfnnaphrdtyczatyjtvutnddfdq\",\n          \"strkluumdtwkbpjbnytxgvlfkhedfasdeydnlisufobyzehtccpvpuyvtgygqktxezvrdtwthihr\",\n          \"hganfcyximmuhesluyoqdenislchrjdwtkugnmmttrvopwmofctevdeqftgtwogbgdkiytrszc\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vjsugetrplaemywccnvxgpdldntwtspoypyxqfkpreenirrcutegryzkcqhtcwemcoixzxemeyflrm\",\n          \"tuievzptqwddsqtmumaqjfxcsslzjxehlpulhajaafptszh\",\n          \"dlzgakqndyxatqcqmqvihtbwrdssgzpohwutraooztybwukrlqzamegkdoz\",\n          \"jjwuuqbgfhedwdvwadlttmxtekakmutahrzcbakzgfqumzruankwrxminciuzitiatkwtcqeotgcdsswkiftjaspmtszddnxlsg\",\n          \"viletwdowtcg\",\n          \"fmbktlmtrworllvlvpzasjqfvbwptfzfdzmkykbjbjgvrnxcspeqsqydivgjhdff\",\n          \"wmkvzvrcnbg\",\n          \"oqydedqjgsrfqhqvzcero\",\n          \"mrkdsxkvxqdwcboqbqxlubxputqcjajxjcluiuslsoqfhltzqtfiknhxttafjgcmqcnbbdagldwrqaruthmtrdjgozsama\",\n          \"cykurqbavk\",\n          \"ehtjlmzoturnctarjhigfiuyrfodtimjtbtlcboeiai\",\n          \"xpezazlfuxukymactnbtusqmxqfx\",\n          \"duvzfuv\",\n          \"btjenvyntxrystirsfdplapweviotypjjmxxjpgdrfvtjkelypvhtwtjoanqovfplntiseqkmrxddmqzch\",\n          \"txczttjcyewpxxltqfxzeqekjqwwuzktfuglopskrxnjowduwqctrbhetlvyqcztsanhwokdnoqld\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"acxdzkbveylrvnndulwpgywmiwxgfuldsmjhfepeqtmjsuoruqt\",\n          \"bkdqhmdzvifnyabhhsjkwitfdeyidymzntzqfkomzvixsqnvafauvypbjqtuppqvyxqhqtuxiubtg\",\n          \"fthkzgjwrwtrgrawxdvptplrtiaexglubwxdnfldhiqcyzkirnedq\",\n          \"mpqepchaivecqtdoo\",\n          \"txibgwvilqqxsoqozhwngipypkekfpjulxulitftonaedtjgrnzoyjfayaeuojqjkje\",\n          \"tyylaotxaxwetmfpesskikyfhzs\",\n          \"vvwgtn\",\n          \"hvnwrtuupgdnyxjgbofpzfssuazvynhoetzbcodezpwsatvzaorjeptwpjvfpvqjinhmmmhimwdcmohj\",\n          \"swwnttwicgmykqvhaj\",\n          \"kynjhtvbiigbalrflxjclipawzdarhntuznxobuxcyvpfpumjojcnvptiajnjkzdmtokslorjbjsustrjvbsfwawlnzhtrwl\",\n          \"nttelmytozaoyciwxhsrzafvbukznhzmntuezjtjfbbuo\"\n        ]\n      ]\n    ],\n    \"output\": \"oqjigpwuacxdzerlbyfmtvhskn\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"struvveuahqetrvgamlkehgwxktcityflpiserbmrwgpotyhxzbomeejvcbrrdjsyrpdzwbahtkyyebtentbaepplhtmvza\",\n          \"atpqxgryoakcehawchqdggkmpntxhuuatkucedmodtjxvceysuehyevglqxezqtspsqzhrvjpipmxoifjosewfmovu\",\n          \"favwsrbovgnotygttfzthidwncggqgqijaojmxiltrtf\",\n          \"tlxghryaccamaikjstzhdpqojcgtxergqpsjtrwazeeslegtsfjydvzimrfosmushrwgttiebaxdap\",\n          \"kgedhxnfpkrgricmfurgevatvbyeadluynrgpwtggundnijzzyycnvqhn\",\n          \"aefmaxzsamzxknlxghmnsadvozklimxuzfxkrhkpcfspbahobiluq\",\n          \"slbynjtbpedeylnfriglbhcoqltuwafqtpysxhaloxcbfdhr\",\n          \"sugwypneilvkgrcepepstbuaxmetysiimtedfhmllfeomqkluzptztc\",\n          \"yhtduimoaozrdfhwvynwny\",\n          \"flnldxtgfhlfgkhgtpk\",\n          \"rmkdxmditgajqrndzbefswijnhhnazbvffyuoausasgqixu\",\n          \"nqtbljgczypsmjzpthehvxqymxtlr\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"kihahnmugbomosudrjwitleknwjyvjrxyvhtllvqckruj\",\n          \"xqwuillfpzbctxanycoimcvqgkanqpiqprtwyttgzudstjusuhapogttefqqhkwiyqqtnttgjwdyafmnllomipds\",\n          \"gajtqpzsloifeugyjvzlqouwfwqptgaiizjurwdnvutpcbxuxqjsohaatvgbdcaqzfisfbwmoxqsdfytqjzbpib\"\n        ]\n      ]\n    ],\n    \"output\": \"zpfcqvyeltwjkihuanmbosdrxg\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"fxtqee\",\n          \"izsqwinlkwtpiifsiqcrytofvovsj\",\n          \"nwtlmorgrendfe\",\n          \"hftwsqbdbyvpkixihlwiinkelhztuqwtuhksatzurtrwtpvximngkkijvzmiefjvluylcigepteusyklb\",\n          \"tkhrefgcbnjznonnoxuwbndpbcsqvsnijcbnrklrwqababtpqbgggdhbpxrpbqhfheclkynwmpdweatxmtch\",\n          \"joibxfbhmoyhnvoiisunjvmhhemxutbiduecjhlneqzupnjuzyilrmnthtowsfbiyowylxdhwijhhtoogqeuaqlz\",\n          \"svrpqpepikxgcueccxrceduabuukqikiksrassodgvaimcmwdayeervntndrvztlmljhttcyiixmzg\",\n          \"uqjulxfrungljthnvzvgayohksfwmgyexalonxapqusgeobovpimkkadwxkccweqtwly\",\n          \"jnmjvgodyihautdyledzwpurjuhlzs\",\n          \"sbtdtetbcahuelhnftefpjokhlqdtthtyodkekqcbyswlwq\",\n          \"haqwjpetkkuxztervrfhlngsargktwqgqhffwcxvtldkkvlqcleiuzfmr\",\n          \"mdugmneeibgnmjggkgcqka\",\n          \"gdelzsveqjyuqlxkkzklnhxgwgtbbxrrncondzjjuivzfhzkivhybgtwtfttijnhebynubmbsdntymctqpavhwctons\",\n          \"nvewjjngdmpfdlbbpwfqcyxpwgtoytupxkhtkfxxnelowntcrgebufegaw\",\n          \"ov\",\n          \"hylgmfqklrugrftxoaatntrjchlnwccurttrqrssnctsvkhnstysmgklcolmqza\",\n          \"bqqfawgqitthiqlewzyyulfxsq\",\n          \"mgnajrnntjfhfkkmlfbjehiosgiuqtxfjsvvkvuheujcifn\",\n          \"rhbxvwngkimpqurvj\",\n          \"icgpcvdyqugtvrmxjdfhgumsejpqeqcrnwjqpbnlrhkbjp\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"esxhvuhpvxdvjyxhqrorgxfwanzfrdillekflwaawgffomnswtkgpecyhwwbplsopklbzahhotienioqfr\",\n          \"gmvhwggmfiveaqis\",\n          \"uewvyuduyburowyirnykfjlaeqzmezsttntlkylunqlxiftpwalxygkwwwhltpisincizhrgftmixrhbxztfmlzgefcikg\",\n          \"qbhyaolnrhtmlraevksrueqhfhektibrjkihqxizclqcrtwsvlsmuuognkwmhywcr\",\n          \"gnbacfthiwixxbzsrdjxnmthbgpxczhdarlbtbtlfhyyuvuhiofoxmrxjbtfawaxfnaoindumncmbantcivn\",\n          \"vptgnkvwnhatwwlozukxwvkmoxzbadejnhgjmvgxufwvagtolratqm\",\n          \"vxwzjcguorpqcbtltuprnedjhxtcutvtlhrnedwwoiujggvvbmno\",\n          \"qmtrpmvymlmyomasxyipndvxbinbotbbwzxhlqakhyuqukaxzgigcgfwetzqgxrvlqlfhtkajtzrmhoexwsvelygvhgojd\",\n          \"zarargtvnpdrxddxfvmmgftkhtrkdxhgvowuthjvructftkkzourvvarddosshgqzx\",\n          \"udylcktosqnshpnaxywqmqrbfqrv\",\n          \"zscgkzzzpeokhhrttujrlaokpzagttzoeehbtdgbtoldhyormeketczh\",\n          \"eeecdhkhywrteyrpvfjqrirtxygxnltepbettmdftgcuftwpeeozxcdtasetzaxqyilwt\",\n          \"cvvwhxxsdhrzkqehdixhqjovniymozwdikvtqwdkbvdsmpcervxgiquojqxftuoucxusywdxwcwcmgnnueytqeeggcucvrx\",\n          \"kmaltbplfphlixtzulatkqfndtqandpxzioanhilwmntuyewntvkcpokoumatddhlzonhdcnajtgrxpdsvblzixf\",\n          \"oumntdfefntnbsgfqhftbhhqvqjyegxhgstfmhapnsnnmiiounsxtdacebkbekbfarn\",\n          \"lgoiisrdwuobrehnqaprvnistuvashrtfcezctgozrbrgljswkyjgvtxmntza\",\n          \"sddtqtszeufndhfoowozesftkuhwni\",\n          \"scxqrmnobsiwxqcpodghvfiwwgilmogoydwaanczrlunpijirtsgtq\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"jkgqwfkozndhggatublfzhazhepcjhpipuncljewfxagirfjajtqvpttcpootkdccqwsvtirublpudvhjthsgqeefjngdovy\",\n          \"oklxoupodmkdwtewktunotvoblxkpolwgojfswaejrnt\",\n          \"zejsezuhhztmtmsetxcdviqtb\"\n        ]\n      ]\n    ],\n    \"output\": \"mysvrxicpelbujwkgtqdfnahoz\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"emjrezlpzmiuqloupylvblcslwzp\",\n          \"zvrkgdmptpzehtpiewmvbvdddpogapjgwayoefzsgrpuyvcbxywahentsrvuktnnjrraw\",\n          \"tjnqdvbnwuspvkuolvstudhuctglmhyuwcsxphtupnurdzkscbtebyjhngxnagnvwjcdtisrgt\",\n          \"ljxtdgiuatcmb\",\n          \"bpfthvftengtyvahwowbgnmytabownerhurfeqtttyckjlgwwe\",\n          \"cnzkcuppinisjptvbidmfhgbgpsanuyaqcvjozwmkrclwghhfbvsjylyyiwdazztqwzjzkbfftkajdyny\",\n          \"vtkyolitvhaavsstprcfryllumervxtyifkbtklfgvdqs\",\n          \"wrtkablacphmedfoenhv\",\n          \"lyhhbyglobnilmtcltlhxrycitrtwpamwlqq\",\n          \"qmmeabflvjgqnljpcmadnijtbtpgtdmfyvgkezpjsfkkat\",\n          \"tdxhzljdadlfojesummtmybnedeqxsvxzgqvbfuhmximkitsprifxgxg\",\n          \"cobspngoswkpcvagfqobzbczritjsnuqktsgyajojynvypufahwhfvcovupytttzixbjwtytoimlxkk\",\n          \"vqkbxqjnppjwzstbmxgywussglvesvtmnbefbtomfzlbwrgcnfigbkbmbvtittjr\",\n          \"qdejhesjtpkxocaytpudkuqnnddhlnouhbzjpfbcymtyykmmaobttkytbbryqiekigmfdmauvtysevemhagberpxxe\",\n          \"tpiovsqimokgqevmnbxnown\",\n          \"nijtvogfeydxctpcnwrxhdttbhnctzaiuytjtzllobxfjzabxgzfuw\",\n          \"cmoowsmwitxetgipjplvtapeiddldmdcavnt\",\n          \"wjgyxcovqzrnzuvwbgjpjfdbzihpmvnknzddjtlpvzyromwatdnlvzgfdwduunqwbqxjpkxtoltvsfpecetn\",\n          \"mkyqiolfgddnjtlcsqegiwpqsygznhvdnykndubqheggmkoshralbyqtm\",\n          \"lnxziqtspkyoyymsipw\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"gzblshmufymodixvgomyzhpxlmktptjhpyaqmktygrbiolblvwc\",\n          \"bmrhbwlsctqhtietszzdrbunzutsjbtysipbycrdwaavurwgfx\",\n          \"dfhdpvfetwzvpwxtzcasdckiojdfcxqioypwsxyxurqapogplamztouumkxuycnjyzatcltocajkgcgstatnweji\"\n        ]\n      ]\n    ],\n    \"output\": \"necwrqajtkpvxgzmolysfhuibd\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"smaroxtqpqnhwrfsfzfgjuhoxapxtpsnvfdqahhgopexqfogpytdcpudpugy\",\n          \"qkystpnnpbenkykgmpawvtzqpaexcgyldnccdwavavsipmmngtxpnitftpruiskrqdqqkfgxouhzqshnmthntijmrnu\",\n          \"iygaxzwavru\",\n          \"fvsntbkcusjavhflhjctytmygsxgwgtkfvy\",\n          \"ximwtpcntmhpsaqypmmzosflntwlfvzmpdewmjwsfehxekdbvyaivlvbfqjzpuqsdfqndmbnbuojt\",\n          \"vjwwmitdftvykjkyjqtioubmbopmvftptwkoiwnjilltmbxyzdkyualttvpgjyvtwcgzbvwaqwn\",\n          \"eodxlamhguybhzitdgqvrtuwwlvmxpwtosqkehrwtoozuifdwghreqdqtvjcgmtntntmjkkmhlw\",\n          \"fwximmfrzybscygfvleypescixriyqaxzneecjfetykmselltsnsxkaibxppsmdsfffcjlitbczuhlxmoconheja\",\n          \"ndxqqtubeacbnazinutxfrgohjhxbyiicxalbxwos\",\n          \"tkxojwyldcsiatzzdjjfnqgwfcdivhyswegmmcqdvttaxtbjsjqbud\",\n          \"safsqdvmlvjdegzkwohabbenodtgvmenyhpmblgd\",\n          \"fagyllpccwbubnueottftlrcmvjiymyctxwccmamnojbeyluwopnndniuiwsogbrucfszivbetotuccfhhciouqimbtajuxpzmr\",\n          \"bhhciqwmsxdyjdttcxmttaxrytpfbqkiikrhjrdurnwuexqwovspuxoxhzkglwcijontqebnxpzrnzkjtncyhttcxbrjjlfaku\",\n          \"xuxeufpimuehfr\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"dvbfewkjmbthjockzwesfhovlptxms\",\n          \"xyvbicnseinkpmwwztfgnq\",\n          \"wtfajtbpdfecphmddyzz\",\n          \"tmhlqzwgrqtmfldyxitkazylhgdxlxksneijugnfdvcq\",\n          \"gcdqojsxfkvqjumilcstfgojuknbzfszcwtrxhwkotnbzpwswtgkcgnbqcqlccbshok\",\n          \"bubjcmzljjgtvardrlbnsdttykvayrfdojttfiuorgjpsfdrvvslxwtvjzyvqlvtnvq\",\n          \"ufozitdcoipogpsqhduamwlckqdqroxxmpzwewtnyjojy\",\n          \"elumhnibdiwwgbudrsmcgtrnmrhhpscbvzxxmxlotxtouzltgozfhbhcscuvnnxleeromzovzedihdsuhpvbaiuc\"\n        ]\n      ]\n    ],\n    \"output\": \"raqniyplszdvofjkmhcxwtgbue\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vawonapcbppmrwdlyvnkrajeplveuinqnwksivibcysclmvplssuxtnrnietmgluhlcwvwg\",\n          \"lxavtcuhyeovztebbhuhojqigcfnwjsdwhohkqjqmhfadwotbutw\",\n          \"rv\",\n          \"tyehtstfaonpjyhfwrsfrztopfgnxwdqhpzmknfjifjaegnmsdmaifktc\",\n          \"slcsypgjrgdghtghiftxxhqrahruogkyttjdun\",\n          \"lodprfeemmzutazhfxazhpyapntweozwstwbtihmzzxogjdvubeut\",\n          \"cmiamarwitosdfrmrydtremuidwwwoonigvcbhp\",\n          \"fcztegntfnlljhzxtcprowvnqxwvpuymwwephtbagjemdxohlgailiw\",\n          \"tswgpmpzcvttksacweorychohthxxlrivrdgujzbojtxqqtphdnxinrdvuottwukuz\",\n          \"ragtmcifmjfzgbfykejhegty\",\n          \"ojnljoujzwnsckimhudauzogaxgvhlc\",\n          \"vwkjtiiazhf\",\n          \"jqhlfkdzuhyvkjhguschxnkbgtlxxqnbprymaytvosxfetybcpprpuvxjsuegyw\",\n          \"nqccboauoahmbnzdjzzsihczwsjfobq\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"yoedsunbdalgjhkjn\",\n          \"vzvkrdhheamlbuwslnphokmdjewjsqnxjprdnefqvezxswoshdzsgcztytpoelmjiuqultfetoqbpndtsxqufkvt\",\n          \"srbgcfgvhhihwcentapjhgwlgrgbbfkuidtglhfkwehunggzkwdlggdnxnowefjtwtcclbheehevkwccmlautqhhjhmqd\",\n          \"totyfitozbhukvhnesgaozvoyfsbsmkqtxkklhggyeapstpzpltbu\",\n          \"kowprwgvtvxoydrvxvdalrbssdrwtnubwtg\",\n          \"zusgkdmdvutfhbvvcjatrmbtotuttatat\",\n          \"txuffnukptukuxhgzepxvtuckeyibuztchfjaladk\",\n          \"mrtgwcucxueboljuszetoptmhijdyrlekzmhfjogrkwalquhvjwtysgncqygpxd\",\n          \"qwazyjqlsekxweqgfekurnzflqczkegrrwnzchhbivlgcwzgfopiufdmoujprxxrknfolhvqywjemyypgw\",\n          \"faeceqtaldszfvxlqjwl\",\n          \"bdfxaivoulcejyfpttcxcbxktbkjzmpzponwffkmaiicdducuzlvnptyqrovyhtiixyp\",\n          \"rrdtqvvqlfb\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"nhnowsixbwtngeilwtqyucizjpswuostyihujvtswntgcmtplpphbzyco\",\n          \"stcybzfmoikbtbivluyzkddi\",\n          \"ynfrjbhqfemneeqywpnilkxdscyggavtaigstdsxrxrstkgbqydsxcc\",\n          \"duuglimxidptfgbatykezeyukjditofvbmtkfalfslfsihzfiscczhgrlvaxpzphxfnkwt\",\n          \"jxxabsjzlhhtswhovhtlirnycjcbeblontrvhigowtmtxuxnbmkrhvebpzlvvxixhnadesdaeuljitiqeagawoa\",\n          \"kyhibblirclamedtpemptwe\",\n          \"umshljzbotniirocxclkzittwjcxoqelbl\",\n          \"aeplmzjgpildkuuchhmnvjfahrrpsqzbkrlvetmdqddqqhjxpdtscmudjgskptofhzxayhnyfbfuhmdx\",\n          \"klmaqeyziurycthtlwjlcoltwxlieqcshbwkczfxkgqrxbqlmdvsjzmoixflehmr\",\n          \"omjqlsvmxovjphjj\",\n          \"gwutstvhgnstkopolsfdpnqdertzugccvrgaloodajrkwvmcyflhttfhmzibexuiorhfmrrf\",\n          \"ypmrftxvoflpkrhgooyboehggmezwstbupvcttmhmyane\",\n          \"oaloojumtdzxlkutcwvnuqtmsvqtprzyqmtugvikovmrquaogqvfnjgvittwgmhfbxpd\",\n          \"lkvtpuvqueswvfakydaftfdgtc\",\n          \"yvunxrnhermxcbwrlngmspaujalzl\",\n          \"exjshltuyyhda\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"kzzksozofaioqqetxtinfvwwhhtondrwsnqtahtqrmktxddfdqiuhggxpwbduikgddirdtyoxbxxxpqyvtnetthpkj\",\n          \"ikcbxtswtwlmetdgluzsafgmbsblpufdzkrmnciifvpcmviroxdulurdwrhzftbdbzfuwwfglttjiofrkkakawpkrmoprkkz\",\n          \"mhmtnft\",\n          \"lrblrilxnvhjzxexatappeadmpv\",\n          \"ihxkytkvuwlntlpaqvsevolrvwfoxohmpyrffffyjmacwfqtayuuqcglgsrugveoefzhuwxsglowtwzdphtqo\",\n          \"qdioaexkpdgsuastjdxlcgyscdlvcflvuaajfbvelcltitwojatgxbvsptvdtvlkj\",\n          \"kkdppe\",\n          \"eklset\",\n          \"ddfj\",\n          \"htfnldcdytruqnlhofaygsdnrlum\",\n          \"qtrbmbfufkxswcxbhgcmjjpzfutrjnotl\",\n          \"dpsycxdgrlfmfyanjtbhaaiwvhjarazltilnkzpmhshtwzjcaphbjjjntctygdvxqwykxhtdtlhcn\",\n          \"qtfnfoxghiranvaravmzgyjyqlwkzesdusqwnblpyupsazkgdpxhjvymvrxed\",\n          \"jrwcoeajpfudefbbcjwyabporjdpyiokc\",\n          \"jsfoqepdcuxzzimttthgdfignhtprfvhfsopeucimtstgumykkdtebnlnzllmerwrtwpvzmpbtpgnktqetzk\",\n          \"uajybgfzmvqiftlqmmqtrupbqgabnsiayvuqjbhxinketwxynzkbovrinut\",\n          \"aatuzelfxoznhidqlpekwcumiprbjewdhpgtarsyufjpnsrknsxcmbjeffktphkjjakcftvkcu\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"okps\",\n          \"afcgjfxjntgjjtcryxsccgjumtumttnpzvgxfesdceaowpdvkalezevvpmmsamgxqwkswrchkvjb\",\n          \"dsekivakivqlreuztjrgjchavqfeanegcptnfypxlicggqfzuxkb\",\n          \"ztfaksicpzcjttdcemdgvtzxtexscmwgqditugafinoulcaiammqittdrxwtbtgrzsnxceteckkswb\",\n          \"jzhayoizwepmjchsegpkxcmtnqyygzjdcovljxutiyzqmzlrtrxgjkxvbtquesfhrepstbursvtcved\",\n          \"lctrarhxrtqcpblndhnoxthveqyylexmarnnoxucgtgmx\",\n          \"gnxbkotcmnflhstjqmwgyvcarxnyqtluzuazeytcwsbkwogjcihkloegswfqykypk\",\n          \"kkotyqotckgitlisyofrshzvnuotadukkfehwumxhbqsjcrpdsrwyvftoxjjji\",\n          \"uqmqdvrmsgiamtjexygfkhelclbsgmetmzqrvgcmqtdbtrysqxtwyhwfzjr\",\n          \"nbympqeoylbpwkejbfzexgzjknbmuxtceanctfjttkrxewvhpnjomhwutlcbwpxnjdguhgopwzrcuftwtaknaqsxagmmjufcuwyc\",\n          \"xyjhntmujsstckgaocwgkbdbenmnjbdkkihlstyehgkgnopcsoopmeticqyefxc\",\n          \"oesogttt\",\n          \"zfnzmrirpaeljuekalqypmmgswwmwclstakqddewgchtnlrdlvwkqgnqkhekolcmwbmgj\",\n          \"bfzejvicoqzeqxuawiygludseudzrtdfkyqlsvxwkujqtoznfxtplvwqqgsyzxpntsitbyvgcinlafvxvhyjgauptbyw\",\n          \"pqnbwjjjkwrecjxttculcax\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"shgnjttxkvtlalxnjitydpsigujphxrhbovnitnlgxonzmrttrxwe\",\n          \"ilgtmtwidttdwjavlylarplkrnwxi\",\n          \"ibwewxeyhbsxbluceiyvitsvpnagrsunzjqvjtauzhtcmb\",\n          \"wjirwkbywaptxiuakasfyxprvzdziaocsdsfbxdkpjpti\",\n          \"gzmzkhwdmsx\"\n        ]\n      ]\n    ],\n    \"output\": \"fqcemzorupdshtnajxkvlyibwg\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vkgpmgvmffgqxemvzdfmsvsvdfavlmzxqkhxiunsknuzln\",\n          \"ulqfdtew\",\n          \"hxgaecbzckapybqzvbmdgpxdbtfghil\",\n          \"otyeyqtslgkxcxnoxzdehkemoaqzukuwnnaqkglzytrolniotjjwmbzbqiojdtiazz\",\n          \"pxuddvt\",\n          \"rsasjleznrvnazwgfsngibivvqpmyqipoxmftrzaarbot\"\n        ]\n      ]\n    ],\n    \"output\": \"jybcwtnilvkxgmzfsqdeauhopr\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hdfeoigbqujyalhyctgsjtfuxapdwikwpudz\",\n          \"yhylxztgzsatnenbcmkeyplubhxyxyrddkahmdlvmbqxyouubjeossmfhgdjtrzsjoraepetybevypdkfpiczpg\",\n          \"stivptuecouhldigwiueqwwkvjkfaygtetfstpqnqnvbtbnftjukxfxjqhantptectuaverrvseehubtwadpcqynmfmyvbcgwlfn\",\n          \"fqyyfnwrplowlszfwsmzngthcycbmxfcozaraqbuevrylknyptctdvvumjgqdbwheshbzybsmyefpwfmtzrswhbmwtvsienr\"\n        ]\n      ]\n    ],\n    \"output\": \"vrmnzkwpxtclhudqeobigjaysf\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"puahcqczqtzqeywrjxsvhelhdygbrsmhazwygqcocxxevdhalq\",\n          \"watfaiymogecmjhdobvldxkpktdggwpdpwylxkjxbzbcrtgbfgabxtecdjomzgzsrzvkamacud\",\n          \"inruvkktoaxhrqkwbthuhgwmryftttcimtlnvakowdlhqyavoirirjtedhhyjrxpcczjx\",\n          \"wvkwqafcwyifsaqulkkjrpkkqoytsbatzmdrutyetibwvyscyysscrkedhclsvk\",\n          \"bxnmjgdumaikiypgtymacyilnznmpjihpltlemtwd\",\n          \"nsfepddlctdlupbqlppzyulwxewsqjhnortyvtjekbmu\",\n          \"adozjejfwtosivinmytqxftvdutabdzwbnblyxmnknhgnxtudeyyzwvyfxcblrmywmxbaumqxjdgatdnznt\",\n          \"mltmmuxwucngwfxwebixaevrvxoqzrwjsqaocxxlqpt\",\n          \"denedssnjrahqfjcilzlsmjfwlvcyd\",\n          \"kxtrtzymitcedtthnabnkiptilu\",\n          \"tvoprri\",\n          \"ukcorxdgiikywrqmyarmbhtlikamckitqsletdvxhrshulqmjtlnqhltfvcicfxptowoknnbhoszjz\",\n          \"haggiutpcxoiajwmewrtxtmvvscckdrzrftcywzeijuklklqzmrkkzlsisptn\",\n          \"umhgkesihpjbduxguxxluzipfdijch\",\n          \"j\",\n          \"ithcpduqltejsfbzqsgvfqpsxrcjujrwfartdksgddcdkbnspthsaivpfgjhmmvojo\",\n          \"tnmmjnloqcinvxmhkjbygetcticnpwlelftzixfoiyazqejnnzeotawwbs\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"uabedkuwtvajfmkiaajjgzhyatndodtlqulxeosuhvshggjseodgttabpdanvprzujmdsnaoalisinbreuwtkhwerx\",\n          \"enymcezxyajtkifxuheifltftubstldrydlnwjtqbtyejgssfvppwsiekizkttsojk\",\n          \"duxmhbuyyawbusdxuytszgmtiglorgthyxwixxpzxjzfcwpkjuzpjeztwtztmgdlrozuoueldufpdmud\",\n          \"ibxwrhwvcizwtutuftidcisb\",\n          \"jxgmdqtsfleexqzmzchogtvlnhuporbidippbtfpvktmblvsrbvtwgho\",\n          \"afcfdoxdttgmarypardzsgwkbvtrdmabmfegxsglgvvnhxzqdiavzwzyzdaqgiogmawsy\",\n          \"pzpuihmcyyakvuamtrxqgrpgrcjqqdhrzhmwxetzuavoojkussg\",\n          \"eykvufztiucmd\",\n          \"houlcnqtmjxgpfxrqgii\",\n          \"ytdrckgxewhobmiwmtcgmsdhyepwxjysltyueogdorqmldpmotlhkkgfderzcxpivryerx\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"zhfxkpjbtrzzeonetsdrldksscxbjdvdqpqyeozecunitblwvcwoprospdd\",\n          \"ozyek\",\n          \"ufkreviwqbdygiofwpd\",\n          \"gqxdzwfnztfkjggorhektzpsidwl\",\n          \"knwtmqmzewcdeliwhhmohtsecmnnxfrmktw\",\n          \"grtupzlnmdvrvdecpezrnlexzqkfqfpikmjgiwvpwo\",\n          \"mboqrjalehmljttkyfinmpisldbgsbbtgcxtkrapdbitcvjtdhnnotolfinryqesqeztczdcarkhfdnnqetwrkzbakggu\",\n          \"sssqtdneycghneeottwymijrgxtvskubhwxpiasiu\",\n          \"dlatcnkbmtmztytsguezpbzselopurltvlpcdzmdhnwuuach\",\n          \"mtt\",\n          \"andxagkgieivybtyentzswfzwgaqtqkydejzpqdgkrtar\",\n          \"bgvejkvbhoxtqunnblkmdoecqlozagftmtdshfxypcvtyahdfmrapojhvstettfbjswaivhzvhtfsvxyjbewsxqiac\",\n          \"zttqwmdtocctw\",\n          \"wltqjuvciwijubguxefdlvyphifleutvqapfeoyhoudujzbatwtgtbprrzetcxwmcibyzpckkgzsnxtornfciyemdefxacithmgf\",\n          \"sqpssqzhnghdbrfgdtwmiemzsqtkjusigexw\",\n          \"ptfhvpdpwqxhpnntz\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hznsgkampzpwkrvlazxilihpdumuxrjuxludaampylbequpaiqpbobnbb\",\n          \"trybjtqdtsgfeapztsxinysmbyoutquluueuwubgowqbcppapfydrnincptehauushwnaeksbyaqkpzxkfobs\"\n        ]\n      ]\n    ],\n    \"output\": \"cfoqebyjudixhzmnasgkpwrvlt\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"btmuzecnuvclikwmeo\",\n          \"zjgk\",\n          \"rysytaloonta\",\n          \"qttaroyif\",\n          \"tlblaxoyqrkwtfbprrfpuqwxqlqnctqzginvcancxcahnkntorvimehtfvjergvgxmttgvdmpeycvtctrtwmyibtlteouw\",\n          \"ccdlpvnweodetzfvpodnxgwgzeutvrbhaceisijhjmmebcqcmduffljqj\",\n          \"ekneamxbqetzbsztpmuztnkocohnzdayiftwtoxypgkwghktplbeocsksyunobskhknmbfdhjmtr\",\n          \"okqgkcejphkpdospglogbbigxritomivsegmquqotjvspqdnsxphfrjnozksxav\",\n          \"lrwkjhidfmwzkthrrbsthswghpvpvbabheiytqtacmxjgthumryncsntsh\",\n          \"ynodjbexqubixliegjdfmthevdrtbxsktrakgzcnsjszhzozusinpjnlbqbiygcnm\",\n          \"ncrwdkhnrdomfvgb\",\n          \"chvvbvlxbtfsotpzbzvkmhecrajjkkupuatymdigqhoxyctkfm\",\n          \"yraawiiysojrtgjxnytsgajcvkkcgj\",\n          \"rkaefxmxartolnhjrcxgntiagtfuogjjlmdfhzqbkamwlfedgauyxbfs\",\n          \"epnpptijxiolljlmdxisapsrhtibmswdnbckt\",\n          \"hoogabaohqmwsbchfdletnvgoiowmhyeqowviudhskkxdtxzjgfathgpnlkjjrgdmqchucqtouajhbbvitjvyycd\",\n          \"lcrqvybkjdmflmltdjdxuuuwiukujfezhvivxtxjkpylvpattpoletut\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"zdmqyoyatzmhbclhknntyiubtdhsbwsafcdfflqrdldxkgoyfm\",\n          \"vyfmqfvtolxwhjfyhlyetdnjbazntdgvdu\",\n          \"gxdsxyodvtgawfjbqxxxmzxidsuuijodnxotgfgpodtbkmiwdgfjiihbcpkatdikdjiscubkgqlr\",\n          \"mskrxkobmblpnfd\",\n          \"vzzsrgitqdmspvgmblnwrepats\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"etduehhmgecs\",\n          \"cistjtrrmkspqogpcvupjosl\",\n          \"ynhywatjtteawtnrikncyfjribqeofcrmltrnuzxwutiuttumoctngrrgbwfekovlahtcuc\",\n          \"oqhsvkkassr\"\n        ]\n      ]\n    ],\n    \"output\": \"xzbfawnlvqpertgduhmsijkcyo\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\"qmjirkcxajanrqvhxlqauccbbasedsaybqrbxbdyejbdkqntjlupyxtespzcx\"]\n      ]\n    ],\n    \"output\": \"zptydesbuqmjivrkxcanhl\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hdtyxqkxrgvhqjvhftthuxsiffvfyn\",\n          \"yvuvgnrgggesqanqbrhyzkrtminairdpdtqtaiditamyjezxwvfjdkvnzkoadomfktbobwepntpe\",\n          \"pvqxdtblbweudkzurtsqldcntpjntkbmanrmhyyojjpklwoanadztcefzgkuzxktlmbsi\",\n          \"ncgk\",\n          \"dznztihivchtaxmdqccfmtktwkkq\",\n          \"mntdiaxufntbfmxzovxxclqajgigirrsuvexdqcnsbmdvflboqqdbazrdeqtqtzgpp\",\n          \"wvulfldvkxymeedvrcnkswtl\"\n        ]\n      ]\n    ],\n    \"output\": \"clozbaeishuqtgxkrvjfypndmw\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"cpwroqfcerfchhuvlfpzldnjmzgwnbpzjiclkcbtidwmnspqqfvghvytymamdyclpabxtscprfqofzilhgyrax\",\n          \"bypnykhklfefkeairnbtkxmrltwiqvtvxbaurqmutbylrxvxtylgbqkbxezhqaovoebwkolj\",\n          \"cpxmdtnlsllfocvseojforbyxvtdurnnuotxmjgkffkpeswmddnbphjejhjvtu\",\n          \"xatxupausfzrluqbtnotozodlxrmxndczjmlthgvruxbercxcydjgnstlqqbhnocudttzybgbkzb\",\n          \"besamrieknztlqpsfyspkrthyezttqudachzwvezunkftppofuqnragpafnommumsbuzhcbukasvmdwhaicpucoryquudvtw\",\n          \"yitwtnilacjovmejavvnnglzf\",\n          \"cjaatqfarlhucdlvtiptwtrmqaaxwxdtpmtemrhnjfjmusmkmrkaxvznzuc\",\n          \"xotwltbqmduhjwbwcttaefkobwmmvtfxzguakpdhcflnsbckf\",\n          \"pwziojmjedlrpxsftgrpxoinpubvwqnvhaxzbntggrcmsxtdekdoasckfbkryyoadjfatzfvudccxi\",\n          \"gf\",\n          \"psedamnwfcmkgnrdyclctowzewojqgvqjmfycpfdwqqnttefzemfoqedckupzyufhywvucdwwangtvqmvfjqjodkwiwkjfpbuc\",\n          \"eqvpcujzwttbbvyqytrgvkzzwuepchefayzdiarxskdhmlnbefftklbasrxrshmzgnmnakrlokgwvpphpqajz\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"p\",\n          \"jiouevxwnnnmwxspwkplxjaethtylthftdkbojtlntgttmtohpitozeawtihvidp\",\n          \"oxwdgmjznlqgkisqtttfnwmbtilnwlgvpjjpciouvpototbrfeoqbgsnwrulldqremynjetvcf\",\n          \"rlmtetojmgmh\",\n          \"zkmtyotvxa\",\n          \"aqoqtlxxbrctpdgibyfhokojehscejksrwtqtkdafttwcxxakerbgkspp\",\n          \"cpdmfprayisyruldtywvrqnjudbonxafoxzhtftehfdzhiekrywraq\",\n          \"cajfdyhgtambghpwhfrkvdxkcglzesxpvydbejzkiqnmndxjbawuveylmppuywatgnkqdtudhxjcqywwukyyoyx\",\n          \"ytazjpzgwwtheqvnzytiyrzvwaxtrvcjczzdmskeittbwlbgotqbpiueitcdsmgop\",\n          \"vwtensnzvulcapfrfvlzgzfgzbnvpssnxlkdzytwrzyhlgtplohvqtkf\"\n        ]\n      ]\n    ],\n    \"output\": \"qgbdfhtlpwiuexknmsjorzacyv\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vhrgwdwahsgorqoxwxractypgyfatzyrxujft\",\n          \"wmz\",\n          \"kjtrtljtzolyhxdpjedbwsqnjkudmznduacxp\",\n          \"louybvimo\",\n          \"sughx\",\n          \"tfgaizbsibdtebgvchhzgtyqngkkgantwktbeckkblsmtbctsumtqetusupvujvsveojxmetkjukasitartv\",\n          \"yzzmmcznlzvjoinnifkppsfporitbud\",\n          \"zblfptaweyggiyczmxqlfdiisqkhefgjoimnpwdpsbvscfzkykrzjqzjntuokb\",\n          \"fmtzeipwexnyhgxs\"\n        ]\n      ]\n    ],\n    \"output\": \"inbemjupvhrgdqaoxcwklstyzf\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"twfgzdewbprclstustdqighalggletghrajltqgrwuepjovrbcbmzssobbtcptcbwmufuotsnouyuqt\",\n          \"lodutnmwmlkfzvmrjuwurtsoqocxozrekmethuruecethysyzxpqbqltxvtetootwhpjmpqwawpdqhqpnysvaculosl\",\n          \"zheechbqkdljkpliuvwvsklcqelluvyqxhazxqxuktbovohwkptvxhthgddxtjlgceyzrgvkxesflbjzyakkttmjickct\",\n          \"pdidkreiiifbpzc\",\n          \"ztifzpueflhuaavt\",\n          \"daqyzzgdvbooqksjtxubizrafyacpwuxjfkwiuncjsyqfuiwxikekrtplviehsjfb\",\n          \"nwlukgzvxtsdboqshthqd\",\n          \"nctxmzppxutebigvvunvfqylalyrwtkdbahafngipapatzxbdwwlhhmewnajkargzqhdzfeffianrbrtdxdtbjaklezmzpxuo\",\n          \"iyrooxksqcxqdljmjanfsdgxhrheprqekfuqzmmixfysltnqcaaygtxgyqy\",\n          \"yqlioktwuvw\",\n          \"omjohzpsixjwzsjnnbivrtzmeojtjhmmpswooyxjqofzcynwtojpl\",\n          \"onkktquizlrmzdmxtfmcxesbkrgtluhxmeemfwpltxwa\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"tgstdtdyhmflqdrfuvatsbwgkixgoqaekehofckgboemcaflkaxxrmrzbebjtfwrshsgdkkbzjxsztvpdrfxvzezoo\",\n          \"hecohrswgergutjnacpdnpcbjhxdreoffzbvnx\",\n          \"tghzrblpmkneocmtnvtvysuzxfcasv\",\n          \"oxcntmwkcuuexqsaqpuwcogrzggpekyslfyqgmybbzduixblmttjcjgjzhcefaydpsfwiu\",\n          \"dzytqjwtknksturojnrcagiweiftmjluiohxncfmvktcqgzkshathkwscgvbdgnqzdbdku\",\n          \"e\",\n          \"fmoowdcaxlukdtvvifyghorhnmkdshfujvzxvq\",\n          \"ziiibnnqseyuuoalfldujqlqshhwuurwucgaxqvubmjlrdnjocoujjmszqtoa\",\n          \"ladugkeirhxplywhcnyyojlbdivjejuafwmttxtefawkhptypplkyiw\",\n          \"spsxtxbkugptsueoixoctfiwxyksirklucxshxsattfnygtalsebsqzvfskktvqvdfclmqvziytorsivvbbvdfepaw\",\n          \"inobvhfgrncxvsygbohtrmogrxwbpdmptvexxiofnufdexdufiaxsfxwwkzai\",\n          \"efhsdytfcrkttvstoazzuzsyjsnmvcvdaofhgukhv\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"fmxfjlpybxtuczdtqvlttoofjajohkcjilbimeritdfifcojzoov\",\n          \"gnjmbninvtvr\",\n          \"ufinchgjdhoiiulkctjcavtnapnehhtattgtqlotzochuiuxboyzkmxbwlmgnqazyydyfhncjszdwkmsvrgcivkjzgeaevz\",\n          \"dyszrxyimrrwxfgsbdprnopxtrftpuhtorgejtyr\",\n          \"tlvfcfpojzt\",\n          \"nfunkotelbxhob\",\n          \"oeblgtxadxlvovwjvasltijnadhgnjhpaeydeopzhnqk\",\n          \"jpmrieeoknfxjjqpnnjxfmtcmzcklcyiotetwfgzbmmrrszqythieosmnbuwlacagm\"\n        ]\n      ]\n    ],\n    \"output\": \"swreikhavqfmzxlypcbgudtnoj\"\n  },\n  {\n    \"input\": [[\"words\", [\"f\"]]],\n    \"output\": \"f\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"zjabqwmkrmdwxcywnomfbwjycadhxunufrsxlvyaqdneiegsvlqfxlbhawubtoaxtehacqmhf\",\n          \"mftvrqyvacxsdxcxyadfpjfkpfogygvfbmgmzmtfjhgflrebnzaomsjtjsrczxkgtwepnohjqocirmjyfntdwdcvcsmxdr\",\n          \"fcftibcmuhnfaotofeodevmljmkdgtfgatutt\",\n          \"mowsjnvzyqttlxyouxosleinzlv\",\n          \"brczhaatrzhlihfcbvplqajpfagsxcsgvtjdzuqxqthtdcdbcauvhrzzzzqeuqnubmwbzw\",\n          \"felhcoglbkzbliquqkksapbucnhuzfljcpuvtfiqvykiggacxvgeferejiojsrewsppbwd\",\n          \"qbkyzqrucg\",\n          \"vxdskwacwdlwyzgkekidbkcmqqwbtbxxrnsdvdtbdcofwhivlnxhwctdltklt\",\n          \"trlxgixlftqkzrtiytszouoydbzyozisdisbueetujtbyowschjqezqlkodcffkriovxrcsiboqpkqqjku\",\n          \"kgjdfcejnwvroxdfmkmfnabttgaqpk\",\n          \"qnxepxum\",\n          \"ianmbakhcncmycslnqlnquthttlsqyyhkehbymtidnsqueyflvclmcfibwhynfxfnlcjevbduqfwurhvgpngtegdypdmidbe\",\n          \"vsdtlyruwddbxrlbex\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"fxshfinqvlemtdxfnexptvpzjfn\",\n          \"pernoixijqzwqdnwulodlepraxtpjprwtyayoqqarxqxonaybdqnumhepuoaqvapleuvkmqvfjuzczlurxkvqwxaeyu\",\n          \"uxuuebirgagxywtsvrlgvnioloupgniorltodm\",\n          \"dtkcbjswgkvcirriycxtpvbgabgqconzytkackjhgihynxkpyoadmjydtnvnxtuutrjfol\",\n          \"bidsisfwkhdzkvxdhaufphfyabjkwdbllclcollfcsayknzwirmoeebocholkwxqsceclzqopjrbgtyozn\",\n          \"ggflagpgij\",\n          \"rgpotmcixtziaxwhsttmyzfctqmbhuwmrhrfvvhvmntknlwchpsbpjr\",\n          \"ktyxgcznba\",\n          \"wchseohqzszntztmddwryqnzflyfkvcpkahjxonlsingqbovxnvsatbpvxzqtegp\",\n          \"ghddchtsmbaidxqlrstruratlpyjwwtichbrfsifpjrmrkjhbimluwyjrhzpt\",\n          \"qmflldygcigobzheqzkyxkrxhkvshiilh\",\n          \"tantqatgetqedlpiwtlsnnqripoawhlbuhbzxsinors\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"lmojrkbtusjgktbl\",\n          \"hbhxvwdawpqslvlmuzsievmrqczpqsyucxjwcfniuuxgxttttjfl\",\n          \"auykktxwtltelixwtbzbywuaxhkjzbiznivdnaxsxxgxpktdojaztdzkeawgkqbzkhaczfubtvaptxa\",\n          \"dtbthftljhnstlqhrnlvpczspjvecmtilrfftjhtrfkrwyeyqvo\",\n          \"gwdatthzayahbaz\",\n          \"skqchglzzxclpqiootlqnvoikojdgbvgmzieizpibcigrtmztsfkefql\",\n          \"kfyshzhzeozyydhcnprhgyrcdiztupktaskuwxqegmnohctjqsytlktyajojtvaxksudsdyzjnpnsf\",\n          \"pfeybrubelmnussvtlxvhkbvqctpywsvoklqrcddxctxdqhecbnbgfrdpzxybonouqblzqhdxtfatngmipsetzukir\",\n          \"tfxeqrtfytok\",\n          \"xrmlhdkxjbmyfhznqrbffyyjokevhmfbadziwyntmtajjowwqzamejfqocrcwtbsuzazqtmolhynoikrudmlmigjt\",\n          \"jimzdfbyivknqheuplzhyojaxowsryfooxrdazyrhijgrnfopzvqxgymxlpkcwqirkiyizkvlshuhkmxtxhgtwfoljtxohy\",\n          \"pmcraytuvcsglvrwwsswtpytazeeusomxzaoectxextqhkrzhktctjkycphnmttcadlgjrmecpqndaqfxlubod\",\n          \"tynywwnntgtwbrvbunuwudowkfgvcqmklblqips\",\n          \"zlqbjytklklvucwlrokgcognjchpapomcrsouxwpeuzrymkyckpkuvbapqczmiymfhaymvogtqcstvlhrukwe\",\n          \"xrmisvemhgygnydnnmfixrgdjttmhqfuijpdfqeixmozcpsxiqhlmdqfboeehamerzdtphjdsbxocrdnyhphjkeohyetew\",\n          \"etfxtjbzvqbkphnhgqonmnma\",\n          \"zeqdcdfzgimrddpxgjaitpdaqoqwdfnvpdp\",\n          \"akcbsqjrurjnkzwpopnqbtoygkvmrwtffgloxjvxnyuyatbsbpjuycloswtomgeotynpht\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"khhrjsxqngkyswsssbaqfumbjvzqisatuxzhgqtmtclhdhbmiemtsmzlvfhml\",\n          \"fluecfvqrxtqtimfdbdequjwnhtdhtneqrlcbvhtrdnjpwxrtiwpnlrwfnnpoqxrwciifbkjvwc\",\n          \"tjohpticgtboteduabptlgwxhgyxmcqyqhep\",\n          \"rkhtkdyxlgyyokpdflgyvdcvh\",\n          \"tbpgrrsmjlyumkmtiimgxpuztyrjozmtppnxkpxrsgvtgfqketqtrltrvtxzgfdfcpoqusnwzgkedutowhycxsiass\",\n          \"yjottmalmtpteqtoiojjuzxmhiamtyrxfrpazfogrysxjleoachumktcwojjxkphkolyzwunctngqockvonechinandeuq\",\n          \"ftyezsnxdovwtwdnhmwuyhhcvkzdbdlz\",\n          \"qmzfyiebwvuktyyivnvqntaenncjpuxfrjhsmhpiwyjkqctuhdxmcolaxtjkalgsuftho\",\n          \"dbdjxflofdizuqatlvutvzmzlsdpzdsterhdmkdfzaqontqxllaleetylplpaoq\",\n          \"phbcosawkmbvegkdmeefwdkknitfntouvihwgxzzuxxbrzmuxtjajyyntirtyetkcukhsbiktxjmqtqllargoyc\",\n          \"gteysersjxgenoxinjmqfhqxiypqtvicleibkeoupauzhgaflveymerrfopyasnwcntkmvoxli\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hqgrofzrerqjotuqjqtrthzdushtwupcvwzjebftiwamhlutikzqzckhhkveobpsojimlctbktpobtlnz\",\n          \"vhplnjducmyxllczyxprlmwlbjrcoqqjdrvhedhfdtzblijqpgviefblhkgizstqisnlgtmpclwyvxfmsypilbt\",\n          \"duzzpssbavjcfay\",\n          \"snoxcyszktaemhhswhxsou\",\n          \"yplsqremzspyvtxwcxxeuojpe\",\n          \"ycgxktnahrw\",\n          \"idgymcirpycrvqtvscildxqfxqbumfpcktymvicitmqjwzyshnvaethpcponkxqvxglamoyxrwibtomwctmjnirptcseat\",\n          \"dkgkhkgvo\",\n          \"stohtdfkbgsudgsohcwtgyntlcrsrllrctevlzrbpqkkywqnwlnvhznvjjpm\",\n          \"xchngbcvnntqceskkojhyxcbfmpfeljay\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"nzfckfavipelxrwphtcubrpeitsnrabxmmldtfosdsfmdpthcthumlqlvwkkqfvnvjkwcczuhzklxkgdgqzuvtvlvviu\",\n          \"gkirphseykclxtjczkajgwpacwnnazsdwfpj\",\n          \"jlkiuvedyevtedxdrvfyztnvmtyotuqsokzpgvekowzhtzftumebwvbhxwkqlkccawutnktwxaumrvgmgeevgmkhawcvxbfm\",\n          \"ksoruhsmcenrvhgmxgzcaq\",\n          \"mothfupqtvujjvqagynxmsnchlauthscptaoflydpwntur\",\n          \"jxuvvypvsegtitsjavitwxpjnvjxfftfojwnerbexlusj\",\n          \"xadqvnpga\",\n          \"jnaajbblrxkincbrxgcesjmqtcmjodxkijidemntttcyldhvelhxjfripaxxqmuvroujpwuskmt\",\n          \"qxlheyolzaxogzwrplegzpfktrztkaybcderdksahhbsvwcxrpintctebgffausssbktpjnfevvjuhrvdhhlpxvznt\",\n          \"wzyictpzhmefsznoklzgohhpzdlzmtuxiucwmjpnecglxknlnkgncgslfpvvwpdrtgdbuwmhidf\",\n          \"zzpifltmbmzkqnwkhqe\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"kvmsw\",\n          \"qvzpmgmvkilgterpemjzpuczjslngutjyxiecyauyapttmpfthiuqolmdcncvzlxtowprhamjznvveetovckn\",\n          \"zxpgihaajvovnxnejkiuztavsvpgiptjqcthdznekjqtrcdvagpesomuhsltadruoaha\",\n          \"uwv\",\n          \"gbmirlpexfockljwcdzsenxozdlemuszatjligpdzldthgujknlwaahwfglrkaylrgabiwbgcwtdmlptitezkdzalic\",\n          \"lgwsomiou\",\n          \"cniatqjpuszrxptvvrylhxnxyebychhalikuscgqtpayvwpbayvtgcgqzmrkheq\",\n          \"lpuvafyausddkbqfpkoqtimsrb\",\n          \"wjwfepetzblssgxn\",\n          \"amoyrxshwbijtdlqwofblkmfjebellxenfjvoaeteleuldropcuqujjbcofvyrkgyajjwrpzrsuijgynnzvguhsdohckzp\",\n          \"ofadatepuekhmjndijpgnoxqxftcozwuoetgxczgcctjzfqrqkzqffokupkbtmsqncieutlsbwxucpzowtoemasr\",\n          \"tbjhtfybhpnxrtuqfrqeijpupcla\",\n          \"gfmdxbbncrbqmntpnggllvvpptxthh\",\n          \"slvrawdssahrtafxcajqxjonsjchzsin\",\n          \"vnndwzdlsilbhaeemdfyhuqmuiylerkmoq\",\n          \"qyrspypxytaecwtctjbxkhekpezdthtbqdeoroufcowszvljqljldgadzteyejapoxqmulqhhvtaw\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\"cssblpttrrzxlzgreowzmyloatzmkgigisufdammhdspqqecugnczffzdgkq\"]\n      ]\n    ],\n    \"output\": \"nqhdfuikaymcpsboltgrezxw\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"smxsbtngdiidpbymxhzgebgnfvqjlttseihptegekmnubdlowdpguptuzdemzxcnnszcpvrkzlhz\",\n          \"mwuqwsoclnttpfbcuviroinvtpnstblycjrzypqryikknztxhblvstxmauswufmhodrrjlwd\",\n          \"qnaaybtsnpwthfetanaxswjpfyohhtgofpdctxneetlmlgevvpcyvndejidzgtgt\",\n          \"mh\",\n          \"jliftctdgxxvfwpdoyfprccfcibgubbktrwfajhijhdcrhtiffzvktgpoyiiovoyfysftqstmzdicgqniiaxtaeokmkbje\",\n          \"ttrautsjyqrndiamykticrmwwqey\",\n          \"zmwdqbpvhvvehet\",\n          \"koqhrlcoooylqeqndnktubalxjnbgzhrjeetxydhdkzqzxttchlelqdjstcjcfqdtopqx\",\n          \"yucbjxdtbrzrrcqrzkwbjybrrtzqwxkugqzjgztkjw\",\n          \"upbtbwdqpsppzxawsgjfqtqntqypchvzzuppibntwnzwmrgknnswllcsrfnwz\",\n          \"ivaoyvd\",\n          \"fkzhitll\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"sfzavbarazkzdjlohvocswdsliexptsgjlyunytolpxkavqoymurqgceipvcwbcrpbqaktcjqlogqmtfrlbbzmnjblogl\",\n          \"autttzomlyshlsfdhfimyhrrciymvazltgthdisqsjnnzzijemhrbjozmtakzdkjjthkqswlcjouwhzplpjbyuh\",\n          \"plywwtiorrowstyyxhsghwsctvxbjoedhqazeyzbvswyqvevgztiuagrstffzvtykbmblkkccitbb\",\n          \"itchehrokbnfcdyaduxufgptxpvhwkdbmcxkpienhnutkrbotujjoimnlmefwjrjoukjscoytsccwpipvzljthhlcul\",\n          \"fwejzujtrlryuhhztrmwoycxmorwhhmfd\",\n          \"pooxevivgbrsupjtgbpjqxkeqrb\",\n          \"cqpazsfqcidksxftufenqrudgxdafozggdfgkaseomjzstwnfgtbsb\",\n          \"pxogdwukuthifgtacilrrakiidrwzfgizjwtakulya\",\n          \"vptlfsthscvkljtypfixlrbkvx\",\n          \"mdhhntpzpvnakunhielwhxsprozryijwditmmsylnsvtj\",\n          \"agpo\",\n          \"fgptnywtecthulflzsg\",\n          \"lgtodqsormmuahtimwarjslvhkjksgitz\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"zrucebcxgpcvxhfevdpihtkpxioacpdrlnljrispzhphkfgtbaohtcz\",\n          \"adkqdtpgpnlztusnfdseke\",\n          \"tsezcvtqjekuuhxpppkrtclruoxjndbntrwfbteszezzbwijoxtifxkwhjobhsrsjvb\",\n          \"mmznycxcgtyvevzeqjtkaoqtgwhhkifhwkglbskdgzqtaypzspbtdyhnxbwsdgsutvxftrlmoysh\",\n          \"jory\",\n          \"wcluayrotdokepnraarhiwtzhtetjyrvajzripwabgaiombxgdhdymvturiuypje\",\n          \"lrhclgjcogegphx\"\n        ]\n      ]\n    ],\n    \"output\": \"yqsnokizreuhcpbxgvfdatmjwl\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hccxftswgfavtqstskfooetmqvjcwtrdnnyhbhukmturdptjuftshvtrnuhllszvcaddtme\",\n          \"xora\",\n          \"wnqwcolmlazgzdctvdvkggbgewoumjigwgmayhta\",\n          \"niyaoizwcpivnkmxqgjgfyriaayngmmmlyzsjtzhnsqqbviupoyanqifnwcnzykecbrdsoyyiv\",\n          \"adqemjmgvlccrplforestxdukdhmygcfkfdwdxtymkgwioydzfoptzqsqareougfrrjvbmohqerpudtprqryhvtmlkfykr\",\n          \"pvohtrznzyrbqzmttjttbxcgkkxqhlibjgpcnszshwo\",\n          \"trxxlmxdadlofhkanhqzyrchoo\",\n          \"wpvtwqostzgfzwhbomtzotjgtzrtmzowejwcpjxtxnacvtyxectr\",\n          \"ljmevgnrpxignlgqgnwthzdixdvospozpamhcmoytqmsuybwfg\",\n          \"lnbtdlbtcbhcfkoyfwfnhrvomkgmttlzyzoxtwbelbrshakatrtyxyevtxbletngrkqfmtfeapokjpwtmookvp\",\n          \"kfxuswnuergcqybwnrpfxgbsnmvvnsdzwlsremyytsxlihtoufxtobnu\",\n          \"txcwrlfydrotulwsvcwhvwepfctgyfsliqxpgwvttawopsswbioqygtyvfdxdalspnjtteipbrgm\",\n          \"etjgtakwyfmdcsflkdtezfbinkxjdbwtoycymqqb\",\n          \"zotoytofxkxgtezkjxba\",\n          \"ysyintotvribuidnhmtnccehahnfqfgugfpfpknwamjdkmnxyrekbvytjfrkuckdeitpvejjl\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"ijazstkvttwxdlpptvkxzgcscvhooiqagraltdtsspapeyucpzpdkgykgdtxmdxnjqdmzpqnramyieo\",\n          \"dtdjrnyqodxnwisleuvrptxidytxumaiojxlklqttlbo\",\n          \"lwccrxiceaijaqajxqlkdmwttlbvddkmwumksefavfsvot\"\n        ]\n      ]\n    ],\n    \"output\": \"fbnmuyerqohcgivjwazstkxpdl\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"fxbbvrgzckqxvaqifwcmywgkbamjpjnacqytcfkoftpxghatejkjvpwqyuwtgtumvocyhjpvmoswhbcrfazhcgs\",\n          \"ttgjcbdmgcjvsvmbbz\",\n          \"bajhrhiatvzsgvkgmxltfeuueeryjdvtsaxussedftwcpiektwmhqnr\",\n          \"z\",\n          \"navqkkgmbtajjsvnsujryxexbthnmyjhpbhxetfgkqhqutcfrtzbsuzgqwhbbiab\",\n          \"ixeraxdlgnwdmvtebqspccelcjyvypjrndrjtmzmzjdzxbldkxwftoktzgyauzetlkhxqunklparhfiqh\",\n          \"towwgxgjjpfjbtrnyvsrtuuaplrbasutgqqammcmtjlen\",\n          \"ndqsncvnfckqacuxjwqvemgbhhszoxyezbxrapljrvskcfauiuocrdahqgutshamkj\",\n          \"gksqmtkgcbwzymbowquvtnvzjrkrklhi\",\n          \"crpxnoqjlyfuoitnczeyjvvjjokxyzxixrtikwhqqxbndbfjfppiklnvcp\",\n          \"rvrnztxgrgastdexnsr\",\n          \"uqecyxvioggdvmznvfpdpjqqszrgmhssbxrg\",\n          \"luzagqmtmmxfmyvrmtgffofouiwgbfobgwrpmkvyjpfztxzimtwuhknvtudygfmndcfkj\",\n          \"bkgxkofcwzaivvevoxotrjkjijnfkkxytrmdnrzdiscbjkxljdhntakiffavmrplntsrzjwikbidvwtbzhjv\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vfedxvzvjjjpcbozcgjqtjvonmlwgsmhzugqdaptttmzyrhvluefjjwibrbibpwodlbfeqiokxmdeujbvnj\",\n          \"izmwapgvzofdiupbncfjjxtpkkgfnwunejfrebbaptiiehdzgvyklotpgyqaykjypbv\"\n        ]\n      ]\n    ],\n    \"output\": \"kryauhswlmntvfedqxzjpcbogi\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"itegwiorzbjxgtimuxgysenitijnpyattdjlgvtztxfoukskcwrnxlestnkoteiqvfytkqufubmuipqttgbsvhizqafhuadkfti\",\n          \"avskcybimbolzzafdmjclflmwtpxzuijit\",\n          \"nazgmrqvatnyendrhpzspamjmpzxnstqsycytsqif\",\n          \"stjlytfvfdfopswccmujngtpcsxsesgsykjiletiruhigomndtcjtkgfktgcdvgrjjhptfcgravcsfadvvhq\",\n          \"uhydvjjpafbqnw\",\n          \"skvswccsia\",\n          \"uiqsxnafzmpwotqhll\",\n          \"avbuletqagmwxjwma\",\n          \"tcxfbeurmjzcmcrsbrwniiqkamoiaxpcziqkpiouutusyntcpcjmmzwwdoetbwgytttvmzgvholafxuatxnrdwphghdeqtyqlwrc\",\n          \"dziabqjncnem\",\n          \"ftkdydhwvhnebiqurocbhtkhwjdibvunwqwmmzzdxjaojiofeadng\",\n          \"ifddfuqwqecyekqegreduuzehkalwjbrkjpoeuxbgahvfnsgxnsrulyttqtjeytatejaxkblb\",\n          \"mblaokuvmmgiqamzbqblluvwtpttfcoowmsbxdifshwrupjeaeicjecfdd\",\n          \"gmfgqlizkgeoattyw\",\n          \"lqruqzogttsyucpuctgwcdmpzyzpavzyitvsllijpitwzbejhzqxlnxlwlrxzireibyrepnwjtjlfqxs\",\n          \"bzffrtwycytfatadltxcqrazyfqbvibtxxjolekvbczmdxfcghiwstemeowrledcmmteptdvmg\",\n          \"dbojcnnlripbrytztapjk\",\n          \"hqsmdvckapavegudexushrsijkzvmgsyhtsygtgwbdkijrcqgphvpddthbujtpenzbuqijyvfbjxtfiauyfcbuleiltzkkum\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"tfmtcniqdzdlpldrrydfggfuzbtrlmodgfnjczbtjddsmzvmt\",\n          \"qzutvnflo\",\n          \"aownhuqneqbpjjvkvacindimvuvrptcfjgzc\"\n        ]\n      ]\n    ],\n    \"output\": \"kehwvsjobugtfmzcpnidlyrqa\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hujbskhsvxvegbjdosurnodrtegbtkfldferniytvqcwvckjgntopcjtwwcmqqxjtppwoodzq\",\n          \"fiqymazbyksbbtuucu\",\n          \"czjpwppvamutpqvtnpbnpkzilsjbntlmvvmybqqpqfagjxdyyjzjnemzsevlphxsmr\",\n          \"yriqkxisiucnlcvoakxlgbcpcgqbjgiddazuynfgbjvwcmlxgwuirwvzfrdwjm\",\n          \"fpltzetyqhctkjppifpxqjnlp\",\n          \"tmpfxmyvcwrizqtnccnlbirmyethggmnmhwgvuqvkepvw\",\n          \"ubvuanvwpgrmahczxattxchomkgfspp\",\n          \"zbzgemerzwsdmqntwcutdditilftseoglkvtyjuoppkxvpujakhrtrbjgdbiksaqztahnwmxdtzoteigiiytnehjivkhoqthxws\",\n          \"zys\",\n          \"rrttlyioratjsgipvmayemgivjjtxjhndjxzfxq\",\n          \"qftlfcukkghdhzscyqoiyanvnfryvyfwkhfwyqlpknttrocdekwoazxhmerpbrkosaqhq\",\n          \"gtmstuakexfsettcntojxtyttebisrdhqaonfuffjyttgygrncgvkpsgus\",\n          \"ilztjbeqnqwijjtxqieftnuiyzoaxbwpeozioxpbjiufwojtbntxjanywvjktseastmeolotwrsxaytwrv\",\n          \"eetduwoeixtjydglllgycil\",\n          \"jlhiqultmlfcurypdupdfvyekuwppirrcrogdltgcjfmsydabtuubuwdutveessuqgdsgrlrcrjnygjbdbvjazhtfgdlbulteh\",\n          \"exakufnnxooqotohebqgycnsftjnbjh\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vejzpejifqeactldztwybtahuiyatghvijcqkeefl\",\n          \"pubidyelwutxlwkpvluumshswkfsivwwizrpkgqjtlkixlxggxejmrvqaaewtmnbjbzubzmqqlswb\",\n          \"oleptxupzhxtitetjfgdcc\",\n          \"tqmhigmsghxottrcjutzgitcwhwynicytsdmlviruocfbxuztqtj\",\n          \"bffdtowqksqgitvwfvdyxvigodftrrgikttdneifomhyfzxgkbhavjtkfgvtwjomwhkjkxudlhct\",\n          \"vqqbtdvesqtteijmknchnqgasldhttduiuidhkqahkdqjorvhroywtotqvamwomqyeajxtcugrlo\",\n          \"qjyptmgtirtwxntqtcnyxcsjktgfvpacbiefoklgpgynpmepmpbq\",\n          \"tsfhxpzetgwzgsqlzy\",\n          \"rbyijfsxsmkwbowlvrngsmxnequahndarykjhjmetldfdpeftplrnxbiplyjocqqshatpeut\",\n          \"yzskqnijrsnkixu\",\n          \"waftkfbzqzqfqqpkziktsgltunyztyinbsmtyhtptjgc\",\n          \"gewtyxcljafqikelinrnwcfdnfzvtecnbqnpuptikuvfhndsmsocjfwqfrpyjeeqlvkscmvwttzsxowzbtenkxajqamhyne\",\n          \"cqsgcnquskouvzabtqtluwaczugjanzhrvcutuqckabo\",\n          \"elhrmlbcvfgnkmolmsorwxlfodythhiwwhmvrbtzkiytraajvoncn\",\n          \"abeocvmkqerfzyfsljoaiyuiuhictruqdttkktkoyowqovftmwubuthaqvjpsarszacihtm\",\n          \"seljrnyfykqebtiutlctcvrsxcaljsokxmuekqnchikibdajnfwafgfpqnrtwhprwemgfgyjgtsgg\",\n          \"piyvwyvkptrubxvdlkbtxqqyvqvuvbjhmajqmkeobmikfagionkgvspcmlbvvtmbtjaltnr\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"xxhcatxqyg\",\n          \"lmnfzgwflhhbuhetzyosfpgdgcdrzjjglcgtvsveguycntgskxpsecxwtbibfkgsuqdkqamykthbj\",\n          \"ykvbwrecfklqcknkyxrcrqczoxoyxmoqzqmyaawpxrjaverrdxwjqppeoypohdwhgxoiuzpvvzidq\",\n          \"lbtcxrngstsosplgb\",\n          \"pghvsjuj\",\n          \"zbheopdpsifmswjhjqffghpgcpcyyxbeciteotogzmzkvtbytwrgvtxtczslcbgptfzwftamugtzzbbg\",\n          \"xhobyhtzlbhotqrhxgnvsmgtypqszapruverabzwbbxtcwszshrblxyxtvueht\",\n          \"xsarghojfvrcmoianozcbfcegdczrhfktdtrqcg\",\n          \"zeswswwlo\",\n          \"qjllbjpltrglpzmgdwjpwyswxqnzbaisuqjcdrvmvrcqlrepcqctybwmpchldstkkatit\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"tzmtfsingharfgbtyvieximmpjkxrdxbxbhjssgvdagukvqsuwwmrknmuypottfznalyuh\",\n          \"likehgfuotwugawcahptskstczgetizkdlcxftkzgmtpkrysuzgchjliwtregmlmqmawiatsfeekj\",\n          \"bnkfhotlmjdvyvnrqxhqdoyxulwhguadppwybgneadiqjwsi\",\n          \"xsuciyqytxqgtadmtahtduumdefk\",\n          \"jfgtsgiohadsfanouzsn\",\n          \"il\",\n          \"rohigpbyctvwmjcgcybcymatvfqiadzcblyhmzqcmhjonfvwooschtchgdlbqevmtftidbfnhjrwpptgsbu\",\n          \"ixxumrtooshgvtzj\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hvzareglrpfmowvucpcabame\",\n          \"sjzvhizovypbpqykjgymetuftjwzxoovtrehalhhrmzedyyvmtgz\",\n          \"vbnxutvzprffbmeswzz\",\n          \"dhlu\"\n        ]\n      ]\n    ],\n    \"output\": \"nxtkqyijbcuhzmareglpfowsvd\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"xcrmvylkyxyahtbfjyfkoorqblhgvi\",\n          \"tjlk\",\n          \"dtrbfukmrhvqvvijoxiatbtkmysavnhmrdxptleiuhrlfugdblixnvezdaziztd\",\n          \"dnkcofdpcyoaztkfujgjjvbetcztjtuksbvmixv\",\n          \"vtpqbhalolggssokmpxuzupxsaxioztjnsaptntytmmckxxtzihzapplyxzufrhrbopyvtbt\",\n          \"vxxastpsagliczhlhhttrbzkxslqdhirxckofngybazhwcubugzupxgdutscetihkduzskwnyqwclwlaylrygdjdkr\",\n          \"jprffkhitjauokafftqsbmarvsisgdkmosikeytlpwtyscungxcjlazqmutktpaohzbrezsqsojriwu\",\n          \"mvndjfqtbnrndkdyzvhqldolpiadfmaaonnilndqdtcoskqahwholuktbppfihchiktehtcsjpplceeupolhdczueph\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"rfaoptpmfuguqvzhyudumfpynwdwitxzrezmlskltnfkqw\",\n          \"dwdcwtd\",\n          \"hdosftabrjbbhxgtqbamoxzs\",\n          \"amjutgnmhfrmjhpppdssj\",\n          \"jqgcdlozfuqzsyxjxipsprfrxt\",\n          \"stkbfdfirtbjglysnapnandhercyzphccsndnwitnucjedkytiadmbqp\",\n          \"eoftbgeqwmujglbvbcqsliszmoeljawdcbooewkzrwbfwerctkopomydphobsyernjcsrxtbzvxxx\",\n          \"iwmpmyjkzlhkxpzjqabtgus\",\n          \"lsofqogymxtbrupjwypffimqkgzeunukjvximqohmdzftemoixhqwrvjcipvtdhttgmxviaatmmdw\",\n          \"zphpssloeisongftxgphlvxlbmycuk\",\n          \"xbnjckflgjcmtfypxpttpklkqslvqzcyacbjpfgadbguhykebyeddrlsgqectdgrcoxmwsvkzxspalqbrphv\"\n        ]\n      ]\n    ],\n    \"output\": \"bckwnyrfoptgmuqvdhajseilzx\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"eqdnlxtqawadzyeiwfpbxjkpuryahzbhugnitdkfhrgxrnimtgh\",\n          \"velhlwfjkqjcwuraxwlyymiftommtuzzqubzriicvygmfhbkhuthic\",\n          \"osbmtbfwpojqrrkqwrfmapnhekvxfttblsqiahbbvwkwnvtcwsdlhvhmtczphispsnpxlg\",\n          \"colxgvtlvdrxvcjnhxoanwqxthmftyrututdrzeiyhwttsgdwkppwtvkeu\",\n          \"pbmeljugmgkhtcqxhebrxanfatxrotwgltdbhncxbyrmeuhltcjzwaitsvekutnttbiorxujypnhqxilixjlhmfydizwttum\",\n          \"hyyg\",\n          \"zrvwnxn\",\n          \"zwvnolvclehkfherjmbolamoamasxbhzumqynarhpqrmpuumacedttqsdqa\",\n          \"zfbrxeoqupemtqjdeiktmdxrrlhmkatgtluwztetiyhzbsfduqpgiugbaqtzqytjnubulonxvhxonubokjctkisduz\",\n          \"d\",\n          \"inackfzobpujxnjlloxipqbpkyfkxa\",\n          \"vxljdnnxrvngqrcilyqlzkbwcnxuwaffsuyrgnvntdgciyhvuwladtortgoxhoyinhppzi\",\n          \"tpudrosnhykvuva\",\n          \"lvtiszqbcqvzeuyhwyldzsajgeisjyvfgdhpxeacwduhqeb\",\n          \"crxrzbetshzcshqgrteospetzwuqzqxceakavjpbgikllaitovtoafvtfkfcniqbbadwomezzpcim\",\n          \"qwtkvftybhbukzptbodrjoyxvqtietnbcf\",\n          \"nvlihzrntmeeanqzcbqeeogtqenqxgutmfywttcdrcndjprmgcstqaxdiyibfxzptoztbrvcjhtquasbtgntvpttbeetbpikrwzd\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"cdwkqbgwprmpbutipfznyfncsylnnrsxrfzslytrq\",\n          \"nxjyhjozeixoewxdturmjentaltrcpoiiugzhfqcikj\",\n          \"yke\",\n          \"otfdskhleohtjabyngumvvkxbophkpvyttnanidvycfgorumrjtfrntfeiaqpipnehpkzipkbalmijqbdouevekcrglbeizdzohw\",\n          \"alfpvtsiihsfyotzmzcihffpcmlsyarnttnpqbu\",\n          \"vknxp\",\n          \"emavdrrfudgdwztfznvqfboirqvcljctscxhgislvldzgwbmlubcdxfpthptrtuwftjiedvlwittsslfdmisepsdssvjpdngr\"\n        ]\n      ]\n    ],\n    \"output\": \"hjxlszfcpdqwkbgtrmuinyoave\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"flnxfnztwhxzdvtocmxpmdbgnsmwxkmjahxtktdapslgqwkfhvborandpakkrwiduuclgvbintsyxguilpnhcwqujnwkxawoia\",\n          \"nvhibjttlcxshqywmxztjuwwuiuiistipjjdmxngfahooazz\",\n          \"uuqdkqafykfhbgzvcheprutlosnukbmytztrsbzilffeyomcwfshzztkuc\",\n          \"tonxjwygmtecuyogxyvjhesqejuiriralpxkferkjvsjviczi\",\n          \"yukaclenwzmatglayhkdctma\"\n        ]\n      ]\n    ],\n    \"output\": \"eirqajksgbpflxzmwhdvocnuty\"\n  },\n  {\n    \"input\": [[\"words\", [\"m\"]]],\n    \"output\": \"m\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"afymppglfph\",\n          \"wbupildxcmupqssx\",\n          \"oikgwgumtaiozqgthotnqpjivbwudofxbssktarsdfyegntdpgyokqyyqk\",\n          \"phiffmitauxtzvjwcaeftbcsjqvfjtwvetlhpksgqeqdznvmabdiotpzqtznxpvtkgrljvrtlhnojcc\",\n          \"jmshidcf\",\n          \"thy\",\n          \"scvpiarcmumfvaudhoklspcjjwxkjxtuuodfrwfwubetveoybrticpl\",\n          \"pjwtci\",\n          \"kg\",\n          \"k\",\n          \"dzizutihugctt\",\n          \"uolrnshtefjsmrboiwyauxbenweenzcyytyzinyghxkrnyzllnwolnvwfjg\",\n          \"zlxmmtlpldohzvpxkiajbcitcnulligdzvsnmtchkqqemr\",\n          \"rhthcteshygsstbadavhrtqmx\",\n          \"yebzgjoddgsxttbtiqugayseqicrxteod\",\n          \"kdldonecimvunftufpcnrmgzucwrfxsmhk\",\n          \"lhpupdjkkexjbkprulaoqqrxhuqjc\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"ntvbwrgrhtkmqtxruuvjmygcihlomoegtnpvfaihjqkhceqrynozmikt\",\n          \"zteacjcwnyttyfcshdzgeyoxkffatselhvehthopwrpxcrhdbsoqmwx\",\n          \"qsmbbyikxb\",\n          \"wwivvvqskfmtnektxmxdwmaukpxqggvzddxbcppsyt\",\n          \"qosjtvjwxlkqepmhmnqdtnkiacdqzpitbmjcaltucwibfyzmkucsrxzgqztkagtbkictuwieiwmhsqxprgoqwxvtndbwlty\",\n          \"thsmztztfptrsqdwbhta\",\n          \"oggamyuqbeshypxntpttfxhrtwxtyrwytliodxsqqpjoeexckkt\",\n          \"jthyggjupydnclacktzydaqnhagcxeeaqqnbzsyqqnymoeiweietvifuwbdcsdpmuxjrrln\",\n          \"tpenyxqnjagcyvuexmivwgpenjzsnhexxrxhoyiyjfyfntakolesvmtjvlfryrfzxtm\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"rwjyoerhdfnxcpvpmovzisleomvrgiytjwbqvmlntfghbsovwhtiwektnkpgoekqiojrhmidxwk\",\n          \"cbfxzscpexphjjasbjmtnkktppeupotjkrlpzlrpflthwudezthfoueuscydqqysbidhzr\",\n          \"blljcopqllhosijgh\",\n          \"ytbxhtctgubobrtrmrwtxaecnblctbfkxgzibdswweblvqdmltimfooft\",\n          \"qntutgidxbaolisuqzxfrhtwbvsutkjlemlbbvesuvourfsuhngdkuvahqznoymbjdqorxbsrudcgiksfdwrmizqqyhcajaihm\",\n          \"pvnruch\",\n          \"qouvytgqfhwaizlavklpeolalmnhnttnfglmgbxjfatxzvvcjfhutokxeuoicibvzammrgbrv\",\n          \"lkwvtzckjvgnuupteldohapyzlomnxtortultvjea\",\n          \"iogzjdpjwlpsvpmvviuhdowzmwzggrxlkjkeuje\",\n          \"jrjbhtwgxlzjsjxusuemxquhzlyllzwquwofxhioafucqqvjjzvqstcxtuvaifpnrilgdriqtusxhv\",\n          \"zfrtxkgikamcarrbzbdgcemivrhddjfrjcxsfwbvhkytyhmcmdvindsvuatolsorwtgqcyyeiegcmcsktdsv\",\n          \"jkmganaurzhysdsofgzpbyutvncfxvlzlhazbvvilpfkyggcp\",\n          \"tvyzmyjtlrjfgcvagmzscbtmbcgrbtskcyhtcyztyqaiadmxkfhgtpbrnodevkebhthxedpjdq\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"vsgjlotfgxypiaynwbzucwnqqretjnsxftzux\",\n          \"dhajfxlfyzwovuyyuegpcylgfgdhbtnlbrsoihanncysttiebxwtgxtraizumrahwwg\",\n          \"qboqdodfqogppoxzbxliyylkxgrzmhyaxyuzncavxgnxyyfyroavnzdstoimzicplpbkdajle\",\n          \"dg\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"veyxnxgbxtiqudibyxn\",\n          \"tinakylsheztjeezjzaemvtskxntmkxudyofofctxbtbjjhcolpbxzujkuthlmpdahtjmrahklctljisdztylectv\",\n          \"zfavhttlregkfujwjjrhmfohbbonttsnouaalxeafttdvycbxnpubfdrwkrbaaqyrzbndnssyfkaogvvztyazpztffj\",\n          \"ybftmpymptgtoibosjkh\",\n          \"tuzuvzpwwttvytjxoygrytpsemd\",\n          \"ozxijfliihsrgiwe\",\n          \"vemgidnwqmkmdukrnosgvoacbxrydspnrfispsaqf\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"sgbomjihlhiohytfrnabo\",\n          \"skpyfjtetckbvdgwcsawsuwfqrefmvunehtwihwkvxthivvhcgtlxixlfrjsnpnmjsvjrfmkblnqktxzejzdutgfmiwmpp\"\n        ]\n      ]\n    ],\n    \"output\": \"zxquwdvcepansfgtbomjihlyrk\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hlycaggefaptyjgzlatkhbzsfttjlenajdrpjbokgxsrhsaqvhtk\",\n          \"ltutoieaqdbgzifxpeqkbiw\",\n          \"hjilipfqvwwxzvjtpacscniczvzyhrczdehtizgwrdqhzwjjscfdjwodinovxfxjnaqafnqmuwtmtmpdcncjwtlwtyxdpdputy\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"nsrpevltacmxetmxvrkdmdsnlzonxkhyixztjobfqhstxn\",\n          \"ygcqitritthvpzfqlqxxdvpcauwcsoaaysivakcrwdhhbnaobrtwtsracolltxhcwuvsybxujnbamsvrulhtwghu\",\n          \"odmohowwuriyrtdfjbubxtrdgnjxyjiorythtf\",\n          \"ettseustptnztrqbqdteiuxznxtcniqduttmlccvjjtbg\",\n          \"tqqoiqghwlpnxxxgsmqawjrrqifzrthmqjwfowifelmtvbdtantggsaoycpgdtvbbjiqr\",\n          \"bsdenzitjdlexjotehfkaepfhnewckgtyxksldtxkgitibqcduvwhhomshliilmcwzqfuwpukkoxiabjkgdogramdtlocfz\",\n          \"alnneqhcoytdveyj\",\n          \"cfczylzhraqszrjeclpqhkznejyweojzlggvxtoikznajyflqvucxjcy\",\n          \"ddsifrmtqiijiclrlpsthulwocbttjwlfthduefpnblytwascxzgpmegngobnnlsyvnuhoiyfyjrlftdobm\",\n          \"dsiztbbbixafwoojt\"\n        ]\n      ]\n    ],\n    \"output\": \"wugqfjihznrpvlmxkyoetbacds\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"ucmyzfqwdvftdjccxzkfsoccwwkkxbnbgsemmkwwpyjjwdkvlyhfmchqgzxcxrrtrnxbulrklkstctrxxwertpnpgtedvznqgbd\",\n          \"sxjtovy\",\n          \"mtnnbeeizwmygxnxrdbnttkprcnrddperkoxrifxuahtrabzthnfopiinsudnxgtimgtapooacvymhvwepwgmpjwvxwxrjyi\",\n          \"aebyltjojmqydemsqlgsznabttghvtptpatkwrznghkcgahwwvpmzksqjssgdqwbxlgvwytdzdektktgnzgk\",\n          \"cztzvrryoonhshkyyaoqbjjoxqufgkeomtvoyybigfrzhyt\",\n          \"vqkpsrcdzjbukdnnpxqruysbfnndtbtjpyjwutaidzatftjoflyzszdsavilctxewmggrfmzupmvu\",\n          \"skhegjetkehkdltuvtgmgjdmftkkbbubsayikoasvzwelenxlpbvyjyoiwuafuhknbnloa\",\n          \"ga\",\n          \"zcpxgesgdxuttwrxkesitmetgcsapeywgkdehbpoptiqikuivlifoyvqjlivftjedkkdtqryfocm\",\n          \"lqejovieaoztdyliajkrumkadnnzhqmamizp\",\n          \"paqltzbtpostocoitfgewbwpddwmfttiyttklwuvnzugtbwzyw\",\n          \"ooetaebfmarwjpjfzvasvyekenvtnpeotllrgsrtxqfuvzbcynjun\",\n          \"kecqvbsmxkwzbcntvltimqdfrgottuyeqigkwfznjejvewqok\",\n          \"nxynefq\",\n          \"wogjdgtwktxcnlvqkwtkcovnfcippsogzcmticpjmbegapbpzowtksjbrmfxjdtesbihbpkufqjjfmhqdlhabqaqlyrkigjo\",\n          \"vqjlhyawngbuhcywtpkguzvmuuufydxmsfmvefqensv\",\n          \"rvufwuptffrnpm\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"hbditmpvnnadnklsjg\",\n          \"mtbmxzlyaxbhkwgzcgokqtbdoucrijhtamlvlwvunsovwmfpkfrgdqvkmdvtvksinvpmeyjzu\",\n          \"piexffwhurakfh\",\n          \"smtzommhrcsb\"\n        ]\n      ]\n    ],\n    \"output\": \"efruqocwyzxgjhbdivtnaklmps\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"waocygpqxjqdhcsxlpxbbbltymxryjsiqzttatarijrqahqrvisvhozubbjdpzlckzlfwgnyvhnblwepgkhahtuvfizh\",\n          \"ttifhxdctowubyihdyifptwpwxesxogvltypgjcdhusjwlfkanwthcqebdxsdokpftgjansqibqjbxmoyvsosnssbty\",\n          \"tlixqcsxpatatqvbzgwxkvcvswnusibzvictetuglsktgpwugjyhqg\",\n          \"vgwvokorziaxtttabhsggqcuceluaiybagxwnukobkyfvffkfwirjuzsftcwnpqkzpjpxjmteeetkivadfrhfwnoueseabtvl\",\n          \"mlnmusexnqldgtvqmzwfxmpydbpxrmugezbhmayfwkaqqxykptiuvqqrpwfxvysrmdrttslghkciftonayfywhdxzbvzfj\",\n          \"pyrtkjvczebugjvairaophroaplgpojirrkdqkjgmyouyfsabvovqrmr\",\n          \"fulwtixtzghshltlyqitwfyiavigzlbasgzawumiusbdddqmintfsm\",\n          \"eqmbmlxob\",\n          \"xrbq\",\n          \"bpomtetxijrxdtlsrxiqvoywzixditqfsmdjjrawhvyiohwbqnhiknaiadredsehzqtlhiiuehwfoftk\",\n          \"wbchxgwaetuztqqxqrezaquxdksjpfyrqisdqigb\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"zeykiwaubqyxairirfxatmryrqatebgwjurbxgfputhhdavgnngzqtqzhvpwow\",\n          \"swrtmrtntokwvrpgoxwrkjabjofhkzgptlwqemaeddtvymwiakbayqmhmijgt\",\n          \"ivytmmqutoktybqldcepvmcwtljngcaletyxsazhvedimot\",\n          \"blcbsmzzbewxexphtzoxthldxxarldsacldamxxdbdqbuzxw\",\n          \"nzthqfyeskogljiqzssgtunbnicumtoqcyahcxdnghzmfvlladwnnnasnalbzmg\",\n          \"urdkqheqfvbxkwcmubpcu\",\n          \"sonpnbnlrugtbxhapzhjafbaninmfuxsfbqailopjvsoxbzjhriywxvkcnhfgutrdsimiymkttjnfiznlzlg\",\n          \"memftooywiwrcsjykejxtwpw\",\n          \"jwobffcgqaotlourbqdmgplmhltotnvtwdkttvtkvllhefwgidkeuciwnctqeajfjjyxcuexphmdxcavmgyvf\",\n          \"cglnpdjudfjefqeigaevvdyjpcwadjlwyzohibusuiotnfajxbkyufqdxsjtjoqxhxapuxeepxt\",\n          \"lapyihwqfdhhfrupepidjlotegiybk\",\n          \"fajdccwtjfzzbvzsrrmwyfrqddrulprdrvwxmsenxamtvwbgnwgwhewhqyvnqrjklbpllntcktftsnsbo\",\n          \"jrofzppehjdnwtwhdtsleethtltmhcthgqayalwyrkuvwtttfipkzjotkui\",\n          \"fqctrjlrjsloowaszptijkzfjldtuijtlnjqujsytjeflkdspdamnckskupszpgdynyguv\",\n          \"tzzyxylmioawttyjkcujaogotxdvmpyooqkkftnpjztooucdzrnlvblglstaompvuyrksi\",\n          \"yyxapgvrjajuntaljkheddumonbrdsgafiiniygefcyplitzhbdekijzyyithkhbrqqgj\",\n          \"ykvvtkgekumukkstszqwyztkzwbwvjgqpitqlreivrfniwxygdty\",\n          \"zaccobgkmnbatqfzicrnokleudtqygjxm\",\n          \"fldtku\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  },\n  {\n    \"input\": [\n      [\n        \"words\",\n        [\n          \"dtiottobhijttabpxljepbtgfsfwilzaddit\",\n          \"nfdaifkxasyhhoizyegapxpbkmzglf\",\n          \"o\",\n          \"lnljydfipkdtedgjfcghsphsntzmowty\",\n          \"euufuwz\",\n          \"pfqzbqomcnjemcibvpkjfzthohgotwgqzrcqctsgzibpwlpynvnubyuygvdeeucb\",\n          \"nilqqyrkltthboxotltvpzwzhkgtvthmmhxhlpfvdvrtqtfkurrcusowpvlayrzltkjbfonrf\",\n          \"dmhwhviheppxvyttrmmpguezubynbjfuuczbtgcmctycbhlqjwsvhfajffttukofawptdmajdktwafxqfuju\",\n          \"xfqdplffzinpacljvnbaiztunmchdqrusbutwltoxtmbwudevzahezyyghohfkxglehpxeqtseqexeszvy\",\n          \"mctcmlgbwbzzewhwmcgmltkhhjl\",\n          \"sltgcqpbmfehdzkpluwxbttyhacb\",\n          \"bdjmwiyabgetziljzmsqyucrktclyiuvzposfntjknozgwjiksaffdgxfdusurjtodlaszdtnlcvllrabpisk\"\n        ]\n      ]\n    ],\n    \"output\": \"\"\n  }\n]\n"
  },
  "info": {
    "excerpt": "Implement a function to verify and return an extraterrestrial language's alphabet order",
    "title": "Extraterrestrial Language"
  },
  "metadata": {
    "access": "standard",
    "author": "hiten",
    "companies": [],
    "created": 1722384000,
    "difficulty": "hard",
    "duration": 55,
    "featured": false,
    "format": "algo",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/algo/extraterrestrial-language",
    "importance": "low",
    "languages": [
      "js",
      "ts"
    ],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "extraterrestrial-language",
    "subtitle": null,
    "topics": [
      "graph",
      "topological-sort"
    ]
  },
  "skeleton": {
    "js": "/**\n * @param {string[]} words\n * @return {string}\n */\nexport default function extraterrestrialLanguage(words) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function extraterrestrialLanguage(words: string[]): string {\n  throw 'Not implemented!';\n}"
  },
  "solution": "var Component=(()=>{var g=Object.create;var c=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},s=(r,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!w.call(r,i)&&i!==t&&c(r,i,{get:()=>e[i],enumerable:!(o=f(e,i))||o.enumerable});return r};var b=(r,e,t)=>(t=r!=null?g(m(r)):{},s(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),q=r=>s(c({},\"__esModule\",{value:!0}),r);var a=j((S,d)=>{d.exports=_jsx_runtime});var F={};x(F,{default:()=>B});var n=b(a());var l=MDXCodeBlock;var h=`export default function extraterrestrialLanguage(words: string[]): string {\n  // Step 0: Create data structures and find all unique letters.\n  const adjList: { [key: string]: string[] } = {};\n  const counts: { [key: string]: number } = {};\n\n  // Initialize the adjacency list and the counts map\n  for (const word of words) {\n    for (const c of word) {\n      if (!counts[c]) {\n        counts[c] = 0;\n        adjList[c] = [];\n      }\n    }\n  }\n\n  // Step 1: Find all edges.\n  for (let i = 0; i < words.length - 1; i++) {\n    const word1 = words[i];\n    const word2 = words[i + 1];\n\n    // Check that word2 is not a prefix of word1.\n    if (word1.length > word2.length && word1.startsWith(word2)) {\n      return '';\n    }\n\n    // Find the first non-match and insert the corresponding relation.\n    for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n      if (word1[j] !== word2[j]) {\n        adjList[word1[j]].push(word2[j]);\n        counts[word2[j]]++;\n        break;\n      }\n    }\n  }\n\n  // Step 2: Breadth-first search.\n  const sb: string[] = [];\n  const queue: string[] = [];\n\n  // Enqueue characters with no incoming edges (counts[c] === 0)\n  for (const c in counts) {\n    if (counts[c] === 0) {\n      queue.push(c);\n    }\n  }\n\n  // Perform BFS to build the result string\n  while (queue.length > 0) {\n    const c = queue.shift()!;\n    sb.push(c);\n    for (const next of adjList[c]) {\n      counts[next]--;\n      if (counts[next] === 0) {\n        queue.push(next);\n      }\n    }\n  }\n\n  // If the result length is less than the number of unique characters, return an empty string\n  if (sb.length < Object.keys(counts).length) {\n    return '';\n  }\n\n  return sb.join('');\n}\n`;function u(r){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",h3:\"h3\",ol:\"ol\",code:\"code\",strong:\"strong\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"1. Using BFS\"}),`\n`,(0,n.jsx)(e.p,{children:\"The problem is to determine the order of characters in an extraterrestrial language based on a list of words sorted in lexicographical order. This involves inferring a directed acyclic graph (DAG) from the given words and performing a topological sort on it.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The algorithm:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Builds a graph where nodes represent unique characters and directed edges indicate character precedence.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Uses Breadth-First Search (BFS) to perform a topological sort of the graph.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Handles invalid cases such as prefix conflicts or cycles in the graph.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize an adjacency list \",(0,n.jsx)(e.code,{children:\"adjList\"}),\" to represent the graph and a \",(0,n.jsx)(e.code,{children:\"counts\"}),\" map to track in-degrees of each character.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add all unique characters to both \",(0,n.jsx)(e.code,{children:\"adjList\"}),\" and \",(0,n.jsx)(e.code,{children:\"counts\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through the list of words to establish precedence relationships:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Compare adjacent words \",(0,n.jsx)(e.code,{children:\"word1\"}),\" and \",(0,n.jsx)(e.code,{children:\"word2\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Check for invalid cases where \",(0,n.jsx)(e.code,{children:\"word2\"}),\" is a prefix of \",(0,n.jsx)(e.code,{children:\"word1\"}),\" but shorter.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"For the first differing character between \",(0,n.jsx)(e.code,{children:\"word1\"}),\" and \",(0,n.jsx)(e.code,{children:\"word2\"}),\", add a directed edge in \",(0,n.jsx)(e.code,{children:\"adjList\"}),\" and increment the in-degree in \",(0,n.jsx)(e.code,{children:\"counts\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use BFS to perform a topological sort:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Add all characters with zero in-degree to a queue.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Process each character from the queue:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Append it to the result string.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Decrease the in-degree of its neighbors and enqueue any neighbor whose in-degree becomes zero.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Check if the resulting string contains all unique characters. If not, a cycle exists, and the result is invalid.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Return the resulting string if valid, otherwise return an empty string.\"}),`\n`]}),`\n`,(0,n.jsx)(l,{children:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Time complexity: O(n + m)\"}),\". Processing all characters takes O(m), where \",(0,n.jsx)(e.code,{children:\"m\"}),\" is the total number of characters in the input. Building edges and performing BFS takes O(n + m), where \",(0,n.jsx)(e.code,{children:\"n\"}),\" is the number of unique characters.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(n + m)\"}),\". The adjacency list and in-degree map require O(n + m) space.\"]}),`\n`]})]})}function k(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var B=k;return q(F);})();\n;return Component;",
  "workspace": {
    "main": "/src/extraterrestrial-language.ts",
    "run": "/src/extraterrestrial-language.run.test.ts",
    "submit": "/src/extraterrestrial-language.submit.test.ts"
  }
}