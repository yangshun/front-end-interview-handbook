{
  "description": "var Component=(()=>{var g=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var n in e)i(r,n,{get:e[n],enumerable:!0})},o=(r,e,n,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!b.call(r,a)&&a!==n&&i(r,a,{get:()=>e[a],enumerable:!(s=p(e,a))||s.enumerable});return r};var y=(r,e,n)=>(n=r!=null?g(f(r)):{},o(e||!r||!r.__esModule?i(n,\"default\",{value:r,enumerable:!0}):n,r)),_=r=>o(i({},\"__esModule\",{value:!0}),r);var l=x((k,c)=>{c.exports=_jsx_runtime});var E={};w(E,{default:()=>v,frontmatter:()=>C});var t=y(l());var d=MDXTestExamples;var h=[{input:[[\"words\",[\"cab\",\"abc\",\"bca\"]]],output:\"cab\",explanation:\"Comparing 'cab' and 'abc', the first differing characters are c and a, suggesting c comes before a. Comparing 'abc' and 'bca', the first differing characters are a and b, so a comes before b. Thus, the order of letters in the new alphabet is 'cab'.\"},{input:[[\"words\",[\"abc\",\"ab\"]]],output:\"\",explanation:\"The list is invalid because 'ab' should not come before 'abc'. A shorter word with the same prefix cannot appear after a longer word, so the sequence is impossible, and the result is an empty string.\"},{input:[[\"words\",[\"z\",\"x\",\"z\"]]],output:\"\",explanation:\"The sequence is invalid because 'z' appears both before and after 'x', which creates a contradiction in the order. This inconsistency makes it impossible to deduce a valid letter order, so the result is an empty string.\"}];var C={title:\"Extraterrestrial Language\",excerpt:\"Implement a function to verify and return an extraterrestrial language's alphabet order\"};function u(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h3:\"h3\",ul:\"ul\",li:\"li\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"An extraterrestrial language uses the English alphabet, but the letter order is unknown. A list of strings \",(0,t.jsx)(e.code,{children:\"words\"}),\" is provided, which represents words from the extraterrestrial language's dictionary, and it is claimed that these words are sorted according to the new language's \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Lexicographic_order\",children:\"lexicographical order\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If this claim is false, and the arrangement of strings in \",(0,t.jsx)(e.code,{children:\"words\"}),\" cannot match any possible letter order, return an empty string. Otherwise, return a string containing the unique letters of the extraterrestrial language sorted according to the language's rules. If multiple valid solutions exist, any of them are acceptable.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Input\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"words: string[]\"}),\": An array of strings where each string is a word in the extraterrestrial language\"]}),`\n`]}),`\n`,(0,t.jsx)(d,{testCases:h}),`\n`,(0,t.jsx)(e.h3,{children:\"Constraints\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"words.length\"}),\" <= 100\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"1 <= \",(0,t.jsx)(e.code,{children:\"words[i].length\"}),\" <= 10\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"words[i]\"}),\" consists of only lowercase English letters\"]}),`\n`]})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(u,r)})):u(r)}var v=T;return _(E);})();\n;return Component;",
  "info": {
    "excerpt": "Implement a function to verify and return an extraterrestrial language's alphabet order",
    "title": "Extraterrestrial Language"
  },
  "solution": "var Component=(()=>{var g=Object.create;var c=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},s=(r,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!w.call(r,i)&&i!==t&&c(r,i,{get:()=>e[i],enumerable:!(o=f(e,i))||o.enumerable});return r};var b=(r,e,t)=>(t=r!=null?g(m(r)):{},s(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),q=r=>s(c({},\"__esModule\",{value:!0}),r);var a=j((S,d)=>{d.exports=_jsx_runtime});var F={};x(F,{default:()=>B});var n=b(a());var l=MDXCodeBlock;var h=`export default function extraterrestrialLanguage(words: string[]): string {\n  // Step 0: Create data structures and find all unique letters.\n  const adjList: { [key: string]: string[] } = {};\n  const counts: { [key: string]: number } = {};\n\n  // Initialize the adjacency list and the counts map\n  for (const word of words) {\n    for (const c of word) {\n      if (!counts[c]) {\n        counts[c] = 0;\n        adjList[c] = [];\n      }\n    }\n  }\n\n  // Step 1: Find all edges.\n  for (let i = 0; i < words.length - 1; i++) {\n    const word1 = words[i];\n    const word2 = words[i + 1];\n\n    // Check that word2 is not a prefix of word1.\n    if (word1.length > word2.length && word1.startsWith(word2)) {\n      return '';\n    }\n\n    // Find the first non-match and insert the corresponding relation.\n    for (let j = 0; j < Math.min(word1.length, word2.length); j++) {\n      if (word1[j] !== word2[j]) {\n        adjList[word1[j]].push(word2[j]);\n        counts[word2[j]]++;\n        break;\n      }\n    }\n  }\n\n  // Step 2: Breadth-first search.\n  const sb: string[] = [];\n  const queue: string[] = [];\n\n  // Enqueue characters with no incoming edges (counts[c] === 0)\n  for (const c in counts) {\n    if (counts[c] === 0) {\n      queue.push(c);\n    }\n  }\n\n  // Perform BFS to build the result string\n  while (queue.length > 0) {\n    const c = queue.shift()!;\n    sb.push(c);\n    for (const next of adjList[c]) {\n      counts[next]--;\n      if (counts[next] === 0) {\n        queue.push(next);\n      }\n    }\n  }\n\n  // If the result length is less than the number of unique characters, return an empty string\n  if (sb.length < Object.keys(counts).length) {\n    return '';\n  }\n\n  return sb.join('');\n}\n`;function u(r){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",h3:\"h3\",ol:\"ol\",code:\"code\",strong:\"strong\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"1. Using BFS\"}),`\n`,(0,n.jsx)(e.p,{children:\"The problem is to determine the order of characters in an extraterrestrial language based on a list of words sorted in lexicographical order. This involves inferring a directed acyclic graph (DAG) from the given words and performing a topological sort on it.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The algorithm:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Builds a graph where nodes represent unique characters and directed edges indicate character precedence.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Uses Breadth-First Search (BFS) to perform a topological sort of the graph.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Handles invalid cases such as prefix conflicts or cycles in the graph.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Algorithm\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Initialize an adjacency list \",(0,n.jsx)(e.code,{children:\"adjList\"}),\" to represent the graph and a \",(0,n.jsx)(e.code,{children:\"counts\"}),\" map to track in-degrees of each character.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add all unique characters to both \",(0,n.jsx)(e.code,{children:\"adjList\"}),\" and \",(0,n.jsx)(e.code,{children:\"counts\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Iterate through the list of words to establish precedence relationships:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Compare adjacent words \",(0,n.jsx)(e.code,{children:\"word1\"}),\" and \",(0,n.jsx)(e.code,{children:\"word2\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Check for invalid cases where \",(0,n.jsx)(e.code,{children:\"word2\"}),\" is a prefix of \",(0,n.jsx)(e.code,{children:\"word1\"}),\" but shorter.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"For the first differing character between \",(0,n.jsx)(e.code,{children:\"word1\"}),\" and \",(0,n.jsx)(e.code,{children:\"word2\"}),\", add a directed edge in \",(0,n.jsx)(e.code,{children:\"adjList\"}),\" and increment the in-degree in \",(0,n.jsx)(e.code,{children:\"counts\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use BFS to perform a topological sort:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Add all characters with zero in-degree to a queue.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Process each character from the queue:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Append it to the result string.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Decrease the in-degree of its neighbors and enqueue any neighbor whose in-degree becomes zero.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Check if the resulting string contains all unique characters. If not, a cycle exists, and the result is invalid.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Return the resulting string if valid, otherwise return an empty string.\"}),`\n`]}),`\n`,(0,n.jsx)(l,{children:h}),`\n`,(0,n.jsx)(e.h3,{children:\"Big-O analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Time complexity: O(n + m)\"}),\". Processing all characters takes O(m), where \",(0,n.jsx)(e.code,{children:\"m\"}),\" is the total number of characters in the input. Building edges and performing BFS takes O(n + m), where \",(0,n.jsx)(e.code,{children:\"n\"}),\" is the number of unique characters.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Space complexity: O(n + m)\"}),\". The adjacency list and in-degree map require O(n + m) space.\"]}),`\n`]})]})}function k(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var B=k;return q(F);})();\n;return Component;"
}