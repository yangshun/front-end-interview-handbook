{
  "files": {
    "/package.json": "{\n  \"name\": \"@gfe-questions/heap-sort\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/heap-sort.ts\",\n  \"devDependencies\": {\n    \"@types/jest\": \"29.5.0\",\n    \"typescript\": \"5.0.2\"\n  }\n}\n",
    "/tsconfig.json": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n",
    "/src/heap-sort.run.test.ts": "import heapSort from './heap-sort';\n\ndescribe('heapSort', () => {\n  test('empty', () => {\n    expect(heapSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(heapSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(heapSort([2, 1])).toEqual([1, 2]);\n    expect(heapSort([1, 2])).toEqual([1, 2]);\n  });\n});\n",
    "/src/heap-sort.submit.test.ts": "import heapSort from './heap-sort';\n\ndescribe('heapSort', () => {\n  test('empty', () => {\n    expect(heapSort([])).toEqual([]);\n  });\n\n  test('one element', () => {\n    expect(heapSort([1])).toEqual([1]);\n  });\n\n  test('two elements', () => {\n    expect(heapSort([2, 1])).toEqual([1, 2]);\n    expect(heapSort([1, 2])).toEqual([1, 2]);\n  });\n\n  test('more than two elements', () => {\n    expect(heapSort([10, 2, 4])).toEqual([2, 4, 10]);\n    expect(heapSort([4, 5, 6, 1, 2, 3])).toEqual([1, 2, 3, 4, 5, 6]);\n    expect(heapSort([1, 2, 3, 4, 5, 0])).toEqual([0, 1, 2, 3, 4, 5]);\n    expect(heapSort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(heapSort([5, 4, 3, 2, 1, 10, 9, 8, 7, 6])).toEqual([\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    ]);\n    expect(heapSort([98322, 3242, 876, -234, 34, 12331])).toEqual([\n      -234, 34, 876, 3242, 12331, 98322,\n    ]);\n  });\n\n  test('duplicate elements', () => {\n    expect(heapSort([1, 1])).toEqual([1, 1]);\n    expect(heapSort([2, 2, 2])).toEqual([2, 2, 2]);\n    expect(heapSort([2, 1, 2])).toEqual([1, 2, 2]);\n    expect(heapSort([1, 1, 1, 1, 1, 1])).toEqual([1, 1, 1, 1, 1, 1]);\n    expect(heapSort([7, 2, 4, 3, 1, 2])).toEqual([1, 2, 2, 3, 4, 7]);\n  });\n});\n",
    "/src/heap-sort.ts": "export default function heapSort(arr: Array<number>): Array<number> {\n  // Begin by building a max heap.\n  const size = arr.length;\n  for (let i = Math.floor(size / 2 - 1); i >= 0; i--) {\n    // Start with the index of the last parent node.\n    // heapify: Swaps parent with child as long as child is larger than parent.\n    heapify(arr, size, i);\n  }\n\n  // Iterate through the heap backwards, swapping the last element of the heap with the max element (the root of a max heap).\n  // Max elements swapped to the end constitute the sorted part of the array (ignored in the next iteration by \"i--\").\n  for (let i = size - 1; i >= 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n\n    // Build a max heap again in preparation for the swap in the next iteration.\n    heapify(arr, i, 0);\n  }\n\n  return arr;\n}\n\nfunction heapify(arr: Array<number>, size: number, parentIdx: number) {\n  let largest = parentIdx; // Initiate largest value's index with parent index.\n  const leftChildIdx = 2 * parentIdx + 1; // Calculate index of left child.\n  const rightChildIdx = 2 * parentIdx + 2; // Calculate index of right child.\n  // Set `largest` to index with highest value between parent, left and right child.\n  // See if left child of parent exists and is larger than parent.\n  if (leftChildIdx < size && arr[leftChildIdx] > arr[largest]) {\n    largest = leftChildIdx;\n  }\n  // See if right child of parent exists and is larger than parent.\n  if (rightChildIdx < size && arr[rightChildIdx] > arr[largest]) {\n    largest = rightChildIdx;\n  }\n  // If `largest` is not the current parent, swap positions with the current parent.\n  if (largest !== parentIdx) {\n    [arr[parentIdx], arr[largest]] = [arr[largest], arr[parentIdx]];\n    // Continue to recursively heapify the affected subtree.\n    heapify(arr, size, largest);\n  }\n}\n"
  },
  "skeleton": {
    "js": "/**\n * @param {Array<number>} arr The input integer array to be sorted.\n * @return {Array<number>}\n */\nexport default function heapSort(arr) {\n  throw 'Not implemented!';\n}",
    "ts": "export default function heapSort(arr: Array<number>): Array<number> {\n  throw 'Not implemented!';\n}"
  },
  "workspace": {
    "main": "/src/heap-sort.ts",
    "run": "/src/heap-sort.run.test.ts",
    "submit": "/src/heap-sort.submit.test.ts"
  }
}