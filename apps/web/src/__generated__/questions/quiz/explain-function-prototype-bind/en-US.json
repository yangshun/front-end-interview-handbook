{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain `Function.prototype.bind` in JavaScript"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [
      "atlassian"
    ],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-function-prototype-bind",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 110,
    "similarQuestions": [],
    "slug": "explain-function-prototype-bind",
    "subtitle": null,
    "topics": [
      "javascript",
      "oop"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-function-prototype-bind/en-US.mdx"
  },
  "solution": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var m=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var t in e)c(o,t,{get:e[t],enumerable:!0})},l=(o,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(o,i)&&i!==t&&c(o,i,{get:()=>e[i],enumerable:!(r=u(e,i))||r.enumerable});return o};var y=(o,e,t)=>(t=o!=null?a(g(o)):{},l(e||!o||!o.__esModule?c(t,\"default\",{value:o,enumerable:!0}):t,o)),w=o=>l(c({},\"__esModule\",{value:!0}),o);var s=m((G,d)=>{d.exports=_jsx_runtime});var x={};f(x,{default:()=>A,frontmatter:()=>j});var n=y(s()),j={title:\"Explain `Function.prototype.bind` in JavaScript\"};function h(o){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",hr:\"hr\",pre:\"pre\",h3:\"h3\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Function.prototype.bind\"}),\" is a method in JavaScript that allows you to create a new function with a specific \",(0,n.jsx)(e.code,{children:\"this\"}),\" value and optional initial arguments. It's primary purpose is to:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[\"Binding \",(0,n.jsx)(e.code,{children:\"this\"}),\" value to preserve context\"]}),\": The primary purpose of \",(0,n.jsx)(e.code,{children:\"bind\"}),\" is to bind the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value of a function to a specific object. When you call \",(0,n.jsx)(e.code,{children:\"func.bind(thisArg)\"}),\", it creates a new function with the same body as \",(0,n.jsx)(e.code,{children:\"func\"}),\", but with \",(0,n.jsx)(e.code,{children:\"this\"}),\" permanently bound to \",(0,n.jsx)(e.code,{children:\"thisArg\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Partial application of arguments\"}),\": \",(0,n.jsx)(e.code,{children:\"bind\"}),\" also allows you to pre-specify arguments for the new function. Any arguments passed to \",(0,n.jsx)(e.code,{children:\"bind\"}),\" after \",(0,n.jsx)(e.code,{children:\"thisArg\"}),\" will be prepended to the arguments list when the new function is called.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Method borrowing\"}),\": \",(0,n.jsx)(e.code,{children:\"bind\"}),\" allows you to borrow methods from one object and apply them to another object, even if they were not originally designed to work with that object.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"bind\"}),\" method is particularly useful in scenarios where you need to ensure that a function is called with a specific \",(0,n.jsx)(e.code,{children:\"this\"}),\" context, such as in event handlers, callbacks, or method borrowing.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.code,{children:\"Function.prototype.bind\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Function.prototype.bind\"}),\" allows you to create a new function with a specific \",(0,n.jsx)(e.code,{children:\"this\"}),\" context and, optionally, preset arguments. \",(0,n.jsx)(e.code,{children:\"bind()\"}),\" is most useful for preserving the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" in methods of classes that you want to pass into other functions.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"bind\"}),\" was frequently used on legacy React class component methods which were not defined using arrow functions.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const john = {\n  age: 42,\n  getAge: function () {\n    return this.age;\n  },\n};\n\nconsole.log(john.getAge()); // 42\n\nconst unboundGetAge = john.getAge;\nconsole.log(unboundGetAge()); // undefined\n\nconst boundGetAge = john.getAge.bind(john);\nconsole.log(boundGetAge()); // 42\n\nconst mary = { age: 21 };\nconst boundGetAgeMary = john.getAge.bind(mary);\nconsole.log(boundGetAgeMary()); // 21\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the example above, when the \",(0,n.jsx)(e.code,{children:\"getAge\"}),\" method is called without a calling object (as \",(0,n.jsx)(e.code,{children:\"unboundGetAge\"}),\"), the value is \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" because the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" within \",(0,n.jsx)(e.code,{children:\"getAge()\"}),\" becomes the global object. \",(0,n.jsx)(e.code,{children:\"boundGetAge()\"}),\" has its \",(0,n.jsx)(e.code,{children:\"this\"}),\" bound to \",(0,n.jsx)(e.code,{children:\"john\"}),\", hence it is able to obtain the \",(0,n.jsx)(e.code,{children:\"age\"}),\" of \",(0,n.jsx)(e.code,{children:\"john\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can even use \",(0,n.jsx)(e.code,{children:\"getAge\"}),\" on another object which is not \",(0,n.jsx)(e.code,{children:\"john\"}),\"! \",(0,n.jsx)(e.code,{children:\"boundGetAgeMary\"}),\" returns the \",(0,n.jsx)(e.code,{children:\"age\"}),\" of \",(0,n.jsx)(e.code,{children:\"mary\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here are some common scenarios where \",(0,n.jsx)(e.code,{children:\"bind\"}),\" is frequently used:\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Preserving context and fixing the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value in callbacks\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When you pass a function as a callback, the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value inside the function can be unpredictable because it is determined by the execution context. Using \",(0,n.jsx)(e.code,{children:\"bind()\"}),\" helps ensure that the correct \",(0,n.jsx)(e.code,{children:\"this\"}),\" value is maintained.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class Person {\n  constructor(firstName) {\n    this.firstName = firstName;\n  }\n  greet() {\n    console.log(\\`Hello, my name is \\${this.firstName}\\`);\n  }\n}\n\nconst john = new Person('John');\n\n// Without bind(), \\`this\\` inside the callback will be the global object\nsetTimeout(john.greet, 1000); // Output: \"Hello, my name is undefined\"\n\n// Using bind() to fix the \\`this\\` value\nsetTimeout(john.greet.bind(john), 2000); // Output: \"Hello, my name is John\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can also use \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\",children:\"arrow functions\"}),\" to define class methods for this purpose instead of using \",(0,n.jsx)(e.code,{children:\"bind\"}),\". Arrow functions have the \",(0,n.jsx)(e.code,{children:\"this\"}),\" value bound to its lexical context.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  greet = () => {\n    console.log(\\`Hello, my name is \\${this.name}\\`);\n  };\n}\n\nconst john = new Person('John Doe');\nsetTimeout(john.greet, 1000); // Output: \"Hello, my name is John Doe\"\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Partial application of functions (currying)\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"bind\"}),\" can be used to create a new function with some arguments pre-set. This is known as partial application or currying.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function multiply(a, b) {\n  return a * b;\n}\n\n// Using bind() to create a new function with some arguments pre-set\nconst multiplyBy5 = multiply.bind(null, 5);\nconsole.log(multiplyBy5(3)); // Output: 15\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Method borrowing\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"bind\"}),\" allows you to borrow methods from one object and apply them to another object, even if they were not originally designed to work with that object. This can be handy when you need to reuse functionality across different objects\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = {\n  name: 'John',\n  greet: function () {\n    console.log(\\`Hello, \\${this.name}!\\`);\n  },\n};\n\nconst greetPerson = person.greet.bind({ name: 'Alice' });\ngreetPerson(); // Output: Hello, Alice!\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Practice\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Try \",(0,n.jsxs)(e.a,{href:\"/questions/javascript/function-bind\",children:[\"implementing your own \",(0,n.jsx)(e.code,{children:\"Function.prototype.bind()\"}),\" method\"]}),\" on GreatFrontEnd.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further Reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\",children:\"Function.prototype.bind() - JavaScript | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/bind\",children:\"Function Binding | javascript.info\"})}),`\n`]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var A=v;return w(x);})();\n;return Component;"
}