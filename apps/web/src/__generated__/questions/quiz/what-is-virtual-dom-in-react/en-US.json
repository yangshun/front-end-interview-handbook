{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What is virtual DOM in React?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "hard",
    "duration": 5,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/quiz/what-is-virtual-dom-in-react"
      }
    ],
    "href": "/questions/quiz/what-is-virtual-dom-in-react",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 450,
    "similarQuestions": [],
    "slug": "what-is-virtual-dom-in-react",
    "subtitle": null,
    "topics": [
      "react"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-reactjs-interview-questions/blob/main/questions/what-is-virtual-dom-in-react/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},o=(n,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!f.call(n,r)&&r!==i&&a(n,r,{get:()=>e[r],enumerable:!(c=u(e,r))||c.enumerable});return n};var D=(n,e,i)=>(i=n!=null?d(m(n)):{},o(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),M=n=>o(a({},\"__esModule\",{value:!0}),n);var l=g((x,h)=>{h.exports=_jsx_runtime});var b={};w(b,{default:()=>y,frontmatter:()=>O});var t=D(l()),O={title:\"What is virtual DOM in React?\"};function s(n){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",ul:\"ul\",pre:\"pre\",code:\"code\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,t.jsx)(e.p,{children:\"The virtual DOM in React is a lightweight copy of the actual DOM. It allows React to efficiently update the UI by comparing the virtual DOM with the real DOM and only making necessary changes. This process is called reconciliation. By using the virtual DOM, React minimizes direct manipulation of the real DOM, which can be slow and inefficient.\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.h2,{children:\"What is virtual DOM in React?\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Introduction\"}),`\n`,(0,t.jsx)(e.p,{children:\"The virtual DOM is a concept implemented by libraries like React to improve the performance of web applications. It is a programming concept where a virtual representation of the UI is kept in memory and synced with the real DOM by a library such as ReactDOM.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"How it works\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Initial rendering\"}),\": When a React component is rendered for the first time, a virtual DOM tree is created. This tree is a lightweight copy of the actual DOM.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Updating state\"}),\": When the state of a component changes, a new virtual DOM tree is created. React then compares this new tree with the previous one.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Diffing algorithm\"}),\": React uses a diffing algorithm to find the differences between the new virtual DOM tree and the previous one. This process is called reconciliation.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Updating the real DOM\"}),\": After identifying the differences, React updates only the parts of the real DOM that have changed, rather than re-rendering the entire UI.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Benefits\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Performance\"}),\": By minimizing direct manipulation of the real DOM, React can update the UI more efficiently.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Abstraction\"}),\": Developers can write code without worrying about the performance implications of direct DOM manipulation.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Predictability\"}),\": The virtual DOM provides a predictable way to update the UI, making it easier to reason about the state of the application.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,t.jsx)(e.p,{children:\"Here is a simple example to illustrate how the virtual DOM works in React:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n\nexport default Counter;\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this example, when the button is clicked, the state \",(0,t.jsx)(e.code,{children:\"count\"}),\" is updated. React creates a new virtual DOM tree, compares it with the previous one, and updates only the text inside the \",(0,t.jsx)(e.code,{children:\"<p>\"}),\" tag in the real DOM.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://reactjs.org/docs/reconciliation.html\",children:\"React documentation on reconciliation\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060\",children:\"Understanding the virtual DOM\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://reactjs.org/docs/faq-internals.html#how-does-reacts-diffing-algorithm-work\",children:\"React's diffing algorithm\"})}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(s,n)})):s(n)}var y=v;return M(b);})();\n;return Component;"
}