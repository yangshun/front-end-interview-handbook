{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Describe the difference between `<script>`, `<script async>` and `<script defer>`"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/describe-the-difference-between-script-async-and-script-defer",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 80,
    "similarQuestions": [],
    "slug": "describe-the-difference-between-script-async-and-script-defer",
    "subtitle": null,
    "topics": [
      "html",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/describe-the-difference-between-script-async-and-script-defer/en-US.mdx"
  },
  "solution": "var Component=(()=>{var o=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},h=(r,e,t,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!y.call(r,i)&&i!==t&&c(r,i,{get:()=>e[i],enumerable:!(d=p(e,i))||d.enumerable});return r};var m=(r,e,t)=>(t=r!=null?o(f(r)):{},h(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>h(c({},\"__esModule\",{value:!0}),r);var s=b((H,l)=>{l.exports=_jsx_runtime});var L={};g(L,{default:()=>M,frontmatter:()=>x});var n=m(s()),x={title:\"Describe the difference between `<script>`, `<script async>` and `<script defer>`\"};function a(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",hr:\"hr\",pre:\"pre\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"All of these ways (\",(0,n.jsx)(e.code,{children:\"<script>\"}),\", \",(0,n.jsx)(e.code,{children:\"<script async>\"}),\", and \",(0,n.jsx)(e.code,{children:\"<script defer>\"}),\") are used to load and execute JavaScript files in an HTML document, but they differ in how the browser handles loading and execution of the script:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"<script>\"}),\" is the default way of including JavaScript. The browser blocks HTML parsing while the script is being downloaded and executed. The browser will not continue rendering the page until the script has finished executing.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"<script async>\"}),\" downloads the script asynchronously, in parallel with parsing the HTML. Executes the script as soon as it is available, potentially interrupting the HTML parsing. \",(0,n.jsx)(e.code,{children:\"<script async>\"}),\" do not wait for each other and execute in no particular order.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"<script defer>\"}),\" downloads the script asynchronously, in parallel with parsing the HTML. However, the execution of the script is deferred until HTML parsing is complete, in the order they appear in the HTML.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here's a table summarizing the 3 ways of loading \",(0,n.jsx)(e.code,{children:\"<script>\"}),\"s in a HTML document.\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Feature\"}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"<script>\"})}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"<script async>\"})}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"<script defer>\"})})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Parsing behavior\"}),(0,n.jsx)(e.td,{children:\"Blocks HTML parsing\"}),(0,n.jsx)(e.td,{children:\"Runs parallel to parsing\"}),(0,n.jsx)(e.td,{children:\"Runs parallel to parsing\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Execution order\"}),(0,n.jsx)(e.td,{children:\"In order of appearance\"}),(0,n.jsx)(e.td,{children:\"Not guaranteed\"}),(0,n.jsx)(e.td,{children:\"In order of appearance\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"DOM dependency\"}),(0,n.jsx)(e.td,{children:\"No\"}),(0,n.jsx)(e.td,{children:\"No\"}),(0,n.jsx)(e.td,{children:\"Yes (waits for DOM)\"})]})]})]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"What \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" tags are for\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"<script>\"}),\" tags are used to include JavaScript on a web page. The \",(0,n.jsx)(e.code,{children:\"async\"}),\" and \",(0,n.jsx)(e.code,{children:\"defer\"}),\" attributes are used to change how/when the loading and execution of the script happens.\"]}),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.code,{children:\"<script>\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For normal \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" tags without any \",(0,n.jsx)(e.code,{children:\"async\"}),\" or \",(0,n.jsx)(e.code,{children:\"defer\"}),\", when they are encountered, HTML parsing is blocked, the script is fetched and executed immediately. HTML parsing resumes after the script is executed. This can block rendering of the page if the script is large.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" for critical scripts that the page relies on to render properly.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<!doctype html>\n<html>\n  <head>\n    <title>Regular Script</title>\n  </head>\n  <body>\n    <!-- Content before the script -->\n    <h1>Regular Script Example</h1>\n    <p>This content will be rendered before the script executes.</p>\n\n    <!-- Regular script -->\n    <script src=\"regular.js\"><\\/script>\n\n    <!-- Content after the script -->\n    <p>This content will be rendered after the script executes.</p>\n  </body>\n</html>\n`})}),`\n`,`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.code,{children:\"<script async>\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.code,{children:\"<script async>\"}),\", the browser downloads the script file asynchronously (in parallel with HTML parsing) and executes it as soon as it is available (potentially before HTML parsing completes). The execution will not necessarily be executed in the order in which it appears in the HTML document. This can improve perceived performance because the browser doesn't wait for the script to download before continuing to render the page.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"<script async>\"}),\" when the script is independent of any other scripts on the page, for example, analytics and ads scripts.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<!doctype html>\n<html>\n  <head>\n    <title>Async Script</title>\n  </head>\n  <body>\n    <!-- Content before the script -->\n    <h1>Async Script Example</h1>\n    <p>This content will be rendered before the async script executes.</p>\n\n    <!-- Async script -->\n    <script async src=\"async.js\"><\\/script>\n\n    <!-- Content after the script -->\n    <p>\n      This content may be rendered before or after the async script executes.\n    </p>\n  </body>\n</html>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.code,{children:\"<script defer>\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Similar to \",(0,n.jsx)(e.code,{children:\"<script async>\"}),\", \",(0,n.jsx)(e.code,{children:\"<script defer>\"}),\" also downloads the script in parallel to HTML parsing but the script is only executed when the document has been fully parsed and before firing \",(0,n.jsx)(e.code,{children:\"DOMContentLoaded\"}),\". If there are multiple of them, each deferred script is executed in the order they appeared in the HTML document.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If a script relies on a fully-parsed DOM, the \",(0,n.jsx)(e.code,{children:\"defer\"}),\" attribute will be useful in ensuring that the HTML is fully parsed before executing.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<!doctype html>\n<html>\n  <head>\n    <title>Deferred Script</title>\n  </head>\n  <body>\n    <!-- Content before the script -->\n    <h1>Deferred Script Example</h1>\n    <p>This content will be rendered before the deferred script executes.</p>\n\n    <!-- Deferred script -->\n    <script defer src=\"deferred.js\"><\\/script>\n\n    <!-- Content after the script -->\n    <p>This content will be rendered before the deferred script executes.</p>\n  </body>\n</html>\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"async\"}),\" attribute should be used for scripts that are not critical to the initial rendering of the page and do not depend on each other, while the \",(0,n.jsx)(e.code,{children:\"defer\"}),\" attribute should be used for scripts that depend on / is depended on by another script.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"async\"}),\" and \",(0,n.jsx)(e.code,{children:\"defer\"}),\" attributes are ignored for scripts that have no \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"<script>\"}),\"s with \",(0,n.jsx)(e.code,{children:\"defer\"}),\" or \",(0,n.jsx)(e.code,{children:\"async\"}),\" that contain \",(0,n.jsx)(e.code,{children:\"document.write()\"}),' will be ignored with a message like \"A call to ',(0,n.jsx)(e.code,{children:\"document.write()\"}),' from an asynchronously-loaded external script was ignored\".']}),`\n`,(0,n.jsxs)(e.li,{children:[\"Even though \",(0,n.jsx)(e.code,{children:\"async\"}),\" and \",(0,n.jsx)(e.code,{children:\"defer\"}),\" help to make script downloading asynchronous, the scripts are still eventually executed on the main thread. If these scripts are computationally intensive, it can result in laggy/frozen UI. \",(0,n.jsx)(e.a,{href:\"https://partytown.builder.io/\",children:\"Partytown\"}),\" is a library that helps relocate script executions into a \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\",children:\"web worker\"}),\" and off the \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Main_thread\",children:\"main thread\"}),\", which is great for third-party scripts where you do not have control over the code.\"]}),`\n`]}),`\n`,`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#defer\",children:[(0,n.jsx)(e.code,{children:\"<script>\"}),\": The Script element | MDN\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\",children:\"async vs defer attributes\"})}),`\n`]})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(a,r)})):a(r)}var M=T;return w(L);})();\n;return Component;"
}