{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are error boundaries in React for?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/quiz/what-are-error-boundaries-in-react-for"
      }
    ],
    "href": "/questions/quiz/what-are-error-boundaries-in-react-for",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 240,
    "similarQuestions": [],
    "slug": "what-are-error-boundaries-in-react-for",
    "subtitle": null,
    "topics": [
      "react"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-reactjs-interview-questions/blob/main/questions/what-are-error-boundaries-in-react-for/en-US.mdx"
  },
  "solution": "var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,r)=>()=>(r||n((r={exports:{}}).exports,r),r.exports),y=(n,r)=>{for(var o in r)a(n,o,{get:r[o],enumerable:!0})},c=(n,r,o,i)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let t of p(r))!g.call(n,t)&&t!==o&&a(n,t,{get:()=>r[t],enumerable:!(i=u(r,t))||i.enumerable});return n};var b=(n,r,o)=>(o=n!=null?l(m(n)):{},c(r||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),v=n=>c(a({},\"__esModule\",{value:!0}),n);var s=f((k,h)=>{h.exports=_jsx_runtime});var j={};y(j,{default:()=>E,frontmatter:()=>w});var e=b(s()),w={title:\"What are error boundaries in React for?\"};function d(n){let r=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",pre:\"pre\",a:\"a\"},n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"Error boundaries in React are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the whole application. They are implemented using the \",(0,e.jsx)(r.code,{children:\"componentDidCatch\"}),\" lifecycle method and the \",(0,e.jsx)(r.code,{children:\"static getDerivedStateFromError\"}),\" method. Error boundaries do not catch errors inside event handlers, asynchronous code, or server-side rendering.\"]}),`\n`,(0,e.jsx)(r.hr,{}),`\n`,(0,e.jsx)(r.h2,{children:\"What are error boundaries in React for?\"}),`\n`,(0,e.jsx)(r.h3,{children:\"Introduction\"}),`\n`,(0,e.jsx)(r.p,{children:\"Error boundaries are a feature in React that help manage and handle errors in a more graceful way. They allow developers to catch JavaScript errors anywhere in their component tree, log those errors, and display a fallback UI instead of crashing the entire application.\"}),`\n`,(0,e.jsx)(r.h3,{children:\"How to implement error boundaries\"}),`\n`,(0,e.jsx)(r.p,{children:\"To create an error boundary, you need to define a class component that implements either or both of the following lifecycle methods:\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.code,{children:\"static getDerivedStateFromError(error)\"}),\": This method is used to update the state so the next render will show the fallback UI.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.code,{children:\"componentDidCatch(error, info)\"}),\": This method is used to log error information.\"]}),`\n`]}),`\n`,(0,e.jsx)(r.p,{children:\"Here is an example of an error boundary component:\"}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:\"language-jsx\",children:`import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render shows the fallback UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.error('Error caught by ErrorBoundary: ', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n`})}),`\n`,(0,e.jsx)(r.h3,{children:\"Usage\"}),`\n`,(0,e.jsx)(r.p,{children:\"To use the error boundary, wrap it around any component that you want to monitor for errors:\"}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:\"language-jsx\",children:`<ErrorBoundary>\n  <MyComponent />\n</ErrorBoundary>\n`})}),`\n`,(0,e.jsx)(r.h3,{children:\"Limitations\"}),`\n`,(0,e.jsx)(r.p,{children:\"Error boundaries have some limitations:\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[\"They do not catch errors inside event handlers. For event handlers, you need to use regular JavaScript \",(0,e.jsx)(r.code,{children:\"try\"}),\"/\",(0,e.jsx)(r.code,{children:\"catch\"}),\" blocks.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[\"They do not catch errors in asynchronous code (e.g., \",(0,e.jsx)(r.code,{children:\"setTimeout\"}),\" or \",(0,e.jsx)(r.code,{children:\"requestAnimationFrame\"}),\" callbacks).\"]}),`\n`,(0,e.jsx)(r.li,{children:\"They do not catch errors during server-side rendering.\"}),`\n`,(0,e.jsx)(r.li,{children:\"They do not catch errors thrown in the error boundary itself.\"}),`\n`]}),`\n`,(0,e.jsx)(r.h3,{children:\"Best practices\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsx)(r.li,{children:\"Use error boundaries to wrap high-level components such as route handlers or major sections of your application.\"}),`\n`,(0,e.jsx)(r.li,{children:\"Log errors to an error reporting service to keep track of issues in production.\"}),`\n`,(0,e.jsx)(r.li,{children:\"Provide a user-friendly fallback UI to improve the user experience when an error occurs.\"}),`\n`]}),`\n`,(0,e.jsx)(r.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://reactjs.org/docs/error-boundaries.html\",children:\"React documentation on error boundaries\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\",children:\"Handling errors in React\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\",children:\"Error boundaries in React 16\"})}),`\n`]})]})}function x(n={}){let{wrapper:r}=n.components||{};return r?(0,e.jsx)(r,Object.assign({},n,{children:(0,e.jsx)(d,n)})):d(n)}var E=x;return v(j);})();\n;return Component;"
}