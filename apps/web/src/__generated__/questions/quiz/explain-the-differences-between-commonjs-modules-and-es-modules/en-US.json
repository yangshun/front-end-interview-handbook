{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the differences between CommonJS modules and ES modules in JavaScript",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-differences-between-commonjs-modules-and-es-modules/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var d in e)i(o,d,{get:e[d],enumerable:!0})},l=(o,e,d,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!y.call(o,r)&&r!==d&&i(o,r,{get:()=>e[r],enumerable:!(t=m(e,r))||t.enumerable});return o};var f=(o,e,d)=>(d=o!=null?h(p(o)):{},l(e||!o||!o.__esModule?i(d,\"default\",{value:o,enumerable:!0}):d,o)),j=o=>l(i({},\"__esModule\",{value:!0}),o);var c=g((E,s)=>{s.exports=_jsx_runtime});var w={};v(w,{default:()=>x,frontmatter:()=>S});var n=f(c()),S={title:\"Explain the differences between CommonJS modules and ES modules in JavaScript\"};function a(o){let e=Object.assign({h2:\"h2\",p:\"p\",strong:\"strong\",code:\"code\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"In JavaScript, modules are reusable pieces of code that encapsulate functionality, making it easier to manage, maintain, and structure your applications. Modules allow you to break down your code into smaller, manageable parts, each with its own scope.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"CommonJS\"}),\" is an older module system that was initially designed for server-side JavaScript development with Node.js. It uses the \",(0,n.jsx)(e.code,{children:\"require()\"}),\" function to load modules and the \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\" or \",(0,n.jsx)(e.code,{children:\"exports\"}),\" object to define the exports of a module.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// my-module.js\nconst value = 42;\nmodule.exports = { value };\n\n// main.js\nconst myModule = require('./my-module.js');\nconsole.log(myModule.value); // 42\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"ES Modules\"}),\" (ECMAScript Modules) are the standardized module system introduced in ES6 (ECMAScript 2015). They use the \",(0,n.jsx)(e.code,{children:\"import\"}),\" and \",(0,n.jsx)(e.code,{children:\"export\"}),\" statements to handle module dependencies.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// my-module.js\nexport const value = 42;\n\n// main.js\nimport { value } from './my-module.js';\nconsole.log(value); // 42\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"CommonJS vs ES modules\"})}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Feature\"}),(0,n.jsx)(e.th,{children:\"CommonJS\"}),(0,n.jsx)(e.th,{children:\"ES modules\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Module Syntax\"}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"require()\"}),\" for importing \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\" for exporting\"]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"import\"}),\" for importing \",(0,n.jsx)(e.code,{children:\"export\"}),\" for exporting\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Environment\"}),(0,n.jsx)(e.td,{children:\"Primarily used in Node.js for server-side development\"}),(0,n.jsx)(e.td,{children:\"Designed for both browser and server-side JavaScript (Node.js)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Loading\"}),(0,n.jsx)(e.td,{children:\"Synchronous loading of modules\"}),(0,n.jsx)(e.td,{children:\"Asynchronous loading of modules\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Structure\"}),(0,n.jsx)(e.td,{children:\"Dynamic imports, can be conditionally called\"}),(0,n.jsx)(e.td,{children:\"Static imports/exports at the top level\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"File extensions\"}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\".js\"}),\" (default)\"]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\".mjs\"}),\" or \",(0,n.jsx)(e.code,{children:\".js\"}),\" (with \",(0,n.jsx)(e.code,{children:'type: \"module\"'}),\" in \",(0,n.jsx)(e.code,{children:\"package.json\"}),\")\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Browser support\"}),(0,n.jsx)(e.td,{children:\"Not natively supported in browsers\"}),(0,n.jsx)(e.td,{children:\"Natively supported in modern browsers\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Optimization\"}),(0,n.jsx)(e.td,{children:\"Limited optimization due to dynamic nature\"}),(0,n.jsx)(e.td,{children:\"Allows for optimizations like tree-shaking due to static structure\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Compatibility\"}),(0,n.jsx)(e.td,{children:\"Widely used in existing Node.js codebases and libraries\"}),(0,n.jsx)(e.td,{children:\"Newer standard, but gaining adoption in modern projects\"})]})]})]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Modules in Javascript\"}),`\n`,(0,n.jsx)(e.p,{children:\"Modules in JavaScript are a way to organize and encapsulate code into reusable and maintainable units. They allow developers to break down their codebase into smaller, self-contained pieces, promoting code reuse, separation of concerns, and better organization. There are two main module systems in JavaScript: CommonJS and ES modules.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"CommonJS\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"CommonJS is an older module system that was initially designed for server-side JavaScript development with Node.js. It uses the require function to load modules and the \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\" or \",(0,n.jsx)(e.code,{children:\"exports\"}),\" object to define the exports of a module.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Syntax\"}),\": Modules are included using \",(0,n.jsx)(e.code,{children:\"require()\"}),\" and exported using \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Environment\"}),\": Primarily used in \",(0,n.jsx)(e.code,{children:\"Node.js\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Execution\"}),\": Modules are loaded synchronously.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Modules are loaded dynamically at runtime.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// my-module.js\nconst value = 42;\nmodule.exports = { value };\n\n// main.js\nconst myModule = require('./my-module.js');\nconsole.log(myModule.value); // 42\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"ES Modules\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"ES Modules (ECMAScript Modules) are the standardized module system introduced in ES6 (ECMAScript 2015). They use the \",(0,n.jsx)(e.code,{children:\"import\"}),\" and \",(0,n.jsx)(e.code,{children:\"export\"}),\" statements to handle module dependencies.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Syntax\"}),\": Modules are imported using \",(0,n.jsx)(e.code,{children:\"import\"}),\" and exported using \",(0,n.jsx)(e.code,{children:\"export\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Environment\"}),\": Can be used in both browser environments and Node.js (with certain configurations).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Execution\"}),\": Modules are loaded asynchronously.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Support\"}),\": Introduced in ES2015, now widely supported in modern browsers and Node.js.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Modules are loaded statically at compile-time.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Enables better performance due to static analysis and tree-shaking.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// my-module.js\nexport const value = 42;\n\n// main.js\nimport { value } from './my-module.js';\nconsole.log(value); // 42\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Summary\"}),`\n`,(0,n.jsx)(e.p,{children:\"While CommonJS was the default module system in Node.js initially, ES modules are now the recommended approach for new projects, as they provide better tooling, performance, and ecosystem compatibility. However, CommonJS modules are still widely used in existing code bases and libraries especially for legacy dependencies.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\",children:\"JavaScript modules - MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nikolasbarwicki.com/articles/commonjs-vs-es-modules-the-shift-from-require-to-import/\",children:\"CommonJS vs ES Modules: the shift from require to import\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/modules-intro\",children:\"Modules, introduction - javascript.info\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://eloquentjavascript.net/10_modules.html\",children:\"Modules - Eloquent Javascript\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://blog.logrocket.com/commonjs-vs-es-modules-node-js/\",children:\"CommonJS vs. ES modules in Node.js\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.syncfusion.com/blogs/post/js-commonjs-vs-es-modules\",children:\"Understanding CommonJS vs. ES Modules in JavaScript\"})}),`\n`]})]})}function b(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(a,o)})):a(o)}var x=b;return j(w);})();\n;return Component;"
}