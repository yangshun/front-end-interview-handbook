{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-make-an-http-request-using-the-fetch-api",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-you-make-an-http-request-using-the-fetch-api",
    "subtitle": null,
    "title": "How do you make an HTTP request using the Fetch API?",
    "topics": [
      "javascript",
      "networking"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-make-an-http-request-using-the-fetch-api/en-US.mdx"
  },
  "solution": "var Component=(()=>{var i=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),j=(o,e)=>{for(var r in e)s(o,r,{get:e[r],enumerable:!0})},h=(o,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!g.call(o,t)&&t!==r&&s(o,t,{get:()=>e[t],enumerable:!(c=p(e,t))||c.enumerable});return o};var y=(o,e,r)=>(r=o!=null?i(f(o)):{},h(e||!o||!o.__esModule?s(r,\"default\",{value:o,enumerable:!0}):r,o)),T=o=>h(s({},\"__esModule\",{value:!0}),o);var d=m((E,a)=>{a.exports=_jsx_runtime});var P={};j(P,{default:()=>k,frontmatter:()=>w});var n=y(d()),w={title:\"How do you make an HTTP request using the Fetch API?\"};function l(o){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make an HTTP request using the Fetch API, you can use the \",(0,n.jsx)(e.code,{children:\"fetch\"}),\" function, which returns a promise. You can handle the response using \",(0,n.jsx)(e.code,{children:\".then()\"}),\" and \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" for error handling. Here's a basic example of a GET request:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For a POST request, you can pass an options object as the second argument to \",(0,n.jsx)(e.code,{children:\"fetch\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({\n    title: 'foo',\n    body: 'bar',\n    userId: 1,\n  }),\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n  },\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Making an HTTP request using the Fetch API\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Basic GET request\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make a basic GET request, you can use the \",(0,n.jsx)(e.code,{children:\"fetch\"}),\" function with the URL of the resource you want to fetch. The \",(0,n.jsx)(e.code,{children:\"fetch\"}),\" function returns a promise that resolves to the \",(0,n.jsx)(e.code,{children:\"Response\"}),\" object representing the response to the request.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Handling different response types\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Response\"}),\" object has several methods to handle different types of responses, such as \",(0,n.jsx)(e.code,{children:\".json()\"}),\", \",(0,n.jsx)(e.code,{children:\".text()\"}),\", \",(0,n.jsx)(e.code,{children:\".blob()\"}),\", and \",(0,n.jsx)(e.code,{children:\".arrayBuffer()\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then((response) => response.text())\n  .then((text) => console.log(text))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Making a POST request\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make a POST request, you need to pass an options object as the second argument to \",(0,n.jsx)(e.code,{children:\"fetch\"}),\". This object can include the HTTP method, headers, and body of the request.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/posts', {\n  method: 'POST',\n  body: JSON.stringify({\n    title: 'foo',\n    body: 'bar',\n    userId: 1,\n  }),\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n  },\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Handling errors\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Error handling in the Fetch API can be done using the \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method. It's also a good practice to check the \",(0,n.jsx)(e.code,{children:\"response.ok\"}),\" property to ensure the request was successful.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.tyicode.com/posts/1/comments') // Typo in the URL\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Using async/await\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can also use the Fetch API with \",(0,n.jsx)(e.code,{children:\"async/await\"}),\" for a more synchronous-looking code.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`async function fetchData() {\n  try {\n    const response = await fetch(\n      'https://jsonplaceholder.typicode.com/todos/1',\n    );\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nfetchData();\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\",children:\"MDN Web Docs: Fetch API\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\",children:\"MDN Web Docs: Using Fetch\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/fetch\",children:\"JavaScript.info: Fetch\"})}),`\n`]})]})}function b(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(l,o)})):l(o)}var k=b;return T(P);})();\n;return Component;"
}