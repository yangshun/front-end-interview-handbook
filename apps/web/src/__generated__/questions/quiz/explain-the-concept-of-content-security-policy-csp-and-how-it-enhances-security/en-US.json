{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the concept of Content Security Policy (CSP) and how it enhances security"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-content-security-policy-csp-and-how-it-enhances-security",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-content-security-policy-csp-and-how-it-enhances-security",
    "subtitle": null,
    "topics": [
      "javascript",
      "security"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-content-security-policy-csp-and-how-it-enhances-security/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),m=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},o=(n,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of p(e))!y.call(n,c)&&c!==r&&i(n,c,{get:()=>e[c],enumerable:!(s=u(e,c))||s.enumerable});return n};var S=(n,e,r)=>(r=n!=null?d(f(n)):{},o(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),P=n=>o(i({},\"__esModule\",{value:!0}),n);var a=g((k,l)=>{l.exports=_jsx_runtime});var b={};m(b,{default:()=>w,frontmatter:()=>C});var t=S(a()),C={title:\"Explain the concept of Content Security Policy (CSP) and how it enhances security\"};function h(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",h4:\"h4\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Content Security Policy (CSP) is a security feature that helps prevent various types of attacks, such as Cross-Site Scripting (XSS) and data injection attacks, by specifying which content sources are trusted. It works by allowing developers to define a whitelist of trusted sources for content like scripts, styles, and images. This is done through HTTP headers or meta tags. For example, you can use the \",(0,t.jsx)(e.code,{children:\"Content-Security-Policy\"}),\" header to specify that only scripts from your own domain should be executed:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-http\",children:`Content-Security-Policy: script-src 'self'\n`})}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.h2,{children:\"What is Content Security Policy (CSP)?\"}),`\n`,(0,t.jsx)(e.p,{children:\"Content Security Policy (CSP) is a security standard introduced to mitigate a range of attacks, including Cross-Site Scripting (XSS) and data injection attacks. CSP allows web developers to control the resources that a user agent is allowed to load for a given page. By specifying a whitelist of trusted content sources, CSP helps to prevent the execution of malicious content.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"How CSP works\"}),`\n`,(0,t.jsx)(e.p,{children:\"CSP works by allowing developers to define a set of rules that specify which sources of content are considered trustworthy. These rules are delivered to the browser via HTTP headers or meta tags. When the browser loads a page, it checks the CSP rules and blocks any content that does not match the specified sources.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Example of a CSP header\"}),`\n`,(0,t.jsx)(e.p,{children:\"Here is an example of a simple CSP header that only allows scripts from the same origin:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-http\",children:`Content-Security-Policy: script-src 'self'\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"This policy tells the browser to only execute scripts that are loaded from the same origin as the page itself.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Common directives\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"default-src\"}),\": Serves as a fallback for other resource types when they are not explicitly defined.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"script-src\"}),\": Specifies valid sources for JavaScript.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"style-src\"}),\": Specifies valid sources for CSS.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"img-src\"}),\": Specifies valid sources for images.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"connect-src\"}),\": Specifies valid sources for AJAX, WebSocket, and EventSource connections.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"font-src\"}),\": Specifies valid sources for fonts.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"object-src\"}),\": Specifies valid sources for plugins like Flash.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Benefits of using CSP\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Mitigates XSS attacks\"}),\": By restricting the sources from which scripts can be loaded, CSP helps to prevent the execution of malicious scripts.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Prevents data injection attacks\"}),\": CSP can block the loading of malicious resources that could be used to steal data or perform other harmful actions.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Improves security posture\"}),\": Implementing CSP is a proactive measure that enhances the overall security of a web application.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Implementing CSP\"}),`\n`,(0,t.jsx)(e.p,{children:\"CSP can be implemented using HTTP headers or meta tags. The HTTP header approach is generally preferred because it is more secure and cannot be easily overridden by attackers.\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Using HTTP headers\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-http\",children:`Content-Security-Policy: default-src 'self'; script-src 'self' https://trusted.cdn.com\n`})}),`\n`,(0,t.jsx)(e.h4,{children:\"Using meta tags\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<meta\n  http-equiv=\"Content-Security-Policy\"\n  content=\"default-src 'self'; script-src 'self' https://trusted.cdn.com\" />\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\",children:\"MDN Web Docs: Content Security Policy (CSP)\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://owasp.org/www-project-secure-headers/#content-security-policy\",children:\"OWASP: Content Security Policy\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developers.google.com/web/fundamentals/security/csp\",children:\"Google Developers: CSP: Content Security Policy\"})}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var w=v;return P(b);})();\n;return Component;"
}