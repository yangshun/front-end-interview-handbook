{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-template-literals-and-how-are-they-used",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-template-literals-and-how-are-they-used",
    "subtitle": null,
    "title": "What are template literals and how are they used?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-template-literals-and-how-are-they-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var l in e)r(t,l,{get:e[l],enumerable:!0})},s=(t,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!u.call(t,a)&&a!==l&&r(t,a,{get:()=>e[a],enumerable:!(i=p(e,a))||i.enumerable});return t};var T=(t,e,l)=>(l=t!=null?d(g(t)):{},s(e||!t||!t.__esModule?r(l,\"default\",{value:t,enumerable:!0}):l,t)),y=t=>s(r({},\"__esModule\",{value:!0}),t);var c=f((N,o)=>{o.exports=_jsx_runtime});var S={};x(S,{default:()=>j,frontmatter:()=>b});var n=T(c()),b={title:\"What are template literals and how are they used?\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Template literals are a feature in JavaScript that allow for easier string interpolation and multi-line strings. They are enclosed by backticks (\",(0,n.jsx)(e.code,{children:\"`\"}),\") instead of single or double quotes. You can embed expressions within template literals using \",(0,n.jsx)(e.code,{children:\"${expression}\"}),\" syntax.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:\"const name = 'John';\\nconst greeting = `Hello, ${name}!`;\\nconsole.log(greeting); // Output: Hello, John!\\n\"})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What are template literals and how are they used?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Introduction to template literals\"}),`\n`,(0,n.jsx)(e.p,{children:\"Template literals are a feature introduced in ES6 (ECMAScript 2015) that provide an easier and more readable way to work with strings in JavaScript. They allow for string interpolation, multi-line strings, and embedded expressions.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Syntax\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Template literals are enclosed by backticks (\",(0,n.jsx)(e.code,{children:\"`\"}),\") instead of single or double quotes. This allows for more flexible string formatting.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"String interpolation\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"One of the most powerful features of template literals is string interpolation. You can embed expressions within a string using \",(0,n.jsx)(e.code,{children:\"${expression}\"}),\" syntax.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:\"const name = 'John';\\nconst age = 30;\\nconst greeting = `Hello, my name is ${name} and I am ${age} years old.`;\\nconsole.log(greeting); // Output: Hello, my name is John and I am 30 years old.\\n\"})}),`\n`,(0,n.jsx)(e.h3,{children:\"Multi-line strings\"}),`\n`,(0,n.jsx)(e.p,{children:\"Template literals make it easy to create multi-line strings without the need for escape characters.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const multiLineString = \\`This is a string\nthat spans multiple\nlines.\\`;\nconsole.log(multiLineString);\n// Output:\n// This is a string\n// that spans multiple\n// lines.\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Tagged templates\"}),`\n`,(0,n.jsx)(e.p,{children:\"Tagged templates allow you to parse template literals with a function. The function can then manipulate the template literal's content before it is output.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function tag(strings, ...values) {\n  console.log(strings); // Array of string literals\n  console.log(values); // Array of values\n  return 'Tagged template result';\n}\n\nconst name = 'John';\nconst result = tag\\`Hello, \\${name}!\\`;\nconsole.log(result); // Output: Tagged template result\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Nesting template literals\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can nest template literals within each other for more complex string constructions.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:\"const name = 'John';\\nconst age = 30;\\nconst nestedTemplate = `Name: ${name}, Age: ${age}, Info: ${`Name: ${name}, Age: ${age}`}`;\\nconsole.log(nestedTemplate);\\n// Output: Name: John, Age: 30, Info: Name: John, Age: 30\\n\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\",children:\"MDN Web Docs: Template literals\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/template-literals\",children:\"JavaScript.info: Template literals\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"http://es6-features.org/#StringInterpolation\",children:\"ES6 Features: Template literals\"})}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var j=w;return y(S);})();\n;return Component;"
}