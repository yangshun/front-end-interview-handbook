{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "hard",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-how-jsonp-works-and-how-its-not-really-ajax",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-how-jsonp-works-and-how-its-not-really-ajax",
    "subtitle": null,
    "title": "Explain how JSONP works (and how it's not really Ajax)",
    "topics": [
      "javascript",
      "networking",
      "security"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-how-jsonp-works-and-how-its-not-really-ajax/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!S.call(t,r)&&r!==i&&s(t,r,{get:()=>e[r],enumerable:!(a=m(e,r))||a.enumerable});return t};var f=(t,e,i)=>(i=t!=null?p(g(t)):{},c(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),x=t=>c(s({},\"__esModule\",{value:!0}),t);var l=w((j,o)=>{o.exports=_jsx_runtime});var O={};b(O,{default:()=>d,frontmatter:()=>y});var n=f(l()),y={title:\"Explain how JSONP works (and how it's not really Ajax)\"};function h(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"JSONP (JSON with Padding) is a technique used to overcome the same-origin policy in web browsers, allowing you to request data from a server in a different domain. It works by dynamically creating a \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" tag and setting its \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute to the URL of the data source. The server responds with a script that calls a predefined callback function with the data as its argument. Unlike Ajax, JSONP does not use the XMLHttpRequest object and is limited to GET requests.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"How JSONP works (and how it's not really Ajax)\"}),`\n`,(0,n.jsx)(e.h3,{children:\"What is JSONP?\"}),`\n`,(0,n.jsx)(e.p,{children:\"JSONP stands for JSON with Padding. It is a technique used to bypass the same-origin policy in web browsers, which restricts web pages from making requests to a different domain than the one that served the web page.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"How JSONP works\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic script tag creation\"}),\": A \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" tag is dynamically created and its \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute is set to the URL of the data source, including a callback function name as a query parameter.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Server response\"}),\": The server responds with a script that calls the callback function, passing the data as an argument.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Callback execution\"}),\": The browser executes the script, invoking the callback function with the data.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here is a simple example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<!doctype html>\n<html>\n  <head>\n    <title>JSONP Example</title>\n    <script>\n      function handleResponse(data) {\n        console.log(data);\n      }\n\n      function fetchData() {\n        var script = document.createElement('script');\n        script.src = 'https://example.com/data?callback=handleResponse';\n        document.body.appendChild(script);\n      }\n    <\\/script>\n  </head>\n  <body>\n    <button onclick=\"fetchData()\">Fetch Data</button>\n  </body>\n</html>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, when the button is clicked, a \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" tag is created with the \",(0,n.jsx)(e.code,{children:\"src\"}),\" attribute set to \",(0,n.jsx)(e.code,{children:\"https://example.com/data?callback=handleResponse\"}),\". The server at \",(0,n.jsx)(e.code,{children:\"example.com\"}),\" responds with a script like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`handleResponse({\n  name: 'John',\n  age: 30,\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"How JSONP is different from Ajax\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Transport mechanism\"}),\": JSONP uses the \",(0,n.jsx)(e.code,{children:\"<script>\"}),\" tag to fetch data, whereas Ajax uses the XMLHttpRequest object.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Request type\"}),\": JSONP is limited to GET requests, while Ajax can use various HTTP methods like GET, POST, PUT, DELETE, etc.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Same-origin policy\"}),\": JSONP can bypass the same-origin policy, while Ajax requests are subject to it unless CORS (Cross-Origin Resource Sharing) is used.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Error handling\"}),\": JSONP has limited error handling capabilities compared to Ajax.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Limitations of JSONP\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Security risks\"}),\": JSONP can expose your application to cross-site scripting (XSS) attacks if the external server is compromised or malicious.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Limited to GET requests\"}),\": JSONP cannot be used for POST requests or other HTTP methods.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Error handling\"}),\": JSONP lacks robust error handling mechanisms compared to Ajax.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.w3schools.com/js/js_json_jsonp.asp\",children:\"W3Schools: JSONP\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\",children:\"Same-origin policy\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\",children:\"Cross-Origin Resource Sharing (CORS)\"})}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return x(O);})();\n;return Component;"
}