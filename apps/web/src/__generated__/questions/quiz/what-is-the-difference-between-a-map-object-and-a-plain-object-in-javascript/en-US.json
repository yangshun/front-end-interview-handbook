{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-difference-between-a-map-object-and-a-plain-object-in-javascript",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 400,
    "similarQuestions": [],
    "slug": "what-is-the-difference-between-a-map-object-and-a-plain-object-in-javascript",
    "subtitle": null,
    "title": "What is the difference between a `Map` object and a plain object in JavaScript?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-difference-between-a-map-object-and-a-plain-object-in-javascript/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},d=(r,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!j.call(r,i)&&i!==t&&c(r,i,{get:()=>e[i],enumerable:!(a=b(e,i))||a.enumerable});return r};var v=(r,e,t)=>(t=r!=null?p(y(r)):{},d(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),f=r=>d(c({},\"__esModule\",{value:!0}),r);var l=g((S,o)=>{o.exports=_jsx_runtime});var M={};m(M,{default:()=>s,frontmatter:()=>w});var n=v(l()),w={title:\"What is the difference between a `Map` object and a plain object in JavaScript?\"};function h(r){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Both \",(0,n.jsx)(e.code,{children:\"Map\"}),\" objects and plain objects in JavaScript can store key-value pairs, but they have several key differences:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Feature\"}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"Map\"})}),(0,n.jsx)(e.th,{children:\"Plain object\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Key type\"}),(0,n.jsx)(e.td,{children:\"Any data type\"}),(0,n.jsx)(e.td,{children:\"String (or Symbol)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Key order\"}),(0,n.jsx)(e.td,{children:\"Maintained\"}),(0,n.jsx)(e.td,{children:\"Not guaranteed\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Size property\"}),(0,n.jsxs)(e.td,{children:[\"Yes (\",(0,n.jsx)(e.code,{children:\"size\"}),\")\"]}),(0,n.jsx)(e.td,{children:\"None\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Iteration\"}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"forEach\"}),\", \",(0,n.jsx)(e.code,{children:\"keys()\"}),\", \",(0,n.jsx)(e.code,{children:\"values()\"}),\", \",(0,n.jsx)(e.code,{children:\"entries()\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"for...in\"}),\", \",(0,n.jsx)(e.code,{children:\"Object.keys()\"}),\", etc.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Inheritance\"}),(0,n.jsx)(e.td,{children:\"No\"}),(0,n.jsx)(e.td,{children:\"Yes\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Performance\"}),(0,n.jsx)(e.td,{children:\"Generally better for larger datasets and frequent additions/deletions\"}),(0,n.jsx)(e.td,{children:\"Faster for small datasets and simple operations\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Serializable\"}),(0,n.jsx)(e.td,{children:\"No\"}),(0,n.jsx)(e.td,{children:\"Yes\"})]})]})]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" vs plain JavaScript objects\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In JavaScript, \",(0,n.jsx)(e.code,{children:\"Map\"}),' objects and a plain object (also known as a \"POJO\" or \"plain old JavaScript object\") are both used to store key-value pairs, but they have different characteristics, use cases, and behaviors.']}),`\n`,(0,n.jsx)(e.h3,{children:\"Plain JavaScript objects (POJO)\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A plain object is a basic JavaScript object created using the \",(0,n.jsx)(e.code,{children:\"{}\"}),\" syntax. It is a collection of key-value pairs, where each key is a string (or a symbol, in modern JavaScript) and each value can be any type of value, including strings, numbers, booleans, arrays, objects, and more.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = { name: 'John', age: 30, occupation: 'Developer' };\nconsole.log(person);\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" objects\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Map\"}),\" object, introduced in ECMAScript 2015 (ES6), is a more advanced data structure that allows you to store key-value pairs with additional features. A \",(0,n.jsx)(e.code,{children:\"Map\"}),\" is an iterable, which means you can use it with \",(0,n.jsx)(e.code,{children:\"for...of\"}),\" loops, and it provides methods for common operations like \",(0,n.jsx)(e.code,{children:\"get\"}),\", \",(0,n.jsx)(e.code,{children:\"set\"}),\", \",(0,n.jsx)(e.code,{children:\"has\"}),\", and \",(0,n.jsx)(e.code,{children:\"delete\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = new Map([\n  ['name', 'John'],\n  ['age', 30],\n  ['occupation', 'Developer'],\n]);\nconsole.log(person);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Key differences\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here are the main differences between a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" object and a plain object:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Key types\"}),\": In a plain object, keys are always strings (or symbols). In a \",(0,n.jsx)(e.code,{children:\"Map\"}),\", keys can be any type of value, including objects, arrays, and even other \",(0,n.jsx)(e.code,{children:\"Map\"}),\"s.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Key ordering\"}),\": In a plain object, the order of keys is not guaranteed. In a \",(0,n.jsx)(e.code,{children:\"Map\"}),\", the order of keys is preserved, and you can iterate over them in the order they were inserted.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Iteration\"}),\": A \",(0,n.jsx)(e.code,{children:\"Map\"}),\" is iterable, which means you can use \",(0,n.jsx)(e.code,{children:\"for...of\"}),\" loops to iterate over its key-value pairs. A plain object is not iterable by default, but you can use \",(0,n.jsx)(e.code,{children:\"Object.keys()\"}),\" or \",(0,n.jsx)(e.code,{children:\"Object.entries()\"}),\" to iterate over its properties.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Performance\"}),\": \",(0,n.jsx)(e.code,{children:\"Map\"}),\" objects are generally faster and more efficient than plain objects, especially when dealing with large datasets.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Methods\"}),\": A \",(0,n.jsx)(e.code,{children:\"Map\"}),\" object provides additional methods, such as \",(0,n.jsx)(e.code,{children:\"get\"}),\", \",(0,n.jsx)(e.code,{children:\"set\"}),\", \",(0,n.jsx)(e.code,{children:\"has\"}),\", and \",(0,n.jsx)(e.code,{children:\"delete\"}),\", which make it easier to work with key-value pairs.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Serialization\"}),\": When serializing a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" object to JSON, it will be converted to an object but the existing \",(0,n.jsx)(e.code,{children:\"Map\"}),\" properties might be lost in the conversion. A plain object, on the other hand, is serialized to a JSON object with the same structure.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"When to use which\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use a plain object (POJO) when:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"You need a simple, lightweight object with string keys.\"}),`\n`,(0,n.jsx)(e.li,{children:\"You're working with a small dataset.\"}),`\n`,(0,n.jsx)(e.li,{children:\"You need to serialize the object to JSON (e.g. to send over the network).\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" object when:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"You need to store key-value pairs with non-string keys (e.g., objects, arrays).\"}),`\n`,(0,n.jsx)(e.li,{children:\"You need to preserve the order of key-value pairs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"You need to iterate over the key-value pairs in a specific order.\"}),`\n`,(0,n.jsx)(e.li,{children:\"You're working with a large dataset and need better performance.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In summary, while both plain objects and \",(0,n.jsx)(e.code,{children:\"Map\"}),\" objects can be used to store key-value pairs, \",(0,n.jsx)(e.code,{children:\"Map\"}),\" objects offer more advanced features, better performance, and additional methods, making them a better choice for more complex use cases.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" objects cannot be serialized to be sent in HTTP requests, but libraries like \",(0,n.jsx)(e.a,{href:\"https://github.com/blitz-js/superjson\",children:\"superjson\"}),\" allowing them to be serialized and deserialized.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\",children:\"Map - JavaScript | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\",children:\"Object - JavaScript | MDN\"})}),`\n`]})]})}function s(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}return f(M);})();\n;return Component;"
}