{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What is the prototype chain and how does it work?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-prototype-chain-and-how-does-it-work",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-the-prototype-chain-and-how-does-it-work",
    "subtitle": null,
    "topics": [
      "javascript",
      "oop"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-prototype-chain-and-how-does-it-work/en-US.mdx"
  },
  "solution": "var Component=(()=>{var s=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),g=(o,e)=>{for(var t in e)r(o,t,{get:e[t],enumerable:!0})},l=(o,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of y(e))!f.call(o,i)&&i!==t&&r(o,i,{get:()=>e[i],enumerable:!(c=p(e,i))||c.enumerable});return o};var j=(o,e,t)=>(t=o!=null?s(m(o)):{},l(e||!o||!o.__esModule?r(t,\"default\",{value:o,enumerable:!0}):t,o)),b=o=>l(r({},\"__esModule\",{value:!0}),o);var a=u((_,h)=>{h.exports=_jsx_runtime});var S={};g(S,{default:()=>P,frontmatter:()=>w});var n=j(a()),w={title:\"What is the prototype chain and how does it work?\"};function d(o){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",ul:\"ul\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The prototype chain is a mechanism in JavaScript that allows objects to inherit properties and methods from other objects. When you try to access a property on an object, JavaScript will first look for the property on the object itself. If it doesn't find it, it will look at the object's prototype, and then the prototype's prototype, and so on, until it either finds the property or reaches the end of the chain, which is \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function () {\n  console.log(\\`Hello, my name is \\${this.name}\\`);\n};\n\nconst alice = new Person('Alice');\nalice.greet(); // \"Hello, my name is Alice\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"alice\"}),\" inherits the \",(0,n.jsx)(e.code,{children:\"greet\"}),\" method from \",(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\".\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What is the prototype chain and how does it work?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Understanding prototypes\"}),`\n`,(0,n.jsx)(e.p,{children:\"In JavaScript, every object has a prototype. A prototype is also an object, and it can have its own prototype, forming a chain. This chain is known as the prototype chain.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"How the prototype chain works\"}),`\n`,(0,n.jsx)(e.p,{children:\"When you try to access a property or method on an object, JavaScript will:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Look for the property or method on the object itself.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If it doesn't find it, it will look at the object's prototype.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If it still doesn't find it, it will look at the prototype's prototype.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"This process continues until it either finds the property or method or reaches the end of the chain, which is \",(0,n.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function () {\n  console.log(\\`Hello, my name is \\${this.name}\\`);\n};\n\nconst alice = new Person('Alice');\nalice.greet(); // \"Hello, my name is Alice\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"alice\"}),\" is an instance of \",(0,n.jsx)(e.code,{children:\"Person\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"alice\"}),\" does not have a \",(0,n.jsx)(e.code,{children:\"greet\"}),\" method directly on it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"JavaScript looks at \",(0,n.jsx)(e.code,{children:\"alice\"}),\"'s prototype, which is \",(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\" has a \",(0,n.jsx)(e.code,{children:\"greet\"}),\" method, so JavaScript calls it.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Prototype chain in built-in objects\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"JavaScript's built-in objects also use the prototype chain. For example, arrays inherit from \",(0,n.jsx)(e.code,{children:\"Array.prototype\"}),\", which in turn inherits from \",(0,n.jsx)(e.code,{children:\"Object.prototype\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr = [1, 2, 3];\nconsole.log(arr.toString()); // \"1,2,3\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"arr\"}),\" is an instance of \",(0,n.jsx)(e.code,{children:\"Array\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"arr\"}),\" does not have a \",(0,n.jsx)(e.code,{children:\"toString\"}),\" method directly on it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"JavaScript looks at \",(0,n.jsx)(e.code,{children:\"arr\"}),\"'s prototype, which is \",(0,n.jsx)(e.code,{children:\"Array.prototype\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Array.prototype\"}),\" has a \",(0,n.jsx)(e.code,{children:\"toString\"}),\" method, so JavaScript calls it.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Modifying prototypes\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can add properties and methods to an object's prototype, and all instances of that object will have access to those properties and methods.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n\nconst alice = new Person('Alice');\n\nPerson.prototype.sayGoodbye = function () {\n  console.log(\\`Goodbye from \\${this.name}\\`);\n};\n\nalice.sayGoodbye(); // \"Goodbye from Alice\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, we added a \",(0,n.jsx)(e.code,{children:\"sayGoodbye\"}),\" method to \",(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\", and now \",(0,n.jsx)(e.code,{children:\"alice\"}),\" can use it.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\",children:\"MDN Web Docs: Inheritance and the prototype chain\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/prototype-inheritance\",children:\"JavaScript.info: Prototypes\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://eloquentjavascript.net/06_object.html#h_jl8p9u9e2d\",children:\"Eloquent JavaScript: Prototypes\"})}),`\n`]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(d,o)})):d(o)}var P=v;return b(S);})();\n;return Component;"
}