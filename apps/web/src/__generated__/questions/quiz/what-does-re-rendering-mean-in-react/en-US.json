{
  "description": null,
  "format": "quiz",
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "hard",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-does-re-rendering-mean-in-react",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 190,
    "similarQuestions": [],
    "slug": "what-does-re-rendering-mean-in-react",
    "subtitle": null,
    "title": "What does re-rendering mean in React?",
    "topics": [
      "react"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-reactjs-interview-questions/blob/main/questions/what-does-re-rendering-mean-in-react/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),R=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(t,o)&&o!==r&&i(t,o,{get:()=>e[o],enumerable:!(c=p(e,o))||c.enumerable});return t};var v=(t,e,r)=>(r=t!=null?d(u(t)):{},a(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>a(i({},\"__esModule\",{value:!0}),t);var h=f((y,s)=>{s.exports=_jsx_runtime});var O={};R(O,{default:()=>D,frontmatter:()=>M});var n=v(h()),M={title:\"What does re-rendering mean in React?\"};function l(t){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\",ol:\"ol\",strong:\"strong\",pre:\"pre\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Re-rendering in React refers to the process where a component updates its output to the DOM in response to changes in state or props. When a component's state or props change, React triggers a re-render to ensure the UI reflects the latest data. This process involves calling the component's render method again to produce a new virtual DOM, which is then compared to the previous virtual DOM to determine the minimal set of changes needed to update the actual DOM.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What does re-rendering mean in React?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Understanding re-rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"Re-rendering in React is the process by which a component updates its output to the DOM in response to changes in its state or props. This ensures that the UI is always in sync with the underlying data.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"When does re-rendering occur?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Re-rendering occurs in the following scenarios:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"When a component's state changes using \",(0,n.jsx)(e.code,{children:\"setState\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"When a component receives new props from its parent component\"}),`\n`,(0,n.jsx)(e.li,{children:\"When the parent component re-renders, causing its child components to re-render as well\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"The re-rendering process\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"State or props change\"}),\": When a component's state or props change, React schedules a re-render for that component.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Render method\"}),\": React calls the component's \",(0,n.jsx)(e.code,{children:\"render\"}),\" method to generate a new virtual DOM tree.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Virtual DOM comparison\"}),\": React compares the new virtual DOM tree with the previous one using a diffing algorithm.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"DOM updates\"}),\": React calculates the minimal set of changes required and updates the actual DOM accordingly.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a simple example to illustrate re-rendering:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" component has a state variable \",(0,n.jsx)(e.code,{children:\"count\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"When the button is clicked, \",(0,n.jsx)(e.code,{children:\"setCount\"}),\" updates the state, triggering a re-render.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"render\"}),\" method is called again, and the new virtual DOM is compared to the previous one.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"React updates the actual DOM to reflect the new count.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Performance considerations\"}),`\n`,(0,n.jsx)(e.p,{children:\"Re-rendering can be expensive, especially for complex components or large applications. To optimize performance, React provides several techniques:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"PureComponent\"}),\": A base class that implements a shallow comparison of props and state to prevent unnecessary re-renders.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"React.memo\"}),\": A higher-order component that memoizes the result of a component's render to avoid re-rendering if the props haven't changed.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"useMemo and useCallback\"}),\": Hooks that memoize values and functions to prevent unnecessary re-renders.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/rendering-elements.html\",children:\"React documentation on rendering\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/state-and-lifecycle.html\",children:\"React documentation on state and lifecycle\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/react-api.html#reactmemo\",children:\"React.memo\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/optimizing-performance.html\",children:\"Optimizing performance in React\"})}),`\n`]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var D=x;return w(O);})();\n;return Component;"
}