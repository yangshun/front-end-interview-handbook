{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-inheritance-in-es2015-classes",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-inheritance-in-es2015-classes",
    "subtitle": null,
    "title": "Explain the concept of inheritance in ES2015 classes",
    "topics": [
      "javascript",
      "oop"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-inheritance-in-es2015-classes/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var x=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),f=(s,e)=>{for(var a in e)t(s,a,{get:e[a],enumerable:!0})},o=(s,e,a,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!k.call(s,r)&&r!==a&&t(s,r,{get:()=>e[r],enumerable:!(c=m(e,r))||c.enumerable});return s};var b=(s,e,a)=>(a=s!=null?p(g(s)):{},o(e||!s||!s.__esModule?t(a,\"default\",{value:s,enumerable:!0}):a,s)),y=s=>o(t({},\"__esModule\",{value:!0}),s);var i=x((v,l)=>{l.exports=_jsx_runtime});var C={};f(C,{default:()=>d,frontmatter:()=>w});var n=b(i()),w={title:\"Explain the concept of inheritance in ES2015 classes\"};function h(s){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...s.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Inheritance in ES2015 classes allows one class to extend another, enabling the child class to inherit properties and methods from the parent class. This is done using the \",(0,n.jsx)(e.code,{children:\"extends\"}),\" keyword. The \",(0,n.jsx)(e.code,{children:\"super\"}),\" keyword is used to call the constructor and methods of the parent class. Here's a quick example:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(\\`\\${this.name} makes a noise.\\`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name);\n    this.breed = breed;\n  }\n\n  speak() {\n    console.log(\\`\\${this.name} barks.\\`);\n  }\n}\n\nconst dog = new Dog('Rex', 'German Shepherd');\ndog.speak(); // Rex barks.\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Inheritance in ES2015 classes\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Basic concept\"}),`\n`,(0,n.jsx)(e.p,{children:\"Inheritance in ES2015 classes allows a class (child class) to inherit properties and methods from another class (parent class). This promotes code reuse and a hierarchical class structure.\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using the \",(0,n.jsx)(e.code,{children:\"extends\"}),\" keyword\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"extends\"}),\" keyword is used to create a class that is a child of another class. The child class inherits all the properties and methods of the parent class.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class ParentClass {\n  constructor() {\n    this.parentProperty = 'I am a parent property';\n  }\n\n  parentMethod() {\n    console.log('This is a parent method');\n  }\n}\n\nclass ChildClass extends ParentClass {\n  constructor() {\n    super(); // Calls the parent class constructor\n    this.childProperty = 'I am a child property';\n  }\n\n  childMethod() {\n    console.log('This is a child method');\n  }\n}\n\nconst child = new ChildClass();\nconsole.log(child.parentProperty); // I am a parent property\nchild.parentMethod(); // This is a parent method\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using the \",(0,n.jsx)(e.code,{children:\"super\"}),\" keyword\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"super\"}),\" keyword is used to call the constructor of the parent class and to access its methods. This is necessary when you want to initialize the parent class properties in the child class.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(\\`\\${this.name} makes a noise.\\`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name); // Calls the parent class constructor\n    this.breed = breed;\n  }\n\n  speak() {\n    super.speak(); // Calls the parent class method\n    console.log(\\`\\${this.name} barks.\\`);\n  }\n}\n\nconst dog = new Dog('Rex', 'German Shepherd');\ndog.speak();\n// Rex makes a noise.\n// Rex barks.\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Method overriding\"}),`\n`,(0,n.jsx)(e.p,{children:\"Child classes can override methods from the parent class. This allows the child class to provide a specific implementation of a method that is already defined in the parent class.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class Animal {\n  speak() {\n    console.log('Animal makes a noise.');\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log('Dog barks.');\n  }\n}\n\nconst dog = new Dog();\ndog.speak(); // Dog barks.\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\",children:\"MDN Web Docs: Classes\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\",children:\"MDN Web Docs: Inheritance\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/class-inheritance\",children:\"JavaScript.info: Class inheritance\"})}),`\n`]})]})}function d(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,{...s,children:(0,n.jsx)(h,{...s})}):h(s)}return y(C);})();\n;return Component;"
}