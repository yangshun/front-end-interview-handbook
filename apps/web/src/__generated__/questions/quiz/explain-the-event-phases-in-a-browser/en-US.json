{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the event phases in a browser",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-event-phases-in-a-browser/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},s=(n,e,r,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!v.call(n,a)&&a!==r&&i(n,a,{get:()=>e[a],enumerable:!(h=p(e,a))||h.enumerable});return n};var f=(n,e,r)=>(r=n!=null?d(u(n)):{},s(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),w=n=>s(i({},\"__esModule\",{value:!0}),n);var l=m((x,o)=>{o.exports=_jsx_runtime});var _={};b(_,{default:()=>D,frontmatter:()=>E});var t=f(l()),E={title:\"Explain the event phases in a browser\"};function c(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In a browser, events go through three phases: capturing, target, and bubbling. During the capturing phase, the event travels from the root to the target element. In the target phase, the event reaches the target element. Finally, in the bubbling phase, the event travels back up from the target element to the root. You can control event handling using \",(0,t.jsx)(e.code,{children:\"addEventListener\"}),\" with the \",(0,t.jsx)(e.code,{children:\"capture\"}),\" option.\"]}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.h2,{children:\"Event phases in a browser\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Capturing phase\"}),`\n`,(0,t.jsx)(e.p,{children:\"The capturing phase, also known as the trickling phase, is the first phase of event propagation. During this phase, the event starts from the root of the DOM tree and travels down to the target element. Event listeners registered for this phase will be triggered in the order from the outermost ancestor to the target element.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`element.addEventListener('click', handler, true); // true indicates capturing phase\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Target phase\"}),`\n`,(0,t.jsx)(e.p,{children:\"The target phase is the second phase of event propagation. In this phase, the event has reached the target element itself. Event listeners registered directly on the target element will be triggered during this phase.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`element.addEventListener('click', handler); // default is target phase\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Bubbling phase\"}),`\n`,(0,t.jsx)(e.p,{children:\"The bubbling phase is the final phase of event propagation. During this phase, the event travels back up from the target element to the root of the DOM tree. Event listeners registered for this phase will be triggered in the order from the target element to the outermost ancestor.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`element.addEventListener('click', handler, false); // false indicates bubbling phase\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Controlling event propagation\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can control event propagation using methods like \",(0,t.jsx)(e.code,{children:\"stopPropagation\"}),\" and \",(0,t.jsx)(e.code,{children:\"stopImmediatePropagation\"}),\". These methods can be called within an event handler to stop the event from propagating further.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`element.addEventListener('click', function (event) {\n  event.stopPropagation(); // Stops the event from propagating further\n});\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture\",children:\"MDN Web Docs: Event bubbling and capturing\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://javascript.info/bubbling-and-capturing\",children:\"JavaScript.info: Bubbling and capturing\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\",children:\"W3C: DOM Level 3 Events Specification\"})}),`\n`]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(c,n)})):c(n)}var D=j;return w(_);})();\n;return Component;"
}