{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "How do you validate form elements using the Constraint Validation API?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-validate-form-elements-using-the-constraint-validation-api",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-you-validate-form-elements-using-the-constraint-validation-api",
    "subtitle": null,
    "topics": [
      "web-api",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-validate-form-elements-using-the-constraint-validation-api/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),v=(i,e)=>{for(var t in e)o(i,t,{get:e[t],enumerable:!0})},d=(i,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!y.call(i,l)&&l!==t&&o(i,l,{get:()=>e[l],enumerable:!(a=u(e,l))||a.enumerable});return i};var f=(i,e,t)=>(t=i!=null?h(p(i)):{},d(e||!i||!i.__esModule?o(t,\"default\",{value:i,enumerable:!0}):t,i)),V=i=>d(o({},\"__esModule\",{value:!0}),i);var r=g((I,s)=>{s.exports=_jsx_runtime});var w={};v(w,{default:()=>k,frontmatter:()=>b});var n=f(r()),b={title:\"How do you validate form elements using the Constraint Validation API?\"};function c(i){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The Constraint Validation API provides a way to validate form elements in HTML. You can use properties like \",(0,n.jsx)(e.code,{children:\"validity\"}),\", \",(0,n.jsx)(e.code,{children:\"validationMessage\"}),\", and methods like \",(0,n.jsx)(e.code,{children:\"checkValidity()\"}),\" and \",(0,n.jsx)(e.code,{children:\"setCustomValidity()\"}),\". For example, to check if an input is valid, you can use:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const input = document.querySelector('input');\nif (input.checkValidity()) {\n  console.log('Input is valid');\n} else {\n  console.log(input.validationMessage);\n}\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"How do you validate form elements using the Constraint Validation API?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Introduction\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Constraint Validation API is a set of methods and properties available on form elements that allow you to perform validation checks and provide feedback to users. This API is built into HTML5 and provides a way to validate form inputs without needing to write custom JavaScript validation logic.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Key properties and methods\"}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"checkValidity()\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"checkValidity()\"}),\" method checks if an element meets all its validation constraints. It returns \",(0,n.jsx)(e.code,{children:\"true\"}),\" if the element is valid and \",(0,n.jsx)(e.code,{children:\"false\"}),\" otherwise.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const input = document.querySelector('input');\nif (input.checkValidity()) {\n  console.log('Input is valid');\n} else {\n  console.log('Input is invalid');\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"reportValidity()\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"reportValidity()\"}),\" method works like \",(0,n.jsx)(e.code,{children:\"checkValidity()\"}),\" but also displays the browser's default validation message if the element is invalid.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const input = document.querySelector('input');\nif (!input.reportValidity()) {\n  console.log('Input is invalid');\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"setCustomValidity()\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"setCustomValidity()\"}),\" method allows you to set a custom validation message. If a custom message is set, the element will be considered invalid.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const input = document.querySelector('input');\ninput.setCustomValidity('This field is required');\nif (!input.checkValidity()) {\n  console.log(input.validationMessage); // Outputs: This field is required\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"validity\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"validity\"}),\" property is an object that contains several boolean properties indicating the validity state of the element, such as \",(0,n.jsx)(e.code,{children:\"valid\"}),\", \",(0,n.jsx)(e.code,{children:\"valueMissing\"}),\", \",(0,n.jsx)(e.code,{children:\"typeMismatch\"}),\", etc.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const input = document.querySelector('input');\nif (input.validity.valueMissing) {\n  console.log('Value is missing');\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"validationMessage\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"validationMessage\"}),\" property returns the message that will be shown to the user if the element is invalid.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const input = document.querySelector('input');\nif (!input.checkValidity()) {\n  console.log(input.validationMessage);\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here is a complete example that demonstrates how to use the Constraint Validation API to validate a form:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-html\",children:`<form id=\"myForm\">\n  <input type=\"text\" id=\"username\" required />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n<script>\n  const form = document.getElementById('myForm');\n  const username = document.getElementById('username');\n\n  form.addEventListener('submit', function (event) {\n    if (!username.checkValidity()) {\n      username.setCustomValidity('Username is required');\n      username.reportValidity();\n      event.preventDefault();\n    } else {\n      username.setCustomValidity(''); // Clear custom message\n    }\n  });\n<\\/script>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the form will not submit if the \",(0,n.jsx)(e.code,{children:\"username\"}),\" input is empty, and a custom validation message will be displayed.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Constraint_validation\",children:\"MDN Web Docs: Constraint Validation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/checkValidity\",children:\"MDN Web Docs: HTMLFormElement.checkValidity()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/setCustomValidity\",children:\"MDN Web Docs: HTMLFormElement.setCustomValidity()\"})}),`\n`]})]})}function M(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(c,i)})):c(i)}var k=M;return V(w);})();\n;return Component;"
}