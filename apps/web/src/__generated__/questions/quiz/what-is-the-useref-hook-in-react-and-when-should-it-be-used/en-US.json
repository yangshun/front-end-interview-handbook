{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/quiz/what-is-the-useref-hook-in-react-and-when-should-it-be-used"
      }
    ],
    "href": "/questions/quiz/what-is-the-useref-hook-in-react-and-when-should-it-be-used",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 140,
    "similarQuestions": [],
    "slug": "what-is-the-useref-hook-in-react-and-when-should-it-be-used",
    "subtitle": null,
    "title": "What is the `useRef` hook in React and when should it be used?",
    "topics": [
      "react"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-reactjs-interview-questions/blob/main/questions/what-is-the-useref-hook-in-react-and-when-should-it-be-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var l=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var R=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},s=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of f(e))!m.call(t,c)&&c!==r&&o(t,c,{get:()=>e[c],enumerable:!(i=d(e,c))||i.enumerable});return t};var v=(t,e,r)=>(r=t!=null?l(p(t)):{},s(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),b=t=>s(o({},\"__esModule\",{value:!0}),t);var u=R((y,a)=>{a.exports=_jsx_runtime});var k={};g(k,{default:()=>E,frontmatter:()=>x});var n=v(u()),x={title:\"What is the `useRef` hook in React and when should it be used?\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" hook in React is used to create a mutable object that persists across renders. It can be used to access and manipulate DOM elements directly, store mutable values that do not cause re-renders when updated, and keep a reference to a value without triggering a re-render. For example, you can use \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" to focus an input element:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import React, { useRef, useEffect } from 'react';\n\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n\n  useEffect(() => {\n    inputEl.current.focus();\n  }, []);\n\n  return <input ref={inputEl} type=\"text\" />;\n}\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"What is the \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" hook in React and when should it be used?\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Introduction to \",(0,n.jsx)(e.code,{children:\"useRef\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" hook in React is a function that returns a mutable \",(0,n.jsx)(e.code,{children:\"ref\"}),\" object whose \",(0,n.jsx)(e.code,{children:\".current\"}),\" property is initialized to the passed argument (\",(0,n.jsx)(e.code,{children:\"initialValue\"}),\"). The returned object will persist for the full lifetime of the component.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Key use cases for \",(0,n.jsx)(e.code,{children:\"useRef\"})]}),`\n`,(0,n.jsx)(e.h4,{children:\"Accessing and manipulating DOM elements\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"One of the primary use cases for \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" is to directly access and manipulate DOM elements. This is particularly useful when you need to interact with the DOM in ways that are not easily achievable through React's declarative approach.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import React, { useRef, useEffect } from 'react';\n\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n\n  useEffect(() => {\n    inputEl.current.focus();\n  }, []);\n\n  return <input ref={inputEl} type=\"text\" />;\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" hook is used to create a reference to the input element, and the \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" hook is used to focus the input element when the component mounts.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Storing mutable values\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useRef\"}),\" can also be used to store mutable values that do not cause a re-render when updated. This is useful for keeping track of values that change over time but do not need to trigger a re-render.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import React, { useRef } from 'react';\n\nfunction Timer() {\n  const count = useRef(0);\n\n  const increment = () => {\n    count.current += 1;\n    console.log(count.current);\n  };\n\n  return <button onClick={increment}>Increment</button>;\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the \",(0,n.jsx)(e.code,{children:\"count\"}),\" variable is stored in a \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" object, and its value is incremented without causing the component to re-render.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Keeping a reference to a value\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useRef\"}),\" can be used to keep a reference to a value without triggering a re-render. This is useful for storing values that need to persist across renders but do not need to cause a re-render when they change.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import React, { useRef, useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const prevCountRef = useRef();\n\n  useEffect(() => {\n    prevCountRef.current = count;\n  }, [count]);\n\n  return (\n    <div>\n      <h1>Now: {count}</h1>\n      <h2>Before: {prevCountRef.current}</h2>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"prevCountRef\"}),\" is used to keep a reference to the previous value of \",(0,n.jsx)(e.code,{children:\"count\"}),\" without causing a re-render.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://react.dev/reference/react/useRef\",children:[\"React documentation on \",(0,n.jsx)(e.code,{children:\"useRef\"})]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://react.dev/learn/manipulating-the-dom-with-refs\",children:[\"Using the \",(0,n.jsx)(e.code,{children:\"useRef\"}),\" hook\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://blog.logrocket.com/how-to-use-react-useref-hook/\",children:[\"Common use cases for \",(0,n.jsx)(e.code,{children:\"useRef\"})]})}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var E=w;return b(k);})();\n;return Component;"
}