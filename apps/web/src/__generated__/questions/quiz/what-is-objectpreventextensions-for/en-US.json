{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-objectpreventextensions-for",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-objectpreventextensions-for",
    "subtitle": null,
    "title": "What is `Object.preventExtensions()` for?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-objectpreventextensions-for/en-US.mdx"
  },
  "solution": "var Component=(()=>{var b=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of j(e))!m.call(t,o)&&o!==i&&r(t,o,{get:()=>e[o],enumerable:!(s=p(e,o))||s.enumerable});return t};var f=(t,e,i)=>(i=t!=null?b(u(t)):{},c(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),v=t=>c(r({},\"__esModule\",{value:!0}),t);var l=g((y,a)=>{a.exports=_jsx_runtime});var E={};x(E,{default:()=>h,frontmatter:()=>w});var n=f(l()),w={title:\"What is `Object.preventExtensions()` for?\"};function d(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.preventExtensions()\"}),\" is a method in JavaScript that prevents new properties from being added to an object. However, it does not affect the deletion or modification of existing properties. This method is useful when you want to ensure that an object remains in a certain shape and no additional properties can be added to it.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const obj = { name: 'John' };\nObject.preventExtensions(obj);\n\nobj.age = 30; // This will not work, as the object is not extensible\nconsole.log(obj.age); // undefined\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"What is \",(0,n.jsx)(e.code,{children:\"Object.preventExtensions()\"}),\" for?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.preventExtensions()\"}),\" is a method in JavaScript that is used to prevent new properties from being added to an object. This method is part of the ECMAScript 5 specification and is useful for maintaining the integrity of an object by ensuring that its structure cannot be altered by adding new properties.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Syntax\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`Object.preventExtensions(obj);\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"obj\"}),\": The object which should be made non-extensible.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Behavior\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Once an object is made non-extensible, you cannot add new properties to it.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Existing properties can still be modified or deleted.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The method returns the object that was passed to it.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const obj = { name: 'John' };\nObject.preventExtensions(obj);\n\nobj.age = 30; // This will not work, as the object is not extensible\nconsole.log(obj.age); // undefined\n\nobj.name = 'Jane'; // This will work, as existing properties can be modified\nconsole.log(obj.name); // 'Jane'\n\ndelete obj.name; // This will work, as existing properties can be deleted\nconsole.log(obj.name); // undefined\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Checking if an object is extensible\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can check if an object is extensible using the \",(0,n.jsx)(e.code,{children:\"Object.isExtensible()\"}),\" method.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const obj = { name: 'John' };\nconsole.log(Object.isExtensible(obj)); // true\n\nObject.preventExtensions(obj);\nconsole.log(Object.isExtensible(obj)); // false\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Immutable object structure\"}),\": When you want to ensure that the structure of an object remains unchanged, you can use \",(0,n.jsx)(e.code,{children:\"Object.preventExtensions()\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Security\"}),\": Preventing extensions can be useful in scenarios where you want to avoid accidental or malicious addition of properties to an object.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\",children:\"MDN Web Docs: Object.preventExtensions()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\",children:\"MDN Web Docs: Object.isExtensible()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.10\",children:\"ECMAScript 5 Specification\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return v(E);})();\n;return Component;"
}