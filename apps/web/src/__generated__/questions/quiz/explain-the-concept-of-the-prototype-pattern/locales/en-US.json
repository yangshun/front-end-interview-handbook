{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the concept of the Prototype pattern",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-the-prototype-pattern/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!b.call(t,r)&&r!==o&&c(t,r,{get:()=>e[r],enumerable:!(i=d(e,r))||i.enumerable});return t};var m=(t,e,o)=>(o=t!=null?p(g(t)):{},s(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),w=t=>s(c({},\"__esModule\",{value:!0}),t);var l=y((T,a)=>{a.exports=_jsx_runtime});var P={};j(P,{default:()=>x,frontmatter:()=>f});var n=m(l()),f={title:\"Explain the concept of the Prototype pattern\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The Prototype pattern is a creational design pattern used to create new objects by copying an existing object, known as the prototype. This pattern is useful when the cost of creating a new object is more expensive than cloning an existing one. In JavaScript, this can be achieved using the \",(0,n.jsx)(e.code,{children:\"Object.create\"}),\" method or by using the \",(0,n.jsx)(e.code,{children:\"prototype\"}),\" property of a constructor function.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const prototypeObject = {\n  greet() {\n    console.log('Hello, world!');\n  },\n};\n\nconst newObject = Object.create(prototypeObject);\nnewObject.greet(); // Outputs: Hello, world!\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"The Prototype pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Prototype pattern is a creational design pattern that allows you to create new objects by copying an existing object, known as the prototype. This pattern is particularly useful when the cost of creating a new object is more expensive than cloning an existing one.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"How it works\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the Prototype pattern, an object is used as a blueprint for creating new objects. This blueprint object is called the prototype. New objects are created by copying the prototype, which can be done in various ways depending on the programming language.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Implementation in JavaScript\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In JavaScript, the Prototype pattern can be implemented using the \",(0,n.jsx)(e.code,{children:\"Object.create\"}),\" method or by using the \",(0,n.jsx)(e.code,{children:\"prototype\"}),\" property of a constructor function.\"]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"Object.create\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Object.create\"}),\" method creates a new object with the specified prototype object and properties.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const prototypeObject = {\n  greet() {\n    console.log('Hello, world!');\n  },\n};\n\nconst newObject = Object.create(prototypeObject);\nnewObject.greet(); // Outputs: Hello, world!\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"newObject\"}),\" is created with \",(0,n.jsx)(e.code,{children:\"prototypeObject\"}),\" as its prototype. This means that \",(0,n.jsx)(e.code,{children:\"newObject\"}),\" inherits the \",(0,n.jsx)(e.code,{children:\"greet\"}),\" method from \",(0,n.jsx)(e.code,{children:\"prototypeObject\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Using constructor functions and the \",(0,n.jsx)(e.code,{children:\"prototype\"}),\" property\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another way to implement the Prototype pattern in JavaScript is by using constructor functions and the \",(0,n.jsx)(e.code,{children:\"prototype\"}),\" property.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function () {\n  console.log(\\`Hello, my name is \\${this.name}\\`);\n};\n\nconst person1 = new Person('Alice');\nconst person2 = new Person('Bob');\n\nperson1.greet(); // Outputs: Hello, my name is Alice\nperson2.greet(); // Outputs: Hello, my name is Bob\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the \",(0,n.jsx)(e.code,{children:\"Person\"}),\" constructor function is used to create new \",(0,n.jsx)(e.code,{children:\"Person\"}),\" objects. The \",(0,n.jsx)(e.code,{children:\"greet\"}),\" method is added to the \",(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\", so all instances of \",(0,n.jsx)(e.code,{children:\"Person\"}),\" inherit this method.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Advantages\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Reduces the cost of creating new objects by cloning existing ones\"}),`\n`,(0,n.jsx)(e.li,{children:\"Simplifies the creation of complex objects\"}),`\n`,(0,n.jsx)(e.li,{children:\"Promotes code reuse and reduces redundancy\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Disadvantages\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Cloning objects can be less efficient than creating new ones in some cases\"}),`\n`,(0,n.jsx)(e.li,{children:\"Can lead to issues with deep cloning if the prototype object contains nested objects\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\",children:\"MDN Web Docs: Object.create\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\",children:\"MDN Web Docs: Prototypes\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://refactoring.guru/design-patterns/prototype\",children:\"Refactoring Guru: Prototype pattern\"})}),`\n`]})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var x=O;return w(P);})();\n;return Component;"
}