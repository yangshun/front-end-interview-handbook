{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-can-you-test-asynchronous-code-in-javascript",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-can-you-test-asynchronous-code-in-javascript",
    "subtitle": null,
    "title": "How can you test asynchronous code in JavaScript?",
    "topics": [
      "async",
      "javascript",
      "testing"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-can-you-test-asynchronous-code-in-javascript/en-US.mdx"
  },
  "solution": "var Component=(()=>{var l=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var a in e)s(t,a,{get:e[a],enumerable:!0})},r=(t,e,a,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of u(e))!m.call(t,c)&&c!==a&&s(t,c,{get:()=>e[c],enumerable:!(o=p(e,c))||o.enumerable});return t};var D=(t,e,a)=>(a=t!=null?l(f(t)):{},r(e||!t||!t.__esModule?s(a,\"default\",{value:t,enumerable:!0}):a,t)),w=t=>r(s({},\"__esModule\",{value:!0}),t);var i=y((M,h)=>{h.exports=_jsx_runtime});var k={};g(k,{default:()=>b,frontmatter:()=>j});var n=D(i()),j={title:\"How can you test asynchronous code in JavaScript?\"};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To test asynchronous code in JavaScript, you can use testing frameworks like Jest or Mocha. These frameworks provide built-in support for handling asynchronous operations. You can use \",(0,n.jsx)(e.code,{children:\"async\"}),\"/\",(0,n.jsx)(e.code,{children:\"await\"}),\" or return promises in your test functions. For example, in Jest, you can write:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`test('fetches data successfully', async () => {\n  const data = await fetchData();\n  expect(data).toBeDefined();\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Alternatively, you can use callbacks and the \",(0,n.jsx)(e.code,{children:\"done\"}),\" function to signal the end of an asynchronous test.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"How can you test asynchronous code in JavaScript?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Testing asynchronous code in JavaScript can be challenging, but modern testing frameworks like Jest and Mocha provide robust support for handling asynchronous operations. Here are some common methods to test asynchronous code:\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"async\"}),\"/\",(0,n.jsx)(e.code,{children:\"await\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"One of the most straightforward ways to test asynchronous code is by using \",(0,n.jsx)(e.code,{children:\"async\"}),\"/\",(0,n.jsx)(e.code,{children:\"await\"}),\". This approach makes your test code look synchronous, which can be easier to read and write.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example with Jest\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// fetchData.js\nexport const fetchData = async () => {\n  const response = await fetch('https://api.example.com/data');\n  return response.json();\n};\n\n// fetchData.test.js\nimport { fetchData } from './fetchData';\n\ntest('fetches data successfully', async () => {\n  const data = await fetchData();\n  expect(data).toBeDefined();\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Returning a promise\"}),`\n`,(0,n.jsx)(e.p,{children:\"Another way to handle asynchronous tests is by returning a promise from your test function. Jest and Mocha will wait for the promise to resolve before finishing the test.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Example with Jest\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// fetchData.js\nexport const fetchData = () => {\n  return fetch('https://api.example.com/data').then((response) =>\n    response.json(),\n  );\n};\n\n// fetchData.test.js\nimport { fetchData } from './fetchData';\n\ntest('fetches data successfully', () => {\n  return fetchData().then((data) => {\n    expect(data).toBeDefined();\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Using callbacks\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"For older codebases or specific scenarios, you might need to use callbacks. In Jest, you can use the \",(0,n.jsx)(e.code,{children:\"done\"}),\" function to signal the end of an asynchronous test.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example with Jest\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// fetchData.js\nexport const fetchData = (callback) => {\n  fetch('https://api.example.com/data')\n    .then((response) => response.json())\n    .then((data) => callback(null, data))\n    .catch((error) => callback(error));\n};\n\n// fetchData.test.js\nimport { fetchData } from './fetchData';\n\ntest('fetches data successfully', (done) => {\n  fetchData((error, data) => {\n    expect(error).toBeNull();\n    expect(data).toBeDefined();\n    done();\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Using Mocha\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Mocha also supports \",(0,n.jsx)(e.code,{children:\"async\"}),\"/\",(0,n.jsx)(e.code,{children:\"await\"}),\", returning promises, and using callbacks. Here is an example using \",(0,n.jsx)(e.code,{children:\"async\"}),\"/\",(0,n.jsx)(e.code,{children:\"await\"}),\" with Mocha:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// fetchData.js\nexport const fetchData = async () => {\n  const response = await fetch('https://api.example.com/data');\n  return response.json();\n};\n\n// fetchData.test.js\nimport { fetchData } from './fetchData';\nimport { expect } from 'chai';\n\ndescribe('fetchData', () => {\n  it('fetches data successfully', async () => {\n    const data = await fetchData();\n    expect(data).to.be.an('object');\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://jestjs.io/docs/asynchronous\",children:\"Jest documentation on testing asynchronous code\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://mochajs.org/#asynchronous-code\",children:\"Mocha documentation on testing asynchronous code\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\",children:\"MDN Web Docs on async/await\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.chaijs.com/\",children:\"Chai assertion library\"})}),`\n`]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var b=x;return w(k);})();\n;return Component;"
}