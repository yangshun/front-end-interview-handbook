{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-reliably-determine-whether-an-object-is-empty",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-you-reliably-determine-whether-an-object-is-empty",
    "subtitle": null,
    "title": "How do you reliably determine whether an object is empty?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-reliably-determine-whether-an-object-is-empty/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var m=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),u=(o,e)=>{for(var t in e)c(o,t,{get:e[t],enumerable:!0})},l=(o,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!y.call(o,r)&&r!==t&&c(o,r,{get:()=>e[r],enumerable:!(s=b(e,r))||s.enumerable});return o};var g=(o,e,t)=>(t=o!=null?d(j(o)):{},l(e||!o||!o.__esModule?c(t,\"default\",{value:o,enumerable:!0}):t,o)),f=o=>l(c({},\"__esModule\",{value:!0}),o);var h=m((D,i)=>{i.exports=_jsx_runtime});var E={};u(E,{default:()=>k,frontmatter:()=>O});var n=g(h()),O={title:\"How do you reliably determine whether an object is empty?\"};function a(o){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To reliably determine whether an object is empty, you can use \",(0,n.jsx)(e.code,{children:\"Object.keys()\"}),\" to check if the object has any enumerable properties. If the length of the array returned by \",(0,n.jsx)(e.code,{children:\"Object.keys()\"}),\" is zero, the object is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const isEmpty = (obj) => Object.keys(obj).length === 0;\n\nconst obj = {};\nconsole.log(isEmpty(obj)); // true\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"How do you reliably determine whether an object is empty?\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"Object.keys()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The most common and reliable way to check if an object is empty is by using \",(0,n.jsx)(e.code,{children:\"Object.keys()\"}),\". This method returns an array of the object's own enumerable property names. If the length of this array is zero, the object is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const isEmpty = (obj) => Object.keys(obj).length === 0;\n\nconst obj1 = {};\nconst obj2 = { key: 'value' };\n\nconsole.log(isEmpty(obj1)); // true\nconsole.log(isEmpty(obj2)); // false\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"Object.entries()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another method is to use \",(0,n.jsx)(e.code,{children:\"Object.entries()\"}),\", which returns an array of the object's own enumerable property \",(0,n.jsx)(e.code,{children:\"[key, value]\"}),\" pairs. If the length of this array is zero, the object is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const isEmpty = (obj) => Object.entries(obj).length === 0;\n\nconst obj1 = {};\nconst obj2 = { key: 'value' };\n\nconsole.log(isEmpty(obj1)); // true\nconsole.log(isEmpty(obj2)); // false\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"Object.values()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Similarly, you can use \",(0,n.jsx)(e.code,{children:\"Object.values()\"}),\", which returns an array of the object's own enumerable property values. If the length of this array is zero, the object is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const isEmpty = (obj) => Object.values(obj).length === 0;\n\nconst obj1 = {};\nconst obj2 = { key: 'value' };\n\nconsole.log(isEmpty(obj1)); // true\nconsole.log(isEmpty(obj2)); // false\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using a \",(0,n.jsx)(e.code,{children:\"for...in\"}),\" loop\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can also use a \",(0,n.jsx)(e.code,{children:\"for...in\"}),\" loop to check if an object has any properties. If the loop doesn't iterate over any properties, the object is empty.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const isEmpty = (obj) => {\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst obj1 = {};\nconst obj2 = { key: 'value' };\n\nconsole.log(isEmpty(obj1)); // true\nconsole.log(isEmpty(obj2)); // false\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Edge cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prototype properties\"}),\": The methods above only check for the object's own properties, not properties inherited from its prototype.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Non-enumerable properties\"}),\": These methods do not account for non-enumerable properties.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\",children:\"MDN Web Docs: Object.keys()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\",children:\"MDN Web Docs: Object.entries()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\",children:\"MDN Web Docs: Object.values()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\",children:\"MDN Web Docs: for...in\"})}),`\n`]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(a,o)})):a(o)}var k=v;return f(E);})();\n;return Component;"
}