{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-currying-and-partial-application-differ-from-each-other",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-currying-and-partial-application-differ-from-each-other",
    "subtitle": null,
    "title": "How do currying and partial application differ from each other?",
    "topics": [
      "closure",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-currying-and-partial-application-differ-from-each-other/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),w=(r,n)=>{for(var i in n)t(r,i,{get:n[i],enumerable:!0})},o=(r,n,i,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!g.call(r,a)&&a!==i&&t(r,a,{get:()=>n[a],enumerable:!(c=f(n,a))||c.enumerable});return r};var y=(r,n,i)=>(i=r!=null?h(m(r)):{},o(n||!r||!r.__esModule?t(i,\"default\",{value:r,enumerable:!0}):i,r)),b=r=>o(t({},\"__esModule\",{value:!0}),r);var s=x((F,l)=>{l.exports=_jsx_runtime});var C={};w(C,{default:()=>d,frontmatter:()=>j});var e=y(s()),j={title:\"How do currying and partial application differ from each other?\"};function u(r){let n={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Currying transforms a function with multiple arguments into a sequence of functions, each taking a single argument. For example, a function \",(0,e.jsx)(n.code,{children:\"f(a, b, c)\"}),\" becomes \",(0,e.jsx)(n.code,{children:\"f(a)(b)(c)\"}),\". Partial application, on the other hand, fixes a few arguments of a function and produces another function with a smaller number of arguments. For example, if you partially apply \",(0,e.jsx)(n.code,{children:\"f(a, b, c)\"}),\" with \",(0,e.jsx)(n.code,{children:\"a\"}),\", you get a new function \",(0,e.jsx)(n.code,{children:\"f'(b, c)\"}),\".\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Currying vs partial application\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Currying\"}),`\n`,(0,e.jsx)(n.p,{children:\"Currying is a technique where a function with multiple arguments is transformed into a sequence of functions, each taking a single argument. This allows for more flexible function composition and reuse.\"}),`\n`,(0,e.jsx)(n.h4,{children:\"Example\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function add(a) {\n  return function (b) {\n    return function (c) {\n      return a + b + c;\n    };\n  };\n}\n\nconst result = add(1)(2)(3);\nconsole.log(result); // 6\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In this example, \",(0,e.jsx)(n.code,{children:\"add\"}),\" is a curried function that takes three arguments one at a time.\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Partial application\"}),`\n`,(0,e.jsx)(n.p,{children:\"Partial application is a technique where you fix a few arguments of a function, producing another function with a smaller number of arguments. This is useful for creating specialized functions from more general ones.\"}),`\n`,(0,e.jsx)(n.h4,{children:\"Example\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function add(a, b, c) {\n  return a + b + c;\n}\n\nconst addOne = add.bind(null, 1);\nconst result = addOne(2, 3);\nconsole.log(result); // 6\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In this example, \",(0,e.jsx)(n.code,{children:\"addOne\"}),\" is a partially applied function that fixes the first argument of \",(0,e.jsx)(n.code,{children:\"add\"}),\" to \",(0,e.jsx)(n.code,{children:\"1\"}),\".\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Key differences\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Currying\"}),\": Transforms a function with multiple arguments into a sequence of functions, each taking a single argument.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Partial application\"}),\": Fixes a few arguments of a function and produces another function with a smaller number of arguments.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://javascript.info/currying-partials\",children:\"JavaScript.info on currying and partial application\"})}),`\n`]})]})}function d(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(u,{...r})}):u(r)}return b(C);})();\n;return Component;"
}