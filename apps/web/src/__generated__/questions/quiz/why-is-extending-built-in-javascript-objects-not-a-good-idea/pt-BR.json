{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/why-is-extending-built-in-javascript-objects-not-a-good-idea",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 320,
    "similarQuestions": [],
    "slug": "why-is-extending-built-in-javascript-objects-not-a-good-idea",
    "subtitle": null,
    "title": "Por que estender objetos JavaScript nativos não é uma boa ideia?",
    "topics": [
      "javascript",
      "oop"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/why-is-extending-built-in-javascript-objects-not-a-good-idea/pt-BR.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var n in e)s(o,n,{get:e[n],enumerable:!0})},i=(o,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of l(e))!g.call(o,t)&&t!==n&&s(o,t,{get:()=>e[t],enumerable:!(r=u(e,t))||r.enumerable});return o};var j=(o,e,n)=>(n=o!=null?p(b(o)):{},i(e||!o||!o.__esModule?s(n,\"default\",{value:o,enumerable:!0}):n,o)),x=o=>i(s({},\"__esModule\",{value:!0}),o);var c=f((J,d)=>{d.exports=_jsx_runtime});var y={};v(y,{default:()=>h,frontmatter:()=>q});var a=j(c()),q={title:\"Por que estender objetos JavaScript nativos n\\xE3o \\xE9 uma boa ideia?\"};function m(o){let e=Object.assign({p:\"p\",code:\"code\"},o.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:[\"Estender um objeto nativo/embutido do JavaScript significa adicionar propriedades/fun\\xE7\\xF5es ao seu prototype. Embora isso possa parecer uma boa ideia a princ\\xEDpio, \\xE9 perigoso na pr\\xE1tica. Imagine que seu c\\xF3digo use algumas bibliotecas que estendem o \",(0,a.jsx)(e.code,{children:\"Array.prototype\"}),\" adicionando o mesmo m\\xE9todo \",(0,a.jsx)(e.code,{children:\"contains\"}),\". As implementa\\xE7\\xF5es se sobrescrever\\xE3o e seu c\\xF3digo quebrar\\xE1 se o comportamento desses dois m\\xE9todos n\\xE3o for o mesmo.\"]}),`\n`,(0,a.jsx)(e.p,{children:\"A \\xFAnica vez que voc\\xEA pode querer estender um objeto nativo \\xE9 quando deseja criar um polyfill, essencialmente fornecendo sua pr\\xF3pria implementa\\xE7\\xE3o para um m\\xE9todo que faz parte da especifica\\xE7\\xE3o do JavaScript, mas pode n\\xE3o existir no navegador do usu\\xE1rio devido a ser um navegador mais antigo.\"})]})}function _(o={}){let{wrapper:e}=o.components||{};return e?(0,a.jsx)(e,Object.assign({},o,{children:(0,a.jsx)(m,o)})):m(o)}var h=_;return x(y);})();\n;return Component;"
}