{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-difference-between-shallow-copy-and-deep-copy",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-difference-between-shallow-copy-and-deep-copy",
    "subtitle": null,
    "title": "Explain the difference between shallow copy and deep copy",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-between-shallow-copy-and-deep-copy/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var t=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var c in e)t(o,c,{get:e[c],enumerable:!0})},i=(o,e,c,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of j(e))!g.call(o,l)&&l!==c&&t(o,l,{get:()=>e[l],enumerable:!(r=b(e,l))||r.enumerable});return o};var m=(o,e,c)=>(c=o!=null?p(u(o)):{},i(e||!o||!o.__esModule?t(c,\"default\",{value:o,enumerable:!0}):c,o)),w=o=>i(t({},\"__esModule\",{value:!0}),o);var a=y((x,d)=>{d.exports=_jsx_runtime});var O={};f(O,{default:()=>h,frontmatter:()=>C});var n=m(a()),C={title:\"Explain the difference between shallow copy and deep copy\"};function s(o){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A shallow copy duplicates the top-level properties of an object, but nested objects are still referenced. A deep copy duplicates all levels of an object, creating entirely new instances of nested objects. For example, using \",(0,n.jsx)(e.code,{children:\"Object.assign()\"}),\" creates a shallow copy, while using libraries like \",(0,n.jsx)(e.code,{children:\"Lodash\"}),\" or \",(0,n.jsx)(e.code,{children:\"structuredClone()\"}),\" in modern JavaScript can create deep copies.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Shallow copy example\nlet obj1 = { a: 1, b: { c: 2 } };\nlet shallowCopy = Object.assign({}, obj1);\nshallowCopy.b.c = 3;\nconsole.log(shallowCopy.b.c); // Output: 3\nconsole.log(obj1.b.c); // Output: 3 (original nested object changed too!)\n\n// Deep copy example\nlet obj2 = { a: 1, b: { c: 2 } };\nlet deepCopy = JSON.parse(JSON.stringify(obj2));\ndeepCopy.b.c = 4;\nconsole.log(deepCopy.b.c); // Output: 4\nconsole.log(obj2.b.c); // Output: 2 (original nested object remains unchanged)\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Difference between shallow copy and deep copy\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Shallow copy\"}),`\n`,(0,n.jsx)(e.p,{children:\"A shallow copy creates a new object and copies the values of the original object's top-level properties into the new object. However, if any of these properties are references to other objects, only the reference is copied, not the actual object. This means that changes to nested objects in the copied object will affect the original object.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let obj1 = { a: 1, b: { c: 2 } };\nlet shallowCopy = Object.assign({}, obj1);\nshallowCopy.b.c = 3;\nconsole.log(shallowCopy.b.c); // Output: 3\nconsole.log(obj1.b.c); // Output: 3 (original nested object changed too!)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"shallowCopy\"}),\" is a shallow copy of \",(0,n.jsx)(e.code,{children:\"obj1\"}),\". Changing \",(0,n.jsx)(e.code,{children:\"shallowCopy.b.c\"}),\" also changes \",(0,n.jsx)(e.code,{children:\"obj1.b.c\"}),\" because \",(0,n.jsx)(e.code,{children:\"b\"}),\" is a reference to the same object in both \",(0,n.jsx)(e.code,{children:\"obj1\"}),\" and \",(0,n.jsx)(e.code,{children:\"shallowCopy\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Deep copy\"}),`\n`,(0,n.jsx)(e.p,{children:\"A deep copy creates a new object and recursively copies all properties and nested objects from the original object. This means that the new object is completely independent of the original object, and changes to nested objects in the copied object do not affect the original object.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let obj1 = { a: 1, b: { c: 2 } };\nlet deepCopy = JSON.parse(JSON.stringify(obj1));\ndeepCopy.b.c = 4;\nconsole.log(deepCopy.b.c); // Output: 4\nconsole.log(obj1.b.c); // Output: 2 (original nested object remains unchanged)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"deepCopy\"}),\" is a deep copy of \",(0,n.jsx)(e.code,{children:\"obj1\"}),\". Changing \",(0,n.jsx)(e.code,{children:\"deepCopy.b.c\"}),\" does not affect \",(0,n.jsx)(e.code,{children:\"obj1.b.c\"}),\" because \",(0,n.jsx)(e.code,{children:\"b\"}),\" is a completely new object in \",(0,n.jsx)(e.code,{children:\"deepCopy\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Methods to create shallow and deep copies\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Shallow copy methods\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Object.assign()\"})}),`\n`,(0,n.jsxs)(e.li,{children:[\"Spread operator (\",(0,n.jsx)(e.code,{children:\"...\"}),\")\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Deep copy methods\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"JSON.parse(JSON.stringify())\"})}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"structuredClone()\"}),\" (modern JavaScript)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Libraries like \",(0,n.jsx)(e.code,{children:\"Lodash\"}),\" (\",(0,n.jsx)(e.code,{children:\"_.cloneDeep\"}),\")\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\",children:\"MDN Web Docs: Object.assign()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\",children:\"MDN Web Docs: JSON.parse()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\",children:\"MDN Web Docs: structuredClone()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://lodash.com/docs/4.17.15#cloneDeep\",children:\"Lodash Documentation: _.cloneDeep\"})}),`\n`]})]})}function h(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(s,{...o})}):s(o)}return w(O);})();\n;return Component;"
}