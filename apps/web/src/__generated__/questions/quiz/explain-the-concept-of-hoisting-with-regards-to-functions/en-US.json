{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the concept of hoisting with regards to functions",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-hoisting-with-regards-to-functions/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(o,n)=>()=>(n||o((n={exports:{}}).exports,n),n.exports),v=(o,n)=>{for(var i in n)r(o,i,{get:n[i],enumerable:!0})},c=(o,n,i,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let t of f(n))!g.call(o,t)&&t!==i&&r(o,t,{get:()=>n[t],enumerable:!(s=u(n,t))||s.enumerable});return o};var F=(o,n,i)=>(i=o!=null?d(p(o)):{},c(n||!o||!o.__esModule?r(i,\"default\",{value:o,enumerable:!0}):i,o)),w=o=>c(r({},\"__esModule\",{value:!0}),o);var h=m((H,a)=>{a.exports=_jsx_runtime});var y={};v(y,{default:()=>T,frontmatter:()=>x});var e=F(h()),x={title:\"Explain the concept of hoisting with regards to functions\"};function l(o){let n=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},o.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsx)(n.p,{children:\"Hoisting in JavaScript is a behavior where function declarations are moved to the top of their containing scope during the compile phase. This means you can call a function before it is defined in the code. However, this does not apply to function expressions or arrow functions, which are not hoisted in the same way.\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Function declaration\nhoistedFunction(); // Works fine\nfunction hoistedFunction() {\n  console.log('This function is hoisted');\n}\n\n// Function expression\nnonHoistedFunction(); // Throws an error\nvar nonHoistedFunction = function () {\n  console.log('This function is not hoisted');\n};\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"What is hoisting?\"}),`\n`,(0,e.jsx)(n.p,{children:\"Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their containing scope during the compile phase. This allows functions to be called before they are defined in the code.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Function declarations\"}),`\n`,(0,e.jsx)(n.p,{children:\"Function declarations are fully hoisted. This means you can call a function before its declaration in the code.\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`hoistedFunction(); // Works fine\n\nfunction hoistedFunction() {\n  console.log('This function is hoisted');\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Function expressions\"}),`\n`,(0,e.jsx)(n.p,{children:\"Function expressions, including arrow functions, are not hoisted in the same way. They are treated as variable assignments and are only hoisted as undefined.\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`nonHoistedFunction(); // Throws an error: TypeError: nonHoistedFunction is not a function\n\nvar nonHoistedFunction = function () {\n  console.log('This function is not hoisted');\n};\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Arrow functions\"}),`\n`,(0,e.jsx)(n.p,{children:\"Arrow functions behave similarly to function expressions in terms of hoisting.\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`arrowFunction(); // Throws an error: TypeError: arrowFunction is not a function\n\nvar arrowFunction = () => {\n  console.log('This arrow function is not hoisted');\n};\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\",children:\"MDN Web Docs on Hoisting\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://javascript.info/hoisting\",children:\"JavaScript.info on Hoisting\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\",children:\"MDN Web Docs on Function Declarations\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\",children:\"MDN Web Docs on Function Expressions\"})}),`\n`]})]})}function b(o={}){let{wrapper:n}=o.components||{};return n?(0,e.jsx)(n,Object.assign({},o,{children:(0,e.jsx)(l,o)})):l(o)}var T=b;return w(y);})();\n;return Component;"
}