{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-sets-and-maps-and-how-are-they-used",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-sets-and-maps-and-how-are-they-used",
    "subtitle": null,
    "title": "What are `Set`s and `Map`s and how are they used?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-sets-and-maps-and-how-are-they-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var t=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var S=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),M=(l,e)=>{for(var a in e)t(l,a,{get:e[a],enumerable:!0})},d=(l,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!v.call(l,c)&&c!==a&&t(l,c,{get:()=>e[c],enumerable:!(i=p(e,c))||i.enumerable});return l};var g=(l,e,a)=>(a=l!=null?u(y(l)):{},d(e||!l||!l.__esModule?t(a,\"default\",{value:l,enumerable:!0}):a,l)),f=l=>d(t({},\"__esModule\",{value:!0}),l);var r=S((j,o)=>{o.exports=_jsx_runtime});var w={};M(w,{default:()=>s,frontmatter:()=>k});var n=g(r()),k={title:\"What are `Set`s and `Map`s and how are they used?\"};function h(l){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...l.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Set\"}),\"s and \",(0,n.jsx)(e.code,{children:\"Map\"}),\"s are built-in JavaScript objects that help manage collections of data. A \",(0,n.jsx)(e.code,{children:\"Set\"}),\" is a collection of unique values, while a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" is a collection of key-value pairs where keys can be of any type. \",(0,n.jsx)(e.code,{children:\"Set\"}),\"s are useful for storing unique items, and \",(0,n.jsx)(e.code,{children:\"Map\"}),\"s are useful for associating values with keys.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Set example\nlet mySet = new Set([1, 2, 3, 3]); // Set {1, 2, 3} (duplicate values are not added)\nmySet.add(4);\nconsole.log(mySet); // Set {1, 2, 3, 4}\n\n// Map example\nlet myMap = new Map();\nmyMap.set('key1', 'value1');\nmyMap.set('key2', 'value2');\nconsole.log(myMap.get('key1')); // 'value1'\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Set\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"What is a \",(0,n.jsx)(e.code,{children:\"Set\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Set\"}),\" is a collection of values where each value must be unique. It is similar to an array but does not allow duplicate values.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"How to create a \",(0,n.jsx)(e.code,{children:\"Set\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can create a \",(0,n.jsx)(e.code,{children:\"Set\"}),\" using the \",(0,n.jsx)(e.code,{children:\"Set\"}),\" constructor:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let mySet = new Set([1, 2, 3, 3]);\nconsole.log(mySet); // Set {1, 2, 3}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Common methods\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"add(value)\"}),\": Adds a new element with the given value to the \",(0,n.jsx)(e.code,{children:\"Set\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"delete(value)\"}),\": Removes the element associated with the value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"has(value)\"}),\": Returns a boolean indicating whether the value exists in the \",(0,n.jsx)(e.code,{children:\"Set\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"clear()\"}),\": Removes all elements from the \",(0,n.jsx)(e.code,{children:\"Set\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"size\"}),\": Returns the number of elements in the \",(0,n.jsx)(e.code,{children:\"Set\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example usage\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let mySet = new Set();\nmySet.add(1);\nmySet.add(2);\nmySet.add(2); // Duplicate value, will not be added\nconsole.log(mySet.has(1)); // true\nconsole.log(mySet.size); // 2\nmySet.delete(1);\nconsole.log(mySet.has(1)); // false\nmySet.clear();\nconsole.log(mySet.size); // 0\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Map\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"What is a \",(0,n.jsx)(e.code,{children:\"Map\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Map\"}),\" is a collection of key-value pairs where keys can be of any type, including objects, functions, and primitives.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"How to create a \",(0,n.jsx)(e.code,{children:\"Map\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can create a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" using the \",(0,n.jsx)(e.code,{children:\"Map\"}),\" constructor:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let myMap = new Map();\nmyMap.set('key1', 'value1');\nmyMap.set('key2', 'value2');\nconsole.log(myMap); // Map { key1: \"value1\", key2: \"value2\" }\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Common methods\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"set(key, value)\"}),\": Adds or updates an element with the specified key and value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"get(key)\"}),\": Returns the value associated with the key.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"delete(key)\"}),\": Removes the element associated with the key.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"has(key)\"}),\": Returns a boolean indicating whether the key exists in the \",(0,n.jsx)(e.code,{children:\"Map\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"clear()\"}),\": Removes all elements from the \",(0,n.jsx)(e.code,{children:\"Map\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"size\"}),\": Returns the number of elements in the \",(0,n.jsx)(e.code,{children:\"Map\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example usage\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let myMap = new Map();\nmyMap.set('key1', 'value1');\nmyMap.set('key2', 'value2');\nconsole.log(myMap.get('key1')); // 'value1'\nconsole.log(myMap.has('key2')); // true\nconsole.log(myMap.size); // 2\nmyMap.delete('key1');\nconsole.log(myMap.has('key1')); // false\nmyMap.clear();\nconsole.log(myMap.size); // 0\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\",children:\"MDN Web Docs: Set\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\",children:\"MDN Web Docs: Map\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/map-set\",children:\"JavaScript.info: Set and Map\"})}),`\n`]})]})}function s(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,{...l,children:(0,n.jsx)(h,{...l})}):h(l)}return f(w);})();\n;return Component;"
}