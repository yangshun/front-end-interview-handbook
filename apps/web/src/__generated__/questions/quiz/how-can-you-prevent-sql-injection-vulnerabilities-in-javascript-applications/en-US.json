{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "How can you prevent SQL injection vulnerabilities in JavaScript applications?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-can-you-prevent-sql-injection-vulnerabilities-in-javascript-applications",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-can-you-prevent-sql-injection-vulnerabilities-in-javascript-applications",
    "subtitle": null,
    "topics": [
      "javascript",
      "security"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-can-you-prevent-sql-injection-vulnerabilities-in-javascript-applications/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),v=(r,e)=>{for(var i in e)s(r,i,{get:e[i],enumerable:!0})},o=(r,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!y.call(r,t)&&t!==i&&s(r,t,{get:()=>e[t],enumerable:!(a=u(e,t))||a.enumerable});return r};var q=(r,e,i)=>(i=r!=null?h(m(r)):{},o(e||!r||!r.__esModule?s(i,\"default\",{value:r,enumerable:!0}):i,r)),j=r=>o(s({},\"__esModule\",{value:!0}),r);var c=g((x,l)=>{l.exports=_jsx_runtime});var E={};v(E,{default:()=>f,frontmatter:()=>S});var n=q(c()),S={title:\"How can you prevent SQL injection vulnerabilities in JavaScript applications?\"};function d(r){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",h4:\"h4\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"To prevent SQL injection vulnerabilities in JavaScript applications, always use parameterized queries or prepared statements instead of string concatenation to construct SQL queries. This ensures that user input is treated as data and not executable code. Additionally, use ORM libraries that handle SQL injection prevention for you, and always validate and sanitize user inputs.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"How can you prevent SQL injection vulnerabilities in JavaScript applications?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Use parameterized queries or prepared statements\"}),`\n`,(0,n.jsx)(e.p,{children:\"Parameterized queries or prepared statements ensure that user input is treated as data and not executable code. This is the most effective way to prevent SQL injection.\"}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Example using Node.js with the \",(0,n.jsx)(e.code,{children:\"mysql\"}),\" library:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const mysql = require('mysql');\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'test',\n});\n\nconst userId = 1;\nconst query = 'SELECT * FROM users WHERE id = ?';\n\nconnection.query(query, [userId], (error, results) => {\n  if (error) throw error;\n  console.log(results);\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use ORM libraries\"}),`\n`,(0,n.jsx)(e.p,{children:\"Object-Relational Mapping (ORM) libraries like Sequelize, TypeORM, or Mongoose (for MongoDB) abstract away SQL queries and handle SQL injection prevention internally.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Example using Sequelize:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: 'mysql',\n});\n\nconst User = sequelize.define('User', {\n  username: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n});\n\nUser.findAll({\n  where: {\n    id: 1,\n  },\n}).then((users) => {\n  console.log(users);\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Validate and sanitize user inputs\"}),`\n`,(0,n.jsx)(e.p,{children:\"Always validate and sanitize user inputs to ensure they conform to expected formats and do not contain malicious code.\"}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Example using \",(0,n.jsx)(e.code,{children:\"validator\"}),\" library:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const validator = require('validator');\n\nconst userInput = 'someUserInput';\nif (validator.isAlphanumeric(userInput)) {\n  // Proceed with using the input\n} else {\n  // Handle invalid input\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use stored procedures\"}),`\n`,(0,n.jsx)(e.p,{children:\"Stored procedures are precompiled SQL statements stored in the database. They can help prevent SQL injection by separating the SQL logic from user input.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`CREATE PROCEDURE GetUserById(IN userId INT)\nBEGIN\n  SELECT * FROM users WHERE id = userId;\nEND;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use security libraries and frameworks\"}),`\n`,(0,n.jsx)(e.p,{children:\"Leverage security libraries and frameworks that provide built-in protection against SQL injection.\"}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Example using Express.js with \",(0,n.jsx)(e.code,{children:\"express-validator\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const { body, validationResult } = require('express-validator');\n\napp.post(\n  '/user',\n  [body('username').isAlphanumeric(), body('email').isEmail()],\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    // Proceed with safe input\n  },\n);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\",children:\"OWASP SQL Injection Prevention Cheat Sheet\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/mysqljs/mysql\",children:\"Node.js MySQL Documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://sequelize.org/master/\",children:\"Sequelize Documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://express-validator.github.io/docs/\",children:\"Express Validator Documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/validatorjs/validator.js\",children:\"Validator.js Documentation\"})}),`\n`]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var f=b;return j(E);})();\n;return Component;"
}