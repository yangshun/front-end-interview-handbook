{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-currying-and-how-does-it-work",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-currying-and-how-does-it-work",
    "subtitle": null,
    "title": "What is currying and how does it work?",
    "topics": [
      "closure",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-currying-and-how-does-it-work/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var w=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),b=(t,n)=>{for(var i in n)o(t,i,{get:n[i],enumerable:!0})},a=(t,n,i,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!p.call(t,r)&&r!==i&&o(t,r,{get:()=>n[r],enumerable:!(c=g(n,r))||c.enumerable});return t};var v=(t,n,i)=>(i=t!=null?h(m(t)):{},a(n||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),O=t=>a(o({},\"__esModule\",{value:!0}),t);var d=w((A,l)=>{l.exports=_jsx_runtime});var x={};b(x,{default:()=>s,frontmatter:()=>y});var e=v(d()),y={title:\"What is currying and how does it work?\"};function u(t){let n={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Currying is a technique in functional programming where a function that takes multiple arguments is transformed into a series of functions that each take a single argument. This allows for partial application of functions. For example, a function \",(0,e.jsx)(n.code,{children:\"f(a, b, c)\"}),\" can be curried into \",(0,e.jsx)(n.code,{children:\"f(a)(b)(c)\"}),\". Here's a simple example in JavaScript:\"]}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function add(a) {\n  return function (b) {\n    return function (c) {\n      return a + b + c;\n    };\n  };\n}\n\nconst addOne = add(1);\nconsole.log(addOne); // function object\n\nconst addOneAndTwo = addOne(2);\nconsole.log(addOneAndTwo); // function object\n\nconst result = addOneAndTwo(3);\nconsole.log(result); // Output: 6\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"What is currying and how does it work?\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Definition\"}),`\n`,(0,e.jsx)(n.p,{children:\"Currying is a functional programming technique where a function with multiple arguments is decomposed into a sequence of functions, each taking a single argument. This allows for the partial application of functions, enabling more flexible and reusable code.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"How it works\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Transformation\"}),\": A function that takes multiple arguments is transformed into a series of nested functions, each taking one argument.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Partial application\"}),\": You can call the curried function with fewer arguments than it expects, and it will return a new function that takes the remaining arguments.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Example in JavaScript\"}),`\n`,(0,e.jsx)(n.p,{children:\"Here's a simple example to illustrate currying in JavaScript:\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Non-curried function\nfunction add(a, b, c) {\n  return a + b + c;\n}\n\n// Curried version of the same function\nfunction curriedAdd(a) {\n  return function (b) {\n    return function (c) {\n      return a + b + c;\n    };\n  };\n}\n\n// Using the curried function\nconst addOne = curriedAdd(1);\nconsole.log(addOne); // function object\n\nconst addOneAndTwo = addOne(2);\nconsole.log(addOneAndTwo); // function object\n\nconst result = addOneAndTwo(3);\nconsole.log(result); // Output: 6\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Benefits of currying\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Reusability\"}),\": Curried functions can be reused with different sets of arguments.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Partial application\"}),\": You can create new functions by fixing some arguments of the original function.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Function composition\"}),\": Currying makes it easier to compose functions, leading to more readable and maintainable code.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Practical example\"}),`\n`,(0,e.jsx)(n.p,{children:\"Consider a function that calculates the volume of a rectangular prism:\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function volume(length, width, height) {\n  return length * width * height;\n}\n\n// Curried version\nfunction curriedVolume(length) {\n  return function (width) {\n    return function (height) {\n      return length * width * height;\n    };\n  };\n}\n\n// Using the curried function\nconst volumeWithLength5 = curriedVolume(5);\nconst volumeWithLength5AndWidth4 = volumeWithLength5(4);\nconst result = volumeWithLength5AndWidth4(3);\nconsole.log(result); // Output: 60\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Currying with arrow functions\"}),`\n`,(0,e.jsx)(n.p,{children:\"You can also use arrow functions to make the syntax more concise:\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const curriedAdd = (a) => (b) => (c) => a + b + c;\n\nconst addOne = curriedAdd(1);\nconst addOneAndTwo = addOne(2);\nconst result = addOneAndTwo(3);\nconsole.log(result); // Output: 6\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Currying\",children:\"MDN Web Docs: Function currying\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://javascript.info/currying\",children:\"JavaScript.info: Currying\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://www.sitepoint.com/currying-in-functional-javascript/\",children:\"Functional Programming in JavaScript: Currying\"})}),`\n`]})]})}function s(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(u,{...t})}):u(t)}return O(x);})();\n;return Component;"
}