{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are JavaScript object getters and setters for?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-javascript-object-getters-and-setters-for",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 460,
    "similarQuestions": [],
    "slug": "what-are-javascript-object-getters-and-setters-for",
    "subtitle": null,
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-javascript-object-getters-and-setters-for/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var r in e)o(n,r,{get:e[r],enumerable:!0})},i=(n,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!m.call(n,a)&&a!==r&&o(n,a,{get:()=>e[a],enumerable:!(s=p(e,a))||s.enumerable});return n};var y=(n,e,r)=>(r=n!=null?h(g(n)):{},i(e||!n||!n.__esModule?o(r,\"default\",{value:n,enumerable:!0}):r,n)),b=n=>i(o({},\"__esModule\",{value:!0}),n);var c=f((J,l)=>{l.exports=_jsx_runtime});var S={};v(S,{default:()=>N,frontmatter:()=>j});var t=y(c()),j={title:\"What are JavaScript object getters and setters for?\"};function d(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",ul:\"ul\",li:\"li\",strong:\"strong\",ol:\"ol\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,t.jsx)(e.p,{children:\"JavaScript object getters and setters are used to control access to an object's properties. They provide a way to encapsulate the implementation details of a property and define custom behavior when getting or setting its value.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Getters and setters are defined using the \",(0,t.jsx)(e.code,{children:\"get\"}),\" and \",(0,t.jsx)(e.code,{children:\"set\"}),\" keywords, respectively, followed by a function that is executed when the property is accessed or assigned a new value.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Here's a code example demonstrating the use of getters and setters:\"}),`\n`,(0,t.jsx)(e.pre,{live:!0,children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const person = {\n  _name: 'John Doe', // Private property\n\n  get name() {\n    // Getter\n    return this._name;\n  },\n  set name(newName) {\n    // Setter\n    if (newName.trim().length > 0) {\n      this._name = newName;\n    } else {\n      console.log('Invalid name');\n    }\n  },\n};\n\n// Accessing the name property using the getter\nconsole.log(person.name); // Output: 'John Doe'\n\n// Setting the name property using the setter\nperson.name = 'Jane Smith'; // Setter is called\nconsole.log(person.name); // Output: 'Jane Smith'\n\nperson.name = ''; // Setter is called, but the value is not set due to validation\nconsole.log(person.name); // Output: 'Jane Smith'\n`})}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.h2,{children:\"JavaScript object getters and setters\"}),`\n`,(0,t.jsx)(e.p,{children:\"In JavaScript, getters and setters are special methods that allow you to control how properties of an object are accessed and modified.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Getters\"}),\": Functions that are invoked whenever you try to access a property using dot notation (e.g., \",(0,t.jsx)(e.code,{children:\"obj.name\"}),\"). They provide a way to customize the value that is returned when the property is read.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Setters\"}),\": Functions that are called when you try to assign a value to a property using dot notation with the assignment operator (e.g., \",(0,t.jsx)(e.code,{children:'obj.name = \"John\"'}),\"). They allow you to perform actions like data validation, formatting, or side effects before the actual value is stored in the object.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.pre,{live:!0,children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const person = {\n  _firstName: 'John',\n  _lastName: 'Doe',\n  get fullName() {\n    return \\`\\${this._firstName} \\${this._lastName}\\`;\n  },\n  set fullName(value) {\n    const parts = value.split(' ');\n    this._firstName = parts[0];\n    this._lastName = parts[1];\n  },\n};\n\nconsole.log(person.fullName); // Output: John Doe\nperson.fullName = 'Jane Smith';\nconsole.log(person.fullName); // Output: Jane Smith\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this example, the \",(0,t.jsx)(e.code,{children:\"fullName\"}),\" property doesn't have a direct value stored in the object. The getter function calculates it by combining the \",(0,t.jsx)(e.code,{children:\"_firstName\"}),\" and \",(0,t.jsx)(e.code,{children:\"_lastName\"}),\" properties. The setter splits the assigned value into first and last names and updates the internal properties accordingly.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Benefits\"}),`\n`,(0,t.jsx)(e.p,{children:\"Getters and setters provide several benefits:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Encapsulation\"}),\": They allow you to encapsulate the implementation details of a property, making it easier to change the internal representation without affecting external code that uses the property.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Data validation\"}),\": Setters can be used to validate the values being assigned to a property, ensuring data integrity and consistency.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Computed Properties\"}),\": Getters can be used to compute and return a derived value based on other properties or calculations.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Side effects\"}),\": Setters can be used to perform side effects when a property is changed. For example, you might update a related property or trigger an action when a specific value is assigned/modified, such as logging or debugging.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\",children:\"Object.defineProperty() | MDN\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://javascript.info/property-descriptors\",children:\"Property flags and descriptors | Javascript.info\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\",children:\"Object.seal() | MDN\"})}),`\n`]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var N=w;return b(S);})();\n;return Component;"
}