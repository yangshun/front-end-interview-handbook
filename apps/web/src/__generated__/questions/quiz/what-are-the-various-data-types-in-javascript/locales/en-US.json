{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are the various data types in JavaScript?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-the-various-data-types-in-javascript/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},a=(r,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!m.call(r,l)&&l!==t&&i(r,l,{get:()=>e[l],enumerable:!(o=g(e,l))||o.enumerable});return r};var b=(r,e,t)=>(t=r!=null?h(u(r)):{},a(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),v=r=>a(i({},\"__esModule\",{value:!0}),r);var s=f((R,c)=>{c.exports=_jsx_runtime});var N={};y(N,{default:()=>S,frontmatter:()=>j});var n=b(s()),j={title:\"What are the various data types in JavaScript?\"};function d(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",strong:\"strong\",ul:\"ul\",li:\"li\",a:\"a\",hr:\"hr\",h3:\"h3\",ol:\"ol\",pre:\"pre\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In JavaScript, data types can be categorized into \",(0,n.jsx)(e.code,{children:\"primitive\"}),\" and \",(0,n.jsx)(e.code,{children:\"non-primitive\"}),\" types:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Primitive data types\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Number\"}),\": Represents both integers and floating-point numbers.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"String\"}),\": Represents sequences of characters.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Boolean\"}),\": Represents \",(0,n.jsx)(e.code,{children:\"true\"}),\" or \",(0,n.jsx)(e.code,{children:\"false\"}),\" values.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Undefined\"}),\": A variable that has been declared but not assigned a value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Null\"}),\": Represents the intentional absence of any object value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Symbol\"}),\": A unique and immutable value used as object property keys. Read more in our \",(0,n.jsxs)(e.a,{href:\"/questions/quiz/what-are-symbols-used-for\",children:[\"deep dive on \",(0,n.jsx)(e.code,{children:\"Symbol\"}),\"s\"]})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"BigInt\"}),\": Represents integers with arbitrary precision.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Non-primitive (Reference) data types\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Object\"}),\": Used to store collections of data.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Array\"}),\": An ordered collection of data.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Function\"}),\": A callable object.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Date\"}),\": Represents dates and times.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"RegExp\"}),\": Represents regular expressions.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Map\"}),\": A collection of keyed data items.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Set\"}),\": A collection of unique values.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The primitive types store a single value, while non-primitive types can store collections of data or complex entities.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Data types in JavaScript\"}),`\n`,(0,n.jsx)(e.p,{children:\"JavaScript, like many programming languages, has a variety of data types to represent different kinds of data. The main data types in JavaScript can be divided into two categories: primitive and non-primitive (reference) types.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Primitive data types\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Number\"}),\": Represents both integer and floating-point numbers. JavaScript only has one type of number.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let age = 25;\nlet price = 99.99;\nconsole.log(price); // 99.99\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"String\"}),\": Represents sequences of characters. \",(0,n.jsx)(e.code,{children:\"Strings\"}),\" can be enclosed in single quotes, double quotes, or backticks (for template literals).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let myName = 'John Doe';\nlet greeting = 'Hello, world!';\nlet message = \\`Welcome, \\${myName}!\\`;\nconsole.log(message); // \"Welcome, John Doe!\"\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Boolean\"}),\": Represents logical entities and can have two values: \",(0,n.jsx)(e.code,{children:\"true\"}),\" or \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let isActive = true;\nlet isOver18 = false;\nconsole.log(isOver18); // false\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Undefined\"}),\": A variable that has been declared but not assigned a value is of type \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let user;\nconsole.log(user); // undefined\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Null\"}),\": Represents the intentional absence of any object value. It is a primitive value and is treated as a falsy value.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let user = null;\nconsole.log(user); // null\nif (!user) {\n  console.log('user is a falsy value');\n}\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"6\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Symbol\"}),\": A unique and immutable \",(0,n.jsx)(e.code,{children:\"primitive\"}),\" value, typically used as the key of an object property.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let sym1 = Symbol();\nlet sym2 = Symbol('description');\nconsole.log(sym1); // Symbol()\nconsole.log(sym2); // Symbol(description)\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"7\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"BigInt\"}),\": Used for representing integers with arbitrary precision, useful for working with very large numbers.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let bigNumber = BigInt(9007199254740991);\nlet anotherBigNumber = 1234567890123456789012345678901234567890n;\nconsole.log(bigNumber); // 9007199254740991n\nconsole.log(anotherBigNumber); // 1234567890123456789012345678901234567890n\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Non-primitive (reference) data types\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Object\"}),\": It is used to store collections of data and more complex entities. \",(0,n.jsx)(e.code,{children:\"Objects\"}),\" are created using curly braces \",(0,n.jsx)(e.code,{children:\"{}\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let person = {\n  name: 'Alice',\n  age: 30,\n};\nconsole.log(person); // {name: \"Alice\", age: 30}\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Array\"}),\": A special type of object used for storing ordered collections of data. \",(0,n.jsx)(e.code,{children:\"Arrays\"}),\" are created using square brackets \",(0,n.jsx)(e.code,{children:\"[]\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers);\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Function\"}),\": \",(0,n.jsx)(e.code,{children:\"Functions\"}),\" in JavaScript are \",(0,n.jsx)(e.code,{children:\"objects\"}),\". They can be defined using function declarations or expressions.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function greet() {\n  console.log('Hello!');\n}\n\nlet add = function (a, b) {\n  return a + b;\n};\n\ngreet(); // \"Hello!\"\nconsole.log(add(2, 3)); // 5\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Date\"}),\": Represents dates and times. The \",(0,n.jsx)(e.code,{children:\"Date\"}),\" object is used to work with dates.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let today = new Date().toLocaleTimeString();\nconsole.log(today);\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"RegExp\"}),\": Represents regular expressions, which are patterns used to match character combinations in strings.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let pattern = /abc/;\nlet str = '123abc456';\n\nconsole.log(pattern.test(str)); // true\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"6\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Map\"}),\": A collection of keyed data items, similar to an \",(0,n.jsx)(e.code,{children:\"object\"}),\" but allows keys of any type.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let map = new Map();\nmap.set('key1', 'value1');\nconsole.log(map);\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"7\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Set\"}),\": A collection of unique values.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let set = new Set();\nset.add(1);\nset.add(2);\nconsole.log(set); // { 1, 2 }\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Determining data types\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"JavaScript is a dynamically-typed language, which means variables can hold values of different data types over time. The \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" operator can be used to determine the data type of a value or variable.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(typeof 42); // \"number\"\nconsole.log(typeof 'hello'); // \"string\"\nconsole.log(typeof true); // \"boolean\"\nconsole.log(typeof undefined); // \"undefined\"\nconsole.log(typeof null); // \"object\" (this is a historical bug in JavaScript)\nconsole.log(typeof Symbol()); // \"symbol\"\nconsole.log(typeof BigInt(123)); // \"bigint\"\nconsole.log(typeof {}); // \"object\"\nconsole.log(typeof []); // \"object\"\nconsole.log(typeof function () {}); // \"function\"\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Pitfalls\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Type coercion\"}),`\n`,(0,n.jsx)(e.p,{children:\"JavaScript often performs type coercion, converting values from one type to another, which can lead to unexpected results.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let result = '5' + 2;\nconsole.log(result, typeof result); // \"52 string\" (string concatenation)\n\nlet difference = '5' - 2;\nconsole.log(difference, typeof difference); // 3 \"number\" (numeric subtraction)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the first example, since strings can be concatenated with the \",(0,n.jsx)(e.code,{children:\"+\"}),\" operator, the number is converted into a string and the two strings are concatenated together. In the second example, strings cannot work with the minus operator (\",(0,n.jsx)(e.code,{children:\"-\"}),\"), but two numbers can be minused, so the string is first converted into a number and the result is the difference.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\",children:\"JavaScript data types and data structures - MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/pulse/javascript-guide-data-types-mila-mirovi%C4%87-jykmf\",children:\"JavaScript guide: Data types\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/types\",children:\"Data types - javascript.info\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.programiz.com/javascript/data-types\",children:\"JavaScript data types\"})}),`\n`]})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(d,r)})):d(r)}var S=w;return v(N);})();\n;return Component;"
}