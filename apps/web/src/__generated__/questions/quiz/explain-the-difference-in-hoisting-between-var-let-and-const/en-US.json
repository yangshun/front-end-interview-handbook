{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-difference-in-hoisting-between-var-let-and-const",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-difference-in-hoisting-between-var-let-and-const",
    "subtitle": null,
    "title": "Explain the difference in hoisting between `var`, `let`, and `const`",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-in-hoisting-between-var-let-and-const/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),m=(i,e)=>{for(var t in e)o(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!g.call(i,r)&&r!==t&&o(i,r,{get:()=>e[r],enumerable:!(c=f(e,r))||c.enumerable});return i};var D=(i,e,t)=>(t=i!=null?u(b(i)):{},l(e||!i||!i.__esModule?o(t,\"default\",{value:i,enumerable:!0}):t,i)),z=i=>l(o({},\"__esModule\",{value:!0}),i);var d=v((w,a)=>{a.exports=_jsx_runtime});var S={};m(S,{default:()=>s,frontmatter:()=>x});var n=D(d()),x={title:\"Explain the difference in hoisting between `var`, `let`, and `const`\"};function h(i){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"var\"}),\" declarations are hoisted to the top of their scope and initialized with \",(0,n.jsx)(e.code,{children:\"undefined\"}),\", allowing them to be used before their declaration. \",(0,n.jsx)(e.code,{children:\"let\"}),\" and \",(0,n.jsx)(e.code,{children:\"const\"}),\" declarations are also hoisted but are not initialized, resulting in a \",(0,n.jsx)(e.code,{children:\"ReferenceError\"}),\" if accessed before their declaration. \",(0,n.jsx)(e.code,{children:\"const\"}),\" additionally requires an initial value at the time of declaration.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Hoisting differences between \",(0,n.jsx)(e.code,{children:\"var\"}),\", \",(0,n.jsx)(e.code,{children:\"let\"}),\", and \",(0,n.jsx)(e.code,{children:\"const\"})]}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"var\"}),\" hoisting\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"var\"}),\" declarations are hoisted to the top of their containing function or global scope. This means the variable is available throughout the entire function or script, even before the line where it is declared. However, the variable is initialized with \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" until the actual declaration is encountered.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(a); // Output: undefined\nvar a = 10;\nconsole.log(a); // Output: 10\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"let\"}),\" hoisting\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"let\"}),' declarations are also hoisted to the top of their block scope, but they are not initialized. This creates a \"temporal dead zone\" (TDZ) from the start of the block until the declaration is encountered. Accessing the variable in the TDZ results in a ',(0,n.jsx)(e.code,{children:\"ReferenceError\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(b); // ReferenceError: Cannot access 'b' before initialization\nlet b = 20;\nconsole.log(b); // Output: 20\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"const\"}),\" hoisting\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"const\"}),\" declarations behave similarly to \",(0,n.jsx)(e.code,{children:\"let\"}),\" in terms of hoisting. They are hoisted to the top of their block scope but are not initialized, resulting in a TDZ. Additionally, \",(0,n.jsx)(e.code,{children:\"const\"}),\" requires an initial value at the time of declaration and cannot be reassigned.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log(c); // ReferenceError: Cannot access 'c' before initialization\nconst c = 30;\nconsole.log(c); // Output: 30\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\",children:\"MDN Web Docs: var\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\",children:\"MDN Web Docs: let\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\",children:\"MDN Web Docs: const\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/closure#var\",children:\"JavaScript.info: Variable scope, closure\"})}),`\n`]})]})}function s(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(h,{...i})}):h(i)}return z(S);})();\n;return Component;"
}