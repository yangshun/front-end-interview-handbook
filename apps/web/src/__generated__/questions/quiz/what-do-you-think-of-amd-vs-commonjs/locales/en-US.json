{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What do you think of CommonJS vs ESM?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-do-you-think-of-amd-vs-commonjs/en-US.mdx"
  },
  "solution": "var Component=(()=>{var a=Object.create;var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var i in e)d(r,i,{get:e[i],enumerable:!0})},s=(r,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!g.call(r,o)&&o!==i&&d(r,o,{get:()=>e[o],enumerable:!(l=m(e,o))||l.enumerable});return r};var S=(r,e,i)=>(i=r!=null?a(p(r)):{},s(e||!r||!r.__esModule?d(i,\"default\",{value:r,enumerable:!0}):i,r)),M=r=>s(d({},\"__esModule\",{value:!0}),r);var t=f((w,c)=>{c.exports=_jsx_runtime});var v={};y(v,{default:()=>j,frontmatter:()=>x});var n=S(t()),x={title:\"What do you think of CommonJS vs ESM?\"};function h(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",pre:\"pre\",strong:\"strong\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"JavaScript has evolved its module systems. ESM (ECMAScript Modules) using \",(0,n.jsx)(e.code,{children:\"import\"}),\" / \",(0,n.jsx)(e.code,{children:\"export\"}),\" is the official standard, natively supported in modern browsers and Node.js, designed for both synchronous and asynchronous use cases. CommonJS (CJS) using \",(0,n.jsx)(e.code,{children:\"require\"}),\" / \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\" was the original standard for Node.js, primarily synchronous, and remains prevalent in the Node ecosystem. AMD (Asynchronous Module Definition) using \",(0,n.jsx)(e.code,{children:\"define\"}),\" / \",(0,n.jsx)(e.code,{children:\"require\"}),\" was an early system designed for asynchronous loading in browsers but is now largely obsolete, replaced by ESM.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h3,{children:\"Overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"Module systems help manage this complexity by allowing code to be split into reusable pieces (modules) with clear dependencies. Over time, different module systems emerged before an official standard was adopted.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"CommonJS\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Characteristics\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Designed for synchronous loading of modules\"}),`\n`,(0,n.jsx)(e.li,{children:\"Primarily used in server-side environments like Node.js\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Uses \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\" and \",(0,n.jsx)(e.code,{children:\"require\"}),\" for defining and loading modules\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`// Defining a module in CommonJS\nconst dep1 = require('dependency1');\nconst dep2 = require('dependency2');\n\nmodule.exports = {\n  // Module code here\n};\n\n// Loading a module in CommonJS\nconst mod1 = require('module1');\nconst mod2 = require('module2');\n\n// Code that uses mod1 and mod2\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"ESM (ECMAScript Modules)\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Characteristics\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Official JavaScript standard module system\"}),`\n`,(0,n.jsx)(e.li,{children:\"Supported natively in modern browsers and Node.js\"}),`\n`,(0,n.jsx)(e.li,{children:\"Designed for both asynchronous and synchronous scenarios\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Uses \",(0,n.jsx)(e.code,{children:\"export\"}),\" and \",(0,n.jsx)(e.code,{children:\"import\"}),\" for defining and loading modules\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import dep1 from 'dependency1'; // if dependency1 had a default export\nimport { dep2 } from 'dependency2'; // named import to import something specific from dependency2\n\n// Module code using dep1, dep2...\n\nexport function someFunction() {\n  // ... function logic ...\n}\nexport const someValue = 'hello';\n\n// Or export multiple things at once\n// export { someFunction, someValue };\n\n// Or export a default value\n// export default class MyClass {\n// ...\n// }\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Key differences\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Loading mechanism\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"CommonJS\"}),\": Synchronous (blocks until loaded).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"ESM\"}),\": Asynchronous-friendly (non-blocking in browsers).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Environment suitability\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"CommonJS\"}),\": Node.js legacy standard.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"ESM\"}),\": Official standard (Browser & Node.js).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Syntax\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"CommonJS\"}),\": \",(0,n.jsx)(e.code,{children:\"require()\"}),\" / \",(0,n.jsx)(e.code,{children:\"module.exports\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"ESM\"}),\": \",(0,n.jsx)(e.code,{children:\"import\"}),\" / \",(0,n.jsx)(e.code,{children:\"export\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Analysis\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"CommonJS\"}),\": Dynamic (runtime analysis).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"ESM\"}),\": Static (compile-time analysis, enables tree-shaking).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsx)(e.h4,{children:\"CommonJS\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Older Node.js projects or where sync loading is needed.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Default in Node.js unless configured for ESM.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"ESM\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Modern web development (native browser support).\"}),`\n`,(0,n.jsx)(e.li,{children:\"New Node.js projects, especially those needing async features or optimizations.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Code intended for both browser and server.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\",children:\"MDN Web Docs on JavaScript modules\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nodejs.org/api/modules.html\",children:\"Node.js: CommonJS modules\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nodejs.org/api/esm.html\",children:\"Node.js: ESM\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://requirejs.org/docs/api.html\",children:\"RequireJS (AMD Loader - Historical)\"})}),`\n`]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var j=b;return M(v);})();\n;return Component;"
}