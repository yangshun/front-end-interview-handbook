{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-error-propagation-in-javascript",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-error-propagation-in-javascript",
    "subtitle": null,
    "title": "Explain the concept of error propagation in JavaScript",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-error-propagation-in-javascript/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),y=(e,n)=>{for(var c in n)o(e,c,{get:n[c],enumerable:!0})},i=(e,n,c,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let t of p(n))!f.call(e,t)&&t!==c&&o(e,t,{get:()=>n[t],enumerable:!(a=u(n,t))||a.enumerable});return e};var w=(e,n,c)=>(c=e!=null?d(g(e)):{},i(n||!e||!e.__esModule?o(c,\"default\",{value:e,enumerable:!0}):c,e)),b=e=>i(o({},\"__esModule\",{value:!0}),e);var s=m((E,h)=>{h.exports=_jsx_runtime});var _={};y(_,{default:()=>x,frontmatter:()=>v});var r=w(s()),v={title:\"Explain the concept of error propagation in JavaScript\"};function l(e){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,r.jsxs)(n.p,{children:[\"Error propagation in JavaScript refers to how errors are passed through the call stack. When an error occurs in a function, it can be caught and handled using \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" blocks. If not caught, the error propagates up the call stack until it is either caught or causes the program to terminate. For example:\"]}),`\n`,(0,r.jsx)(n.pre,{live:!0,children:(0,r.jsx)(n.code,{className:\"language-js\",children:`function a() {\n  throw new Error('An error occurred');\n}\n\nfunction b() {\n  a();\n}\n\ntry {\n  b();\n} catch (e) {\n  console.error(e.message); // Outputs: An error occurred\n}\n`})}),`\n`,(0,r.jsx)(n.hr,{}),`\n`,(0,r.jsx)(n.h2,{children:\"Error propagation in JavaScript\"}),`\n`,(0,r.jsx)(n.p,{children:\"Error propagation in JavaScript is a mechanism that allows errors to be passed up the call stack until they are caught and handled. This is crucial for debugging and ensuring that errors do not cause the entire application to crash unexpectedly.\"}),`\n`,(0,r.jsx)(n.h3,{children:\"How errors propagate\"}),`\n`,(0,r.jsx)(n.p,{children:\"When an error occurs in a function, it can either be caught and handled within that function or propagate up the call stack to the calling function. If the calling function does not handle the error, it continues to propagate up the stack until it reaches the global scope, potentially causing the program to terminate.\"}),`\n`,(0,r.jsxs)(n.h3,{children:[\"Using \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" blocks\"]}),`\n`,(0,r.jsxs)(n.p,{children:[\"To handle errors and prevent them from propagating further, you can use \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" blocks. Here is an example:\"]}),`\n`,(0,r.jsx)(n.pre,{live:!0,children:(0,r.jsx)(n.code,{className:\"language-js\",children:`function a() {\n  throw new Error('An error occurred');\n}\n\nfunction b() {\n  a();\n}\n\ntry {\n  b();\n} catch (e) {\n  console.error(e.message); // Outputs: An error occurred\n}\n`})}),`\n`,(0,r.jsxs)(n.p,{children:[\"In this example, the error thrown in function \",(0,r.jsx)(n.code,{children:\"a\"}),\" propagates to function \",(0,r.jsx)(n.code,{children:\"b\"}),\", and then to the \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" block where it is finally caught and handled.\"]}),`\n`,(0,r.jsx)(n.h3,{children:\"Propagation with asynchronous code\"}),`\n`,(0,r.jsxs)(n.p,{children:[\"Error propagation works differently with asynchronous code, such as promises and \",(0,r.jsx)(n.code,{children:\"async/await\"}),\". For promises, you can use \",(0,r.jsx)(n.code,{children:\".catch()\"}),\" to handle errors:\"]}),`\n`,(0,r.jsx)(n.pre,{live:!0,children:(0,r.jsx)(n.code,{className:\"language-js\",children:`function a() {\n  return Promise.reject(new Error('An error occurred'));\n}\n\nfunction b() {\n  return a();\n}\n\nb().catch((e) => {\n  console.error(e.message); // Outputs: An error occurred\n});\n`})}),`\n`,(0,r.jsxs)(n.p,{children:[\"For \",(0,r.jsx)(n.code,{children:\"async/await\"}),\", you can use \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" blocks:\"]}),`\n`,(0,r.jsx)(n.pre,{live:!0,children:(0,r.jsx)(n.code,{className:\"language-js\",children:`async function a() {\n  throw new Error('An error occurred');\n}\n\nasync function b() {\n  await a();\n}\n\n(async () => {\n  try {\n    await b();\n  } catch (e) {\n    console.error(e.message); // Outputs: An error occurred\n  }\n})();\n`})}),`\n`,(0,r.jsx)(n.h3,{children:\"Best practices\"}),`\n`,(0,r.jsxs)(n.ul,{children:[`\n`,(0,r.jsx)(n.li,{children:\"Always handle errors at the appropriate level to prevent them from propagating unnecessarily.\"}),`\n`,(0,r.jsxs)(n.li,{children:[\"Use \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" blocks for synchronous code and \",(0,r.jsx)(n.code,{children:\".catch()\"}),\" or \",(0,r.jsx)(n.code,{children:\"try...catch\"}),\" with \",(0,r.jsx)(n.code,{children:\"async/await\"}),\" for asynchronous code.\"]}),`\n`,(0,r.jsx)(n.li,{children:\"Log errors to help with debugging and provide meaningful error messages to users.\"}),`\n`]}),`\n`,(0,r.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,r.jsxs)(n.ul,{children:[`\n`,(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements\",children:\"MDN Web Docs: Error handling\"})}),`\n`,(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:\"https://javascript.info/try-catch\",children:'JavaScript.info: Error handling, \"try...catch\"'})}),`\n`,(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:\"https://nodejs.dev/learn/error-handling-in-nodejs\",children:\"Node.js Error Handling Best Practices\"})}),`\n`]})]})}function j(e={}){let{wrapper:n}=e.components||{};return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}var x=j;return b(_);})();\n;return Component;"
}