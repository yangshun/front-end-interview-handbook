{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-objectseal-for",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-objectseal-for",
    "subtitle": null,
    "title": "What is `Object.seal()` for?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-objectseal-for/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var j=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var r in e)i(o,r,{get:e[r],enumerable:!0})},a=(o,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of b(e))!u.call(o,t)&&t!==r&&i(o,t,{get:()=>e[t],enumerable:!(l=g(e,t))||l.enumerable});return o};var w=(o,e,r)=>(r=o!=null?p(m(o)):{},a(e||!o||!o.__esModule?i(r,\"default\",{value:o,enumerable:!0}):r,o)),x=o=>a(i({},\"__esModule\",{value:!0}),o);var c=j((S,s)=>{s.exports=_jsx_runtime});var y={};f(y,{default:()=>h,frontmatter:()=>v});var n=w(c()),v={title:\"What is `Object.seal()` for?\"};function d(o){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.seal()\"}),\" is used to prevent new properties from being added to an object and to mark all existing properties as non-configurable. This means you can still modify the values of existing properties, but you cannot delete them or add new ones. Doing so will throw errors in strict mode but fail silently in non-strict mode. In the following examples, you can uncomment the 'use strict' comment to see this.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// 'use strict'\n\nconst obj = { name: 'John' };\nObject.seal(obj);\n\nobj.name = 'Jane'; // Allowed\nobj.age = 30; // Not allowed, throws an error in strict mode\ndelete obj.name; // Not allowed, throws an error in strict mode\n\nconsole.log(obj); // { name: 'Jane } (unchanged)\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"What is \",(0,n.jsx)(e.code,{children:\"Object.seal()\"}),\" for?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.seal()\"}),\" is a method in JavaScript that seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. This means that while you can still modify the values of existing properties, you cannot delete them or add new properties.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Syntax\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`Object.seal(obj);\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"obj\"}),\": The object to be sealed.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Behavior\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Preventing new properties\"}),\": Once an object is sealed, you cannot add new properties to it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Non-configurable properties\"}),\": All existing properties become non-configurable, meaning you cannot delete them or change their property descriptors (e.g., making them non-writable).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Modifiable values\"}),\": You can still change the values of existing properties as long as they are writable.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// 'use strict'\n\nconst person = {\n  name: 'Alice',\n  age: 25,\n};\n\nObject.seal(person);\n\nperson.name = 'Bob'; // Allowed\nperson.age = 30; // Allowed\n\nperson.gender = 'female'; // Not allowed, throws an error in strict mode\ndelete person.name; // Not allowed, throws an error in strict mode\n\nconsole.log(person); // { name: 'Bob', age: 30 } (unchanged)\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Data integrity\"}),\": Ensuring that an object structure remains unchanged, which can be useful in scenarios where the object represents a fixed schema.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Security\"}),\": Preventing accidental or malicious modifications to an object, especially in shared or global contexts.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Checking if an object is sealed\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can check if an object is sealed using the \",(0,n.jsx)(e.code,{children:\"Object.isSealed()\"}),\" method.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const obj = { name: 'John' };\nObject.seal(obj);\n\nconsole.log(Object.isSealed(obj)); // true\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\",children:\"MDN Web Docs on Object.seal()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\",children:\"MDN Web Docs on Object.isSealed()\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/property-descriptors\",children:\"JavaScript.info on property flags and descriptors\"})}),`\n`]})]})}function h(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(d,{...o})}):d(o)}return x(y);})();\n;return Component;"
}