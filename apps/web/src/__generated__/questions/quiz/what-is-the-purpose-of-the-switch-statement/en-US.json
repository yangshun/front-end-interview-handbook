{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What is the purpose of the `switch` statement?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-purpose-of-the-switch-statement/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var c in e)a(t,c,{get:e[c],enumerable:!0})},o=(t,e,c,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!f.call(t,s)&&s!==c&&a(t,s,{get:()=>e[s],enumerable:!(i=u(e,s))||i.enumerable});return t};var g=(t,e,c)=>(c=t!=null?d(m(t)):{},o(e||!t||!t.__esModule?a(c,\"default\",{value:t,enumerable:!0}):c,t)),w=t=>o(a({},\"__esModule\",{value:!0}),t);var r=x((I,l)=>{l.exports=_jsx_runtime});var j={};b(j,{default:()=>y,frontmatter:()=>v});var n=g(r()),v={title:\"What is the purpose of the `switch` statement?\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",ul:\"ul\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement is used to execute one block of code among many based on the value of an expression. It is an alternative to using multiple \",(0,n.jsx)(e.code,{children:\"if...else if\"}),\" statements. The \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement evaluates an expression, matches the expression's value to a \",(0,n.jsx)(e.code,{children:\"case\"}),\" label, and executes the associated block of code. If no \",(0,n.jsx)(e.code,{children:\"case\"}),\" matches, the \",(0,n.jsx)(e.code,{children:\"default\"}),\" block is executed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`switch (expression) {\n  case value1:\n    // code to be executed if expression === value1\n    break;\n  case value2:\n    // code to be executed if expression === value2\n    break;\n  default:\n  // code to be executed if no case matches\n}\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Purpose of the \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Simplifies multiple conditional checks\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement provides a cleaner and more readable way to handle multiple conditional checks compared to using multiple \",(0,n.jsx)(e.code,{children:\"if...else if\"}),\" statements. It is particularly useful when you need to compare the same expression against different values.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Syntax and structure\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The basic syntax of a \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement is as follows:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`switch (expression) {\n  case value1:\n    // code to be executed if expression === value1\n    break;\n  case value2:\n    // code to be executed if expression === value2\n    break;\n  // more cases...\n  default:\n  // code to be executed if no case matches\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"How it works\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Expression evaluation\"}),\": The \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement evaluates the expression once.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Case matching\"}),\": It compares the result of the expression to the values of each \",(0,n.jsx)(e.code,{children:\"case\"}),\" label.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Code execution\"}),\": If a match is found, the code associated with that \",(0,n.jsx)(e.code,{children:\"case\"}),\" is executed.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Break statement\"}),\": The \",(0,n.jsx)(e.code,{children:\"break\"}),\" statement is used to exit the \",(0,n.jsx)(e.code,{children:\"switch\"}),\" block. If omitted, the next \",(0,n.jsx)(e.code,{children:\"case\"}),\" will be executed (fall-through behavior).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default case\"}),\": The \",(0,n.jsx)(e.code,{children:\"default\"}),\" case is optional and executes if no matching \",(0,n.jsx)(e.code,{children:\"case\"}),\" is found.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here is an example of a \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement in action:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let fruit = 'apple';\n\nswitch (fruit) {\n  case 'banana':\n    console.log('Banana is yellow.');\n    break;\n  case 'apple':\n    console.log('Apple is red.');\n    break;\n  case 'grape':\n    console.log('Grape is purple.');\n    break;\n  default:\n    console.log('Unknown fruit.');\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the output will be \",(0,n.jsx)(e.code,{children:\"Apple is red.\"}),\" because the value of \",(0,n.jsx)(e.code,{children:\"fruit\"}),\" matches the \",(0,n.jsx)(e.code,{children:\"case 'apple'\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Fall-through behavior\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If the \",(0,n.jsx)(e.code,{children:\"break\"}),\" statement is omitted, the \",(0,n.jsx)(e.code,{children:\"switch\"}),\" statement will continue to execute the subsequent \",(0,n.jsx)(e.code,{children:\"case\"}),\" blocks until it encounters a \",(0,n.jsx)(e.code,{children:\"break\"}),\" or the end of the \",(0,n.jsx)(e.code,{children:\"switch\"}),\" block. This is known as fall-through behavior.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let day = 2;\n\nswitch (day) {\n  case 1:\n    console.log('Monday');\n  case 2:\n    console.log('Tuesday');\n  case 3:\n    console.log('Wednesday');\n  default:\n    console.log('Unknown day');\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example, the output will be:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Tuesday\nWednesday\nUnknown day\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This happens because there are no \",(0,n.jsx)(e.code,{children:\"break\"}),\" statements to stop the execution after the \",(0,n.jsx)(e.code,{children:\"case 2\"}),\" block.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\",children:\"MDN Web Docs: switch statement\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/switch\",children:\"JavaScript.info: switch statement\"})}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var y=k;return w(j);})();\n;return Component;"
}