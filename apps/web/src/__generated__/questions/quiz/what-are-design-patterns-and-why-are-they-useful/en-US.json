{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are design patterns and why are they useful?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-design-patterns-and-why-are-they-useful",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-design-patterns-and-why-are-they-useful",
    "subtitle": null,
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-design-patterns-and-why-are-they-useful/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},o=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!m.call(t,a)&&a!==i&&s(t,a,{get:()=>e[a],enumerable:!(r=p(e,a))||r.enumerable});return t};var f=(t,e,i)=>(i=t!=null?h(u(t)):{},o(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>o(s({},\"__esModule\",{value:!0}),t);var c=b((T,l)=>{l.exports=_jsx_runtime});var S={};y(S,{default:()=>D,frontmatter:()=>v});var n=f(c()),v={title:\"What are design patterns and why are they useful?\"};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",pre:\"pre\",code:\"code\",ul:\"ul\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Design patterns are reusable solutions to common problems in software design. They provide a template for how to solve a problem that can be used in many different situations. They are useful because they help developers avoid common pitfalls, improve code readability, and make it easier to maintain and scale applications.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What are design patterns and why are they useful?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Definition of design patterns\"}),`\n`,(0,n.jsx)(e.p,{children:'Design patterns are general, reusable solutions to common problems that occur in software design. They are not finished designs that can be directly transformed into code but rather templates that describe how to solve a problem in various contexts. The concept was popularized by the book \"Design Patterns: Elements of Reusable Object-Oriented Software\" by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, also known as the \"Gang of Four\" (GoF).'}),`\n`,(0,n.jsx)(e.h3,{children:\"Types of design patterns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Design patterns are typically categorized into three main types:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Creational patterns\"}),\": Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. Examples include Singleton, Factory Method, and Abstract Factory.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Structural patterns\"}),\": Deal with object composition or the structure of classes and objects. Examples include Adapter, Composite, and Decorator.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Behavioral patterns\"}),\": Deal with object interaction and responsibility. Examples include Observer, Strategy, and Command.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Why design patterns are useful\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Reusability\"}),\": Design patterns provide a proven solution to common problems, which can be reused across different projects.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Maintainability\"}),\": They help in writing code that is easier to understand, maintain, and extend.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Scalability\"}),\": Design patterns can help in designing systems that are scalable and can handle growth in complexity.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Communication\"}),\": They provide a common vocabulary for developers, making it easier to discuss and share design ideas.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Best practices\"}),\": They encapsulate best practices and industry standards, helping developers avoid common pitfalls.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example: Singleton pattern\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Singleton pattern ensures that a class has only one instance and provides a global point of access to it. Here is a simple implementation in JavaScript:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class Singleton {\n  constructor() {\n    if (Singleton.instance) {\n      return Singleton.instance;\n    }\n    Singleton.instance = this;\n  }\n\n  someMethod() {\n    console.log('Singleton method');\n  }\n}\n\nconst instance1 = new Singleton();\nconst instance2 = new Singleton();\n\nconsole.log(instance1 === instance2); // true\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the \",(0,n.jsx)(e.code,{children:\"Singleton\"}),\" class ensures that only one instance of the class is created. Any subsequent calls to create a new instance will return the existing instance.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Design_Patterns\",children:\"Design Patterns: Elements of Reusable Object-Oriented Software\"}),\" by the Gang of Four\"]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://refactoring.guru/design-patterns\",children:\"Refactoring Guru: Design Patterns\"})}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\",children:\"JavaScript Design Patterns\"}),\" by Addy Osmani\"]}),`\n`]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var D=x;return w(S);})();\n;return Component;"
}