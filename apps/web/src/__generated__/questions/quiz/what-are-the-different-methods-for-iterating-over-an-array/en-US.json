{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are the different methods for iterating over an array?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-the-different-methods-for-iterating-over-an-array",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-the-different-methods-for-iterating-over-an-array",
    "subtitle": null,
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-the-different-methods-for-iterating-over-an-array/en-US.mdx"
  },
  "solution": "var Component=(()=>{var s=Object.create;var c=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var o in e)c(n,o,{get:e[o],enumerable:!0})},t=(n,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!u.call(n,a)&&a!==o&&c(n,a,{get:()=>e[a],enumerable:!(l=f(e,a))||l.enumerable});return n};var v=(n,e,o)=>(o=n!=null?s(p(n)):{},t(e||!n||!n.__esModule?c(o,\"default\",{value:n,enumerable:!0}):o,n)),b=n=>t(c({},\"__esModule\",{value:!0}),n);var d=y((w,i)=>{i.exports=_jsx_runtime});var x={};g(x,{default:()=>S,frontmatter:()=>j});var r=v(d()),j={title:\"What are the different methods for iterating over an array?\"};function h(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"There are several methods to iterate over an array in JavaScript. The most common ones include \",(0,r.jsx)(e.code,{children:\"for\"}),\" loops, \",(0,r.jsx)(e.code,{children:\"forEach\"}),\", \",(0,r.jsx)(e.code,{children:\"map\"}),\", \",(0,r.jsx)(e.code,{children:\"filter\"}),\", \",(0,r.jsx)(e.code,{children:\"reduce\"}),\", and \",(0,r.jsx)(e.code,{children:\"for...of\"}),\". Each method has its own use case. For example, \",(0,r.jsx)(e.code,{children:\"for\"}),\" loops are versatile and can be used for any kind of iteration, while \",(0,r.jsx)(e.code,{children:\"forEach\"}),\" is specifically for executing a function on each array element. \",(0,r.jsx)(e.code,{children:\"map\"}),\" is used for transforming arrays, \",(0,r.jsx)(e.code,{children:\"filter\"}),\" for filtering elements, \",(0,r.jsx)(e.code,{children:\"reduce\"}),\" for accumulating values, and \",(0,r.jsx)(e.code,{children:\"for...of\"}),\" for iterating over iterable objects.\"]}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsx)(e.h2,{children:\"Different methods for iterating over an array\"}),`\n`,(0,r.jsx)(e.h3,{children:\"For loop\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"for\"}),\" loop is one of the most basic and versatile ways to iterate over an array. It allows you to control the iteration process completely.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const array = [1, 2, 3, 4, 5];\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n`})}),`\n`,(0,r.jsx)(e.h3,{children:\"For...of loop\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"for...of\"}),\" loop is a more modern and readable way to iterate over arrays and other iterable objects.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const array = [1, 2, 3, 4, 5];\nfor (const element of array) {\n  console.log(element);\n}\n`})}),`\n`,(0,r.jsx)(e.h3,{children:\"forEach method\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"forEach\"}),\" method executes a provided function once for each array element.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const array = [1, 2, 3, 4, 5];\narray.forEach((element) => {\n  console.log(element);\n});\n`})}),`\n`,(0,r.jsx)(e.h3,{children:\"Map method\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"map\"}),\" method creates a new array populated with the results of calling a provided function on every element in the calling array.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const array = [1, 2, 3, 4, 5];\nconst newArray = array.map((element) => element * 2);\nconsole.log(newArray); // [2, 4, 6, 8, 10]\n`})}),`\n`,(0,r.jsx)(e.h3,{children:\"Filter method\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"filter\"}),\" method creates a new array with all elements that pass the test implemented by the provided function.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const array = [1, 2, 3, 4, 5];\nconst filteredArray = array.filter((element) => element > 2);\nconsole.log(filteredArray); // [3, 4, 5]\n`})}),`\n`,(0,r.jsx)(e.h3,{children:\"Reduce method\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"reduce\"}),\" method executes a reducer function on each element of the array, resulting in a single output value.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const array = [1, 2, 3, 4, 5];\nconst sum = array.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  0,\n);\nconsole.log(sum); // 15\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\",children:\"MDN Web Docs: Array\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\",children:\"MDN Web Docs: forEach\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\",children:\"MDN Web Docs: map\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\",children:\"MDN Web Docs: filter\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\",children:\"MDN Web Docs: reduce\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\",children:\"MDN Web Docs: for...of\"})}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(h,n)})):h(n)}var S=D;return b(x);})();\n;return Component;"
}