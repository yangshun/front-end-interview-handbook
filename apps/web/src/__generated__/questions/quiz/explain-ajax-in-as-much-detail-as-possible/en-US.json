{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "hard",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-ajax-in-as-much-detail-as-possible",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 270,
    "similarQuestions": [],
    "slug": "explain-ajax-in-as-much-detail-as-possible",
    "subtitle": null,
    "title": "Explain AJAX in as much detail as possible",
    "topics": [
      "javascript",
      "networking"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-ajax-in-as-much-detail-as-possible/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),A=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!f.call(t,o)&&o!==r&&s(t,o,{get:()=>e[o],enumerable:!(a=u(e,o))||a.enumerable});return t};var b=(t,e,r)=>(r=t!=null?p(m(t)):{},i(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),y=t=>i(s({},\"__esModule\",{value:!0}),t);var h=w((P,c)=>{c.exports=_jsx_runtime});var x={};A(x,{default:()=>l,frontmatter:()=>v});var n=b(h()),v={title:\"Explain AJAX in as much detail as possible\"};function d(t){let e={a:\"a\",code:\"code\",h2:\"h2\",hr:\"hr\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"AJAX (Asynchronous JavaScript and XML) facilitates asynchronous communication between the client and server, enabling dynamic updates to web pages without reloading. It uses techniques like \",(0,n.jsx)(e.code,{children:\"XMLHttpRequest\"}),\" or the \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API to send and receive data in the background. In modern web applications, the \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API is more commonly used to implement AJAX.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.strong,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"XMLHttpRequest\"})]})}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      console.log(xhr.responseText);\n    } else {\n      console.error('Request failed: ' + xhr.status);\n    }\n  }\n};\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/todos/1', true);\nxhr.send();\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.strong,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"fetch()\"})]})}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Fetch error:', error));\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"AJAX (Asynchronous JavaScript and XML)\"}),`\n`,(0,n.jsx)(e.p,{children:\"AJAX (asynchronous JavaScript and XML) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. Unlike traditional web applications where every user interaction triggers a full page reload, with AJAX, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, AJAX allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page. In practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Traditionally, AJAX was implemented using the \",(0,n.jsx)(e.code,{children:\"XMLHttpRequest\"}),\" API, but the \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API is more suitable and easier to use for modern web applications.\"]}),`\n`,(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:\"XMLHttpRequest\"}),\" API\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a basic example of how it can be used:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      console.log(xhr.responseText);\n    } else {\n      console.error('Request failed: ' + xhr.status);\n    }\n  }\n};\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/todos/1', true);\nxhr.send();\n`})}),`\n`,(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Alternatively, the \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API provides a modern, promise-based approach to making AJAX requests. It is more commonly used in modern web applications.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how you can use it:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Fetch error:', error));\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"How does AJAX work?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In modern browsers, AJAX is done using the \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API instead of \",(0,n.jsx)(e.code,{children:\"XMLHTTPRequest\"}),\", so we will explain how the \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API works instead:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Making a request\"}),\": The \",(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\",children:[(0,n.jsx)(e.code,{children:\"fetch()\"}),\" function\"]}),\" initiates an asynchronous request to fetch a resource from a URL. It takes one mandatory argument \\u2013 the URL of the resource to fetch, and optionally accepts a second argument - an \",(0,n.jsx)(e.code,{children:\"options\"}),\" object that allows configuring the HTTP request with options like the HTTP method, headers, body, etc.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://api.example.com/data', {\n  method: 'GET', // or 'POST', 'PUT', 'DELETE', etc.\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n`})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Return a promise\"}),\": The \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" function returns a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" that resolves to a \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Response\",children:(0,n.jsx)(e.code,{children:\"Response\"})}),\" object representing the response from the server. This \",(0,n.jsx)(e.code,{children:\"Promise needs\"}),\" to be handled using \",(0,n.jsx)(e.code,{children:\".then()\"}),\" or \",(0,n.jsx)(e.code,{children:\"async/await\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Handling the response\"}),\": The \",(0,n.jsx)(e.code,{children:\"Response\"}),\" object provides methods to define how the body content should be handled, such as \",(0,n.jsx)(e.code,{children:\".json()\"}),\" for parsing JSON data, \",(0,n.jsx)(e.code,{children:\".text()\"}),\" for plain text, \",(0,n.jsx)(e.code,{children:\".blob()\"}),\" for binary data, etc.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n`})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Asynchronous nature\"}),\" The \",(0,n.jsx)(e.code,{children:\"fetch\"}),\" API is asynchronous, allowing the browser to continue executing other tasks while waiting for the server response. This prevents blocking the main thread and provides a better user experience. The \",(0,n.jsx)(e.code,{children:\"then()\"}),\" and \",(0,n.jsx)(e.code,{children:\"catch()\"}),\" callbacks are put onto the microtask queue when executed as part of the \",(0,n.jsx)(e.a,{href:\"/questions/quiz/what-is-event-loop-what-is-the-difference-between-call-stack-and-task-queue\",children:\"event loop\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Request options\"}),\" The optional second argument to \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" allows configuring various aspects of the request, such as the HTTP method, headers, body, credentials, caching behavior, and more.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Error handling\"}),\" Errors during the request, such as network failures or invalid responses, are caught and propagated through the Promise chain using the \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method or try/catch blocks with \",(0,n.jsx)(e.code,{children:\"async/await\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"fetch()\"}),\" API provides a modern, Promise-based approach to making HTTP requests in JavaScript, replacing the older \",(0,n.jsx)(e.code,{children:\"XMLHttpRequest\"}),\" API. It offers a simpler and more flexible way to interact with APIs and fetch resources from servers, while integrating advanced HTTP concepts like CORS and other extensions.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Advantages and disadvantages of AJAX\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"While useful, using AJAX also comes with some considerations. Read more about the \",(0,n.jsx)(e.a,{href:\"/questions/quiz/what-are-the-advantages-and-disadvantages-of-using-ajax\",children:\"advantages and disadvantages of AJAX\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/AJAX\",children:\"AJAX | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\",children:\"Fetch API | MDN \"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\",children:\"XMLHttpRequest | MDN\"})}),`\n`]})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return y(x);})();\n;return Component;"
}