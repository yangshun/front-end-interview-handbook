{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are Promises and how do they work?"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-promises-and-how-do-they-work",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-promises-and-how-do-they-work",
    "subtitle": null,
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-promises-and-how-do-they-work/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),v=(r,e)=>{for(var o in e)c(r,o,{get:e[o],enumerable:!0})},l=(r,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!f.call(r,s)&&s!==o&&c(r,s,{get:()=>e[s],enumerable:!(i=u(e,s))||i.enumerable});return r};var j=(r,e,o)=>(o=r!=null?d(p(r)):{},l(e||!r||!r.__esModule?c(o,\"default\",{value:r,enumerable:!0}):o,r)),P=r=>l(c({},\"__esModule\",{value:!0}),r);var a=g((x,t)=>{t.exports=_jsx_runtime});var S={};v(S,{default:()=>y,frontmatter:()=>w});var n=j(a()),w={title:\"What are Promises and how do they work?\"};function h(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Promises in JavaScript are objects that represent the eventual completion (or failure) of an asynchronous operation and its resulting value. They have three states: \",(0,n.jsx)(e.code,{children:\"pending\"}),\", \",(0,n.jsx)(e.code,{children:\"fulfilled\"}),\", and \",(0,n.jsx)(e.code,{children:\"rejected\"}),\". You can handle the results of a promise using the \",(0,n.jsx)(e.code,{children:\".then()\"}),\" method for success and the \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method for errors.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  // asynchronous operation\n  const success = true;\n  if (success) {\n    resolve('Success!');\n  } else {\n    reject('Error!');\n  }\n});\n\npromise\n  .then((result) => {\n    console.log(result); // 'Success!' (this will print)\n  })\n  .catch((error) => {\n    console.error(error); // 'Error!'\n  });\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What are Promises and how do they work?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Definition\"}),`\n`,(0,n.jsx)(e.p,{children:\"Promises are a way to handle asynchronous operations in JavaScript. They provide a cleaner, more readable way to handle asynchronous code compared to traditional callback functions.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"States of a Promise\"}),`\n`,(0,n.jsx)(e.p,{children:\"A promise can be in one of three states:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Pending\"}),\": The initial state, neither fulfilled nor rejected.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Fulfilled\"}),\": The operation completed successfully.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Rejected\"}),\": The operation failed.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Creating a Promise\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You create a promise using the \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" constructor, which takes a function with two arguments: \",(0,n.jsx)(e.code,{children:\"resolve\"}),\" and \",(0,n.jsx)(e.code,{children:\"reject\"}),\". These are callbacks that you call to change the state of the promise.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  // asynchronous operation\n  const success = true;\n  if (success) {\n    resolve('Success!');\n  } else {\n    reject('Error!');\n  }\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Handling a Promise\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To handle the result of a promise, you use the \",(0,n.jsx)(e.code,{children:\".then()\"}),\" method for a successful outcome and the \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method for an error.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  // asynchronous operation\n  const success = false;\n  if (success) {\n    resolve('Success!');\n  } else {\n    reject('Error!');\n  }\n});\n\npromise\n  .then((result) => {\n    console.log(result); // 'Success!'\n  })\n  .catch((error) => {\n    console.error(error); // 'Error!' (this will print)\n  });\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Chaining Promises\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Promises can be chained to handle multiple asynchronous operations in sequence. Each \",(0,n.jsx)(e.code,{children:\".then()\"}),\" returns a new promise, allowing for further chaining.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Promise 1 resolved after 1 second');\n  }, 1000);\n})\n  .then((result) => {\n    console.log(result);\n    return 'Another promise';\n  })\n  .then((anotherResult) => {\n    console.log(anotherResult);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Combining Promises\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can use \",(0,n.jsx)(e.code,{children:\"Promise.all()\"}),\" to run multiple promises in parallel and wait for all of them to complete.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise1 = Promise.resolve('First');\nlet promise2 = Promise.resolve('Second');\nlet promise3 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Third');\n  }, 2000);\n});\n\nPromise.all([promise1, promise2, promise3]).then((results) => {\n  console.log(results); // ['First', 'Second', 'Third']\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the above example, while \",(0,n.jsx)(e.code,{children:\"promise1\"}),\" and \",(0,n.jsx)(e.code,{children:\"promise2\"}),\" resolve instantly, \",(0,n.jsx)(e.code,{children:\"Promise.all\"}),\" waits for \",(0,n.jsx)(e.code,{children:\"promise3\"}),\", which takes 2 seconds, before logging the results.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",children:\"MDN Web Docs: Promise\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/promise-basics\",children:\"JavaScript.info: Promises\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch11.md#promises\",children:\"You Don't Know JS: Promises\"})}),`\n`]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var y=b;return P(S);})();\n;return Component;"
}