{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [
      "amazon",
      "bytedance"
    ],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/describe-the-difference-between-a-cookie-sessionstorage-and-localstorage",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 70,
    "similarQuestions": [],
    "slug": "describe-the-difference-between-a-cookie-sessionstorage-and-localstorage",
    "subtitle": null,
    "title": "Describe the difference between a cookie, `sessionStorage` and `localStorage` in browsers",
    "topics": [
      "web-api",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/describe-the-difference-between-a-cookie-sessionstorage-and-localstorage/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},a=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!m.call(n,i)&&i!==o&&r(n,i,{get:()=>e[i],enumerable:!(s=g(e,i))||s.enumerable});return n};var S=(n,e,o)=>(o=n!=null?h(p(n)):{},a(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),y=n=>a(r({},\"__esModule\",{value:!0}),n);var l=f((I,c)=>{c.exports=_jsx_runtime});var T={};b(T,{default:()=>w,frontmatter:()=>k});var t=S(l()),k={title:\"Describe the difference between a cookie, `sessionStorage` and `localStorage` in browsers\"};function d(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\",strong:\"strong\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",hr:\"hr\",h3:\"h3\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"All of the following are mechanisms of storing data on the client, the user's browser in this case. \",(0,t.jsx)(e.code,{children:\"localStorage\"}),\" and \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" both implement the \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\",children:\"Web Storage API interface\"}),\".\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Cookies\"}),\": Suitable for server-client communication, small storage capacity, can be persistent or session-based, domain-specific. Sent to the server on every request.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:\"localStorage\"})}),\": Suitable for long-term storage, data persists even after the browser is closed, accessible across all tabs and windows of the same origin, highest storage capacity among the three.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.code,{children:\"sessionStorage\"})}),\": Suitable for temporary data within a single page session, data is cleared when the tab or window is closed, has a higher storage capacity compared to cookies.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Here's a table summarizing the 3 client storage mechanisms.\"}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Property\"}),(0,t.jsx)(e.th,{children:\"Cookie\"}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.code,{children:\"localStorage\"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.code,{children:\"sessionStorage\"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Initiator\"}),(0,t.jsxs)(e.td,{children:[\"Client or server. Server can use \",(0,t.jsx)(e.code,{children:\"Set-Cookie\"}),\" header\"]}),(0,t.jsx)(e.td,{children:\"Client\"}),(0,t.jsx)(e.td,{children:\"Client\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Lifespan\"}),(0,t.jsx)(e.td,{children:\"As specified\"}),(0,t.jsx)(e.td,{children:\"Until deleted\"}),(0,t.jsx)(e.td,{children:\"Until tab is closed\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Persistent across browser sessions\"}),(0,t.jsx)(e.td,{children:\"If a future expiry date is set\"}),(0,t.jsx)(e.td,{children:\"Yes\"}),(0,t.jsx)(e.td,{children:\"No\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Sent to server with every HTTP request\"}),(0,t.jsxs)(e.td,{children:[\"Yes, sent via \",(0,t.jsx)(e.code,{children:\"Cookie\"}),\" header\"]}),(0,t.jsx)(e.td,{children:\"No\"}),(0,t.jsx)(e.td,{children:\"No\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Total capacity (per domain)\"}),(0,t.jsx)(e.td,{children:\"4kb\"}),(0,t.jsx)(e.td,{children:\"5MB\"}),(0,t.jsx)(e.td,{children:\"5MB\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Access\"}),(0,t.jsx)(e.td,{children:\"Across windows/tabs\"}),(0,t.jsx)(e.td,{children:\"Across windows/tabs\"}),(0,t.jsx)(e.td,{children:\"Same tab\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Security\"}),(0,t.jsxs)(e.td,{children:[\"JavaScript cannot access \",(0,t.jsx)(e.code,{children:\"HttpOnly\"}),\" cookies\"]}),(0,t.jsx)(e.td,{children:\"None\"}),(0,t.jsx)(e.td,{children:\"None\"})]})]})]}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.h2,{children:\"Storage on the web\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Cookies, \",(0,t.jsx)(e.code,{children:\"localStorage\"}),\", and \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\", are all storage mechanisms on the client (web browser). It is useful to store data on the client for client-only state like access tokens, themes, personalized layouts, so that users can have a consistent experience on a website across tabs and usage sessions.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"These client-side storage mechanisms have the following common properties:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"This means the clients can read and modify the values (except for \",(0,t.jsx)(e.code,{children:\"HttpOnly\"}),\" cookies).\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Key-value based storage.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"They are only able to store values as strings. Non-strings will have to be serialized into a string (e.g. \",(0,t.jsx)(e.code,{children:\"JSON.stringify()\"}),\") in order to be stored.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Use cases for each storage mechanism\"}),`\n`,(0,t.jsx)(e.p,{children:\"Since cookies have a relatively low maximum size, it is not advisable to store all your client-side data within cookies. The distinguishing properties about cookies are that cookies are sent to the server on every HTTP request so the low maximum size is a feature that prevents your HTTP requests from being too large due to cookies. Automatic expiry of cookies is a useful feature as well.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"With that in mind, the best kind of data to store within cookies is small pieces of data that needs to be transmitted to the server, such as auth tokens, session IDs, analytics tracking IDs, GDPR cookie consent, language preferences that are important for authentication, authorization, and rendering on the server. These values are sometimes sensitive and can benefit from the \",(0,t.jsx)(e.code,{children:\"HttpOnly\"}),\", \",(0,t.jsx)(e.code,{children:\"Secure\"}),\", and \",(0,t.jsx)(e.code,{children:\"Expires\"}),\"/\",(0,t.jsx)(e.code,{children:\"Max-Age\"}),\" capabilities that cookies provide.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"localStorage\"}),\" and \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" both implement the \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\",children:\"Web Storage API interface\"}),\". Web Storages have a generous total capacity of 5MB, so storage size is usually not a concern. The key difference is that values stored in Web Storage are not automatically sent on HTTP requests. While you can manually include values from Web Storage when making AJAX/\",(0,t.jsx)(e.code,{children:\"fetch()\"}),\" requests, the initial browser request will contain them.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Hence Web Storage should not be used to store data that is relied on by the server for the initial rendering of the page if server-side rendering is being used (typically authentication/authorization-related information). \",(0,t.jsx)(e.code,{children:\"localStorage\"}),\" is most suitable for user preferences data that do not expire, like themes and layouts (if it is not important for the server to render the final layout). \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" is most suitable for temporary data that only needs to be accessible within the current browsing session, such as form data (useful to preserve data during accidental reloads).\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The following sections dive deeper into each client storage mechanism.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Cookies\"}),`\n`,(0,t.jsx)(e.p,{children:\"Cookies are used to store small pieces of data on the client side that can be sent back to the server with every HTTP request.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Storage capacity\"}),\": Limited to around 4KB for all cookies.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Lifespan\"}),\": Cookies can have a specific expiration date set using the \",(0,t.jsx)(e.code,{children:\"Expires\"}),\" or \",(0,t.jsx)(e.code,{children:\"Max-Age\"}),\" attributes. If no expiration date is set, the cookie is deleted when the browser is closed (session cookie).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Access\"}),\": Cookies are domain-specific and can be shared across different pages and subdomains within the same domain.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Security\"}),\": Cookies can be marked as \",(0,t.jsx)(e.code,{children:\"HttpOnly\"}),\" to prevent access from JavaScript, reducing the risk of XSS attacks. They can also be secured with the \",(0,t.jsx)(e.code,{children:\"Secure\"}),\" flag to ensure they are sent only when HTTPS is used.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// Set a cookie for the name/key \\`auth_token\\` with an expiry.\ndocument.cookie =\n  'auth_token=abc123def; expires=Fri, 31 Dec 2024 23:59:59 GMT; path=/';\n\n// Read all cookies. There's no way to read specific cookies using \\`document.cookie\\`.\n// You have to parse the string yourself.\nconsole.log(document.cookie); // auth_token=abc123def\n\n// Delete the cookie with the name/key \\`auth_token\\` by setting an\n// expiry date in the past. The value doesn't matter.\ndocument.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"It is a pain to read/write to cookies. \",(0,t.jsx)(e.code,{children:\"document.cookie\"}),\" returns a single string containing all the key/value pairs delimited by \",(0,t.jsx)(e.code,{children:\";\"}),\" and you have to parse the string yourself. The \",(0,t.jsx)(e.a,{href:\"https://github.com/js-cookie/js-cookie\",children:(0,t.jsx)(e.code,{children:\"js-cookie\"})}),\" npm library provides a simple and lightweight API for reading/writing cookies in JavaScript.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"A modern native way of accessing cookies is via the \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API\",children:\"Cookie Store API\"}),\" which is only available on HTTPS pages.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// Set a cookie. More options are available too.\ncookieStore.set('auth_token', 'abc123def');\n\n// Async method to access a single cookie and do something with it.\ncookieStore.get('auth_token').then(...);\n\n// Async method to get all cookies.\ncookieStore.getAll().then(...);\n\n// Async method to delete a single cookie.\ncookieStore.delete('auth_token').then(() =>\n  console.log('Cookie deleted')\n);\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The CookieStore API is relatively new and may not be supported in all browsers (supported in latest Chrome and Edge as of June 2024). Refer to \",(0,t.jsx)(e.a,{href:\"https://caniuse.com/mdn-api_cookiestore\",children:\"caniuse.com\"}),\" for the latest compatibility.\"]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"localStorage\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"localStorage\"}),\" is used for storing data that persists even after the browser is closed and reopened. It is designed for long-term storage of data.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Storage capacity\"}),\": Typically around 5MB per origin (varies by browser).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Lifespan\"}),\": Data in \",(0,t.jsx)(e.code,{children:\"localStorage\"}),\" persists until explicitly deleted by the user or the application.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Access\"}),\": Data is accessible within all tabs and windows of the same origin.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Security\"}),\": All JavaScript on the page have access to values within \",(0,t.jsx)(e.code,{children:\"localStorage\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// Set a value in localStorage.\nlocalStorage.setItem('key', 'value');\n\n// Get a value from localStorage.\nconsole.log(localStorage.getItem('key'));\n\n// Remove a value from localStorage.\nlocalStorage.removeItem('key');\n\n// Clear all data in localStorage.\nlocalStorage.clear();\n`})}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"sessionStorage\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" is used to store data for the duration of the page session. It is designed for temporary storage of data.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Storage Capacity\"}),\": Typically around 5MB per origin (varies by browser).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Lifespan\"}),\": Data in \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" is cleared when the page session ends (i.e., when the browser or tab is closed). Reloading the page does not destroy data within \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Access\"}),\": Data is only accessible within the current tab or window. Different tabs or windows with the same page will have different \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" objects.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Security\"}),\": All JavaScript on the same page have access to values within \",(0,t.jsx)(e.code,{children:\"sessionStorage\"}),\" for that page.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`// Set a value in sessionStorage.\nsessionStorage.setItem('key', 'value');\n\n// Get a value from sessionStorage.\nconsole.log(sessionStorage.getItem('key'));\n\n// Remove a value from sessionStorage.\nsessionStorage.removeItem('key');\n\n// Clear all data in sessionStorage.\nsessionStorage.clear();\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"There are also other client-side storage mechanisms like \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\",children:\"IndexedDB\"}),\" which is more powerful than the above-mentioned technologies but more complicated to use.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"References\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies\",children:\"What is the difference between localStorage, sessionStorage, session and cookies?\"})}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var w=v;return y(T);})();\n;return Component;"
}