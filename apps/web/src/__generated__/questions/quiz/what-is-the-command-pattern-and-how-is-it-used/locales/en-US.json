{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What is the Command pattern and how is it used?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-command-pattern-and-how-is-it-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),C=(t,n)=>{for(var o in n)r(t,o,{get:n[o],enumerable:!0})},a=(t,n,o,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of g(n))!p.call(t,i)&&i!==o&&r(t,i,{get:()=>n[i],enumerable:!(s=m(n,i))||s.enumerable});return t};var L=(t,n,o)=>(o=t!=null?d(u(t)):{},a(n||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>a(r({},\"__esModule\",{value:!0}),t);var l=f((q,h)=>{h.exports=_jsx_runtime});var O={};C(O,{default:()=>v,frontmatter:()=>w});var e=L(l()),w={title:\"What is the Command pattern and how is it used?\"};function c(t){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",ul:\"ul\",a:\"a\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"The Command pattern is a behavioral design pattern that turns a request into a stand-alone object containing all information about the request. This transformation allows for parameterization of methods with different requests, queuing of requests, and logging of the requests. It also supports undoable operations. In JavaScript, it can be implemented by creating command objects with \",(0,e.jsx)(n.code,{children:\"execute\"}),\" and \",(0,e.jsx)(n.code,{children:\"undo\"}),\" methods.\"]}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`class Command {\n  execute() {}\n  undo() {}\n}\n\nclass LightOnCommand extends Command {\n  constructor(light) {\n    super();\n    this.light = light;\n  }\n  execute() {\n    this.light.on();\n  }\n  undo() {\n    this.light.off();\n  }\n}\n\nclass Light {\n  on() {\n    console.log('Light is on');\n  }\n  off() {\n    console.log('Light is off');\n  }\n}\n\nconst light = new Light();\nconst lightOnCommand = new LightOnCommand(light);\nlightOnCommand.execute(); // Light is on\nlightOnCommand.undo(); // Light is off\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"What is the Command pattern and how is it used?\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Definition\"}),`\n`,(0,e.jsx)(n.p,{children:\"The Command pattern is a behavioral design pattern that encapsulates a request as an object, thereby allowing for the parameterization of clients with queues, requests, and operations. It also provides support for undoable operations.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Components\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Command\"}),\": Declares an interface for executing an operation.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"ConcreteCommand\"}),\": Implements the \",(0,e.jsx)(n.code,{children:\"execute\"}),\" method by invoking the corresponding operation(s) on \",(0,e.jsx)(n.code,{children:\"Receiver\"}),\".\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Receiver\"}),\": Knows how to perform the operations associated with carrying out a request.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Invoker\"}),\": Asks the command to carry out the request.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Client\"}),\": Creates a \",(0,e.jsx)(n.code,{children:\"ConcreteCommand\"}),\" object and sets its receiver.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Implementation in JavaScript\"}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Step 1: Define the Command interface\n\nclass Command {\n  execute() {}\n  undo() {}\n}\n\n// Step 2: Create ConcreteCommand classes\n\nclass LightOnCommand extends Command {\n  constructor(light) {\n    super();\n    this.light = light;\n  }\n  execute() {\n    this.light.on();\n  }\n  undo() {\n    this.light.off();\n  }\n}\n\nclass LightOffCommand extends Command {\n  constructor(light) {\n    super();\n    this.light = light;\n  }\n  execute() {\n    this.light.off();\n  }\n  undo() {\n    this.light.on();\n  }\n}\n\n// Step 3: Define the Receiver\n\nclass Light {\n  on() {\n    console.log('Light is on');\n  }\n  off() {\n    console.log('Light is off');\n  }\n}\n\n// Step 4: Create the Invoker\n\nclass RemoteControl {\n  setCommand(command) {\n    this.command = command;\n  }\n  pressButton() {\n    this.command.execute();\n  }\n  pressUndo() {\n    this.command.undo();\n  }\n}\n\n// Step 5: Client code\n\nconst light = new Light();\nconst lightOnCommand = new LightOnCommand(light);\nconst lightOffCommand = new LightOffCommand(light);\n\nconst remote = new RemoteControl();\nremote.setCommand(lightOnCommand);\nremote.pressButton(); // Light is on\nremote.pressUndo(); // Light is off\n\nremote.setCommand(lightOffCommand);\nremote.pressButton(); // Light is off\nremote.pressUndo(); // Light is on\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Use cases\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Undo/Redo functionality\"}),\": The Command pattern is ideal for implementing undo and redo operations.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Macro commands\"}),\": It can be used to implement a sequence of commands.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Logging changes\"}),\": It helps in logging changes and auditing them later.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"GUI buttons and menu items\"}),\": It is useful for implementing actions triggered by GUI elements.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://refactoring.guru/design-patterns/command\",children:\"Refactoring Guru: Command Pattern\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://www.dofactory.com/javascript/design-patterns/command\",children:\"JavaScript Design Patterns: Command\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Command_pattern\",children:\"MDN Web Docs: Command Pattern\"})}),`\n`]})]})}function b(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(c,t)})):c(t)}var v=b;return x(O);})();\n;return Component;"
}