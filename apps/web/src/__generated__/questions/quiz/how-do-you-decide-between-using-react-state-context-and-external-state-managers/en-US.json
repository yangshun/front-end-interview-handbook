{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/quiz/how-do-you-decide-between-using-react-state-context-and-external-state-managers"
      }
    ],
    "href": "/questions/quiz/how-do-you-decide-between-using-react-state-context-and-external-state-managers",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 430,
    "similarQuestions": [],
    "slug": "how-do-you-decide-between-using-react-state-context-and-external-state-managers",
    "subtitle": null,
    "title": "How do you decide between using React state, context, and external state managers?",
    "topics": [
      "react"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-reactjs-interview-questions/blob/main/questions/how-do-you-decide-between-using-react-state-context-and-external-state-managers/en-US.mdx"
  },
  "solution": "var Component=(()=>{var m=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},c=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!x.call(t,r)&&r!==o&&a(t,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return t};var C=(t,e,o)=>(o=t!=null?m(g(t)):{},c(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),R=t=>c(a({},\"__esModule\",{value:!0}),t);var d=f((T,i)=>{i.exports=_jsx_runtime});var y={};v(y,{default:()=>h,frontmatter:()=>b});var n=C(d()),b={title:\"How do you decide between using React state, context, and external state managers?\"};function l(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Choosing between React state, context, and external state managers depends on the complexity and scope of your application's state management needs. Use React state for local component state, React context for global state that needs to be shared across multiple components, and external state managers like Redux or MobX for complex state management that requires advanced features like middleware, time-travel debugging, or when the state needs to be shared across a large application.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Deciding between React state, context, and external state managers\"}),`\n`,(0,n.jsx)(e.h3,{children:\"React state\"}),`\n`,(0,n.jsx)(e.p,{children:\"React state is best suited for managing local state within a single component. It is simple to use and provides a straightforward way to handle state that does not need to be shared across multiple components.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"When to use React state\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"When the state is only relevant to a single component\"}),`\n`,(0,n.jsx)(e.li,{children:\"When the state does not need to be accessed or modified by other components\"}),`\n`,(0,n.jsx)(e.li,{children:\"When you want to keep the component self-contained and easy to understand\"}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"React context\"}),`\n`,(0,n.jsx)(e.p,{children:\"React context is useful for sharing state across multiple components without having to pass props down through every level of the component tree. It is ideal for global state that needs to be accessed by many components.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"When to use React context\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"When you need to share state across multiple components\"}),`\n`,(0,n.jsx)(e.li,{children:\"When you want to avoid prop drilling (passing props through many levels of components)\"}),`\n`,(0,n.jsx)(e.li,{children:\"When the state is relatively simple and does not require advanced state management features\"}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import React, { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nfunction ThemedComponent() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    <div>\n      <p>Current theme: {theme}</p>\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle Theme\n      </button>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <ThemedComponent />\n    </ThemeProvider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"External state managers\"}),`\n`,(0,n.jsx)(e.p,{children:\"External state managers like Redux or MobX are designed for complex state management needs. They provide advanced features such as middleware, time-travel debugging, and the ability to manage state across a large application.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"When to use external state managers\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"When the state management needs are complex and involve many interconnected pieces of state\"}),`\n`,(0,n.jsx)(e.li,{children:\"When you need advanced features like middleware, time-travel debugging, or dev tools\"}),`\n`,(0,n.jsx)(e.li,{children:\"When the state needs to be shared across a large application with many components\"}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example with Redux\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`// actions.js\nexport const increment = () => ({ type: 'INCREMENT' });\n\n// reducer.js\nconst initialState = { count: 0 };\n\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n\nexport default counterReducer;\n\n// store.js\nimport { createStore } from 'redux';\nimport counterReducer from './reducer';\n\nconst store = createStore(counterReducer);\n\nexport default store;\n\n// Counter.js\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment } from './actions';\n\nfunction Counter() {\n  const count = useSelector((state) => state.count);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => dispatch(increment())}>Increment</button>\n    </div>\n  );\n}\n\n// App.js\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Counter from './Counter';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Counter />\n    </Provider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/learn/state-a-components-memory\",children:\"React documentation on state\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/learn/passing-data-deeply-with-context\",children:\"React documentation on context\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://redux.js.org/\",children:\"Redux documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://mobx.js.org/README.html\",children:\"MobX documentation\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}return R(y);})();\n;return Component;"
}