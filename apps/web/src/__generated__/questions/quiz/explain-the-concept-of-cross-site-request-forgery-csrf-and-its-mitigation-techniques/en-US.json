{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-cross-site-request-forgery-csrf-and-its-mitigation-techniques",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-cross-site-request-forgery-csrf-and-its-mitigation-techniques",
    "subtitle": null,
    "title": "Explain the concept of Cross-Site Request Forgery (CSRF) and its mitigation techniques",
    "topics": [
      "javascript",
      "networking",
      "security"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-cross-site-request-forgery-csrf-and-its-mitigation-techniques/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var S=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var i in e)s(n,i,{get:e[i],enumerable:!0})},a=(n,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!m.call(n,r)&&r!==i&&s(n,r,{get:()=>e[r],enumerable:!(o=u(e,r))||o.enumerable});return n};var C=(n,e,i)=>(i=n!=null?d(p(n)):{},a(e||!n||!n.__esModule?s(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=>a(s({},\"__esModule\",{value:!0}),n);var h=S((q,c)=>{c.exports=_jsx_runtime});var v={};f(v,{default:()=>R,frontmatter:()=>k});var t=C(h()),k={title:\"Explain the concept of Cross-Site Request Forgery (CSRF) and its mitigation techniques\"};function l(n){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",h4:\"h4\",pre:\"pre\",code:\"code\",ul:\"ul\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,t.jsx)(e.p,{children:\"Cross-Site Request Forgery (CSRF) is an attack where a malicious website tricks a user's browser into making an unwanted request to another site where the user is authenticated. This can lead to unauthorized actions being performed on behalf of the user. Mitigation techniques include using anti-CSRF tokens, SameSite cookies, and ensuring proper CORS configurations.\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(e.h2,{children:\"Cross-Site Request Forgery (CSRF) and its mitigation techniques\"}),`\n`,(0,t.jsx)(e.h3,{children:\"What is CSRF?\"}),`\n`,(0,t.jsx)(e.p,{children:\"Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious website causes a user's browser to perform an unwanted action on a different site where the user is authenticated. This can lead to unauthorized actions such as changing account details, making purchases, or other actions that the user did not intend to perform.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"How does CSRF work?\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"User authentication\"}),\": The user logs into a trusted website (e.g., a banking site) and receives an authentication cookie.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Malicious site\"}),\": The user visits a malicious website while still logged into the trusted site.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Unwanted request\"}),\": The malicious site contains code that makes a request to the trusted site, using the user's authentication cookie to perform actions on behalf of the user.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Mitigation techniques\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Anti-CSRF tokens\"}),`\n`,(0,t.jsx)(e.p,{children:\"One of the most effective ways to prevent CSRF attacks is by using anti-CSRF tokens. These tokens are unique and unpredictable values that are generated by the server and included in forms or requests. The server then validates the token to ensure the request is legitimate.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<form method=\"POST\" action=\"/update-profile\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"unique_token_value\" />\n  <!-- other form fields -->\n  <button type=\"submit\">Update Profile</button>\n</form>\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"On the server side, the token is validated to ensure it matches the expected value.\"}),`\n`,(0,t.jsx)(e.h4,{children:\"SameSite cookies\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"SameSite\"}),\" attribute on cookies can help mitigate CSRF attacks by restricting how cookies are sent with cross-site requests. The \",(0,t.jsx)(e.code,{children:\"SameSite\"}),\" attribute can be set to \",(0,t.jsx)(e.code,{children:\"Strict\"}),\", \",(0,t.jsx)(e.code,{children:\"Lax\"}),\", or \",(0,t.jsx)(e.code,{children:\"None\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-http\",children:`Set-Cookie: sessionId=abc123; SameSite=Strict\n`})}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"Strict\"}),\": Cookies are only sent in a first-party context and not with requests initiated by third-party websites.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"Lax\"}),\": Cookies are not sent on normal cross-site subrequests (e.g., loading images), but are sent when a user navigates to the URL from an external site (e.g., following a link).\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"None\"}),\": Cookies are sent in all contexts, including cross-origin requests.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{children:\"CORS (Cross-Origin Resource Sharing)\"}),`\n`,(0,t.jsx)(e.p,{children:\"Properly configuring CORS can help prevent CSRF attacks by ensuring that only trusted origins can make requests to your server. This involves setting appropriate headers on the server to specify which origins are allowed to access resources.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-http\",children:`Access-Control-Allow-Origin: https://trustedwebsite.com\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Further reading\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html\",children:\"OWASP CSRF Prevention Cheat Sheet\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\",children:\"MDN Web Docs: SameSite cookies\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\",children:\"MDN Web Docs: Cross-Origin Resource Sharing (CORS)\"})}),`\n`]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var R=w;return b(v);})();\n;return Component;"
}