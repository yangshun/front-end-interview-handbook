{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-factory-pattern-and-how-is-it-used",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-the-factory-pattern-and-how-is-it-used",
    "subtitle": null,
    "title": "What is the Factory pattern and how is it used?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-factory-pattern-and-how-is-it-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var c in e)i(t,c,{get:e[c],enumerable:!0})},r=(t,e,c,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(t,o)&&o!==c&&i(t,o,{get:()=>e[o],enumerable:!(a=u(e,o))||a.enumerable});return t};var w=(t,e,c)=>(c=t!=null?h(f(t)):{},r(e||!t||!t.__esModule?i(c,\"default\",{value:t,enumerable:!0}):c,t)),b=t=>r(i({},\"__esModule\",{value:!0}),t);var l=m((D,s)=>{s.exports=_jsx_runtime});var F={};y(F,{default:()=>v,frontmatter:()=>j});var n=w(l()),j={title:\"What is the Factory pattern and how is it used?\"};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",h4:\"h4\",ul:\"ul\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Factory pattern is a design pattern used to create objects without specifying the exact class of the object that will be created. It provides a way to encapsulate the instantiation logic and can be particularly useful when the creation process is complex or when the type of object to be created is determined at runtime.\"}),`\n`,(0,n.jsx)(e.p,{children:\"For example, in JavaScript, you can use a factory function to create different types of objects:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function createAnimal(type) {\n  if (type === 'dog') {\n    return { sound: 'woof' };\n  } else if (type === 'cat') {\n    return { sound: 'meow' };\n  }\n}\n\nconst dog = createAnimal('dog');\nconst cat = createAnimal('cat');\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What is the Factory pattern and how is it used?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Definition\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Factory pattern is a creational design pattern that provides an interface for creating objects in a superclass but allows subclasses to alter the type of objects that will be created. It encapsulates the object creation process, making the code more modular and easier to manage.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Complex object creation\"}),\": When the process of creating an object is complex or involves multiple steps.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Runtime object determination\"}),\": When the type of object to be created is determined at runtime.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Decoupling\"}),\": To decouple the client code from the specific classes it needs to instantiate.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Implementation in JavaScript\"}),`\n`,(0,n.jsx)(e.p,{children:\"In JavaScript, the Factory pattern can be implemented using factory functions or classes. Below are examples of both approaches.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Factory function\"}),`\n`,(0,n.jsx)(e.p,{children:\"A factory function is a simple function that returns an object. It can contain logic to decide which type of object to create.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function createAnimal(type) {\n  if (type === 'dog') {\n    return { sound: 'woof' };\n  } else if (type === 'cat') {\n    return { sound: 'meow' };\n  } else {\n    return { sound: 'unknown' };\n  }\n}\n\nconst dog = createAnimal('dog');\nconst cat = createAnimal('cat');\nconsole.log(dog.sound); // Output: woof\nconsole.log(cat.sound); // Output: meow\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Factory class\"}),`\n`,(0,n.jsx)(e.p,{children:\"A factory class can be used to encapsulate the creation logic within a class structure.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`class AnimalFactory {\n  createAnimal(type) {\n    if (type === 'dog') {\n      return new Dog();\n    } else if (type === 'cat') {\n      return new Cat();\n    } else {\n      return new Animal();\n    }\n  }\n}\n\nclass Dog {\n  constructor() {\n    this.sound = 'woof';\n  }\n}\n\nclass Cat {\n  constructor() {\n    this.sound = 'meow';\n  }\n}\n\nclass Animal {\n  constructor() {\n    this.sound = 'unknown';\n  }\n}\n\nconst factory = new AnimalFactory();\nconst dog = factory.createAnimal('dog');\nconst cat = factory.createAnimal('cat');\nconsole.log(dog.sound); // Output: woof\nconsole.log(cat.sound); // Output: meow\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Benefits\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Encapsulation\"}),\": The creation logic is encapsulated in one place.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Flexibility\"}),\": Easy to add new types of objects without changing the client code.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Decoupling\"}),\": Reduces the dependency of the client code on specific classes.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Drawbacks\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Complexity\"}),\": Can add unnecessary complexity if the object creation logic is simple.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Overhead\"}),\": May introduce additional overhead if not used judiciously.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Factory_method_pattern\",children:\"Factory Method Pattern on Wikipedia\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.dofactory.com/javascript/design-patterns/factory\",children:\"Factory Pattern in JavaScript\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS\",children:\"MDN Web Docs: Object-oriented JavaScript for beginners\"})}),`\n`]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var v=x;return b(F);})();\n;return Component;"
}