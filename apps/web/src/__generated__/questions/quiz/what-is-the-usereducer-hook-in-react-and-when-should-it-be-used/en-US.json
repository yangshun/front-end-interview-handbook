{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": "react",
    "frameworks": [
      {
        "framework": "react",
        "href": "/questions/quiz/what-is-the-usereducer-hook-in-react-and-when-should-it-be-used"
      }
    ],
    "href": "/questions/quiz/what-is-the-usereducer-hook-in-react-and-when-should-it-be-used",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 170,
    "similarQuestions": [],
    "slug": "what-is-the-usereducer-hook-in-react-and-when-should-it-be-used",
    "subtitle": null,
    "title": "What is the `useReducer` hook in React and when should it be used?",
    "topics": [
      "react"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-reactjs-interview-questions/blob/main/questions/what-is-the-usereducer-hook-in-react-and-when-should-it-be-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var R=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},o=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!f.call(t,c)&&c!==r&&a(t,c,{get:()=>e[c],enumerable:!(i=p(e,c))||i.enumerable});return t};var x=(t,e,r)=>(r=t!=null?l(g(t)):{},o(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>o(a({},\"__esModule\",{value:!0}),t);var d=R((j,s)=>{s.exports=_jsx_runtime});var k={};v(k,{default:()=>h,frontmatter:()=>y});var n=x(d()),y={title:\"What is the `useReducer` hook in React and when should it be used?\"};function u(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" hook in React is used for managing complex state logic in functional components. It is an alternative to \",(0,n.jsx)(e.code,{children:\"useState\"}),\" and is particularly useful when the state has multiple sub-values or when the next state depends on the previous one. It takes a reducer function and an initial state as arguments and returns the current state and a dispatch function.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const [state, dispatch] = useReducer(reducer, initialState);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" when you have complex state logic that involves multiple sub-values or when the next state depends on the previous state.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"What is the \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" hook in React and when should it be used?\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Introduction to \",(0,n.jsx)(e.code,{children:\"useReducer\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" hook is a React hook that is used for managing state in functional components. It is an alternative to the \",(0,n.jsx)(e.code,{children:\"useState\"}),\" hook and is particularly useful for managing more complex state logic. The \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" hook is similar to the \",(0,n.jsx)(e.code,{children:\"reduce\"}),\" function in JavaScript arrays, where you have a reducer function that determines how the state should change in response to actions.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Syntax\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" hook takes two arguments: a reducer function and an initial state. It returns an array with the current state and a dispatch function.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`const [state, dispatch] = useReducer(reducer, initialState);\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Reducer function\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The reducer function is a pure function that takes the current state and an action as arguments and returns the new state. The action is an object that typically has a \",(0,n.jsx)(e.code,{children:\"type\"}),\" property and an optional \",(0,n.jsx)(e.code,{children:\"payload\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`function reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Example usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here is a simple example of using \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" to manage a counter state:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-javascript\",children:`import React, { useReducer } from 'react';\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n    </div>\n  );\n}\n\nexport default Counter;\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"When to use \",(0,n.jsx)(e.code,{children:\"useReducer\"})]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Complex state logic\"}),\": Use \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" when you have complex state logic that involves multiple sub-values or when the next state depends on the previous state.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"State management\"}),\": It is useful when you need a more predictable state management pattern, similar to Redux.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Performance optimization\"}),\": \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" can help optimize performance in certain scenarios by avoiding unnecessary re-renders.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://react.dev/reference/react/useReducer\",children:[\"React documentation on \",(0,n.jsx)(e.code,{children:\"useReducer\"})]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://react.dev/learn/scaling-up-with-reducer-and-context\",children:[\"Using the \",(0,n.jsx)(e.code,{children:\"useReducer\"}),\" hook\"]})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}return w(k);})();\n;return Component;"
}