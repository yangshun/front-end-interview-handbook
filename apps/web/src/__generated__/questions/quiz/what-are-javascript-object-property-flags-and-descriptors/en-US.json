{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-javascript-object-property-flags-and-descriptors",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 450,
    "similarQuestions": [],
    "slug": "what-are-javascript-object-property-flags-and-descriptors",
    "subtitle": null,
    "title": "What are JavaScript object property flags and descriptors?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-javascript-object-property-flags-and-descriptors/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var t in e)o(n,t,{get:e[t],enumerable:!0})},l=(n,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of b(e))!u.call(n,i)&&i!==t&&o(n,i,{get:()=>e[i],enumerable:!(c=p(e,i))||c.enumerable});return n};var m=(n,e,t)=>(t=n!=null?h(f(n)):{},l(e||!n||!n.__esModule?o(t,\"default\",{value:n,enumerable:!0}):t,n)),j=n=>l(o({},\"__esModule\",{value:!0}),n);var d=g((T,a)=>{a.exports=_jsx_runtime});var D={};y(D,{default:()=>O,frontmatter:()=>v});var r=m(d()),v={title:\"What are JavaScript object property flags and descriptors?\"};function s(n){let e=Object.assign({h2:\"h2\",p:\"p\",strong:\"strong\",ul:\"ul\",li:\"li\",code:\"code\",hr:\"hr\",pre:\"pre\",h3:\"h3\",a:\"a\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,r.jsx)(e.p,{children:\"In JavaScript, property flags and descriptors manage the behavior and attributes of object properties.\"}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:\"Property flags\"})}),`\n`,(0,r.jsx)(e.p,{children:\"Property flags are used to specify the behavior of a property on an object. Here are the available flags:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"writable\"}),\": Specifies whether the property can be written to. Defaults to \",(0,r.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"enumerable\"}),\": Specifies whether the property is enumerable. Defaults to \",(0,r.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"configurable\"}),\": Specifies whether the property can be deleted or its attributes changed. Default is \",(0,r.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:\"Property descriptors\"})}),`\n`,(0,r.jsxs)(e.p,{children:[\"These provide detailed information about an object's property, including its value and flags. They are retrieved using \",(0,r.jsx)(e.code,{children:\"Object.getOwnPropertyDescriptor()\"}),\" and set using \",(0,r.jsx)(e.code,{children:\"Object.defineProperty()\"}),\".\"]}),`\n`,(0,r.jsx)(e.p,{children:\"The use cases of property descriptors are as follows:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Making a property non-writable by setting \",(0,r.jsx)(e.code,{children:\"writable: false\"}),\" to ensure data consistency.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Hiding a property from enumeration by setting \",(0,r.jsx)(e.code,{children:\"enumerable: false\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Preventing property deletion and modification by setting \",(0,r.jsx)(e.code,{children:\"configurable: false\"}),\".\"]}),`\n`,(0,r.jsx)(e.li,{children:\"Freezing or sealing objects to prevent modifications globally.\"}),`\n`]}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsx)(e.h2,{children:\"JavaScript object property flags and descriptors\"}),`\n`,(0,r.jsx)(e.p,{children:\"In JavaScript, property flags and descriptors are used to manage the behavior and attributes of object properties. These flags and descriptors are essential for understanding how properties are accessed, modified, and inherited.\"}),`\n`,(0,r.jsx)(e.h2,{children:\"Property flags\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Property flags are used to specify the behavior of a property. They are set using the \",(0,r.jsx)(e.code,{children:\"Object.defineProperty()\"}),\" method, which allows you to define a property on an object with specific attributes. The available property flags are:\"]}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"writable\"}),\": Specifies whether the property can be written to. Defaults to \",(0,r.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"enumerable\"}),\": Specifies whether the property is enumerable. Defaults to \",(0,r.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"configurable\"}),\": Specifies whether the property can be deleted or its attributes changed. Default is \",(0,r.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"Property descriptors\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Property descriptors provide detailed information about an object's property, encapsulating its value and flags. They are retrieved using \",(0,r.jsx)(e.code,{children:\"Object.getOwnPropertyDescriptor()\"}),\" and set using \",(0,r.jsx)(e.code,{children:\"Object.defineProperty()\"})]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`let user = { name: 'John Doe' };\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\n\nconsole.log(descriptor); // {value: \"John Doe\", writable: true, enumerable: true, configurable: true}\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Manipulating property flags\"}),`\n`,(0,r.jsxs)(e.h3,{children:[(0,r.jsx)(e.code,{children:\"writable\"}),\" flag\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"writable\"}),\" flag specifies whether a property can be written to. When \",(0,r.jsx)(e.code,{children:\"writable\"}),\" is \",(0,r.jsx)(e.code,{children:\"false\"}),\", trying to assign value to the property fails silently in non-strict mode, and it throws a \",(0,r.jsx)(e.code,{children:\"TypeError\"}),\" in strict mode.\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const obj = {};\n\nObject.defineProperty(obj, 'name', {\n  writable: false,\n  value: 'John Doe',\n});\n\nconsole.log(obj.name); // Output: John Doe\nobj.name = 'Jane Doe'; // TypeError: Cannot assign to read only property 'name' of object '#<Object>'\n`})}),`\n`,(0,r.jsxs)(e.h3,{children:[(0,r.jsx)(e.code,{children:\"enumerable\"}),\" flag\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"enumerable\"}),\" flag specifies whether a property is enumerable. The \",(0,r.jsx)(e.code,{children:\"enumerable flag\"}),\" is set to \",(0,r.jsx)(e.code,{children:\"true\"}),\", which means the property is visible in a \",(0,r.jsx)(e.code,{children:\"for...in\"}),\" loop.\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const obj = {};\n\nObject.defineProperty(obj, 'name', {\n  enumerable: false,\n  value: 'John Doe',\n});\n\nfor (const prop in obj) {\n  console.log(prop); // Output: nothing\n}\n\nconst obj1 = {};\n\nObject.defineProperty(obj1, 'name', {\n  enumerable: true,\n  value: 'John Doe',\n});\n\nfor (const prop in obj1) {\n  console.log(prop); // Output: name\n}\n`})}),`\n`,(0,r.jsxs)(e.h2,{children:[(0,r.jsx)(e.code,{children:\"configurable\"}),\" flag\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"configurable\"}),\" flag specifies whether a property can be deleted or its attributes changed. When \",(0,r.jsx)(e.code,{children:\"configurable\"}),\" is \",(0,r.jsx)(e.code,{children:\"false\"}),\", trying to delete or change the property fails silently in non-strict mode, and it throws a \",(0,r.jsx)(e.code,{children:\"TypeError\"}),\" in strict mode.\"]}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const obj = {};\n\nObject.defineProperty(obj, 'name', {\n  configurable: false,\n  value: 'John Doe',\n});\n\ndelete obj.name; // Output: TypeError: Cannot delete property 'name' of #<Object>\n`})}),`\n`,(0,r.jsx)(e.h2,{children:(0,r.jsx)(e.code,{children:\"Object.seal()\"})}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"Object.seal()\"}),\" method in JavaScript effectively prevents the addition or removal of properties from the object, while still allowing the modification of existing property values. It also makes all properties non-configurable, meaning their descriptors (like \",(0,r.jsx)(e.code,{children:\"writable\"}),\", \",(0,r.jsx)(e.code,{children:\"enumerable\"}),\", and \",(0,r.jsx)(e.code,{children:\"configurable\"}),\") cannot be changed.\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\",children:\"Object.defineProperty() | MDN\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://javascript.info/property-descriptors\",children:\"Property flags and descriptors | Javascript.info\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\",children:\"Object.seal() | MDN\"})}),`\n`]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(s,n)})):s(n)}var O=w;return j(D);})();\n;return Component;"
}