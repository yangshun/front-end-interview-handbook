{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the concept of the Web Socket API",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-the-web-socket-api/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var s in e)r(t,s,{get:e[s],enumerable:!0})},c=(t,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(t,o)&&o!==s&&r(t,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return t};var b=(t,e,s)=>(s=t!=null?d(u(t)):{},c(e||!t||!t.__esModule?r(s,\"default\",{value:t,enumerable:!0}):s,t)),f=t=>c(r({},\"__esModule\",{value:!0}),t);var l=v((P,a)=>{a.exports=_jsx_runtime});var x={};w(x,{default:()=>W,frontmatter:()=>k});var n=b(l()),k={title:\"Explain the concept of the Web Socket API\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",ol:\"ol\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"The WebSocket API provides a way to open a persistent connection between a client and a server, allowing for real-time, two-way communication. Unlike HTTP, which is request-response based, WebSocket enables full-duplex communication, meaning both the client and server can send and receive messages independently. This is particularly useful for applications like chat apps, live updates, and online gaming.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following example uses Postman's WebSocket echo service to demonstrate how web sockets work.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Postman's echo server that will echo back messages you send\nconst socket = new WebSocket('wss://ws.postman-echo.com/raw');\n\n// Event listener for when the connection is open\nsocket.addEventListener('open', function (event) {\n  socket.send('Hello Server!'); // Sends the message to the Postman WebSocket server\n});\n\n// Event listener for when a message is received from the server\nsocket.addEventListener('message', function (event) {\n  console.log('Message from server ', event.data);\n});\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What is the WebSocket API?\"}),`\n`,(0,n.jsx)(e.p,{children:\"The WebSocket API is a technology that provides a way to establish a persistent, low-latency, full-duplex communication channel between a client (usually a web browser) and a server. This is different from the traditional HTTP request-response model, which is stateless and requires a new connection for each request.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Key features\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Full-duplex communication\"}),\": Both the client and server can send and receive messages independently.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Low latency\"}),\": The persistent connection reduces the overhead of establishing a new connection for each message.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Real-time updates\"}),\": Ideal for applications that require real-time data, such as chat applications, live sports updates, and online gaming.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"How it works\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Connection establishment\"}),\": The client initiates a WebSocket connection by sending a handshake request to the server.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Handshake response\"}),\": The server responds with a handshake response, and if successful, the connection is established.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Data exchange\"}),\": Both the client and server can now send and receive messages independently over the established connection.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Connection closure\"}),\": Either the client or server can close the connection when it is no longer needed.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example usage\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here is a basic example of how to use the WebSocket API in JavaScript, using Postman's WebSocket Echo Service.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Postman's echo server that will echo back messages you send\nconst socket = new WebSocket('wss://ws.postman-echo.com/raw');\n\n// Event listener for when the connection is open\nsocket.addEventListener('open', function (event) {\n  console.log('Connection opened');\n  socket.send('Hello Server!'); // Sends the message to the Postman WebSocket server\n});\n\n// Event listener for when a message is received from the server\nsocket.addEventListener('message', function (event) {\n  console.log('Message from server ', event.data);\n});\n\n// Event listener for when the connection is closed\nsocket.addEventListener('close', function (event) {\n  console.log('Connection closed');\n});\n\n// Event listener for when an error occurs\nsocket.addEventListener('error', function (event) {\n  console.error('WebSocket error: ', event);\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Chat applications\"}),\": Real-time messaging between users.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Live updates\"}),\": Stock prices, sports scores, or news updates.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Online gaming\"}),\": Real-time interaction between players.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Collaborative tools\"}),\": Real-time document editing or whiteboarding.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\",children:\"MDN WebSocket API documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.websocket.org/\",children:\"WebSocket.org\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications\",children:\"Introduction to WebSockets\"})}),`\n`]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var W=S;return f(x);})();\n;return Component;"
}