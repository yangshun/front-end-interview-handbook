{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-write-unit-tests-for-javascript-code",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-you-write-unit-tests-for-javascript-code",
    "subtitle": null,
    "title": "How do you write unit tests for JavaScript code?",
    "topics": [
      "javascript",
      "testing"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-write-unit-tests-for-javascript-code/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var s in e)o(t,s,{get:e[s],enumerable:!0})},r=(t,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of p(e))!f.call(t,c)&&c!==s&&o(t,c,{get:()=>e[c],enumerable:!(i=u(e,c))||i.enumerable});return t};var x=(t,e,s)=>(s=t!=null?h(m(t)):{},r(e||!t||!t.__esModule?o(s,\"default\",{value:t,enumerable:!0}):s,t)),y=t=>r(o({},\"__esModule\",{value:!0}),t);var d=g((J,a)=>{a.exports=_jsx_runtime});var v={};j(v,{default:()=>b,frontmatter:()=>k});var n=x(d()),k={title:\"How do you write unit tests for JavaScript code?\"};function l(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To write unit tests for JavaScript code, you typically use a testing framework like Jest or Mocha. First, you set up your testing environment by installing the necessary libraries. Then, you write test cases using functions like \",(0,n.jsx)(e.code,{children:\"describe\"}),\", \",(0,n.jsx)(e.code,{children:\"it\"}),\", or \",(0,n.jsx)(e.code,{children:\"test\"}),\" to define your tests. Each test case should focus on a small, isolated piece of functionality. You use assertions to check if the output of your code matches the expected result.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example using Jest:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n\n// sum.test.js\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Setting up the testing environment\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Installing Jest\"}),`\n`,(0,n.jsx)(e.p,{children:\"To get started with Jest, you need to install it via npm:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm install --save-dev jest\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Configuring Jest\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Add a script to your \",(0,n.jsx)(e.code,{children:\"package.json\"}),\" to run Jest:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Writing test cases\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Basic structure\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A test file typically contains one or more \",(0,n.jsx)(e.code,{children:\"describe\"}),\" blocks, which group related tests, and \",(0,n.jsx)(e.code,{children:\"it\"}),\" or \",(0,n.jsx)(e.code,{children:\"test\"}),\" blocks, which define individual test cases.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n\n// sum.test.js\nconst sum = require('./sum');\n\ndescribe('sum function', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n\n  test('adds -1 + 1 to equal 0', () => {\n    expect(sum(-1, 1)).toBe(0);\n  });\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Using assertions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Assertions are used to check if the output of your code matches the expected result. Jest provides various assertion methods like \",(0,n.jsx)(e.code,{children:\"toBe\"}),\", \",(0,n.jsx)(e.code,{children:\"toEqual\"}),\", \",(0,n.jsx)(e.code,{children:\"toBeNull\"}),\", etc.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`test('object assignment', () => {\n  const data = { one: 1 };\n  data['two'] = 2;\n  expect(data).toEqual({ one: 1, two: 2 });\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Mocking dependencies\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Sometimes, you need to mock dependencies to isolate the unit of code you are testing. Jest provides functions like \",(0,n.jsx)(e.code,{children:\"jest.fn()\"}),\" and \",(0,n.jsx)(e.code,{children:\"jest.mock()\"}),\" for this purpose.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// fetchData.js\nconst fetch = require('node-fetch');\n\nasync function fetchData(url) {\n  const response = await fetch(url);\n  return response.json();\n}\nmodule.exports = fetchData;\n\n// fetchData.test.js\nconst fetchData = require('./fetchData');\nconst fetch = require('node-fetch');\n\njest.mock('node-fetch');\n\ntest('fetches data from API', async () => {\n  const mockResponse = { data: '12345' };\n  fetch.mockResolvedValueOnce({\n    json: async () => mockResponse,\n  });\n\n  const data = await fetchData('https://api.example.com/data');\n  expect(data).toEqual(mockResponse);\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Running the tests\"}),`\n`,(0,n.jsx)(e.p,{children:\"To run your tests, use the following command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm test\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://jestjs.io/docs/getting-started\",children:\"Jest documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://mochajs.org/\",children:\"Mocha documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.chaijs.com/\",children:\"Chai documentation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://sinonjs.org/\",children:\"Sinon documentation\"})}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var b=w;return y(v);})();\n;return Component;"
}