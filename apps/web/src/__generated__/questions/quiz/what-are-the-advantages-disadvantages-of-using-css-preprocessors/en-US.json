{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [
      "linkedin"
    ],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-the-advantages-disadvantages-of-using-css-preprocessors",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "what-are-the-advantages-disadvantages-of-using-css-preprocessors",
    "subtitle": null,
    "title": "What are the advantages/disadvantages of using CSS preprocessors?",
    "topics": [
      "css"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/front-end-interview-handbook/blob/main/packages/quiz/questions/what-are-the-advantages-disadvantages-of-using-css-preprocessors/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},l=(n,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!S.call(n,s)&&s!==i&&a(n,s,{get:()=>e[s],enumerable:!(r=p(e,s))||r.enumerable});return n};var w=(n,e,i)=>(i=n!=null?u(f(n)):{},l(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),y=n=>l(a({},\"__esModule\",{value:!0}),n);var c=g((j,o)=>{o.exports=_jsx_runtime});var x={};b(x,{default:()=>h,frontmatter:()=>C});var t=w(c()),C={title:\"What are the advantages/disadvantages of using CSS preprocessors?\"};function d(n){let e={a:\"a\",h2:\"h2\",li:\"li\",ul:\"ul\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Advantages\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"CSS is made more maintainable.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Easier to write nested selectors.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Variables for consistent theming. Can share theme files across different projects. This is not necessarily useful with CSS custom properties (frequently called CSS variables).\"}),`\n`,(0,t.jsx)(e.li,{children:\"Mixins to generate repeated CSS.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Sass and Less have features like loops, lists, and maps can make configuration easier and less verbose.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Splitting your code into multiple files during development. CSS files can be split up too but doing so will require an HTTP request to download each CSS file.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Disadvantages\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Requires tools for preprocessing. Re-compilation time can be slow.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Not writing currently and potentially usable CSS. For example, by using something like \",(0,t.jsx)(e.a,{href:\"https://github.com/webpack-contrib/postcss-loader\",children:\"postcss-loader\"}),\" with \",(0,t.jsx)(e.a,{href:\"https://webpack.js.org/\",children:\"webpack\"}),\", you can write potentially future-compatible CSS, allowing you to use things like CSS variables instead of Sass variables. Thus, you're learning new syntax that could pay off if/when they become standardized.\"]}),`\n`]})]})}function h(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}return y(x);})();\n;return Component;"
}