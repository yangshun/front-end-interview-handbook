{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-handle-errors-using-trycatch-blocks",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-you-handle-errors-using-trycatch-blocks",
    "subtitle": null,
    "title": "How do you handle errors using `try...catch` blocks?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-handle-errors-using-trycatch-blocks/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var t=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var m=(n,r)=>()=>(r||n((r={exports:{}}).exports,r),r.exports),b=(n,r)=>{for(var o in r)t(n,o,{get:r[o],enumerable:!0})},a=(n,r,o,l)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let c of y(r))!p.call(n,c)&&c!==o&&t(n,c,{get:()=>r[c],enumerable:!(l=f(r,c))||l.enumerable});return n};var k=(n,r,o)=>(o=n!=null?u(g(n)):{},a(r||!n||!n.__esModule?t(o,\"default\",{value:n,enumerable:!0}):o,n)),w=n=>a(t({},\"__esModule\",{value:!0}),n);var h=m((x,i)=>{i.exports=_jsx_runtime});var j={};b(j,{default:()=>d,frontmatter:()=>E});var e=k(h()),E={title:\"How do you handle errors using `try...catch` blocks?\"};function s(n){let r={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"To handle errors using \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" blocks, you wrap the code that might throw an error inside a \",(0,e.jsx)(r.code,{children:\"try\"}),\" block. If an error occurs, the control is transferred to the \",(0,e.jsx)(r.code,{children:\"catch\"}),\" block where you can handle the error. Optionally, you can use a \",(0,e.jsx)(r.code,{children:\"finally\"}),\" block to execute code regardless of whether an error occurred or not.\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:\"language-js\",children:`try {\n  // Code that may throw an error\n} catch (error) {\n  // Handle the error\n} finally {\n  // Code that will run regardless of an error\n}\n`})}),`\n`,(0,e.jsx)(r.hr,{}),`\n`,(0,e.jsxs)(r.h2,{children:[\"How do you handle errors using \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" blocks?\"]}),`\n`,(0,e.jsx)(r.h3,{children:\"Basic structure\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"The \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" statement consists of a \",(0,e.jsx)(r.code,{children:\"try\"}),\" block, a \",(0,e.jsx)(r.code,{children:\"catch\"}),\" block, and optionally a \",(0,e.jsx)(r.code,{children:\"finally\"}),\" block.\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:\"language-js\",children:`try {\n  // Code that may throw an error\n} catch (error) {\n  // Handle the error\n} finally {\n  // Code that will run regardless of an error\n}\n`})}),`\n`,(0,e.jsx)(r.h3,{children:\"Example\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"Here is an example of using \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" to handle errors:\"]}),`\n`,(0,e.jsx)(r.pre,{live:!0,children:(0,e.jsx)(r.code,{className:\"language-js\",children:`function riskyOperation() {\n  const invalidJsonString = '{\"name\": \"John}'; // Try changing this to a valid JSON string\n  return JSON.parse(invalidJsonString);\n}\n\ntry {\n  let result = riskyOperation();\n  console.log(result);\n} catch (error) {\n  console.error('An error occurred:', error.message);\n} finally {\n  console.log('This will run regardless of an error');\n}\n`})}),`\n`,(0,e.jsx)(r.h3,{children:\"Explanation\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsxs)(r.strong,{children:[(0,e.jsx)(r.code,{children:\"try\"}),\" block\"]}),\": Contains code that might throw an error. If an error occurs, the control is transferred to the \",(0,e.jsx)(r.code,{children:\"catch\"}),\" block.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsxs)(r.strong,{children:[(0,e.jsx)(r.code,{children:\"catch\"}),\" block\"]}),\": Contains code to handle the error. The \",(0,e.jsx)(r.code,{children:\"error\"}),\" object contains information about the error.\"]}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsxs)(r.strong,{children:[(0,e.jsx)(r.code,{children:\"finally\"}),\" block\"]}),\": Contains code that will run regardless of whether an error occurred or not. This is useful for cleanup tasks.\"]}),`\n`]}),`\n`,(0,e.jsxs)(r.h3,{children:[\"Nested \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" blocks\"]}),`\n`,(0,e.jsxs)(r.p,{children:[\"You can nest \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" blocks to handle different levels of errors:\"]}),`\n`,(0,e.jsx)(r.pre,{live:!0,children:(0,e.jsx)(r.code,{className:\"language-js\",children:`function anotherRiskyOperation() {\n  const person = undefined;\n  console.log(person.name);\n}\n\ntry {\n  try {\n    anotherRiskyOperation();\n  } catch (innerError) {\n    // Error (if any) for anotherRiskyOperation caught here\n    console.error('Inner error:', innerError.message);\n  }\n} catch (outerError) {\n  // Inner error does not reach here\n  console.error('Outer error:', outerError.message);\n}\n`})}),`\n`,(0,e.jsx)(r.h3,{children:\"Re-throwing errors\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"You can re-throw an error from the \",(0,e.jsx)(r.code,{children:\"catch\"}),\" block if you want it to be handled by an outer \",(0,e.jsx)(r.code,{children:\"try...catch\"}),\" block:\"]}),`\n`,(0,e.jsx)(r.pre,{live:!0,children:(0,e.jsx)(r.code,{className:\"language-js\",children:`function yetAnotherRiskyOperation() {\n  const numerator = 10;\n  const denominator = 0;\n  if (denominator === 0) {\n    throw new Error('Cannot divide by zero');\n  }\n\n  return numerator / denominator;\n}\n\ntry {\n  try {\n    const result = yetAnotherRiskyOperation();\n    console.log('Divisinon result:', result);\n  } catch (innerError) {\n    console.error('Inner error:', innerError.message);\n    throw innerError; // Re-throw the error\n  }\n} catch (outerError) {\n  console.error('Outer error:', outerError.message);\n}\n`})}),`\n`,(0,e.jsxs)(r.h3,{children:[\"Using \",(0,e.jsx)(r.code,{children:\"finally\"}),\" for cleanup\"]}),`\n`,(0,e.jsxs)(r.p,{children:[\"The \",(0,e.jsx)(r.code,{children:\"finally\"}),\" block is useful for cleanup tasks, such as closing a file or releasing resources:\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:\"language-js\",children:`// openFile() and closeFile() are custom implementations\ntry {\n  let file = openFile('example.txt');\n  // Perform operations on the file\n} catch (error) {\n  console.error('An error occurred:', error.message);\n} finally {\n  closeFile(file); // Ensure the file is closed\n}\n`})}),`\n`,(0,e.jsx)(r.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(r.ul,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\",children:\"MDN Web Docs: try...catch\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://javascript.info/try-catch\",children:'JavaScript.info: Error handling, \"try...catch\"'})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\",children:\"MDN Web Docs: Error object\"})}),`\n`]})]})}function d(n={}){let{wrapper:r}=n.components||{};return r?(0,e.jsx)(r,{...n,children:(0,e.jsx)(s,{...n})}):s(n)}return w(j);})();\n;return Component;"
}