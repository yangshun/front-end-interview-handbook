{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-difference-between-synchronous-and-asynchronous-functions",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 250,
    "similarQuestions": [],
    "slug": "explain-the-difference-between-synchronous-and-asynchronous-functions",
    "subtitle": null,
    "title": "Explain the difference between synchronous and asynchronous functions in JavaScript",
    "topics": [
      "async",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-between-synchronous-and-asynchronous-functions/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var t in e)a(o,t,{get:e[t],enumerable:!0})},i=(o,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!g.call(o,r)&&r!==t&&a(o,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return o};var w=(o,e,t)=>(t=o!=null?d(m(o)):{},i(e||!o||!o.__esModule?a(t,\"default\",{value:o,enumerable:!0}):t,o)),b=o=>i(a({},\"__esModule\",{value:!0}),o);var l=f((I,c)=>{c.exports=_jsx_runtime});var S={};y(S,{default:()=>x,frontmatter:()=>k});var n=w(l()),k={title:\"Explain the difference between synchronous and asynchronous functions in JavaScript\"};function h(o){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",hr:\"hr\",ul:\"ul\",li:\"li\",h3:\"h3\",ol:\"ol\",strong:\"strong\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Synchronous functions are blocking while asynchronous functions are not. In synchronous functions, statements complete before the next statement is run. As a result, programs containing only synchronous code are evaluated exactly in order of the statements. The execution of the program is paused if one of the statements take a very long time.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function sum(a, b) {\n  console.log('Inside sum function');\n  return a + b;\n}\n\nconst result = sum(2, 3); // The program waits for sum() to complete before assigning the result\nconsole.log('Result: ', result); // Output: 5\n\n// Console output:\n// Inside sum function\n// Result: 5\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Asynchronous functions usually accept a callback as a parameter and execution continue on to the next line immediately after the asynchronous function is invoked. The callback is only invoked when the asynchronous operation is complete and the call stack is empty. Heavy duty operations such as loading data from a web server or querying a database should be done asynchronously so that the main thread can continue executing other operations instead of blocking until that long operation to complete (in the case of browsers, the UI will freeze).\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function fetchData(callback) {\n  setTimeout(() => {\n    const data = { name: 'John', age: 30 };\n    callback(data); // Calling the callback function with data\n  }, 2000); // Simulating a 2-second delay\n}\n\nconsole.log('Fetching data...');\nfetchData((data) => {\n  console.log(data); // Output: { name: 'John', age: 30 } (after 2 seconds)\n});\n\nconsole.log('Call made to fetch data'); // Output: This will be printed first\n\n// Console output:\n// Fetching data...\n// Call made to fetch data\n// { name: 'John', age: 30 }\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Synchronous vs asynchronous functions\"}),`\n`,(0,n.jsx)(e.p,{children:\"In JavaScript, the concepts of synchronous and asynchronous functions are fundamental to understanding how code execution is managed, particularly in the context of handling operations like I/O tasks, API calls, and other time-consuming processes.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Synchronous functions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Synchronous functions execute in a sequential order, one after the other. Each operation must wait for the previous one to complete before moving on to the next.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Synchronous code is blocking, meaning the program execution halts until the current operation finishes.\"}),`\n`,(0,n.jsx)(e.li,{children:\"It follows a strict sequence, executing instructions line by line.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Synchronous functions are easier to understand and debug since the flow is predictable.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Synchronous function examples\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Reading files synchronously\"}),\": When reading a file from the file system using the synchronous readFileSync method from the fs module in Node.js, the program execution is blocked until the entire file is read. This can cause performance issues, especially for large files or when reading multiple files sequentially\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const fs = require('fs');\nconst data = fs.readFileSync('large-file.txt', 'utf8');\nconsole.log(data); // Execution is blocked until the file is read.\nconsole.log('End of the program');\n`})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Looping over large datasets\"}),\": Iterating over a large array or dataset synchronously can freeze the user interface or browser tab until the operation completes, leading to an unresponsive application.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const largeArray = new Array(1_000_000).fill(0);\n// Blocks the main thread until the million operations are completed.\nconst result = largeArray.map((num) => num * 2);\nconsole.log(result);\n`})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Asynchronous functions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Asynchronous functions do not block the execution of the program. They allow other operations to continue while waiting for a response or completion of a time-consuming task.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Asynchronous code is non-blocking, allowing the program to keep running without waiting for a specific operation to finish.\"}),`\n`,(0,n.jsx)(e.li,{children:\"It enables concurrent execution, improving performance and responsiveness.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Asynchronous functions are commonly used for tasks like network requests, file I/O, and timers.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Asynchronous function examples\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Network requests\"}),\": Making network requests, such as fetching data from an API or sending data to a server, is typically done asynchronously. This allows the application to remain responsive while waiting for the response, preventing the user interface from freezing\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`console.log('Start of the program'); // This will be printed first as program starts here\n\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => {\n    console.log(data);\n    /** Process the data without blocking the main thread\n     *  and printed at the end if fetch call succeeds\n     */\n  })\n  .catch((error) => console.error(error));\n\nconsole.log('End of program'); // This will be printed next before the fetch callback\n`})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"User input and events\"}),\": Handling user input events, such as clicks, key presses, or mouse movements, is inherently asynchronous. The application needs to respond to these events without blocking the main thread, ensuring a smooth user experience.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  // Handle the click event asynchronously\n  console.log('Button clicked');\n});\n`})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Timers and Animations\"}),\": Timers (\",(0,n.jsx)(e.code,{children:\"setTimeout()\"}),\", \",(0,n.jsx)(e.code,{children:\"setInterval()\"}),\") and animations (e.g., \",(0,n.jsx)(e.code,{children:\"requestAnimationFrame()\"}),\") are asynchronous operations that allow the application to schedule tasks or update animations without blocking the main thread.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`setTimeout(() => {\n  console.log('This message is delayed by 2 seconds');\n}, 2000);\n\nconst animationId = requestAnimationFrame(updateAnimation);\n`})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"By using asynchronous functions and operations, JavaScript can handle time-consuming tasks without freezing the user interface or blocking the main thread.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"It is important to note that \",(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.code,{children:\"async\"}),\" functions do not run on a different thread\"]}),\". They still run on the main thread. However, it is possible to achieve parallelism in JavaScript by using \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\",children:\"Web workers\"})]}),`\n`,(0,n.jsx)(e.h2,{children:\"Achieving parallelism in JavaScript via web workers\"}),`\n`,(0,n.jsx)(e.p,{children:\"Web workers allow you to spawn separate background threads that can perform CPU-intensive tasks in parallel with the main thread. These worker threads can communicate with the main thread via message passing, but they do not have direct access to the DOM or other browser APIs.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// main.js\nconst worker = new Worker('worker.js');\n\nworker.onmessage = function (event) {\n  console.log('Result from worker:', event.data);\n};\n\nworker.postMessage('Start computation');\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// worker.js\nself.onmessage = function (event) {\n  const result = performHeavyComputation();\n  self.postMessage(result);\n};\n\nfunction performHeavyComputation() {\n  // CPU-intensive computation\n  return 'Computation result';\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the main thread creates a new web worker and sends it a message to start a computation. The worker performs the heavy computation in parallel with the main thread and sends the result back via \",(0,n.jsx)(e.code,{children:\"postMessage()\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Event loop\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The async nature of JavaScript is powered by a JavaScript engine's \",(0,n.jsx)(e.a,{href:\"/questions/quiz/what-is-event-loop-what-is-the-difference-between-call-stack-and-task-queue\",children:\"event loop\"}),\" allowing concurrent operations even though JavaScript is single-threaded. It's an important concept to understand so we highly recommend going through that topic as well.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\",children:\"Asynchronous JavaScript\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/pulse/basics-synchronous-asynchronous-javascript-abdulkabir-okeowo\",children:\"The Basics: synchronous and asynchronous JavaScript\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://code.pieces.app/blog/synchronous-and-asynchronous-programming-in-javascript\",children:\"Synchronous and asynchronous programming in JavaScript\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\",children:\"Web Workers API - MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://web.dev/learn/performance/web-worker-overview\",children:\"An overview of web workers - Web.dev\"})}),`\n`]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var x=v;return b(S);})();\n;return Component;"
}