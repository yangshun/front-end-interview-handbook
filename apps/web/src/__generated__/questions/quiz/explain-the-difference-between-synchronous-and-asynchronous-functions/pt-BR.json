{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-difference-between-synchronous-and-asynchronous-functions",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 250,
    "similarQuestions": [],
    "slug": "explain-the-difference-between-synchronous-and-asynchronous-functions",
    "subtitle": null,
    "title": "Explique a diferença entre funções síncronas e assíncronas",
    "topics": [
      "async",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-between-synchronous-and-asynchronous-functions/pt-BR.mdx"
  },
  "solution": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),h=(a,e)=>{for(var o in e)r(a,o,{get:e[o],enumerable:!0})},c=(a,e,o,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of l(e))!f.call(a,s)&&s!==o&&r(a,s,{get:()=>e[s],enumerable:!(t=p(e,s))||t.enumerable});return a};var j=(a,e,o)=>(o=a!=null?m(x(a)):{},c(e||!a||!a.__esModule?r(o,\"default\",{value:a,enumerable:!0}):o,a)),q=a=>c(r({},\"__esModule\",{value:!0}),a);var d=g((O,u)=>{u.exports=_jsx_runtime});var F={};h(F,{default:()=>_,frontmatter:()=>v});var n=j(d()),v={title:\"Explique a diferen\\xE7a entre fun\\xE7\\xF5es s\\xEDncronas e ass\\xEDncronas\"};function i(a){let e=Object.assign({p:\"p\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Fun\\xE7\\xF5es s\\xEDncronas s\\xE3o bloqueadoras enquanto fun\\xE7\\xF5es ass\\xEDncronas n\\xE3o s\\xE3o. Em fun\\xE7\\xF5es s\\xEDncronas, as instru\\xE7\\xF5es s\\xE3o conclu\\xEDdas antes que a pr\\xF3xima instru\\xE7\\xE3o seja executada. Nesse caso, o programa \\xE9 avaliado exatamente na ordem das instru\\xE7\\xF5es, e a execu\\xE7\\xE3o do programa \\xE9 pausada se uma das instru\\xE7\\xF5es demorar muito tempo.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Fun\\xE7\\xF5es ass\\xEDncronas geralmente aceitam uma fun\\xE7\\xE3o de retorno de chamada como par\\xE2metro e a execu\\xE7\\xE3o continua na pr\\xF3xima linha imediatamente ap\\xF3s a invoca\\xE7\\xE3o da fun\\xE7\\xE3o ass\\xEDncrona. A callback s\\xF3 \\xE9 invocada quando a opera\\xE7\\xE3o ass\\xEDncrona \\xE9 conclu\\xEDda e a pilha de chamadas est\\xE1 vazia. Opera\\xE7\\xF5es pesadas, como carregar dados de um servidor web ou consultar um banco de dados, devem ser feitas de forma ass\\xEDncrona para que a thread principal possa continuar executando outras opera\\xE7\\xF5es em vez de bloquear at\\xE9 que aquela opera\\xE7\\xE3o longa seja conclu\\xEDda (no caso dos navegadores, a interface do usu\\xE1rio ficar\\xE1 congelada).\"})]})}function b(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(i,a)})):i(a)}var _=b;return q(F);})();\n;return Component;"
}