{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-recursion-and-how-is-it-used-in-javascript",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-recursion-and-how-is-it-used-in-javascript",
    "subtitle": null,
    "title": "What is recursion and how is it used in JavaScript?",
    "topics": [
      "javascript",
      "recursion"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-recursion-and-how-is-it-used-in-javascript/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),v=(i,e)=>{for(var r in e)a(i,r,{get:e[r],enumerable:!0})},s=(i,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of p(e))!b.call(i,c)&&c!==r&&a(i,c,{get:()=>e[c],enumerable:!(o=f(e,c))||o.enumerable});return i};var w=(i,e,r)=>(r=i!=null?d(m(i)):{},s(e||!i||!i.__esModule?a(r,\"default\",{value:i,enumerable:!0}):r,i)),x=i=>s(a({},\"__esModule\",{value:!0}),i);var t=g((q,l)=>{l.exports=_jsx_runtime});var T={};v(T,{default:()=>u,frontmatter:()=>y});var n=w(t()),y={title:\"What is recursion and how is it used in JavaScript?\"};function h(i){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Recursion is a programming technique where a function calls itself to solve a problem. In JavaScript, recursion is used to solve problems that can be broken down into smaller, similar sub-problems. A base case is essential to stop the recursive calls and prevent infinite loops. For example, calculating the factorial of a number can be done using recursion:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(4)); // Output: 24\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"What is recursion and how is it used in JavaScript?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Definition of recursion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Recursion is a technique in programming where a function calls itself in order to solve a problem. This approach is particularly useful for problems that can be divided into smaller, similar sub-problems. The key components of a recursive function are:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Base case\"}),\": The condition under which the function stops calling itself, preventing an infinite loop.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Recursive case\"}),\": The part of the function where it calls itself with a modified argument, moving towards the base case.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example: Calculating factorial\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The factorial of a number \",(0,n.jsx)(e.code,{children:\"n\"}),\" (denoted as \",(0,n.jsx)(e.code,{children:\"n!\"}),\") is the product of all positive integers less than or equal to \",(0,n.jsx)(e.code,{children:\"n\"}),\". It can be defined recursively as:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"0! = 1\"}),\" (base case)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"n! = n * (n - 1)!\"}),\" for \",(0,n.jsx)(e.code,{children:\"n > 0\"}),\" (recursive case)\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here is how you can implement this in JavaScript:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function factorial(n) {\n  if (n === 0) {\n    // base case\n    return 1;\n  }\n  return n * factorial(n - 1); // recursive case\n}\n\nconsole.log(factorial(4)); // Output: 24\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Example: Fibonacci sequence\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Fibonacci sequence is another classic example of recursion. Each number in the sequence is the sum of the two preceding ones, usually starting with 0 and 1. The sequence can be defined recursively as:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fib(0) = 0\"}),\" (base case)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fib(1) = 1\"}),\" (base case)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fib(n) = fib(n - 1) + fib(n - 2)\"}),\" for \",(0,n.jsx)(e.code,{children:\"n > 1\"}),\" (recursive case)\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here is how you can implement this in JavaScript:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function fibonacci(n) {\n  if (n === 0) {\n    // base case\n    return 0;\n  }\n  if (n === 1) {\n    // base case\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2); // recursive case\n}\n\nconsole.log(fibonacci(6)); // Output: 8\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Tail recursion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Tail recursion is a special form of recursion where the recursive call is the last operation in the function. This can be optimized by some JavaScript engines to improve performance and prevent stack overflow. Here is an example of a tail-recursive factorial function:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function factorial(n, acc = 1) {\n  if (n === 0) {\n    return acc;\n  }\n  return factorial(n - 1, n * acc);\n}\n\nconsole.log(factorial(4)); // Output: 24\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Use cases for recursion\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Tree traversal\"}),\": Recursion is often used to traverse tree structures, such as the DOM or binary trees.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Divide and conquer algorithms\"}),\": Algorithms like quicksort and mergesort use recursion to divide the problem into smaller sub-problems.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic programming\"}),\": Problems like the knapsack problem and certain graph algorithms can be solved using recursion.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Recursion\",children:\"MDN Web Docs: Recursion\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/recursion\",children:\"JavaScript.info: Recursion and stack\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://eloquentjavascript.net/03_functions.html#h_recursion\",children:\"Eloquent JavaScript: Recursion\"})}),`\n`]})]})}function u(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(h,{...i})}):h(i)}return x(T);})();\n;return Component;"
}