{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-workers-in-javascript-used-for",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 490,
    "similarQuestions": [],
    "slug": "what-are-workers-in-javascript-used-for",
    "subtitle": null,
    "title": "What are workers in JavaScript used for?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-workers-in-javascript-used-for/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var t=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var i in e)t(n,i,{get:e[i],enumerable:!0})},c=(n,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!f.call(n,s)&&s!==i&&t(n,s,{get:()=>e[s],enumerable:!(o=g(e,s))||o.enumerable});return n};var v=(n,e,i)=>(i=n!=null?p(m(n)):{},c(e||!n||!n.__esModule?t(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=>c(t({},\"__esModule\",{value:!0}),n);var l=w((x,a)=>{a.exports=_jsx_runtime});var y={};k(y,{default:()=>d,frontmatter:()=>W});var r=v(l()),W={title:\"What are workers in JavaScript used for?\"};function h(n){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,r.jsx)(e.p,{children:\"Workers in JavaScript are background threads that allow you to run scripts in parallel with the main execution thread, without blocking or interfering with the user interface. Their key features include:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Parallel processing\"}),\": Workers run in a separate thread from the main thread, allowing your web page to remain responsive to user interactions while the worker performs its tasks. It's useful for moving CPU-intensive work off the main thread and be free from JavaScript's single-threaded nature.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Communication\"}),\": Uses \",(0,r.jsx)(e.code,{children:\"postMessage()\"}),\" and \",(0,r.jsx)(e.code,{children:\"onmessage\"}),\"/ \",(0,r.jsx)(e.code,{children:\"'message'\"}),\" event for messaging.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Access to web APIs\"}),\": Workers have access to various Web APIs, including \",(0,r.jsx)(e.code,{children:\"fetch()\"}),\", IndexedDB, and Web Storage, allowing them to perform tasks like data fetching and persisting data independently.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"No DOM access\"}),\": Workers cannot directly manipulate the DOM, thus cannot interact with the UI, ensuring they don't accidentally interfere with the main thread's operation.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:\"There are three main types of workers in JavaScript:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Web workers / Dedicated workers\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Run scripts in background threads, separate from the main UI thread.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Useful for CPU-intensive tasks like data processing, calculations, etc.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Cannot directly access or manipulate the DOM.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Service workers\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Act as network proxies, handling requests between the app and network.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Enable offline functionality, caching, and push notifications.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Runs independently of the web page, even when it's closed.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Shared workers\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Can be shared by multiple scripts running in different windows or frames, as long as they're in the same domain.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Scripts communicate with the shared worker by sending and receiving messages.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Useful for coordinating tasks across different parts of a web page.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsx)(e.h2,{children:\"Workers in JavaScript\"}),`\n`,(0,r.jsx)(e.p,{children:\"Workers in JavaScript are a way to run scripts in background threads, separate from the main execution thread of a web page. This allows for long-running or computationally intensive tasks to be offloaded from the main thread, preventing the user interface from becoming unresponsive or janky.\"}),`\n`,(0,r.jsx)(e.h2,{children:\"Web workers / Dedicated workers\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Run scripts in background threads separate from the main UI thread.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Designed for CPU-intensive tasks like data processing, mathematical computations, etc. Generally the non-async work.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Cannot directly access the DOM or other main thread resources for security.\"}),`\n`,(0,r.jsxs)(e.li,{children:[\"Communicates with main thread via asynchronous message passing \\u2013 \",(0,r.jsx)(e.code,{children:\"postMessage()\"}),\" and \",(0,r.jsx)(e.code,{children:\"onmessage\"}),\"/ \",(0,r.jsx)(e.code,{children:\"'message'\"}),\".\"]}),`\n`,(0,r.jsx)(e.li,{children:\"Terminated when main script is unloaded or explicitly terminated.\"}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:\"Web workers can be used for:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Image/video processing\"}),`\n`,(0,r.jsx)(e.li,{children:\"Data compression\"}),`\n`,(0,r.jsx)(e.li,{children:\"Complex math\"}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{children:\"Creating a web worker\"}),`\n`,(0,r.jsx)(e.p,{children:\"To create a web worker, you need a separate JavaScript file that contains the code for the worker. Here's an example:\"}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:\"main.js\"}),\" (main script)\"]})}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`// Check if the browser supports workers\nif (window.Worker) {\n  // Create a new Worker\n  const myWorker = new Worker('worker.js');\n\n  // Post a message to the worker\n  myWorker.postMessage('Hello, Worker!');\n\n  // Listen for messages from the worker\n  myWorker.onmessage = function (event) {\n    console.log('Message from Worker:', event.data);\n  };\n\n  // Error handling\n  myWorker.onerror = function (error) {\n    console.error('Error from Worker:', error);\n  };\n}\n`})}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:\"worker.js\"}),\" (worker script)\"]})}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`// Listen for messages from the main script\nonmessage = function (event) {\n  console.log('Message from Main Script:', event.data);\n\n  // Perform a task (e.g., some computation)\n  const result = event.data + ' - Processed by Worker';\n\n  // Post the result back to the main script\n  postMessage(result);\n};\n`})}),`\n`,(0,r.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"main.js\"}),\" creates a worker using the \",(0,r.jsx)(e.code,{children:\"Worker\"}),\" constructor and specifies \",(0,r.jsx)(e.code,{children:\"worker.js\"}),\" as the script to run in the worker thread.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"It posts a message to the worker using \",(0,r.jsx)(e.code,{children:\"postMessage()\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"The worker script (\",(0,r.jsx)(e.code,{children:\"worker.js\"}),\") listens for messages from the main script using \",(0,r.jsx)(e.code,{children:\"onmessage\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"After processing the message, the worker posts a message back to the main script using \",(0,r.jsx)(e.code,{children:\"postMessage()\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"The main script listens for messages from the worker using \",(0,r.jsx)(e.code,{children:\"onmessage\"}),\" on the \",(0,r.jsx)(e.code,{children:\"Worker\"}),\" instance.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{children:\"Service workers\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Act as a network proxy between web app, browser, and network.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Can intercept and handle network requests, cache resources.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Enable offline functionality and push notifications.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Have a lifecycle managed by the browser (install, activate, update).\"}),`\n`,(0,r.jsx)(e.li,{children:\"No access to DOM and main thread resources for security.\"}),`\n`]}),`\n`,(0,r.jsx)(e.p,{children:\"Service workers can be used for:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Caching\"}),`\n`,(0,r.jsx)(e.li,{children:\"Offline support\"}),`\n`,(0,r.jsx)(e.li,{children:\"Request handling\"}),`\n`,(0,r.jsx)(e.li,{children:\"Background sync\"}),`\n`]}),`\n`,(0,r.jsx)(e.h4,{children:\"Creating a service worker\"}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:\"main.js\"}),\" (main script)\"]})}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`if ('serviceWorker' in navigator) {\n  navigator.serviceWorker\n    .register('/service-worker.js')\n    .then(function (registration) {\n      console.log('Service Worker registered:', registration);\n    })\n    .catch(function (err) {\n      console.log('Service Worker registration failed:', err);\n    });\n}\n`})}),`\n`,(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:\"service-worker.js\"}),\" (service worker script)\"]})}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`self.addEventListener('fetch', function (event) {\n  event.respondWith(\n    caches.match(event.request).then(function (response) {\n      // return cached response if available\n      if (response) {\n        return response;\n      }\n\n      // Otherwise, fetch from network\n      return fetch(event.request);\n    }),\n  );\n});\n`})}),`\n`,(0,r.jsx)(e.p,{children:\"In this example:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"The main script registers a service worker at \",(0,r.jsx)(e.code,{children:\"/service-worker.js\"})]}),`\n`,(0,r.jsxs)(e.li,{children:[\"The service worker listens for the \",(0,r.jsx)(e.code,{children:\"fetch()\"}),\" event, which is fired whenever the browser makes a network request\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"The service worker first checks if the requested resource is cached using \",(0,r.jsx)(e.code,{children:\"caches.match(event.request)\"})]}),`\n`,(0,r.jsxs)(e.li,{children:[\"If it is, it returns the cached response. Otherwise, it fetches the resource from the network using \",(0,r.jsx)(e.code,{children:\"fetch(event.request)\"})]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{children:\"Bonus: Shared workers\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Scope\"}),\": Can be accessed from multiple scripts in different windows/tabs/iframes\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Sharing of data\"}),\": Allow data sharing between browser contexts via a messaging interface\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Browser support\"}),\": Limited support, especially \",(0,r.jsx)(e.a,{href:\"https://issues.chromium.org/issues/40290702\",children:\"not available on Android browsers\"})]}),`\n`]}),`\n`,(0,r.jsx)(e.h4,{children:\"Use cases for shared workers:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"State sharing across multiple windows.\"}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{children:\"Bonus: Worklets\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"The \",(0,r.jsx)(e.code,{children:\"Worklet\"}),\" interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline. With Worklets, you can run JavaScript and WebAssembly code to do graphics rendering or audio processing where high performance is required.\"]}),`\n`,(0,r.jsxs)(e.p,{children:[\"You are not expected to know about worklets, so it won't be covered in great detail. Read more about \",(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Worklet\",children:\"worklets on MDN\"}),\".\"]}),`\n`,(0,r.jsx)(e.h2,{children:\"Considerations and limitations\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Same-Origin policy\"}),\": Workers must comply with the same-origin policy, meaning the script that creates the worker and the worker script itself must be from the same origin\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"No DOM access\"}),\": Workers do not have direct access to the DOM. They can communicate with the main thread through messages\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Performance\"}),\": Creating and managing workers incurs overhead. They should be used judiciously for tasks that truly benefit from parallel execution\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Error handling\"}),\": Proper error handling mechanisms should be in place to handle any issues within the worker scripts\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\",children:\"Worker - MDN\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\",children:\"Using Web Workers - MDN\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\",children:\"Service Worker API - MDN\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://javascript.plainenglish.io/understanding-web-workers-in-js-with-real-world-example-1629a283aeec?gi=89cf0dd4c3f4\",children:\"Understanding web workers in JavaScript with real world example\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://dev.to/bharat5604/web-worker-service-worker-and-worklets-a-comprehensive-guide-1f64\",children:\"Web worker, Service worker, and Worklets: A comprehensive guide\"})}),`\n`]})]})}function d(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}return b(y);})();\n;return Component;"
}