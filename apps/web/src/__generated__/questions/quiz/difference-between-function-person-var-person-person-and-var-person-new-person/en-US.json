{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/difference-between-function-person-var-person-person-and-var-person-new-person",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 140,
    "similarQuestions": [],
    "slug": "difference-between-function-person-var-person-person-and-var-person-new-person",
    "subtitle": null,
    "title": "Difference between: `function Person(){}`, `const person = Person()`, and `const person = new Person()` in JavaScript?",
    "topics": [
      "javascript",
      "oop"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/difference-between-function-person-var-person-person-and-var-person-new-person/en-US.mdx"
  },
  "solution": "var Component=(()=>{var l=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var w=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),b=(o,e)=>{for(var r in e)c(o,r,{get:e[r],enumerable:!0})},s=(o,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!m.call(o,t)&&t!==r&&c(o,t,{get:()=>e[t],enumerable:!(i=u(e,t))||i.enumerable});return o};var P=(o,e,r)=>(r=o!=null?l(f(o)):{},s(e||!o||!o.__esModule?c(r,\"default\",{value:o,enumerable:!0}):r,o)),g=o=>s(c({},\"__esModule\",{value:!0}),o);var a=w((C,d)=>{d.exports=_jsx_runtime});var J={};b(J,{default:()=>v,frontmatter:()=>y});var n=P(a()),y={title:\"Difference between: `function Person(){}`, `const person = Person()`, and `const person = new Person()` in JavaScript?\"};function h(o){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",hr:\"hr\",p:\"p\",pre:\"pre\",a:\"a\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"function Person(){}\"}),\": A function declaration in JavaScript. It can be used as a regular function or as a constructor.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"const person = Person()\"}),\": Calls \",(0,n.jsx)(e.code,{children:\"Person\"}),\" as a regular function, not a constructor. If \",(0,n.jsx)(e.code,{children:\"Person\"}),\" is intended to be a constructor, this will lead to unexpected behavior.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"const person = new Person()\"}),\": Creates a new instance of \",(0,n.jsx)(e.code,{children:\"Person\"}),\", correctly utilizing the constructor function to initialize the new object.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Aspect\"}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"function Person(){}\"})}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"const person = Person()\"})}),(0,n.jsx)(e.th,{children:(0,n.jsx)(e.code,{children:\"const person = new Person()\"})})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Type\"}),(0,n.jsx)(e.td,{children:\"Function declaration\"}),(0,n.jsx)(e.td,{children:\"Function call\"}),(0,n.jsx)(e.td,{children:\"Constructor call\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Usage\"}),(0,n.jsx)(e.td,{children:\"Defines a function\"}),(0,n.jsxs)(e.td,{children:[\"Invokes \",(0,n.jsx)(e.code,{children:\"Person\"}),\" as a regular function\"]}),(0,n.jsxs)(e.td,{children:[\"Creates a new instance of \",(0,n.jsx)(e.code,{children:\"Person\"})]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Instance Creation\"}),(0,n.jsx)(e.td,{children:\"No instance created\"}),(0,n.jsx)(e.td,{children:\"No instance created\"}),(0,n.jsx)(e.td,{children:\"New instance created\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Common Mistake\"}),(0,n.jsx)(e.td,{children:\"N/A\"}),(0,n.jsxs)(e.td,{children:[\"Misusing as constructor leading to \",(0,n.jsx)(e.code,{children:\"undefined\"})]}),(0,n.jsx)(e.td,{children:\"None (when used correctly)\"})]})]})]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Function declaration\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"function Person(){}\"}),\" is a standard function declaration in JavaScript. When written in PascalCase, it follows the convention for functions intended to be used as constructors.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This code defines a function named \",(0,n.jsx)(e.code,{children:\"Person\"}),\" that takes a parameter \",(0,n.jsx)(e.code,{children:\"name\"}),\" and assigns it to the \",(0,n.jsx)(e.code,{children:\"name\"}),\" property of the object created from this constructor function. When the \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword is used in a constructor, it refers to the newly created object.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Function call\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"const person = Person()\"}),\" simply invoke the function's code. When you invoke \",(0,n.jsx)(e.code,{children:\"Person\"}),\" as a regular function (i.e., without the \",(0,n.jsx)(e.code,{children:\"new\"}),\" keyword), the function does not behave as a constructor. Instead, it executes its code and returns \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" if no return value is specified and that gets assigned to the variable intended as the instance. Invoking as such is a common mistake if the function is intended to be used as a constructor.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n\nconst person = Person('John');\nconsole.log(person); // undefined\nconsole.log(person.name); // Uncaught TypeError: Cannot read property 'name' of undefined\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this case, \",(0,n.jsx)(e.code,{children:\"Person('John')\"}),\" does not create a new object. The \",(0,n.jsx)(e.code,{children:\"person\"}),\" variable is assigned \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" because the \",(0,n.jsx)(e.code,{children:\"Person\"}),\" function does not explicitly return a value. Attempting to access \",(0,n.jsx)(e.code,{children:\"person.name\"}),\" throws an error because \",(0,n.jsx)(e.code,{children:\"person\"}),\" is \",(0,n.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Constructor call\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"const person = new Person()\"}),\" creates an instance of the \",(0,n.jsx)(e.code,{children:\"Person\"}),\" object using the new operator, which inherits from \",(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\". An alternative would be to use \",(0,n.jsx)(e.code,{children:\"Object.create\"}),\", such as: \",(0,n.jsx)(e.code,{children:\"Object.create(Person.prototype)\"}),\" and \",(0,n.jsx)(e.code,{children:\"Person.call(person, 'John')\"}),\" initializes the object.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function Person(name) {\n  this.name = name;\n}\n\nconst person = new Person('John');\nconsole.log(person); // Person { name: 'John' }\nconsole.log(person.name); // 'John'\n\n// Alternative\nconst person1 = Object.create(Person.prototype);\nPerson.call(person1, 'John');\nconsole.log(person1); // Person { name: 'John' }\nconsole.log(person1.name); // 'John'\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this case, \",(0,n.jsx)(e.code,{children:\"new Person('John')\"}),\" creates a new object, and \",(0,n.jsx)(e.code,{children:\"this\"}),\" within \",(0,n.jsx)(e.code,{children:\"Person\"}),\" refers to this new object. The \",(0,n.jsx)(e.code,{children:\"name\"}),\" property is correctly set on the new object. The \",(0,n.jsx)(e.code,{children:\"person\"}),\" variable is assigned the new instance of \",(0,n.jsx)(e.code,{children:\"Person\"}),\" with the name property set to \",(0,n.jsx)(e.code,{children:\"'John'\"}),\". And for the alternative object creation, \",(0,n.jsx)(e.code,{children:\"Object.create(Person.prototype)\"}),\" creates a new object with \",(0,n.jsx)(e.code,{children:\"Person.prototype\"}),\" as its prototype. \",(0,n.jsx)(e.code,{children:\"Person.call(person, 'John')\"}),\" initializes the object, setting the \",(0,n.jsx)(e.code,{children:\"name\"}),\" property.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Follow-Up Questions\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"What are the differences between function constructors and ES6 class syntax?\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"What are some common use cases for \",(0,n.jsx)(e.code,{children:\"Object.create\"}),\"?\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\",children:\"MDN Web Docs: Object prototypes\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.greatfrontend.com/questions/quiz/what-are-the-differences-between-es6-class-and-es5-function-constructors?fpr=yangshun\",children:\"Differences between Class and Function Constructors\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://www.greatfrontend.com/questions/quiz/explain-how-this-works-in-javascript?fpr=yangshun\",children:[\"How \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword works in JavaScript?\"]})}),`\n`]})]})}function j(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var v=j;return g(J);})();\n;return Component;"
}