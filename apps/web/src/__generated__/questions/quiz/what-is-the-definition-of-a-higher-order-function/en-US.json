{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-definition-of-a-higher-order-function",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 190,
    "similarQuestions": [],
    "slug": "what-is-the-definition-of-a-higher-order-function",
    "subtitle": null,
    "title": "What is the definition of a higher-order function in JavaScript?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-definition-of-a-higher-order-function/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var p=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),y=(r,n)=>{for(var t in n)i(r,t,{get:n[t],enumerable:!0})},c=(r,n,t,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of m(n))!g.call(r,a)&&a!==t&&i(r,a,{get:()=>n[a],enumerable:!(o=d(n,a))||o.enumerable});return r};var b=(r,n,t)=>(t=r!=null?u(f(r)):{},c(n||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>c(i({},\"__esModule\",{value:!0}),r);var h=p((F,s)=>{s.exports=_jsx_runtime});var j={};y(j,{default:()=>x,frontmatter:()=>A});var e=b(h()),A={title:\"What is the definition of a higher-order function in JavaScript?\"};function l(r){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ol:\"ol\",li:\"li\",strong:\"strong\",ul:\"ul\",a:\"a\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsx)(n.p,{children:\"A higher-order function is any function that takes one or more functions as arguments, which it uses to operate on some data, and/or returns a function as a result.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Higher-order functions are meant to abstract some operation that is performed repeatedly. The classic example of this is \",(0,e.jsx)(n.code,{children:\"Array.prototype.map()\"}),\", which takes an array and a function as arguments. \",(0,e.jsx)(n.code,{children:\"Array.prototype.map()\"}),\" then uses this function to transform each item in the array, returning a new array with the transformed data. Other popular examples in JavaScript are \",(0,e.jsx)(n.code,{children:\"Array.prototype.forEach()\"}),\", \",(0,e.jsx)(n.code,{children:\"Array.prototype.filter()\"}),\", and \",(0,e.jsx)(n.code,{children:\"Array.prototype.reduce()\"}),\". A higher-order function doesn't just need to be manipulating arrays as there are many use cases for returning a function from another function. \",(0,e.jsx)(n.code,{children:\"Function.prototype.bind()\"}),\" is an example that returns another function.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Imagine a scenario where we have an array of names that we need to transform to uppercase.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const names = ['irish', 'daisy', 'anna'];\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"The imperative way will be as such:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function transformNamesToUppercase(names) {\n  const results = [];\n  for (let i = 0; i < names.length; i++) {\n    results.push(names[i].toUpperCase());\n  }\n  return results;\n}\n\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Using \",(0,e.jsx)(n.code,{children:\"Array.prototype.map(transformerFn)\"}),\" makes the code shorter and more declarative.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function transformNamesToUppercase(names) {\n  return names.map((name) => name.toUpperCase());\n}\n\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Higher order functions\"}),`\n`,(0,e.jsx)(n.p,{children:\"A higher-order function is a function that takes another function as an argument or returns a function as its result.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Functions as arguments\"}),`\n`,(0,e.jsx)(n.p,{children:\"A higher-order function can takes another function as an argument and execute it.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function greet(name) {\n  return \\`Hello, \\${name}!\\`;\n}\n\nfunction greetName(greeter, name) {\n  console.log(greeter(name));\n}\n\ngreetName(greet, 'Alice'); // Output: Hello, Alice!\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In this example, the \",(0,e.jsx)(n.code,{children:\"greetName\"}),\" function takes another function \",(0,e.jsx)(n.code,{children:\"greet\"}),\" as an argument and executes it with the name \",(0,e.jsx)(n.code,{children:\"Alice\"}),\". The \",(0,e.jsx)(n.code,{children:\"greet\"}),\" function is a higher-order function because it is passed as an argument to another function.\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Functions as return values\"}),`\n`,(0,e.jsx)(n.p,{children:\"A higher-order function can return another function.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function multiplier(factor) {\n  return function (num) {\n    return num * factor;\n  };\n}\n\nconst double = multiplier(2);\nconst triple = multiplier(3);\n\nconsole.log(double(5)); // Output: 10\nconsole.log(triple(5)); // Output: 15\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In this example, the \",(0,e.jsx)(n.code,{children:\"multiplier\"}),\" function returns a new function that multiplies any number by the specified factor. The returned function is a closure that remembers the \",(0,e.jsx)(n.code,{children:\"factor\"}),\" value from the outer function. The \",(0,e.jsx)(n.code,{children:\"multiplier\"}),\" function is a higher-order function because it returns another function.\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Practical examples\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Logging decorator\"}),\": A higher-order function that adds logging functionality to another function:\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function withLogging(fn) {\n  return function (...args) {\n    console.log(\\`Calling \\${fn.name} with arguments\\`, args);\n    return fn.apply(this, args);\n  };\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nconst loggedAdd = withLogging(add);\nconsole.log(loggedAdd(2, 3)); // Output: Calling add with arguments [2, 3] 5\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"withLogging\"}),\" function is a higher-order function that takes a function fn as an argument and returns a new function that logs the function call before executing the original function\"]}),`\n`,(0,e.jsxs)(n.ol,{start:\"2\",children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Memoization\"}),\": A higher-order function that caches the results of a function to avoid redundant computations:\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function memoize(fn) {\n  const cache = new Map();\n  return function (...args) {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = fn.apply(this, args);\n    cache.set(key, result);\n    return result;\n  };\n}\n\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst memoizedFibonacci = memoize(fibonacci);\nconsole.log(memoizedFibonacci(10)); // Output: 55\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"memoize\"}),\" function is a higher-order function that takes a function \",(0,e.jsx)(n.code,{children:\"fn\"}),\" as an argument and returns a new function that caches the results of the original function based on its arguments.\"]}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Lodash\"}),\": Lodash is a utility library that provides a wide range of functions for working with arrays, objects, strings, and more, most of which are higher-order functions.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import _ from 'lodash';\n\nconst numbers = [1, 2, 3, 4, 5];\n\n// Filter array\nconst evenNumbers = _.filter(numbers, (n) => n % 2 === 0); // [2, 4]\n\n// Map array\nconst doubledNumbers = _.map(numbers, (n) => n * 2); // [2, 4, 6, 8, 10]\n\n// Find the maximum value\nconst maxValue = _.max(numbers); // 5\n\n// Sum all values\nconst sum = _.sum(numbers); // 15\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://eloquentjavascript.net/05_higher_order.html\",children:\"Higher-Order Functions\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad\",children:\"Understanding Higher-Order Functions in JavaScript\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://www.freecodecamp.org/news/higher-order-functions-in-javascript-d9101f9cf528/\",children:\"Higher Order Functions: How to Use Filter, Map and Reduce for More Maintainable Code\"})}),`\n`]})]})}function N(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(l,r)})):l(r)}var x=N;return w(j);})();\n;return Component;"
}