{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-destructuring-assignment-for-objects-and-arrays",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-destructuring-assignment-for-objects-and-arrays",
    "subtitle": null,
    "title": "Explain the concept of destructuring assignment for objects and arrays",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-destructuring-assignment-for-objects-and-arrays/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var s in e)o(r,s,{get:e[s],enumerable:!0})},t=(r,e,s,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!m.call(r,a)&&a!==s&&o(r,a,{get:()=>e[a],enumerable:!(c=h(e,a))||c.enumerable});return r};var v=(r,e,s)=>(s=r!=null?d(p(r)):{},t(e||!r||!r.__esModule?o(s,\"default\",{value:r,enumerable:!0}):s,r)),j=r=>t(o({},\"__esModule\",{value:!0}),r);var l=b((J,i)=>{i.exports=_jsx_runtime});var D={};f(D,{default:()=>w,frontmatter:()=>y});var n=v(l()),y={title:\"Explain the concept of destructuring assignment for objects and arrays\"};function u(r){let e=Object.assign({h2:\"h2\",p:\"p\",pre:\"pre\",code:\"code\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Destructuring assignment is a syntax in JavaScript that allows you to unpack values from arrays or properties from objects into distinct variables. For arrays, you use square brackets, and for objects, you use curly braces. For example:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Array destructuring\nconst [a, b] = [1, 2];\n\n// Object destructuring\nconst { name, age } = { name: 'John', age: 30 };\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Destructuring assignment for objects and arrays\"}),`\n`,(0,n.jsx)(e.p,{children:\"Destructuring assignment is a convenient way to extract values from arrays and objects into separate variables. This can make your code more readable and concise.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Array destructuring\"}),`\n`,(0,n.jsx)(e.p,{children:\"Array destructuring allows you to unpack values from arrays into distinct variables using square brackets.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Basic example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const numbers = [1, 2, 3];\nconst [first, second, third] = numbers;\n\nconsole.log(first); // 1\nconsole.log(second); // 2\nconsole.log(third); // 3\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Skipping values\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can skip values in the array by leaving an empty space between commas.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const numbers = [1, 2, 3];\nconst [first, , third] = numbers;\n\nconsole.log(first); // 1\nconsole.log(third); // 3\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Default values\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can assign default values in case the array does not have enough elements.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const numbers = [1];\nconst [first, second = 2] = numbers;\n\nconsole.log(first); // 1\nconsole.log(second); // 2\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Object destructuring\"}),`\n`,(0,n.jsx)(e.p,{children:\"Object destructuring allows you to unpack properties from objects into distinct variables using curly braces.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Basic example\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = { name: 'John', age: 30 };\nconst { name, age } = person;\n\nconsole.log(name); // John\nconsole.log(age); // 30\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Renaming variables\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can rename the variables while destructuring.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = { name: 'John', age: 30 };\nconst { name: personName, age: personAge } = person;\n\nconsole.log(personName); // John\nconsole.log(personAge); // 30\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Default values\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can assign default values in case the property does not exist in the object.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = { name: 'John' };\nconst { name, age = 25 } = person;\n\nconsole.log(name); // John\nconsole.log(age); // 25\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Nested objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can destructure nested objects as well.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const person = { name: 'John', address: { city: 'New York', zip: '10001' } };\nconst {\n  name,\n  address: { city, zip },\n} = person;\n\nconsole.log(name); // John\nconsole.log(city); // New York\nconsole.log(zip); // 10001\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\",children:\"MDN Web Docs: Destructuring assignment\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/destructuring-assignment\",children:\"JavaScript.info: Destructuring assignment\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.freecodecamp.org/news/destructuring-assignment-in-es6-30e398f21d10/\",children:\"FreeCodeCamp: Destructuring assignment\"})}),`\n`]})]})}function x(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var w=x;return j(D);})();\n;return Component;"
}