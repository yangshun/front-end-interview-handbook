{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-difference-between-mutable-and-immutable-objects",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 390,
    "similarQuestions": [],
    "slug": "explain-the-difference-between-mutable-and-immutable-objects",
    "subtitle": null,
    "title": "Explain the difference between mutable and immutable objects in JavaScript",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-between-mutable-and-immutable-objects/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!p.call(t,r)&&r!==i&&a(t,r,{get:()=>e[r],enumerable:!(o=m(e,r))||o.enumerable});return t};var g=(t,e,i)=>(i=t!=null?h(u(t)):{},c(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>c(a({},\"__esModule\",{value:!0}),t);var l=f((z,s)=>{s.exports=_jsx_runtime});var x={};j(x,{default:()=>w,frontmatter:()=>v});var n=g(l()),v={title:\"Explain the difference between mutable and immutable objects in JavaScript\"};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Mutable objects\"}),\" allow for modification of properties and values after creation, which is the default behavior for most objects.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const mutableObject = {\n  name: 'John',\n  age: 30,\n};\n\n// Modify the object\nmutableObject.name = 'Jane';\n\n// The object has been modified\nconsole.log(mutableObject); // Output: { name: 'Jane', age: 30 }\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Immutable objects\"}),\" cannot be directly modified after creation. Its content cannot be changed without creating an entirely new value.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const immutableObject = Object.freeze({\n  name: 'John',\n  age: 30,\n});\n\n// Attempt to modify the object\nimmutableObject.name = 'Jane';\n\n// The object remains unchanged\nconsole.log(immutableObject); // Output: { name: 'John', age: 30 }\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The key difference between mutable and immutable objects is modifiability. Immutable objects cannot be modified after they are created, while mutable objects can be.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Immutability\"}),`\n`,(0,n.jsx)(e.p,{children:\"Immutability is a core principle in functional programming but it has lots to offer to object-oriented programs as well.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Mutable objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"Mutability refers to the ability of an object to have its properties or elements changed after it's created. A mutable object is an object whose state can be modified after it is created. In JavaScript, objects and arrays are mutable by default. They store references to their data in memory. Changing a property or element modifies the original object. Here is an example of a mutable object:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const mutableObject = {\n  name: 'John',\n  age: 30,\n};\n\n// Modify the object\nmutableObject.name = 'Jane';\n\n// The object has been modified\nconsole.log(mutableObject); // Output: { name: 'Jane', age: 30 }\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Immutable objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"An immutable object is an object whose state cannot be modified after it is created. Here is an example of an immutable object:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const immutableObject = Object.freeze({\n  name: 'John',\n  age: 30,\n});\n\n// Attempt to modify the object\nimmutableObject.name = 'Jane';\n\n// The object remains unchanged\nconsole.log(immutableObject); // Output: { name: 'John', age: 30 }\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Primitive data types like numbers, strings, booleans, \",(0,n.jsx)(e.code,{children:\"null\"}),\", and \",(0,n.jsx)(e.code,{children:\"undefined\"}),\" are inherently immutable. Once assigned a value, you cannot directly modify them.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let name = 'Alice';\nname.toUpperCase(); // This won't modify the original name variable\nconsole.log(name); // Still prints \"Alice\"\n\n// To change the value, you need to reassign a new string\nname = name.toUpperCase();\nconsole.log(name); // Now prints \"ALICE\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Some built-in immutable JavaScript objects are \",(0,n.jsx)(e.code,{children:\"Math\"}),\", \",(0,n.jsx)(e.code,{children:\"Date\"}),\" but custom objects are generally mutable.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"const\"}),\" vs immutable objects\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A common confusion / misunderstanding is that declaring a variable using \",(0,n.jsx)(e.code,{children:\"const\"}),\" makes the value immutable, which is not true at all.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"const\"}),\" prevents reassignment of the variable itself, but does not make the value it holds immutable. This means:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"For primitive values (numbers, strings, booleans), \",(0,n.jsx)(e.code,{children:\"const\"}),\" makes the value immutable since primitives are immutable by nature.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"For non-primitive values like objects and arrays, \",(0,n.jsx)(e.code,{children:\"const\"}),\" only prevents reassigning a new object/array to the variable, but the properties/elements of the existing object/array can still be modified.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the other hand, an immutable object is an object whose state (properties and values) cannot be modified after it is created. This is achieved by using methods like \",(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" which makes the object immutable by preventing any changes to its properties.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Using const\nconst person = { name: 'John' };\nperson = { name: 'Jane' }; // Error: Assignment to constant variable\nperson.name = 'Jane'; // Allowed, person.name is now 'Jane'\n\n// Using Object.freeze() to create an immutable object\nconst frozenPerson = Object.freeze({ name: 'John' });\nfrozenPerson.name = 'Jane'; // Fails silently (no error, but no change)\nfrozenPerson = { name: 'Jane' }; // Error: Assignment to constant variable\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the first example with \",(0,n.jsx)(e.code,{children:\"const\"}),\", reassigning a new object to \",(0,n.jsx)(e.code,{children:\"person\"}),\" is not allowed, but modifying the \",(0,n.jsx)(e.code,{children:\"name\"}),\" property is permitted. In the second example, \",(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" makes the \",(0,n.jsx)(e.code,{children:\"frozenPerson\"}),\" object immutable, preventing any changes to its properties.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It's important to note that \",(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" creates a shallow immutable object. If the object contains nested objects or arrays, those nested data structures are still mutable unless frozen separately.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Therefore, while \",(0,n.jsx)(e.code,{children:\"const\"}),\" provides immutability for primitive values, creating truly immutable objects requires using \",(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" or other immutability techniques like deep freezing or using immutable data structures from libraries like \",(0,n.jsx)(e.a,{href:\"https://immerjs.github.io/immer/\",children:\"Immer\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://immutable-js.com/\",children:\"Immutable.js\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Various ways to implement immutability in plain JavaScript objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here are a few ways to add/simulate different forms of immutability in plain JavaScript objects.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Immutable object properties\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By combining \",(0,n.jsx)(e.code,{children:\"writable: false\"}),\" and \",(0,n.jsx)(e.code,{children:\"configurable: false\"}),\", you can essentially create a constant (cannot be changed, redefined or deleted) as an object property, like:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const myObject = {};\nObject.defineProperty(myObject, 'number', {\n  value: 42,\n  writable: false,\n  configurable: false,\n});\nconsole.log(myObject.number); // 42\nmyObject.number = 43;\nconsole.log(myObject.number); // 42\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Preventing extensions on objects\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you want to prevent an object from having new properties added to it, but otherwise leave the rest of the object's properties alone, call \",(0,n.jsx)(e.code,{children:\"Object.preventExtensions(...)\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let myObject = {\n  a: 2,\n};\n\nObject.preventExtensions(myObject);\n\nmyObject.b = 3;\nconsole.log(myObject.b); // undefined\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In non-strict mode, the creation of \",(0,n.jsx)(e.code,{children:\"b\"}),\" fails silently. In strict mode, it throws a \",(0,n.jsx)(e.code,{children:\"TypeError\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Sealing an object\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.seal()\"}),' creates a \"sealed\" object, which means it takes an existing object and essentially calls ',(0,n.jsx)(e.code,{children:\"Object.preventExtensions()\"}),\" on it, but also marks all its existing properties as \",(0,n.jsx)(e.code,{children:\"configurable: false\"}),\". Therefore, not only can you not add any more properties, but you also cannot reconfigure or delete any existing properties, though you can still modify their values.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create an object\nconst person = {\n  name: 'John Doe',\n  age: 30,\n};\n\n// Seal the object\nObject.seal(person);\n\n// Try to add a new property (this will fail silently)\nperson.city = 'New York'; // This has no effect\n\n// Try to delete an existing property (this will fail silently)\ndelete person.age; // This has no effect\n\n// Modify an existing property (this will work)\nperson.age = 35;\n\nconsole.log(person); // Output: { name: 'John Doe', age: 35 }\n\n// Try to re-configure an existing property descriptor (this will fail silently)\nObject.defineProperty(person, 'name', { writable: false }); // Fails silently in non strict mode\n\n// Check if the object is sealed\nconsole.log(Object.isSealed(person)); // Output: true\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Freezing an object\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" creates a frozen object, which means it takes an existing object and essentially calls \",(0,n.jsx)(e.code,{children:\"Object.seal()\"}),' on it, but it also marks all \"data accessor\" properties as writable:false, so that their values cannot be changed.']}),`\n`,(0,n.jsx)(e.p,{children:\"This approach is the highest level of immutability that you can attain for an object itself, as it prevents any changes to the object or to any of its direct properties (though, as mentioned above, the contents of any referenced other objects are unaffected).\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let immutableObject = Object.freeze({});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Freezing an object does not allow new properties to be added to an object and prevents users from removing or altering the existing properties. \",(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" preserves the enumerability, configurability, writability and the \",(0,n.jsx)(e.code,{children:\"prototype\"}),\" of the object. It returns the passed object and does not create a frozen copy.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Object.freeze()\"}),\" makes the object immutable. However, it is not necessarily constant. \",(0,n.jsx)(e.code,{children:\"Object.freeze\"}),\" prevents modifications to the object itself and its direct properties, nested objects within the frozen object can still be modified.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let obj = {\n  user: {},\n};\n\nObject.freeze(obj);\nobj.user.name = 'John';\n\nconsole.log(obj.user.name); //Output: 'John'\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"What are the pros and cons of immutability?\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Pros\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Easier change detection\"}),\": Object equality can be determined in a performant and easy manner through referential equality. This is useful for comparing object differences in React and Redux.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Less complicated\"}),\": Programs with immutable objects are less complicated to think about, since you don't need to worry about how an object may evolve over time.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Easy sharing via references: One copy of an object is just as good as another, so you can cache objects or reuse the same object multiple times.\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Thread-safe\"}),\": Immutable objects can be safely used between threads in a multi-threaded environment since there is no risk of them being modified in other concurrently running threads. In the most cases, JavaScript runs in a single-threaded environment\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Less memory needed\"}),\": Using libraries like \",(0,n.jsx)(e.a,{href:\"https://immerjs.github.io/immer/\",children:\"Immer\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://immutable-js.com/\",children:\"Immutable.js\"}),\", objects are modified using structural sharing and less memory is needed for having multiple objects with similar structures.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"No need for defensive copying\"}),\": Defensive copies are no longer necessary when immutable objects are returning from or passed to functions, since there is no possibility an immutable object will be modified by it.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Cons\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Complex to create yourself\"}),\": Naive implementations of immutable data structures and its operations can result in extremely poor performance because new objects are created each time. It is recommended to use libraries for efficient immutable data structures and operations that leverage on structural sharing.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Potential negative performance\"}),\": Allocation (and deallocation) of many small objects rather than modifying existing ones can cause a performance impact. The complexity of either the allocator or the garbage collector usually depends on the number of objects on the heap.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Complexity for cyclic data structures\"}),\": Cyclic data structures such as graphs are difficult to implement.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\",children:\"Object.defineProperty() | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\",children:\"Object.freeze() | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\",children:\"Object.seal() | MDN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\",children:\"Object.preventExtensions() | MDN\"})}),`\n`]})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var w=O;return y(x);})();\n;return Component;"
}