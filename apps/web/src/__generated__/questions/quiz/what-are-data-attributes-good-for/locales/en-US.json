{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are `data-` attributes good for?",
    "gitHubEditUrl": "https://github.com/yangshun/front-end-interview-handbook/blob/main/packages/quiz/questions/what-are-data-attributes-good-for/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var n=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)n(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!b.call(t,r)&&r!==o&&n(t,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return t};var w=(t,e,o)=>(o=t!=null?h(p(t)):{},i(e||!t||!t.__esModule?n(o,\"default\",{value:t,enumerable:!0}):o,t)),y=t=>i(n({},\"__esModule\",{value:!0}),t);var c=g((D,d)=>{d.exports=_jsx_runtime});var j={};f(j,{default:()=>M,frontmatter:()=>v});var a=w(c()),v={title:\"What are `data-` attributes good for?\"};function l(t){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\",strong:\"strong\"},t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:[\"Before JavaScript frameworks became popular, developers used \",(0,a.jsx)(e.code,{children:\"data-\"}),\" attributes to store extra data within the DOM itself, without other hacks such as non-standard attributes, extra properties on the DOM. It is intended to store custom data private to the page or application, for when there are no more appropriate attributes or elements.\"]}),`\n`,(0,a.jsxs)(e.p,{children:[\"Another common use case for \",(0,a.jsx)(e.code,{children:\"data-\"}),\" attributes is to store information used by third-party libraries or frameworks. For example, the Bootstrap library uses data attributes to cause \",(0,a.jsx)(e.code,{children:\"<button>\"}),\"s to trigger actions on a modal elsewhere on the page (\",(0,a.jsx)(e.a,{href:\"https://getbootstrap.com/docs/5.2/components/modal/#via-data-attributes\",children:\"example\"}),\").\"]}),`\n`,(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:\"language-html\",children:`<button type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#myModal\">\n  Launch modal\n</button>\n...\n<div class=\"modal fade\" id=\"myModal\">Modal contents</div>\n`})}),`\n`,(0,a.jsxs)(e.p,{children:[\"These days, using \",(0,a.jsx)(e.code,{children:\"data-\"}),' attributes is generally not encouraged. One reason is that users can modify the data attribute easily by using \"inspect element\" in the browser. The data model is better stored within JavaScript environment and have them kept in-sync with the DOM via virtual DOM reconciliation or two-way data binding possibly through a library or a framework.']}),`\n`,(0,a.jsxs)(e.p,{children:[\"However, one perfectly valid use of data attributes, is to add an identifier for \",(0,a.jsx)(e.strong,{children:\"end-to-end\"}),\" testing frameworks (e.g. Playwright, Puppeteer, Selenium), without adding classes or ID attributes just for tests which are primarily for other purposes. The element needs a way to be selected and something like \",(0,a.jsx)(e.code,{children:'data-test-id=\"my-element\"'}),\" is a valid way to do so without convoluting the semantic markup otherwise.\"]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(l,t)})):l(t)}var M=x;return y(j);})();\n;return Component;"
}