{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-is-the-use-of-promiseall",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-is-the-use-of-promiseall",
    "subtitle": null,
    "title": "What is the use of `Promise.all()`",
    "topics": [
      "async",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-use-of-promiseall/en-US.mdx"
  },
  "solution": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},t=(n,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!f.call(n,s)&&s!==o&&i(n,s,{get:()=>e[s],enumerable:!(l=p(e,s))||l.enumerable});return n};var w=(n,e,o)=>(o=n!=null?m(v(n)):{},t(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),P=n=>t(i({},\"__esModule\",{value:!0}),n);var c=g((T,a)=>{a.exports=_jsx_runtime});var b={};j(b,{default:()=>d,frontmatter:()=>y});var r=w(c()),y={title:\"What is the use of `Promise.all()`\"};function h(n){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\" is a method in JavaScript that takes an array of promises and returns a single promise. This returned promise resolves when all the input promises have resolved, or it rejects if any of the input promises reject. It is useful for running multiple asynchronous operations in parallel and waiting for all of them to complete.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, 'foo');\n});\n\nPromise.all([promise1, promise2, promise3]).then((values) => {\n  console.log(values); // [3, 42, 'foo']\n});\n`})}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsxs)(e.h2,{children:[\"What is the use of \",(0,r.jsx)(e.code,{children:\"Promise.all()\"})]}),`\n`,(0,r.jsx)(e.h3,{children:\"Overview\"}),`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\" is a static method of the \",(0,r.jsx)(e.code,{children:\"Promise\"}),\" object that is used to handle multiple promises concurrently. It takes an iterable (usually an array) of promises and returns a single promise that resolves when all the promises in the iterable have resolved or rejects if any of the promises reject.\"]}),`\n`,(0,r.jsx)(e.h3,{children:\"Syntax\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-js\",children:`Promise.all(iterable);\n`})}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:\"iterable\"}),\": An iterable object, such as an array, containing promises.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{children:\"How it works\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"When you pass an array of promises to \",(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\", it returns a new promise. This new promise:\"]}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Resolves when all the promises in the array have resolved. The resolved value is an array of the resolved values of the input promises, in the same order as the input promises.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Rejects as soon as any of the input promises reject. The rejection reason is the reason of the first promise that rejects.\"}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{children:\"Example\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Here is an example to illustrate how \",(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\" works:\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, 'one');\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 200, 'two');\n});\n\nPromise.all([promise1, promise2])\n  .then((values) => {\n    console.log(values); // ['one', 'two']\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n`})}),`\n`,(0,r.jsxs)(e.p,{children:[\"In this example, \",(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\" waits for both \",(0,r.jsx)(e.code,{children:\"promise1\"}),\" and \",(0,r.jsx)(e.code,{children:\"promise2\"}),\" to resolve. Once both promises have resolved, it logs the array of resolved values.\"]}),`\n`,(0,r.jsx)(e.h3,{children:\"Error handling\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"If any of the promises passed to \",(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\" reject, the returned promise will immediately reject with the reason of the first promise that rejects.\"]}),`\n`,(0,r.jsx)(e.pre,{live:!0,children:(0,r.jsx)(e.code,{className:\"language-js\",children:`const promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, 'one');\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(reject, 200, 'two');\n});\n\nPromise.all([promise1, promise2])\n  .then((values) => {\n    console.log(values);\n  })\n  .catch((error) => {\n    console.error(error); // 'two'\n  });\n`})}),`\n`,(0,r.jsxs)(e.p,{children:[\"In this example, \",(0,r.jsx)(e.code,{children:\"promise2\"}),\" rejects after 200 milliseconds, causing the \",(0,r.jsx)(e.code,{children:\"Promise.all()\"}),\" promise to reject immediately with the reason \",(0,r.jsx)(e.code,{children:\"'two'\"}),\".\"]}),`\n`,(0,r.jsx)(e.h3,{children:\"Use cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Parallel API requests\"}),\": When you need to make multiple API requests and wait for all of them to complete before proceeding.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Batch processing\"}),\": When you have multiple asynchronous tasks that can be executed in parallel and you need to wait for all of them to finish.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"Data aggregation\"}),\": When you need to gather data from multiple sources and combine the results.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\",children:[\"MDN Web Docs on \",(0,r.jsx)(e.code,{children:\"Promise.all()\"})]})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://developers.google.com/web/fundamentals/primers/promises\",children:\"JavaScript Promises: An Introduction\"})}),`\n`,(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:\"https://www.digitalocean.com/community/tutorials/understanding-javascript-promises\",children:\"Understanding JavaScript Promises\"})}),`\n`]})]})}function d(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}return P(b);})();\n;return Component;"
}