{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/how-do-you-handle-errors-in-asynchronous-operations",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "how-do-you-handle-errors-in-asynchronous-operations",
    "subtitle": null,
    "title": "How do you handle errors in asynchronous operations?",
    "topics": [
      "async",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-handle-errors-in-asynchronous-operations/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var o in e)c(r,o,{get:e[o],enumerable:!0})},s=(r,e,o,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!g.call(r,a)&&a!==o&&c(r,a,{get:()=>e[a],enumerable:!(t=p(e,a))||t.enumerable});return r};var w=(r,e,o)=>(o=r!=null?d(m(r)):{},s(e||!r||!r.__esModule?c(o,\"default\",{value:r,enumerable:!0}):o,r)),j=r=>s(c({},\"__esModule\",{value:!0}),r);var h=y((P,i)=>{i.exports=_jsx_runtime});var U={};f(U,{default:()=>E,frontmatter:()=>v});var n=w(h()),v={title:\"How do you handle errors in asynchronous operations?\"};function l(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To handle errors in asynchronous operations, you can use \",(0,n.jsx)(e.code,{children:\"try...catch\"}),\" blocks with \",(0,n.jsx)(e.code,{children:\"async/await\"}),\" syntax or \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method with Promises. For example, with \",(0,n.jsx)(e.code,{children:\"async/await\"}),\", you can wrap your code in a \",(0,n.jsx)(e.code,{children:\"try...catch\"}),\" block to catch any errors:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`async function fetchData() {\n  try {\n    // Invalid URl\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n\nfetchData(); // Error fetching data: ....\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"With Promises, you can use the \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://api.example.com/data') // Invalid URl\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error fetching data:', error));\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"try...catch\"}),\" with \",(0,n.jsx)(e.code,{children:\"async/await\"})]}),`\n`,(0,n.jsx)(e.h3,{children:\"Basic usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"When using \",(0,n.jsx)(e.code,{children:\"async/await\"}),\", you can handle errors by wrapping your asynchronous code in a \",(0,n.jsx)(e.code,{children:\"try...catch\"}),\" block. This allows you to catch any errors that occur during the execution of the \",(0,n.jsx)(e.code,{children:\"await\"}),\" statement.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`async function fetchData() {\n  try {\n    // Invalid URl\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n\nfetchData(); // Error fetching data: ....\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Nested asynchronous operations\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you have multiple asynchronous operations, you can nest \",(0,n.jsx)(e.code,{children:\"try...catch\"}),\" blocks to handle errors at different levels.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`async function fetchUser() {\n  // Simulate a successful async operation\n  return { id: 1, name: 'Alice' };\n}\n\nasync function fetchUserPosts() {\n  // Simulate a failed async operation\n  throw new Error('Failed to fetch posts');\n}\n\nasync function loadUserData() {\n  try {\n    const user = await fetchUser();\n    console.log('User:', user);\n\n    try {\n      const posts = await fetchUserPosts();\n      console.log('Posts:', posts);\n    } catch (postsError) {\n      console.error('Error fetching posts:', postsError.message);\n    }\n  } catch (userError) {\n    console.error('Error fetching user:', userError.message);\n  }\n}\n\nloadUserData();\n`})}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Using \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" with Promises\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Basic usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"When working with Promises, you can handle errors using the \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" method. This method is called if the Promise is rejected.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error fetching data:', error));\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Chaining multiple Promises\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you have multiple Promises chained together, you can use a single \",(0,n.jsx)(e.code,{children:\".catch()\"}),\" at the end to handle any errors that occur in any of the Promises.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`fetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => {\n    // Process data\n    return processData(data);\n  })\n  .then((result) => {\n    // Further processing\n    console.log(result);\n  })\n  .catch((error) => console.error('Error in the chain:', error));\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await\",children:\"MDN Web Docs: async/await\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\",children:\"MDN Web Docs: Promises\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/promise-error-handling\",children:\"JavaScript.info: Error handling with promises\"})}),`\n`]})]})}function x(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var E=x;return j(U);})();\n;return Component;"
}