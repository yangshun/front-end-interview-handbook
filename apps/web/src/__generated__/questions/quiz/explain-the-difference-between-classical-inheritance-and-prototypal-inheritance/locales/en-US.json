{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the difference between classical inheritance and prototypal inheritance",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-difference-between-classical-inheritance-and-prototypal-inheritance/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var t in e)r(i,t,{get:e[t],enumerable:!0})},c=(i,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!f.call(i,a)&&a!==t&&r(i,a,{get:()=>e[a],enumerable:!(o=p(e,a))||o.enumerable});return i};var b=(i,e,t)=>(t=i!=null?d(g(i)):{},c(e||!i||!i.__esModule?r(t,\"default\",{value:i,enumerable:!0}):t,i)),j=i=>c(r({},\"__esModule\",{value:!0}),i);var l=u((S,s)=>{s.exports=_jsx_runtime});var C={};y(C,{default:()=>w,frontmatter:()=>v});var n=b(l()),v={title:\"Explain the difference between classical inheritance and prototypal inheritance\"};function h(i){let e=Object.assign({h2:\"h2\",p:\"p\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",pre:\"pre\",code:\"code\",a:\"a\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Classical inheritance is a model where classes inherit from other classes, typically seen in languages like Java and C++. Prototypal inheritance, used in JavaScript, involves objects inheriting directly from other objects. In classical inheritance, you define a class and create instances from it. In prototypal inheritance, you create an object and use it as a prototype for other objects.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Difference between classical inheritance and prototypal inheritance\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Classical inheritance\"}),`\n`,(0,n.jsx)(e.p,{children:\"Classical inheritance is a pattern used in many object-oriented programming languages like Java, C++, and Python. It involves creating a class hierarchy where classes inherit properties and methods from other classes.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Class definition\"}),\": You define a class with properties and methods.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Instantiation\"}),\": You create instances (objects) of the class.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Inheritance\"}),\": A class can inherit from another class, forming a parent-child relationship.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Example in Java:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-java\",children:`class Animal {\n    void eat() {\n        System.out.println(\"This animal eats food.\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"The dog barks.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat(); // Inherited method\n        dog.bark(); // Own method\n    }\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Prototypal inheritance\"}),`\n`,(0,n.jsx)(e.p,{children:\"Prototypal inheritance is a feature of JavaScript where objects inherit directly from other objects. There are no classes; instead, objects serve as prototypes for other objects.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Object creation\"}),\": You create an object directly.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prototype chain\"}),\": Objects can inherit properties and methods from other objects through the prototype chain.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Flexibility\"}),\": You can dynamically add or modify properties and methods.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Example in JavaScript:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const animal = {\n  eat() {\n    console.log('This animal eats food.');\n  },\n};\n\nconst dog = Object.create(animal);\ndog.bark = function () {\n  console.log('The dog barks.');\n};\n\ndog.eat(); // Inherited method (Output: The animal eats food.)\ndog.bark(); // Own method (Output: The dog barks.)\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Key differences\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Class-based vs. prototype-based\"}),\": Classical inheritance uses classes, while prototypal inheritance uses objects.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Inheritance model\"}),\": Classical inheritance forms a class hierarchy, whereas prototypal inheritance forms a prototype chain.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Flexibility\"}),\": Prototypal inheritance is more flexible and dynamic, allowing for changes at runtime.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\",children:\"MDN Web Docs: Inheritance and the prototype chain\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/prototype-inheritance\",children:\"JavaScript.info: Prototypal inheritance\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\",children:\"MDN Web Docs: Classes\"})}),`\n`]})]})}function x(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(h,i)})):h(i)}var w=x;return j(C);})();\n;return Component;"
}