{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 90,
    "similarQuestions": [],
    "slug": "whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states",
    "subtitle": "Como você checaria cada um destes estados?\"",
    "title": "Qual é a diferença entre uma variável que é: `null`, `undefined` ou não declarada?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states/pt-BR.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var h=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),g=(a,e)=>{for(var r in e)d(a,r,{get:e[r],enumerable:!0})},c=(a,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of v(e))!p.call(a,n)&&n!==r&&d(a,n,{get:()=>e[n],enumerable:!(i=m(e,n))||i.enumerable});return a};var b=(a,e,r)=>(r=a!=null?u(f(a)):{},c(e||!a||!a.__esModule?d(r,\"default\",{value:a,enumerable:!0}):r,a)),x=a=>c(d({},\"__esModule\",{value:!0}),a);var s=h((C,l)=>{l.exports=_jsx_runtime});var y={};g(y,{default:()=>_,frontmatter:()=>j});var o=b(s()),j={title:\"Qual \\xE9 a diferen\\xE7a entre uma vari\\xE1vel que \\xE9: `null`, `undefined` ou n\\xE3o declarada?\",subtitle:'Como voc\\xEA checaria cada um destes estados?\"'};function t(a){let e=Object.assign({p:\"p\",strong:\"strong\",code:\"code\",pre:\"pre\"},a.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[\"Vari\\xE1veis \",(0,o.jsx)(e.strong,{children:\"n\\xE3o declaradas\"}),\" s\\xE3o criadas quando voc\\xEA atribui um valor a um identificador que n\\xE3o foi criado anteriormente usando var, let ou const. Vari\\xE1veis n\\xE3o declaradas ser\\xE3o definidas globalmente, fora do escopo atual. No modo estrito, um \",(0,o.jsx)(e.code,{children:\"ReferenceError\"}),\" ser\\xE1 lan\\xE7ado quando voc\\xEA tentar atribuir a uma vari\\xE1vel n\\xE3o declarada. Vari\\xE1veis n\\xE3o declaradas s\\xE3o ruins assim como as vari\\xE1veis globais s\\xE3o ruins. Evite elas a todo custo! Para verific\\xE1-las, envolva o uso delas em um bloco \",(0,o.jsx)(e.code,{children:\"try/catch\"}),\".\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-js\",children:`function foo() {\n  x = 1; // Lan\\xE7a um erro de refer\\xEAncia em modo strict\n}\n\nfoo();\nconsole.log(x); // 1\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Uma vari\\xE1vel que \\xE9 \",(0,o.jsx)(e.code,{children:\"undefined\"}),\" \\xE9 uma vari\\xE1vel que foi declarada, mas n\\xE3o atribu\\xEDda um valor. \\xC9 do tipo 'undefined'. Se uma fun\\xE7\\xE3o n\\xE3o retornar nenhum valor como resultado de sua execu\\xE7\\xE3o, e se for atribu\\xEDda a uma vari\\xE1vel, a vari\\xE1vel tamb\\xE9m ter\\xE1 o valor de \",(0,o.jsx)(e.code,{children:\"undefined\"}),\". Para verificar isso, compare usando o operador de igualdade estrita (\",(0,o.jsx)(e.code,{children:\"===\"}),\") ou \",(0,o.jsx)(e.code,{children:\"typeof\"}),\", que retornar\\xE1 a string \",(0,o.jsx)(e.code,{children:\"undefined\"}),\". Note que voc\\xEA n\\xE3o deve usar o operador de igualdade abstrata para verificar, pois tamb\\xE9m retornar\\xE1 \",(0,o.jsx)(e.code,{children:\"true\"}),\" se o valor for \",(0,o.jsx)(e.code,{children:\"null\"}),\".\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-js\",children:`var foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === 'undefined'); // true\n\nconsole.log(foo == null); // verdadeiro. Errado, n\\xE3o use isso para verificar!\n\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Uma vari\\xE1vel que \\xE9 \",(0,o.jsx)(e.code,{children:\"null\"}),\" ter\\xE1 sido explicitamente atribu\\xEDda ao valor \",(0,o.jsx)(e.code,{children:\"null\"}),\". Ele n\\xE3o representa nenhum valor e \\xE9 diferente de \",(0,o.jsx)(e.code,{children:\"undefined\"}),\" no sentido de que foi explicitamente atribu\\xEDdo. Para verificar se \\xE9 \",(0,o.jsx)(e.code,{children:\"null,\"}),\" simplesmente compare usando o operador de igualdade estrita. Observe que, assim como acima, voc\\xEA n\\xE3o deve usar o operador de igualdade abstrata (\",(0,o.jsx)(e.code,{children:\"==\"}),\") para verificar, pois tamb\\xE9m retornar\\xE1 \",(0,o.jsx)(e.code,{children:\"true\"}),\" se o valor for \",(0,o.jsx)(e.code,{children:\"undefined\"}),\".\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-js\",children:`var foo = null;\nconsole.log(foo === null); // verdadeiro\nconsole.log(typeof foo === 'object'); // verdadeiro\n\nconsole.log(foo == undefined); // true. Errado, n\\xE3o use isto para verificar!\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Como bom h\\xE1bito, nunca deixe suas vari\\xE1veis n\\xE3o declaradas ou n\\xE3o atribu\\xEDdas. Atribua explicitamente \",(0,o.jsx)(e.code,{children:\"null\"}),\" a elas depois de declar\\xE1-las, se voc\\xEA n\\xE3o pretende us\\xE1-las ainda. Se voc\\xEA usa alguma ferramenta de an\\xE1lise est\\xE1tica em seu fluxo de trabalho (por exemplo, ESLint, TypeScript Compiler), geralmente ela tamb\\xE9m pode verificar se voc\\xEA est\\xE1 referenciando vari\\xE1veis n\\xE3o declaradas.\"]})]})}function q(a={}){let{wrapper:e}=a.components||{};return e?(0,o.jsx)(e,Object.assign({},a,{children:(0,o.jsx)(t,a)})):t(a)}var _=q;return x(y);})();\n;return Component;"
}