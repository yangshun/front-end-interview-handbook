{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-this-binding-in-event-handlers",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-this-binding-in-event-handlers",
    "subtitle": null,
    "title": "Explain the concept of `this` binding in event handlers",
    "topics": [
      "closure",
      "web-api",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-this-binding-in-event-handlers/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!f.call(t,i)&&i!==o&&c(t,i,{get:()=>e[i],enumerable:!(d=b(e,i))||d.enumerable});return t};var y=(t,e,o)=>(o=t!=null?u(p(t)):{},l(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),j=t=>l(c({},\"__esModule\",{value:!0}),t);var r=g((C,h)=>{h.exports=_jsx_runtime});var w={};v(w,{default:()=>a,frontmatter:()=>x});var n=y(r()),x={title:\"Explain the concept of `this` binding in event handlers\"};function s(t){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In JavaScript, the \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword refers to the object that is currently executing the code. In event handlers, \",(0,n.jsx)(e.code,{children:\"this\"}),\" typically refers to the element that triggered the event. However, the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" can change depending on how the event handler is defined and called. To ensure \",(0,n.jsx)(e.code,{children:\"this\"}),\" refers to the desired object, you can use methods like \",(0,n.jsx)(e.code,{children:\"bind()\"}),\", arrow functions, or assign the context explicitly.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"The concept of \",(0,n.jsx)(e.code,{children:\"this\"}),\" binding in event handlers\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Understanding \",(0,n.jsx)(e.code,{children:\"this\"}),\" in JavaScript\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In JavaScript, the \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword is a reference to the object that is currently executing the code. The value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" is determined by how a function is called, not where it is defined. This can lead to different values of \",(0,n.jsx)(e.code,{children:\"this\"}),\" in different contexts.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"this\"}),\" in event handlers\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the context of event handlers, \",(0,n.jsx)(e.code,{children:\"this\"}),\" usually refers to the DOM element that triggered the event. For example:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create a button element and append it to the DOM\nconst button = document.createElement('button');\nbutton.id = 'myButton';\ndocument.body.appendChild(button);\n\ndocument.getElementById('myButton').addEventListener('click', function () {\n  console.log(this); // \\`this\\` refers to the 'myButton' element\n});\n\nbutton.click(); // Logs the button element\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"this\"}),\" inside the event handler refers to the button element that was clicked.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Changing the value of \",(0,n.jsx)(e.code,{children:\"this\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There are several ways to change the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" in event handlers:\"]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"bind()\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"bind()\"}),\" method creates a new function that, when called, has its \",(0,n.jsx)(e.code,{children:\"this\"}),\" keyword set to the provided value:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create a button element and append it to the DOM\nconst button = document.createElement('button');\nbutton.id = 'myButton';\ndocument.body.appendChild(button);\n\nfunction handleClick() {\n  console.log(this); // Logs the object passed to bind()\n}\n\nconst obj = { name: 'MyObject' };\ndocument\n  .getElementById('myButton')\n  .addEventListener('click', handleClick.bind(obj));\n\nbutton.click(); // Logs obj because handleClick was bound to obj using bind()\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"this\"}),\" inside \",(0,n.jsx)(e.code,{children:\"handleClick\"}),\" refers to \",(0,n.jsx)(e.code,{children:\"obj\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Using arrow functions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Arrow functions do not have their own \",(0,n.jsx)(e.code,{children:\"this\"}),\" context; they inherit \",(0,n.jsx)(e.code,{children:\"this\"}),\" from the surrounding lexical context:\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create a button element and append it to the DOM\nconst button = document.createElement('button');\nbutton.id = 'myButton';\ndocument.body.appendChild(button);\n\nconst obj = {\n  name: 'MyObject',\n  handleClick: function () {\n    document.getElementById('myButton').addEventListener('click', () => {\n      console.log(this); // Logs obj\n    });\n  },\n};\n\nobj.handleClick();\nbutton.click(); // This will log obj\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"this\"}),\" inside the arrow function refers to \",(0,n.jsx)(e.code,{children:\"obj\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Assigning the context explicitly\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can also assign the context explicitly by using a variable:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create a button element and append it to the DOM\nconst button = document.createElement('button');\nbutton.id = 'myButton';\ndocument.body.appendChild(button);\n\nconst obj = {\n  name: 'MyObject',\n  handleClick: function () {\n    const self = this;\n    document.getElementById('myButton').addEventListener('click', function () {\n      console.log(self); // Logs obj\n    });\n  },\n};\n\nobj.handleClick();\nbutton.click(); // This will log obj\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, \",(0,n.jsx)(e.code,{children:\"self\"}),\" is used to capture the value of \",(0,n.jsx)(e.code,{children:\"this\"}),\" from the outer function.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\",children:[\"MDN Web Docs: \",(0,n.jsx)(e.code,{children:\"this\"})]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\",children:[\"MDN Web Docs: \",(0,n.jsx)(e.code,{children:\"bind()\"})]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\",children:\"MDN Web Docs: Arrow functions\"})}),`\n`]})]})}function a(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(s,{...t})}):s(t)}return j(w);})();\n;return Component;"
}