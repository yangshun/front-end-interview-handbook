{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain the concept of partial application"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-partial-application",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-partial-application",
    "subtitle": null,
    "topics": [
      "closure",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-partial-application/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),b=(a,n)=>{for(var i in n)r(a,i,{get:n[i],enumerable:!0})},l=(a,n,i,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let t of p(n))!m.call(a,t)&&t!==i&&r(a,t,{get:()=>n[t],enumerable:!(o=u(n,t))||o.enumerable});return a};var y=(a,n,i)=>(i=a!=null?h(g(a)):{},l(n||!a||!a.__esModule?r(i,\"default\",{value:a,enumerable:!0}):i,a)),w=a=>l(r({},\"__esModule\",{value:!0}),a);var d=f((F,c)=>{c.exports=_jsx_runtime});var k={};b(k,{default:()=>j,frontmatter:()=>x});var e=y(d()),x={title:\"Explain the concept of partial application\"};function s(a){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",a:\"a\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Partial application is a technique in functional programming where a function is applied to some of its arguments, producing a new function that takes the remaining arguments. This allows you to create more specific functions from general ones. For example, if you have a function \",(0,e.jsx)(n.code,{children:\"add(a, b)\"}),\", you can partially apply it to create a new function \",(0,e.jsx)(n.code,{children:\"add5\"}),\" that always adds 5 to its argument.\"]}),`\n`,(0,e.jsx)(n.pre,{live:!0,children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function add(a, b) {\n  return a + b;\n}\n\nconst add5 = add.bind(null, 5);\nconsole.log(add5(10)); // Outputs 15\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{children:\"Partial application\"}),`\n`,(0,e.jsx)(n.p,{children:\"Partial application is a functional programming technique where a function is applied to some of its arguments, producing a new function that takes the remaining arguments. This can be useful for creating more specific functions from general ones, improving code reusability and readability.\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Example\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Consider a simple \",(0,e.jsx)(n.code,{children:\"add\"}),\" function that takes two arguments:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`function add(a, b) {\n  return a + b;\n}\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Using partial application, you can create a new function \",(0,e.jsx)(n.code,{children:\"add5\"}),\" that always adds 5 to its argument:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const add5 = add.bind(null, 5);\nconsole.log(add5(10)); // Outputs 15\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"How it works\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"In the example above, \",(0,e.jsx)(n.code,{children:\"add.bind(null, 5)\"}),\" creates a new function where the first argument (\",(0,e.jsx)(n.code,{children:\"a\"}),\") is fixed to 5. The \",(0,e.jsx)(n.code,{children:\"null\"}),\" value is used as the \",(0,e.jsx)(n.code,{children:\"this\"}),\" context, which is not relevant in this case.\"]}),`\n`,(0,e.jsx)(n.h3,{children:\"Benefits\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Code reusability\"}),\": You can create more specific functions from general ones, making your code more modular and reusable.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Readability\"}),\": Partially applied functions can make your code easier to read and understand by reducing the number of arguments you need to pass around.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"Real-world example\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Partial application is often used in libraries like Lodash. For example, Lodash's \",(0,e.jsx)(n.code,{children:\"_.partial\"}),\" function allows you to create partially applied functions easily:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`const _ = require('lodash');\n\nfunction greet(greeting, name) {\n  return \\`\\${greeting}, \\${name}!\\`;\n}\n\nconst sayHelloTo = _.partial(greet, 'Hello');\nconsole.log(sayHelloTo('John')); // Outputs \"Hello, John!\"\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Further reading\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\",children:\"MDN Web Docs: Function.prototype.bind()\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://lodash.com/docs/4.17.15#partial\",children:\"Lodash Documentation: _.partial\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/Partial_application\",children:\"Wikipedia: Partial application\"})}),`\n`]})]})}function _(a={}){let{wrapper:n}=a.components||{};return n?(0,e.jsx)(n,Object.assign({},a,{children:(0,e.jsx)(s,a)})):s(a)}var j=_;return w(k);})();\n;return Component;"
}