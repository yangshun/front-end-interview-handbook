{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/what-are-rest-parameters-and-how-are-they-used",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "what-are-rest-parameters-and-how-are-they-used",
    "subtitle": null,
    "title": "What are rest parameters and how are they used?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-rest-parameters-and-how-are-they-used/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!f.call(r,a)&&a!==t&&i(r,a,{get:()=>e[a],enumerable:!(s=u(e,a))||s.enumerable});return r};var b=(r,e,t)=>(t=r!=null?d(p(r)):{},c(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>c(i({},\"__esModule\",{value:!0}),r);var l=g((S,o)=>{o.exports=_jsx_runtime});var R={};y(R,{default:()=>v,frontmatter:()=>x});var n=b(l()),x={title:\"What are rest parameters and how are they used?\"};function h(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Rest parameters in JavaScript allow a function to accept an indefinite number of arguments as an array. They are denoted by three dots (\",(0,n.jsx)(e.code,{children:\"...\"}),\") followed by the name of the array. This feature is useful for functions that need to handle multiple arguments without knowing the exact number in advance.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function sum(...numbers) {\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4)); // Output: 10\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Rest parameters\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Definition\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Rest parameters allow a function to accept an indefinite number of arguments as an array. They are represented by three dots (\",(0,n.jsx)(e.code,{children:\"...\"}),\") followed by the name of the array.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Syntax\"}),`\n`,(0,n.jsx)(e.p,{children:\"The syntax for rest parameters is straightforward. You place three dots before the last parameter in the function definition:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function myFunction(a, b, ...rest) {\n  // 'rest' is an array containing the remaining arguments\n  console.log(rest); // [3, 4, 5]\n}\nmyFunction(1, 2, 3, 4, 5);\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Usage\"}),`\n`,(0,n.jsx)(e.p,{children:\"Rest parameters are useful in various scenarios, such as when you need to handle multiple arguments without knowing their exact number in advance.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Example: Summing numbers\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a simple example of a function that sums an indefinite number of arguments:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function sum(...numbers) {\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4)); // Output: 10\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the \",(0,n.jsx)(e.code,{children:\"sum\"}),\" function uses the rest parameter \",(0,n.jsx)(e.code,{children:\"numbers\"}),\" to collect all the arguments passed to it into an array. The \",(0,n.jsx)(e.code,{children:\"reduce\"}),\" method is then used to sum up the elements of the array.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example: Combining arrays\"}),`\n`,(0,n.jsx)(e.p,{children:\"Rest parameters can also be used to combine multiple arrays into one:\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function combineArrays(...arrays) {\n  return arrays.flat();\n}\n\nconsole.log(combineArrays([1, 2], [3, 4], [5, 6])); // Output: [1, 2, 3, 4, 5, 6]\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, the \",(0,n.jsx)(e.code,{children:\"combineArrays\"}),\" function uses the rest parameter \",(0,n.jsx)(e.code,{children:\"arrays\"}),\" to collect all the arrays passed to it into a single array. The \",(0,n.jsx)(e.code,{children:\"flat\"}),\" method is then used to flatten the array of arrays into a single array.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Important points\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Rest parameters must be the last parameter in the function definition.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Only one rest parameter is allowed per function.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Rest parameters are different from the \",(0,n.jsx)(e.code,{children:\"arguments\"}),\" object, which is an array-like object available within all non-arrow functions.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\",children:\"MDN Web Docs: Rest parameters\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/rest-parameters-spread\",children:\"JavaScript.info: Rest parameters and spread syntax\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.w3schools.com/js/js_function_parameters.asp\",children:\"W3Schools: JavaScript Function Parameters\"})}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var v=j;return w(R);})();\n;return Component;"
}