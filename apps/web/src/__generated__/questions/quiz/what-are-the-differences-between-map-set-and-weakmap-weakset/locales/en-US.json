{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What are the differences between `Map`/`Set` and `WeakMap`/`WeakSet` in JavaScript?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-are-the-differences-between-map-set-and-weakmap-weakset/en-US.mdx"
  },
  "solution": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var t in e)c(r,t,{get:e[t],enumerable:!0})},o=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!b.call(r,a)&&a!==t&&c(r,a,{get:()=>e[a],enumerable:!(i=u(e,a))||i.enumerable});return r};var k=(r,e,t)=>(t=r!=null?h(g(r)):{},o(e||!r||!r.__esModule?c(t,\"default\",{value:r,enumerable:!0}):t,r)),v=r=>o(c({},\"__esModule\",{value:!0}),r);var d=f((M,l)=>{l.exports=_jsx_runtime});var S={};m(S,{default:()=>j,frontmatter:()=>y});var n=k(d()),y={title:\"What are the differences between `Map`/`Set` and `WeakMap`/`WeakSet` in JavaScript?\"};function s(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",strong:\"strong\",ul:\"ul\",li:\"li\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",hr:\"hr\",ol:\"ol\",h3:\"h3\",pre:\"pre\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The primary difference between \",(0,n.jsx)(e.code,{children:\"Map\"}),\"/\",(0,n.jsx)(e.code,{children:\"Set\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\"/\",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" in JavaScript lies in how they handle keys. Here's a breakdown:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" vs. \",(0,n.jsx)(e.code,{children:\"WeakMap\"})]})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\"s allows any data type (strings, numbers, objects) as keys. The key-value pairs remain in memory as long as the \",(0,n.jsx)(e.code,{children:\"Map\"}),\" object itself is referenced. Thus they are suitable for general-purpose key-value storage where you want to maintain references to both keys and values. Common use cases include storing user data, configuration settings, or relationships between objects.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"WeakMap\"}),\"s only allows objects as keys. However, these object keys are held weakly. This means the garbage collector can remove them from memory even if the \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" itself still exists, as long as there are no other references to those objects. \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\"s are ideal for scenarios where you want to associate data with objects without preventing those objects from being garbage collected. This can be useful for things like:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Caching data based on objects without preventing garbage collection of the objects themselves.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Storing private data associated with DOM nodes without affecting their lifecycle.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.code,{children:\"Set\"}),\" vs. \",(0,n.jsx)(e.code,{children:\"WeakSet\"})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Similar to \",(0,n.jsx)(e.code,{children:\"Map\"}),\", \",(0,n.jsx)(e.code,{children:\"Set\"}),\"s allow any data type as keys. The elements within a \",(0,n.jsx)(e.code,{children:\"Set\"}),\" must be unique. \",(0,n.jsx)(e.code,{children:\"Set\"}),\"s are useful for storing unique values and checking for membership efficiently. Common use cases include removing duplicates from arrays or keeping track of completed tasks.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the other hand, \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" only allows objects as elements, and these object elements are held weakly, similar to \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" keys. \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\"s are less commonly used, but applicable when you want a collection of unique objects without affecting their garbage collection. This might be necessary for:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Tracking DOM nodes that have been interacted with without affecting their memory management.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Implementing custom object weak references for specific use cases.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Here's a table summarizing the key differences:\"})}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Feature\"}),(0,n.jsx)(e.th,{children:\"Map\"}),(0,n.jsx)(e.th,{children:\"WeakMap\"}),(0,n.jsx)(e.th,{children:\"Set\"}),(0,n.jsx)(e.th,{children:\"WeakSet\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Key Types\"}),(0,n.jsx)(e.td,{children:\"Any data type\"}),(0,n.jsx)(e.td,{children:\"Objects (weak references)\"}),(0,n.jsx)(e.td,{children:\"Any data type (unique)\"}),(0,n.jsx)(e.td,{children:\"Objects (weak references, unique)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Garbage Collection\"}),(0,n.jsx)(e.td,{children:\"Keys and values are not garbage collected\"}),(0,n.jsx)(e.td,{children:\"Keys can be garbage collected if not referenced elsewhere\"}),(0,n.jsx)(e.td,{children:\"Elements are not garbage collected\"}),(0,n.jsx)(e.td,{children:\"Elements can be garbage collected if not referenced elsewhere\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Use Cases\"}),(0,n.jsx)(e.td,{children:\"General-purpose key-value storage\"}),(0,n.jsx)(e.td,{children:\"Caching, private DOM node data\"}),(0,n.jsx)(e.td,{children:\"Removing duplicates, membership checks\"}),(0,n.jsx)(e.td,{children:\"Object weak references, custom use cases\"})]})]})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Choosing between them\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" for most scenarios where you need to store key-value pairs or unique elements and want to maintain references to both the keys/elements and the values.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" cautiously in specific situations where you want to associate data with objects without affecting their garbage collection. Be aware of the implications of weak references and potential memory leaks if not used correctly.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\"/\",(0,n.jsx)(e.code,{children:\"Set\"}),\" vs \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\"/\",(0,n.jsx)(e.code,{children:\"WeakSet\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The key differences between \",(0,n.jsx)(e.code,{children:\"Map\"}),\"/\",(0,n.jsx)(e.code,{children:\"Set\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\"/\",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" in JavaScript are:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Key types\"}),\": \",(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" can have keys of any type (objects, primitive values, etc.), while \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" can only have objects as keys. Primitive values like strings or numbers are not allowed as keys in \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Memory management\"}),\": The main difference lies in how they handle memory. \",(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" have strong references to their keys and values, which means they will prevent garbage collection of those values. On the other hand, \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" have weak references to their keys (objects), allowing those objects to be garbage collected if there are no other strong references to them.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Key enumeration\"}),\": Keys in \",(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" are enumerable (can be iterated over), while keys in \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" are not enumerable. This means you cannot get a list of keys or values from a \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" or \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsxs)(e.strong,{children:[(0,n.jsx)(e.code,{children:\"size\"}),\" property\"]}),\": \",(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" have a \",(0,n.jsx)(e.code,{children:\"size\"}),\" property that returns the number of elements, while \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" do not have a \",(0,n.jsx)(e.code,{children:\"size\"}),\" property because their size can change due to garbage collection.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Use cases\"}),\": \",(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" are useful for general-purpose data structures and caching, while \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" are primarily used for storing metadata or additional data related to objects, without preventing those objects from being garbage collected.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" are regular data structures that maintain strong references to their keys and values, while \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" are designed for scenarios where you want to associate data with objects without preventing those objects from being garbage collected when they are no longer needed.\"]}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Use cases of \",(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"})]}),`\n`,(0,n.jsx)(e.h3,{children:\"Tracking active users\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In a chat application, you might want to track which user objects are currently active without preventing garbage collection when the user logs out or the session expires. We use a \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" to track active user objects. When a user logs out or their session expires, the user object can be garbage-collected if there are no other references to it.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const activeUsers = new WeakSet();\n\n// Function to mark a user as active\nfunction markUserActive(user) {\n  activeUsers.add(user);\n}\n\n// Function to check if a user is active\nfunction isUserActive(user) {\n  return activeUsers.has(user);\n}\n\n// Example usage\nlet user1 = { id: 1, name: 'Alice' };\nlet user2 = { id: 2, name: 'Bob' };\n\nmarkUserActive(user1);\nmarkUserActive(user2);\n\nconsole.log(isUserActive(user1)); // true\nconsole.log(isUserActive(user2)); // true\n\n// Simulate user logging out\nuser1 = null;\n\n// user1 is now eligible for garbage collection\nconsole.log(isUserActive(user1)); // false\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Detecting circular references\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" is provides a way of guarding against circular data structures by tracking which objects have already been processed.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Create a WeakSet to track visited objects\nconst visited = new WeakSet();\n\n// Function to traverse an object recursively\nfunction traverse(obj) {\n  // Check if the object has already been visited\n  if (visited.has(obj)) {\n    return;\n  }\n\n  // Add the object to the visited set\n  visited.add(obj);\n\n  // Traverse the object's properties\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      let value = obj[prop];\n      if (typeof value === 'object' && value !== null) {\n        traverse(value);\n      }\n    }\n  }\n\n  // Process the object\n  console.log(obj);\n}\n\n// Create an object with a circular reference\nconst obj = {\n  name: 'John',\n  age: 30,\n  friends: [\n    { name: 'Alice', age: 25 },\n    { name: 'Bob', age: 28 },\n  ],\n};\n\n// Create a circular reference\nobj.self = obj;\n\n// Traverse the object\ntraverse(obj);\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\",children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" | MDN\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\",children:[(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" | MDN\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\",children:[(0,n.jsx)(e.code,{children:\"Set\"}),\" | MDN\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\",children:[(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" | MDN\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://javascript.info/map-set\",children:[(0,n.jsx)(e.code,{children:\"Map\"}),\" and \",(0,n.jsx)(e.code,{children:\"Set\"}),\" | Javascript.info\"]})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsxs)(e.a,{href:\"https://javascript.info/weakmap-weakset\",children:[(0,n.jsx)(e.code,{children:\"WeakMap\"}),\" and \",(0,n.jsx)(e.code,{children:\"WeakSet\"}),\" | Javascript.info\"]})}),`\n`]})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(s,r)})):s(r)}var j=w;return v(S);})();\n;return Component;"
}