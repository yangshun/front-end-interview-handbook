{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-concept-of-the-spread-operator-and-its-uses",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-concept-of-the-spread-operator-and-its-uses",
    "subtitle": null,
    "title": "Explain the concept of the spread operator and its uses",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-concept-of-the-spread-operator-and-its-uses/en-US.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var t=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var a in e)t(r,a,{get:e[a],enumerable:!0})},c=(r,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!b.call(r,o)&&o!==a&&t(r,o,{get:()=>e[o],enumerable:!(s=h(e,o))||s.enumerable});return r};var f=(r,e,a)=>(a=r!=null?u(m(r)):{},c(e||!r||!r.__esModule?t(a,\"default\",{value:r,enumerable:!0}):a,r)),x=r=>c(t({},\"__esModule\",{value:!0}),r);var l=j((T,i)=>{i.exports=_jsx_runtime});var O={};y(O,{default:()=>p,frontmatter:()=>v});var n=f(l()),v={title:\"Explain the concept of the spread operator and its uses\"};function d(r){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The spread operator (\",(0,n.jsx)(e.code,{children:\"...\"}),\") in JavaScript allows you to expand elements of an iterable (like an array or object) into individual elements. It is commonly used for copying arrays or objects, merging arrays or objects, and passing elements of an array as arguments to a function.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// Copying an array\nconst arr1 = [1, 2, 3];\nconst arr2 = [...arr1];\nconsole.log(arr2); // Output: [1, 2, 3]\n\n// Merging arrays\nconst arr3 = [4, 5, 6];\nconst mergedArray = [...arr1, ...arr3];\nconsole.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]\n\n// Copying an object\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1 };\nconsole.log(obj2); // Output: { a: 1, b: 2 }\n\n// Merging objects\nconst obj3 = { c: 3, d: 4 };\nconst mergedObject = { ...obj1, ...obj3 };\nconsole.log(mergedObject); // Output: { a: 1, b: 2, c: 3, d: 4 }\n\n// Passing array elements as function arguments\nconst sum = (x, y, z) => x + y + z;\nconst numbers = [1, 2, 3];\nconsole.log(sum(...numbers)); // Output: 6\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"The spread operator and its uses\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Copying arrays\"}),`\n`,(0,n.jsx)(e.p,{children:\"The spread operator can be used to create a shallow copy of an array. This is useful when you want to duplicate an array without affecting the original array.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr1 = [1, 2, 3];\nconst arr2 = [...arr1];\nconsole.log(arr2); // Output: [1, 2, 3]\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Merging arrays\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can use the spread operator to merge multiple arrays into one. This is a concise and readable way to combine arrays.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const arr1 = [1, 2, 3];\nconst arr3 = [4, 5, 6];\nconst mergedArray = [...arr1, ...arr3];\nconsole.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Copying objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"Similar to arrays, the spread operator can be used to create a shallow copy of an object. This is useful for duplicating objects without affecting the original object.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const obj1 = { a: 1, b: 2 };\nconst obj2 = { ...obj1 };\nconsole.log(obj2); // Output: { a: 1, b: 2 }\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Merging objects\"}),`\n`,(0,n.jsx)(e.p,{children:\"The spread operator can also be used to merge multiple objects into one. This is particularly useful for combining properties from different objects.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const obj1 = { a: 1, b: 2 };\nconst obj3 = { c: 3, d: 4 };\nconst mergedObject = { ...obj1, ...obj3 };\nconsole.log(mergedObject); // Output: { a: 1, b: 2, c: 3, d: 4 }\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Passing array elements as function arguments\"}),`\n`,(0,n.jsx)(e.p,{children:\"The spread operator allows you to pass elements of an array as individual arguments to a function. This is useful for functions that accept multiple arguments.\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const sum = (x, y, z) => x + y + z;\nconst numbers = [1, 2, 3];\nconsole.log(sum(...numbers)); // Output: 6\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\",children:\"MDN Web Docs: Spread syntax\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/rest-parameters-spread-operator#spread-operator\",children:\"JavaScript.info: Spread operator\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.freecodecamp.org/news/javascript-spread-operator-explained/\",children:\"FreeCodeCamp: JavaScript spread operator explained\"})}),`\n`]})]})}function p(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return x(O);})();\n;return Component;"
}