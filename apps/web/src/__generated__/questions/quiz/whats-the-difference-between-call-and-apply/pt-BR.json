{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [
      "atlassian"
    ],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/whats-the-difference-between-call-and-apply",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 100,
    "similarQuestions": [],
    "slug": "whats-the-difference-between-call-and-apply",
    "subtitle": null,
    "title": "Qual é a diferença entre `.call` e `.apply`?",
    "topics": [
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/whats-the-difference-between-call-and-apply/pt-BR.mdx"
  },
  "solution": "var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var i=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var r in e)c(a,r,{get:e[r],enumerable:!0})},l=(a,e,r,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of g(e))!x.call(a,n)&&n!==r&&c(a,n,{get:()=>e[n],enumerable:!(t=i(e,n))||t.enumerable});return a};var _=(a,e,r)=>(r=a!=null?u(h(a)):{},l(e||!a||!a.__esModule?c(r,\"default\",{value:a,enumerable:!0}):r,a)),j=a=>l(c({},\"__esModule\",{value:!0}),a);var s=f((M,d)=>{d.exports=_jsx_runtime});var v={};y(v,{default:()=>m,frontmatter:()=>b});var o=_(s()),b={title:\"Qual \\xE9 a diferen\\xE7a entre `.call` e `.apply`?\"};function p(a){let e={code:\"code\",p:\"p\",pre:\"pre\",...a.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\".call\"}),\" e \",(0,o.jsx)(e.code,{children:\".apply\"}),\" s\\xE3o usados para invocar fun\\xE7\\xF5es e o primeiro par\\xE2metro ser\\xE1 usado como o valor de \",(0,o.jsx)(e.code,{children:\"this\"}),\" dentro da fun\\xE7\\xE3o. No entanto, \",(0,o.jsx)(e.code,{children:\".call\"}),\" recebe argumentos separados por v\\xEDrgulas como os pr\\xF3ximos argumentos enquanto \",(0,o.jsx)(e.code,{children:\".apply\"}),\" recebe um array de argumentos como o pr\\xF3ximo argumento. Uma maneira f\\xE1cil de lembrar este \\xE9 C para \",(0,o.jsx)(e.code,{children:\"chamada\"}),\" e par\\xE2metros separados por v\\xEDrgulas e A para 'apply' e um array de argumentos.\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-js\",children:`function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add.call(null, 1, 2)); // 3\nconsole.log(add.apply(null, [1, 2])); // 3\n`})})]})}function m(a={}){let{wrapper:e}=a.components||{};return e?(0,o.jsx)(e,{...a,children:(0,o.jsx)(p,{...a})}):p(a)}return j(v);})();\n;return Component;"
}