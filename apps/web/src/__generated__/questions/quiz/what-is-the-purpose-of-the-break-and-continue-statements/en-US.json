{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "What is the purpose of the `break` and `continue` statements?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/what-is-the-purpose-of-the-break-and-continue-statements/en-US.mdx"
  },
  "solution": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!f.call(t,o)&&o!==i&&r(t,o,{get:()=>e[o],enumerable:!(a=p(e,o))||a.enumerable});return t};var k=(t,e,i)=>(i=t!=null?d(m(t)):{},c(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),x=t=>c(r({},\"__esModule\",{value:!0}),t);var s=b((T,l)=>{l.exports=_jsx_runtime});var D={};g(D,{default:()=>v,frontmatter:()=>w});var n=k(s()),w={title:\"What is the purpose of the `break` and `continue` statements?\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",hr:\"hr\",h3:\"h3\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"break\"}),\" statement is used to exit a loop or switch statement prematurely, while the \",(0,n.jsx)(e.code,{children:\"continue\"}),\" statement skips the current iteration of a loop and proceeds to the next iteration. For example, in a \",(0,n.jsx)(e.code,{children:\"for\"}),\" loop, \",(0,n.jsx)(e.code,{children:\"break\"}),\" will stop the loop entirely, and \",(0,n.jsx)(e.code,{children:\"continue\"}),\" will skip to the next iteration.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`for (let i = 0; i < 10; i++) {\n  if (i === 5) break; // exits the loop when i is 5\n  console.log(i);\n}\n\nfor (let i = 0; i < 10; i++) {\n  if (i === 5) continue; // skips the iteration when i is 5\n  console.log(i);\n}\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{children:[\"Purpose of the \",(0,n.jsx)(e.code,{children:\"break\"}),\" and \",(0,n.jsx)(e.code,{children:\"continue\"}),\" statements\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"break\"}),\" statement\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"break\"}),\" statement is used to exit a loop or a switch statement before it has completed all its iterations or cases. This is useful when you want to stop the execution of the loop or switch based on a certain condition.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example in a loop\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`for (let i = 0; i < 10; i++) {\n  if (i === 5) break; // exits the loop when i is 5\n  console.log(i);\n}\n// Output: 0 1 2 3 4\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Example in a switch statement\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`function printDayOfWeek(day) {\n  switch (day) {\n    case 1:\n      console.log('Monday');\n      break;\n    case 2:\n      console.log('Tuesday');\n      break;\n    // other cases\n    default:\n      console.log('Invalid day');\n  }\n}\nprintDayOfWeek(2); // Tuesday\nprintDayOfWeek('myDay'); // Invalid day\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"continue\"}),\" statement\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"continue\"}),\" statement is used to skip the current iteration of a loop and proceed to the next iteration. This is useful when you want to skip certain iterations based on a condition without exiting the loop entirely.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Example in a loop\"}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`for (let i = 0; i < 10; i++) {\n  if (i === 5) continue; // skips the iteration when i is 5\n  console.log(i);\n}\n// Output: 0 1 2 3 4 6 7 8 9\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Differences between \",(0,n.jsx)(e.code,{children:\"break\"}),\" and \",(0,n.jsx)(e.code,{children:\"continue\"})]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"break\"}),\" statement exits the loop or switch statement entirely.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"continue\"}),\" statement skips the current iteration and moves to the next iteration of the loop.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\",children:\"MDN Web Docs: break\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\",children:\"MDN Web Docs: continue\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\",children:\"JavaScript Loops\"})}),`\n`]})]})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var v=y;return x(D);})();\n;return Component;"
}