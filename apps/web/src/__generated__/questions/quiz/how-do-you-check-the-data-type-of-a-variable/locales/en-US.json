{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "How do you check the data type of a variable?",
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/how-do-you-check-the-data-type-of-a-variable/en-US.mdx"
  },
  "solution": "var Component=(()=>{var s=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var o in e)c(r,o,{get:e[o],enumerable:!0})},i=(r,e,o,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!y.call(r,l)&&l!==o&&c(r,l,{get:()=>e[l],enumerable:!(a=u(e,l))||a.enumerable});return r};var g=(r,e,o)=>(o=r!=null?s(f(r)):{},i(e||!r||!r.__esModule?c(o,\"default\",{value:r,enumerable:!0}):o,r)),N=r=>i(c({},\"__esModule\",{value:!0}),r);var d=b((D,t)=>{t.exports=_jsx_runtime});var S={};m(S,{default:()=>A,frontmatter:()=>v});var n=g(d()),v={title:\"How do you check the data type of a variable?\"};function h(r){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",hr:\"hr\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To check the data type of a variable in JavaScript, you can use the \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" operator. For example, \",(0,n.jsx)(e.code,{children:\"typeof variableName\"}),\" will return a string indicating the type of the variable, such as \",(0,n.jsx)(e.code,{children:'\"string\"'}),\", \",(0,n.jsx)(e.code,{children:'\"number\"'}),\", \",(0,n.jsx)(e.code,{children:'\"boolean\"'}),\", \",(0,n.jsx)(e.code,{children:'\"object\"'}),\", \",(0,n.jsx)(e.code,{children:'\"function\"'}),\", \",(0,n.jsx)(e.code,{children:'\"undefined\"'}),\", or \",(0,n.jsx)(e.code,{children:'\"symbol\"'}),\". For arrays and \",(0,n.jsx)(e.code,{children:\"null\"}),\", you can use \",(0,n.jsx)(e.code,{children:\"Array.isArray(variableName)\"}),\" and \",(0,n.jsx)(e.code,{children:\"variableName === null\"}),\", respectively.\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"How do you check the data type of a variable?\"}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Using the \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" operator\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" operator is the most common way to check the data type of a variable in JavaScript. It returns a string indicating the type of the operand.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let str = 'Hello, world!';\nconsole.log(typeof str); // \"string\"\n\nlet num = 42;\nconsole.log(typeof num); // \"number\"\n\nlet bool = true;\nconsole.log(typeof bool); // \"boolean\"\n\nlet obj = { name: 'Alice' };\nconsole.log(typeof obj); // \"object\"\n\nlet func = function () {};\nconsole.log(typeof func); // \"function\"\n\nlet undef;\nconsole.log(typeof undef); // \"undefined\"\n\nlet sym = Symbol();\nconsole.log(typeof sym); // \"symbol\"\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Checking for \",(0,n.jsx)(e.code,{children:\"null\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" operator returns \",(0,n.jsx)(e.code,{children:'\"object\"'}),\" for \",(0,n.jsx)(e.code,{children:\"null\"}),\", which can be misleading. To specifically check for \",(0,n.jsx)(e.code,{children:\"null\"}),\", you should use a strict equality comparison.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let n = null;\nconsole.log(n === null); // true\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Checking for arrays\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Arrays are a special type of object in JavaScript. To check if a variable is an array, you can use the \",(0,n.jsx)(e.code,{children:\"Array.isArray\"}),\" method.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let arr = [1, 2, 3];\nconsole.log(Array.isArray(arr)); // true\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Checking for \",(0,n.jsx)(e.code,{children:\"NaN\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"NaN\"}),\" (Not-a-Number) is a special numeric value in JavaScript. To check if a value is \",(0,n.jsx)(e.code,{children:\"NaN\"}),\", you can use the \",(0,n.jsx)(e.code,{children:\"Number.isNaN\"}),\" method.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let notANumber = NaN;\nconsole.log(Number.isNaN(notANumber)); // true\n`})}),`\n`,(0,n.jsxs)(e.h3,{children:[\"Checking for \",(0,n.jsx)(e.code,{children:\"null\"}),\" and \",(0,n.jsx)(e.code,{children:\"undefined\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To check if a variable is either \",(0,n.jsx)(e.code,{children:\"null\"}),\" or \",(0,n.jsx)(e.code,{children:\"undefined\"}),\", you can use a combination of the \",(0,n.jsx)(e.code,{children:\"==\"}),\" operator and the \",(0,n.jsx)(e.code,{children:\"typeof\"}),\" operator.\"]}),`\n`,(0,n.jsx)(e.pre,{live:!0,children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let value = null;\nconsole.log(value == null); // true\n\nlet value2;\nconsole.log(typeof value2 === 'undefined'); // true\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\",children:\"MDN Web Docs: typeof\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\",children:\"MDN Web Docs: Array.isArray\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\",children:\"MDN Web Docs: Number.isNaN\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\",children:\"MDN Web Docs: null\"})}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var A=j;return N(S);})();\n;return Component;"
}