{
  "description": null,
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [],
    "created": 1630800000,
    "difficulty": "easy",
    "duration": 5,
    "excerpt": null,
    "featured": false,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-the-different-states-of-a-promise",
    "importance": "low",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 999,
    "similarQuestions": [],
    "slug": "explain-the-different-states-of-a-promise",
    "subtitle": null,
    "title": "Explain the different states of a Promise",
    "topics": [
      "async",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-the-different-states-of-a-promise/en-US.mdx"
  },
  "solution": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var P=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var i in e)c(r,i,{get:e[i],enumerable:!0})},o=(r,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of f(e))!j.call(r,t)&&t!==i&&c(r,t,{get:()=>e[t],enumerable:!(s=m(e,t))||s.enumerable});return r};var v=(r,e,i)=>(i=r!=null?p(u(r)):{},o(e||!r||!r.__esModule?c(i,\"default\",{value:r,enumerable:!0}):i,r)),x=r=>o(c({},\"__esModule\",{value:!0}),r);var d=P((S,l)=>{l.exports=_jsx_runtime});var _={};g(_,{default:()=>a,frontmatter:()=>y});var n=v(d()),y={title:\"Explain the different states of a Promise\"};function h(r){let e={a:\"a\",code:\"code\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" in JavaScript can be in one of three states: \",(0,n.jsx)(e.code,{children:\"pending\"}),\", \",(0,n.jsx)(e.code,{children:\"fulfilled\"}),\", or \",(0,n.jsx)(e.code,{children:\"rejected\"}),\". When a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" is created, it starts in the \",(0,n.jsx)(e.code,{children:\"pending\"}),\" state. If the operation completes successfully, the \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" transitions to the \",(0,n.jsx)(e.code,{children:\"fulfilled\"}),\" state, and if it fails, it transitions to the \",(0,n.jsx)(e.code,{children:\"rejected\"}),\" state. Here's a quick example:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  // some asynchronous operation\n  if (success) {\n    resolve('Success!');\n  } else {\n    reject('Error!');\n  }\n});\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Different states of a Promise\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Pending\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"When a \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" is first created, it is in the \",(0,n.jsx)(e.code,{children:\"pending\"}),\" state. This means that the asynchronous operation has not yet completed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  // asynchronous operation\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Fulfilled\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" transitions to the \",(0,n.jsx)(e.code,{children:\"fulfilled\"}),\" state when the asynchronous operation completes successfully. The \",(0,n.jsx)(e.code,{children:\"resolve\"}),\" function is called to indicate this.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  resolve('Success!');\n});\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Rejected\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.code,{children:\"Promise\"}),\" transitions to the \",(0,n.jsx)(e.code,{children:\"rejected\"}),\" state when the asynchronous operation fails. The \",(0,n.jsx)(e.code,{children:\"reject\"}),\" function is called to indicate this.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`let promise = new Promise((resolve, reject) => {\n  reject('Error!');\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",children:\"MDN Web Docs: Promise\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/promise-basics\",children:\"JavaScript.info: Promises\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://promisesaplus.com/\",children:\"Promise/A+ Specification\"})}),`\n`]})]})}function a(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}return x(_);})();\n;return Component;"
}