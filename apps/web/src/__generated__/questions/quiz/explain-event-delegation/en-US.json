{
  "description": null,
  "info": {
    "excerpt": null,
    "title": "Explain event delegation in JavaScript"
  },
  "metadata": {
    "access": "free",
    "author": null,
    "companies": [
      "linkedin"
    ],
    "created": 1630800000,
    "difficulty": "medium",
    "duration": 5,
    "featured": true,
    "format": "quiz",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/quiz/explain-event-delegation",
    "importance": "high",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 50,
    "similarQuestions": [],
    "slug": "explain-event-delegation",
    "subtitle": null,
    "topics": [
      "web-api",
      "javascript"
    ],
    "gitHubEditUrl": "https://github.com/yangshun/top-javascript-interview-questions/blob/main/questions/explain-event-delegation/en-US.mdx"
  },
  "solution": "var Component=(()=>{var s=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},o=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of g(e))!v.call(t,l)&&l!==i&&a(t,l,{get:()=>e[l],enumerable:!(r=m(e,l))||r.enumerable});return t};var f=(t,e,i)=>(i=t!=null?s(u(t)):{},o(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>o(a({},\"__esModule\",{value:!0}),t);var d=p((D,c)=>{c.exports=_jsx_runtime});var x={};b(x,{default:()=>k,frontmatter:()=>w});var n=f(d()),w={title:\"Explain event delegation in JavaScript\"};function h(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\",hr:\"hr\",ol:\"ol\",pre:\"pre\",h3:\"h3\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsx)(e.p,{children:\"Event delegation is a technique in JavaScript where a single event listener is attached to a parent element instead of attaching event listeners to multiple child elements. When an event occurs on a child element, the event bubbles up the DOM tree, and the parent element's event listener handles the event based on the target element.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Event delegation provides the following benefits:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Improved performance\"}),\": Attaching a single event listener is more efficient than attaching multiple event listeners to individual elements, especially for large or dynamic lists. This reduces memory usage and improves overall performance.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Simplified event handling\"}),\": With event delegation, you only need to write the event handling logic once in the parent element's event listener. This makes the code more maintainable and easier to update.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic element support\"}),\": Event delegation automatically handles events for dynamically added or removed elements within the parent element. There's no need to manually attach or remove event listeners when the DOM structure changes\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"However, do note that:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"It is important to identify the target element that triggered the event.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Not all events can be delegated because they are not bubbled. Non-bubbling events include: \",(0,n.jsx)(e.code,{children:\"focus\"}),\", \",(0,n.jsx)(e.code,{children:\"blur\"}),\", \",(0,n.jsx)(e.code,{children:\"scroll\"}),\", \",(0,n.jsx)(e.code,{children:\"mouseenter\"}),\", \",(0,n.jsx)(e.code,{children:\"mouseleave\"}),\", \",(0,n.jsx)(e.code,{children:\"resize\"}),\", etc.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Event delegation\"}),`\n`,(0,n.jsx)(e.p,{children:\"Event delegation is a design pattern in JavaScript used to efficiently manage and handle events on multiple child elements by attaching a single event listener to a common ancestor element. This pattern is particularly valuable in scenarios where you have a large number of similar elements, such as list items, and want to optimize event handling.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"How event delegation works\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Attach a listener to a common ancestor\"}),\": Instead of attaching individual event listeners to each child element, you attach a single event listener to a common ancestor element higher in the DOM hierarchy.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Event bubbling\"}),\": When an event occurs on a child element, it bubbles up through the DOM tree to the common ancestor element. During this propagation, the event listener on the common ancestor can intercept and handle the event.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Determine the target\"}),\": Within the event listener, you can inspect the event object to identify the actual target of the event (the child element that triggered the event). You can use properties like \",(0,n.jsx)(e.code,{children:\"event.target\"}),\" or \",(0,n.jsx)(e.code,{children:\"event.currentTarget\"}),\" to determine which specific child element was interacted with.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Perform action based on target\"}),\": Based on the target element, you can perform the desired action or execute code specific to that element. This allows you to handle events for multiple child elements with a single event listener.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Benefits of event delegation\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Efficiency\"}),\": Event delegation reduces the number of event listeners, improving memory usage and performance, especially when dealing with a large number of elements.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Dynamic elements\"}),\": It works seamlessly with dynamically added or removed child elements, as the common ancestor continues to listen for events on them.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Example\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a simple example:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// HTML:\n// <ul id=\"item-list\">\n//   <li>Item 1</li>\n//   <li>Item 2</li>\n//   <li>Item 3</li>\n// </ul>\n\nconst itemList = document.getElementById('item-list');\n\nitemList.addEventListener('click', (event) => {\n  if (event.target.tagName === 'LI') {\n    console.log(\\`Clicked on \\${event.target.textContent}\\`);\n  }\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, a single click event listener is attached to the \",(0,n.jsx)(e.code,{children:\"<ul>\"}),\" element. When a click event occurs on an \",(0,n.jsx)(e.code,{children:\"<li>\"}),\" element, the event bubbles up to the \",(0,n.jsx)(e.code,{children:\"<ul>\"}),\" element, where the event listener checks the target's tag name to identify whether a list item was clicked. It's crucial to check the identity of the \",(0,n.jsx)(e.code,{children:\"event.target\"}),\" as there can be other kinds of elements in the DOM tree.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Use cases\"}),`\n`,(0,n.jsx)(e.p,{children:\"Event delegation is commonly used in scenarios like:\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Handling dynamic content in single-page applications\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// HTML:\n// <div id=\"button-container\">\n//   <button>Button 1</button>\n//   <button>Button 2</button>\n// </div>\n// <button id=\"add-button\">Add Button</button>\n\nconst buttonContainer = document.getElementById('button-container');\nconst addButton = document.getElementById('add-button');\n\nbuttonContainer.addEventListener('click', (event) => {\n  if (event.target.tagName === 'BUTTON') {\n    console.log(\\`Clicked on \\${event.target.textContent}\\`);\n  }\n});\n\naddButton.addEventListener('click', () => {\n  const newButton = document.createElement('button');\n  newButton.textContent = \\`Button \\${buttonContainer.children.length + 1}\\`;\n  buttonContainer.appendChild(newButton);\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, a \",(0,n.jsx)(e.code,{children:\"click\"}),\" event listener is attached to the \",(0,n.jsx)(e.code,{children:\"<div>\"}),\" container. When a new button is added dynamically and clicked, the event listener on the container handles the click event.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Simplifying code by avoiding the need to attach and remove event listeners for elements that change\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// HTML:\n// <form id=\"user-form\">\n//   <input type=\"text\" name=\"username\" placeholder=\"Username\">\n//   <input type=\"email\" name=\"email\" placeholder=\"Email\">\n//   <input type=\"password\" name=\"password\" placeholder=\"Password\">\n// </form>\n\nconst userForm = document.getElementById('user-form');\n\nuserForm.addEventListener('input', (event) => {\n  const { name, value } = event.target;\n  console.log(\\`Changed \\${name}: \\${value}\\`);\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this example, a single input event listener is attached to the form element. It can respond to input changes for all child input elements, simplifying the code by an event listeners per \",(0,n.jsx)(e.code,{children:\"<input>\"}),\" element.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Pitfalls\"}),`\n`,(0,n.jsx)(e.p,{children:\"Do note that event delegation come with certain pitfalls:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Incorrect target handling:\"}),\" Ensure correct identification of the event target to avoid unintended actions.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Not all events can be delegated/bubbled\"}),\": Not all events can be delegated because they are not bubbled. Non-bubbling events include: \",(0,n.jsx)(e.code,{children:\"focus\"}),\", \",(0,n.jsx)(e.code,{children:\"blur\"}),\", \",(0,n.jsx)(e.code,{children:\"scroll\"}),\", \",(0,n.jsx)(e.code,{children:\"mouseenter\"}),\", \",(0,n.jsx)(e.code,{children:\"mouseleave\"}),\", \",(0,n.jsx)(e.code,{children:\"resize\"}),\", etc.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Event overhead:\"}),\" While event delegation is generally more efficient, there needs to be complex logic written within the root event listener to identify the triggering element and respond appropriately. This can introduce overhead and can be potentially more complex if not managed properly.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Event delegation in JavaScript frameworks\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"https://react.dev/\",children:\"React\"}),\", event handlers are attached to the React root's DOM container into which the React tree is rendered. Even though \",(0,n.jsx)(e.code,{children:\"onClick\"}),\" is added to child elements, the actual event listeners are attached to the root DOM node, leveraging event delegation to optimize event handling and improve performance.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"When an event occurs, React's event listener captures it and determines which React component rendered the target element based on its internal bookkeeping. React then dispatches the event to the appropriate component's event handler by calling the handler function with a synthetic event object. This synthetic event object wraps the native browser event, providing a consistent interface across different browsers and capturing information about the event.\"}),`\n`,(0,n.jsx)(e.p,{children:\"By using event delegation, React avoids attaching individual event handlers to each component instance, which would create significant overhead, especially for large component trees. Instead, React leverages the browser's native event bubbling mechanism to capture events at the root and distribute them to the appropriate components.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_delegation\",children:\"MDN Web Docs on Event Delegation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://javascript.info/event-delegation\",children:\"JavaScript.info - Event Delegation\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://legacy.reactjs.org/blog/2020/08/10/react-v17-rc.html#changes-to-event-delegation\",children:\"React v17.0 Release Candidate: No New Features\"})}),`\n`]})]})}function E(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var k=E;return y(x);})();\n;return Component;"
}