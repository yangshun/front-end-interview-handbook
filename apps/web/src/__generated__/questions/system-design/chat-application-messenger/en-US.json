{
  "description": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var u=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var a in e)s(n,a,{get:e[a],enumerable:!0})},c=(n,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of d(e))!w.call(n,i)&&i!==a&&s(n,i,{get:()=>e[i],enumerable:!(r=m(e,i))||r.enumerable});return n};var f=(n,e,a)=>(a=n!=null?p(g(n)):{},c(e||!n||!n.__esModule?s(a,\"default\",{value:n,enumerable:!0}):a,n)),j=n=>c(s({},\"__esModule\",{value:!0}),n);var h=u((b,l)=>{l.exports=_jsx_runtime});var k={};x(k,{default:()=>D,frontmatter:()=>_});var t=f(h()),_={title:\"Chat App (e.g. Messenger)\",excerpt:\"Design a chat application like Messenger and Slack\"};function o(n){let e=Object.assign({h2:\"h2\",p:\"p\",img:\"img\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Question\"}),`\n`,(0,t.jsx)(e.p,{children:\"Design a chat application that allows users to send messages to each other.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/img/questions/chat-application-messenger/chat-application-example.png\",alt:\"Chat Application Example\"})}),`\n`,(0,t.jsx)(e.h3,{children:\"Real-life examples\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.messenger.com\",children:\"Messenger\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.whatsapp.com\",children:\"WhatsApp Web\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.slack.com\",children:\"Slack\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.discord.com\",children:\"Discord\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.telegram.org\",children:\"Telegram\"})}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(o,n)})):o(n)}var D=M;return j(k);})();\n;return Component;",
  "solution": "var Component=(()=>{var c=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),b=(i,e)=>{for(var t in e)a(i,t,{get:e[t],enumerable:!0})},o=(i,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!m.call(i,s)&&s!==t&&a(i,s,{get:()=>e[s],enumerable:!(r=g(e,s))||r.enumerable});return i};var v=(i,e,t)=>(t=i!=null?c(p(i)):{},o(e||!i||!i.__esModule?a(t,\"default\",{value:i,enumerable:!0}):t,i)),w=i=>o(a({},\"__esModule\",{value:!0}),i);var l=f((T,d)=>{d.exports=_jsx_runtime});var M={};b(M,{default:()=>S,tableOfContents:()=>y});var n=v(l()),y=[{depth:2,value:\"Requirements exploration\",id:\"requirements-exploration\",children:[{depth:3,value:\"What are the core functionalities needed?\",id:\"what-are-the-core-functionalities-needed\"},{depth:3,value:\"Is the message receiving real-time?\",id:\"is-the-message-receiving-real-time\"},{depth:3,value:\"What kind of message formats should be supported?\",id:\"what-kind-of-message-formats-should-be-supported\"},{depth:3,value:\"Does the application need to work offline?\",id:\"does-the-application-need-to-work-offline\"},{depth:3,value:\"Are there group conversations?\",id:\"are-there-group-conversations\"}]},{depth:2,value:\"Architecture / high-level design\",id:\"architecture--high-level-design\",children:[{depth:3,value:\"Tricky scenarios to be Handled\",id:\"tricky-scenarios-to-be-handled\"},{depth:3,value:\"Client-side database\",id:\"client-side-database\"},{depth:3,value:\"Data syncer\",id:\"data-syncer\",children:[{depth:4,value:\"Sending messages\",id:\"sending-messages\"},{depth:4,value:\"Receiving real-time updates\",id:\"receiving-real-time-updates\"}]},{depth:3,value:\"Server-side rendering or Client-side rendering?\",id:\"server-side-rendering-or-client-side-rendering\"},{depth:3,value:\"Architecture diagram\",id:\"architecture-diagram\",children:[{depth:4,value:\"Component responsibilities\",id:\"component-responsibilities\"}]}]},{depth:2,value:\"Data model\",id:\"data-model\",children:[{depth:3,value:\"Client-side database\",id:\"client-side-database-1\"},{depth:3,value:\"Client-only state\",id:\"client-only-state\"}]},{depth:2,value:\"Interface definition (API)\",id:\"interface-definition-api\",children:[{depth:3,value:\"Send message\",id:\"send-message\"},{depth:3,value:\"Sync outgoing messages\",id:\"sync-outgoing-messages\"},{depth:3,value:\"Server events\",id:\"server-events\",children:[{depth:4,value:\"message_sent event\",id:\"message_sent-event\"},{depth:4,value:\"message_delivered event\",id:\"message_delivered-event\"},{depth:4,value:\"message_failed event\",id:\"message_failed-event\"},{depth:4,value:\"incoming_message event\",id:\"incoming_message-event\"},{depth:4,value:\"sync event\",id:\"sync-event\"}]}]},{depth:2,value:\"Optimizations and deep dive\",id:\"optimizations-and-deep-dive\",children:[{depth:3,value:\"Client database\",id:\"client-database\",children:[{depth:4,value:\"Deciding on client-side storage\",id:\"deciding-on-client-side-storage\"},{depth:4,value:\"Syncing across tabs\",id:\"syncing-across-tabs\"},{depth:4,value:\"Syncing client database with the server\",id:\"syncing-client-database-with-the-server\"},{depth:4,value:\"Other issues\",id:\"other-issues\"}]},{depth:3,value:\"Real-time updates\",id:\"real-time-updates\"},{depth:3,value:\"Network\",id:\"network\"},{depth:3,value:\"Performance\",id:\"performance\"},{depth:3,value:\"Accessibility\",id:\"accessibility\"},{depth:3,value:\"Offline support\",id:\"offline-support\"},{depth:3,value:\"User experience\",id:\"user-experience\",children:[{depth:4,value:\"Maintaining scroll position\",id:\"maintaining-scroll-position\"},{depth:4,value:\"Other possible improvements\",id:\"other-possible-improvements\"}]},{depth:3,value:\"Gradient effect\",id:\"gradient-effect\"},{depth:3,value:\"Stale clients\",id:\"stale-clients\"},{depth:3,value:\"Advanced\",id:\"advanced\"}]},{depth:2,value:\"References\",id:\"references\"}];function h(i){let e=Object.assign({h2:\"h2\",h3:\"h3\",ul:\"ul\",li:\"li\",p:\"p\",hr:\"hr\",strong:\"strong\",h4:\"h4\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",em:\"em\",a:\"a\",img:\"img\",code:\"code\",ol:\"ol\",pre:\"pre\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"requirements-exploration\",children:\"Requirements exploration\"}),`\n`,(0,n.jsx)(e.h3,{id:\"what-are-the-core-functionalities-needed\",children:\"What are the core functionalities needed?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Sending a message to a user.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Receiving messages from a user.\"}),`\n`,(0,n.jsx)(e.li,{children:\"See one's chat history with a user.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"is-the-message-receiving-real-time\",children:\"Is the message receiving real-time?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Yes, users should receive messages in real-time, as fast as possible without having to refresh the page.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"what-kind-of-message-formats-should-be-supported\",children:\"What kind of message formats should be supported?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's support formats text which can contain emojis. We can discuss supporting images if there's time.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"does-the-application-need-to-work-offline\",children:\"Does the application need to work offline?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Yes, where possible. Outgoing messages should be stored and sent out when the application goes online and users should still be allowed to browse messages even if they are offline.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"are-there-group-conversations\",children:\"Are there group conversations?\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can assume it's a 1:1 messaging service.\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{id:\"architecture--high-level-design\",children:\"Architecture / high-level design\"}),`\n`,(0,n.jsx)(e.p,{children:\"The main difference between traditional applications vs chat applications that can be used offline is that if the application loses network connectivity, some functionality like browsing on-device messages and searching should ideally still work. This greatly influences the application architecture such and it will differ a great deal from conventional web applications.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"tricky-scenarios-to-be-handled\",children:\"Tricky scenarios to be Handled\"}),`\n`,(0,n.jsx)(e.p,{children:\"Firstly, let's be aware of the various tricky scenarios that we need to handle in a chat application and their implications.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Using the application on different tabs in the same browser.\"}),\" The user might do this because they want to chat with different people at once and rather switch between tabs than switch between conversations in the same tab.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Users should see the same messages for each conversation -> Rely on a storage that is accessible across different tabs in the same browser.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Using the application on different devices/browser.\"}),\" The same device, different browser case is rare, but it's not rare for users to be using multiple devices at once (work and personal device at the same time).\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"User should see the same messages for each conversation -> Sync with the server on initial load and get the most updated data.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Application goes offline during usage.\"}),\" User could have lost connectivity while on the move and passing through low connectivity areas (common occurrence in the subway).\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Outgoing messages have not been all fulfilled -> They should be retried when the application goes online again, or their statuses should be updated if they were written to the server but didn't receive the updates.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Messages are being sent while application is offline -> These messages should be sent out when the application next goes online. However, this should only be done for messages sent recently. If these messages were sent too long ago, the conversation might have already progressed past the topic (possibly using other devices) and it no longer makes sense to retry sending it.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"A combination of the above scenarios.\"}),\" Life just became a lot harder!\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Our chosen architecture should handle all these scenarios.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"client-side-database\",children:\"Client-side database\"}),`\n`,(0,n.jsx)(e.p,{children:\"One way to store data on the client is to use a client-side database (henceforth referred to as database). The UI reads data from the database as if it's a client-only application as opposed to traditional applications where the UI directly makes HTTP queries and displays the fetched data. The UI is not and should not be aware of where the database got its data from. Where the database gets its data from should be an implementation detail of the data layer.\"}),`\n`,(0,n.jsx)(e.p,{children:'Different tabs in the same browser access the same client-side database. This ensures consistent data between tabs and helps to solve the UI consistency issue in the \"using the application on different tabs in the same browser\" scenario. However, we have to take note of not inserting into the database twice when we are notified of a \"new message\" event.'}),`\n`,(0,n.jsx)(e.h3,{id:\"data-syncer\",children:\"Data syncer\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Data Syncer is a module that is in-charge of syncing the client database with the server.\"}),`\n`,(0,n.jsx)(e.h4,{id:\"sending-messages\",children:\"Sending messages\"}),`\n`,(0,n.jsx)(e.p,{children:\"When the user sends out a message (or any update made by the user in general), we want to reflect the changes immediately. It is poor user experience to wait for the server's confirmation before showing an updated UI.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Hence outgoing chat messages/user actions are first inserted into the database instead and they are marked as pending. Pending messages are also reflected immediately in the UI. Notice that messages in chat applications have indicators to indicate the various message delivery statuses.\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Message Status\"}),(0,n.jsx)(e.th,{children:\"Description\"}),(0,n.jsx)(e.th,{children:\"Messenger\"}),(0,n.jsx)(e.th,{children:\"WhatsApp\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Sending\"}),(0,n.jsx)(e.td,{children:\"Application is attempting to send the message\"}),(0,n.jsx)(e.td,{children:\"Empty circle\"}),(0,n.jsx)(e.td,{children:\"Clock icon\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Sent\"}),(0,n.jsx)(e.td,{children:\"Message was sent to the server successfully\"}),(0,n.jsx)(e.td,{children:\"Checkmark in outline circle\"}),(0,n.jsx)(e.td,{children:\"Single gray checkmark\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Delivered\"}),(0,n.jsx)(e.td,{children:\"Message delivered to the recipient\"}),(0,n.jsx)(e.td,{children:\"Checkmark in filled circle\"}),(0,n.jsx)(e.td,{children:\"Double gray checkmark\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Read\"}),(0,n.jsx)(e.td,{children:\"Recipient has read the message\"}),(0,n.jsx)(e.td,{children:\"Tiny version of user profile picture\"}),(0,n.jsx)(e.td,{children:\"Double blue checkmark (or ticks)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Failed\"}),(0,n.jsx)(e.td,{children:\"Message failed to send\"}),(0,n.jsx)(e.td,{children:\"Exclamation icon in circle\"}),(0,n.jsx)(e.td,{children:\"Exclamation icon in circle\"})]})]})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[\"Source: \",(0,n.jsx)(e.a,{href:\"https://www.facebook.com/help/messenger-app/926389207386625\",children:\"Messenger Help Center\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://faq.whatsapp.com/665923838265756/\",children:\"WhatsApp Help Center\"})]})}),`\n`,`\n`,(0,n.jsx)(e.p,{children:'You might have heard of the phrase \"she double blue ticked me\" to mean someone read the messages without replying. Now you know what the other message statuses are \\u{1F60E}.'}),`\n`,(0,n.jsx)(e.p,{children:'During database syncing, after the server has received and acknowledged the action, it sends back a response to the application and those messages can be marked as \"Sent\".'}),`\n`,(0,n.jsx)(e.p,{children:\"As there can be multiple messages being sent in parallel across different conversations (and in real applications, even more actions like reactions, deleting messages), there is a need for a scheduler to ensure that actions are sent to the server in the right order, request statuses are tracked, request failures are retried, etc.\"}),`\n`,(0,n.jsx)(e.h4,{id:\"receiving-real-time-updates\",children:\"Receiving real-time updates\"}),`\n`,(0,n.jsx)(e.p,{children:`Because we want to receive message updates in real-time, the application needs to be informed about new messages from the back end as soon as possible. We'll discuss a few ways of getting real-time updates in the \"Optimizations\" section.`}),`\n`,(0,n.jsx)(e.h3,{id:\"server-side-rendering-or-client-side-rendering\",children:\"Server-side rendering or Client-side rendering?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Chat applications have the following characteristics:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Highly interactive in nature due to high frequency of sending and receiving messages. The page will probably need a fair amount of JavaScript.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Messages can only be accessed when logged in.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Messages do not have to (and should not!) be indexed by search engines.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Fast initial loading speed is desired but not the most crucial.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Considering the above, a pure client-side rendering and single-page application overall architecture will work well. We can use server-side rendering (SSR) with client-side hydration like in \",(0,n.jsx)(e.a,{href:\"/questions/system-design/news-feed-facebook\",children:\"News Feed system design\"}),\" and \",(0,n.jsx)(e.a,{href:\"/questions/system-design/photo-sharing-instagram\",children:\"Photo Sharing application system design\"}),\" for a fast initial load but the benefits of SSR will only be limited to performance gains because chat applications don't need to be SEO-friendly. The additional engineering complexity of enabling SSR might not be worth it.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"architecture-diagram\",children:\"Architecture diagram\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/chat-application-messenger/chat-application-architecture.png\",alt:\"Chat Application Architecture\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"component-responsibilities\",children:\"Component responsibilities\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Chat UI\"}),\": Contains a list of conversations and the currently selected conversation/conversation\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Conversations List\"}),\": Presents a list of conversations (user, last message, last message timestamp).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Selected Conversation\"}),\": A list of messages in the conversation and a input box to type new messages.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Controller\"}),\": Controls the flow of data within the application. Fetches data from the database to show in the UI. Writes data to the database.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Data Syncer\"}),\": Module that contains the database and also manages the outgoing messages. Also receives updates from the server and updates the database accordingly.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Client-side Database\"}),\": Database to store all the data needed to be shown in the UI.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Message Scheduler\"}),\": Monitors the outgoing messages, schedules them for sending and manages their statuses.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Server\"}),\": Provides HTTP APIs and real-time APIs to fetch conversation and message data and to send new messages.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{id:\"data-model\",children:\"Data model\"}),`\n`,(0,n.jsx)(e.p,{children:\"To keep it simple, we will focus only on the chatting functionality of the application.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"client-side-database-1\",children:\"Client-side database\"}),`\n`,(0,n.jsx)(e.p,{children:\"Most of the data needed by the application will be stored in the client-side database. Any data that is needed for offline functionality should go into the database. Here's an entity-relationship diagram of the database tables.\"}),`\n`,(0,n.jsx)(\"img\",{alt:\"Chat Application Data Model\",className:\"mx-auto w-full max-w-5xl\",src:\"/img/questions/chat-application-messenger/chat-application-data-model.png\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Table/Entity\"}),(0,n.jsx)(e.th,{children:\"Sync to Server\"}),(0,n.jsx)(e.th,{children:\"Used by\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"Conversation\"})}),(0,n.jsx)(e.td,{children:\"Yes\"}),(0,n.jsx)(e.td,{children:\"Conversations List\"}),(0,n.jsx)(e.td,{children:\"Conversation between users (only two users for now)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"Message\"})}),(0,n.jsx)(e.td,{children:\"Yes\"}),(0,n.jsx)(e.td,{children:\"Conversation\"}),(0,n.jsxs)(e.td,{children:[\"Text message sent by user. \",(0,n.jsx)(e.code,{children:\"status\"}),\" is one of \",(0,n.jsx)(e.code,{children:\"sending\"}),\", \",(0,n.jsx)(e.code,{children:\"sent\"}),\", \",(0,n.jsx)(e.code,{children:\"delivered\"}),\", \",(0,n.jsx)(e.code,{children:\"read\"}),\", \",(0,n.jsx)(e.code,{children:\"failed\"})]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"User\"})}),(0,n.jsx)(e.td,{children:\"Yes\"}),(0,n.jsx)(e.td,{children:\"All\"}),(0,n.jsx)(e.td,{children:\"User identity\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"ConversationUser\"})}),(0,n.jsx)(e.td,{children:\"Yes\"}),(0,n.jsx)(e.td,{children:\"-\"}),(0,n.jsxs)(e.td,{children:[\"Associates users and conversations to allow a many-to-many relationship. A \",(0,n.jsx)(e.code,{children:\"Conversation\"}),\" only has maximum of two \",(0,n.jsx)(e.code,{children:\"User\"}),\"s for now but with this design it can support as many as required\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"DraftMessage\"})}),(0,n.jsx)(e.td,{children:\"No\"}),(0,n.jsx)(e.td,{children:\"Conversation\"}),(0,n.jsx)(e.td,{children:\"Store half-written, unsent messages\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"SendMessageRequest\"})}),(0,n.jsx)(e.td,{children:\"No\"}),(0,n.jsx)(e.td,{children:\"Message Scheduler\"}),(0,n.jsx)(e.td,{children:\"Tracks the status of messages to be sent\"})]})]})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that the \",(0,n.jsx)(e.code,{children:\"DraftMessage\"}),\" and \",(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\" tables are not synced to the server and are client-side only. However, they should still be in the database rather than be client-only state as they should be persisted across sessions.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"DraftMessage\"}),\": This table stores messages the user has typed in a conversation's message input box but hasn't sent. This has to be persisted into the database (as opposed to client-only state) so that if the user quits the application and opens it again, they don't lose their unsent message. Each conversation can have a maximum of one \",(0,n.jsx)(e.code,{children:\"DraftMessage\"}),\" per user.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Note that draft messages aren't synced with the server, so it stays within the current device. It's totally doable to sync draft messages with the server so that they are accessible across all devices, but that's a product decision and we won't explore this now for the sake of focusing on the core use cases.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\": This table stores data related to each message that the user has sent but hasn't been acknowledged by the server. \",(0,n.jsx)(e.code,{children:\"status\"}),\" is an enum and can be one of the following:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"pending\"}),\": The default state of new messages to be sent.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"in_flight\"}),\": The application has sent the message to the server but hasn't received a response.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fail\"}),\": When the server returns an error or the send request has timed out. We keep track of the number of times it has failed in \",(0,n.jsx)(e.code,{children:\"fail_count\"}),\" so that we know whether to keep retrying (with exponential backoff) or stop retrying after a certain number of failures.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"success\"}),\": Indicates that the message has been received and acknowledged by the server. Strictly speaking, this enum value is not needed because when the client receives the server acknowledgement, this row can be removed from the table.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"client-only-state\",children:\"Client-only state\"}),`\n`,(0,n.jsx)(e.p,{children:\"These are state fields that do not need to be persisted in the database, i.e. it's ok to lose this data if the user exits the application by closing the browser tab/window.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Selected conversation\"}),\": The currently selected conversation.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Conversation scroll position\"}),\": Scroll position within each conversation. It's useful to restore the scroll position whenever the user switches between conversations.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Conversation outgoing message\"}),\": This is whatever the user is typing in a specific conversation. It is almost the same as the \",(0,n.jsx)(e.code,{children:\"DraftMessage\"}),\" except we shouldn't save into the database on every keystroke. We only persist to the \",(0,n.jsx)(e.code,{children:\"DraftMessage\"}),\" table after the user has stopped typing (via blur/debounce) or throttle to save the value to the database after every X ms.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{id:\"interface-definition-api\",children:\"Interface definition (API)\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following APIs are needed:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Send message\"}),`\n`,(0,n.jsx)(e.li,{children:\"Sync outgoing messages\"}),`\n`,(0,n.jsx)(e.li,{children:\"Server events\"}),`\n`,(0,n.jsx)(e.li,{children:\"Fetch conversations\"}),`\n`,(0,n.jsx)(e.li,{children:\"Fetch conversation messages\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"send-message\",children:\"Send message\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add a row to the \",(0,n.jsx)(e.code,{children:\"Message\"}),\" table with a \",(0,n.jsx)(e.code,{children:\"sending\"}),\" status.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Add a row the \",(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\" table with \",(0,n.jsx)(e.code,{children:\"pending\"}),\" status.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Conversation UI reads from the \",(0,n.jsx)(e.code,{children:\"Message\"}),' table and shows the new message with a \"Sending\" indicator.']}),`\n`,(0,n.jsxs)(e.li,{children:[\"Any \",(0,n.jsx)(e.code,{children:\"DraftMessage\"}),\" rows for the current conversation/conversation are deleted.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"At this point, there are no synchronous steps left to be done. The Message Scheduler will be in-charge of syncing the \",(0,n.jsx)(e.code,{children:\"pending\"}),\" messages with the server.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"sync-outgoing-messages\",children:\"Sync outgoing messages\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The Message Scheduler will be in-charge of syncing outgoing messages with the server. It will maintain its own task queue and watch the \",(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\" table. Because the task queue needs to be in-sync across tabs, it should not be stored in browser memory and can also use another table.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Whenever the table is not empty, it will fetch the first X rows (ordered by id) and try to process them by adding tasks to its own task queue. X is a configurable value. Depending on the row's \",(0,n.jsx)(e.code,{children:\"status\"}),\" column:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"pending\"}),\": Enqueue a task to send the message to the server via the real-time channel. Update the row's \",(0,n.jsx)(e.code,{children:\"status\"}),\" to be \",(0,n.jsx)(e.code,{children:\"in_flight\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"in_flight\"}),\": Check the \",(0,n.jsx)(e.code,{children:\"last_sent_at\"}),\" timestamp. If it has exceeded the timeout threshold, update the row's \",(0,n.jsx)(e.code,{children:\"status\"}),\" to be \",(0,n.jsx)(e.code,{children:\"fail\"}),\" and update the \",(0,n.jsx)(e.code,{children:\"fail_count\"}),\" by 1.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fail\"}),\": Enqueue a task to retry sending this message sometime in the future. The delay duration depends on the \",(0,n.jsx)(e.code,{children:\"fail_count\"}),\". With an exponential backoff retry strategy, the delay duration will increase exponentially with the \",(0,n.jsx)(e.code,{children:\"fail_count\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"server-events\",children:\"Server events\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Data Syncer will receive real-time updates from the server in the form of events. Each event can have a type and a payload field. The shape of the payload depends on the actual event.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`// Example event payload pushed from the server.\n{\n  \"event_name\": \"incoming_message\",\n  \"payload\": {\n    \"foo\": \"value_a\",\n    \"bar\": \"value_b\"\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"These are the various events necessary:\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"message_sent-event\",children:[(0,n.jsx)(e.code,{children:\"message_sent\"}),\" event\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Update the \",(0,n.jsx)(e.code,{children:\"Message\"}),\"'s \",(0,n.jsx)(e.code,{children:\"status\"}),\" to be \",(0,n.jsx)(e.code,{children:\"sent\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Clean up this message in the Message Scheduler:\",`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Remove the row corresponding to this message in the \",(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\" table. This message has been received by the server and is no longer \",(0,n.jsx)(e.code,{children:\"pending\"}),\" or \",(0,n.jsx)(e.code,{children:\"in_flight\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Remove any tasks in the task queue that are related to this message.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Update UI\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Notify the Conversation UI to be updated if that message's conversation is currently shown.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"message_delivered-event\",children:[(0,n.jsx)(e.code,{children:\"message_delivered\"}),\" event\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Update the \",(0,n.jsx)(e.code,{children:\"Message\"}),\"'s \",(0,n.jsx)(e.code,{children:\"status\"}),\" to be \",(0,n.jsx)(e.code,{children:\"delivered\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Update UI\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Notify the Conversation UI to be updated if that message's conversation is currently shown.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"message_failed-event\",children:[(0,n.jsx)(e.code,{children:\"message_failed\"}),\" event\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Update the row corresponding to this message in the \",(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\" table's and change the \",(0,n.jsx)(e.code,{children:\"status\"}),\" to be \",(0,n.jsx)(e.code,{children:\"fail\"}),\" and increment \",(0,n.jsx)(e.code,{children:\"fail_count\"}),\" by 1.\",`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Note that we don't modify the \",(0,n.jsx)(e.code,{children:\"status\"}),\" of the row in the \",(0,n.jsx)(e.code,{children:\"Message\"}),\" table to be \",(0,n.jsx)(e.code,{children:\"fail\"}),\" yet. The message is not deemed to be failed yet until we have retried sending it.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Update UI\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Notify the Conversation UI to be updated if that message's conversation is currently shown.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"incoming_message-event\",children:[(0,n.jsx)(e.code,{children:\"incoming_message\"}),\" event\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Append the new message into the \",(0,n.jsx)(e.code,{children:\"Message\"}),\" table.\",`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Create a new row in the \",(0,n.jsx)(e.code,{children:\"Conversation\"}),\" table if it doesn't exist.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Create a new row for the message's sender into the \",(0,n.jsx)(e.code,{children:\"User\"}),\" table if it doesn't already exist.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Update UI\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Notify the Conversations List UI to be updated. Update the UI to surface this conversation to the top. If the Conversations List is sorted by decreasing timestamp of each conversation's latest message, it will be automatically surfaced to the top.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Notify the Conversation UI to be updated if that message's conversation is currently shown.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"sync-event\",children:[(0,n.jsx)(e.code,{children:\"sync\"}),\" event\"]}),`\n`,`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Work in progress.\"}),\" This event is triggered when a client first connects to the server. When clients first connect to the server, they might be lagging behind in terms of the data it contains The goal here is to get each client up-to-date with the latest server state by the server sending down all data that is missing on the client.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Possible ways of indicating the client state to the server:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Client's last update timestamp\"}),\": The server will gather all the new entities (messages, conversations) created after the timestamp and send to the client for the client to insert into the db.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Each conversation's cursor\"}),\": A database cursor is a mechanism that enables traversal over records in a database. Similar to the cursor-based pagination APIs, a cursor can be used to indicate the last message in the conversation that the client received, and what messages are after the message.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"optimizations-and-deep-dive\",children:\"Optimizations and deep dive\"}),`\n`,(0,n.jsx)(e.h3,{id:\"client-database\",children:\"Client database\"}),`\n`,(0,n.jsx)(e.h4,{id:\"deciding-on-client-side-storage\",children:\"Deciding on client-side storage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"There are a few ways of storing data on the client: Cookies, Web Storage, and IndexedDB. Refer to the quiz question for a \",(0,n.jsx)(e.a,{href:\"/questions/quiz/describe-the-difference-between-a-cookie-sessionstorage-and-localstorage\",children:\"comparison between cookies and Web Storage mechanisms\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Cookies is out of the question due to the extremely small capacity (4kb per domain). \",(0,n.jsx)(e.code,{children:\"localStorage\"}),\" (one of the Web Storages) is not well-suited because it doesn't support structured data, which is essential for non-trivial applications like chat.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\",children:\"IndexedDB\"}),\" is our best choice here, which is a low-level API for client-side storage of significant amounts of \",(0,n.jsx)(e.strong,{children:\"structured data\"}),\", including files/blobs. Other useful features include database indexes, tables, cursors, transactions, mostly over asynchronous APIs.\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"syncing-across-tabs\",children:\"Syncing across tabs\"}),`\n`,(0,n.jsx)(e.p,{children:'Since IndexedDB is a client-side storage mechanism, the data is accessible across tabs and it solves the \"users should see the same messages in the application on different tabs in the same browser.\" scenario outlined at the top.'}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, browsers tabs are not aware of \",(0,n.jsx)(e.code,{children:\"IndexedDB\"}),\" data changes in other tabs. To inform the other tabs about changes in the database, use the \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\",children:(0,n.jsx)(e.code,{children:\"BroadcastChannel\"})}),\" which allows communication between different windows/tabs/frames of the same origin.\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"syncing-client-database-with-the-server\",children:\"Syncing client database with the server\"}),`\n`,(0,n.jsx)(e.p,{children:\"Bidirectional syncing of messages between the client and server is complex.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Out-of-order messages\"}),\": There is no guarantee that messages are received in the order they are sent. Should out-of-order messages be inserted in between existing messages according to timestamp or should they always be appended at the bottom of the conversation?\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Fetching new messages\"}),\": The client needs to tell the server when the last update was (could be the last message received, or the timestamp it last pulled from the server) and the server figures out what messages have not been sent to the client and send them.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sending out pending messages\"}),\": Messages sent while the application is offline should be stored in a pending outgoing messages queue and sent out when the application goes online.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"other-issues\",children:\"Other issues\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Unsupported environments like private/incognito mode on Firefox and Safari.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Storage limits.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Errors initializing/opening the database.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"IndexedDB comes with a number of \",(0,n.jsx)(e.a,{href:\"https://gist.github.com/pesterhazy/4de96193af89a6dd5ce682ce2adff49a\",children:\"problems, bugs and oddities\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://web.dev/indexeddb-best-practices/\",children:\"Best Practices for Using IndexedDB\"})}),`\n`]}),`\n`,`\n`,(0,n.jsx)(e.h3,{id:\"real-time-updates\",children:\"Real-time updates\"}),`\n`,(0,n.jsx)(e.p,{children:\"Real-time messaging means that recipients of the messages receive new messages instantly (or near instantly) without them having to reboot the application/refresh the page or manually trigger a button to fetch new messages.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The few ways of implementing real-time messaging:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Short Polling (or Regular Polling)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Long Polling\"}),`\n`,(0,n.jsx)(e.li,{children:\"Web Sockets\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"In Progress\"}),\": Evaluate the pros and cons of each real-time mechanism. Web Sockets is the modern choice and the mechanism used by most chat apps.\"]}),`\n`,`\n`,(0,n.jsxs)(e.p,{children:[\"Reference: \",(0,n.jsx)(e.a,{href:\"https://ably.com/blog/websockets-vs-long-polling\",children:\"WebSockets vs Long Polling\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"network\",children:\"Network\"}),`\n`,(0,n.jsx)(e.p,{children:\"Connection failure is extremely common as users could be using chat applications while on transport and going in and out of poor connectivity areas. Messages could fail to send out, along with other issues:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Offline Usage\"}),\": The application should detect if the device is offline and not attempt to send messages if so. The messages should be added to the \",(0,n.jsx)(e.code,{children:\"SendMessageRequest\"}),\"s table.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Failures\"}),\": Failed outgoing messages should be retried using exponential backoff.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Display an error message if after X number of retries the messages weren't successfully delivered.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Batching\"}),\": Outgoing messages could be batched and sent as a single message if messages are sent in quick succession (within a few seconds). The application can detect if the user is still typing after their last sent message and perhaps wait for the next message to be completed before making the request (similar to debouncing). This batching logic is best implemented within the Message Scheduler.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Out-of-order\"}),\": If we send each messages in a separate request, there is no guarantee that the messages reaches the server in the order they were being sent from the client. However, sequentially sending messages is also less than ideal. Batching helps to mitigate this problem by sending multiple messages in one payload but also maintaining the order.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Disconnection\"}),\": App should automatically attempt reconnection after a disconnection without the user having to refresh the page.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"performance\",children:\"Performance\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Lazy load components that aren't needed for initial load (e.g. emoji picker, any popovers/modals).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Leverage windowing/virtualization for long list of messages within a conversation.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,n.jsx)(e.p,{children:\"Implement basic keyboard shortcuts:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Message composer\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Enter to send a message.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Shift + Enter to add new lines within a message.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Between conversations\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Shortcut to focus on the search bar.\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Ctrl\"}),\"/\",(0,n.jsx)(\"kbd\",{children:\"Cmd\"}),\" + \",(0,n.jsx)(\"kbd\",{children:\"Up\"}),\"/\",(0,n.jsx)(\"kbd\",{children:\"Down\"}),` to traverse between\nconversations.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"On certain desktop clients, \",(0,n.jsx)(\"kbd\",{children:\"Ctrl\"}),\"/\",(0,n.jsx)(\"kbd\",{children:\"Cmd\"}),\" + number brings you to the n\",(0,n.jsx)(\"sup\",{children:\"th\"}),\" conversation in your list of conversation.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"offline-support\",children:\"Offline support\"}),`\n`,(0,n.jsx)(e.p,{children:\"The application can be built as a Progressive Web Application (PWA) which uses service workers to cache assets (HTML/JS/CSS) so that the application has both the code and data required to be used offline.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Using PWAs also allow for browser notifications which is useful for informing the user that there's a new message even when the tab is not in focus/visible.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"user-experience\",children:\"User experience\"}),`\n`,(0,n.jsx)(e.h4,{id:\"maintaining-scroll-position\",children:\"Maintaining scroll position\"}),`\n`,(0,n.jsx)(e.p,{children:\"Scroll position is a tricky issue to deal with in messaging apps due to the possibility of new messages being added to the list above and below.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Scroll position should be:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Kept to the bottom of the message list when new messages come in and the scroll position is already at the bottom of the list. This is the default scenario for most situations.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Maintained when the scroll position is not at the bottom such that the currently visible contents are still visible. Scrolling up to read the older chat messages scroll position should be maintained and current visible elements should not move even though more DOM elements will be added to the top. The application can calculate the current scroll offset, the height of the new elements to be appended, and modify the scroll height to add in the new elements height.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The following are events that can change potentially change the (scroll/client) height:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"New messages inserted below (when receiving new messages).\"}),`\n`,(0,n.jsx)(e.li,{children:\"New messages inserted above (when searching for history).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Window resizing.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Media loading completely that has a different height from the loading placeholder.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Avoid this issue by using a fixed height placeholder and rendering the media within that element.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Page zoom changes.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The scroll positions should be maintained (either at the bottom or showing the same contents) depending on the scenarios listed above.\"}),`\n`,(0,n.jsx)(e.h4,{id:\"other-possible-improvements\",children:\"Other possible improvements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Add a \"Scroll to Bottom\" button that's visible when the user has scrolled upwards within the conversation messages.`}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"gradient-effect\",children:\"Gradient effect\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This article by CSS Trick shows you various approaches for implementing \",(0,n.jsx)(e.a,{href:\"https://css-tricks.com/recreating-the-facebook-messenger-gradient-effect-with-css/\",children:\"Messenger's chat message gradient background\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"stale-clients\",children:\"Stale clients\"}),`\n`,(0,n.jsx)(e.p,{children:\"For extremely stale clients, they will have to download the entire list of absent messages since the last sync which can be huge. This leads to a significant delay between starting up the application and being able to use it. Few will enjoy the process of waiting for tens of thousands of messages to be fetched and inserted into the client database before they can use the app.\"}),`\n`,(0,n.jsx)(e.p,{children:\"A plausible approach is to treat it as a fresh load/existing data in the database as non-existent and do a complete sync with the server, only fetching the latest N messages of the latest M conversations.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"advanced\",children:\"Advanced\"}),`\n`,(0,n.jsx)(e.p,{children:\"These features won't be discussed in this solution but if time permits you might want to discuss them with your interviewer.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Searching (Use a hybrid of both online and offline search)\"}),`\n`,(0,n.jsx)(e.li,{children:\"i18n\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"End-to-end encryption\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=-IXJ7Q01gpY\",children:\"Challenges of E2E Encryption in Facebook Messenger\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Delivery/read receipts\"}),`\n`,(0,n.jsx)(e.li,{children:\"Offline/optimistic reads\"}),`\n`,(0,n.jsx)(e.li,{children:\"Reactions\"}),`\n`,(0,n.jsx)(e.li,{children:\"Typing indicator\"}),`\n`,(0,n.jsx)(e.li,{children:\"Disappearing messages\"}),`\n`,(0,n.jsx)(e.li,{children:\"Notifications\"}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Facebook & Messenger\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://engineering.fb.com/2022/07/26/web/launching-instagram-messaging-on-desktop/\",children:\"Launching Instagram Messaging on desktop\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.facebook.com/notes/10158791547142200/\",children:\"Building Facebook Messenger\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://intuitiveexplanations.com/tech/messenger\",children:\"Reverse engineering the Facebook Messenger API\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://softwareengineeringdaily.com/2020/03/31/facebook-messenger-engineering-with-mohsen-agsen/\",children:\"Facebook Messenger Engineering with Mohsen Agsen\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=ulVLD2yzCrc\",children:\"F8 2019: Facebook: Lighter, Faster, Simpler Messenger\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=ODkEWsO5I30\",children:\"Building Real Time Infrastructure at Facebook - Facebook - SRECon2017\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=F7UWvflUZoc\",children:\"Facebook Messenger RTC \\u2013 The Challenges and Opportunities of Scale\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://engineering.fb.com/2014/10/09/production-engineering/building-mobile-first-infrastructure-for-messenger/\",children:\"Building Mobile-First Infrastructure for Messenger\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=eADBCKKf8PA\",children:\"MySQL for Message - @Scale 2014 - Data\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://engineering.fb.com/2020/03/02/data-infrastructure/messenger/\",children:\"Project LightSpeed: Rewriting the Messenger codebase for a faster, smaller, and simpler messaging app\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Slack\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/managing-focus-transitions-in-slack/\",children:\"Managing Focus Transitions in Slack\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/gantry-slacks-fast-booting-frontend-framework/\",children:\"Gantry: Slack\\u2019s Fast-booting Frontend Framework\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/making-slack-faster-by-being-lazy/\",children:\"Making Slack Faster By Being Lazy\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/making-slack-faster-by-being-lazy-part-2/\",children:\"Making Slack Faster By Being Lazy: Part 2\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/getting-to-slack-faster-with-incremental-boot/\",children:\"Getting to Slack faster with incremental boot\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/service-workers-at-slack-our-quest-for-faster-boot-times-and-offline-support/\",children:\"Service Workers at Slack: Our Quest for Faster Boot Times and Offline Support\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://slack.engineering/localizing-slack/\",children:\"Localizing Slack\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Airbnb\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://medium.com/airbnb-engineering/messaging-sync-scaling-mobile-messaging-at-airbnb-659142036f06\",children:\"Messaging Sync \\u2014 Scaling Mobile Messaging at Airbnb\"})}),`\n`]}),`\n`]}),`\n`]})]})}function k(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(h,i)})):h(i)}var S=k;return w(M);})();\n;return Component;",
  "info": {
    "excerpt": "Design a chat application like Messenger and Slack",
    "title": "Chat App (e.g. Messenger)"
  },
  "metadata": {
    "access": "premium",
    "author": null,
    "companies": [
      "openai"
    ],
    "created": 1668211200,
    "difficulty": "hard",
    "duration": 30,
    "featured": false,
    "format": "system-design",
    "frameworkDefault": null,
    "frameworks": [],
    "href": "/questions/system-design/chat-application-messenger",
    "importance": "medium",
    "languages": [],
    "nextQuestions": [],
    "published": true,
    "ranking": 9,
    "similarQuestions": [],
    "slug": "chat-application-messenger",
    "subtitle": null,
    "topics": [
      "networking"
    ]
  }
}