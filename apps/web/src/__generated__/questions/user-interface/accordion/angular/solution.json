{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/accordion/accordion.component.css": {
      "code": ""
    },
    "/src/app/accordion/accordion.component.html": {
      "code": "<div class=\"wrapper\">\n  <div class=\"accordion\">\n    <div\n      *ngFor=\"let section of sections\"\n      class=\"accordion-item\">\n      <button\n        class=\"accordion-item-title\"\n        type=\"button\"\n        (click)=\"toggleSection(section.value)\">\n        {{ section.title }}\n        <span\n          aria-hidden=\"true\"\n          [ngClass]=\"{\n            'accordion-icon': true,\n            'accordion-icon--rotated': isOpen(section.value)\n          }\">\n        </span>\n      </button>\n      <div\n        class=\"accordion-item-contents\"\n        [hidden]=\"!isOpen(section.value)\">\n        {{ section.contents }}\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    "/src/app/accordion/accordion.component.ts": {
      "code": "import { Component, Input } from '@angular/core';\nimport { Section } from '../app.component';\n\n@Component({\n  selector: 'app-accordion',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.css'],\n})\nexport class AccordionComponent {\n  @Input()\n  sections!: Section[];\n\n  openSections = new Set<string>();\n\n  isOpen(value: string): boolean {\n    return this.openSections.has(value);\n  }\n\n  toggleSection(value: string): void {\n    if (this.openSections.has(value)) {\n      this.openSections.delete(value);\n    } else {\n      this.openSections.add(value);\n    }\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<app-accordion [sections]=\"sections\" />\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\nexport interface Section {\n  value: string;\n  title: string;\n  contents: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  sections: Section[] = [\n    {\n      value: 'html',\n      title: 'HTML',\n      contents:\n        'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n    },\n    {\n      value: 'css',\n      title: 'CSS',\n      contents:\n        'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n    },\n    {\n      value: 'javascript',\n      title: 'JavaScript',\n      contents:\n        'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n    },\n  ];\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { AccordionComponent } from './accordion/accordion.component';\n\n@NgModule({\n  declarations: [AppComponent, AccordionComponent],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.accordion {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.accordion-item {\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n  padding: 4px 0;\n}\n\n.accordion-item:not(:first-child) {\n  border-top: 1px solid #eee;\n}\n\n.accordion-item-title {\n  align-items: center;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 4px;\n  justify-content: space-between;\n  text-align: start;\n  display: flex;\n}\n\n.accordion-item-title:hover {\n  background-color: #eee;\n}\n\n.accordion-icon {\n  border: solid currentcolor;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  height: 8px;\n  pointer-events: none;\n  transform: translateY(-2px) rotate(45deg);\n  width: 8px;\n}\n\n.accordion-icon--rotated {\n  transform: translateY(2px) rotate(-135deg);\n}\n\n.accordion-item-contents {\n  font-size: 14px;\n  line-height: 1.2em;\n  padding: 4px;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var _=Object.create;var a=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),C=(n,e)=>{for(var c in e)a(n,c,{get:e[c],enumerable:!0})},u=(n,e,c,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of I(e))!M.call(n,r)&&r!==c&&a(n,r,{get:()=>e[r],enumerable:!(h=A(e,r))||h.enumerable});return n};var d=(n,e,c)=>(c=n!=null?_(y(n)):{},u(e||!n||!n.__esModule?a(c,\"default\",{value:n,enumerable:!0}):c,n)),k=n=>u(a({},\"__esModule\",{value:!0}),n);var l=v((q,m)=>{m.exports=_jsx_runtime});var S={};C(S,{default:()=>O});var s=d(l());var i=d(l());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"All the provided sections should be displayed.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on a collapsed section's title should expand it.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on an expanded section's title should collapse it.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test that all sections are allowed to expand and collapse independently.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test that you are able to initialize multiple instances of the component, each with independent states.\"}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(p,n)})):p(n)}var f=D;var o=d(l());function x(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Interactive elements need to be focusable, so we'll use a \",(0,o.jsx)(e.code,{children:\"<button>\"}),\" for the title.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion\",children:\"ARIA Authoring Practices Guide for Accordion\"}),\" has a long list of guidelines for the ARIA roles, states, and properties to add to the various elements of an accordion. \",(0,o.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\" and \",(0,o.jsx)(e.a,{href:\"/questions/user-interface/accordion-iii\",children:\"Accordion III\"}),\" will focus on improving the accessibility of the Accordion component.\"]})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(x,n)})):x(n)}var w=F;var t=d(l());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Implementing a basic (not fully accessible) Accordion component using UI frameworks is quite simple due to the fact that only one state value is needed, the expanded/collapsed states of each section. UI frameworks also help to keep the state and the UI in sync, which we'd have to implement on our own if we were to use in Vanilla JavaScript.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Props (API Design)\"}),`\n`,(0,t.jsx)(e.p,{children:\"Part of the complexity of building a component is designing the API for it. In the case of a component-based framework, this would be the properties of the component. At the bare minimum, we will need the following props/attributes:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"sections\"}),\": A list of item objects. Each item is an object with the fields:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"value\"}),\": A unique identifier for the accordion item.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"title\"}),\": The text label to show in the accordion title.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"contents\"}),\": The contents to show when the section is expanded.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can use ES6 \",(0,t.jsx)(e.code,{children:\"Set\"}),\" to keep track of the sections which are expanded. When the section title is clicked, check if the section's value is within the set. The value will be removed from the set if it's inside and added it into the set otherwise.\"]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var j=T;function b(n){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(j,{}),`\n`,(0,s.jsx)(f,{}),`\n`,(0,s.jsx)(w,{})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(b,n)})):b(n)}var O=X;return k(S);})();\n;return Component;"
}