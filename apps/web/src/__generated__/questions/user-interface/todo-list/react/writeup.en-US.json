{
  "skeleton": "var Component=(()=>{var f=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!b.call(t,o)&&o!==i&&s(t,o,{get:()=>e[o],enumerable:!(c=g(e,o))||c.enumerable});return t};var d=(t,e,i)=>(i=t!=null?f(y(t)):{},a(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),_=t=>a(s({},\"__esModule\",{value:!0}),t);var l=j((v,u)=>{u.exports=_jsx_runtime});var D={};w(D,{default:()=>M});var r=d(l());var n=d(l());function h(t){let e=Object.assign({p:\"p\",ol:\"ol\",li:\"li\",ul:\"ul\",code:\"code\",h2:\"h2\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"You're given some existing HTML for a Todo List app. Add the following functionality to the app:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:['Add new tasks on clicking the \"Submit\" button.',`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"<input>\"}),\" field should be cleared upon successful addition.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:'Remove tasks from the Todo List upon clicking the \"Delete\" button.'}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The focus of this question is on functionality, not the styling. There's no need to write any custom CSS.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"You may modify the markup (e.g. adding \",(0,n.jsx)(e.code,{children:\"id\"}),\"s, data attributes, replacing some tags, etc), but the result should remain the same visually.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"You may want to think about ways to improve the user experience of the application and implement them (you get bonus credit for doing that during interviews).\"}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var m=k;function p(t){return(0,r.jsx)(m,{})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(p,t)})):p(t)}var M=T;return _(D);})();\n;return Component;",
  "solution": "var Component=(()=>{var x=Object.create;var d=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var D=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),M=(n,e)=>{for(var r in e)d(n,r,{get:e[r],enumerable:!0})},u=(n,e,r,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of v(e))!A.call(n,a)&&a!==r&&d(n,a,{get:()=>e[a],enumerable:!(h=j(e,a))||h.enumerable});return n};var l=(n,e,r)=>(r=n!=null?x(_(n)):{},u(e||!n||!n.__esModule?d(r,\"default\",{value:n,enumerable:!0}):r,n)),C=n=>u(d({},\"__esModule\",{value:!0}),n);var c=D((I,m)=>{m.exports=_jsx_runtime});var O={};M(O,{default:()=>q});var s=l(c());var t=l(c());function p(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",a:\"a\",strong:\"strong\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We will need two state values: \",(0,t.jsx)(e.code,{children:\"tasks\"}),\" and \",(0,t.jsx)(e.code,{children:\"newTask\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"tasks\"}),\": Since there's a list of tasks that can be modified, we will need it to be part of the component's state. When rendering a list of elements in React, we need to specify a \",(0,t.jsx)(e.code,{children:\"key\"}),\" for each item. We cannot use the text of the task as the \",(0,t.jsx)(e.code,{children:\"key\"}),\" because they are not guaranteed to be unique. It is typically a bad practice to use array \",(0,t.jsx)(e.code,{children:\"index\"}),\" as \",(0,t.jsx)(e.code,{children:\"key\"}),\"s, but for this question, it is acceptable. The most foolproof method is to generate a unique ID for each task. Libraries like \",(0,t.jsx)(e.a,{href:\"https://github.com/uuidjs/uuid\",children:(0,t.jsx)(e.code,{children:\"uuid\"})}),\" come to mind, but in this case, a simple incrementing counter will do. Since we want \",(0,t.jsx)(e.code,{children:\"id\"}),\"s to be globally unique, it is initialized in the module scope, outside of the component.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"newTask\"}),\": state to represent the new task input field, although that is not strictly necessary if we prefer \",(0,t.jsx)(e.a,{href:\"https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components\",children:\"uncontrolled components\"}),\". However, it is generally more common to make \",(0,t.jsx)(e.code,{children:\"input\"}),\" fields controlled, aka backed by component state. The initial value for this state should not be \",(0,t.jsx)(e.code,{children:\"null\"}),\" as React will show a warning otherwise.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Adding tasks\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"New tasks should be added to the end of the \",(0,t.jsx)(e.code,{children:\"tasks\"}),\" array. We can construct a new task object with a new \",(0,t.jsx)(e.code,{children:\"id\"}),\" and the \",(0,t.jsx)(e.code,{children:\"label\"}),\" field, based on the \",(0,t.jsx)(e.code,{children:\"newTask\"}),\" value, create a \",(0,t.jsx)(e.strong,{children:\"new list\"}),\" from the previous list with the new item, and set it as the new \",(0,t.jsx)(e.code,{children:\"tasks\"}),\" state.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Deleting tasks\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Having a unique \",(0,t.jsx)(e.code,{children:\"id\"}),\" for each task object simplifies things here because we can filter the existing list and exclude the task corresponding to the \",(0,t.jsx)(e.code,{children:\"id\"}),\" to be removed. If you opted to use array index instead of generating unique IDs, you can use \",(0,t.jsx)(e.code,{children:\"Array.prototype.splice\"}),\" to remove elements at that index.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using React, the user input will be automatically escaped so there's no need to manually prevent Cross Site Scripting (XSS).\"})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var f=S;var i=l(c());function g(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Add tasks\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Add a new task.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Add multiple tasks.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Add tasks with potentially malicious content like HTML (e.g. \",(0,i.jsx)(e.code,{children:\"<script>\"}),\", \",(0,i.jsx)(e.code,{children:\"<style>\"}),\" or \",(0,i.jsx)(e.code,{children:\"<link\"}),\">) and ensure there's no XSS.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Check that \",(0,i.jsx)(e.code,{children:\"<input>\"}),\" is cleared after a task is added.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Delete tasks\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Delete an existing task.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Delete multiple tasks.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Delete newly-added tasks.\"}),`\n`]}),`\n`]}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(g,n)})):g(n)}var b=X;var o=l(c());function w(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"All form \",(0,o.jsx)(e.code,{children:\"<input>\"}),\"s should be labelled either via \",(0,o.jsx)(e.code,{children:\"<label>\"}),\"s or \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" attributes. Since the original markup doesn't contain a \",(0,o.jsx)(e.code,{children:\"<label>\"}),\", we can add \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" to the \",(0,o.jsx)(e.code,{children:\"<input>\"}),\".\"]}),`\n`,(0,o.jsxs)(e.li,{children:[\"For screen reader users, they won't be aware that a new task has been added. An \",(0,o.jsx)(e.code,{children:\"aria-live\"}),\" region can be added to inform about the newly-added task. There is unlikely enough time to do this during an interview but you will get bonus points for mentioning it. Read more about \",(0,o.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\",children:\"ARIA live regions on MDN\"}),\".\"]}),`\n`]})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(w,n)})):w(n)}var k=F;function y(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:\"Note:\"}),\" Check out the \",(0,s.jsx)(e.a,{href:\"/questions/user-interface/todo-list/react/solution/improved\",children:\"improved version\"}),\" which has numerous UX improvements.\"]}),`\n`,(0,s.jsx)(f,{}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:\"Note:\"}),\" Check out the \",(0,s.jsx)(e.a,{href:\"/questions/user-interface/todo-list/react/solution/improved\",children:\"improved version\"}),\" which has numerous UX improvements.\"]}),`\n`,(0,s.jsx)(k,{}),`\n`,(0,s.jsx)(b,{})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(y,n)})):y(n)}var q=T;return C(O);})();\n;return Component;",
  "solution-improved": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),A=(n,e)=>{for(var s in e)l(n,s,{get:e[s],enumerable:!0})},u=(n,e,s,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!_.call(n,a)&&a!==s&&l(n,a,{get:()=>e[a],enumerable:!(h=y(e,a))||h.enumerable});return n};var c=(n,e,s)=>(s=n!=null?w(j(n)):{},u(e||!n||!n.__esModule?l(s,\"default\",{value:n,enumerable:!0}):s,n)),D=n=>u(l({},\"__esModule\",{value:!0}),n);var r=v((I,m)=>{m.exports=_jsx_runtime});var X={};A(X,{default:()=>C});var i=c(r());var d=c(r());var t=c(r());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Add tasks\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Add a new task.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Add multiple tasks.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Add tasks with potentially malicious content like HTML (e.g. \",(0,t.jsx)(e.code,{children:\"<script>\"}),\", \",(0,t.jsx)(e.code,{children:\"<style>\"}),\" or \",(0,t.jsx)(e.code,{children:\"<link\"}),\">) and ensure there's no XSS.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Check that \",(0,t.jsx)(e.code,{children:\"<input>\"}),\" is cleared after a task is added.\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Delete tasks\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Delete an existing task.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Delete multiple tasks.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Delete newly-added tasks.\"}),`\n`]}),`\n`]}),`\n`]})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var f=S;var o=c(r());function b(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"All form \",(0,o.jsx)(e.code,{children:\"<input>\"}),\"s should be labelled either via \",(0,o.jsx)(e.code,{children:\"<label>\"}),\"s or \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" attributes. Since the original markup doesn't contain a \",(0,o.jsx)(e.code,{children:\"<label>\"}),\", we can add \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" to the \",(0,o.jsx)(e.code,{children:\"<input>\"}),\".\"]}),`\n`,(0,o.jsxs)(e.li,{children:[\"For screen reader users, they won't be aware that a new task has been added. An \",(0,o.jsx)(e.code,{children:\"aria-live\"}),\" region can be added to inform about the newly-added task. There is unlikely enough time to do this during an interview but you will get bonus points for mentioning it. Read more about \",(0,o.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\",children:\"ARIA live regions on MDN\"}),\".\"]}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(b,n)})):b(n)}var g=M;function k(n){let e=Object.assign({p:\"p\",a:\"a\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[\"This is an improved version of the \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/todo-list/react/solution\",children:\"basic solution\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Some of the improvements:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Encapsulating the ID generator so that it can only be read from but not modified from external sources.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Use a \",(0,i.jsx)(e.code,{children:\"<form>\"}),\" to capture submission of new tasks. This will handle both \",(0,i.jsx)(\"kbd\",{children:\"Enter\"}),' keys and \"Submit\" button clicks.']}),`\n`,(0,i.jsx)(e.li,{children:\"Prevents empty input values from being added to the list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Trims the input value before adding to the list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Displays an empty state when there are no tasks in the list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Asks for confirmation before deletion of a task.\"}),`\n`]}),`\n`,(0,i.jsx)(g,{}),`\n`,(0,i.jsx)(f,{})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(k,n)})):k(n)}var C=T;return D(X);})();\n;return Component;"
}