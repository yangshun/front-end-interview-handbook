{
  "author": "yangshun",
  "files": {
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div>\n      <h1>Todo List</h1>\n      <form>\n        <input\n          aria-label=\"Add new task\"\n          type=\"text\"\n          placeholder=\"Add your task\" />\n        <div>\n          <button id=\"submit\">Submit</button>\n        </div>\n      </form>\n      <ul></ul>\n    </div>\n    <template id=\"task-template\">\n      <li>\n        <span></span>\n        <button>Delete</button>\n      </li>\n    </template>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/todo-list-vanilla-solution-template\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  // Decouple the tasks from the rendering\n  // and client-side render the tasks during initial load.\n  const TASKS = [\n    'Walk the dog',\n    'Water the plants',\n    'Wash the dishes',\n  ];\n\n  // Retain a reference to the elements which persist\n  // throughout usage of the app.\n  const $inputEl = document.querySelector('input');\n  const $form = document.querySelector('form');\n  const $todoListEl = document.querySelector('ul');\n  const $taskTemplate = document.querySelector(\n    '#task-template',\n  );\n\n  function addTask(label) {\n    // Use the template to make it easy to add new tasks.\n    const $newTaskElement =\n      $taskTemplate.content.cloneNode(true);\n    $newTaskElement.querySelector('span').textContent =\n      label;\n    $todoListEl.appendChild($newTaskElement);\n  }\n\n  function deleteTask($itemEl) {\n    // Remove the task from the list.\n    $itemEl.parentNode.removeChild($itemEl);\n  }\n\n  $form.addEventListener('submit', (event) => {\n    event.preventDefault();\n    const value = $inputEl.value;\n    // Don't do anything for empty value. Good for UX.\n    if (value.trim() === '') {\n      return;\n    }\n\n    // Trim before adding to the list.\n    addTask(value.trim());\n\n    // Reset the input so that new tasks can be added.\n    $inputEl.value = '';\n  });\n\n  // Add a listener to the list instead of individual tasks.\n  // This is called event delegation and the benefit is that\n  // the Delete button of new tasks can also respond to clicks.\n  $todoListEl.addEventListener('click', (event) => {\n    // Check that the button is being clicked and not something\n    // else (e.g. the task label).\n    if (event.target.tagName !== 'BUTTON') {\n      return;\n    }\n\n    // Add confirmation before destructive actions.\n    if (\n      window.confirm(\n        'Are you sure you want to delete the task?',\n      )\n    ) {\n      deleteTask(event.target.parentNode);\n      $inputEl.focus();\n    }\n  });\n\n  function initialRender() {\n    // Render the initial tasks using the template.\n    TASKS.forEach(function (label) {\n      addTask(label);\n    });\n  }\n\n  initialRender();\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  },
  "writeup": "var Component=(()=>{var M=Object.create;var h=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var C=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),X=(n,e)=>{for(var o in e)h(n,o,{get:e[o],enumerable:!0})},m=(n,e,o,u)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of A(e))!S.call(n,c)&&c!==o&&h(n,c,{get:()=>e[c],enumerable:!(u=v(e,c))||u.enumerable});return n};var d=(n,e,o)=>(o=n!=null?M(D(n)):{},m(e||!n||!n.__esModule?h(o,\"default\",{value:n,enumerable:!0}):o,n)),O=n=>m(h({},\"__esModule\",{value:!0}),n);var a=C((z,p)=>{p.exports=_jsx_runtime});var q={};X(q,{default:()=>R});var t=d(a());var r=d(a());function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",a:\"a\",code:\"code\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,r.jsx)(e.p,{children:\"There are a few ways to approach this questions:\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Add only the necessary DOM event listeners and DOM operations. See \",(0,r.jsx)(e.a,{href:\"/questions/user-interface/todo-list/vanilla/solution\",children:\"solution\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Use \",(0,r.jsx)(e.code,{children:\"<template>\"}),\"s and client-side render both initial and new tasks. See \",(0,r.jsx)(e.a,{href:\"/questions/user-interface/todo-list/vanilla/solution/template\",children:\"solution\"}),\".\"]}),`\n`]})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(f,n)})):f(n)}var g=F;var l=d(a());function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,l.jsx)(e.p,{children:\"When rendering user input, there's a risk of inserting potentially malicious content resulting in Cross Site Scripting (XSS). To prevent XSS:\"}),`\n`,(0,l.jsxs)(e.ul,{children:[`\n`,(0,l.jsx)(e.li,{children:\"Sanitize the user input before rendering.\"}),`\n`,(0,l.jsxs)(e.li,{children:[\"Avoid setting \",(0,l.jsx)(e.code,{children:\"Element.innerHTML\"}),\", set \",(0,l.jsx)(e.code,{children:\"Node.textContent\"}),\" instead which inserts strings as raw text rather than parsing it as HTML.\"]}),`\n`]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(b,n)})):b(n)}var k=T;var s=d(a());function x(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"All form \",(0,s.jsx)(e.code,{children:\"<input>\"}),\"s should be labelled either via \",(0,s.jsx)(e.code,{children:\"<label>\"}),\"s or \",(0,s.jsx)(e.code,{children:\"aria-label\"}),\" attributes. Since the original markup doesn't contain a \",(0,s.jsx)(e.code,{children:\"<label>\"}),\", we can add \",(0,s.jsx)(e.code,{children:\"aria-label\"}),\" to the \",(0,s.jsx)(e.code,{children:\"<input>\"}),\".\"]}),`\n`,(0,s.jsxs)(e.li,{children:[\"For screen reader users, they won't be aware that a new task has been added. An \",(0,s.jsx)(e.code,{children:\"aria-live\"}),\" region can be added to inform about the newly-added task. There is unlikely enough time to do this during an interview but you will get bonus points for mentioning it. Read more about \",(0,s.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\",children:\"ARIA live regions on MDN\"}),\".\"]}),`\n`]})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(x,n)})):x(n)}var j=L;var i=d(a());function w(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Add tasks\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Add a new task.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Add multiple tasks.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Add tasks with potentially malicious content like HTML (e.g. \",(0,i.jsx)(e.code,{children:\"<script>\"}),\", \",(0,i.jsx)(e.code,{children:\"<style>\"}),\" or \",(0,i.jsx)(e.code,{children:\"<link\"}),\">) and ensure there's no XSS.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Check that \",(0,i.jsx)(e.code,{children:\"<input>\"}),\" is cleared after a task is added.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Delete tasks\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Delete an existing task.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Delete multiple tasks.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Delete newly-added tasks.\"}),`\n`]}),`\n`]}),`\n`]})]})}function U(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(w,n)})):w(n)}var _=U;function y(n){let e=Object.assign({p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(g,{}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this approach, \",(0,t.jsx)(e.code,{children:\"<template>\"}),\"s are used for rendering both initial and new tasks. You might have realized that you have the task markup duplicated in two places: the initially-rendered tasks and new tasks.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"It is a chore to make the markup consistent for both initial and new tasks. Using a \",(0,t.jsx)(e.code,{children:\"<template>\"}),\" element will make it easy to render both the initial task and newly-added tasks.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This solution also contains some UX improvements:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Use a \",(0,t.jsx)(e.code,{children:\"<form>\"}),\" to capture submission of new tasks. This will handle both \",(0,t.jsx)(\"kbd\",{children:\"Enter\"}),' keys and \"Submit\" button clicks.']}),`\n`,(0,t.jsxs)(e.li,{children:[\"Prevents empty input values from being added to the list.\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Useful for preventing accidental additions.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.li,{children:\"Trims the input value before adding to the list.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Asks for confirmation before deletion of a task.\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Destructive actions should always require double confirmation in case the user accidentally pressed the delete button.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(k,{}),`\n`,(0,t.jsx)(j,{}),`\n`,(0,t.jsx)(_,{})]})}function I(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(y,n)})):y(n)}var R=I;return O(q);})();\n;return Component;"
}