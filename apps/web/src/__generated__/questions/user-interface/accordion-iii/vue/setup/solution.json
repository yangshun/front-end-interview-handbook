{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.vue\", \"/src/Accordion.vue\"],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-iii-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/Accordion.vue": {
      "code": "<script setup>\nimport { ref } from 'vue';\n\nfunction getAccordionHeaderId(accordionId, value) {\n  return accordionId + '-header-' + value;\n}\n\nfunction getAccordionPanelId(accordionId, value) {\n  return accordionId + '-panel-' + value;\n}\n\nconst props = defineProps({\n  sections: Array,\n});\n\nconst accordionId = Math.random()\n  .toString(36)\n  .substring(2, 9);\n\nconst openSections = ref(new Set());\n\nfunction focusOnSection(index) {\n  document\n    .getElementById(\n      getAccordionHeaderId(\n        accordionId,\n        props.sections[index].value,\n      ),\n    )\n    .focus();\n}\n\nfunction handleKeydown(event) {\n  const activeItemValue =\n    document.activeElement.getAttribute(\n      'data-accordion-value',\n    );\n\n  // Only respond to these interactions if\n  // an accordion title is in focus.\n  if (activeItemValue == null) {\n    return;\n  }\n\n  switch (event.code) {\n    case 'ArrowUp': {\n      const index = props.sections.findIndex(\n        ({ value: itemValue }) =>\n          itemValue === activeItemValue,\n      );\n      focusOnSection(\n        (index - 1 + props.sections.length) %\n          props.sections.length,\n      );\n      break;\n    }\n    case 'ArrowDown': {\n      const index = props.sections.findIndex(\n        ({ value: itemValue }) =>\n          itemValue === activeItemValue,\n      );\n      focusOnSection((index + 1) % props.sections.length);\n      break;\n    }\n    case 'Home': {\n      focusOnSection(0);\n      break;\n    }\n    case 'End': {\n      focusOnSection(props.sections.length - 1);\n      break;\n    }\n    default:\n      break;\n  }\n}\n</script>\n\n<template>\n  <div class=\"accordion\" @keydown=\"handleKeydown\">\n    <div\n      class=\"accordion-item\"\n      v-for=\"{ value, title, contents } in sections\"\n      :key=\"value\">\n      <button\n        :aria-controls=\"\n          getAccordionPanelId(accordionId, value)\n        \"\n        :aria-expanded=\"openSections.has(value)\"\n        :id=\"getAccordionHeaderId(accordionId, value)\"\n        class=\"accordion-item-title\"\n        type=\"button\"\n        :data-accordion-value=\"value\"\n        @click=\"\n          () => {\n            if (openSections.has(value)) {\n              openSections.delete(value);\n            } else {\n              openSections.add(value);\n            }\n          }\n        \">\n        {{ title }}\n        <span\n          aria-hidden\n          :class=\"[\n            'accordion-icon',\n            openSections.has(value) &&\n              'accordion-icon--rotated',\n          ]\" />\n      </button>\n\n      <div\n        :aria-labelledby=\"\n          getAccordionHeaderId(accordionId, value)\n        \"\n        role=\"region\"\n        class=\"accordion-item-contents\"\n        :id=\"getAccordionPanelId(accordionId, value)\"\n        :hidden=\"!openSections.has(value)\">\n        {{ contents }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n.accordion {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.accordion-item {\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n  padding: 4px 0;\n}\n\n.accordion-item:not(:first-child) {\n  border-top: 1px solid #eee;\n}\n\n.accordion-item-title {\n  align-items: center;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 4px;\n  justify-content: space-between;\n  text-align: start;\n  display: flex;\n}\n\n.accordion-item-title:hover {\n  background-color: #eee;\n}\n\n.accordion-icon {\n  border: solid currentcolor;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  height: 8px;\n  pointer-events: none;\n  transform: translateY(-2px) rotate(45deg);\n  width: 8px;\n}\n\n.accordion-icon--rotated {\n  transform: translateY(2px) rotate(-135deg);\n}\n\n.accordion-item-contents {\n  font-size: 14px;\n  line-height: 1.2em;\n  padding: 4px;\n}\n</style>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport Accordion from './Accordion.vue';\n</script>\n\n<template>\n  <div class=\"wrapper\">\n    <Accordion\n      :sections=\"[\n        {\n          value: 'html',\n          title: 'HTML',\n          contents:\n            'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n        },\n        {\n          value: 'css',\n          title: 'CSS',\n          contents:\n            'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n        },\n        {\n          value: 'javascript',\n          title: 'JavaScript',\n          contents:\n            'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n        },\n      ]\" />\n  </div>\n</template>\n\n<style>\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/Accordion.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}