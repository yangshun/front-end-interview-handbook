{
  "author": "tanhauhau",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-iii-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/Accordion.svelte": {
      "code": "<script context=\"module\">\n  let globalAccordionId = 0;\n</script>\n\n<script>\n  export let sections;\n  let openSections = new Set();\n  const accordionId = globalAccordionId++;\n  let sectionHeaders = [];\n\n  function focusOnSection(index) {\n    sectionHeaders[index].focus();\n  }\n</script>\n\n<div\n  class=\"accordion\"\n  on:keydown={(event) => {\n    const activeHeaderIndex = sectionHeaders.indexOf(\n      document.activeElement,\n    );\n\n    // Only respond to these interactions if\n    // an accordion title is in focus.\n    if (activeHeaderIndex === -1) {\n      return;\n    }\n\n    switch (event.code) {\n      case 'ArrowUp': {\n        focusOnSection(\n          (activeHeaderIndex - 1 + sections.length) %\n            sections.length,\n        );\n        break;\n      }\n      case 'ArrowDown': {\n        focusOnSection(\n          (activeHeaderIndex + 1) % sections.length,\n        );\n        break;\n      }\n      case 'Home': {\n        focusOnSection(0);\n        break;\n      }\n      case 'End': {\n        focusOnSection(sections.length - 1);\n        break;\n      }\n      default:\n        break;\n    }\n  }}>\n  {#each sections as { value, title, contents }, index}\n    {@const isExpanded = openSections.has(value)}\n    {@const headerId = `${accordionId}-header-${value}`}\n    {@const panelId = `${accordionId}-panel-${value}`}\n\n    <div class=\"accordion-item\">\n      <button\n        aria-controls={panelId}\n        aria-expanded={isExpanded}\n        id={headerId}\n        class=\"accordion-item-title\"\n        bind:this={sectionHeaders[index]}\n        on:click={() => {\n          if (openSections.has(value)) {\n            openSections.delete(value);\n          } else {\n            openSections.add(value);\n          }\n          openSections = openSections;\n        }}>\n        {title}\n        <span\n          aria-hidden={true}\n          class=\"accordion-icon\"\n          class:accordion-icon--rotated={isExpanded} />\n      </button>\n      <div\n        aria-labelledby={headerId}\n        role=\"region\"\n        id={panelId}\n        class=\"accordion-item-contents\"\n        hidden={!isExpanded}>\n        {contents}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .accordion {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .accordion-item {\n    display: flex;\n    flex-direction: column;\n    row-gap: 4px;\n    padding: 4px 0;\n  }\n\n  .accordion-item:not(:first-child) {\n    border-top: 1px solid #eee;\n  }\n\n  .accordion-item-title {\n    align-items: center;\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-weight: 500;\n    padding: 4px;\n    justify-content: space-between;\n    text-align: start;\n    display: flex;\n  }\n\n  .accordion-item-title:hover {\n    background-color: #eee;\n  }\n\n  .accordion-icon {\n    border: solid currentcolor;\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    height: 8px;\n    pointer-events: none;\n    transform: translateY(-2px) rotate(45deg);\n    width: 8px;\n  }\n\n  .accordion-icon--rotated {\n    transform: translateY(2px) rotate(-135deg);\n  }\n\n  .accordion-item-contents {\n    font-size: 14px;\n    line-height: 1.2em;\n    padding: 4px;\n  }\n</style>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import Accordion from './Accordion.svelte';\n</script>\n\n<div class=\"wrapper\">\n  <Accordion\n    sections={[\n      {\n        value: 'html',\n        title: 'HTML',\n        contents:\n          'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n      },\n      {\n        value: 'css',\n        title: 'CSS',\n        contents:\n          'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n      },\n      {\n        value: 'javascript',\n        title: 'JavaScript',\n        contents:\n          'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n      },\n    ]} />\n</div>\n\n<style>\n  .wrapper {\n    align-items: center;\n    display: flex;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/Accordion.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/Accordion.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var i in e)c(t,i,{get:e[i],enumerable:!0})},h=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of w(e))!k.call(t,d)&&d!==i&&c(t,d,{get:()=>e[d],enumerable:!(r=b(e,d))||r.enumerable});return t};var l=(t,e,i)=>(i=t!=null?m(y(t)):{},h(e||!t||!t.__esModule?c(i,\"default\",{value:t,enumerable:!0}):i,t)),x=t=>h(c({},\"__esModule\",{value:!0}),t);var s=g((D,a)=>{a.exports=_jsx_runtime});var _={};v(_,{default:()=>T});var n=l(s());var o=l(s());function u(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Expanding/collapsing panels\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"When a header is focused, hitting \",(0,o.jsx)(\"kbd\",{children:\"Enter\"}),\" or \",(0,o.jsx)(\"kbd\",{children:\"Space\"}),\" should toggle the associated panel between the expanded/collapsed state.\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Switching header focus\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Tab\"}),` key should focus on the next focusable element,\nwhich in our example is the next header element. It should\nfocus on panel contents if any of them contains focusable\nelements. This scenario is not testable since we only allow\ntext contents in our accordion.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,o.jsx)(\"kbd\",{children:\"Tab\"}),` keys should focus on the\nprevious focusable element, which in our example is the previous\nheader element. It should focus on panel contents if any\nof them contains focusable elements. This scenario is not\ntestable since we only allow text contents in our accordion.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Up\"}),` key should focus on the previous header element\nand focus on the last header element if the first header\nhad focus, skipping any focusable elements within the contents.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Right\"}),` key should focus on the next header element\nand focus on the first header element if the last header\nhad focus, skipping any focusable elements within the contents.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Home\"}),\" key should focus the first header element.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"End\"}),` key should focus on the last header element.\nand focus on the last header element if the first header\nhad focus.`]}),`\n`]}),`\n`]}),`\n`]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var f=j;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii/svelte/solution\",children:\"Accordion II's Svelte solution\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Listening for Keyboard Events\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Firstly it's crucial to know the difference between the \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" vs the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event. The \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" event is only fired when a key that produces a character value is pressed down. This would exclude the \",(0,n.jsx)(\"kbd\",{children:\"Up\"}),\", \",(0,n.jsx)(\"kbd\",{children:\"Down\"}),\", \",(0,n.jsx)(\"kbd\",{children:\"Home\"}),\", and \",(0,n.jsx)(\"kbd\",{children:\"End\"}),\" keys which are requirements of this question. The \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" event is also deprecated and shouldn't be used. For these reasons, we should be using the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event. We'll add the \",(0,n.jsx)(e.code,{children:\"onKeyDown\"}),\" prop to root \",(0,n.jsx)(e.code,{children:\"<div>\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To know which key is being pressed, we can use \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" or \",(0,n.jsx)(e.code,{children:\"event.code\"}),\" on the event passed to \",(0,n.jsx)(e.code,{children:\"onKeyDown\"}),\"'s callback. There are some \",(0,n.jsxs)(e.a,{href:\"https://javascript.info/keyboard-events\",children:[\"differences between \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" vs \",(0,n.jsx)(e.code,{children:\"event.code\"})]}),\" but for the purposes of this question it doesn't make a difference and can be ignored. We'll just use \",(0,n.jsx)(e.code,{children:\"event.code\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Responding to Keyboard Events\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that these keyboard events should only be responded to if the focus is currently on one of the accordion headers. We can get the currently focused DOM element on the page with \",(0,n.jsx)(e.code,{children:\"document.activeElement\"}),\", and check if it is inside the \",(0,n.jsx)(e.code,{children:\"sectionHeaders\"}),\", which is an array that holds references to all the accordion header buttons via \",(0,n.jsx)(e.code,{children:\"bind:this={sectionHeaders[index]}\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next we read the \",(0,n.jsx)(e.code,{children:\"event.code\"}),\" property and respond with custom code depending on its value. A \",(0,n.jsx)(e.code,{children:\"switch\"}),\" case is suitable for such a situation:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"ArrowUp\"}),': Focus on the previous header or \"wrap around\" to the last one if the focus was on the first header. We first find the index of the currently focused header, decrease it by one, and use modulo arithmetic to elegantly handle the \"wrap around\".']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"ArrowDown\"}),': Focus on the next header or \"wrap around\" to the first one if the focus was on the last. We first find the index of the currently focused header, increase it by one, and use modulo arithmetic to elegantly handle the \"wrap around\".']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Home\"}),\": Focus on the first header.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"End\"}),\": Focus on the last header.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A valid keyboard even should focus on a new header button. We can imperatively call \",(0,n.jsx)(e.code,{children:\".focus()\"}),\" on it by finding via its index in the \",(0,n.jsx)(e.code,{children:\"sectionHeaders\"}),\" array.\"]}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"Accordion | ARIA Authoring Practices Guide\"})}),`\n`]})]})}function A(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var T=A;return x(_);})();\n;return Component;"
}