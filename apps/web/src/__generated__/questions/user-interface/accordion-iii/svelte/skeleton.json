{
  "author": "tanhauhau",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-iii-svelte-skeleton\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/Accordion.svelte": {
      "code": "<script context=\"module\">\n  let globalAccordionId = 0;\n</script>\n\n<script>\n  export let sections;\n  let openSections = new Set();\n  const accordionId = globalAccordionId++;\n</script>\n\n<div class=\"accordion\">\n  {#each sections as { value, title, contents }}\n    {@const isExpanded = openSections.has(value)}\n    {@const headerId = `${accordionId}-header-${value}`}\n    {@const panelId = `${accordionId}-panel-${value}`}\n\n    <div class=\"accordion-item\">\n      <button\n        aria-controls={panelId}\n        aria-expanded={isExpanded}\n        id={headerId}\n        class=\"accordion-item-title\"\n        on:click={() => {\n          if (openSections.has(value)) {\n            openSections.delete(value);\n          } else {\n            openSections.add(value);\n          }\n          openSections = openSections;\n        }}>\n        {title}\n        <span\n          aria-hidden={true}\n          class=\"accordion-icon\"\n          class:accordion-icon--rotated={isExpanded} />\n      </button>\n      <div\n        aria-labelledby={headerId}\n        role=\"region\"\n        id={panelId}\n        class=\"accordion-item-contents\"\n        hidden={!isExpanded}>\n        {contents}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .accordion {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .accordion-item {\n    display: flex;\n    flex-direction: column;\n    row-gap: 4px;\n    padding: 4px 0;\n  }\n\n  .accordion-item:not(:first-child) {\n    border-top: 1px solid #eee;\n  }\n\n  .accordion-item-title {\n    align-items: center;\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-weight: 500;\n    padding: 4px;\n    justify-content: space-between;\n    text-align: start;\n    display: flex;\n  }\n\n  .accordion-item-title:hover {\n    background-color: #eee;\n  }\n\n  .accordion-icon {\n    border: solid currentcolor;\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    height: 8px;\n    pointer-events: none;\n    transform: translateY(-2px) rotate(45deg);\n    width: 8px;\n  }\n\n  .accordion-icon--rotated {\n    transform: translateY(2px) rotate(-135deg);\n  }\n\n  .accordion-item-contents {\n    font-size: 14px;\n    line-height: 1.2em;\n    padding: 4px;\n  }\n</style>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import Accordion from './Accordion.svelte';\n</script>\n\n<div class=\"wrapper\">\n  <Accordion\n    sections={[\n      {\n        value: 'html',\n        title: 'HTML',\n        contents:\n          'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n      },\n      {\n        value: 'css',\n        title: 'CSS',\n        contents:\n          'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n      },\n      {\n        value: 'javascript',\n        title: 'JavaScript',\n        contents:\n          'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n      },\n    ]} />\n</div>\n\n<style>\n  .wrapper {\n    align-items: center;\n    display: flex;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/Accordion.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/Accordion.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var y=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),x=(o,e)=>{for(var i in e)r(o,i,{get:e[i],enumerable:!0})},d=(o,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!I.call(o,t)&&t!==i&&r(o,t,{get:()=>e[t],enumerable:!(s=b(e,t))||s.enumerable});return o};var l=(o,e,i)=>(i=o!=null?m(w(o)):{},d(e||!o||!o.__esModule?r(i,\"default\",{value:o,enumerable:!0}):i,o)),k=o=>d(r({},\"__esModule\",{value:!0}),o);var a=y((M,h)=>{h.exports=_jsx_runtime});var q={};x(q,{default:()=>j});var c=l(a());var n=l(a());function u(o){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\", you should complete that question first before attempting this question. This question is not available in Vanilla JavaScript as it will require a fair bit of code to add keyboard interactions without a JavaScript framework.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\", we built a functional accordion component that has the necessary \",(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"WAI-ARIA roles, states, and properties\"}),\", which is actually pretty accessible. However, we can go one step further and add some optional keyboard interactions.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll be following a modified subset of the \",(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"necessary keyboard interactions for accordions\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"When \",(0,n.jsx)(\"kbd\",{children:\"Enter\"}),\" or \",(0,n.jsx)(\"kbd\",{children:\"Space\"}),\" is hit and focus is on the accordion header\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"For a collapsed panel, expands the associated panel.\"}),`\n`,(0,n.jsx)(e.li,{children:\"For an expanded panel, collapses the associated panel.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Tab\"}),`: Moves focus to the next focusable element;\nall focusable elements in the accordion are included in\nthe page `,(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" sequence.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),`: Moves focus to the\nprevious focusable element; all focusable elements in the\naccordion are included in the page `,(0,n.jsx)(\"kbd\",{children:`\nTab\n`}),\" sequence.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Down Arrow\"}),`: If focus is on an accordion header,\nmoves focus to the next accordion header. If focus is on\nthe last accordion header, either does nothing or moves\nfocus to the first accordion header.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Up Arrow\"}),`: If focus is on an accordion header,\nmoves focus to the previous accordion header. If focus is\non the first accordion header, either does nothing or\nmoves focus to the last accordion header.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Home\"}),`: When focus is on an accordion header,\nmoves focus to the first accordion header.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"End\"}),`: When focus is on an accordion header,\nmoves focus to the last accordion header.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The focus of this question is on adding keyboard functionality, not the styling. We have provided the solution to \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\" here for you to build on top of. You can reuse the existing styling.\"]}),`\n`]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(u,o)})):u(o)}var f=v;function p(o){return(0,c.jsx)(f,{})}function A(o={}){let{wrapper:e}=o.components||{};return e?(0,c.jsx)(e,Object.assign({},o,{children:(0,c.jsx)(p,o)})):p(o)}var j=A;return k(q);})();\n;return Component;"
}