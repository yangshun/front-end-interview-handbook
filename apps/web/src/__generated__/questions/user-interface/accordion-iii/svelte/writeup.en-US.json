{
  "skeleton": "var Component=(()=>{var b=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var x=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var i in e)r(o,i,{get:e[i],enumerable:!0})},d=(o,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!I.call(o,t)&&t!==i&&r(o,t,{get:()=>e[t],enumerable:!(s=m(e,t))||s.enumerable});return o};var l=(o,e,i)=>(i=o!=null?b(w(o)):{},d(e||!o||!o.__esModule?r(i,\"default\",{value:o,enumerable:!0}):i,o)),k=o=>d(r({},\"__esModule\",{value:!0}),o);var a=x((M,h)=>{h.exports=_jsx_runtime});var j={};v(j,{default:()=>q});var c=l(a());var n=l(a());function u(o){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\", you should complete that question first before attempting this question. This question is not available in Vanilla JavaScript as it will require a fair bit of code to add keyboard interactions without a JavaScript framework.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\", we built a functional accordion component that has the necessary \",(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"WAI-ARIA roles, states, and properties\"}),\", which is actually pretty accessible. However, we can go one step further and add some optional keyboard interactions.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll be following a modified subset of the \",(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"necessary keyboard interactions for accordions\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"When \",(0,n.jsx)(\"kbd\",{children:\"Enter\"}),\" or \",(0,n.jsx)(\"kbd\",{children:\"Space\"}),\" is hit and focus is on the accordion header\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"For a collapsed panel, expands the associated panel.\"}),`\n`,(0,n.jsx)(e.li,{children:\"For an expanded panel, collapses the associated panel.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Tab\"}),`: Moves focus to the next focusable element;\nall focusable elements in the accordion are included in\nthe page `,(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" sequence.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),`: Moves focus to the\nprevious focusable element; all focusable elements in the\naccordion are included in the page `,(0,n.jsx)(\"kbd\",{children:`\nTab\n`}),\" sequence.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Down Arrow\"}),`: If focus is on an accordion header,\nmoves focus to the next accordion header. If focus is on\nthe last accordion header, either does nothing or moves\nfocus to the first accordion header.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Up Arrow\"}),`: If focus is on an accordion header,\nmoves focus to the previous accordion header. If focus is\non the first accordion header, either does nothing or\nmoves focus to the last accordion header.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"Home\"}),`: When focus is on an accordion header,\nmoves focus to the first accordion header.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(\"kbd\",{children:\"End\"}),`: When focus is on an accordion header,\nmoves focus to the last accordion header.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The focus of this question is on adding keyboard functionality, not the styling. We have provided the solution to \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii\",children:\"Accordion II\"}),\" here for you to build on top of. You can reuse the existing styling.\"]}),`\n`]})]})}function y(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(u,o)})):u(o)}var f=y;function p(o){return(0,c.jsx)(f,{})}function A(o={}){let{wrapper:e}=o.components||{};return e?(0,c.jsx)(e,Object.assign({},o,{children:(0,c.jsx)(p,o)})):p(o)}var q=A;return k(j);})();\n;return Component;",
  "solution": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var i in e)c(t,i,{get:e[i],enumerable:!0})},h=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of w(e))!k.call(t,d)&&d!==i&&c(t,d,{get:()=>e[d],enumerable:!(r=b(e,d))||r.enumerable});return t};var l=(t,e,i)=>(i=t!=null?m(y(t)):{},h(e||!t||!t.__esModule?c(i,\"default\",{value:t,enumerable:!0}):i,t)),x=t=>h(c({},\"__esModule\",{value:!0}),t);var s=g((D,a)=>{a.exports=_jsx_runtime});var _={};v(_,{default:()=>T});var n=l(s());var o=l(s());function u(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Expanding/collapsing panels\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"When a header is focused, hitting \",(0,o.jsx)(\"kbd\",{children:\"Enter\"}),\" or \",(0,o.jsx)(\"kbd\",{children:\"Space\"}),\" should toggle the associated panel between the expanded/collapsed state.\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Switching header focus\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Tab\"}),` key should focus on the next focusable element,\nwhich in our example is the next header element. It should\nfocus on panel contents if any of them contains focusable\nelements. This scenario is not testable since we only allow\ntext contents in our accordion.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,o.jsx)(\"kbd\",{children:\"Tab\"}),` keys should focus on the\nprevious focusable element, which in our example is the previous\nheader element. It should focus on panel contents if any\nof them contains focusable elements. This scenario is not\ntestable since we only allow text contents in our accordion.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Up\"}),` key should focus on the previous header element\nand focus on the last header element if the first header\nhad focus, skipping any focusable elements within the contents.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Right\"}),` key should focus on the next header element\nand focus on the first header element if the last header\nhad focus, skipping any focusable elements within the contents.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Home\"}),\" key should focus the first header element.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"End\"}),` key should focus on the last header element.\nand focus on the last header element if the first header\nhad focus.`]}),`\n`]}),`\n`]}),`\n`]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var f=j;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii/svelte/solution\",children:\"Accordion II's Svelte solution\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Listening for Keyboard Events\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Firstly it's crucial to know the difference between the \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" vs the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event. The \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" event is only fired when a key that produces a character value is pressed down. This would exclude the \",(0,n.jsx)(\"kbd\",{children:\"Up\"}),\", \",(0,n.jsx)(\"kbd\",{children:\"Down\"}),\", \",(0,n.jsx)(\"kbd\",{children:\"Home\"}),\", and \",(0,n.jsx)(\"kbd\",{children:\"End\"}),\" keys which are requirements of this question. The \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" event is also deprecated and shouldn't be used. For these reasons, we should be using the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event. We'll add the \",(0,n.jsx)(e.code,{children:\"onKeyDown\"}),\" prop to root \",(0,n.jsx)(e.code,{children:\"<div>\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To know which key is being pressed, we can use \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" or \",(0,n.jsx)(e.code,{children:\"event.code\"}),\" on the event passed to \",(0,n.jsx)(e.code,{children:\"onKeyDown\"}),\"'s callback. There are some \",(0,n.jsxs)(e.a,{href:\"https://javascript.info/keyboard-events\",children:[\"differences between \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" vs \",(0,n.jsx)(e.code,{children:\"event.code\"})]}),\" but for the purposes of this question it doesn't make a difference and can be ignored. We'll just use \",(0,n.jsx)(e.code,{children:\"event.code\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Responding to Keyboard Events\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that these keyboard events should only be responded to if the focus is currently on one of the accordion headers. We can get the currently focused DOM element on the page with \",(0,n.jsx)(e.code,{children:\"document.activeElement\"}),\", and check if it is inside the \",(0,n.jsx)(e.code,{children:\"sectionHeaders\"}),\", which is an array that holds references to all the accordion header buttons via \",(0,n.jsx)(e.code,{children:\"bind:this={sectionHeaders[index]}\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next we read the \",(0,n.jsx)(e.code,{children:\"event.code\"}),\" property and respond with custom code depending on its value. A \",(0,n.jsx)(e.code,{children:\"switch\"}),\" case is suitable for such a situation:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"ArrowUp\"}),': Focus on the previous header or \"wrap around\" to the last one if the focus was on the first header. We first find the index of the currently focused header, decrease it by one, and use modulo arithmetic to elegantly handle the \"wrap around\".']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"ArrowDown\"}),': Focus on the next header or \"wrap around\" to the first one if the focus was on the last. We first find the index of the currently focused header, increase it by one, and use modulo arithmetic to elegantly handle the \"wrap around\".']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Home\"}),\": Focus on the first header.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"End\"}),\": Focus on the last header.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A valid keyboard even should focus on a new header button. We can imperatively call \",(0,n.jsx)(e.code,{children:\".focus()\"}),\" on it by finding via its index in the \",(0,n.jsx)(e.code,{children:\"sectionHeaders\"}),\" array.\"]}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"Accordion | ARIA Authoring Practices Guide\"})}),`\n`]})]})}function A(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var T=A;return x(_);})();\n;return Component;"
}