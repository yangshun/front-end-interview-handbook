{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-iii-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/accordion/accordion.component.css": {
      "code": ""
    },
    "/src/app/accordion/accordion.component.html": {
      "code": "<div class=\"wrapper\">\n  <div class=\"accordion\">\n    <div\n      *ngFor=\"let section of sections; let i = index\"\n      class=\"accordion-item\">\n      <button\n        [attr.aria-controls]=\"\n          getAccordionPanelId(accordionId, section.value)\n        \"\n        [attr.aria-expanded]=\"\n          openSections.has(section.value)\n        \"\n        [id]=\"\n          getAccordionHeaderId(accordionId, section.value)\n        \"\n        class=\"accordion-item-title\"\n        type=\"button\"\n        (click)=\"toggleSection(section.value)\"\n        [attr.data-accordion-value]=\"section.value\">\n        {{ section.title }}\n        <span\n          [attr.aria-hidden]=\"true\"\n          [ngClass]=\"{\n            'accordion-icon': true,\n            'accordion-icon--rotated': isOpen(section.value)\n          }\">\n        </span>\n      </button>\n      <div\n        [attr.aria-labelledby]=\"\n          getAccordionHeaderId(accordionId, section.value)\n        \"\n        [id]=\"\n          getAccordionPanelId(accordionId, section.value)\n        \"\n        role=\"region\"\n        class=\"accordion-item-contents\"\n        [hidden]=\"!isOpen(section.value)\">\n        {{ section.contents }}\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    "/src/app/accordion/accordion.component.ts": {
      "code": "import {\n  Component,\n  HostListener,\n  Input,\n} from '@angular/core';\nimport { Section } from '../app.component';\n\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2);\n}\n\n@Component({\n  selector: 'app-accordion',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.css'],\n})\nexport class AccordionComponent {\n  @Input()\n  sections!: Section[];\n\n  openSections = new Set<string>();\n  accordionId = generateId();\n\n  @HostListener('document:keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent): void {\n    const activeElement =\n      document.activeElement as HTMLElement;\n    const activeItemValue = activeElement.getAttribute(\n      'data-accordion-value',\n    );\n\n    if (activeItemValue == null) {\n      return;\n    }\n\n    const index = this.sections.findIndex(\n      (section) => section.value === activeItemValue,\n    );\n\n    switch (event.code) {\n      case 'ArrowUp':\n        this.focusOnSection(\n          (index - 1 + this.sections.length) %\n            this.sections.length,\n        );\n        break;\n      case 'ArrowDown':\n        this.focusOnSection(\n          (index + 1) % this.sections.length,\n        );\n        break;\n      case 'Home':\n        this.focusOnSection(0);\n        break;\n      case 'End':\n        this.focusOnSection(this.sections.length - 1);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private focusOnSection(index: number): void {\n    const section = this.sections[index];\n    const headerId = this.getAccordionHeaderId(\n      this.accordionId,\n      section.value,\n    );\n    const element = document.getElementById(headerId);\n    element?.focus();\n  }\n\n  getAccordionHeaderId(\n    accordionId: string,\n    value: string,\n  ): string {\n    return accordionId + '-header-' + value;\n  }\n\n  getAccordionPanelId(\n    accordionId: string,\n    value: string,\n  ): string {\n    return accordionId + '-panel-' + value;\n  }\n\n  isOpen(value: string): boolean {\n    return this.openSections.has(value);\n  }\n\n  toggleSection(value: string): void {\n    if (this.openSections.has(value)) {\n      this.openSections.delete(value);\n    } else {\n      this.openSections.add(value);\n    }\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<app-accordion [sections]=\"sections\" />\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\nexport interface Section {\n  value: string;\n  title: string;\n  contents: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  sections: Section[] = [\n    {\n      value: 'html',\n      title: 'HTML',\n      contents:\n        'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n    },\n    {\n      value: 'css',\n      title: 'CSS',\n      contents:\n        'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n    },\n    {\n      value: 'javascript',\n      title: 'JavaScript',\n      contents:\n        'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n    },\n  ];\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { AccordionComponent } from './accordion/accordion.component';\n\n@NgModule({\n  declarations: [AppComponent, AccordionComponent],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.accordion {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.accordion-item {\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n  padding: 4px 0;\n}\n\n.accordion-item:not(:first-child) {\n  border-top: 1px solid #eee;\n}\n\n.accordion-item-title {\n  align-items: center;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 4px;\n  justify-content: space-between;\n  text-align: start;\n  display: flex;\n}\n\n.accordion-item-title:hover {\n  background-color: #eee;\n}\n\n.accordion-icon {\n  border: solid currentcolor;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  height: 8px;\n  pointer-events: none;\n  transform: translateY(-2px) rotate(45deg);\n  width: 8px;\n}\n\n.accordion-icon--rotated {\n  transform: translateY(2px) rotate(-135deg);\n}\n\n.accordion-item-contents {\n  font-size: 14px;\n  line-height: 1.2em;\n  padding: 4px;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var y=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var d in e)r(t,d,{get:e[d],enumerable:!0})},a=(t,e,d,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of k(e))!v.call(t,c)&&c!==d&&r(t,c,{get:()=>e[c],enumerable:!(l=g(e,c))||l.enumerable});return t};var h=(t,e,d)=>(d=t!=null?y(x(t)):{},a(e||!t||!t.__esModule?r(d,\"default\",{value:t,enumerable:!0}):d,t)),A=t=>a(r({},\"__esModule\",{value:!0}),t);var s=j((C,u)=>{u.exports=_jsx_runtime});var E={};_(E,{default:()=>D});var i=h(s());var o=h(s());function f(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Expanding/collapsing panels\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"When a header is focused, hitting \",(0,o.jsx)(\"kbd\",{children:\"Enter\"}),\" or \",(0,o.jsx)(\"kbd\",{children:\"Space\"}),\" should toggle the associated panel between the expanded/collapsed state.\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Switching header focus\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Tab\"}),` key should focus on the next focusable element,\nwhich in our example is the next header element. It should\nfocus on panel contents if any of them contains focusable\nelements. This scenario is not testable since we only allow\ntext contents in our accordion.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,o.jsx)(\"kbd\",{children:\"Tab\"}),` keys should focus on the\nprevious focusable element, which in our example is the previous\nheader element. It should focus on panel contents if any\nof them contains focusable elements. This scenario is not\ntestable since we only allow text contents in our accordion.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Up\"}),` key should focus on the previous header element\nand focus on the last header element if the first header\nhad focus, skipping any focusable elements within the contents.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Right\"}),` key should focus on the next header element\nand focus on the first header element if the last header\nhad focus, skipping any focusable elements within the contents.`]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"Home\"}),\" key should focus the first header element.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(\"kbd\",{children:\"End\"}),` key should focus on the last header element.\nand focus on the last header element if the first header\nhad focus.`]}),`\n`]}),`\n`]}),`\n`]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(f,t)})):f(t)}var p=T;var n=h(s());function m(t){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Listening for Keyboard Events\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Firstly it's crucial to know the difference between the \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" vs the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event. The \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" event is only fired when a key that produces a character value is pressed down. This would exclude the \",(0,n.jsx)(\"kbd\",{children:\"Up\"}),\", \",(0,n.jsx)(\"kbd\",{children:\"Down\"}),\", \",(0,n.jsx)(\"kbd\",{children:\"Home\"}),\", and \",(0,n.jsx)(\"kbd\",{children:\"End\"}),\" keys which are requirements of this question. The \",(0,n.jsx)(e.code,{children:\"keypress\"}),\" event is also deprecated and shouldn't be used. For these reasons, we should be using the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event. We'll add a \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event listener to the root \",(0,n.jsx)(e.code,{children:\"<div>\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To know which key is being pressed, we can use \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" or \",(0,n.jsx)(e.code,{children:\"event.code\"}),\" on the event passed to the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event callback. There are some \",(0,n.jsxs)(e.a,{href:\"https://javascript.info/keyboard-events\",children:[\"differences between \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" vs \",(0,n.jsx)(e.code,{children:\"event.code\"})]}),\" but for the purposes of this question it doesn't make a difference and can be ignored. We'll just use \",(0,n.jsx)(e.code,{children:\"event.code\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Responding to Keyboard Events\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that these keyboard events should only be responded to if the focus is currently on one of the accordion headers. We can get the currently focused DOM element on the page with \",(0,n.jsx)(e.code,{children:\"document.activeElement\"}),\", and check if it has a \",(0,n.jsx)(e.code,{children:\"data-accordion-value\"}),\" attribute, which is added to all the accordion header buttons.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next we read the \",(0,n.jsx)(e.code,{children:\"event.code\"}),\" property and respond with custom code depending on its value. A \",(0,n.jsx)(e.code,{children:\"switch\"}),\" case is suitable for such a situation:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"ArrowUp\"}),': Focus on the previous header or \"wrap around\" to the last one if the focus was on the first header. We first find the index of the currently focused header, decrease it by one, and use modulo arithmetic to elegantly handle the \"wrap around\".']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"ArrowDown\"}),': Focus on the next header or \"wrap around\" to the first one if the focus was on the last. We first find the index of the currently focused header, increase it by one, and use modulo arithmetic to elegantly handle the \"wrap around\".']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Home\"}),\": Focus on the first header.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"End\"}),\": Focus on the last header.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A valid keyboard even should focus on a new header button. Since we know the \",(0,n.jsx)(e.code,{children:\"id\"}),\" of each header, we can imperatively call \",(0,n.jsx)(e.code,{children:\".focus()\"}),\" on it by using \",(0,n.jsx)(e.code,{children:\"document.getElementById()\"}),\" with the desired header element id. This approach is non-idiomatic but is acceptable during interviews.\"]})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var w=F;function b(t){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/accordion-ii/angular/solution\",children:\"Accordion II's Angular solution\"}),\".\"]}),`\n`,(0,i.jsx)(w,{}),`\n`,(0,i.jsx)(p,{}),`\n`,(0,i.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"Accordion | ARIA Authoring Practices Guide\"})}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(b,t)})):b(t)}var D=M;return A(E);})();\n;return Component;"
}