{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/progress-bars-iii-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useState } from 'react';\n\nfunction ProgressBar({ isEmpty, onCompleted }) {\n  const [startTransition, setStartTransition] =\n    useState(false);\n\n  // Start transition when the bar is no longer empty.\n  useEffect(() => {\n    if (isEmpty || startTransition) {\n      return;\n    }\n\n    setStartTransition(true);\n  }, [isEmpty]);\n\n  return (\n    <div className=\"bar\">\n      <div\n        className={[\n          'bar-contents',\n          startTransition && 'bar-contents--filled',\n        ]\n          .filter(Boolean)\n          .join(' ')}\n        onTransitionEnd={() => {\n          onCompleted();\n        }}\n      />\n    </div>\n  );\n}\n\nconst CONCURRENCY_LIMIT = 3;\n\nexport default function App() {\n  const [bars, setBars] = useState(0);\n  const [numFilledUpBars, setNumFilledUpBars] = useState(0);\n\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <button\n          onClick={() => {\n            setBars(bars + 1);\n          }}>\n          Add\n        </button>\n      </div>\n      <div className=\"bars\">\n        {Array(bars)\n          .fill(null)\n          .map((_, index) => (\n            <ProgressBar\n              isEmpty={\n                index >= numFilledUpBars + CONCURRENCY_LIMIT\n              }\n              key={index}\n              onCompleted={() => {\n                setNumFilledUpBars(numFilledUpBars + 1);\n              }}\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.bars {\n  display: flex;\n  flex-direction: column;\n  row-gap: 8px;\n}\n\n.bar {\n  background-color: #ccc;\n  height: 8px;\n}\n\n.bar-contents {\n  background-color: green;\n  height: 100%;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition-duration: 2000ms;\n  transition-property: transform;\n  transition-timing-function: linear;\n}\n\n.bar-contents--filled {\n  transform: scaleX(1);\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var _=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of x(e))!y.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(l=f(e,i))||l.enumerable});return n};var h=(n,e,r)=>(r=n!=null?g(b(n)):{},c(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),w=n=>c(a({},\"__esModule\",{value:!0}),n);var o=_((E,d)=>{d.exports=_jsx_runtime});var T={};j(T,{default:()=>I});var t=h(o());var s=h(o());function u(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:['Hitting \"Add\" appends a new empty progress bar to the bottom of the list.',`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"The first bar starts filling up as soon as it appears.\"}),`\n`]}),`\n`]}),`\n`,(0,s.jsx)(e.li,{children:'Hit \"Add\" 4 times in quick succession to have 4 bars in total. The first 3 bars should start filling up and the fourth only starts filling up after the first 3 completes.'}),`\n`,(0,s.jsx)(e.li,{children:\"If all existing bars are filled up, a newly added bar starts filling up immediately.\"}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(u,n)})):u(n)}var m=C;function p(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",code:\"code\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The only change we have to make to the solution from \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\" is the way we are determining whether \",(0,t.jsx)(e.code,{children:\"isEmpty={true}\"}),\" (whether a bar is allowed to increment).\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<ProgressBar isEmpty={index > numFilledUpBars} />\n\n// The above can be rewritten as:\n<ProgressBar isEmpty={index >= numFilledUpBars + 1} />\n\n// Extract the concurrency limit as a variable:\nconst CONCURRENCY_LIMIT = 1;\n<ProgressBar isEmpty={index >= numFilledUpBars + CONCURRENCY_LIMIT} />\n// And we can change the value of CONCURRENCY_LIMIT to 3 to solve the question.\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"With this change, up to 3 non-full bars will have \",(0,t.jsx)(e.code,{children:\"<ProgressBar isEmpty={false} />\"}),\" which provides the concurrency needed to solve this question.\"]}),`\n`,(0,t.jsx)(m,{})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var I=v;return w(T);})();\n;return Component;"
}