{
  "skeleton": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var q=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),I=(r,e)=>{for(var n in e)i(r,n,{get:e[n],enumerable:!0})},u=(r,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of b(e))!y.call(r,s)&&s!==n&&i(r,s,{get:()=>e[s],enumerable:!(a=m(e,s))||a.enumerable});return r};var c=(r,e,n)=>(n=r!=null?d(x(r)):{},u(e||!r||!r.__esModule?i(n,\"default\",{value:r,enumerable:!0}):n,r)),j=r=>u(i({},\"__esModule\",{value:!0}),r);var l=q((D,h)=>{h.exports=_jsx_runtime});var M={};I(M,{default:()=>B});var o=c(l());var t=c(l());function p(r){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\", we built progress bars which fill up in sequence, one at a time. In this question, we'll build progress bars where multiple of them are filling up concurrently, up to a limit of 3. The fourth progress bar only starts filling up after the first one is full.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:'Clicking on the \"Add\" button adds a progress bar to the page.'}),`\n`,(0,t.jsx)(e.li,{children:\"The progress bars fill up gradually in parallel, up to a limit of 3 concurrent bars filling up. i.e. the fourth progress bar will only start filling up after the first progress bar is completely filled up.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Each bar takes approximately 2000ms to completely fill up.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Hint:\"}),\" Realize that changing the concurrency limit to 1 reduces this question into the simpler \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\" question. The solution to this question only requires a one-line change to the solution of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii/solution\",children:\"Progress Bars II\"}),\".\"]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(p,r)})):p(r)}var f=_;function g(r){return(0,o.jsx)(f,{})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,o.jsx)(e,Object.assign({},r,{children:(0,o.jsx)(g,r)})):g(r)}var B=w;return j(M);})();\n;return Component;",
  "solution": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var _=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of x(e))!y.call(n,i)&&i!==r&&a(n,i,{get:()=>e[i],enumerable:!(l=f(e,i))||l.enumerable});return n};var h=(n,e,r)=>(r=n!=null?g(b(n)):{},c(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),C=n=>c(a({},\"__esModule\",{value:!0}),n);var o=_((E,d)=>{d.exports=_jsx_runtime});var T={};j(T,{default:()=>I});var t=h(o());var s=h(o());function u(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:['Hitting \"Add\" appends a new empty progress bar to the bottom of the list.',`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"The first bar starts filling up as soon as it appears.\"}),`\n`]}),`\n`]}),`\n`,(0,s.jsx)(e.li,{children:'Hit \"Add\" 4 times in quick succession to have 4 bars in total. The first 3 bars should start filling up and the fourth only starts filling up after the first one completes.'}),`\n`,(0,s.jsx)(e.li,{children:\"If an existing bar is filled up, any empty bar starts filling up immediately.\"}),`\n`]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(u,n)})):u(n)}var m=w;function p(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",code:\"code\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The only change we have to make to the solution from \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\" is the way we are determining whether \",(0,t.jsx)(e.code,{children:\"isEmpty={true}\"}),\" (whether a bar is allowed to increment).\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<ProgressBar isEmpty={index > numFilledUpBars} />\n\n// The above can be rewritten as:\n<ProgressBar isEmpty={index >= numFilledUpBars + 1} />\n\n// Extract the concurrency limit as a variable:\nconst CONCURRENCY_LIMIT = 1;\n<ProgressBar isEmpty={index >= numFilledUpBars + CONCURRENCY_LIMIT} />\n// And we can change the value of CONCURRENCY_LIMIT to 3 to solve the question.\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"With this change, up to 3 non-full bars will have \",(0,t.jsx)(e.code,{children:\"<ProgressBar isEmpty={false} />\"}),\" which provides the concurrency needed to solve this question.\"]}),`\n`,(0,t.jsx)(m,{})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var I=v;return C(T);})();\n;return Component;"
}