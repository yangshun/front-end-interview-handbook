{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/progress-bars-iii-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "export default function App() {\n  return (\n    <div>\n      <button>Add</button>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var q=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),I=(r,e)=>{for(var s in e)i(r,s,{get:e[s],enumerable:!0})},u=(r,e,s,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of b(e))!x.call(r,n)&&n!==s&&i(r,n,{get:()=>e[n],enumerable:!(l=m(e,n))||l.enumerable});return r};var c=(r,e,s)=>(s=r!=null?d(y(r)):{},u(e||!r||!r.__esModule?i(s,\"default\",{value:r,enumerable:!0}):s,r)),j=r=>u(i({},\"__esModule\",{value:!0}),r);var a=q((C,h)=>{h.exports=_jsx_runtime});var D={};I(D,{default:()=>B});var o=c(a());var t=c(a());function p(r){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\", we built progress bars which fill up in sequence, one at a time. In this question, we'll build progress bars where multiple of them are filling up concurrently, up to a limit of 3. The fourth progress bar only starts filling up after the first one is full.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:'Clicking on the \"Add\" button adds a progress bar to the page.'}),`\n`,(0,t.jsx)(e.li,{children:\"The progress bars fill up gradually in parallel, up to a limit of 3 concurrent bars filling up. i.e. the fourth progress bar will only start filling up after the first progress bar is completely filled up.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Each bar takes approximately 2000ms to completely fill up.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Hint:\"}),\" Realize that changing the concurrency limit to 1 reduces this question into the simpler \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii\",children:\"Progress Bars II\"}),\" question. The solution to this question only requires a one-line change to the solution of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars-ii/solution\",children:\"Progress Bars II\"}),\".\"]})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(p,r)})):p(r)}var f=w;function g(r){return(0,o.jsx)(f,{})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,o.jsx)(e,Object.assign({},r,{children:(0,o.jsx)(g,r)})):g(r)}var B=_;return j(D);})();\n;return Component;"
}