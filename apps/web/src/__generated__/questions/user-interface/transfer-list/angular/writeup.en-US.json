{
  "skeleton": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of x(e))!w.call(t,i)&&i!==r&&s(t,i,{get:()=>e[i],enumerable:!(a=g(e,i))||a.enumerable});return t};var h=(t,e,r)=>(r=t!=null?p(b(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),k=t=>c(s({},\"__esModule\",{value:!0}),t);var l=j((L,d)=>{d.exports=_jsx_runtime});var D={};_(D,{default:()=>M});var o=h(l());var n=h(l());function m(t){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Build a component that allows transferring of items between two lists.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/transfer-list/transfer-list-example.png\",alt:\"Transfer List Example\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"There are two lists each initially containing 4 items.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Each item has a checkbox that can be checked/unchecked.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Transferring\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Clicking on the double arrow buttons will transfer all items from one list to the other, as specified by the direction of the arrows.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Clicking on the single arrow buttons will transfer only the selected items, as specified by the direction of the arrows.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Transferred items are added to the bottom of the destination list.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Item selection (checked) states are preserved after transferring.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Buttons are disabled if there are no relevant items to be transferred.\"}),`\n`]}),`\n`]}),`\n`]})]})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var f=y;function u(t){return(0,o.jsx)(f,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var M=C;return k(D);})();\n;return Component;",
  "solution": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),I=(n,e)=>{for(var s in e)o(n,s,{get:e[s],enumerable:!0})},l=(n,e,s,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of b(e))!v.call(n,r)&&r!==s&&o(n,r,{get:()=>e[r],enumerable:!(c=g(e,r))||c.enumerable});return n};var d=(n,e,s)=>(s=n!=null?f(y(n)):{},l(e||!n||!n.__esModule?o(s,\"default\",{value:n,enumerable:!0}):s,n)),x=n=>l(o({},\"__esModule\",{value:!0}),n);var a=w((S,h)=>{h.exports=_jsx_runtime});var _={};I(_,{default:()=>T});var t=d(a());var i=d(a());function u(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Selecting items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Items can be checked/unchecked.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transfer selected items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when no items are selected in the source list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, selected items are transferred from the source list to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transferring all items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when the source list is empty.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, all items from the source list are transferred to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(u,n)})):u(n)}var m=k;function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Overall, the trickiest part of this question is to select the right data structure to use considering the operations we need to do on the data.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since the items are unique, a \",(0,t.jsx)(e.code,{children:\"Map\"}),\" data structure is feasible as it gives us O(1) access, insertion, and removal of items. Moreover, JavaScript \",(0,t.jsx)(e.code,{children:\"Map\"}),\"s are ordered, so the items order can be preserved. The key will be the item name and value is a boolean indicating whether the item is selected/checked. We only need two JavaScript Maps in total, one for each list.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Based on events from the \",(0,t.jsx)(e.code,{children:\"ItemList\"}),\" component, which is considered a dumb component solely for displaying the UI, we will call \",(0,t.jsx)(e.code,{children:\"setItemsLeft\"}),\" or \",(0,t.jsx)(e.code,{children:\"setItemsRight\"}),\" to update our state. The method \",(0,t.jsx)(e.code,{children:\"hasNoSelectedItems\"}),\" checks if a button should be disabled. Note that we only need this method for selected transfers.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Methods \",(0,t.jsx)(e.code,{children:\"transferAllItems\"}),\" and \",(0,t.jsx)(e.code,{children:\"transferSelectedItems\"}),\" are almost identical. The first simply transfers all items from the source map to the destination map, which are our \",(0,t.jsx)(e.code,{children:\"itemsRight\"}),\" and \",(0,t.jsx)(e.code,{children:\"itemsLeft\"}),\". The second one has a condition to transfer only truthy values.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"ItemListComponent\"}),\" is used only for displaying the UI without changing state. If the values in this component are changed, they are sent to our container component to handle state.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsx)(e.p,{children:\"The intuitive thing to do would be to use an arrays for each list since arrays are the most natural data structure to represent a list of ordered items. However, marking items as checked/unchecked and removing items from the list will require O(N) time if an array is used.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"There's nothing particularly special about rendering the UI for the transfer lists. Flexboxes can help us render the three columns. Since the UI and the functionality of columns are identical, we can define a component \",(0,t.jsx)(e.code,{children:\"ItemList\"}),\" that takes in a list of items and a setter callback to manipulate the list.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"To determine if the buttons should be disabled:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Transfer all buttons: check if the source list is empty.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Transfer selected buttons: write a helper function \",(0,t.jsx)(e.code,{children:\"hasNoSelectedItems\"}),\", to count if the source list has any selected items, and disable the transfer buttons.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If you have time always consider pipes instead of functions in the template or extract data from an object. It improves performance and do not need to be calculated so many times.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"You might create service for maintaining the state. Inject the service in smart component and crete dumb components that only display and interact with the UI and all events from dumb components are passed to the smart one.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,t.jsx)(e.code,{children:\"readonly\"}),\", \",(0,t.jsx)(e.code,{children:\"private\"}),\", \",(0,t.jsx)(e.code,{children:\"public\"}),\" and \",(0,t.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(m,{})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(p,n)})):p(n)}var T=j;return x(_);})();\n;return Component;"
}