{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.vue\", \"/src/ItemList.vue\"],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/transfer-list-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { ref } from 'vue';\nimport ItemList from './ItemList.vue';\n\nconst DEFAULT_ITEMS_LEFT = [\n  'HTML',\n  'JavaScript',\n  'CSS',\n  'TypeScript',\n];\nconst DEFAULT_ITEMS_RIGHT = [\n  'React',\n  'Angular',\n  'Vue',\n  'Svelte',\n];\n\n// Convert the default array of items into a map with the item\n// name as a key and the value as a boolean.\nfunction generateItemsMap(items) {\n  return new Map(items.map((label) => [label, false]));\n}\n\nconst itemsLeft = ref(generateItemsMap(DEFAULT_ITEMS_LEFT));\nconst itemsRight = ref(\n  generateItemsMap(DEFAULT_ITEMS_RIGHT),\n);\n\n// Transfer selected items from a source list to a destination list.\nfunction transferSelectedItems(itemsSrc, itemsDst) {\n  const newItemsSrc = new Map(itemsSrc);\n  const newItemsDst = new Map(itemsDst);\n\n  // Remove selected items from source list and add to the destination list.\n  itemsSrc.forEach((value, key) => {\n    if (!value) {\n      return;\n    }\n\n    newItemsDst.set(key, value);\n    newItemsSrc.delete(key);\n  });\n  return [newItemsSrc, newItemsDst];\n}\n\n// Determine if the list has no selected items.\nfunction hasNoSelectedItems(items) {\n  return (\n    Array.from(items.values()).filter((val) => Boolean(val))\n      .length === 0\n  );\n}\n\n// Transfer all items from a source list to a destination list.\nfunction transferAllItems(itemsSrc, itemsDst) {\n  return [new Map(), new Map([...itemsDst, ...itemsSrc])];\n}\n</script>\n\n<template>\n  <div class=\"transfer-list\">\n    <ItemList\n      :items=\"itemsLeft\"\n      @toggle=\"\n        (label) => {\n          itemsLeft.set(label, !itemsLeft.get(label));\n        }\n      \" />\n    <div class=\"transfer-list__actions\">\n      <button\n        aria-label=\"Transfer all items to left list\"\n        :disabled=\"itemsRight.size === 0\"\n        @click=\"\n          () => {\n            [itemsRight, itemsLeft] = transferAllItems(\n              itemsRight,\n              itemsLeft,\n            );\n          }\n        \">\n        <span aria-hidden>&lt;&lt;</span>\n      </button>\n      <button\n        aria-label=\"Transfer selected items to left list\"\n        :disabled=\"hasNoSelectedItems(itemsRight)\"\n        @click=\"\n          () => {\n            [itemsRight, itemsLeft] = transferSelectedItems(\n              itemsRight,\n              itemsLeft,\n            );\n          }\n        \">\n        <span aria-hidden>&lt;</span>\n      </button>\n      <button\n        aria-label=\"Transfer selected items to right list\"\n        :disabled=\"hasNoSelectedItems(itemsLeft)\"\n        @click=\"\n          () => {\n            [itemsLeft, itemsRight] = transferSelectedItems(\n              itemsLeft,\n              itemsRight,\n            );\n          }\n        \">\n        <span aria-hidden>&gt;</span>\n      </button>\n      <button\n        aria-label=\"Transfer all items to right list\"\n        :disabled=\"itemsLeft.size === 0\"\n        @click=\"\n          () => {\n            [itemsLeft, itemsRight] = transferAllItems(\n              itemsLeft,\n              itemsRight,\n            );\n          }\n        \">\n        <span aria-hidden>&gt;&gt;</span>\n      </button>\n    </div>\n    <ItemList\n      :items=\"itemsRight\"\n      @toggle=\"\n        (label) => {\n          itemsRight.set(label, !itemsRight.get(label));\n        }\n      \" />\n  </div>\n</template>\n\n<style>\n.transfer-list {\n  border: 1px solid #ccc;\n  display: flex;\n  max-width: 768px;\n  margin: 0 auto;\n}\n\n.transfer-list__actions {\n  border-color: #ccc;\n  border-width: 0 1px 0 1px;\n  border-style: solid;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  row-gap: 12px;\n}\n</style>\n"
    },
    "/src/ItemList.vue": {
      "code": "<script setup>\nimport { computed } from 'vue';\n\nconst props = defineProps({\n  items: Map,\n});\n\nconst entries = computed(() => Array.from(props.items));\n</script>\n\n<template>\n  <div class=\"transfer-list__section\">\n    <ul class=\"transfer-list__section__items\">\n      <li v-for=\"[label, checked] in entries\">\n        <label>\n          <input\n            type=\"checkbox\"\n            :checked=\"checked\"\n            @change=\"$emit('toggle', label)\" />\n          {{ label }}\n        </label>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<style>\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\n.transfer-list__section {\n  padding: 20px;\n  flex-grow: 1;\n}\n\n.transfer-list__section__items {\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n}\n\n.transfer-list__section__items__item {\n  display: flex;\n  gap: 8px;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/ItemList.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}