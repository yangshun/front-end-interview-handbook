{
  "author": "tanhauhau",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/transfer-list-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import './styles.css';\n  import ItemList from './ItemList.svelte';\n\n  const DEFAULT_ITEMS_LEFT = [\n    'HTML',\n    'JavaScript',\n    'CSS',\n    'TypeScript',\n  ];\n  const DEFAULT_ITEMS_RIGHT = [\n    'React',\n    'Angular',\n    'Vue',\n    'Svelte',\n  ];\n\n  let itemsLeft = generateItemsMap(DEFAULT_ITEMS_LEFT);\n  let itemsRight = generateItemsMap(DEFAULT_ITEMS_RIGHT);\n\n  // Transfer selected items from a source list to a destination list.\n  function transferSelectedItems(itemsSrc, itemsDst) {\n    const newItemsSrc = new Map(itemsSrc);\n    const newItemsDst = new Map(itemsDst);\n\n    // Remove selected items from source list and add to the destination list.\n    itemsSrc.forEach((value, key) => {\n      if (!value) {\n        return;\n      }\n\n      newItemsDst.set(key, value);\n      newItemsSrc.delete(key);\n    });\n    return [newItemsSrc, newItemsDst];\n  }\n\n  // Convert the default array of items into a map with the item\n  // name as a key and the value as a boolean.\n  function generateItemsMap(items) {\n    return new Map(items.map((label) => [label, false]));\n  }\n\n  // Determine if the list has no selected items.\n  function hasNoSelectedItems(items) {\n    return (\n      Array.from(items.values()).filter((val) =>\n        Boolean(val),\n      ).length === 0\n    );\n  }\n\n  // Transfer all items from a source list to a destination list.\n  function transferAllItems(itemsSrc, itemsDst) {\n    return [new Map(), new Map([...itemsDst, ...itemsSrc])];\n  }\n</script>\n\n<div class=\"transfer-list\">\n  <ItemList bind:items={itemsLeft} />\n  <div class=\"transfer-list__actions\">\n    <button\n      aria-label=\"Transfer all items to left list\"\n      disabled={itemsRight.size === 0}\n      on:click={() => {\n        [itemsRight, itemsLeft] = transferAllItems(\n          itemsRight,\n          itemsLeft,\n        );\n      }}>\n      <span aria-hidden={true}>&lt;&lt;</span>\n    </button>\n    <button\n      aria-label=\"Transfer selected items to left list\"\n      disabled={hasNoSelectedItems(itemsRight)}\n      on:click={() => {\n        [itemsRight, itemsLeft] = transferSelectedItems(\n          itemsRight,\n          itemsLeft,\n        );\n      }}>\n      <span aria-hidden={true}>&lt;</span>\n    </button>\n    <button\n      aria-label=\"Transfer selected items to right list\"\n      disabled={hasNoSelectedItems(itemsLeft)}\n      on:click={() => {\n        [itemsLeft, itemsRight] = transferSelectedItems(\n          itemsLeft,\n          itemsRight,\n        );\n      }}>\n      <span aria-hidden={true}>&gt;</span>\n    </button>\n    <button\n      aria-label=\"Transfer all items to right list\"\n      disabled={itemsLeft.size === 0}\n      on:click={() => {\n        [itemsLeft, itemsRight] = transferAllItems(\n          itemsLeft,\n          itemsRight,\n        );\n      }}>\n      <span aria-hidden={true}>&gt;&gt;</span>\n    </button>\n  </div>\n  <ItemList bind:items={itemsRight} />\n</div>\n\n<style>\n  .transfer-list {\n    border: 1px solid #ccc;\n    display: flex;\n    max-width: 768px;\n    margin: 0 auto;\n  }\n\n  .transfer-list__actions {\n    border-color: #ccc;\n    border-width: 0 1px 0 1px;\n    border-style: solid;\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    padding: 20px;\n    row-gap: 12px;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/ItemList.svelte": {
      "code": "<script>\n  export let items;\n</script>\n\n<div class=\"transfer-list__section\">\n  <ul class=\"transfer-list__section__items\">\n    {#each Array.from(items.entries()) as [label, checked]}\n      <li>\n        <div class=\"transfer-list__section__items__item\">\n          <label>\n            <input\n              type=\"checkbox\"\n              {checked}\n              on:change={() => {\n                const newItems = new Map(items);\n                newItems.set(label, !items.get(label));\n                items = newItems;\n              }} />\n            {label}</label>\n        </div>\n      </li>\n    {/each}\n  </ul>\n</div>\n\n<style>\n  ul {\n    list-style-type: none;\n    padding-left: 0;\n  }\n\n  .transfer-list__section {\n    padding: 20px;\n    flex-grow: 1;\n  }\n\n  .transfer-list__section__items {\n    display: flex;\n    flex-direction: column;\n    row-gap: 12px;\n  }\n\n  .transfer-list__section__items__item {\n    display: flex;\n    gap: 8px;\n  }\n</style>\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var s in e)c(n,s,{get:e[s],enumerable:!0})},h=(n,e,s,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!j.call(n,r)&&r!==s&&c(n,r,{get:()=>e[r],enumerable:!(d=g(e,r))||d.enumerable});return n};var o=(n,e,s)=>(s=n!=null?p(y(n)):{},h(e||!n||!n.__esModule?c(s,\"default\",{value:n,enumerable:!0}):s,n)),_=n=>h(c({},\"__esModule\",{value:!0}),n);var l=v((C,u)=>{u.exports=_jsx_runtime});var S={};w(S,{default:()=>T});var t=o(l());var i=o(l());function m(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Selecting items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Items can be checked/unchecked.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transfer selected items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when no items are selected in the source list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, selected items are transferred from the source list to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transferring all items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when the source list is empty.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, all items from the source list are transferred to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(m,n)})):m(n)}var f=k;var a=o(l());function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"Overall, the trickiest part of this question is to select the right data structure to use considering the operations we need to do on the data.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsx)(e.p,{children:\"The intuitive thing to do would be to use an arrays for each list since arrays are the most natural data structure to represent a list of ordered items. However, marking items as checked/unchecked and removing items from the list will require O(N) time if an array is used.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since the items are unique, a \",(0,t.jsx)(e.code,{children:\"Map\"}),\" data structure is feasible as it gives us O(1) access, insertion, and removal of items. Moreover, JavaScript \",(0,t.jsx)(e.code,{children:\"Map\"}),\"s are ordered, so the items order can be preserved. The key will be the item name and value is a boolean indicating whether the item is selected/checked. We only need two JavaScript \",(0,t.jsx)(e.code,{children:\"Map\"}),\"s in total, one for each list.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"There's nothing particularly special about rendering the UI for the transfer lists. Flexboxes can help us render the three columns. Since the UI and the functionality of the columns are identical, we can define a component called \",(0,t.jsx)(e.code,{children:\"ItemList.svelte\"}),\" that binds to the list of items, displaying and manipulating the list itself.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"To determine if the buttons should be disabled:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Transfer all buttons: check if the source list is empty.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Transfer selected buttons: write a helper function \",(0,t.jsx)(e.code,{children:\"hasNoSelectedItems\"}),\", to count if the source list has any selected items, and disable the transfer buttons.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Transferring Items\"}),`\n`,(0,t.jsx)(e.p,{children:\"We can write a function per desired transfer functionality that accepts source/destination lists and their respective setters. These functions reduce code duplication and can be easily reused if there are more than two columns in future.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"transferAllItems\"}),\": combine the items from source and destination lists to create a new destination list.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"transferSelectedItems\"}),\": move the selected items from source to destination lists by removing them from the source list and adding them to the destination list.\"]}),`\n`]}),`\n`,(0,t.jsx)(f,{})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(b,n)})):b(n)}var T=M;return _(S);})();\n;return Component;"
}