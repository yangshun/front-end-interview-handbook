{
  "skeleton": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of x(e))!w.call(t,i)&&i!==r&&s(t,i,{get:()=>e[i],enumerable:!(a=g(e,i))||a.enumerable});return t};var h=(t,e,r)=>(r=t!=null?p(b(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),k=t=>c(s({},\"__esModule\",{value:!0}),t);var l=j((L,d)=>{d.exports=_jsx_runtime});var D={};_(D,{default:()=>M});var o=h(l());var n=h(l());function m(t){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Build a component that allows transferring of items between two lists.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/transfer-list/transfer-list-example.png\",alt:\"Transfer List Example\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"There are two lists each initially containing 4 items.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Each item has a checkbox that can be checked/unchecked.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Transferring\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Clicking on the double arrow buttons will transfer all items from one list to the other, as specified by the direction of the arrows.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Clicking on the single arrow buttons will transfer only the selected items, as specified by the direction of the arrows.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Transferred items are added to the bottom of the destination list.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Item selection (checked) states are preserved after transferring.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Buttons are disabled if there are no relevant items to be transferred.\"}),`\n`]}),`\n`]}),`\n`]})]})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var f=y;function u(t){return(0,o.jsx)(f,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var M=C;return k(D);})();\n;return Component;",
  "solution": "var Component=(()=>{var x=Object.create;var l=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var r in e)l(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of j(e))!w.call(t,c)&&c!==r&&l(t,c,{get:()=>e[c],enumerable:!(d=y(e,c))||d.enumerable});return t};var a=(t,e,r)=>(r=t!=null?x(v(t)):{},h(e||!t||!t.__esModule?l(r,\"default\",{value:t,enumerable:!0}):r,t)),M=t=>h(l({},\"__esModule\",{value:!0}),t);var o=k((D,u)=>{u.exports=_jsx_runtime});var I={};_(I,{default:()=>C});var n=a(o());var i=a(o());function m(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Selecting items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Items can be checked/unchecked.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transfer selected items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when no items are selected in the source list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, selected items are transferred from the source list to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transferring all items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when the source list is empty.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, all items from the source list are transferred to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(m,t)})):m(t)}var f=T;var s=a(o());function b(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:'<input type=\"checkbox\">'}),\" are paired with \",(0,s.jsx)(e.code,{children:\"<label>\"}),\"s. Clicking on labels also selects/deselect the item.\"]}),`\n`,(0,s.jsxs)(e.li,{children:[\"Since the \",(0,s.jsx)(e.code,{children:\"<button>\"}),\"s do not have a visible label, use \",(0,s.jsx)(e.code,{children:\"aria-label\"}),\"s to indicate their purpose. As a result, make the button contents hidden from screen readers via \",(0,s.jsx)(e.code,{children:'aria-hidden=\"true\"'}),\".\"]}),`\n`,(0,s.jsx)(e.li,{children:\"All required functionality should be achievable just by using the keyboard.\"}),`\n`]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(b,t)})):b(t)}var p=S;function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"Overall, the trickiest part of this question is to select the right data structure to use considering the operations we need to do on the data.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"The intuitive thing to do would be to use an arrays for each list since arrays are the most natural data structure to represent a list of ordered items. However, marking items as checked/unchecked and removing items from the list will require O(N) time if an array is used.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the items are unique, a \",(0,n.jsx)(e.code,{children:\"Map\"}),\" data structure is feasible as it gives us O(1) access, insertion, and removal of items. Moreover, JavaScript \",(0,n.jsx)(e.code,{children:\"Map\"}),\"s are ordered, so the items order can be preserved. The key will be the item name and value is a boolean indicating whether the item is selected/checked. We only need two JavaScript \",(0,n.jsx)(e.code,{children:\"Map\"}),\"s in total, one for each list.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"There's nothing particularly special about rendering the UI for the transfer lists. Flexboxes can help us render the three columns. Since the UI and the functionality of columns are identical, we can define a component \",(0,n.jsx)(e.code,{children:\"ItemList\"}),\" that takes in a list of items and a setter callback to manipulate the list.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To determine if the buttons should be disabled:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Transfer all buttons: check if the source list is empty.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Transfer selected buttons: write a helper function \",(0,n.jsx)(e.code,{children:\"hasNoSelectedItems\"}),\", to count if the source list has any selected items, and disable the transfer buttons.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Transferring Items\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can write a function per desired transfer functionality that accepts source/destination lists and their respective setters. These functions reduce code duplication and can be easily reused if there are more than two columns in future.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"transferAllItems\"}),\": combine the items from source and destination lists to create a new destination list.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"transferSelectedItems\"}),\": move the selected items from source to destination lists by removing them from the source list and adding them to the destination list.\"]}),`\n`]}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(p,{})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var C=O;return M(I);})();\n;return Component;"
}