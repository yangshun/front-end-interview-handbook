{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.svelte\"],\n  \"activeFile\": \"/src/App.svelte\",\n  \"environment\": \"svelte\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/connect-four-svelte-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import GameGrid from './GameGrid.svelte';\n  import PlayerMoveSection from './PlayerMoveSection.svelte';\n  import WinnerSection from './WinnerSection.svelte';\n  import { COLS, ROWS } from './const';\n  const COUNT_TO_WIN = 4;\n  const PLAYERS = ['red', 'yellow'];\n\n  // Direction deltas for horizontal, vertical and diagonal\n  // directions.\n  // The first value is the row delta, second value is the column delta.\n  // These will be used to check if there are N consecutive tokens\n  // in each direction for winning condition.\n  const DIRECTION_DELTAS = [\n    [0, 1], // Horizontal\n    [1, 0], // Vertical\n    [1, -1], // Diagonal (bottom left to top right)\n    [1, 1], // Diagonal (top left to bottom right)\n  ];\n\n  // Generate initial game grid.\n  function getInitialGrid() {\n    return Array(ROWS)\n      .fill(null)\n      .map(() => Array(COLS).fill(null));\n  }\n\n  // Check if a player has won.\n  function checkIfPlayerWon(grid, row, col, player) {\n    return DIRECTION_DELTAS.some(([deltaRow, deltaCol]) => {\n      // Count the maximum consecutive discs for the\n      // player in the 4 different directions.\n      let consecutiveDiscs = 0;\n      let maxConsecutiveDiscs = 0;\n\n      for (\n        let i = -COUNT_TO_WIN + 1;\n        i <= COUNT_TO_WIN - 1;\n        i++\n      ) {\n        const currRow = row + deltaRow * i;\n        const currCol = col + deltaCol * i;\n\n        if (grid?.[currRow]?.[currCol] === player) {\n          consecutiveDiscs += 1;\n          maxConsecutiveDiscs = Math.max(\n            consecutiveDiscs,\n            maxConsecutiveDiscs,\n          );\n        } else {\n          consecutiveDiscs = 0;\n        }\n      }\n\n      return maxConsecutiveDiscs >= COUNT_TO_WIN;\n    });\n  }\n\n  let grid = getInitialGrid();\n  let currentPlayerIndex = 0;\n  let winner = null;\n  let currentColumn = null;\n\n  function handlePlayerMove(column) {\n    let rowToPlace = ROWS - 1;\n    // Find lowest row in current column that is empty.\n    while (grid[rowToPlace][column] != null) {\n      rowToPlace--;\n    }\n\n    const player = PLAYERS[currentPlayerIndex];\n    grid[rowToPlace][column] = player;\n    if (\n      checkIfPlayerWon(grid, rowToPlace, column, player)\n    ) {\n      winner = player;\n    }\n\n    // Go to the next player.\n    currentPlayerIndex =\n      (currentPlayerIndex + 1) % PLAYERS.length;\n  }\n\n  function handleColumnHover(index) {\n    currentColumn = index;\n  }\n\n  function restart() {\n    grid = getInitialGrid();\n    currentColumn = null;\n    currentPlayerIndex = 0;\n    winner = null;\n  }\n\n  $: movesSoFar = grid.reduce(\n    (count, row) => count + row.filter(Boolean).length,\n    0,\n  );\n  $: isDraw = movesSoFar === ROWS * COLS && winner == null;\n  $: gameHasEnded = isDraw || winner != null;\n  $: availableColumns = new Set(\n    grid[0]\n      .map((piece, index) => (piece == null ? index : -1))\n      .filter((item) => item !== -1),\n  );\n</script>\n\n<div class=\"app\">\n  <PlayerMoveSection\n    {availableColumns}\n    {currentColumn}\n    {gameHasEnded}\n    currentPlayer={PLAYERS[currentPlayerIndex]}\n    on:column-hover={(event) =>\n      handleColumnHover(event.detail.index)}\n    on:player-move={(event) =>\n      handlePlayerMove(event.detail.index)} />\n\n  <GameGrid {grid} />\n\n  <button on:click={restart} class=\"reset-button\">\n    Reset\n  </button>\n\n  {#if isDraw}\n    <h2>DRAW</h2>\n  {/if}\n\n  {#if winner != null}\n    <WinnerSection {winner} />\n  {/if}\n</div>\n\n<style>\n  .app {\n    --grid-item-size: 50px;\n    --grid-item-gap: 10px;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .reset-button {\n    background-color: #ccc;\n    border: none;\n    padding-block: 8px;\n    padding-inline: 16px;\n    font-weight: 600;\n    border-radius: 16px;\n    cursor: pointer;\n    margin-block: var(--grid-item-gap);\n  }\n</style>\n"
    },
    "/src/const.js": {
      "code": "export const ROWS = 6;\nexport const COLS = 7;\n\nexport const PLAYER_TOKENS = {\n  red: '#d9313d',\n  yellow: '#fdc601',\n};\n"
    },
    "/src/GameGrid.svelte": {
      "code": "<script>\n  import { COLS, PLAYER_TOKENS, ROWS } from './const';\n\n  const EMPTY_CELL = '#fff';\n\n  export let grid;\n</script>\n\n<div\n  class=\"grid\"\n  style:grid-template-rows={`repeat(${ROWS}, var(--grid-item-size))`}\n  style:grid-template-columns={`repeat(${COLS}, var(--grid-item-size))`}>\n  {#each grid as rows, rowIndex (rowIndex)}\n    {#each rows as cellValue, colIndex (colIndex)}\n      <div\n        style:background-color={cellValue != null\n          ? PLAYER_TOKENS[cellValue]\n          : EMPTY_CELL}\n        class=\"grid-item\" />\n    {/each}\n  {/each}\n</div>\n\n<style>\n  .grid {\n    display: grid;\n    grid-template-rows: repeat(6, var(--grid-item-size));\n    grid-template-columns: repeat(7, var(--grid-item-size));\n    background-color: #1c61f2;\n    border-radius: 16px;\n    padding: var(--grid-item-gap);\n    gap: var(--grid-item-gap);\n  }\n\n  .grid-item {\n    border-radius: 100%;\n    transition: background-color 0.25s linear;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/PlayerMoveSection.svelte": {
      "code": "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { COLS, PLAYER_TOKENS } from './const';\n  export let availableColumns;\n  export let currentColumn;\n  export let currentPlayer;\n  export let gameHasEnded;\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<div class=\"player-move-section\">\n  {#each { length: COLS } as _, index (index)}\n    <button\n      aria-label={`Column ${index + 1}`}\n      disabled={!availableColumns.has(index) ||\n        gameHasEnded}\n      style:background-color={currentColumn === index &&\n      !gameHasEnded\n        ? PLAYER_TOKENS[currentPlayer]\n        : undefined}\n      class=\"player-move-column\"\n      on:mouseenter={() =>\n        dispatch('column-hover', { index })}\n      on:click={() => dispatch('player-move', { index })} />\n  {/each}\n</div>\n\n<style>\n  .player-move-section {\n    display: flex;\n    align-items: center;\n    padding: var(--grid-item-gap);\n    gap: var(--grid-item-gap);\n  }\n\n  .player-move-column {\n    background-color: transparent;\n    height: var(--grid-item-size);\n    width: var(--grid-item-size);\n    border-radius: 100%;\n    transition: background-color 0.1s linear;\n    outline: none;\n    border: none;\n    cursor: pointer;\n  }\n</style>\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n"
    },
    "/src/WinnerSection.svelte": {
      "code": "<script>\n  import { PLAYER_TOKENS } from './const';\n  export let winner;\n</script>\n\n<div\n  class=\"winner-token\"\n  style:background-color={PLAYER_TOKENS[winner]}>\n  WON\n</div>\n\n<style>\n  .winner-token {\n    height: var(--grid-item-size);\n    width: var(--grid-item-size);\n    border-radius: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 12px;\n    font-weight: 600;\n  }\n</style>\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  }
}