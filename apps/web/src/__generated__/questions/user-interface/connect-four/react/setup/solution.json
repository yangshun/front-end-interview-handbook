{
  "author": "utpal-d4l",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.tsx\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.tsx\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/connect-four-react-solution\",\n  \"author\": \"utpal-d4l\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import React, { useState } from 'react';\n\nconst ROWS = 6;\nconst COLS = 7;\nconst COUNT_TO_WIN = 4;\n\nconst PLAYERS = ['red', 'yellow'] as const;\ntype Player = (typeof PLAYERS)[number];\ntype CurrentPlayerIndex = number;\n\nconst EMPTY_CELL = '#fff';\n\nconst PLAYER_TOKENS: Record<Player, string> = {\n  red: '#d9313d',\n  yellow: '#fdc601',\n};\n\n// Direction deltas for horizontal, vertical and diagonal\n// directions.\n// The first value is the row delta, second value is the column delta.\n// These will be used to check if there are N consecutive tokens\n// in each direction for winning condition.\nconst DIRECTION_DELTAS = [\n  [0, 1], // Horizontal\n  [1, 0], // Vertical\n  [1, -1], // Diagonal (bottom left to top right)\n  [1, 1], // Diagonal (top left to bottom right)\n];\n\n// Game grid data structure.\ntype GameGridCellValue = Player | null;\ntype GameGridType = Array<Array<GameGridCellValue>>;\n\n// Generate initial game grid.\nfunction getInitialGrid(): GameGridType {\n  return Array(ROWS)\n    .fill(null)\n    .map(() => Array(COLS).fill(null));\n}\n\n// Check if a player has won.\nfunction checkIfPlayerWon(\n  grid: GameGridType,\n  row: number,\n  col: number,\n  player: Player,\n): boolean {\n  return DIRECTION_DELTAS.some(([deltaRow, deltaCol]) => {\n    // Count the maximum consecutive discs for the\n    // player in the 4 different directions.\n    let consecutiveDiscs = 0;\n    let maxConsecutiveDiscs = 0;\n\n    for (\n      let i = -COUNT_TO_WIN + 1;\n      i <= COUNT_TO_WIN - 1;\n      i++\n    ) {\n      const currRow = row + deltaRow * i;\n      const currCol = col + deltaCol * i;\n\n      if (grid?.[currRow]?.[currCol] === player) {\n        consecutiveDiscs += 1;\n        maxConsecutiveDiscs = Math.max(\n          consecutiveDiscs,\n          maxConsecutiveDiscs,\n        );\n      } else {\n        consecutiveDiscs = 0;\n      }\n    }\n\n    return maxConsecutiveDiscs >= COUNT_TO_WIN;\n  });\n}\n\n// Player section component where player can\n// select a column to drop their piece.\nfunction PlayerMoveSection({\n  availableColumns,\n  currentColumn,\n  currentPlayer,\n  gameHasEnded,\n  onColumnHover,\n  onPlayerMove,\n}: {\n  availableColumns: Set<number>;\n  currentColumn: number | null;\n  currentPlayer: Player;\n  gameHasEnded: boolean;\n  onColumnHover: (column: number) => void;\n  onPlayerMove: (column: number) => void;\n}): React.ReactElement {\n  return (\n    <div className=\"player-move-section\">\n      {Array.from({ length: COLS }).map((_, index) => (\n        <button\n          aria-label={`Column ${index + 1}`}\n          disabled={\n            !availableColumns.has(index) || gameHasEnded\n          }\n          key={index}\n          style={{\n            backgroundColor:\n              currentColumn === index && !gameHasEnded\n                ? PLAYER_TOKENS[currentPlayer]\n                : undefined,\n          }}\n          className=\"player-move-column\"\n          onMouseEnter={() => onColumnHover(index)}\n          onClick={() => onPlayerMove(index)}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction GameGrid({\n  grid,\n}: {\n  grid: GameGridType;\n}): React.ReactElement {\n  return (\n    <div\n      className=\"grid\"\n      style={{\n        gridTemplateRows: `repeat(${ROWS}, var(--grid-item-size))`,\n        gridTemplateColumns: `repeat(${COLS}, var(--grid-item-size)`,\n      }}>\n      {grid.map((rows, rowIndex) =>\n        rows.map((cellValue, colIndex) => (\n          <div\n            key={`${rowIndex}-${colIndex}`}\n            style={{\n              backgroundColor:\n                cellValue != null\n                  ? PLAYER_TOKENS[cellValue]\n                  : EMPTY_CELL,\n            }}\n            className=\"grid-item\"\n          />\n        )),\n      )}\n    </div>\n  );\n}\n\n// Winner details component.\nfunction WinnerSection({\n  winner,\n}: {\n  winner: Player;\n}): React.ReactElement {\n  return (\n    <div\n      className=\"winner-token\"\n      style={{ backgroundColor: PLAYER_TOKENS[winner] }}>\n      WON\n    </div>\n  );\n}\n\nexport default function App() {\n  // State to handle game grid state.\n  const [grid, setGrid] = useState<GameGridType>(() =>\n    getInitialGrid(),\n  );\n  // Current player index.\n  const [currentPlayerIndex, setCurrentPlayerIndex] =\n    useState<CurrentPlayerIndex>(0);\n  // Winner state. It will be player's index if there's a winner.\n  const [winner, setWinner] = useState<Player | null>(null);\n\n  // State to handle current column selected by the current player.\n  const [currentColumn, setCurrentColumn] = useState<\n    number | null\n  >(null);\n\n  function onPlayerMove(column: number) {\n    // Make a deep clone of the grid.\n    const newGrid = grid.map((row) => [...row]);\n\n    let rowToPlace = ROWS - 1;\n    // Find lowest row in current column that is empty.\n    while (newGrid[rowToPlace][column] != null) {\n      rowToPlace--;\n    }\n\n    const player = PLAYERS[currentPlayerIndex];\n    newGrid[rowToPlace][column] = player;\n    if (\n      checkIfPlayerWon(newGrid, rowToPlace, column, player)\n    ) {\n      setWinner(player);\n    }\n\n    // Go to the next player.\n    setCurrentPlayerIndex(\n      (currentPlayerIndex + 1) % PLAYERS.length,\n    );\n    setGrid(newGrid);\n  }\n\n  function onColumnHover(index: number) {\n    setCurrentColumn(index);\n  }\n\n  function onRestart() {\n    setGrid(getInitialGrid());\n    setCurrentColumn(null);\n    setCurrentPlayerIndex(0);\n    setWinner(null);\n  }\n\n  const movesSoFar = grid.reduce(\n    (count, row) => count + row.filter(Boolean).length,\n    0,\n  );\n  const isDraw =\n    movesSoFar === ROWS * COLS && winner == null;\n  const gameHasEnded = isDraw || winner != null;\n  const availableColumns = new Set(\n    grid[0]\n      .map((piece, index) => (piece == null ? index : -1))\n      .filter((item) => item !== -1),\n  );\n\n  return (\n    <div className=\"app\">\n      <PlayerMoveSection\n        availableColumns={availableColumns}\n        currentColumn={currentColumn}\n        currentPlayer={PLAYERS[currentPlayerIndex]}\n        gameHasEnded={gameHasEnded}\n        onColumnHover={onColumnHover}\n        onPlayerMove={onPlayerMove}\n      />\n      <GameGrid grid={grid} />\n      <button onClick={onRestart} className=\"reset-button\">\n        Reset\n      </button>\n      {isDraw && <h2>DRAW</h2>}\n      {winner != null && <WinnerSection winner={winner} />}\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.app {\n  --grid-item-size: 50px;\n  --grid-item-gap: 10px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.player-move-section {\n  display: flex;\n  align-items: center;\n  padding: var(--grid-item-gap);\n  gap: var(--grid-item-gap);\n}\n\n.player-move-column {\n  background-color: transparent;\n  height: var(--grid-item-size);\n  width: var(--grid-item-size);\n  border-radius: 100%;\n  transition: background-color 0.1s linear;\n  outline: none;\n  border: none;\n  cursor: pointer;\n}\n\n.grid {\n  display: grid;\n  grid-template-rows: repeat(6, var(--grid-item-size));\n  grid-template-columns: repeat(7, var(--grid-item-size));\n  background-color: #1c61f2;\n  border-radius: 16px;\n  padding: var(--grid-item-gap);\n  gap: var(--grid-item-gap);\n}\n\n.grid-item {\n  border-radius: 100%;\n  transition: background-color 0.25s linear;\n}\n\n.winner-token {\n  height: var(--grid-item-size);\n  width: var(--grid-item-size);\n  border-radius: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.reset-button {\n  background-color: #ccc;\n  border: none;\n  padding-block: 8px;\n  padding-inline: 16px;\n  font-weight: 600;\n  border-radius: 16px;\n  cursor: pointer;\n  margin-block: var(--grid-item-gap);\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.tsx",
    "environment": "create-react-app"
  }
}