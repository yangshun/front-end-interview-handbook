{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.vue\"],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/connect-four-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { computed, ref } from 'vue';\n\nimport GameGrid from './GameGrid.vue';\nimport PlayerMoveSection from './PlayerMoveSection.vue';\nimport WinnerSection from './WinnerSection.vue';\n\nimport { COLS, ROWS } from './const';\n\nconst COUNT_TO_WIN = 4;\nconst PLAYERS = ['red', 'yellow'];\n\n// Direction deltas for horizontal, vertical and diagonal\n// directions.\n// The first value is the row delta, second value is the column delta.\n// These will be used to check if there are N consecutive tokens\n// in each direction for winning condition.\nconst DIRECTION_DELTAS = [\n  [0, 1], // Horizontal\n  [1, 0], // Vertical\n  [1, -1], // Diagonal (bottom left to top right)\n  [1, 1], // Diagonal (top left to bottom right)\n];\n\n// Generate initial game grid.\nfunction getInitialGrid() {\n  return Array(ROWS)\n    .fill(null)\n    .map(() => Array(COLS).fill(null));\n}\n\n// Check if a player has won.\nfunction checkIfPlayerWon(grid, row, col, player) {\n  return DIRECTION_DELTAS.some(([deltaRow, deltaCol]) => {\n    // Count the maximum consecutive discs for the\n    // player in the 4 different directions.\n    let consecutiveDiscs = 0;\n    let maxConsecutiveDiscs = 0;\n\n    for (\n      let i = -COUNT_TO_WIN + 1;\n      i <= COUNT_TO_WIN - 1;\n      i++\n    ) {\n      const currRow = row + deltaRow * i;\n      const currCol = col + deltaCol * i;\n\n      if (grid?.[currRow]?.[currCol] === player) {\n        consecutiveDiscs += 1;\n        maxConsecutiveDiscs = Math.max(\n          consecutiveDiscs,\n          maxConsecutiveDiscs,\n        );\n      } else {\n        consecutiveDiscs = 0;\n      }\n    }\n\n    return maxConsecutiveDiscs >= COUNT_TO_WIN;\n  });\n}\n\nconst grid = ref(getInitialGrid());\nconst currentPlayerIndex = ref(0);\nconst winner = ref(null);\nconst currentColumn = ref(null);\n\nfunction handlePlayerMove(column) {\n  let rowToPlace = ROWS - 1;\n  // Find lowest row in current column that is empty.\n  while (grid.value[rowToPlace][column] != null) {\n    rowToPlace--;\n  }\n\n  const player = PLAYERS[currentPlayerIndex.value];\n  grid.value[rowToPlace][column] = player;\n  if (\n    checkIfPlayerWon(grid.value, rowToPlace, column, player)\n  ) {\n    winner.value = player;\n  }\n\n  // Go to the next player.\n  currentPlayerIndex.value =\n    (currentPlayerIndex.value + 1) % PLAYERS.length;\n}\n\nfunction handleColumnHover(index) {\n  currentColumn.value = index;\n}\n\nfunction restart() {\n  grid.value = getInitialGrid();\n  currentColumn.value = null;\n  currentPlayerIndex.value = 0;\n  winner.value = null;\n}\n\nconst movesSoFar = computed(() =>\n  grid.value.reduce(\n    (count, row) => count + row.filter(Boolean).length,\n    0,\n  ),\n);\n\nconst isDraw = computed(\n  () =>\n    movesSoFar.value === ROWS * COLS &&\n    winner.value == null,\n);\n\nconst gameHasEnded = computed(\n  () => isDraw.value || winner.value != null,\n);\n\nconst availableColumns = computed(\n  () =>\n    new Set(\n      grid.value[0]\n        .map((piece, index) => (piece == null ? index : -1))\n        .filter((item) => item !== -1),\n    ),\n);\n</script>\n\n<template>\n  <div class=\"app\">\n    <PlayerMoveSection\n      :availableColumns=\"availableColumns\"\n      :currentColumn=\"currentColumn\"\n      :gameHasEnded=\"gameHasEnded\"\n      :currentPlayer=\"PLAYERS[currentPlayerIndex]\"\n      @column-hover=\"(index) => handleColumnHover(index)\"\n      @player-move=\"(index) => handlePlayerMove(index)\" />\n\n    <GameGrid :grid=\"grid\" />\n\n    <button @click=\"restart\" class=\"reset-button\">\n      Reset\n    </button>\n\n    <h2 v-if=\"isDraw\">DRAW</h2>\n\n    <WinnerSection v-if=\"winner != null\" :winner=\"winner\" />\n  </div>\n</template>\n\n<style>\n.app {\n  --grid-item-size: 50px;\n  --grid-item-gap: 10px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.reset-button {\n  background-color: #ccc;\n  border: none;\n  padding-block: 8px;\n  padding-inline: 16px;\n  font-weight: 600;\n  border-radius: 16px;\n  cursor: pointer;\n  margin-block: var(--grid-item-gap);\n}\n</style>\n"
    },
    "/src/const.js": {
      "code": "export const ROWS = 6;\nexport const COLS = 7;\n\nexport const PLAYER_TOKENS = {\n  red: '#d9313d',\n  yellow: '#fdc601',\n};\n"
    },
    "/src/GameGrid.vue": {
      "code": "<script setup>\nimport { COLS, PLAYER_TOKENS, ROWS } from './const';\n\nconst EMPTY_CELL = '#fff';\n\ndefineProps({\n  grid: Array,\n});\n</script>\n\n<template>\n  <div\n    class=\"grid\"\n    :style=\"{\n      'grid-template-rows': `repeat(${ROWS}, var(--grid-item-size))`,\n      'grid-template-columns': `repeat(${COLS}, var(--grid-item-size))`,\n    }\">\n    <template v-for=\"row in grid\">\n      <div\n        v-for=\"(cellValue, cellIndex) in row\"\n        :key=\"cellIndex\"\n        :style=\"{\n          'background-color':\n            cellValue != null\n              ? PLAYER_TOKENS[cellValue]\n              : EMPTY_CELL,\n        }\"\n        class=\"grid-item\" />\n    </template>\n  </div>\n</template>\n\n<style>\n.grid {\n  display: grid;\n  grid-template-rows: repeat(6, var(--grid-item-size));\n  grid-template-columns: repeat(7, var(--grid-item-size));\n  background-color: #1c61f2;\n  border-radius: 16px;\n  padding: var(--grid-item-gap);\n  gap: var(--grid-item-gap);\n}\n\n.grid-item {\n  border-radius: 100%;\n  transition: background-color 0.25s linear;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/PlayerMoveSection.vue": {
      "code": "<script setup>\nimport { COLS, PLAYER_TOKENS } from './const';\n\ndefineProps({\n  availableColumns: Set,\n  currentColumn: Number,\n  currentPlayer: Number,\n  gameHasEnded: Boolean,\n});\n</script>\n\n<template>\n  <div class=\"player-move-section\">\n    <button\n      v-for=\"(_, index) in COLS\"\n      :key=\"index\"\n      :aria-label=\"`Column ${index + 1}`\"\n      :disabled=\"\n        !availableColumns.has(index) || gameHasEnded\n      \"\n      :style=\"{\n        'background-color':\n          currentColumn === index && !gameHasEnded\n            ? PLAYER_TOKENS[currentPlayer]\n            : undefined,\n      }\"\n      class=\"player-move-column\"\n      @mouseenter=\"$emit('column-hover', index)\"\n      @click=\"$emit('player-move', index)\" />\n  </div>\n</template>\n\n<style>\n.player-move-section {\n  display: flex;\n  align-items: center;\n  padding: var(--grid-item-gap);\n  gap: var(--grid-item-gap);\n}\n\n.player-move-column {\n  background-color: transparent;\n  height: var(--grid-item-size);\n  width: var(--grid-item-size);\n  border-radius: 100%;\n  transition: background-color 0.1s linear;\n  outline: none;\n  border: none;\n  cursor: pointer;\n}\n</style>\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n"
    },
    "/src/WinnerSection.vue": {
      "code": "<script setup>\nimport { PLAYER_TOKENS } from './const';\n\ndefineProps({\n  winner: String,\n});\n</script>\n\n<template>\n  <div\n    class=\"winner-token\"\n    :style=\"{ 'background-color': PLAYER_TOKENS[winner] }\">\n    WON\n  </div>\n</template>\n\n<style>\n.winner-token {\n  height: var(--grid-item-size);\n  width: var(--grid-item-size);\n  border-radius: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n}\n</style>\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}