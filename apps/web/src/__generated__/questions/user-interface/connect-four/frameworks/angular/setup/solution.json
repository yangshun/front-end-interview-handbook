{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/app/app.component.ts\",\n    \"/src/app/app.module.ts\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/app/app.component.ts\",\n  \"environment\": \"angular-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/connect-four-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <app-connect-four\n      [rows]=\"6\"\n      [cols]=\"7\"\n      [countToWin]=\"4\">\n    </app-connect-four>\n  `,\n})\nexport class AppComponent {}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { ConnectFourComponent } from './connect-four.component';\n\n@NgModule({\n  declarations: [AppComponent, ConnectFourComponent],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/connect-four.component.html": {
      "code": "<div class=\"app\">\n  <div class=\"player-move-section\">\n    <button\n      *ngFor=\"let column of columns; let i = index\"\n      [disabled]=\"!availableColumns.has(i) || gameHasEnded\"\n      (mouseenter)=\"onColumnHover(i)\"\n      class=\"player-move-column\"\n      (click)=\"onPlayerMove(i)\"\n      [style.background-color]=\"\n        currentColumn === i && !gameHasEnded\n          ? playerTokens[players[currentPlayerIndex]]\n          : undefined\n      \"></button>\n  </div>\n\n  <div\n    class=\"grid\"\n    [style.grid-template-rows]=\"\n      'repeat(' + rows + ', var(--grid-item-size))'\n    \"\n    [style.grid-template-columns]=\"\n      'repeat(' + cols + ', var(--grid-item-size))'\n    \">\n    <ng-container *ngFor=\"let row of grid\">\n      <div\n        class=\"grid-item\"\n        *ngFor=\"let cell of row\"\n        [style.background-color]=\"\n          cell ? playerTokens[cell] : emptyCell\n        \"></div>\n    </ng-container>\n  </div>\n  <button class=\"reset-button\" (click)=\"onRestart()\">\n    Reset\n  </button>\n  <div\n    *ngIf=\"winner\"\n    class=\"winner-token\"\n    [style.background-color]=\"playerTokens[winner]\">\n    WON\n  </div>\n  <h2 *ngIf=\"isDraw\">DRAW</h2>\n</div>\n"
    },
    "/src/app/connect-four.component.ts": {
      "code": "import { Component, Input, OnInit } from '@angular/core';\n\ntype Player = 'red' | 'yellow';\n\n// Game grid data structure.\ntype GameGridCellValue = Player | null;\ntype GameGridType = Array<Array<GameGridCellValue>>;\n\n@Component({\n  selector: 'app-connect-four',\n  templateUrl: './connect-four.component.html',\n})\nexport class ConnectFourComponent implements OnInit {\n  @Input()\n  rows = 6;\n\n  @Input()\n  cols = 7;\n\n  @Input()\n  countToWin = 4;\n\n  players: Player[] = ['red', 'yellow'];\n  currentPlayerIndex = 0;\n  winner: Player | null = null;\n  currentColumn: number | null = null;\n  emptyCell = '#fff';\n  playerTokens: Record<Player, string> = {\n    red: '#d9313d',\n    yellow: '#fdc601',\n  };\n\n  // Direction deltas for horizontal, vertical and diagonal\n  // directions.\n  // The first value is the row delta, second value is the column delta.\n  // These will be used to check if there are N consecutive tokens\n  // in each direction for winning condition.\n  directionDeltas = [\n    [0, 1], // Horizontal\n    [1, 0], // Vertical\n    [1, -1], // Diagonal (bottom left to top right)\n    [1, 1], // Diagonal (top left to bottom right)\n  ];\n\n  grid: GameGridType = Array(this.rows)\n    .fill(null)\n    .map(() => Array(this.cols).fill(null));\n\n  availableColumns = new Set<number>();\n\n  get gameHasEnded(): boolean {\n    return this.isDraw || this.winner != null;\n  }\n\n  get isDraw() {\n    return (\n      this.grid.every((row) =>\n        row.every((cell) => cell != null),\n      ) && !this.winner\n    );\n  }\n\n  columns = Array.from(\n    { length: this.cols },\n    (_, index) => index,\n  );\n\n  ngOnInit() {\n    this.calculateAvailableColumns();\n  }\n\n  calculateAvailableColumns() {\n    this.availableColumns.clear();\n    for (let i = 0; i < this.cols; i++) {\n      if (this.grid[0][i] == null) {\n        this.availableColumns.add(i);\n      }\n    }\n  }\n\n  checkIfPlayerWon(\n    row: number,\n    col: number,\n    player: string,\n  ): boolean {\n    for (let [deltaRow, deltaCol] of this.directionDeltas) {\n      let consecutive = 0;\n      for (\n        let i = -this.countToWin + 1;\n        i <= this.countToWin - 1;\n        i++\n      ) {\n        const currRow = row + deltaRow * i;\n        const currCol = col + deltaCol * i;\n        if (\n          currRow >= 0 &&\n          currRow < this.rows &&\n          currCol >= 0 &&\n          currCol < this.cols &&\n          this.grid[currRow][currCol] === player\n        ) {\n          consecutive++;\n          if (consecutive >= this.countToWin) {\n            return true;\n          }\n        } else {\n          consecutive = 0;\n        }\n      }\n    }\n    return false;\n  }\n\n  onPlayerMove(col: number) {\n    let row = this.rows - 1;\n    while (row >= 0 && this.grid[row][col] != null) {\n      row--;\n    }\n    const player = this.players[this.currentPlayerIndex];\n    this.grid[row][col] = player;\n    if (this.checkIfPlayerWon(row, col, player)) {\n      this.winner = player;\n    }\n    this.currentPlayerIndex =\n      (this.currentPlayerIndex + 1) % this.players.length;\n    this.calculateAvailableColumns();\n  }\n\n  onColumnHover(index: number) {\n    this.currentColumn = index;\n  }\n\n  onRestart() {\n    this.grid = Array.from({ length: this.rows }, () =>\n      new Array(this.cols).fill(null),\n    );\n    this.currentPlayerIndex = 0;\n    this.winner = null;\n    this.currentColumn = null;\n    this.calculateAvailableColumns();\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.app {\n  --grid-item-size: 50px;\n  --grid-item-gap: 10px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.player-move-section {\n  display: flex;\n  align-items: center;\n  padding: var(--grid-item-gap);\n  gap: var(--grid-item-gap);\n}\n\n.player-move-column {\n  border: 1px solid #e3e3e3;\n  background-color: transparent;\n  height: var(--grid-item-size);\n  width: var(--grid-item-size);\n  border-radius: 100%;\n  transition: background-color 0.1s linear;\n  outline: none;\n  cursor: pointer;\n}\n\n.grid {\n  display: grid;\n  grid-template-rows: repeat(6, var(--grid-item-size));\n  grid-template-columns: repeat(7, var(--grid-item-size));\n  background-color: #1c61f2;\n  border-radius: 16px;\n  padding: var(--grid-item-gap);\n  gap: var(--grid-item-gap);\n}\n\n.grid-item {\n  border-radius: 100%;\n  transition: background-color 0.25s linear;\n}\n\n.winner-token {\n  height: var(--grid-item-size);\n  width: var(--grid-item-size);\n  border-radius: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 12px;\n  font-weight: 600;\n}\n\n.reset-button {\n  background-color: #ccc;\n  border: none;\n  padding-block: 8px;\n  padding-inline: 16px;\n  font-weight: 600;\n  border-radius: 16px;\n  cursor: pointer;\n  margin-block: var(--grid-item-gap);\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.module.ts",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  }
}