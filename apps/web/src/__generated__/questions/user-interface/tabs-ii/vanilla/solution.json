{
  "author": "yangshun",
  "files": {
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"tabs\"></div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/tabs-ii-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  // Encapsulate the ID generation so that it can only\n  // be read and is protected from external modification.\n  const newID = (() => {\n    let id = 0;\n    return () => id++;\n  })();\n\n  function getTabListItemId(tabsId, value) {\n    return tabsId + '-tab-' + value;\n  }\n\n  function getTabPanelId(tabsId, value) {\n    return tabsId + '-tabpanel-' + value;\n  }\n\n  function tabs(\n    $rootEl,\n    { defaultValue, items: itemsParam },\n  ) {\n    const DOM = {\n      $tabBar: document.createElement('div'),\n      $tabpanels: document.createElement('div'),\n    };\n\n    const items = itemsParam;\n    const state = {\n      value: defaultValue || items[0].value,\n    };\n    const tabsId = `tabs-${newID()}`;\n\n    function update() {\n      const $tabsFragment =\n        document.createDocumentFragment();\n      items.forEach(({ label, value: itemValue }) => {\n        const $tabEl = document.createElement('button');\n        const isTabActive = itemValue === state.value;\n\n        $tabEl.textContent = label;\n        $tabEl.type = 'button';\n        $tabEl.role = 'tab';\n        $tabEl.setAttribute('data-value', itemValue);\n        $tabEl.id = getTabListItemId(tabsId, itemValue);\n        $tabEl.setAttribute(\n          'aria-controls',\n          getTabPanelId(tabsId, itemValue),\n        );\n        $tabEl.classList.add('tabs-list-item');\n\n        $tabEl.setAttribute('aria-selected', isTabActive);\n        if (isTabActive) {\n          $tabEl.classList.add('tabs-list-item--active');\n        }\n\n        $tabsFragment.appendChild($tabEl);\n      });\n\n      DOM.$tabBar.innerHTML = '';\n      DOM.$tabBar.appendChild($tabsFragment);\n\n      const $tabpanelsFragment =\n        document.createDocumentFragment();\n      items.forEach(({ panel, value: itemValue }) => {\n        const isTabActive = itemValue === state.value;\n\n        const $tabpanelEl = document.createElement('div');\n        $tabpanelEl.role = 'tabpanel';\n        $tabpanelEl.id = getTabPanelId(tabsId, itemValue);\n        $tabpanelEl.setAttribute(\n          'aria-labelledby',\n          getTabListItemId(tabsId, itemValue),\n        );\n        $tabpanelEl.textContent = panel;\n        $tabpanelEl.hidden = !isTabActive;\n\n        $tabpanelsFragment.appendChild($tabpanelEl);\n      });\n\n      DOM.$tabpanels.innerHTML = '';\n      DOM.$tabpanels.appendChild($tabpanelsFragment);\n    }\n\n    function attachEvents() {\n      // Use Event Delegation.\n      DOM.$tabBar.addEventListener('click', (event) => {\n        if (event.target.tagName !== 'BUTTON') {\n          return;\n        }\n\n        state.value =\n          event.target.getAttribute('data-value');\n        update();\n      });\n    }\n\n    function init() {\n      $rootEl.classList.add('tabs');\n\n      DOM.$tabBar.className = 'tabs-list';\n      DOM.$tabBar.role = 'tabslist';\n      $rootEl.appendChild(DOM.$tabBar);\n\n      $rootEl.appendChild(DOM.$tabpanels);\n    }\n\n    init();\n    update();\n    attachEvents();\n  }\n\n  tabs(document.getElementById('tabs'), {\n    items: [\n      {\n        value: 'html',\n        label: 'HTML',\n        panel:\n          'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n      },\n      {\n        value: 'css',\n        label: 'CSS',\n        panel:\n          'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n      },\n      {\n        value: 'javascript',\n        label: 'JavaScript',\n        panel:\n          'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n      },\n    ],\n  });\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.tabs {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.tabs-list {\n  display: flex;\n  gap: 6px;\n}\n\n.tabs-list-item {\n  --active-color: blueviolet;\n\n  background: none;\n  border: 1px solid #000;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 6px 10px;\n}\n\n.tabs-list-item:hover {\n  border-color: var(--active-color);\n  color: var(--active-color);\n}\n\n.tabs-list-item--active,\n.tabs-list-item--active:hover {\n  border-color: var(--active-color);\n  background-color: var(--active-color);\n  color: #fff;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var c=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var s in e)c(t,s,{get:e[s],enumerable:!0})},d=(t,e,s,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of I(e))!T.call(t,r)&&r!==s&&c(t,r,{get:()=>e[r],enumerable:!(h=x(e,r))||h.enumerable});return t};var l=(t,e,s)=>(s=t!=null?w(j(t)):{},d(e||!t||!t.__esModule?c(s,\"default\",{value:t,enumerable:!0}):s,t)),D=t=>d(c({},\"__esModule\",{value:!0}),t);var o=_((R,u)=>{u.exports=_jsx_runtime});var O={};y(O,{default:()=>q});var n=l(o());var i=l(o());function b(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Inspect the rendered HTML to see that the right attributes were added to the DOM.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"You can go a step further by using accessibility testing tools like \",(0,i.jsx)(e.a,{href:\"https://www.deque.com/axe/\",children:\"axe\"}),\" to validate the a11y of the elements.\"]}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(b,t)})):b(t)}var m=v;var a=l(o());function f(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\"},t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:\"Accessibility (A11y)\"}),`\n`,(0,a.jsxs)(e.p,{children:[\"We're not totally done with accessibility yet, there's still keyboard support to add, which will be covered in \",(0,a.jsx)(e.a,{href:\"/questions/user-interface/tabs-iii\",children:\"Tabs III\"}),\".\"]}),`\n`,(0,a.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/\",children:\"Tabs Patterns | ARIA Authoring Practices Guide\"})}),`\n`,(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:\"https://www.radix-ui.com/primitives/docs/components/tabs\",children:\"Tabs \\u2013 Radix Primitives\"})}),`\n`,(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/Tabs.html\",children:\"Tabs \\u2013 React Aria\"})}),`\n`,(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:\"https://headlessui.com/react/tabs\",children:\"Tabs - Headless UI\"})}),`\n`,(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:\"https://ariakit.org/components/tab\",children:\"Tab \\u2013 Ariakit\"})}),`\n`,(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:\"https://reach.tech/tabs\",children:\"Tabs | Reach UI\"})}),`\n`]})]})}function A(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(f,t)})):f(t)}var g=A;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tabs/vanilla/solution\",children:\"Tabs' solution\"}),\". Other than adding the right ARIA roles and states, which is straightforward, we also need to link the tab items with the corresponding tabpanels. Hence we create two functions, \",(0,n.jsx)(e.code,{children:\"getTabListItemId\"}),\" and \",(0,n.jsx)(e.code,{children:\"getTabPanelId\"}),\" to do this.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"getTabListItemId\"}),\" generates a unique ID string to use as the value of the \",(0,n.jsx)(e.code,{children:\"id\"}),\" attribute of tab items. This ID will be used as the value of the \",(0,n.jsx)(e.code,{children:\"aria-labelledby\"}),\" attribute of the corresponding tabpanel.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"getTabPanelId\"}),\" generates a unique ID string to use as the value of the \",(0,n.jsx)(e.code,{children:\"id\"}),\" attribute of tabpanels. This ID will be used as the value of the \",(0,n.jsx)(e.code,{children:\"aria-controls\"}),\" attribute of the corresponding tab item.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since there can be multiple tabs component instances on the page and we cannot guarantee that the tab item values will be globally unique, each tabs instance needs to have a unique identifier. We can create a \",(0,n.jsx)(e.code,{children:\"newID\"}),\" function that generates a unique ID which under the hood is a globally-incrementing integer. The final ID string will be a concatenation of the tab instance's ID, the item value, and whether it's a tab item or a tabpanel.\"]}),`\n`,(0,n.jsx)(m,{}),`\n`,(0,n.jsx)(g,{})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var q=M;return D(O);})();\n;return Component;"
}