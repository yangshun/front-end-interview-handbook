{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/traffic-light-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ".wrapper {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n"
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"wrapper\">\n  <app-traffic-light\n    [config]=\"config\"\n    initialColor=\"green\" />\n  <app-traffic-light\n    [config]=\"config\"\n    layout=\"horizontal\"\n    initialColor=\"green\" />\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\nimport { TrafficLightConfig } from './traffic-light.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  config: TrafficLightConfig<'red' | 'yellow' | 'green'> = {\n    red: {\n      backgroundColor: 'red',\n      duration: 4000,\n      order: 3,\n      next: 'green',\n    },\n    yellow: {\n      backgroundColor: 'yellow',\n      duration: 500,\n      order: 2,\n      next: 'red',\n    },\n    green: {\n      backgroundColor: 'green',\n      duration: 3000,\n      order: 1,\n      next: 'yellow',\n    },\n  };\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { TrafficLightComponent } from './traffic-light.component';\n\n@NgModule({\n  declarations: [AppComponent, TrafficLightComponent],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/traffic-light.component.css": {
      "code": ""
    },
    "/src/app/traffic-light.component.html": {
      "code": "<div\n  aria-live=\"polite\"\n  [attr.aria-label]=\"'Current light: ' + currentColor\"\n  [ngClass]=\"{\n    'traffic-light-container': true,\n    'traffic-light-container--vertical':\n      layout === 'vertical'\n  }\">\n  <div\n    *ngFor=\"\n      let color of config | keyvalue: trafficLightOrder\n    \"\n    [attr.aria-hidden]=\"true\"\n    class=\"traffic-light\"\n    [style.background-color]=\"\n      color.key === currentColor\n        ? config[color.key].backgroundColor\n        : undefined\n    \"></div>\n</div>\n"
    },
    "/src/app/traffic-light.component.ts": {
      "code": "import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n} from '@angular/core';\n\ntype DefaultColors = 'green' | 'yellow' | 'red';\n\ntype ColorConfig<Colors> = {\n  backgroundColor: string;\n  duration: number;\n  order: number;\n  next: Colors;\n};\nexport type TrafficLightConfig<\n  Colors extends DefaultColors,\n> = Record<Colors, ColorConfig<Colors>>;\n\n@Component({\n  selector: 'app-traffic-light',\n  templateUrl: './traffic-light.component.html',\n  styleUrls: ['./traffic-light.component.css'],\n})\nexport class TrafficLightComponent<\n    Colors extends DefaultColors,\n  >\n  implements OnInit, OnDestroy\n{\n  @Input({ required: true }) initialColor!: Colors;\n  @Input({ required: true })\n  config!: TrafficLightConfig<Colors>;\n  @Input() layout = 'vertical';\n\n  currentColor!: Colors;\n  timerId: ReturnType<typeof setInterval> | null = null;\n  trafficLightOrder = (\n    a: ColorConfig<Colors>,\n    b: ColorConfig<Colors>,\n  ) => (a.order > b.order ? -1 : 1);\n\n  ngOnInit() {\n    this.currentColor = this.initialColor;\n    this.updateLight();\n  }\n\n  ngOnDestroy() {\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  updateLight() {\n    const { duration, next } =\n      this.config[this.currentColor];\n\n    this.timerId = setTimeout(() => {\n      this.currentColor = next;\n      this.updateLight();\n    }, duration);\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "/* You can add global styles to this file, and also import other style files */\nbody {\n  font-family: sans-serif;\n}\n\n.traffic-light-container {\n  background-color: #000;\n  border-radius: 8px;\n  display: flex;\n  padding: 8px;\n  gap: 8px;\n}\n\n.traffic-light-container--vertical {\n  flex-direction: column;\n}\n\n.traffic-light {\n  --size: 50px;\n  background-color: #555;\n  border-radius: var(--size);\n  height: var(--size);\n  width: var(--size);\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/traffic-light.component.ts",
      "/src/app/traffic-light.component.html",
      "/src/app/app.component.ts",
      "/src/app/app.component.html"
    ],
    "activeFile": "/src/app/traffic-light.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var a=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},h=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of b(e))!w.call(t,c)&&c!==i&&a(t,c,{get:()=>e[c],enumerable:!(s=C(e,c))||s.enumerable});return t};var l=(t,e,i)=>(i=t!=null?x(v(t)):{},h(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),M=t=>h(a({},\"__esModule\",{value:!0}),t);var d=j((O,p)=>{p.exports=_jsx_runtime});var I={};_(I,{default:()=>F});var n=l(d());var r=l(d());function u(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Observe that each light show up for the specified duration.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Observe that the lights transition to the next state correctly after the specified duration.\"}),`\n`]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var g=T;var o=l(d());function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For a11y reasons, we add an \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" to the component to indicate the current light and \",(0,o.jsx)(e.code,{children:'aria-live=\"polite\"'}),\" to announce the current active light. The contents of the component (the lights) are for visual purposes and aren't important to screen readers, they can be hidden with \",(0,o.jsx)(e.code,{children:'aria-hidden=\"true\"'}),\".\"]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(m,t)})):m(t)}var f=k;function y(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.code,{children:\"AppComponent\"}),\", we define color configurations using the commonly used TypeScript \",(0,n.jsx)(e.code,{children:\"Record\"}),\" type, \",(0,n.jsx)(e.code,{children:\"Record<Colors, ColorConfig<Colors>>\"}),\" and pass that configuration into \",(0,n.jsx)(e.code,{children:\"TrafficLightComponent\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.code,{children:\"TrafficLightComponent\"}),\", during the \",(0,n.jsx)(e.code,{children:\"OnInit\"}),\" hook, we set \",(0,n.jsx)(e.code,{children:\"currentColor\"}),\" to the passed colors and invoke the \",(0,n.jsx)(e.code,{children:\"updateLight\"}),\" method. During the update, we perpetually run \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\" in a recursive manner. Upon entering the method, we destructure the config object and assign the \",(0,n.jsx)(e.code,{children:\"duration\"}),\" and \",(0,n.jsx)(e.code,{children:\"next\"}),\" variables. Then, we execute \",(0,n.jsx)(e.code,{children:\"setTimeout\"}),\" with the provided \",(0,n.jsx)(e.code,{children:\"duration\"}),\" and assign the \",(0,n.jsx)(e.code,{children:\"next\"}),\" color from our config as the current color. After that, we run the \",(0,n.jsx)(e.code,{children:\"updateLight()\"}),\" method again.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The rendering of this component is pretty straightforward and can be achieved with Flexbox. With Flexbox, it's also easy to change the layout of the lights from a vertical one to a horizontal one just by changing the \",(0,n.jsx)(e.code,{children:\"flex-direction\"}),\" property.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Models\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`type Layout = 'vertical' | 'horizontal';\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`type DefaultColors = 'green' | 'yellow' | 'red';\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note: Take a look how \",(0,n.jsx)(e.code,{children:\"Colors\"}),\" is related here and in \",(0,n.jsx)(e.code,{children:\"next\"}),\" field.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`type ColorConfig<Colors> = {\n  backgroundColor: string;\n  duration: number;\n  order: number;\n  next: Colors;\n};\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Main config type for traffic lights that requires \",(0,n.jsx)(e.code,{children:\"Record\"}),\" type (something like Map in JavaScript) where key has to be \",(0,n.jsx)(e.code,{children:\"Colors\"}),\" and value \",(0,n.jsx)(e.code,{children:\"ColorConfig<Colors>\"}),\" from previous type.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`export type TrafficLightConfig<\n  Colors extends DefaultColors,\n> = Record<Colors, ColorConfig<Colors>>;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You might create service for maintaining the state. Inject the service in smart component and crete dumb components that only display and interact with the UI and all events from dumb components are passed to the smart one.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,n.jsx)(e.code,{children:\"readonly\"}),\", \",(0,n.jsx)(e.code,{children:\"private\"}),\", \",(0,n.jsx)(e.code,{children:\"public\"}),\" and \",(0,n.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`,(0,n.jsx)(g,{}),`\n`,(0,n.jsx)(f,{}),`\n`]}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(y,t)})):y(t)}var F=D;return M(I);})();\n;return Component;"
}