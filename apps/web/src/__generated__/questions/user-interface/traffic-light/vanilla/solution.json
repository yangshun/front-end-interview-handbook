{
  "author": "yangshun",
  "files": {
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div id=\"traffic-light\"></div>\n      <div id=\"traffic-light-2\"></div>\n    </div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/traffic-light-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  const config = {\n    red: {\n      backgroundColor: 'red',\n      duration: 4000,\n      next: 'green',\n    },\n    yellow: {\n      backgroundColor: 'yellow',\n      duration: 500,\n      next: 'red',\n    },\n    green: {\n      backgroundColor: 'green',\n      duration: 3000,\n      next: 'yellow',\n    },\n  };\n\n  function light({ backgroundColor }) {\n    const $lightEl = document.createElement('div');\n    $lightEl.classList.add('traffic-light');\n    $lightEl.setAttribute('aria-hidden', true);\n\n    if (backgroundColor != null) {\n      $lightEl.style.backgroundColor = backgroundColor;\n    }\n    return $lightEl;\n  }\n\n  function trafficLight(\n    $rootEl,\n    { initialColor, config, layout },\n  ) {\n    let currentColor = initialColor;\n    const $containerEl = document.createElement('div');\n    $containerEl.classList.add('traffic-light-container');\n    $containerEl.setAttribute('aria-live', 'polite');\n    if (layout === 'vertical') {\n      $containerEl.classList.add(\n        'traffic-light-container--vertical',\n      );\n    }\n\n    let timer = null;\n\n    function setTransition() {\n      const { duration, next } = config[currentColor];\n      timer = setTimeout(() => {\n        currentColor = next;\n        renderLoop();\n      }, duration);\n    }\n\n    function render() {\n      $containerEl.innerHTML = '';\n      $containerEl.setAttribute(\n        'aria-label',\n        `Current light: ${currentColor}`,\n      );\n      Object.keys(config).map((color) => {\n        $containerEl.append(\n          light({\n            backgroundColor:\n              color === currentColor\n                ? config[color].backgroundColor\n                : undefined,\n          }),\n        );\n      });\n    }\n\n    function renderLoop() {\n      render();\n      setTransition();\n    }\n\n    // The beforeunload event is fired before the tab/window is closed.\n    // Clear the timer when the tab/window is about to be closed.\n    window.addEventListener('beforeunload', () => {\n      window.clearInterval(timer);\n    });\n\n    $rootEl.append($containerEl);\n    renderLoop();\n  }\n\n  trafficLight(document.getElementById('traffic-light'), {\n    initialColor: 'red',\n    config,\n    layout: 'horizontal',\n  });\n\n  trafficLight(document.getElementById('traffic-light-2'), {\n    initialColor: 'red',\n    config,\n    layout: 'vertical',\n  });\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.traffic-light-container {\n  background-color: #000;\n  border-radius: 8px;\n  display: flex;\n  padding: 8px;\n  gap: 8px;\n}\n\n.traffic-light-container--vertical {\n  flex-direction: column;\n}\n\n.traffic-light {\n  --size: 50px;\n  background-color: #555;\n  border-radius: var(--size);\n  height: var(--size);\n  width: var(--size);\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  },
  "writeup": "var Component=(()=>{var b=Object.create;var a=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),M=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},d=(n,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of j(e))!_.call(n,c)&&c!==r&&a(n,c,{get:()=>e[c],enumerable:!(l=w(e,c))||l.enumerable});return n};var h=(n,e,r)=>(r=n!=null?b(y(n)):{},d(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),F=n=>d(a({},\"__esModule\",{value:!0}),n);var s=v((L,u)=>{u.exports=_jsx_runtime});var W={};M(W,{default:()=>D});var t=h(s());var i=h(s());function m(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Observe that each light show up for the specified duration.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Observe that the lights transition to the next state correctly after the specified duration.\"}),`\n`]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(m,n)})):m(n)}var f=T;var o=h(s());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For a11y reasons, we add an \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" to the component to indicate the current light and \",(0,o.jsx)(e.code,{children:'aria-live=\"polite\"'}),\" to announce the current active light. The contents of the component (the lights) are for visual purposes and aren't important to screen readers, they can be hidden with \",(0,o.jsx)(e.code,{children:'aria-hidden=\"true\"'}),\".\"]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(g,n)})):g(n)}var p=C;function x(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Data Model\"}),`\n`,(0,t.jsx)(e.p,{children:\"Traffic lights are simple state machines where each color is a state and each state is shown for a fixed duration before moving to the next. We can capture the state information (how long to remain in each color for and which color to transition to) using a simple JavaScript object:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const config = {\n  red: {\n    duration: 4000,\n    next: 'green',\n  },\n  yellow: {\n    duration: 500,\n    next: 'red',\n  },\n  green: {\n    duration: 3000,\n    next: 'yellow',\n  },\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Within the \",(0,t.jsx)(e.code,{children:\"trafficLight\"}),\" component, we only need a single state variable, which is the current color. We also set a timer via \",(0,t.jsx)(e.code,{children:\"setTimeout\"}),\" to transition to the next color by looking up the \",(0,t.jsx)(e.code,{children:\"config\"}),\" object to know what the next color is and when to do so.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"beforeunload\"}),\" event is fired before the tab/window is closed so we clear any running timers when the tab/window is about to be closed.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The rendering of this component is pretty straightforward and can be achieved with Flexbox. With Flexbox, it's also easy to change the layout of the lights from a vertical one to a horizontal one just by changing the \",(0,t.jsx)(e.code,{children:\"flex-direction\"}),\" property.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Component API\"}),`\n`,(0,t.jsx)(e.p,{children:\"It's a good practice to make components reusable by allowing customization of:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"What the states are.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Next states.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Each state's duration.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The initial state.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Traffic light layout (certain countries use certain layouts).\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We also define the color of each light within the \",(0,t.jsx)(e.code,{children:\"config\"}),\" object so that the component is both state and color agnostic. It's even possible to create 2-colored and 4-colored traffic lights just by modifying the \",(0,t.jsx)(e.code,{children:\"config\"}),\" object without having to modify the component implementation.\"]}),`\n`,(0,t.jsx)(f,{}),`\n`,(0,t.jsx)(p,{})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(x,n)})):x(n)}var D=O;return F(W);})();\n;return Component;"
}