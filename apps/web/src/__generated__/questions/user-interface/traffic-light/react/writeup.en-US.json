{
  "skeleton": "var Component=(()=>{var g=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),_=(e,t)=>{for(var r in t)o(e,r,{get:t[r],enumerable:!0})},s=(e,t,r,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let i of x(t))!w.call(e,i)&&i!==r&&o(e,i,{get:()=>t[i],enumerable:!(a=p(t,i))||a.enumerable});return e};var h=(e,t,r)=>(r=e!=null?g(j(e)):{},s(t||!e||!e.__esModule?o(r,\"default\",{value:e,enumerable:!0}):r,e)),M=e=>s(o({},\"__esModule\",{value:!0}),e);var c=y((L,d)=>{d.exports=_jsx_runtime});var X={};_(X,{default:()=>C});var l=h(c());var n=h(c());function f(e){let t=Object.assign({p:\"p\",ul:\"ul\",li:\"li\"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:\"Build a traffic light where the lights switch from green to yellow to red after predetermined intervals and loop indefinitely. Each light should be lit for the following durations:\"}),`\n`,(0,n.jsxs)(t.ul,{children:[`\n`,(0,n.jsx)(t.li,{children:\"Red light: 4000ms\"}),`\n`,(0,n.jsx)(t.li,{children:\"Yellow light: 500ms\"}),`\n`,(0,n.jsx)(t.li,{children:\"Green light: 3000ms\"}),`\n`]}),`\n`,(0,n.jsx)(t.p,{children:\"You are free to exercise your creativity to style the appearance of the traffic light.\"})]})}function D(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(f,e)})):f(e)}var u=D;function m(e){return(0,l.jsx)(u,{})}function b(e={}){let{wrapper:t}=e.components||{};return t?(0,l.jsx)(t,Object.assign({},e,{children:(0,l.jsx)(m,e)})):m(e)}var C=b;return M(X);})();\n;return Component;",
  "solution": "var Component=(()=>{var b=Object.create;var a=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),T=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},d=(n,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of y(e))!_.call(n,c)&&c!==r&&a(n,c,{get:()=>e[c],enumerable:!(l=j(e,c))||l.enumerable});return n};var s=(n,e,r)=>(r=n!=null?b(w(n)):{},d(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),M=n=>d(a({},\"__esModule\",{value:!0}),n);var h=v((X,u)=>{u.exports=_jsx_runtime});var L={};T(L,{default:()=>O});var t=s(h());var i=s(h());function m(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Observe that each light show up for the specified duration.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Observe that the lights transition to the next state correctly after the specified duration.\"}),`\n`]})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(m,n)})):m(n)}var f=F;var o=s(h());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For a11y reasons, we add an \",(0,o.jsx)(e.code,{children:\"aria-label\"}),\" to the component to indicate the current light and \",(0,o.jsx)(e.code,{children:'aria-live=\"polite\"'}),\" to announce the current active light. The contents of the component (the lights) are for visual purposes and aren't important to screen readers, they can be hidden with \",(0,o.jsx)(e.code,{children:'aria-hidden=\"true\"'}),\".\"]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(g,n)})):g(n)}var p=C;function x(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Data Model\"}),`\n`,(0,t.jsx)(e.p,{children:\"Traffic lights are simple state machines where each color is a state and each state is shown for a fixed duration before moving to the next. We can capture the state information (how long to remain in each color for and which color to transition to) using a simple JavaScript object:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`const config = {\n  red: {\n    duration: 4000,\n    next: 'green',\n  },\n  yellow: {\n    duration: 500,\n    next: 'red',\n  },\n  green: {\n    duration: 3000,\n    next: 'yellow',\n  },\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Within the \",(0,t.jsx)(e.code,{children:\"TrafficLight\"}),\" component, we only need a single state variable, which is the current color. We also set a timer via \",(0,t.jsx)(e.code,{children:\"setTimeout\"}),\" to transition to the next color by looking up the \",(0,t.jsx)(e.code,{children:\"config\"}),' object to know what the next color is and when to do so. Do remember to clear the timer upon unmounting of the component to prevent \"setState on unmounted component\" errors and memory leaks.']}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The rendering of this component is pretty straightforward and can be achieved with Flexbox. With Flexbox, it's also easy to change the layout of the lights from a vertical one to a horizontal one just by changing the \",(0,t.jsx)(e.code,{children:\"flex-direction\"}),\" property.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Component API\"}),`\n`,(0,t.jsx)(e.p,{children:\"It's a good practice to make components reusable by allowing customization of:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"What the states are.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Next states.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Each state's duration.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The initial state.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Traffic light layout (certain countries use certain layouts).\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We also define the color of each light within the \",(0,t.jsx)(e.code,{children:\"config\"}),\" object so that the \",(0,t.jsx)(e.code,{children:\"TrafficLight\"}),\" component is both state and color agnostic. It's even possible to create 2-colored and 4-colored traffic lights just by modifying the \",(0,t.jsx)(e.code,{children:\"config\"}),\" object without having to modify the \",(0,t.jsx)(e.code,{children:\"TrafficLight\"}),\" component's implementation.\"]}),`\n`,(0,t.jsx)(f,{}),`\n`,(0,t.jsx)(p,{})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(x,n)})):x(n)}var O=D;return M(L);})();\n;return Component;"
}