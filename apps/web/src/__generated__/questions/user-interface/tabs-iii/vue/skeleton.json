{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/tabs-iii-vue-skeleton\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport Tabs from './Tabs.vue';\n</script>\n\n<template>\n  <div class=\"wrapper\">\n    <button>A focusable element</button>\n    <Tabs\n      :items=\"[\n        {\n          value: 'html',\n          label: 'HTML',\n          panel:\n            'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n        },\n        {\n          value: 'css',\n          label: 'CSS',\n          panel:\n            'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n        },\n        {\n          value: 'javascript',\n          label: 'JavaScript',\n          panel:\n            'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n        },\n      ]\" />\n    <button>Some other focusable element</button>\n  </div>\n</template>\n\n<style>\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    },
    "/src/Tabs.vue": {
      "code": "<script setup>\nimport { ref } from 'vue';\n\nfunction getTabListItemId(tabsId, value) {\n  return tabsId + '-tab-' + value;\n}\n\nfunction getTabPanelId(tabsId, value) {\n  return tabsId + '-tabpanel-' + value;\n}\n\nconst props = defineProps({\n  items: Array,\n  defaultValue: String,\n});\n\nconst tabsId = Math.random().toString(36).substring(2, 9);\n\nconst value = ref(\n  props.defaultValue ?? props.items[0].value,\n);\n</script>\n\n<template>\n  <div class=\"tabs\">\n    <div class=\"tabs-list\" role=\"tablist\">\n      <button\n        v-for=\"{ label, value: itemValue } in items\"\n        :id=\"getTabListItemId(tabsId, itemValue)\"\n        :key=\"itemValue\"\n        type=\"button\"\n        :class=\"[\n          'tabs-list-item',\n          itemValue === value && 'tabs-list-item--active',\n        ]\"\n        @click=\"value = itemValue\"\n        role=\"tab\"\n        :aria-controls=\"getTabPanelId(tabsId, itemValue)\"\n        :aria-selected=\"itemValue === value\">\n        {{ label }}\n      </button>\n    </div>\n\n    <div>\n      <div\n        v-for=\"{ panel, value: itemValue } in items\"\n        :key=\"itemValue\"\n        :id=\"getTabPanelId(tabsId, itemValue)\"\n        :aria-labelledby=\"\n          getTabListItemId(tabsId, itemValue)\n        \"\n        role=\"tabpanel\"\n        :hidden=\"itemValue !== value\">\n        {{ panel }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n.tabs {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.tabs-list {\n  display: flex;\n  gap: 6px;\n}\n\n.tabs-list-item {\n  --active-color: blueviolet;\n\n  background: none;\n  border: 1px solid #000;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 6px 10px;\n}\n\n.tabs-list-item:hover {\n  border-color: var(--active-color);\n  color: var(--active-color);\n}\n\n.tabs-list-item--active,\n.tabs-list-item--active:hover {\n  border-color: var(--active-color);\n  background-color: var(--active-color);\n  color: #fff;\n}\n</style>\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/Tabs.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  },
  "writeup": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var I=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var s in e)o(n,s,{get:e[s],enumerable:!0})},l=(n,e,s,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of w(e))!y.call(n,a)&&a!==s&&o(n,a,{get:()=>e[a],enumerable:!(c=m(e,a))||c.enumerable});return n};var h=(n,e,s)=>(s=n!=null?p(g(n)):{},l(e||!n||!n.__esModule?o(s,\"default\",{value:n,enumerable:!0}):s,n)),x=n=>l(o({},\"__esModule\",{value:!0}),n);var r=I((W,d)=>{d.exports=_jsx_runtime});var T={};v(T,{default:()=>j});var i=h(r());var t=h(r());function u(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\", you should complete that question first before attempting this question. This question is not available in Vanilla JavaScript as it will require a fair bit of code to add keyboard interactions without a JavaScript framework.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\", we built a functional Tabs component that has the necessary \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/#wai-ariaroles,states,andproperties\",children:\"WAI-ARIA roles, states, and properties\"}),\". For a completely accessible Tabs component, we should also add the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/#keyboardinteraction\",children:\"necessary keyboard interactions\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We'll be following a modified subset of the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/#keyboardinteraction\",children:\"necessary keyboard interactions for Tabs\"}),\". Note that the tabs component we're building is activated automatically on focus, so the respective tabpanel contents are shown as soon as the focus changes to a different tab.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"When \",(0,t.jsx)(\"kbd\",{children:\"Tab\"}),\" key is pressed:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"When focus moves into the tab list, places focus on the active tab element.\"}),`\n`,(0,t.jsx)(e.li,{children:\"When the tab list contains the focus, moves focus to the next element in the page tab sequence outside the tablist, which is the tabpanel.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"When focus is on a tab element in the tab list:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"Left Arrow\"}),`: moves focus to the previous tab.\nIf focus is on the first tab, moves focus to the last\ntab.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"Right Arrow\"}),`: Moves focus to the next tab. If\nfocus is on the last tab element, moves focus to the\nfirst tab.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"Home\"}),`: Moves focus to the first tab. Shows\ntabpanel content of the newly focused tab.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"End\"}),`: Moves focus to the last tab. Shows\ntabpanel content of the newly focused tab.`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The focus of this question is on adding keyboard functionality, not the styling. We have provided the solution to \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\" here for you to build on top of. You can reuse the existing styling.\"]})]})}function A(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var b=A;function f(n){return(0,i.jsx)(b,{})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(f,n)})):f(n)}var j=k;return x(T);})();\n;return Component;"
}