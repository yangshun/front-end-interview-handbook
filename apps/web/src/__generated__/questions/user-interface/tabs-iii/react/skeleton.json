{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/tabs-iii-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import Tabs from './Tabs';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <button>A focusable element</button>\n      <Tabs\n        items={[\n          {\n            value: 'html',\n            label: 'HTML',\n            panel:\n              'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n          },\n          {\n            value: 'css',\n            label: 'CSS',\n            panel:\n              'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n          },\n          {\n            value: 'javascript',\n            label: 'JavaScript',\n            panel:\n              'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n          },\n        ]}\n      />\n      <button>Some other focusable element</button>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.tabs {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.tabs-list {\n  display: flex;\n  gap: 6px;\n}\n\n.tabs-list-item {\n  --active-color: blueviolet;\n\n  background: none;\n  border: 1px solid #000;\n  border-radius: 4px;\n  cursor: pointer;\n  padding: 6px 10px;\n}\n\n.tabs-list-item:hover {\n  border-color: var(--active-color);\n  color: var(--active-color);\n}\n\n.tabs-list-item--active,\n.tabs-list-item--active:hover {\n  border-color: var(--active-color);\n  background-color: var(--active-color);\n  color: #fff;\n}\n"
    },
    "/src/Tabs.js": {
      "code": "import { useId, useState } from 'react';\n\nfunction getTabListItemId(tabsId, value) {\n  return tabsId + '-tab-' + value;\n}\n\nfunction getTabPanelId(tabsId, value) {\n  return tabsId + '-tabpanel-' + value;\n}\n\nexport default function Tabs({ defaultValue, items }) {\n  const tabsId = useId();\n  const [value, setValue] = useState(\n    defaultValue ?? items[0].value,\n  );\n\n  return (\n    <div className=\"tabs\">\n      <div className=\"tabs-list\" role=\"tablist\">\n        {items.map(({ label, value: itemValue }) => {\n          const isActiveValue = itemValue === value;\n\n          return (\n            <button\n              id={getTabListItemId(tabsId, itemValue)}\n              key={itemValue}\n              type=\"button\"\n              className={[\n                'tabs-list-item',\n                isActiveValue && 'tabs-list-item--active',\n              ]\n                .filter(Boolean)\n                .join(' ')}\n              onClick={() => {\n                setValue(itemValue);\n              }}\n              role=\"tab\"\n              aria-controls={getTabPanelId(\n                tabsId,\n                itemValue,\n              )}\n              aria-selected={isActiveValue}>\n              {label}\n            </button>\n          );\n        })}\n      </div>\n      <div>\n        {items.map(({ panel, value: itemValue }) => (\n          <div\n            key={itemValue}\n            id={getTabPanelId(tabsId, itemValue)}\n            aria-labelledby={getTabListItemId(\n              tabsId,\n              itemValue,\n            )}\n            role=\"tabpanel\"\n            hidden={itemValue !== value}>\n            {panel}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/Tabs.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/Tabs.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var I=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var s in e)o(n,s,{get:e[s],enumerable:!0})},l=(n,e,s,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of w(e))!y.call(n,a)&&a!==s&&o(n,a,{get:()=>e[a],enumerable:!(c=m(e,a))||c.enumerable});return n};var h=(n,e,s)=>(s=n!=null?p(g(n)):{},l(e||!n||!n.__esModule?o(s,\"default\",{value:n,enumerable:!0}):s,n)),x=n=>l(o({},\"__esModule\",{value:!0}),n);var r=I((W,d)=>{d.exports=_jsx_runtime});var T={};v(T,{default:()=>j});var i=h(r());var t=h(r());function u(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\", you should complete that question first before attempting this question. This question is not available in Vanilla JavaScript as it will require a fair bit of code to add keyboard interactions without a JavaScript framework.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\", we built a functional Tabs component that has the necessary \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/#wai-ariaroles,states,andproperties\",children:\"WAI-ARIA roles, states, and properties\"}),\". For a completely accessible Tabs component, we should also add the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/#keyboardinteraction\",children:\"necessary keyboard interactions\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We'll be following a modified subset of the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/#keyboardinteraction\",children:\"necessary keyboard interactions for Tabs\"}),\". Note that the tabs component we're building is activated automatically on focus, so the respective tabpanel contents are shown as soon as the focus changes to a different tab.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"When \",(0,t.jsx)(\"kbd\",{children:\"Tab\"}),\" key is pressed:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"When focus moves into the tab list, places focus on the active tab element.\"}),`\n`,(0,t.jsx)(e.li,{children:\"When the tab list contains the focus, moves focus to the next element in the page tab sequence outside the tablist, which is the tabpanel.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"When focus is on a tab element in the tab list:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"Left Arrow\"}),`: moves focus to the previous tab.\nIf focus is on the first tab, moves focus to the last\ntab.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"Right Arrow\"}),`: Moves focus to the next tab. If\nfocus is on the last tab element, moves focus to the\nfirst tab.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"Home\"}),`: Moves focus to the first tab. Shows\ntabpanel content of the newly focused tab.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(\"kbd\",{children:\"End\"}),`: Moves focus to the last tab. Shows\ntabpanel content of the newly focused tab.`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The focus of this question is on adding keyboard functionality, not the styling. We have provided the solution to \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\" here for you to build on top of. You can reuse the existing styling.\"]})]})}function A(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var b=A;function f(n){return(0,i.jsx)(b,{})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(f,n)})):f(n)}var j=k;return x(T);})();\n;return Component;"
}