{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.vue\",\n    \"/src/Keyboard.vue\",\n    \"/src/LetterGrid.vue\"\n  ],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/wordle-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport {\n  onMounted,\n  onUnmounted,\n  ref,\n  watch,\n  watchEffect,\n} from 'vue';\n\nimport {\n  GAME_STATE,\n  LETTER_GUESS_STATE,\n  LETTER_GUESS_STATE_PRIORITY,\n} from './constants';\nimport Keyboard from './Keyboard.vue';\nimport LetterGrid from './LetterGrid.vue';\n\nconst WORDS = [\n  'APPLE',\n  'BEAST',\n  'FAINT',\n  'FEAST',\n  'FRUIT',\n  'GAMES',\n  'PAINT',\n  'PASTE',\n  'TOWER',\n  'REACT',\n];\n\nconst A_KEYCODE = 65;\nconst Z_KEYCODE = 90;\n\nconst INITIAL_CURSOR_POSITION = [0, -1];\n\nconst props = defineProps({\n  maxAttempts: {\n    type: Number,\n    default: 6,\n  },\n  lettersPerWord: {\n    type: Number,\n    default: 5,\n  },\n});\n\nconst wordOfTheDay = ref(generateRandomWord());\nconst gameState = ref(GAME_STATE.IN_PROGRESS);\nconst gridState = ref(\n  getInitialGridState(\n    props.maxAttempts,\n    props.lettersPerWord,\n  ),\n);\nconst position = ref(INITIAL_CURSOR_POSITION.slice());\nconst letterGuessState = ref(getInitialLetterGuessState());\n\nfunction resetGame() {\n  wordOfTheDay.value = generateRandomWord();\n  gridState.value = getInitialGridState(\n    props.maxAttempts,\n    props.lettersPerWord,\n  );\n  position.value = INITIAL_CURSOR_POSITION.slice();\n  gameState.value = GAME_STATE.IN_PROGRESS;\n  letterGuessState.value = getInitialLetterGuessState();\n}\n\nfunction addLetter(char) {\n  const [row, col] = position.value;\n\n  // Row is already fully filled.\n  if (col + 1 === props.lettersPerWord) {\n    return;\n  }\n\n  gridState.value[row][col + 1].char = char.toUpperCase();\n  position.value = [row, col + 1];\n}\n\nfunction deleteLetter() {\n  const [row, col] = position.value;\n\n  if (col === -1) {\n    return;\n  }\n\n  gridState.value[row][col].char = '';\n  position.value = [row, col - 1];\n}\n\nfunction onPressKey(key) {\n  // Game has a conclusion.\n  if (gameState.value !== GAME_STATE.IN_PROGRESS) {\n    return;\n  }\n\n  // Ignore invalid input from user.\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  switch (key) {\n    case 'Enter':\n      checkWord();\n      break;\n    case 'Backspace':\n      deleteLetter();\n      break;\n    default:\n      addLetter(key);\n  }\n}\n\nfunction isValidKey(key) {\n  return (\n    key === 'Enter' ||\n    key === 'Backspace' ||\n    (key.length === 1 &&\n      key.toUpperCase().charCodeAt() >= A_KEYCODE &&\n      key.toUpperCase().charCodeAt() <= Z_KEYCODE)\n  );\n}\n\nfunction getInitialGridState(maxAttempts, lettersPerWord) {\n  return Array.from({ length: maxAttempts }, () =>\n    Array.from({ length: lettersPerWord }, () => ({\n      char: '',\n      state: LETTER_GUESS_STATE.INDETERMINATE,\n    })),\n  );\n}\n\nfunction getInitialLetterGuessState() {\n  return {};\n}\n\nfunction checkWord() {\n  const [row, col] = position.value;\n\n  // Not enough letters in the row yet.\n  if (col + 1 < props.lettersPerWord) {\n    return;\n  }\n\n  const word = gridState.value[row]\n    .map(({ char }) => char)\n    .join('');\n  // Create a map of count of letters in original word to compare\n  // with the word entered by user.\n  const letterFreq = countLetterFreqInWord(\n    wordOfTheDay.value,\n  );\n  const nonMatchingIndices = [];\n  let matchCount = 0;\n\n  // Update state for matching chars first.\n  for (let i = 0; i < word.length; i++) {\n    const currentChar = word[i];\n    const currentActualChar = wordOfTheDay.value[i];\n\n    if (currentChar === currentActualChar) {\n      gridState.value[row][i].state =\n        LETTER_GUESS_STATE.CORRECT;\n      letterGuessState.value[currentChar] =\n        LETTER_GUESS_STATE.CORRECT;\n      letterFreq.set(\n        currentChar,\n        letterFreq.get(currentChar) - 1,\n      );\n      matchCount++;\n    } else {\n      nonMatchingIndices.push(i);\n    }\n  }\n\n  // Guessed correctly.\n  if (matchCount === props.lettersPerWord) {\n    gameState.value = GAME_STATE.GUESSED_CORRECTLY;\n    return;\n  }\n\n  // Update state for rest of the chars.\n  nonMatchingIndices.forEach((idx) => {\n    const char = word[idx];\n    if (letterFreq.has(char) && letterFreq.get(char) > 0) {\n      letterFreq.set(char, letterFreq.get(char) - 1);\n      gridState.value[row][idx].state =\n        LETTER_GUESS_STATE.PRESENT;\n      // Only change state if the new state is higher priority\n      // than the current state.\n      if (\n        LETTER_GUESS_STATE_PRIORITY[\n          LETTER_GUESS_STATE.PRESENT\n        ] >\n        LETTER_GUESS_STATE_PRIORITY[\n          letterGuessState.value[char] ??\n            LETTER_GUESS_STATE.INDETERMINATE\n        ]\n      ) {\n        letterGuessState.value[char] =\n          LETTER_GUESS_STATE.PRESENT;\n      }\n    } else {\n      gridState.value[row][idx].state =\n        LETTER_GUESS_STATE.ABSENT;\n      // Only change state if the new state is higher priority\n      // than the current state.\n      if (\n        LETTER_GUESS_STATE_PRIORITY[\n          LETTER_GUESS_STATE.ABSENT\n        ] >\n        LETTER_GUESS_STATE_PRIORITY[\n          letterGuessState.value[char] ??\n            LETTER_GUESS_STATE.INDETERMINATE\n        ]\n      ) {\n        letterGuessState.value[char] =\n          LETTER_GUESS_STATE.ABSENT;\n      }\n    }\n  });\n\n  // User did not manage to guess the correct answer.\n  if (row + 1 === props.maxAttempts) {\n    gameState.value = GAME_STATE.NO_MORE_GUESSES;\n    return;\n  }\n\n  // Move to next row.\n  position.value = [row + 1, -1];\n}\n\n// Count the frequency of letters in a word.\nfunction countLetterFreqInWord(word) {\n  const freq = new Map();\n\n  for (let i = 0; i < word.length; ++i) {\n    if (!freq.has(word[i])) {\n      freq.set(word[i], 0);\n    }\n\n    freq.set(word[i], freq.get(word[i]) + 1);\n  }\n\n  return freq;\n}\n\nfunction generateRandomWord() {\n  return WORDS[Math.floor(Math.random() * WORDS.length)];\n}\n\nfunction onKeyDown(event) {\n  // Only respond to single key presses.\n  if (\n    event.altKey ||\n    event.ctrlKey ||\n    event.metaKey ||\n    event.shiftKey\n  ) {\n    return;\n  }\n\n  // Ignore enter and space events not triggered on the page level\n  // as there could be lower level elements handling them\n  // and we don't want to double-handle them.\n  if (\n    event.target !== document.body &&\n    (event.key === 'Enter' || event.key === ' ')\n  ) {\n    return;\n  }\n\n  onPressKey(event.key);\n}\n\nonMounted(() => {\n  document.addEventListener('keydown', onKeyDown);\n});\n\nonUnmounted(() => {\n  document.removeEventListener('keydown', onKeyDown);\n});\n\nwatchEffect(() =>\n  console.log(\n    `[DEBUG]: Word of the day is: ${wordOfTheDay.value}`,\n  ),\n);\n\nwatch(\n  [() => props.maxAttempts, () => props.lettersPerWord],\n  () => {\n    resetGame();\n  },\n);\n</script>\n\n<template>\n  <main class=\"root\">\n    <h1 class=\"title\">Wordle</h1>\n    <div\n      v-if=\"gameState !== GAME_STATE.IN_PROGRESS\"\n      class=\"result-row\">\n      <strong>\n        {{\n          gameState === GAME_STATE.GUESSED_CORRECTLY\n            ? 'Congratulations ðŸŽ‰'\n            : gameState === GAME_STATE.NO_MORE_GUESSES\n            ? `Word: ${wordOfTheDay}`\n            : ''\n        }}\n      </strong>\n      <button\n        type=\"button\"\n        class=\"reset-button\"\n        @click=\"resetGame\">\n        Reset\n      </button>\n    </div>\n\n    <LetterGrid :letters=\"gridState\" />\n    <Keyboard\n      @press-key=\"onPressKey\"\n      :letterGuessState=\"letterGuessState\" />\n  </main>\n</template>\n\n<style>\nbody {\n  --indeterminate: #d3d6da;\n  --correct: #6aaa64;\n  --present: #c9b458;\n  --absent: #787c7e;\n\n  margin: 0;\n  font-family: 'Ubuntu', sans-serif;\n}\n\n.root {\n  display: grid;\n  outline: none;\n  row-gap: 16px;\n}\n\n.title {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 0;\n  text-align: center;\n}\n\n.result-row {\n  display: flex;\n  column-gap: 8px;\n  justify-content: center;\n}\n\n.reset-button {\n  cursor: pointer;\n}\n</style>\n"
    },
    "/src/constants.js": {
      "code": "export const LETTER_GUESS_STATE = {\n  INDETERMINATE: 'INDETERMINATE',\n  ABSENT: 'ABSENT',\n  PRESENT: 'PRESENT',\n  CORRECT: 'CORRECT',\n};\n\nexport const LETTER_GUESS_STATE_PRIORITY = {\n  INDETERMINATE: 1,\n  ABSENT: 2,\n  PRESENT: 3,\n  CORRECT: 4,\n};\n\nexport const GAME_STATE = {\n  IN_PROGRESS: 'IN_PROGRESS',\n  GUESSED_CORRECTLY: 'GUESSED_CORRECTLY',\n  NO_MORE_GUESSES: 'NO_MORE_GUESSES',\n};\n"
    },
    "/src/Keyboard.vue": {
      "code": "<script setup>\nimport { LETTER_GUESS_STATE } from './constants';\nconst KEYBOARD_LAYOUT = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Enter', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Backspace'],\n];\n\nconst props = defineProps({\n  letterGuessState: Object,\n});\n</script>\n\n<template>\n  <section class=\"keyboard-section\">\n    <div\n      v-for=\"(row, rowIndex) in KEYBOARD_LAYOUT\"\n      class=\"keyboard-row\"\n      :key=\"rowIndex\">\n      <button\n        v-for=\"char in row\"\n        :key=\"char\"\n        @click=\"$emit('press-key', char)\"\n        class=\"keyboard-row__button\"\n        :class=\"{\n          absent:\n            letterGuessState[char] ===\n            LETTER_GUESS_STATE.ABSENT,\n          correct:\n            letterGuessState[char] ===\n            LETTER_GUESS_STATE.CORRECT,\n          present:\n            letterGuessState[char] ===\n            LETTER_GUESS_STATE.PRESENT,\n        }\">\n        {{\n          (() => {\n            switch (char) {\n              case 'Enter':\n                return 'ENTER';\n              case 'Backspace':\n                return 'DEL';\n              default:\n                return char;\n            }\n          })()\n        }}\n      </button>\n    </div>\n  </section>\n</template>\n\n<style>\n.keyboard-section {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.5rem;\n}\n\n.keyboard-row {\n  display: flex;\n  justify-content: center;\n}\n\n.keyboard-row__button {\n  --background-color: var(--indeterminate);\n  --color: #000;\n\n  border: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  height: 40px;\n  border-radius: 4px;\n  font-weight: 600;\n  cursor: pointer;\n  min-width: 30px;\n  margin-inline: 0.25rem;\n}\n\n.absent {\n  --background-color: var(--absent);\n  --border-color: var(--absent);\n  --color: #fff;\n}\n\n.correct {\n  --background-color: var(--correct);\n  --border-color: var(--correct);\n  --color: #fff;\n}\n\n.present {\n  --background-color: var(--present);\n  --border-color: var(--present);\n  --color: #fff;\n}\n</style>\n"
    },
    "/src/LetterGrid.vue": {
      "code": "<script setup>\nimport { LETTER_GUESS_STATE } from './constants';\n\nconst props = defineProps({\n  letters: Array,\n});\n\nfunction isIntermediateState(state) {\n  return state === LETTER_GUESS_STATE.INDETERMINATE;\n}\n</script>\n\n<template>\n  <section\n    class=\"grid-section\"\n    :style=\"{\n      'grid-template-columns': `repeat(${props.letters[0].length}, var(--size))`,\n      'grid-template-rows': `repeat(${props.letters.length}, var(--size))`,\n    }\">\n    <template v-for=\"(letterRow, rowIndex) in letters\">\n      <button\n        v-for=\"({ char, state }, colIndex) in letterRow\"\n        class=\"grid-cell\"\n        :key=\"`${rowIndex}-${colIndex}`\"\n        :class=\"{\n          absent:\n            !isIntermediateState(state) &&\n            state === LETTER_GUESS_STATE.ABSENT,\n          correct:\n            !isIntermediateState(state) &&\n            state === LETTER_GUESS_STATE.CORRECT,\n          present:\n            !isIntermediateState(state) &&\n            state === LETTER_GUESS_STATE.PRESENT,\n          'grid-cell--filled': Boolean(char),\n          'grid-cell--final': !isIntermediateState(state),\n        }\"\n        :style=\"{\n          'transition-delay': !isIntermediateState(state)\n            ? `${colIndex * 50}ms`\n            : undefined,\n        }\">\n        {{ char }}\n      </button>\n    </template>\n  </section>\n</template>\n\n<style>\n.grid-section {\n  --size: 50px;\n\n  display: grid;\n  gap: 5px;\n  justify-content: center;\n}\n\n.grid-cell {\n  --fill-color: transparent;\n  --background-color: #fff;\n  --border-color: var(--indeterminate);\n  --color: #000;\n\n  border-color: var(--border-color);\n  background-color: var(--background-color);\n  border-width: 2px;\n  border-style: solid;\n  font-size: 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n\n.grid-cell--filled {\n  animation: scale-on-fill 50ms ease-in;\n}\n\n@keyframes scale-on-fill {\n  70% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.grid-cell--final {\n  color: var(--color);\n  transition-property: color background-color border-color;\n  transition-duration: 50ms;\n}\n\n.absent {\n  --background-color: var(--absent);\n  --border-color: var(--absent);\n  --color: #fff;\n}\n\n.correct {\n  --background-color: var(--correct);\n  --border-color: var(--correct);\n  --color: #fff;\n}\n\n.present {\n  --background-color: var(--present);\n  --border-color: var(--present);\n  --color: #fff;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/Keyboard.vue",
      "/src/LetterGrid.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}