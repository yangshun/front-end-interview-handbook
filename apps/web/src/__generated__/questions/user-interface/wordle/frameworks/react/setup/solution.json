{
  "author": "utpal-d4l",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/wordle-react-solution\",\n  \"author\": \"utpal-d4l\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useCallback, useEffect, useState } from 'react';\n\nconst LETTER_GUESS_STATE = Object.freeze({\n  INDETERMINATE: 'INDETERMINATE',\n  ABSENT: 'ABSENT',\n  PRESENT: 'PRESENT',\n  CORRECT: 'CORRECT',\n});\n\nconst LETTER_GUESS_STATE_PRIORITY = Object.freeze({\n  INDETERMINATE: 1,\n  ABSENT: 2,\n  PRESENT: 3,\n  CORRECT: 4,\n});\n\nconst GAME_STATE = Object.freeze({\n  IN_PROGRESS: 'IN_PROGRESS',\n  GUESSED_CORRECTLY: 'GUESSED_CORRECTLY',\n  NO_MORE_GUESSES: 'NO_MORE_GUESSES',\n});\n\nconst GUESS_CLASSES = Object.freeze({\n  CORRECT: 'guess--correct',\n  PRESENT: 'guess--present',\n  ABSENT: 'guess--absent',\n});\n\nconst KEYBOARD_LAYOUT = Object.freeze([\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Enter', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'Backspace'],\n]);\n\nconst WORDS = Object.freeze([\n  'APPLE',\n  'BEAST',\n  'FAINT',\n  'FEAST',\n  'FRUIT',\n  'GAMES',\n  'PAINT',\n  'PASTE',\n  'TOWER',\n  'REACT',\n]);\n\nconst A_KEYCODE = 65;\nconst Z_KEYCODE = 90;\n\nfunction isValidKey(key) {\n  return (\n    key === 'Enter' ||\n    key === 'Backspace' ||\n    (key.length === 1 &&\n      key.toUpperCase().charCodeAt() >= A_KEYCODE &&\n      key.toUpperCase().charCodeAt() <= Z_KEYCODE)\n  );\n}\n\n// Utility to conditionally concatenate classnames.\nfunction clsx(...args) {\n  return args.filter(Boolean).join(' ');\n}\n\n// Count the frequency of letters in a word.\nfunction countLetterFreqInWord(word) {\n  const freq = new Map();\n\n  for (let i = 0; i < word.length; ++i) {\n    if (!freq.has(word[i])) {\n      freq.set(word[i], 0);\n    }\n\n    freq.set(word[i], freq.get(word[i]) + 1);\n  }\n\n  return freq;\n}\n\nfunction getInitialGridState(maxAttempts, lettersPerWord) {\n  return Array.from({ length: maxAttempts }, () =>\n    Array.from({ length: lettersPerWord }, () => ({\n      char: '',\n      state: LETTER_GUESS_STATE.INDETERMINATE,\n    })),\n  );\n}\n\nfunction getInitialLetterGuessState() {\n  return {};\n}\n\nfunction Keyboard({ onPressKey, letterGuessState }) {\n  return (\n    <section className=\"keyboard-section\">\n      {KEYBOARD_LAYOUT.map((row, rowIndex) => {\n        return (\n          <div className=\"keyboard-row\" key={rowIndex}>\n            {row.map((char) => (\n              <button\n                key={char}\n                onClick={() => {\n                  onPressKey(char);\n                }}\n                className={clsx(\n                  'keyboard-row__button',\n                  GUESS_CLASSES[letterGuessState[char]],\n                )}>\n                {(() => {\n                  switch (char) {\n                    case 'Enter':\n                      return 'ENTER';\n                    case 'Backspace':\n                      return 'DEL';\n                    default:\n                      return char;\n                  }\n                })()}\n              </button>\n            ))}\n          </div>\n        );\n      })}\n    </section>\n  );\n}\n\nfunction LetterGrid({ letters }) {\n  return (\n    <section\n      className=\"grid-section\"\n      style={{\n        gridTemplateColumns: `repeat(${letters[0].length}, var(--size))`,\n        gridTemplateRows: `repeat(${letters.length}, var(--size))`,\n      }}>\n      {letters.map((lettersRow, rowIndex) =>\n        lettersRow.map(({ char, state }, colIndex) => (\n          <div\n            className={clsx(\n              'grid-cell',\n              Boolean(char) && 'grid-cell--filled',\n              state !== LETTER_GUESS_STATE.INDETERMINATE &&\n                clsx(\n                  'grid-cell--final',\n                  GUESS_CLASSES[state],\n                ),\n            )}\n            style={{\n              transitionDelay:\n                state !== LETTER_GUESS_STATE.INDETERMINATE\n                  ? `${colIndex * 50}ms`\n                  : undefined,\n            }}\n            key={rowIndex + '-' + colIndex}>\n            {char}\n          </div>\n        )),\n      )}\n    </section>\n  );\n}\n\nfunction GameResult({\n  gameState,\n  wordOfTheDay,\n  onResetClick,\n}) {\n  if (gameState === GAME_STATE.IN_PROGRESS) {\n    return null;\n  }\n\n  return (\n    <div className=\"result-row\">\n      <strong>\n        <>\n          {gameState === GAME_STATE.GUESSED_CORRECTLY &&\n            'Congratulations ðŸŽ‰'}\n        </>\n        <>\n          {gameState === GAME_STATE.NO_MORE_GUESSES &&\n            `Word: ${wordOfTheDay}`}\n        </>\n      </strong>\n      <button\n        type=\"button\"\n        className=\"reset-button\"\n        onClick={onResetClick}>\n        Reset\n      </button>\n    </div>\n  );\n}\n\nfunction generateRandomWord() {\n  return WORDS[Math.floor(Math.random() * WORDS.length)];\n}\n\nconst INITIAL_CURSOR_POSITION = [0, -1];\n\nfunction Wordle({ maxAttempts, lettersPerWord }) {\n  // Initialize word of the day.\n  const [wordOfTheDay, setWordOfTheDay] = useState(\n    generateRandomWord(),\n  );\n  // Represent overall game state.\n  const [gameState, setGameState] = useState(\n    GAME_STATE.IN_PROGRESS,\n  );\n\n  // User attempts and the states of each letter guess.\n  const [gridState, setGridState] = useState(() =>\n    getInitialGridState(maxAttempts, lettersPerWord),\n  );\n  // Current position in the grid.\n  const [position, setPosition] = useState(\n    INITIAL_CURSOR_POSITION,\n  );\n  // Tracks the state of letter guesses.\n  const [letterGuessState, setLetterGuessState] = useState(\n    () => getInitialLetterGuessState(),\n  );\n\n  useEffect(() => {\n    // Print out word of the day in console for debugging purposes.\n    console.log(\n      `[DEBUG]: Word of the day is: ${wordOfTheDay}`,\n    );\n  }, [wordOfTheDay]);\n\n  const resetGame = useCallback(() => {\n    setWordOfTheDay(generateRandomWord());\n    setGridState(\n      getInitialGridState(maxAttempts, lettersPerWord),\n    );\n    setPosition(INITIAL_CURSOR_POSITION);\n    setGameState(GAME_STATE.IN_PROGRESS);\n    setLetterGuessState(getInitialLetterGuessState());\n  }, [maxAttempts, lettersPerWord]);\n\n  useEffect(() => {\n    resetGame();\n  }, [maxAttempts, lettersPerWord, resetGame]);\n\n  function addLetter(char) {\n    const [row, col] = position;\n\n    // Row is already fully filled.\n    if (col + 1 === lettersPerWord) {\n      return;\n    }\n\n    // Clone the grid to avoid mutating the existing one.\n    const newGridState = Array.from(gridState);\n    newGridState[row][col + 1].char = char.toUpperCase();\n    setPosition([row, col + 1]);\n    setGridState(newGridState);\n  }\n\n  function deleteLetter() {\n    const [row, col] = position;\n    const newGridState = Array.from(gridState);\n\n    if (col === -1) {\n      return;\n    }\n\n    newGridState[row][col].char = '';\n    setPosition([row, col - 1]);\n    setGridState(newGridState);\n  }\n\n  function checkWord() {\n    const [row, col] = position;\n\n    // Not enough letters in the row yet.\n    if (col + 1 < lettersPerWord) {\n      return;\n    }\n\n    const newGridState = Array.from(gridState);\n    const newLetterGuessState = { ...letterGuessState };\n    const word = gridState[row]\n      .map(({ char }) => char)\n      .join('');\n    // Create a map of count of letters in original word to compare\n    // with the word entered by user.\n    const letterFreq = countLetterFreqInWord(wordOfTheDay);\n    const nonMatchingIndices = [];\n    let matchCount = 0;\n\n    // Update state for matching chars first.\n    for (let i = 0; i < word.length; i++) {\n      const currentChar = word[i];\n      const currentActualChar = wordOfTheDay[i];\n\n      if (currentChar === currentActualChar) {\n        newGridState[row][i].state =\n          LETTER_GUESS_STATE.CORRECT;\n        newLetterGuessState[currentChar] =\n          LETTER_GUESS_STATE.CORRECT;\n        letterFreq.set(\n          currentChar,\n          letterFreq.get(currentChar) - 1,\n        );\n        matchCount++;\n      } else {\n        nonMatchingIndices.push(i);\n      }\n    }\n\n    // Guessed correctly.\n    if (matchCount === lettersPerWord) {\n      setLetterGuessState(newLetterGuessState);\n      setGridState(newGridState);\n      setGameState(GAME_STATE.GUESSED_CORRECTLY);\n      return;\n    }\n\n    // Update state for rest of the chars.\n    nonMatchingIndices.forEach((idx) => {\n      const char = word[idx];\n      if (\n        letterFreq.has(char) &&\n        letterFreq.get(char) > 0\n      ) {\n        letterFreq.set(char, letterFreq.get(char) - 1);\n        newGridState[row][idx].state =\n          LETTER_GUESS_STATE.PRESENT;\n        // Only change state if the new state is higher priority\n        // than the current state.\n        if (\n          LETTER_GUESS_STATE_PRIORITY[\n            LETTER_GUESS_STATE.PRESENT\n          ] >\n          LETTER_GUESS_STATE_PRIORITY[\n            newLetterGuessState[char] ??\n              LETTER_GUESS_STATE.INDETERMINATE\n          ]\n        ) {\n          newLetterGuessState[char] =\n            LETTER_GUESS_STATE.PRESENT;\n        }\n      } else {\n        newGridState[row][idx].state =\n          LETTER_GUESS_STATE.ABSENT;\n        // Only change state if the new state is higher priority\n        // than the current state.\n        if (\n          LETTER_GUESS_STATE_PRIORITY[\n            LETTER_GUESS_STATE.ABSENT\n          ] >\n          LETTER_GUESS_STATE_PRIORITY[\n            newLetterGuessState[char] ??\n              LETTER_GUESS_STATE.INDETERMINATE\n          ]\n        ) {\n          newLetterGuessState[char] =\n            LETTER_GUESS_STATE.ABSENT;\n        }\n      }\n    });\n\n    setLetterGuessState(newLetterGuessState);\n    setGridState(newGridState);\n\n    // User did not manage to guess the correct answer.\n    if (row + 1 === maxAttempts) {\n      setGameState(GAME_STATE.NO_MORE_GUESSES);\n      return;\n    }\n\n    // Move to next row.\n    setPosition([row + 1, -1]);\n  }\n\n  function onPressKey(key) {\n    // Game has a conclusion.\n    if (gameState !== GAME_STATE.IN_PROGRESS) {\n      return;\n    }\n\n    // Ignore invalid input from user.\n    if (!isValidKey(key)) {\n      return;\n    }\n\n    switch (key) {\n      case 'Enter':\n        checkWord();\n        break;\n      case 'Backspace':\n        deleteLetter();\n        break;\n      default:\n        addLetter(key);\n    }\n  }\n\n  useEffect(() => {\n    function onKeyDown(event) {\n      // Only respond to single key presses.\n      if (\n        event.altKey ||\n        event.ctrlKey ||\n        event.metaKey ||\n        event.shiftKey\n      ) {\n        return;\n      }\n\n      // Ignore enter and space events not triggered on the page level\n      // as there could be lower level elements handling them\n      // and we don't want to double-handle them.\n      if (\n        event.target !== document.body &&\n        (event.key === 'Enter' || event.key === ' ')\n      ) {\n        return;\n      }\n\n      onPressKey(event.key);\n    }\n\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  return (\n    <main className=\"root\">\n      <h1 className=\"title\">Wordle</h1>\n      <GameResult\n        gameState={gameState}\n        wordOfTheDay={wordOfTheDay}\n        onResetClick={() => resetGame()}\n      />\n      <LetterGrid letters={gridState} />\n      <Keyboard\n        onPressKey={onPressKey}\n        letterGuessState={letterGuessState}\n      />\n    </main>\n  );\n}\n\nexport default function App() {\n  return <Wordle maxAttempts={6} lettersPerWord={5} />;\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "* {\n  box-sizing: border-box;\n}\n\nbody {\n  --indeterminate: #d3d6da;\n  --correct: #6aaa64;\n  --present: #c9b458;\n  --absent: #787c7e;\n\n  margin: 0;\n  font-family: 'Ubuntu', sans-serif;\n}\n\n.root {\n  display: grid;\n  outline: none;\n  row-gap: 16px;\n}\n\n.title {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 0;\n  text-align: center;\n}\n\n.grid-section {\n  --size: 50px;\n\n  display: grid;\n  gap: 5px;\n  justify-content: center;\n}\n\n.grid-cell {\n  --fill-color: transparent;\n  --background-color: #fff;\n  --border-color: var(--indeterminate);\n  --color: #000;\n\n  border-color: var(--border-color);\n  background-color: var(--background-color);\n  border-width: 2px;\n  border-style: solid;\n  font-size: 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n\n.grid-cell--filled {\n  animation: scale-on-fill 50ms ease-in;\n}\n\n@keyframes scale-on-fill {\n  70% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.grid-cell--final {\n  color: var(--color);\n  transition-property: color background-color border-color;\n  transition-duration: 50ms;\n}\n\n.keyboard-section {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.5rem;\n}\n\n.keyboard-row {\n  display: flex;\n  justify-content: center;\n}\n\n.keyboard-row__button {\n  --background-color: var(--indeterminate);\n  --color: #000;\n\n  border: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  height: 40px;\n  border-radius: 4px;\n  font-weight: 600;\n  cursor: pointer;\n  min-width: 30px;\n  margin-inline: 0.25rem;\n}\n\n.guess--absent {\n  --background-color: var(--absent);\n  --border-color: var(--absent);\n  --color: #fff;\n}\n\n.guess--correct {\n  --background-color: var(--correct);\n  --border-color: var(--correct);\n  --color: #fff;\n}\n\n.guess--present {\n  --background-color: var(--present);\n  --border-color: var(--present);\n  --color: #fff;\n}\n\n.result-row {\n  display: flex;\n  column-gap: 8px;\n  justify-content: center;\n}\n\n.reset-button {\n  cursor: pointer;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}