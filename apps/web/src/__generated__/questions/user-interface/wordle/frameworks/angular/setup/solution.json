{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/app/app.component.ts\",\n    \"/src/app/app.component.html\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/app/app.component.ts\",\n  \"environment\": \"angular-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/wordle-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<app-wordle [maxAttempts]=\"6\" [lettersPerWord]=\"5\" />\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n})\nexport class AppComponent {}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { WordleComponent } from './components/wordle/wordle.component';\nimport { KeyboardComponent } from './components/keyboard/keyboard.component';\nimport { LetterGridComponent } from './components/letter-grid/letter-grid.component';\nimport { GameResultComponent } from './components/game-result/game-result.component';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    WordleComponent,\n    KeyboardComponent,\n    LetterGridComponent,\n    GameResultComponent,\n    AppComponent,\n  ],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/components/game-result/game-result.component.html": {
      "code": "<div\n  *ngIf=\"gameState !== GameState.IN_PROGRESS\"\n  class=\"result-row\">\n  <strong>\n    <span *ngIf=\"gameState === GameState.GUESSED_CORRECTLY\"\n      >Congratulations ðŸŽ‰</span\n    >\n    <span *ngIf=\"gameState === GameState.NO_MORE_GUESSES\"\n      >Word: {{ wordOfTheDay }}</span\n    >\n  </strong>\n  <button\n    type=\"button\"\n    class=\"reset-button\"\n    (click)=\"reset()\">\n    Reset\n  </button>\n</div>\n"
    },
    "/src/app/components/game-result/game-result.component.ts": {
      "code": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { GameState } from '../../models';\n\n@Component({\n  selector: 'app-game-result',\n  templateUrl: 'game-result.component.html',\n})\nexport class GameResultComponent {\n  @Input()\n  gameState!: GameState;\n\n  @Input()\n  wordOfTheDay!: string;\n\n  @Output()\n  resetClick = new EventEmitter<void>();\n\n  GameState = GameState;\n\n  reset() {\n    this.resetClick.emit();\n  }\n}\n"
    },
    "/src/app/components/keyboard/keyboard.component.html": {
      "code": "<section class=\"keyboard-section\">\n  <div class=\"keyboard-row\" *ngFor=\"let row of keyboard\">\n    <button\n      class=\"keyboard-row__button\"\n      *ngFor=\"let char of row\"\n      (click)=\"onKeyClick(char)\"\n      [class.guess--correct]=\"\n        letterGuessState[char] === LetterGuessState.CORRECT\n      \"\n      [class.guess--present]=\"\n        letterGuessState[char] === LetterGuessState.PRESENT\n      \"\n      [class.guess--absent]=\"\n        letterGuessState[char] === LetterGuessState.ABSENT\n      \">\n      {{ char }}\n    </button>\n  </div>\n</section>\n"
    },
    "/src/app/components/keyboard/keyboard.component.ts": {
      "code": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { LetterGuessState } from '../../models';\n\n@Component({\n  selector: 'app-keyboard',\n  templateUrl: 'keyboard.component.html',\n})\nexport class KeyboardComponent {\n  @Input()\n  letterGuessState!: { [char: string]: LetterGuessState };\n\n  @Output()\n  keyPressed = new EventEmitter<string>();\n\n  LetterGuessState = LetterGuessState;\n\n  keyboard = Object.freeze([\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    [\n      'Enter',\n      'Z',\n      'X',\n      'C',\n      'V',\n      'B',\n      'N',\n      'M',\n      'Backspace',\n    ],\n  ]);\n\n  onKeyClick(char: string) {\n    this.keyPressed.emit(char);\n  }\n}\n"
    },
    "/src/app/components/letter-grid/letter-grid.component.html": {
      "code": "<section\n  class=\"grid-section\"\n  [style.grid-template-columns]=\"\n    'repeat(' + gridState[0].length + ', var(--size))'\n  \"\n  [style.grid-template-rows]=\"\n    'repeat(' + gridState.length + ', var(--size))'\n  \">\n  <ng-container *ngFor=\"let lettersRow of gridState\">\n    <div\n      *ngFor=\"\n        let letter of lettersRow;\n        let colIndex = index\n      \"\n      [class.guess--correct]=\"\n        letter.state === LetterGuessState.CORRECT\n      \"\n      [class.guess--present]=\"\n        letter.state === LetterGuessState.PRESENT\n      \"\n      [class.guess--absent]=\"\n        letter.state === LetterGuessState.ABSENT\n      \"\n      [style.transition-delay]=\"\n        letter.state !== LetterGuessState.INDETERMINATE\n          ? colIndex * 50 + 'ms'\n          : ''\n      \"\n      class=\"grid-cell\">\n      {{ letter.char }}\n    </div>\n  </ng-container>\n</section>\n"
    },
    "/src/app/components/letter-grid/letter-grid.component.ts": {
      "code": "import { Component, Input } from '@angular/core';\nimport { GridState, LetterGuessState } from '../../models';\n\n@Component({\n  selector: 'app-letter-grid',\n  templateUrl: 'letter-grid.component.html',\n})\nexport class LetterGridComponent {\n  @Input()\n  gridState!: GridState[][];\n\n  LetterGuessState = LetterGuessState;\n}\n"
    },
    "/src/app/components/wordle/wordle.component.html": {
      "code": "<main class=\"root\">\n  <h1 class=\"title\">Wordle</h1>\n  <app-game-result\n    [gameState]=\"gameState\"\n    [wordOfTheDay]=\"wordOfTheDay\"\n    (resetClick)=\"resetGame()\" />\n  <app-letter-grid [gridState]=\"gridState\" />\n  <app-keyboard\n    [letterGuessState]=\"letterGuessState\"\n    (keyPressed)=\"onPressKey($event)\" />\n</main>\n"
    },
    "/src/app/components/wordle/wordle.component.ts": {
      "code": "import {\n  Component,\n  OnInit,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  LetterGuessState,\n  GameState,\n  INITIAL_CURSOR_POSITION,\n  GridState,\n  LETTER_GUESS_STATE_PRIORITY,\n  WORDS,\n  A_KEYCODE,\n  Z_KEYCODE,\n} from '../../models';\n\n@Component({\n  selector: 'app-wordle',\n  templateUrl: 'wordle.component.html',\n})\nexport class WordleComponent implements OnInit {\n  @Input()\n  lettersPerWord = 5;\n\n  @Input()\n  maxAttempts = 2;\n\n  wordOfTheDay!: string;\n  gridState!: GridState[][];\n  letterGuessState!: { [char: string]: LetterGuessState };\n  gameState!: GameState;\n  cursorPositionState!: number[];\n\n  @HostListener('document:keydown', ['$event'])\n  pressKey(event: KeyboardEvent) {\n    this.onPressKey(event.key);\n  }\n\n  ngOnInit() {\n    this.resetGame();\n  }\n\n  resetGame() {\n    this.gridState = this.getInitialGridState();\n    this.cursorPositionState = INITIAL_CURSOR_POSITION;\n    this.letterGuessState = {};\n    this.gameState = GameState.IN_PROGRESS;\n    this.wordOfTheDay = this.generateRandomWord();\n  }\n\n  onPressKey(key: string) {\n    // Game has a conclusion.\n    if (this.gameState !== GameState.IN_PROGRESS) {\n      return;\n    }\n\n    // Ignore invalid input from user.\n    if (!this.isValidKey(key)) {\n      return;\n    }\n\n    switch (key) {\n      case 'Enter':\n        this.checkWord();\n        break;\n      case 'Backspace':\n        this.deleteLetter();\n        break;\n      default:\n        this.addLetter(key);\n    }\n  }\n\n  addLetter(char: string) {\n    const [row, col] = this.cursorPositionState;\n\n    // Row is already fully filled.\n    if (col + 1 === this.lettersPerWord) {\n      return;\n    }\n\n    const newGridState: any = Array.from(this.gridState);\n    newGridState[row][col + 1].char = char.toUpperCase();\n    this.cursorPositionState = [row, col + 1];\n    this.gridState = newGridState;\n  }\n\n  checkWord() {\n    const [row, col] = this.cursorPositionState;\n\n    // Not enough letters in the row yet.\n    if (col + 1 < this.lettersPerWord) {\n      return;\n    }\n\n    const newGridState = Array.from(this.gridState);\n    const newLetterGuessState: any = {\n      ...this.letterGuessState,\n    };\n    const word = this.gridState[row]\n      .map(({ char }) => char)\n      .join('');\n\n    // Create a map of count of letters in original word to compare\n    // with the word entered by user.\n    const letterFreq = this.countLetterFreqInWord(\n      this.wordOfTheDay,\n    );\n    const nonMatchingIndices = [];\n    let matchCount = 0;\n\n    // Update state for matching chars first.\n    for (let i = 0; i < word.length; i++) {\n      const currentChar: any = word[i];\n      const currentActualChar = this.wordOfTheDay[i];\n\n      if (currentChar === currentActualChar) {\n        newGridState[row][i].state =\n          LetterGuessState.CORRECT;\n        newLetterGuessState[currentChar] =\n          LetterGuessState.CORRECT;\n        letterFreq.set(\n          currentChar,\n          letterFreq.get(currentChar) - 1,\n        );\n        matchCount++;\n      } else {\n        nonMatchingIndices.push(i);\n      }\n    }\n\n    // Guessed correctly.\n    if (matchCount === this.lettersPerWord) {\n      this.letterGuessState = newLetterGuessState;\n      this.gridState = newGridState;\n      this.gameState = GameState.GUESSED_CORRECTLY;\n      return;\n    }\n\n    // Update state for rest of the chars.\n    nonMatchingIndices.forEach((idx) => {\n      const char = word[idx];\n      if (\n        letterFreq.has(char) &&\n        letterFreq.get(char) > 0\n      ) {\n        letterFreq.set(char, letterFreq.get(char) - 1);\n        newGridState[row][idx].state =\n          LetterGuessState.PRESENT;\n\n        // Only change state if the new state is higher priority\n        // than the current state.\n        if (\n          LETTER_GUESS_STATE_PRIORITY[\n            LetterGuessState.PRESENT\n          ] >\n          LETTER_GUESS_STATE_PRIORITY[\n            newLetterGuessState[char] ??\n              LetterGuessState.INDETERMINATE\n          ]\n        ) {\n          newLetterGuessState[char] =\n            LetterGuessState.PRESENT;\n        }\n      } else {\n        newGridState[row][idx].state =\n          LetterGuessState.ABSENT;\n        // Only change state if the new state is higher priority\n        // than the current state.\n        if (\n          LETTER_GUESS_STATE_PRIORITY[\n            LetterGuessState.ABSENT\n          ] >\n          LETTER_GUESS_STATE_PRIORITY[\n            newLetterGuessState[char] ??\n              LetterGuessState.INDETERMINATE\n          ]\n        ) {\n          newLetterGuessState[char] =\n            LetterGuessState.ABSENT;\n        }\n      }\n    });\n\n    this.letterGuessState = newLetterGuessState;\n    this.gridState = newGridState;\n\n    // User did not manage to guess the correct answer.\n    if (row + 1 === this.maxAttempts) {\n      this.gameState = GameState.NO_MORE_GUESSES;\n      return;\n    }\n\n    // Move to next row.\n    this.cursorPositionState = [row + 1, -1];\n  }\n\n  private countLetterFreqInWord(word: string) {\n    const freq = new Map();\n\n    for (let i = 0; i < word.length; ++i) {\n      if (!freq.has(word[i])) {\n        freq.set(word[i], 0);\n      }\n\n      freq.set(word[i], freq.get(word[i]) + 1);\n    }\n\n    return freq;\n  }\n\n  private generateRandomWord() {\n    return WORDS[Math.floor(Math.random() * WORDS.length)];\n  }\n\n  private getInitialGridState(): GridState[][] {\n    return Array.from({ length: this.maxAttempts }, () =>\n      Array.from({ length: this.lettersPerWord }, () => ({\n        char: '',\n        state: LetterGuessState.INDETERMINATE,\n      })),\n    );\n  }\n\n  private isValidKey(key: string) {\n    return (\n      key === 'Enter' ||\n      key === 'Backspace' ||\n      (key.length === 1 &&\n        key.toUpperCase().charCodeAt(0) >= A_KEYCODE &&\n        key.toUpperCase().charCodeAt(0) <= Z_KEYCODE)\n    );\n  }\n\n  private deleteLetter() {\n    const [row, col] = this.cursorPositionState;\n    const newGridState = Array.from(this.gridState);\n\n    if (col === -1) {\n      return;\n    }\n\n    newGridState[row][col].char = '';\n    this.cursorPositionState = [row, col - 1];\n    this.gridState = newGridState;\n  }\n}\n"
    },
    "/src/app/models.ts": {
      "code": "export enum LetterGuessState {\n  INDETERMINATE = 'INDETERMINATE',\n  ABSENT = 'ABSENT',\n  PRESENT = 'PRESENT',\n  CORRECT = 'CORRECT',\n}\n\nexport enum GameState {\n  IN_PROGRESS = 'IN_PROGRESS',\n  GUESSED_CORRECTLY = 'GUESSED_CORRECTLY',\n  NO_MORE_GUESSES = 'NO_MORE_GUESSES',\n}\n\nexport const WORDS: string[] = [\n  'APPLE',\n  'BEAST',\n  'FAINT',\n  'FEAST',\n  'FRUIT',\n  'GAMES',\n  'PAINT',\n  'PASTE',\n  'TOWER',\n  'REACT',\n];\n\nexport const A_KEYCODE = 65;\nexport const Z_KEYCODE = 90;\n\nexport const INITIAL_CURSOR_POSITION = [0, -1];\n\nexport interface GridState {\n  char: string;\n  state: LetterGuessState;\n}\n\nexport const LETTER_GUESS_STATE_PRIORITY: {\n  [key: string]: number;\n} = Object.freeze({\n  INDETERMINATE: 1,\n  ABSENT: 2,\n  PRESENT: 3,\n  CORRECT: 4,\n});\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { enableProdMode } from '@angular/core';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "* {\n  box-sizing: border-box;\n}\n\nbody {\n  --indeterminate: #d3d6da;\n  --correct: #6aaa64;\n  --present: #c9b458;\n  --absent: #787c7e;\n\n  margin: 0;\n  font-family: 'Ubuntu', sans-serif;\n}\n\n.root {\n  display: grid;\n  outline: none;\n  row-gap: 16px;\n}\n\n.title {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 0;\n  text-align: center;\n}\n\n.grid-section {\n  --size: 50px;\n\n  display: grid;\n  gap: 5px;\n  justify-content: center;\n}\n\n.grid-cell {\n  --fill-color: transparent;\n  --background-color: #fff;\n  --border-color: var(--indeterminate);\n  --color: #000;\n\n  border-color: var(--border-color);\n  background-color: var(--background-color);\n  border-width: 2px;\n  border-style: solid;\n  font-size: 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n\n.grid-cell--filled {\n  animation: scale-on-fill 50ms ease-in;\n}\n\n@keyframes scale-on-fill {\n  70% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.grid-cell--final {\n  color: var(--color);\n  transition-property: color background-color border-color;\n  transition-duration: 50ms;\n}\n\n.keyboard-section {\n  display: flex;\n  flex-direction: column;\n  row-gap: 0.5rem;\n}\n\n.keyboard-row {\n  display: flex;\n  justify-content: center;\n}\n\n.keyboard-row__button {\n  --background-color: var(--indeterminate);\n  --color: #000;\n\n  border: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  height: 40px;\n  border-radius: 4px;\n  font-weight: 600;\n  cursor: pointer;\n  min-width: 30px;\n  margin-inline: 0.25rem;\n}\n\n.guess--absent {\n  --background-color: var(--absent);\n  --border-color: var(--absent);\n  --color: #fff;\n}\n\n.guess--correct {\n  --background-color: var(--correct);\n  --border-color: var(--correct);\n  --color: #fff;\n}\n\n.guess--present {\n  --background-color: var(--present);\n  --border-color: var(--present);\n  --color: #fff;\n}\n\n.result-row {\n  display: flex;\n  column-gap: 8px;\n  justify-content: center;\n}\n\n.reset-button {\n  cursor: pointer;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  }
}