{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.tsx\",\n    \"/src/Canvas.tsx\",\n    \"/src/Cell.tsx\",\n    \"/src/Toolbar.tsx\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/App.tsx\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/pixel-art-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport Canvas from './Canvas';\nimport Toolbar from './Toolbar';\nimport { Color, Mode } from './colors';\n\nexport default function App() {\n  const [mode, setMode] = useState<Mode>('draw');\n  const [selectedColor, setColor] =\n    useState<Color>('black');\n\n  return (\n    <div className=\"app\">\n      <Canvas selectedColor={selectedColor} mode={mode} />\n      <Toolbar\n        selectedColor={selectedColor}\n        onColorChange={setColor}\n        mode={mode}\n        onModeChange={setMode}\n      />\n    </div>\n  );\n}\n"
    },
    "/src/Canvas.tsx": {
      "code": "import { useState } from 'react';\n\nimport Cell from './Cell';\nimport { Color, Mode } from './colors';\n\ntype Props = Readonly<{\n  selectedColor: Color;\n  initialRows?: number;\n  initialColumns?: number;\n  mode: Mode;\n}>;\n\nexport default function Canvas({\n  selectedColor,\n  mode,\n  initialRows = 15,\n  initialColumns = 15,\n}: Props) {\n  const [grid, setGrid] = useState<(Color | null)[][]>(\n    Array.from({ length: initialRows }, () =>\n      Array(initialColumns).fill(null),\n    ),\n  );\n  const [isDragging, setIsDragging] = useState(false);\n\n  return (\n    <div\n      className=\"grid\"\n      onMouseDown={() => setIsDragging(true)}\n      onMouseUp={() => setIsDragging(false)}>\n      {grid.map((row, rowIndex) => (\n        <div\n          className={[\n            'grid__row',\n            rowIndex % 2 === 0\n              ? 'grid__row--even'\n              : 'grid__row--odd',\n          ].join(' ')}\n          key={rowIndex}>\n          {row.map((cellColor, cellIndex) => (\n            <Cell\n              key={cellIndex}\n              color={cellColor}\n              isDragging={isDragging}\n              onMark={() => {\n                const newGrid = grid.map((row) => [...row]);\n                newGrid[rowIndex][cellIndex] =\n                  mode === 'erase' ? null : selectedColor;\n                setGrid(newGrid);\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n"
    },
    "/src/Cell.tsx": {
      "code": "import { COLORS, Color } from './colors';\n\ntype Props = Readonly<{\n  color: Color | null;\n  isDragging: boolean;\n  onMark: () => void;\n}>;\n\nexport default function Cell({\n  color,\n  isDragging,\n  onMark,\n}: Props) {\n  return (\n    <button\n      onClick={onMark}\n      onMouseDown={onMark}\n      onMouseEnter={isDragging ? onMark : undefined}\n      style={{\n        backgroundColor:\n          color != null ? COLORS[color] : undefined,\n      }}\n      className=\"grid__cell\"\n    />\n  );\n}\n"
    },
    "/src/colors.ts": {
      "code": "export const COLORS = {\n  white: '#fff',\n  gray: '#e9ecef',\n  black: '#000',\n  red: '#cc0001',\n  orange: '#fb940b',\n  yellow: '#ffff01',\n  green: '#01cc00',\n  teal: '#38d9a9',\n  blue: '#228be6',\n  purple: '#7950f2',\n  beige: '#ff8787',\n} as const;\nexport type Color = keyof typeof COLORS;\n\nexport type Mode = 'draw' | 'erase';\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.app {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.grid {\n  display: flex;\n  flex-direction: column;\n}\n\n.grid__row {\n  display: flex;\n  flex-shrink: 0;\n}\n\n.grid__cell {\n  --cell-size: 20px;\n\n  height: var(--cell-size);\n  width: var(--cell-size);\n  border: 0;\n  flex-shrink: 0;\n  background-color: transparent;\n}\n\n.grid__row--even .grid__cell:nth-child(odd),\n.grid__row--odd .grid__cell:nth-child(even) {\n  background-color: #e9ecef;\n}\n\n.toolbar {\n  display: flex;\n  gap: 20px;\n}\n\n.toolbar .toolbar__mode {\n  height: 36px;\n  background-color: transparent;\n  border: 2px solid black;\n  font-size: 14px;\n}\n\n.toolbar .toolbar__mode--selected {\n  background-color: black;\n  color: white;\n}\n\n.toolbar .toolbar__color-picker {\n  display: flex;\n}\n\n.toolbar .toolbar__color {\n  --size: 20px;\n\n  width: var(--size);\n  height: var(--size);\n  border: 2px solid transparent;\n}\n\n.toolbar .toolbar__color--selected {\n  border: 2px solid black;\n}\n"
    },
    "/src/Toolbar.tsx": {
      "code": "import { COLORS, Color, Mode } from './colors';\n\ntype Props = Readonly<{\n  selectedColor: Color;\n  onColorChange: (color: Color) => void;\n  mode: Mode;\n  onModeChange: (mode: Mode) => void;\n}>;\n\nexport default function Toolbar({\n  selectedColor,\n  onColorChange,\n  mode,\n  onModeChange,\n}: Props) {\n  function onColorClick(color: Color) {\n    onModeChange('draw');\n    onColorChange(color);\n  }\n\n  return (\n    <div className=\"toolbar\">\n      <div>\n        <button\n          onClick={() => onModeChange('draw')}\n          className={[\n            'toolbar__mode',\n            mode === 'draw' && 'toolbar__mode--selected',\n          ]\n            .filter(Boolean)\n            .join(' ')}>\n          Draw\n        </button>\n        <button\n          onClick={() => onModeChange('erase')}\n          className={[\n            'toolbar__mode',\n            mode === 'erase' && 'toolbar__mode--selected',\n          ]\n            .filter(Boolean)\n            .join(' ')}>\n          Erase\n        </button>\n      </div>\n      <div className=\"toolbar__color-picker\">\n        {Object.entries(COLORS).map(([color, hex]) => (\n          <button\n            key={color}\n            aria-label={color}\n            className={[\n              'toolbar__color',\n              color === selectedColor &&\n                'toolbar__color--selected',\n            ]\n              .filter(Boolean)\n              .join(' ')}\n            style={{\n              borderColor: (() => {\n                if (\n                  color !== selectedColor &&\n                  color === 'white'\n                ) {\n                  return '#ccc';\n                }\n\n                if (\n                  color === selectedColor &&\n                  color === 'black'\n                ) {\n                  return '#fff';\n                }\n              })(),\n              backgroundColor: hex as string,\n            }}\n            onClick={() => onColorClick(color as Color)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/Canvas.tsx",
      "/src/Cell.tsx",
      "/src/Toolbar.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.tsx",
    "environment": "create-react-app"
  }
}