{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/app/app.component.ts\",\n    \"/src/app/app.component.html\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/app/app.component.ts\",\n  \"environment\": \"angular-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/pixel-art-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"app\">\n  <app-canvas [selectedColor]=\"color\" [mode]=\"mode\" />\n\n  <app-toolbar\n    [mode]=\"mode\"\n    [selectedColor]=\"color\"\n    (colorChange)=\"onColorChange($event)\"\n    (modeChange)=\"onModeChange($event)\" />\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\nimport { Color, Mode } from './colors';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  color: Color = 'black';\n  mode: Mode = 'draw';\n\n  onColorChange(color: Color) {\n    this.color = color;\n  }\n\n  onModeChange(mode: Mode) {\n    this.mode = mode;\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { CanvasComponent } from './canvas.component';\nimport {\n  BorderColorPipe,\n  ToolbarComponent,\n} from './toolbar.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CanvasComponent,\n    ToolbarComponent,\n    BorderColorPipe,\n  ],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/canvas.component.html": {
      "code": "<div\n  class=\"grid\"\n  (mousedown)=\"isDragging = true\"\n  (mouseup)=\"isDragging = false\">\n  <div\n    *ngFor=\"\n      let row of grid;\n      let rowIndex = index;\n      trackBy: trackByFn\n    \"\n    [ngClass]=\"{\n      grid__row: true,\n      'grid__row--even': rowIndex % 2 === 0,\n      'grid__row--odd': rowIndex % 2 !== 0\n    }\">\n    <button\n      *ngFor=\"\n        let cell of row;\n        let cellIndex = index;\n        trackBy: trackByFn\n      \"\n      (click)=\"onMark(rowIndex, cellIndex)\"\n      (mousedown)=\"onMark(rowIndex, cellIndex)\"\n      (mouseenter)=\"\n        isDragging ? onMark(rowIndex, cellIndex) : null\n      \"\n      [ngStyle]=\"{\n        'background-color': cell.color\n          ? COLORS[cell.color]\n          : undefined\n      }\"\n      class=\"grid__cell\"></button>\n  </div>\n</div>\n"
    },
    "/src/app/canvas.component.ts": {
      "code": "import { Component, Input, OnInit } from '@angular/core';\nimport { Color, COLORS, Mode } from './colors';\n\ninterface Cell {\n  color: Color | null;\n}\n\n@Component({\n  selector: 'app-canvas',\n  templateUrl: './canvas.component.html',\n})\nexport class CanvasComponent implements OnInit {\n  @Input()\n  selectedColor!: Color;\n\n  @Input()\n  mode!: Mode;\n\n  initialRows: number = 15;\n  initialColumns: number = 15;\n  grid: Cell[][] = [];\n  isDragging = false;\n  COLORS = COLORS;\n\n  ngOnInit() {\n    this.createGrid();\n  }\n\n  createGrid(): void {\n    this.grid = Array.from(\n      { length: this.initialRows },\n      () =>\n        Array.from({ length: this.initialColumns }, () => ({\n          color: null,\n        })),\n    );\n  }\n\n  onMark(rowIndex: number, cellIndex: number): void {\n    const newGrid = this.grid.map((row) => [...row]);\n    newGrid[rowIndex][cellIndex].color =\n      this.mode === 'erase' ? null : this.selectedColor;\n    this.grid = newGrid;\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n}\n"
    },
    "/src/app/colors.ts": {
      "code": "export const COLORS = {\n  white: '#fff',\n  gray: '#e9ecef',\n  black: '#000',\n  red: '#cc0001',\n  orange: '#fb940b',\n  yellow: '#ffff01',\n  green: '#01cc00',\n  teal: '#38d9a9',\n  blue: '#228be6',\n  purple: '#7950f2',\n  beige: '#ff8787',\n};\n\nexport type Color = keyof typeof COLORS;\n\nexport type Mode = 'draw' | 'erase';\n"
    },
    "/src/app/toolbar.component.html": {
      "code": "<div class=\"toolbar\">\n  <div>\n    <button\n      (click)=\"modeChange.emit('draw')\"\n      [ngClass]=\"{\n        toolbar__mode: true,\n        'toolbar__mode--selected': mode === 'draw'\n      }\">\n      Draw\n    </button>\n    <button\n      (click)=\"modeChange.emit('erase')\"\n      [ngClass]=\"{\n        toolbar__mode: true,\n        'toolbar__mode--selected': mode === 'erase'\n      }\">\n      Erase\n    </button>\n  </div>\n  <div class=\"toolbar__color-picker\">\n    <ng-container *ngFor=\"let entry of COLORS | keyvalue\">\n      <button\n        [attr.aria-label]=\"entry.key\"\n        [ngClass]=\"{\n          toolbar__color: true,\n          'toolbar__color--selected':\n            entry.key === selectedColor\n        }\"\n        [ngStyle]=\"{\n          'border-color':\n            entry.key | borderColor: selectedColor,\n          'background-color': entry.value\n        }\"\n        (click)=\"onColorClick(entry.key)\"></button>\n    </ng-container>\n  </div>\n</div>\n"
    },
    "/src/app/toolbar.component.ts": {
      "code": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { COLORS, Color, Mode } from './colors';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n})\nexport class ToolbarComponent {\n  @Input()\n  selectedColor!: Color;\n\n  @Input()\n  mode!: Mode;\n\n  @Output()\n  colorChange = new EventEmitter<Color>();\n\n  @Output()\n  modeChange = new EventEmitter<Mode>();\n\n  COLORS = COLORS;\n\n  onColorClick(color: string): void {\n    this.modeChange.emit('draw');\n    this.colorChange.emit(color as Color);\n  }\n}\n\n@Pipe({ name: 'borderColor' })\nexport class BorderColorPipe implements PipeTransform {\n  transform(\n    color: string,\n    selectedColor: string,\n  ): string | undefined {\n    if (color !== selectedColor && color === 'white') {\n      return '#ccc';\n    }\n    if (color === selectedColor && color === 'black') {\n      return '#fff';\n    }\n    return undefined;\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.app {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.grid {\n  display: flex;\n  flex-direction: column;\n}\n\n.grid__row {\n  display: flex;\n  flex-shrink: 0;\n}\n\n.grid__cell {\n  --cell-size: 20px;\n\n  height: var(--cell-size);\n  width: var(--cell-size);\n  border: 0;\n  flex-shrink: 0;\n  background-color: transparent;\n}\n\n.grid__row--even .grid__cell:nth-child(odd),\n.grid__row--odd .grid__cell:nth-child(even) {\n  background-color: #e9ecef;\n}\n\n.toolbar {\n  display: flex;\n  gap: 20px;\n}\n\n.toolbar .toolbar__mode {\n  height: 36px;\n  background-color: transparent;\n  border: 2px solid black;\n  font-size: 14px;\n}\n\n.toolbar .toolbar__mode--selected {\n  background-color: black;\n  color: white;\n}\n\n.toolbar .toolbar__color-picker {\n  display: flex;\n}\n\n.toolbar .toolbar__color {\n  --size: 20px;\n\n  width: var(--size);\n  height: var(--size);\n  border: 2px solid transparent;\n}\n\n.toolbar .toolbar__color--selected {\n  border: 2px solid black;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  }
}