{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/users-database-react-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useState } from 'react';\n\nconst generateId = (() => {\n  let id = 0;\n  return () => `${id++}`;\n})();\n\nexport default function App() {\n  const [selected, setSelected] = useState(null);\n  const [search, setSearch] = useState('');\n  const [first, setFirst] = useState('');\n  const [last, setLast] = useState('');\n  const [users, setUsers] = useState([\n    { first: 'Hans', last: 'Emil', id: generateId() },\n    { first: 'Max', last: 'Mustermann', id: generateId() },\n    { first: 'Roman', last: 'Tisch', id: generateId() },\n  ]);\n\n  const filteredUsers = users.filter(\n    (user) =>\n      user.first\n        .toLowerCase()\n        .includes(search.toLowerCase()) ||\n      user.last\n        .toLowerCase()\n        .includes(search.toLowerCase()),\n  );\n\n  const hasSelectedUser = selected != null;\n\n  const canCreateUser =\n    !hasSelectedUser && first !== '' && last !== '';\n\n  const canUpdateUser =\n    hasSelectedUser && first !== '' && last !== '';\n\n  function create() {\n    setUsers(\n      users.concat({\n        first,\n        last,\n        id: generateId(),\n      }),\n    );\n    setFirst('');\n    setLast('');\n  }\n\n  function update() {\n    const newUsers = [...users];\n    const foundUser = newUsers.find(\n      ({ id }) => selected === id,\n    );\n    foundUser.first = first;\n    foundUser.last = last;\n    setUsers(newUsers);\n  }\n\n  function del() {\n    setUsers(users.filter((user) => user.id !== selected));\n    cancel();\n  }\n\n  function cancel() {\n    setSelected(null);\n    setFirst('');\n    setLast('');\n  }\n\n  function onSubmit(event) {\n    // To prevent a page reload.\n    event.preventDefault();\n    const formData = new FormData(\n      event.target,\n      event.nativeEvent.submitter,\n    );\n    const intent = formData.get('intent');\n\n    switch (intent) {\n      case 'create':\n        create();\n        break;\n\n      case 'update':\n        update();\n        break;\n\n      case 'delete':\n        del();\n        break;\n\n      case 'cancel':\n        cancel();\n        break;\n\n      default:\n        throw new Error(`Invalid intent: ${intent}`);\n    }\n  }\n\n  return (\n    <form className=\"app\" onSubmit={onSubmit}>\n      <div>\n        <input\n          aria-label=\"Search users\"\n          type=\"text\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          placeholder=\"Search\"\n        />\n      </div>\n\n      <div className=\"middle-row\">\n        <select\n          size={5}\n          className=\"users-list\"\n          value={selected}\n          onChange={(e) => {\n            const newSelected = e.target.value;\n            setSelected(newSelected);\n\n            const foundUser = users.find(\n              ({ id }) => id === newSelected,\n            );\n            setFirst(foundUser.first);\n            setLast(foundUser.last);\n          }}>\n          {filteredUsers.map((user) => (\n            <option key={user.id} value={user.id}>\n              {user.first} {user.last}\n            </option>\n          ))}\n        </select>\n        <div className=\"inputs\">\n          <label>\n            First Name:\n            <input\n              type=\"text\"\n              required\n              value={first}\n              onChange={(e) => setFirst(e.target.value)}\n            />\n          </label>\n          <label>\n            Last Name:\n            <input\n              type=\"text\"\n              required\n              value={last}\n              onChange={(e) => setLast(e.target.value)}\n            />\n          </label>\n        </div>\n      </div>\n\n      <div className=\"buttons\">\n        <button\n          name=\"intent\"\n          value=\"create\"\n          disabled={!canCreateUser}>\n          Create\n        </button>\n        <button\n          name=\"intent\"\n          value=\"update\"\n          disabled={!canUpdateUser}>\n          Update\n        </button>\n        <button\n          name=\"intent\"\n          value=\"delete\"\n          disabled={!hasSelectedUser}>\n          Delete\n        </button>\n        <button\n          name=\"intent\"\n          value=\"cancel\"\n          disabled={!hasSelectedUser}>\n          Cancel\n        </button>\n      </div>\n    </form>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "* {\n  font-size: inherit;\n}\n\nbody {\n  font-family: sans-serif;\n}\n\n.app {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.inputs {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\ninput {\n  display: block;\n}\n\n.middle-row {\n  display: flex;\n  gap: 16px;\n}\n\n.users-list {\n  width: 14em;\n}\n\n.buttons {\n  display: flex;\n  gap: 4px;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}