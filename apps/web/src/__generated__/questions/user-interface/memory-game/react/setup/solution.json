{
  "author": "utpal-d4l",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/memory-game-react-solution\",\n  \"author\": \"utpal-d4l\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nconst emojis = [\n  '🐵',\n  '🐶',\n  '🦊',\n  '🐱',\n  '🦁',\n  '🐯',\n  '🐴',\n  '🦄',\n  '🦓',\n  '🦌',\n  '🐮',\n  '🐷',\n  '🐭',\n  '🐹',\n  '🐻',\n  '🐨',\n  '🐼',\n  '🐽',\n  '🐸',\n  '🐰',\n  '🐙',\n];\n\nfunction shuffle(array) {\n  for (let i = 0; i < array.length; i++) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n// Generate cards configuration with the required groups of emojis.\nfunction generateCards(totalCount, matchCount) {\n  const numGroups = totalCount / matchCount;\n  if (numGroups > emojis.length) {\n    throw new Error('Not enough emojis');\n  }\n\n  const emojisList = emojis.slice(0, numGroups);\n  const cards = Array.from(\n    { length: numGroups },\n    () => null,\n  )\n    .map((_, idx) => idx)\n    .map((idx) =>\n      Array.from(\n        { length: matchCount },\n        () => emojisList[idx],\n      ),\n    )\n    .flat();\n\n  shuffle(cards);\n  return cards;\n}\n\nfunction MemoryGame({\n  cols = 4,\n  rows = 4,\n  delay = 2000,\n  matchCount = 2,\n}) {\n  // Total number of cells.\n  const totalCount = rows * cols;\n  // An array of emojis to represent the cards.\n  const [cards, setCards] = useState(\n    generateCards(totalCount, matchCount),\n  );\n  // Currently flipped cards.\n  const [flipped, setFlipped] = useState([]);\n  // Identifier of matched cards.\n  const [matched, setMatched] = useState(new Set());\n  // Delay before cards are flipped back.\n  const waitTimer = useRef(null);\n  // Whether the game has completed.\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  const resetGame = useCallback(() => {\n    waitTimer.current = null;\n    setCards(generateCards(totalCount, matchCount));\n    setFlipped([]);\n    setMatched(new Set());\n    setGameCompleted(false);\n  }, [matchCount, totalCount]);\n\n  useEffect(() => {\n    resetGame();\n  }, [cols, rows, matchCount, resetGame]);\n\n  if (matchCount < 2) {\n    throw new Error(`${matchCount} should be 2 or more`);\n  }\n\n  if (totalCount % matchCount !== 0) {\n    throw new Error(\n      `Cannot divide total cells of ${totalCount} by ${matchCount}`,\n    );\n  }\n\n  function onFlip(index) {\n    let currFlipped = flipped;\n\n    // Player flips more cards while there are\n    // unmatched cards flipped open.\n    if (waitTimer.current != null) {\n      clearTimeout(waitTimer.current);\n      waitTimer.current = null;\n      currFlipped = [];\n    }\n\n    const newflipped = [...currFlipped, index];\n    setFlipped(newflipped);\n\n    // Not enough cards are flipped.\n    if (newflipped.length < matchCount) {\n      return;\n    }\n\n    const allFlippedAreSame = newflipped.every(\n      (index) => cards[newflipped[0]] === cards[index],\n    );\n\n    if (allFlippedAreSame) {\n      const newMatchedSet = new Set(matched);\n      newMatchedSet.add(cards[newflipped[0]]);\n      setMatched(newMatchedSet);\n      setFlipped([]);\n\n      if (newMatchedSet.size * matchCount === totalCount) {\n        setGameCompleted(true);\n      }\n\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      // After a delay if no new cards were flipped,\n      // flip all cards back.\n      setFlipped([]);\n      waitTimer.current = null;\n    }, delay);\n\n    waitTimer.current = timer;\n  }\n\n  return (\n    <div className=\"app\">\n      <div\n        className=\"grid\"\n        style={{\n          gridTemplateRows: `repeat(${rows}, var(--size))`,\n          gridTemplateColumns: `repeat(${cols}, var(--size))`,\n        }}>\n        {cards.map((card, index) => {\n          const isMatched = matched.has(cards[index]);\n          const isFlipped = flipped.includes(index);\n\n          return (\n            <button\n              key={index}\n              className={[\n                'card',\n                matched.has(cards[index]) &&\n                  'card--revealed',\n              ]\n                .filter(Boolean)\n                .join(' ')}\n              disabled={isMatched || isFlipped}\n              onClick={() => {\n                onFlip(index);\n              }}>\n              {(isMatched || isFlipped) && card}\n            </button>\n          );\n        })}\n      </div>\n      {gameCompleted && (\n        <button onClick={resetGame}>Play Again</button>\n      )}\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <MemoryGame\n      rows={4}\n      cols={4}\n      delay={2000}\n      matchCount={2}\n    />\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.app {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 10px;\n}\n\n.grid {\n  --size: 60px;\n\n  display: grid;\n  gap: 8px;\n  justify-content: center;\n  border: 2px solid black;\n  border-radius: 8px;\n  padding: 8px;\n}\n\n.card {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid black;\n  border-radius: 6px;\n  font-size: 30px;\n  cursor: pointer;\n  background-color: #eee;\n  overflow: hidden;\n  position: relative;\n}\n\n.card:disabled {\n  color: #000;\n}\n\n.card--revealed {\n  background: transparent;\n  border-color: transparent;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}