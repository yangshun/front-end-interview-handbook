{
  "author": "tanhauhau",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.svelte\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.svelte\",\n  \"environment\": \"svelte\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/memory-game-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import './styles.css';\n  const emojis = [\n    '🐵',\n    '🐶',\n    '🦊',\n    '🐱',\n    '🦁',\n    '🐯',\n    '🐴',\n    '🦄',\n    '🦓',\n    '🦌',\n    '🐮',\n    '🐷',\n    '🐭',\n    '🐹',\n    '🐻',\n    '🐨',\n    '🐼',\n    '🐽',\n    '🐸',\n    '🐰',\n    '🐙',\n  ];\n\n  function shuffle(array) {\n    for (let i = 0; i < array.length; i++) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  // Generate cards configuration with the required groups of emojis.\n  function generateCards(totalCount, matchCount) {\n    const numGroups = totalCount / matchCount;\n    if (numGroups > emojis.length) {\n      throw new Error('Not enough emojis');\n    }\n\n    const emojisList = emojis.slice(0, numGroups);\n    const cards = Array.from(\n      { length: numGroups },\n      () => null,\n    )\n      .map((_, idx) => idx)\n      .map((idx) =>\n        Array.from(\n          { length: matchCount },\n          () => emojisList[idx],\n        ),\n      )\n      .flat();\n\n    shuffle(cards);\n    return cards;\n  }\n\n  export let cols = 4;\n  export let rows = 4;\n  export let delay = 2000;\n  export let matchCount = 2;\n\n  // Total number of cells.\n  $: totalCount = rows * cols;\n  // An array of emojis to represent the cards.\n  let cards = generateCards(totalCount, matchCount);\n  // Currently flipped cards.\n  let flipped = [];\n  // Identifier of matched cards.\n  let matched = new Set();\n  // Delay before cards are flipped back.\n  let waitTimer = null;\n  // Whether the game has completed.\n  let gameCompleted = false;\n\n  function resetGame() {\n    waitTimer = null;\n    cards = generateCards(totalCount, matchCount);\n    flipped = [];\n    matched = new Set();\n    gameCompleted = false;\n  }\n\n  $: if (matchCount < 2) {\n    throw new Error(`${matchCount} should be 2 or more`);\n  }\n  $: if (totalCount % matchCount !== 0) {\n    throw new Error(\n      `Cannot divide total cells of ${totalCount} by ${matchCount}`,\n    );\n  }\n  $: cols, rows, matchCount, resetGame();\n\n  function onFlip(index) {\n    let currFlipped = flipped;\n\n    // Player flips more cards while there are\n    // unmatched cards flipped open.\n    if (waitTimer != null) {\n      clearTimeout(waitTimer);\n      waitTimer = null;\n      currFlipped = [];\n    }\n\n    const newflipped = [...currFlipped, index];\n    flipped = newflipped;\n\n    // Not enough cards are flipped.\n    if (newflipped.length < matchCount) {\n      return;\n    }\n\n    const allFlippedAreSame = newflipped.every(\n      (index) => cards[newflipped[0]] === cards[index],\n    );\n\n    if (allFlippedAreSame) {\n      const newMatchedSet = new Set(matched);\n      newMatchedSet.add(cards[newflipped[0]]);\n      matched = newMatchedSet;\n      flipped = [];\n\n      if (newMatchedSet.size * matchCount === totalCount) {\n        gameCompleted = true;\n      }\n\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      // After a delay if no new cards were flipped,\n      // flip all cards back.\n      flipped = [];\n      waitTimer = null;\n    }, delay);\n\n    waitTimer = timer;\n  }\n</script>\n\n<div class=\"app\">\n  <div\n    class=\"grid\"\n    style=\"\n      grid-template-rows: repeat({rows}, var(--size));\n      grid-template-columns: repeat({cols}, var(--size));\n    \">\n    {#each cards as card, index}\n      {@const isMatched = matched.has(cards[index])}\n      {@const isFlipped = flipped.includes(index)}\n\n      <button\n        class=\"card\"\n        class:card--revealed={matched.has(cards[index])}\n        disabled={isMatched || isFlipped}\n        on:click={() => {\n          onFlip(index);\n        }}>\n        {isMatched || isFlipped ? card : ''}\n      </button>\n    {/each}\n  </div>\n  {#if gameCompleted}\n    <button on:click={resetGame}>Play Again</button>\n  {/if}\n</div>\n\n<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  .app {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    row-gap: 10px;\n  }\n\n  .grid {\n    --size: 60px;\n\n    display: grid;\n    gap: 8px;\n    justify-content: center;\n    border: 2px solid black;\n    border-radius: 8px;\n    padding: 8px;\n  }\n\n  .card {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 2px solid black;\n    border-radius: 6px;\n    font-size: 30px;\n    cursor: pointer;\n    background-color: #eee;\n    overflow: hidden;\n    position: relative;\n  }\n\n  .card:disabled {\n    color: #000;\n  }\n\n  .card--revealed {\n    background: transparent;\n    border-color: transparent;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  }
}