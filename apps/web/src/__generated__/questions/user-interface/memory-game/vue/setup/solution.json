{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.vue\", \"/src/MemoryGame.vue\"],\n  \"activeFile\": \"/src/MemoryGame.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/memory-game-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport MemoryGame from './MemoryGame.vue';\n</script>\n\n<template>\n  <MemoryGame\n    :rows=\"4\"\n    :cols=\"4\"\n    :delay=\"2000\"\n    :matchCount=\"2\" />\n</template>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/MemoryGame.vue": {
      "code": "<script setup>\nimport { computed, ref, watch } from 'vue';\n\nconst props = defineProps({\n  rows: Number,\n  cols: Number,\n  delay: Number,\n  matchCount: Number,\n});\n\nconst emojis = [\n  '🐵',\n  '🐶',\n  '🦊',\n  '🐱',\n  '🦁',\n  '🐯',\n  '🐴',\n  '🦄',\n  '🦓',\n  '🦌',\n  '🐮',\n  '🐷',\n  '🐭',\n  '🐹',\n  '🐻',\n  '🐨',\n  '🐼',\n  '🐽',\n  '🐸',\n  '🐰',\n  '🐙',\n];\n\nfunction shuffle(array) {\n  for (let i = 0; i < array.length; i++) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\n// Generate cards configuration with the required groups of emojis.\nfunction generateCards(totalCount, matchCount) {\n  const numGroups = totalCount / matchCount;\n  if (numGroups > emojis.length) {\n    throw new Error('Not enough emojis');\n  }\n\n  const emojisList = emojis.slice(0, numGroups);\n  const cards = Array.from(\n    { length: numGroups },\n    () => null,\n  )\n    .map((_, idx) => idx)\n    .map((idx) =>\n      Array.from(\n        { length: matchCount },\n        () => emojisList[idx],\n      ),\n    )\n    .flat();\n\n  shuffle(cards);\n  return cards;\n}\n\n// Total number of cells.\nconst totalCount = computed(() => props.rows * props.cols);\n// An array of emojis to represent the cards.\nconst cards = ref([]);\n// Currently flipped cards.\nconst flipped = ref([]);\n// Identifier of matched cards.\nconst matched = ref(new Set());\n// Delay before cards are flipped back.\nlet waitTimer = null;\n// Whether the game has completed.\nconst gameCompleted = ref(false);\n\nfunction resetGame() {\n  waitTimer = null;\n  cards.value = generateCards(\n    totalCount.value,\n    props.matchCount,\n  );\n  flipped.value.length = 0;\n  matched.value.clear();\n  gameCompleted.value = false;\n}\n\nfunction onFlip(index) {\n  // Player flips more cards while there are\n  // unmatched cards flipped open.\n  if (waitTimer != null) {\n    clearTimeout(waitTimer);\n    waitTimer = null;\n    flipped.value.length = 0;\n  }\n\n  flipped.value.push(index);\n\n  // Not enough cards are flipped.\n  if (flipped.value.length < props.matchCount) {\n    return;\n  }\n\n  const allFlippedAreSame = flipped.value.every(\n    (index) =>\n      cards.value[flipped.value[0]] === cards.value[index],\n  );\n\n  if (allFlippedAreSame) {\n    matched.value.add(cards.value[flipped.value[0]]);\n    flipped.value.length = 0;\n\n    if (\n      matched.value.size * props.matchCount ===\n      totalCount.value\n    ) {\n      gameCompleted.value = true;\n    }\n\n    return;\n  }\n\n  const timer = setTimeout(() => {\n    // After a delay if no new cards were flipped,\n    // flip all cards back.\n    flipped.value.length = 0;\n    waitTimer = null;\n  }, props.delay);\n\n  waitTimer = timer;\n}\n\nfunction checkDisabledCard(index) {\n  return (\n    matched.value.has(cards.value[index]) ||\n    flipped.value.includes(index)\n  );\n}\n\nwatch(\n  [\n    () => props.cols,\n    () => props.rows,\n    () => props.matchCount,\n  ],\n  resetGame,\n  {\n    immediate: true,\n  },\n);\n</script>\n\n<template>\n  <div class=\"app\">\n    <div\n      class=\"grid\"\n      :style=\"{\n        gridTemplateRows: `repeat(${rows}, var(--size))`,\n        gridTemplateColumns: `repeat(${cols}, var(--size))`,\n      }\">\n      <button\n        v-for=\"(card, index) in cards\"\n        :key=\"index\"\n        :class=\"[\n          'card',\n          matched.has(cards[index]) && 'card--revealed',\n        ]\"\n        :disabled=\"checkDisabledCard(index)\"\n        @click=\"onFlip(index)\">\n        {{ checkDisabledCard(index) ? card : '' }}\n      </button>\n    </div>\n\n    <button v-if=\"gameCompleted\" @click=\"resetGame\">\n      Play Again\n    </button>\n  </div>\n</template>\n\n<style>\n.app {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  row-gap: 10px;\n}\n\n.grid {\n  --size: 60px;\n\n  display: grid;\n  gap: 8px;\n  justify-content: center;\n  border: 2px solid black;\n  border-radius: 8px;\n  padding: 8px;\n}\n\n.card {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid black;\n  border-radius: 6px;\n  font-size: 30px;\n  cursor: pointer;\n  background-color: #eee;\n  overflow: hidden;\n  position: relative;\n}\n\n.card:disabled {\n  color: #000;\n}\n\n.card--revealed {\n  background: transparent;\n  border-color: transparent;\n}\n</style>\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/MemoryGame.vue"
    ],
    "activeFile": "/src/MemoryGame.vue",
    "environment": "vue-cli"
  }
}