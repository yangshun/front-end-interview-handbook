{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/Checkboxes.tsx\",\n    \"/src/CheckboxInput.tsx\",\n    \"/src/CheckboxList.tsx\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/Checkboxes.tsx\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/nested-checkboxes-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import Checkboxes from './Checkboxes';\n\nexport default function App() {\n  const checkboxesData = [\n    {\n      id: 1,\n      name: 'Electronics',\n      checked: false,\n      children: [\n        {\n          id: 2,\n          name: 'Mobile phones',\n          checked: false,\n          children: [\n            {\n              id: 3,\n              name: 'iPhone',\n              checked: false,\n            },\n            {\n              id: 4,\n              name: 'Android',\n              checked: false,\n            },\n          ],\n        },\n        {\n          id: 5,\n          name: 'Laptops',\n          checked: false,\n          children: [\n            {\n              id: 6,\n              name: 'MacBook',\n              checked: false,\n            },\n            {\n              id: 7,\n              name: 'Surface Pro',\n              checked: false,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 8,\n      name: 'Books',\n      checked: false,\n      children: [\n        {\n          id: 9,\n          name: 'Fiction',\n          checked: false,\n        },\n        {\n          id: 10,\n          name: 'Non-fiction',\n          checked: false,\n        },\n      ],\n    },\n    {\n      id: 11,\n      name: 'Toys',\n      checked: false,\n    },\n  ];\n\n  return (\n    <div>\n      <Checkboxes defaultCheckboxData={checkboxesData} />\n    </div>\n  );\n}\n"
    },
    "/src/Checkboxes.tsx": {
      "code": "import { useState } from 'react';\nimport CheckboxList, { CheckboxItem } from './CheckboxList';\n\n/**\n * Recursively set descendants of the modified checkbox\n * to the new value.\n */\nfunction updateCheckboxAndDescendants(\n  checkboxItem: CheckboxItem,\n  checked: boolean,\n) {\n  checkboxItem.checked = checked;\n  if (!checkboxItem.children) {\n    return;\n  }\n\n  checkboxItem.children.forEach((childItem) =>\n    updateCheckboxAndDescendants(childItem, checked),\n  );\n}\n\n/**\n * Update checkbox states based on the modified checkbox's new state.\n * Only direct ancestors of the modified checkbox are affected.\n */\nfunction resolveCheckboxStates(\n  checkboxItem: CheckboxItem,\n  indices: ReadonlyArray<number>,\n) {\n  if (indices.length > 0 && checkboxItem.children) {\n    resolveCheckboxStates(\n      checkboxItem.children[indices[0]],\n      indices.slice(1),\n    );\n  }\n\n  if (!checkboxItem.children) {\n    return;\n  }\n\n  // Determine new checkbox state based on children.\n  const checkedChildren = checkboxItem.children.reduce(\n    (total, item) => total + Number(item.checked === true),\n    0,\n  );\n  const uncheckedChildren = checkboxItem.children.reduce(\n    (total, item) => total + Number(item.checked === false),\n    0,\n  );\n\n  if (checkedChildren === checkboxItem.children.length) {\n    checkboxItem.checked = true;\n  } else if (\n    uncheckedChildren === checkboxItem.children.length\n  ) {\n    checkboxItem.checked = false;\n  } else {\n    checkboxItem.checked = 'indeterminate';\n  }\n}\n\nexport default function Checkboxes({\n  defaultCheckboxData,\n}: Readonly<{\n  defaultCheckboxData: ReadonlyArray<CheckboxItem>;\n}>) {\n  const [checkboxData, setCheckboxData] = useState(\n    defaultCheckboxData,\n  );\n\n  return (\n    <CheckboxList\n      items={checkboxData}\n      onCheck={(checked, indices) => {\n        // Simple way to make a clone.\n        const newCheckboxData = JSON.parse(\n          JSON.stringify(checkboxData),\n        );\n\n        const nonFirstLevelIndices = indices.slice(1);\n        const modifiedCheckboxItem =\n          nonFirstLevelIndices.reduce(\n            (modifiedItem, index) =>\n              modifiedItem.children[index],\n            newCheckboxData[indices[0]],\n          );\n\n        updateCheckboxAndDescendants(\n          modifiedCheckboxItem,\n          checked,\n        );\n        resolveCheckboxStates(\n          newCheckboxData[indices[0]],\n          nonFirstLevelIndices,\n        );\n\n        setCheckboxData(newCheckboxData);\n      }}\n    />\n  );\n}\n"
    },
    "/src/CheckboxInput.tsx": {
      "code": "import {\n  InputHTMLAttributes,\n  useEffect,\n  useId,\n  useRef,\n} from 'react';\n\nexport type CheckboxValue = boolean | 'indeterminate';\n\nexport default function CheckboxInput({\n  checked,\n  label,\n  ...props\n}: Readonly<{\n  checked: CheckboxValue;\n  label: string;\n}> &\n  Omit<InputHTMLAttributes<HTMLInputElement>, 'checked'>) {\n  const id = useId();\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    ref.current.indeterminate = checked === 'indeterminate';\n  }, [checked]);\n\n  return (\n    <div className=\"checkbox\">\n      <input\n        id={id}\n        ref={ref}\n        type=\"checkbox\"\n        checked={\n          checked === true || checked === false\n            ? checked\n            : false\n        }\n        {...props}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  );\n}\n"
    },
    "/src/CheckboxList.tsx": {
      "code": "import CheckboxInput, {\n  CheckboxValue,\n} from './CheckboxInput';\n\nexport interface CheckboxItem {\n  id: number;\n  name: string;\n  checked: CheckboxValue;\n  children?: CheckboxItem[];\n}\n\nexport default function CheckboxList({\n  items,\n  onCheck,\n}: Readonly<{\n  items: ReadonlyArray<CheckboxItem>;\n  onCheck: (\n    value: boolean,\n    indices: ReadonlyArray<number>,\n  ) => void;\n}>) {\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={item.id}>\n          <div>\n            <CheckboxInput\n              checked={item.checked}\n              label={item.name}\n              onChange={(event) => {\n                onCheck(event.target.checked, [index]);\n              }}\n            />\n          </div>\n          {item.children && item.children.length > 0 && (\n            <CheckboxList\n              items={item.children}\n              onCheck={(newValue, indices) => {\n                onCheck(newValue, [index, ...indices]);\n              }}\n            />\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\nul {\n  list-style: none;\n  margin: 0;\n  padding-left: 20px;\n}\n\nli {\n  padding: 0;\n}\n\n.checkbox {\n  display: inline-flex;\n  line-height: 1.5;\n  gap: 4px;\n  font-size: 16px;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/Checkboxes.tsx",
      "/src/CheckboxInput.tsx",
      "/src/CheckboxList.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/Checkboxes.tsx",
    "environment": "create-react-app"
  }
}