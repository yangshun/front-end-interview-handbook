{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/modal-dialog-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport ModalDialog from './ModalDialog';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>\n        Show modal\n      </button>\n      <ModalDialog\n        open={open}\n        title=\"Modal Title\"\n        onClose={() => {\n          setOpen(false);\n        }}>\n        One morning, when Gregor Samsa woke from troubled\n        dreams, he found himself transformed in his bed into\n        a horrible vermin. He lay on his armour-like back,\n        and if he lifted his head a little he could see his\n        brown belly, slightly domed and divided by arches\n        into stiff sections.\n      </ModalDialog>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ModalDialog.tsx": {
      "code": "import { createPortal } from 'react-dom';\n\nexport default function ModalDialog({\n  children,\n  open = false,\n  title,\n  onClose,\n}: Readonly<{\n  children: React.ReactNode;\n  open?: boolean;\n  title: string;\n  onClose: () => void;\n}>) {\n  if (!open) {\n    return null;\n  }\n\n  return createPortal(\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <h1 className=\"modal-title\">{title}</h1>\n        <div>{children}</div>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    document.body,\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.modal-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  inset: 0;\n  position: fixed;\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n\n  padding: 20px;\n}\n\n.modal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n\n  background-color: white;\n  padding: 24px;\n}\n\n.modal-title {\n  margin: 0;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ModalDialog.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ModalDialog.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var c=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),O=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},m=(t,e,r,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of j(e))!D.call(t,a)&&a!==r&&c(t,a,{get:()=>e[a],enumerable:!(h=M(e,a))||h.enumerable});return t};var s=(t,e,r)=>(r=t!=null?x(_(t)):{},m(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),C=t=>m(c({},\"__esModule\",{value:!0}),t);var d=k((q,g)=>{g.exports=_jsx_runtime});var S={};O(S,{default:()=>R});var l=s(d());var n=s(d());function u(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\",ol:\"ol\",strong:\"strong\",a:\"a\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"Modal dialogs can be implemented as both controlled and non-controlled components (the dialog controls its own closed state), but it is more commonly used as controlled components.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the modal dialog component does not contain that many elements, we can keep things simple and define a single \",(0,n.jsx)(e.code,{children:\"ModalDialog\"}),\" component.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Props\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"ModalDialog\"}),\" component takes the following props:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"title\"}),\": String to be shown at the top of the modal dialog.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"children\"}),\": The content to be displayed in the modal. It can either be a custom prop or \",(0,n.jsx)(e.code,{children:\"children\"}),\" prop, but the latter is a more common way to render contents.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"open\"}),\": A boolean to control the visibility of the modal (defaults to \",(0,n.jsx)(e.code,{children:\"false\"}),\"). If it is \",(0,n.jsx)(e.code,{children:\"false\"}),\", nothing is rendered to the DOM.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"onClose\"}),\": Callback triggered when the modal dialog is meant to be closed.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"Since the modal dialog component is a controlled component, given the current basic requirements there's no need for any state within the modal. However, the modal dialog is controlled externally and state is required outside to toggle the visibility of the modal.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering and layout\"}),`\n`,(0,n.jsx)(e.p,{children:\"The key elements for the modal dialog are the (1) overlay, (2) modal dialog, (3) modal title:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Overlay\"}),\": The overlay is meant to cover the whole screen. A combination of \",(0,n.jsx)(e.code,{children:\"position: fixed\"}),\" and \",(0,n.jsx)(e.code,{children:\"inset: 0\"}),\" will render the element to cover the entire screen. Set a semi-transparent color for the background, e.g. \",(0,n.jsx)(e.code,{children:\"rgba(0, 0, 0, 0.7)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Modal dialog\"}),\": The modal dialog can be placed within the overlay element. Centering the modal dialog on the screen is thus done by the overlay, which sets the contents to be centered within itself. There are multiple ways to achieve centering and the simplest modern way is to use \",(0,n.jsx)(e.code,{children:\"display: flex; align-items: center; justify-content: center\"}),\" styles.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Modal title\"}),\": Modal dialogs represent a new context separate from the main page content. Using \",(0,n.jsx)(e.code,{children:\"<h1>\"}),\" establishes the modal's content as its own document outline, which clearly indicates the primary heading of this new context to screen readers.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Breaking out of DOM hierarchy\"}),`\n`,(0,n.jsx)(e.p,{children:\"Rendering modal dialogs is tricky due to the fact that modals are being displayed over the page and does not follow the normal flow of page elements.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hence it is mandatory to render the modal outside of the DOM hierarchy of the parents. Otherwise, if the parents contain styling that clips its contents, the modal contents might not be fully visible. Here's an \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react-dom/createPortal#rendering-a-modal-dialog-with-a-portal\",children:\"example from the React docs demonstrating the issue\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In React, rendering outside the DOM hierarchy of the parent component can be achieved using \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react-dom/createPortal\",children:\"React Portals\"}),\". Other common use cases of portals include tooltips, dropdown menus, popovers.\"]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var p=T;var o=s(d());function f(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ol,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Functionality:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Opening and closing:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Verify the modal opens when triggered\"}),`\n`,(0,o.jsx)(e.li,{children:\"Ensure the modal closes when the close button is clicked\"}),`\n`,(0,o.jsx)(e.li,{children:\"Test any other methods provided to open/close the modal (if applicable)\"}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Content customization:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Test passing different title strings\"}),`\n`,(0,o.jsx)(e.li,{children:\"Verify various types of content in the body (text, HTML, React components)\"}),`\n`,(0,o.jsx)(e.li,{children:\"Ensure the close button is always present\"}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Overlay:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Confirm the presence of a semi-transparent background overlay\"}),`\n`,(0,o.jsx)(e.li,{children:\"Verify the overlay covers the entire viewport\"}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Layout and positioning:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Check if the modal is centered horizontally on different screen sizes\"}),`\n`,(0,o.jsx)(e.li,{children:\"Verify vertical centering on various screen heights\"}),`\n`,(0,o.jsx)(e.li,{children:\"Test centering with different modal content sizes\"}),`\n`]}),`\n`]}),`\n`]})]})}function A(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(f,t)})):f(t)}var y=A;var i=s(d());function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsx)(e.p,{children:\"There are a lot of a11y considerations for modal dialogs, possibly too many to implement during interviews.\"}),`\n`,(0,i.jsx)(e.p,{children:\"For your knowledge, here are some of the more important ones:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"ARIA attributes:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(e.code,{children:'role=\"dialog\"'}),\" on the modal container.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Add \",(0,i.jsx)(e.code,{children:'aria-modal=\"true\"'}),\" to indicate that the modal is blocking interaction with the page content.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(e.code,{children:\"aria-labelledby\"}),\" to associate the modal's title with the dialog.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(e.code,{children:\"aria-describedby\"}),\" if there's additional descriptive text.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Keyboard navigation:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Ensure the modal can be opened and closed using keyboard controls.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Provide a way to close the modal using the \",(0,i.jsx)(\"kbd\",{children:\"Esc\"}),\" key.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Focus management:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Set focus to the first focusable element in the modal when it opens.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Trap focus within the modal when it's open, preventing users from tabbing outside the modal.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Return focus to the triggering element when the modal closes.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"The subsequent questions will involve implementing these a11y considerations:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-ii\",children:\"Modal Dialog II\"}),\": Adding ARIA attributes.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii\",children:\"Modal Dialog III\"}),\": Adding keyboard navigation.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iv\",children:\"Modal Dialog IV\"}),\": Adding focus management.\"]}),`\n`]})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(b,t)})):b(t)}var w=F;function v(t){return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(p,{}),`\n`,(0,l.jsx)(y,{}),`\n`,(0,l.jsx)(w,{})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,l.jsx)(e,Object.assign({},t,{children:(0,l.jsx)(v,t)})):v(t)}var R=I;return C(S);})();\n;return Component;"
}