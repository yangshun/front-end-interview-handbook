{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/counter-svelte-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  let count = 0;\n</script>\n\n<button on:click={() => (count += 1)}>Clicks: {count}</button>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var r=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},l=(n,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!p.call(n,o)&&o!==i&&r(n,o,{get:()=>e[o],enumerable:!(a=j(e,o))||a.enumerable});return n};var h=(n,e,i)=>(i=n!=null?x(f(n)):{},l(e||!n||!n.__esModule?r(i,\"default\",{value:n,enumerable:!0}):i,n)),w=n=>l(r({},\"__esModule\",{value:!0}),n);var s=g((F,d)=>{d.exports=_jsx_runtime});var D={};k(D,{default:()=>M});var t=h(s());var c=h(s());function u(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,c.jsxs)(e.ul,{children:[`\n`,(0,c.jsx)(e.li,{children:\"Click on the counter to increment the count value by one.\"}),`\n`,(0,c.jsx)(e.li,{children:\"Click multiple times and check that the count value increases on each click.\"}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,c.jsx)(e,Object.assign({},n,{children:(0,c.jsx)(u,n)})):u(n)}var m=C;function b(n){let e=Object.assign({p:\"p\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"This is a short question which only requires one state variable, which is the number of times the button has been clicked (\",(0,t.jsx)(e.code,{children:\"count\"}),\").\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Declare \",(0,t.jsx)(e.code,{children:\"count\"}),\" as a variable. Attach a callback on \",(0,t.jsx)(e.code,{children:\"<button>\"}),\"'s \",(0,t.jsx)(e.code,{children:\"on:click\"}),\" handler and increment \",(0,t.jsx)(e.code,{children:\"count\"}),\" value within it. \",(0,t.jsx)(e.code,{children:\"count\"}),\" will now be incremented whenever \",(0,t.jsx)(e.code,{children:\"<button>\"}),\" is clicked.\"]}),`\n`,(0,t.jsx)(m,{})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(b,n)})):b(n)}var M=v;return w(D);})();\n;return Component;"
}