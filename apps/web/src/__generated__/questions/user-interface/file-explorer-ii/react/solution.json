{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/file-explorer-ii-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import FileExplorer from './FileExplorer';\n\nexport default function App() {\n  const data = [\n    {\n      id: 1,\n      name: 'README.md',\n    },\n    {\n      id: 2,\n      name: 'Documents',\n      children: [\n        {\n          id: 3,\n          name: 'Word.doc',\n        },\n        {\n          id: 4,\n          name: 'Powerpoint.ppt',\n        },\n      ],\n    },\n    {\n      id: 5,\n      name: 'Downloads',\n      children: [\n        {\n          id: 6,\n          name: 'unnamed.txt',\n        },\n        {\n          id: 7,\n          name: 'Misc',\n          children: [\n            {\n              id: 8,\n              name: 'foo.txt',\n            },\n            {\n              id: 9,\n              name: 'bar.txt',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return <FileExplorer data={data} />;\n}\n"
    },
    "/src/FileExplorer.tsx": {
      "code": "import { useId, useState } from 'react';\nimport FileList from './FileList';\n\nexport type FileData = Readonly<{\n  id: number;\n  name: string;\n  children?: ReadonlyArray<FileData>;\n}>;\n\nexport default function FileExplorer({\n  data,\n}: Readonly<{ data: ReadonlyArray<FileData> }>) {\n  return (\n    <div aria-label=\"Files Explorer\" role=\"tree\">\n      <FileList fileList={data} level={1} />\n    </div>\n  );\n}\n\nexport function FileObject({\n  file,\n  level,\n  setSize,\n  posInSet,\n}: Readonly<{\n  file: FileData;\n  level: number;\n  setSize: number;\n  posInSet: number;\n}>) {\n  const id = useId();\n  const [expanded, setExpanded] = useState(false);\n  const { children: fileChildren, name: fileName } = file;\n  // If the children field is present, the item is a directory.\n  const isDirectory = Boolean(fileChildren);\n\n  return (\n    <li\n      aria-expanded={isDirectory ? expanded : undefined}\n      aria-labelledby={id}\n      aria-level={level}\n      aria-posinset={posInSet}\n      aria-setsize={setSize}\n      className=\"file-item\"\n      role=\"treeitem\">\n      <button\n        className={[\n          'file-item-button',\n          isDirectory && 'file-item-button--directory',\n        ]\n          .filter(Boolean)\n          .join(' ')}\n        onClick={() => {\n          if (!isDirectory) {\n            return;\n          }\n\n          setExpanded(!expanded);\n        }}>\n        <span id={id}>{fileName}</span>{' '}\n        {isDirectory && <>[{expanded ? '-' : '+'}]</>}\n      </button>\n      {fileChildren &&\n        fileChildren.length > 0 &&\n        expanded && (\n          <FileList\n            fileList={fileChildren}\n            level={level + 1}\n          />\n        )}\n    </li>\n  );\n}\n"
    },
    "/src/FileList.tsx": {
      "code": "import { FileObject, FileData } from './FileExplorer';\n\nexport default function FileList({\n  fileList,\n  level,\n}: Readonly<{\n  fileList: ReadonlyArray<FileData>;\n  level: number;\n}>) {\n  const directories = fileList.filter(\n    (fileItem) => fileItem.children,\n  );\n  directories.sort((a, b) => a.name.localeCompare(b.name));\n\n  const nonDirectories = fileList.filter(\n    (fileItem) => !fileItem.children,\n  );\n  nonDirectories.sort((a, b) =>\n    a.name.localeCompare(b.name),\n  );\n\n  const items = [...directories, ...nonDirectories];\n\n  return (\n    <ul className=\"file-list\" role=\"group\">\n      {items.map((file, index) => (\n        <FileObject\n          posInSet={index + 1}\n          setSize={items.length}\n          key={file.id}\n          file={file}\n          level={level}\n        />\n      ))}\n    </ul>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.file-list {\n  list-style: none;\n  margin: 0;\n  padding-left: 16px;\n}\n\n.file-item {\n  padding: 0;\n}\n\n.file-item-button {\n  background-color: transparent;\n  border: none;\n  line-height: 1.5;\n  cursor: pointer;\n  font-size: 16px;\n  padding: 0;\n}\n\n.file-item-button--directory {\n  display: flex;\n  gap: 4px;\n  font-weight: bold;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/FileExplorer.tsx",
      "/src/FileList.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/FileExplorer.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),j=(i,e)=>{for(var l in e)r(i,l,{get:e[l],enumerable:!0})},s=(i,e,l,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!y.call(i,a)&&a!==l&&r(i,a,{get:()=>e[a],enumerable:!(d=x(e,a))||d.enumerable});return i};var c=(i,e,l)=>(l=i!=null?m(v(i)):{},s(e||!i||!i.__esModule?r(l,\"default\",{value:i,enumerable:!0}):l,i)),F=i=>s(r({},\"__esModule\",{value:!0}),i);var o=g((O,h)=>{h.exports=_jsx_runtime});var z={};j(z,{default:()=>M});var n=c(o());var t=c(o());function u(i){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\",p:\"p\",pre:\"pre\",code:\"code\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Inspect the rendered HTML to see that the right attributes were added to the DOM.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"You can go a step further by using accessibility testing tools like \",(0,t.jsx)(e.a,{href:\"https://www.deque.com/axe/\",children:\"axe\"}),\" to validate the a11y of the elements.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"The resulting DOM should be similar to:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-html\",children:`<div aria-label=\"Files Explorer\" role=\"tree\">\n  <ul role=\"group\">\n    <li\n      aria-expanded=\"true\"\n      aria-labelledby=\":r1:\"\n      aria-level=\"1\"\n      aria-posinset=\"1\"\n      aria-setsize=\"3\"\n      role=\"treeitem\">\n      <button><span id=\":r1:\">Documents</span> [-]</button>\n      <ul role=\"group\">\n        <li\n          aria-labelledby=\":rb:\"\n          aria-level=\"2\"\n          aria-posinset=\"1\"\n          aria-setsize=\"2\"\n          role=\"treeitem\">\n          <button>\n            <span id=\":rb:\">Powerpoint.ppt</span>\n          </button>\n        </li>\n        <li\n          aria-labelledby=\":rd:\"\n          aria-level=\"2\"\n          aria-posinset=\"2\"\n          aria-setsize=\"2\"\n          role=\"treeitem\">\n          <button>\n            <span id=\":rd:\">Word.doc</span>\n          </button>\n        </li>\n      </ul>\n    </li>\n    <li\n      aria-expanded=\"true\"\n      aria-labelledby=\":r3:\"\n      aria-level=\"1\"\n      aria-posinset=\"2\"\n      aria-setsize=\"3\"\n      role=\"treeitem\">\n      <button><span id=\":r3:\">Downloads</span> [-]</button>\n      <ul class=\"file-list\" role=\"group\">\n        <li\n          aria-expanded=\"true\"\n          aria-labelledby=\":r7:\"\n          aria-level=\"2\"\n          aria-posinset=\"1\"\n          aria-setsize=\"2\"\n          role=\"treeitem\">\n          <button><span id=\":r7:\">Misc</span> [-]</button>\n          <ul class=\"file-list\" role=\"group\">\n            <li\n              aria-labelledby=\":rf:\"\n              aria-level=\"3\"\n              aria-posinset=\"1\"\n              aria-setsize=\"2\"\n              role=\"treeitem\">\n              <button>\n                <span id=\":rf:\">bar.txt</span>\n              </button>\n            </li>\n            <li\n              aria-labelledby=\":rh:\"\n              aria-level=\"3\"\n              aria-posinset=\"2\"\n              aria-setsize=\"2\"\n              role=\"treeitem\">\n              <button>\n                <span id=\":rh:\">foo.txt</span>\n              </button>\n            </li>\n          </ul>\n        </li>\n        <li\n          aria-labelledby=\":r9:\"\n          aria-level=\"2\"\n          aria-posinset=\"2\"\n          aria-setsize=\"2\"\n          role=\"treeitem\">\n          <button>\n            <span id=\":r9:\">unnamed.txt</span>\n          </button>\n        </li>\n      </ul>\n    </li>\n    <li\n      aria-labelledby=\":r5:\"\n      aria-level=\"1\"\n      aria-posinset=\"3\"\n      aria-setsize=\"3\"\n      role=\"treeitem\">\n      <button>\n        <span id=\":r5:\">README.md</span>\n      </button>\n    </li>\n  </ul>\n</div>\n`})})]})}function w(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var p=w;function b(i){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",code:\"code\",ul:\"ul\",li:\"li\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/file-explorer/react/solution\",children:\"File Explorer's solution\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:\"FileExplorer\"}),\" component\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add an \",(0,n.jsx)(e.code,{children:\"aria-label\"}),\" to the \",(0,n.jsx)(e.code,{children:\"<div>\"}),\". It can be any descriptive text. VS Code uses \",(0,n.jsx)(e.code,{children:'aria-label=\"Files Explorer\"'}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Add \",(0,n.jsx)(e.code,{children:'role=\"tree\"'}),\" to the \",(0,n.jsx)(e.code,{children:\"<div>\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h2,{children:[(0,n.jsx)(e.code,{children:\"FileObject\"}),\" component\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"role\"}),\": Add \",(0,n.jsx)(e.code,{children:'role=\"treeitem\"'}),\" to the \",(0,n.jsx)(e.code,{children:\"<li>\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"aria-expanded\"}),\": The \",(0,n.jsx)(e.code,{children:\"aria-expanded\"}),\" value can be determined by the value of the \",(0,n.jsx)(e.code,{children:\"expanded\"}),\" state. Note that \",(0,n.jsx)(e.code,{children:\"aria-expanded\"}),\" should only be added for directories.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"aria-level\"}),\": Since the component already accept a \",(0,n.jsx)(e.code,{children:\"level\"}),\" prop, it can be directly used as the \",(0,n.jsx)(e.code,{children:\"aria-level\"}),\" value.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"aria-setsize\"}),\": This value has to be passed in from the \",(0,n.jsx)(e.code,{children:\"FileList\"}),\" component. It is the total number of items in the current directory level.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"aria-posinset\"}),\": This value has to be passed in from the \",(0,n.jsx)(e.code,{children:\"FileList\"}),\" component. It is a one-based index for the position in the current directory level.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Lastly, the \",(0,n.jsx)(e.code,{children:\"<li>\"}),\" has to be labelled. You can either use \",(0,n.jsx)(e.code,{children:\"aria-label\"}),\" with the item name as the value or use \",(0,n.jsx)(e.code,{children:\"aria-labelledby\"}),\" associated with the \",(0,n.jsx)(e.code,{children:\"id\"}),\" of the element containing the file name. Since there can be multiple \",(0,n.jsx)(e.code,{children:\"FileObject\"}),\" component instances on the page and we cannot guarantee that the file/directory names will be globally unique, each \",(0,n.jsx)(e.code,{children:\"FileObject\"}),\" instance needs to have a unique identifier.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useId\"}),\" React hook can be used to generate unique ID for each \",(0,n.jsx)(e.code,{children:\"FileObject\"}),\" instance. The \",(0,n.jsx)(e.code,{children:\"id\"}),\" is added to the \",(0,n.jsx)(e.code,{children:\"<span>\"}),\" around the object name.\"]}),`\n`,(0,n.jsx)(p,{})]})}function _(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(b,i)})):b(i)}var M=_;return F(z);})();\n;return Component;"
}