{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/index.html\",\n    \"/src/index.js\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/index.html\",\n  \"environment\": \"parcel\"\n}\n"
    },
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div id=\"stopwatch\"></div>\n    </div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/stopwatch-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  const MS_IN_SECOND = 1000;\n  const SECONDS_IN_MINUTE = 60;\n  const MINUTES_IN_HOUR = 60;\n  const MS_IN_HOUR =\n    MINUTES_IN_HOUR * SECONDS_IN_MINUTE * MS_IN_SECOND;\n  const MS_IN_MINUTE = SECONDS_IN_MINUTE * MS_IN_SECOND;\n\n  function formatTime(timeParam) {\n    let time = timeParam;\n    const parts = {\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      ms: 0,\n    };\n    if (time > MS_IN_HOUR) {\n      parts.hours = Math.floor(time / MS_IN_HOUR);\n      time %= MS_IN_HOUR;\n    }\n\n    if (time > MS_IN_MINUTE) {\n      parts.minutes = Math.floor(time / MS_IN_MINUTE);\n      time %= MS_IN_MINUTE;\n    }\n\n    if (time > MS_IN_SECOND) {\n      parts.seconds = Math.floor(time / MS_IN_SECOND);\n      time %= MS_IN_SECOND;\n    }\n\n    parts.ms = time;\n    return parts;\n  }\n\n  function padTwoDigit(number) {\n    return number >= 10 ? String(number) : `0${number}`;\n  }\n\n  function timeSegment(value, unit, isSmall = false) {\n    const $containerEl = document.createElement('span');\n\n    const $digitEl = document.createElement('span');\n    $digitEl.classList.add('time-number');\n    $digitEl.textContent = value;\n    if (isSmall) {\n      $digitEl.classList.add('time-number--small');\n    }\n    $containerEl.append($digitEl);\n\n    if (unit != null) {\n      const $unitEl = document.createElement('span');\n      $unitEl.classList.add('time-unit');\n      $unitEl.textContent = unit;\n      $containerEl.append($unitEl);\n    }\n\n    return $containerEl;\n  }\n\n  function stopwatch($rootEl) {\n    // Timer ID of the active interval, if one is running.\n    let timerId = null;\n    let lastTickTiming = null;\n    let totalDuration = 0;\n    const $DOM = {\n      container: document.createElement('div'),\n      timeDisplay: document.createElement('button'),\n      timeInner: document.createElement('div'),\n      startStopButton: document.createElement('button'),\n      resetButton: document.createElement('button'),\n    };\n\n    function updateTime() {\n      $DOM.timeInner.innerHTML = '';\n      const formattedTime = formatTime(totalDuration);\n      if (formattedTime.hours > 0) {\n        $DOM.timeInner.append(\n          timeSegment(formattedTime.hours, 'h'),\n        );\n      }\n\n      if (formattedTime.minutes > 0) {\n        $DOM.timeInner.append(\n          timeSegment(formattedTime.minutes, 'm'),\n        );\n      }\n\n      $DOM.timeInner.append(\n        timeSegment(formattedTime.seconds, 's'),\n      );\n\n      $DOM.timeInner.append(\n        timeSegment(\n          padTwoDigit(Math.floor(formattedTime.ms / 10)),\n          null,\n          true,\n        ),\n      );\n    }\n\n    function tick() {\n      const now = Date.now();\n      const timePassed = now - lastTickTiming;\n      totalDuration += timePassed;\n      lastTickTiming = now;\n      updateTime();\n    }\n\n    function startTimer() {\n      lastTickTiming = Date.now();\n      timerId = window.setInterval(() => {\n        tick();\n      }, 1);\n      $DOM.startStopButton.textContent = 'Stop';\n    }\n\n    function stopInterval() {\n      window.clearInterval(timerId);\n      timerId = null;\n      $DOM.startStopButton.textContent = 'Start';\n    }\n\n    function resetTimer() {\n      stopInterval();\n      totalDuration = 0;\n      updateTime();\n    }\n\n    function toggleTimer() {\n      if (timerId != null) {\n        stopInterval();\n      } else {\n        startTimer();\n      }\n    }\n\n    function init() {\n      $DOM.timeDisplay.classList.add('time');\n      $DOM.timeDisplay.addEventListener('click', () => {\n        toggleTimer();\n      });\n      const $cover = document.createElement('span');\n      $cover.classList.add('time-cover');\n      $DOM.timeDisplay.append($cover);\n\n      $DOM.timeInner.classList.add('time-inner');\n      $DOM.timeDisplay.append($DOM.timeInner);\n\n      $DOM.container.append($DOM.timeDisplay);\n\n      const $buttonContainerEl =\n        document.createElement('div');\n\n      $DOM.startStopButton.addEventListener('click', () => {\n        toggleTimer();\n      });\n      $DOM.startStopButton.textContent = 'Start';\n\n      $DOM.resetButton.addEventListener('click', () => {\n        resetTimer();\n      });\n      $DOM.resetButton.textContent = 'Reset';\n\n      $buttonContainerEl.append(\n        $DOM.startStopButton,\n        $DOM.resetButton,\n      );\n      $DOM.container.append($buttonContainerEl);\n\n      updateTime();\n    }\n\n    // The beforeunload event is fired before the tab/window is closed.\n    // Clear the timer when the tab/window is about to be closed.\n    window.addEventListener('beforeunload', () => {\n      window.clearInterval(timerId);\n    });\n\n    init();\n    $rootEl.append($DOM.container);\n  }\n\n  stopwatch(document.getElementById('stopwatch'));\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.time {\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  position: relative;\n  user-select: none;\n}\n\n.time-cover {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.time-inner {\n  align-items: baseline;\n  display: flex;\n  gap: 16px;\n}\n\n.time-unit {\n  font-size: 24px;\n}\n\n.time-number {\n  font-size: 62px;\n}\n\n.time-number--small {\n  font-size: 36px;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  }
}