{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.js\",\n    \"/src/Stopwatch.js\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/Stopwatch.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/stopwatch-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import Stopwatch from './Stopwatch';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <Stopwatch />\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/Stopwatch.js": {
      "code": "import { useRef, useState } from 'react';\n\nconst MS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst MS_IN_HOUR =\n  MINUTES_IN_HOUR * SECONDS_IN_MINUTE * MS_IN_SECOND;\nconst MS_IN_MINUTE = SECONDS_IN_MINUTE * MS_IN_SECOND;\n\nfunction formatTime(timeParam) {\n  let time = timeParam;\n  const parts = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    ms: 0,\n  };\n  if (time > MS_IN_HOUR) {\n    parts.hours = Math.floor(time / MS_IN_HOUR);\n    time %= MS_IN_HOUR;\n  }\n\n  if (time > MS_IN_MINUTE) {\n    parts.minutes = Math.floor(time / MS_IN_MINUTE);\n    time %= MS_IN_MINUTE;\n  }\n\n  if (time > MS_IN_SECOND) {\n    parts.seconds = Math.floor(time / MS_IN_SECOND);\n    time %= MS_IN_SECOND;\n  }\n\n  parts.ms = time;\n\n  return parts;\n}\n\nfunction padTwoDigit(number) {\n  return number >= 10 ? String(number) : `0${number}`;\n}\n\nexport default function Stopwatch() {\n  const lastTickTiming = useRef(null);\n  const [totalDuration, setTotalDuration] = useState(0);\n  // Timer ID of the active interval, if one is running.\n  const [timerId, setTimerId] = useState(null);\n\n  // Derived state to determine if there's a timer running.\n  const isRunning = timerId != null;\n\n  function startTimer() {\n    lastTickTiming.current = Date.now();\n    setTimerId(\n      window.setInterval(() => {\n        const now = Date.now();\n        const timePassed = now - lastTickTiming.current;\n        setTotalDuration(\n          (duration) =>\n            // Use the callback form of setState to ensure\n            // we are using the latest value of duration.\n            duration + timePassed,\n        );\n        lastTickTiming.current = now;\n      }, 1),\n    );\n  }\n\n  function stopInterval() {\n    window.clearInterval(timerId);\n    setTimerId(null);\n  }\n\n  function resetTimer() {\n    stopInterval();\n    setTotalDuration(0);\n  }\n\n  function toggleTimer() {\n    if (isRunning) {\n      stopInterval();\n    } else {\n      startTimer();\n    }\n  }\n\n  const formattedTime = formatTime(totalDuration);\n\n  return (\n    <div>\n      <button\n        className=\"time\"\n        onClick={() => {\n          toggleTimer();\n        }}>\n        {formattedTime.hours > 0 && (\n          <span>\n            <span className=\"time-number\">\n              {formattedTime.hours}\n            </span>\n            <span className=\"time-unit\">h</span>\n          </span>\n        )}{' '}\n        {formattedTime.minutes > 0 && (\n          <span>\n            <span className=\"time-number\">\n              {formattedTime.minutes}\n            </span>\n            <span className=\"time-unit\">m</span>\n          </span>\n        )}{' '}\n        <span>\n          <span className=\"time-number\">\n            {formattedTime.seconds}\n          </span>\n          <span className=\"time-unit\">s</span>\n        </span>{' '}\n        <span className=\"time-number time-number--small\">\n          {padTwoDigit(Math.floor(formattedTime.ms / 10))}\n        </span>\n      </button>\n      <div>\n        <button\n          onClick={() => {\n            toggleTimer();\n          }}>\n          {isRunning ? 'Stop' : 'Start'}\n        </button>{' '}\n        <button\n          onClick={() => {\n            resetTimer();\n          }}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.time {\n  align-items: baseline;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  gap: 16px;\n  user-select: none;\n}\n\n.time-unit {\n  font-size: 24px;\n}\n\n.time-number {\n  font-size: 62px;\n}\n\n.time-number--small {\n  font-size: 36px;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/Stopwatch.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/Stopwatch.js",
    "environment": "create-react-app"
  }
}