{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/stopwatch-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<div>\n  <button class=\"time\" (click)=\"toggleTimer()\">\n    <span *ngIf=\"hours > 0\">\n      <span class=\"time-number\">\n        {{ hours }}\n      </span>\n      <span class=\"time-unit\">h</span>\n    </span>\n    <span *ngIf=\"minutes > 0\">\n      <span class=\"time-number\">\n        {{ minutes }}\n      </span>\n      <span class=\"time-unit\">m</span>\n    </span>\n    <span>\n      <span class=\"time-number\">\n        {{ seconds }}\n      </span>\n      <span class=\"time-unit\">s</span>\n    </span>\n    <span class=\"time-number time-number--small\">\n      {{ milliseconds | padTwoDigit }}\n    </span>\n  </button>\n  <div>\n    <button (click)=\"toggleTimer()\">\n      {{ timerId ? 'Stop' : 'Start' }}\n    </button>\n    <button (click)=\"resetTimer()\">Reset</button>\n  </div>\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import {\n  Component,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\n\nconst MS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst MS_IN_HOUR =\n  MINUTES_IN_HOUR * SECONDS_IN_MINUTE * MS_IN_SECOND;\nconst MS_IN_MINUTE = SECONDS_IN_MINUTE * MS_IN_SECOND;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  timerId = 0;\n  lastTickTiming = 0;\n  totalDuration = 0;\n  hours = 0;\n  minutes = 0;\n  seconds = 0;\n  milliseconds = 0;\n\n  startTimer() {\n    this.lastTickTiming = Date.now();\n    this.timerId = window.setInterval(() => {\n      const now = Date.now();\n      const timePassed = now - this.lastTickTiming;\n      this.totalDuration += timePassed;\n      this.lastTickTiming = now;\n\n      if (this.totalDuration > MS_IN_HOUR) {\n        this.hours = Math.floor(\n          this.totalDuration / MS_IN_HOUR,\n        );\n        this.totalDuration %= MS_IN_HOUR;\n      }\n\n      if (this.totalDuration > MS_IN_MINUTE) {\n        this.minutes = Math.floor(\n          this.totalDuration / MS_IN_MINUTE,\n        );\n        this.totalDuration %= MS_IN_MINUTE;\n      }\n\n      if (this.totalDuration > MS_IN_SECOND) {\n        this.seconds = Math.floor(\n          this.totalDuration / MS_IN_SECOND,\n        );\n        this.totalDuration %= MS_IN_SECOND;\n      }\n\n      this.milliseconds = this.totalDuration;\n    }, 1);\n  }\n\n  stopInterval() {\n    if (this.timerId) {\n      window.clearInterval(this.timerId);\n    }\n    this.timerId = 0;\n  }\n\n  resetTimer() {\n    this.stopInterval();\n    this.totalDuration = 0;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  toggleTimer() {\n    if (this.timerId) {\n      this.stopInterval();\n    } else {\n      this.startTimer();\n    }\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { PadTwoDigitPipe } from './pad-two-digit.pipe';\n\n@NgModule({\n  declarations: [AppComponent, PadTwoDigitPipe],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/pad-two-digit.pipe.ts": {
      "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'padTwoDigit',\n})\nexport class PadTwoDigitPipe implements PipeTransform {\n  transform(value: number): string {\n    value = value / 10;\n    return value >= 10 ? String(value) : `0${value}`;\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "/* You can add global styles to this file, and also import other style files */\nbody {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.time {\n  align-items: baseline;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  gap: 16px;\n  user-select: none;\n}\n\n.time-unit {\n  font-size: 24px;\n}\n\n.time-number {\n  font-size: 62px;\n}\n\n.time-number--small {\n  font-size: 36px;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var r in e)a(n,r,{get:e[r],enumerable:!0})},h=(n,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of y(e))!T.call(n,l)&&l!==r&&a(n,l,{get:()=>e[l],enumerable:!(d=v(e,l))||d.enumerable});return n};var s=(n,e,r)=>(r=n!=null?f(k(n)):{},h(e||!n||!n.__esModule?a(r,\"default\",{value:n,enumerable:!0}):r,n)),S=n=>h(a({},\"__esModule\",{value:!0}),n);var c=x((F,u)=>{u.exports=_jsx_runtime});var M={};j(M,{default:()=>D});var t=s(c());var i=s(c());function m(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:['Click the \"Start\" button to start the timer. Observe that:',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The time increases constantly and shows the correct value.\"}),`\n`,(0,i.jsx)(e.li,{children:'The \"Start\" button now shows \"Stop\".'}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['Click \"Stop\" while the timer is running. Observe that:',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The time stops increasing.\"}),`\n`,(0,i.jsx)(e.li,{children:'The \"Stop\" button now shows \"start\".'}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['Click the \"Start\" button after having stopped the timer. Observe that:',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The time increases from the stopped timing and shows the correct value.\"}),`\n`,(0,i.jsx)(e.li,{children:'The \"Start\" button now shows \"Stop\".'}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['Click the \"Reset\" button while:',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The timer is running. The timer should stop and be reset to 0.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The timer is stopped/paused. The timer should be reset to 0.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.li,{children:'Repeat the above but click on the time instead of the \"Start\"/\"Stop\" button.'}),`\n`,(0,i.jsxs)(e.li,{children:[\"a11y\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" to cycle through the buttons.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Be able to use both \",(0,i.jsx)(\"kbd\",{children:\"Spacebar\"}),\" and \",(0,i.jsx)(\"kbd\",{children:\"Enter\"}),\" to interact with the 3 interactive elements.\"]}),`\n`]}),`\n`]}),`\n`]})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(m,n)})):m(n)}var p=_;var o=s(c());function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"People who are unfamiliar with a11y will add an \",(0,o.jsx)(e.code,{children:\"onClick\"}),\"/\",(0,o.jsx)(e.code,{children:\"'click'\"}),\" event to the DOM element rendering the time (usually a \",(0,o.jsx)(e.code,{children:\"<div>\"}),\") and consider it complete. However, this the timer is not a11y-friendly just by doing so. Some might add \",(0,o.jsx)(e.code,{children:'tabIndex=\"0\"'}),\" (to allow focus) and \",(0,o.jsx)(e.code,{children:'role=\"button\"'}),\" to the element, which certainly improves the a11y, but is not the best.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"For the best a11y, we can and should use a \",(0,o.jsx)(e.code,{children:\"<button>\"}),\" to render the timing, which comes with additional a11y benefits like focus and keyboard support. By using a \",(0,o.jsx)(e.code,{children:\"<button>\"}),\", you get automatic focus support (be able to use \",(0,o.jsx)(\"kbd\",{children:\"Tab\"}),\" to focus onto the timer) and keyboard support (hit the \",(0,o.jsx)(\"kbd\",{children:\"Spacebar\"}),\" to start/stop the timer). The latter will not be possible without custom code to add key event listeners to non-interactive elements.\"]}),`\n`,(0,o.jsx)(e.h2,{children:\"User Experience\"}),`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"user-select: none\"}),\" is added to the timer so that the digits aren't selected if a user double clicks on them. Selecting the digits is usually not desired.\"]})]})}function I(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(b,n)})):b(n)}var g=I;function w(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"This question looks simple on first glance but is actually more complex than it seems. Note that setInterval's delay parameter is unreliable. The actual amount of time that elapses between calls to the callback may be longer than the given delay due to various reasons. Because of this behavior, we cannot assume that each time the interval callback is fired, the same duration as passed. We will need to read the current time within the callback code to ensure that we are using the most updated timings.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To run the timer we need to invoke \",(0,t.jsx)(e.code,{children:\"toggleTimer()\"}),\" method that checks if we have active timer. If we don't - we're going to start it.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.code,{children:\"startTimer()\"}),\" method we calculate \",(0,t.jsx)(e.code,{children:\"lastTickTiming\"}),\" as it was described above and start \",(0,t.jsx)(e.code,{children:\"setInterval()\"}),\". Each time variable is recalculated separately every 1ms (should be). Regarding to last variable \",(0,t.jsx)(e.code,{children:\"milliseconds\"}),\" - we will use the pipe \",(0,t.jsx)(e.code,{children:\"padTwoDigit\"}),\" to display it cleaner on the template so for example instead of displaying 65 we will display that as 06.5 and so on.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Calling \",(0,t.jsx)(e.code,{children:\"resetTimer()\"}),\" we run \",(0,t.jsx)(e.code,{children:\"stopInterval\"}),\" that uses window function \",(0,t.jsx)(e.code,{children:\"clearInterval\"}),\" to prevent memory leaks and we set all variables to initial state which is 0.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.code,{children:\"AppComponent\"}),\" we're going to store following variables:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"timerId\"}),\" - Returned value from \",(0,t.jsx)(e.code,{children:\"setInterval\"}),\" function to stop the interval to prevent memory leaks. As default we set this to 0.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"totalDuration\"}),\": Total time that has passed so far.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"lastTickTiming\"}),\": This is the time that the last interval callback has run. We will keep incrementing the \",(0,t.jsx)(e.code,{children:\"totalDuration\"}),\" by the delta between the current time (\",(0,t.jsx)(e.code,{children:\"Date.now()\"}),\") and the \",(0,t.jsx)(e.code,{children:\"lastTickTiming\"}),\". Using this approach, the \",(0,t.jsx)(e.code,{children:\"totalDuration\"}),\" will still be accurate even if the callbacks run at irregular intervals.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"hours\"}),\", \",(0,t.jsx)(e.code,{children:\"minutes\"}),\", \",(0,t.jsx)(e.code,{children:\"seconds\"}),\", \",(0,t.jsx)(e.code,{children:\"milliseconds\"}),\" - time variables to be displayed on the template.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"You might create service for maintaining the state. Inject the service in smart component and crete dumb components that only display and interact with the UI and all events from dumb components are passed to the smart one.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,t.jsx)(e.code,{children:\"readonly\"}),\", \",(0,t.jsx)(e.code,{children:\"private\"}),\", \",(0,t.jsx)(e.code,{children:\"public\"}),\" and \",(0,t.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(p,{}),`\n`,(0,t.jsx)(g,{})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(w,n)})):w(n)}var D=C;return S(M);})();\n;return Component;"
}