{
  "author": "tanhauhau",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-ii-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/Accordion.svelte": {
      "code": "<script context=\"module\">\n  let globalAccordionId = 0;\n</script>\n\n<script>\n  export let sections;\n  let openSections = new Set();\n  const accordionId = globalAccordionId++;\n</script>\n\n<div class=\"accordion\">\n  {#each sections as { value, title, contents }}\n    {@const isExpanded = openSections.has(value)}\n    {@const headerId = `${accordionId}-header-${value}`}\n    {@const panelId = `${accordionId}-panel-${value}`}\n\n    <div class=\"accordion-item\">\n      <button\n        aria-controls={panelId}\n        aria-expanded={isExpanded}\n        id={headerId}\n        class=\"accordion-item-title\"\n        on:click={() => {\n          if (openSections.has(value)) {\n            openSections.delete(value);\n          } else {\n            openSections.add(value);\n          }\n          openSections = openSections;\n        }}>\n        {title}\n        <span\n          aria-hidden={true}\n          class=\"accordion-icon\"\n          class:accordion-icon--rotated={isExpanded} />\n      </button>\n      <div\n        aria-labelledby={headerId}\n        role=\"region\"\n        id={panelId}\n        class=\"accordion-item-contents\"\n        hidden={!isExpanded}>\n        {contents}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .accordion {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  .accordion-item {\n    display: flex;\n    flex-direction: column;\n    row-gap: 4px;\n    padding: 4px 0;\n  }\n\n  .accordion-item:not(:first-child) {\n    border-top: 1px solid #eee;\n  }\n\n  .accordion-item-title {\n    align-items: center;\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-weight: 500;\n    padding: 4px;\n    justify-content: space-between;\n    text-align: start;\n    display: flex;\n  }\n\n  .accordion-item-title:hover {\n    background-color: #eee;\n  }\n\n  .accordion-icon {\n    border: solid currentcolor;\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    height: 8px;\n    pointer-events: none;\n    transform: translateY(-2px) rotate(45deg);\n    width: 8px;\n  }\n\n  .accordion-icon--rotated {\n    transform: translateY(2px) rotate(-135deg);\n  }\n\n  .accordion-item-contents {\n    font-size: 14px;\n    line-height: 1.2em;\n    padding: 4px;\n  }\n</style>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import Accordion from './Accordion.svelte';\n</script>\n\n<div class=\"wrapper\">\n  <Accordion\n    sections={[\n      {\n        value: 'html',\n        title: 'HTML',\n        contents:\n          'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n      },\n      {\n        value: 'css',\n        title: 'CSS',\n        contents:\n          'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n      },\n      {\n        value: 'javascript',\n        title: 'JavaScript',\n        contents:\n          'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n      },\n    ]} />\n</div>\n\n<style>\n  .wrapper {\n    align-items: center;\n    display: flex;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/Accordion.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/Accordion.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var a=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var _=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var o in e)a(n,o,{get:e[o],enumerable:!0})},h=(n,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!j.call(n,r)&&r!==o&&a(n,r,{get:()=>e[r],enumerable:!(l=I(e,r))||l.enumerable});return n};var s=(n,e,o)=>(o=n!=null?w(A(n)):{},h(e||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),y=n=>h(a({},\"__esModule\",{value:!0}),n);var d=_((T,u)=>{u.exports=_jsx_runtime});var C={};v(C,{default:()=>O});var t=s(d());var c=s(d());function f(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,c.jsxs)(e.ul,{children:[`\n`,(0,c.jsx)(e.li,{children:\"Inspect the rendered HTML to see that the right attributes were added to the DOM.\"}),`\n`,(0,c.jsxs)(e.li,{children:[\"You can go a step further by using accessibility testing tools like \",(0,c.jsx)(e.a,{href:\"https://www.deque.com/axe/\",children:\"axe\"}),\" to validate the a11y of the elements.\"]}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,c.jsx)(e,Object.assign({},n,{children:(0,c.jsx)(f,n)})):f(n)}var m=D;var i=s(d());function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"By using a \",(0,i.jsx)(e.code,{children:\"<button>\"}),\" for the section titles, we have enabled the basic keyboard interactions necessary to achieve sufficient accessibility for accordion components. However, there are some useful optional keyboard interactions to add, which will be covered in \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/accordion-iii\",children:\"Accordion III\"}),\".\"]}),`\n`,(0,i.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"Accordion | ARIA Authoring Practices Guide\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://reach.tech/accordion\",children:\"Accordion | Reach UI\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://headlessui.com/react/disclosure\",children:\"Disclosure - Headless UI\"})}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(p,n)})):p(n)}var g=M;function b(n){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"We'll build on top of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/accordion/svelte/solution\",children:\"Accordion's solution\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Other than adding the right ARIA roles and states, which is straightforward, we also need to link the accordion headers with the corresponding accordion contents/panels. Hence we defined to variables, \",(0,t.jsx)(e.code,{children:\"headerId\"}),\" and \",(0,t.jsx)(e.code,{children:\"panelId\"}),\" to do this.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"headerId\"}),\" is a unique ID string to use as the value of the \",(0,t.jsx)(e.code,{children:\"id\"}),\" attribute of the header element. This ID will be used as the value of the \",(0,t.jsx)(e.code,{children:\"aria-labelledby\"}),\" attribute of the corresponding accordion panel.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"panelId\"}),\" is a unique ID string to use as the value of the \",(0,t.jsx)(e.code,{children:\"id\"}),\" attribute of accordion panel. This ID will be used as the value of the \",(0,t.jsx)(e.code,{children:\"aria-controls\"}),\" attribute of the corresponding accordion header.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since there can be multiple \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" component instances on the page and we cannot guarantee that the accordion section values will be globally unique, each \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance needs to have a unique identifier. We defined a \",(0,t.jsx)(e.code,{children:\"globalAccordionId\"}),\" in the \",(0,t.jsx)(e.code,{children:'<script context=\"module\">'}),\", this code will only run once when the module first evaluates, rather than when a component is instantiated. For each new \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance, we assign the \",(0,t.jsx)(e.code,{children:\"globalAccordionId\"}),\" to the current \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance's \",(0,t.jsx)(e.code,{children:\"accordionId\"}),\" and increments it, allowing each \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance having a unique ID. The final ID string will be a concatenation of the \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance's \",(0,t.jsx)(e.code,{children:\"accordionId\"}),\", the item value, and whether it's a header or a panel.\"]}),`\n`,(0,t.jsx)(m,{}),`\n`,(0,t.jsx)(g,{})]})}function q(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(b,n)})):b(n)}var O=q;return y(C);})();\n;return Component;"
}