{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-ii-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/Accordion.js": {
      "code": "import { useState } from 'react';\n\nexport default function Accordion({ sections }) {\n  const [openSections, setOpenSections] = useState(\n    new Set(),\n  );\n\n  return (\n    <div className=\"accordion\">\n      {sections.map(({ value, title, contents }) => {\n        const isExpanded = openSections.has(value);\n\n        return (\n          <div className=\"accordion-item\" key={value}>\n            <button\n              className=\"accordion-item-title\"\n              type=\"button\"\n              onClick={() => {\n                const newOpenSections = new Set(\n                  openSections,\n                );\n                newOpenSections.has(value)\n                  ? newOpenSections.delete(value)\n                  : newOpenSections.add(value);\n                setOpenSections(newOpenSections);\n              }}>\n              {title}\n              <span\n                aria-hidden={true}\n                className={[\n                  'accordion-icon',\n                  isExpanded && 'accordion-icon--rotated',\n                ]\n                  .filter(Boolean)\n                  .join(' ')}\n              />\n            </button>\n            <div\n              className=\"accordion-item-contents\"\n              hidden={!isExpanded}>\n              {contents}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"
    },
    "/src/App.js": {
      "code": "import Accordion from './Accordion';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <Accordion\n        sections={[\n          {\n            value: 'html',\n            title: 'HTML',\n            contents:\n              'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n          },\n          {\n            value: 'css',\n            title: 'CSS',\n            contents:\n              'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n          },\n          {\n            value: 'javascript',\n            title: 'JavaScript',\n            contents:\n              'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n          },\n        ]}\n      />\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.accordion {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.accordion-item {\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n  padding: 4px 0;\n}\n\n.accordion-item:not(:first-child) {\n  border-top: 1px solid #eee;\n}\n\n.accordion-item-title {\n  align-items: center;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 4px;\n  justify-content: space-between;\n  text-align: start;\n  display: flex;\n}\n\n.accordion-item-title:hover {\n  background-color: #eee;\n}\n\n.accordion-icon {\n  border: solid currentcolor;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  height: 8px;\n  pointer-events: none;\n  transform: translateY(-2px) rotate(45deg);\n  width: 8px;\n}\n\n.accordion-icon--rotated {\n  transform: translateY(2px) rotate(-135deg);\n}\n\n.accordion-item-contents {\n  font-size: 14px;\n  line-height: 1.2em;\n  padding: 4px;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/Accordion.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/Accordion.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of b(e))!A.call(t,i)&&i!==o&&r(t,i,{get:()=>e[i],enumerable:!(s=g(e,i))||s.enumerable});return t};var d=(t,e,o)=>(o=t!=null?m(w(t)):{},l(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),v=t=>l(r({},\"__esModule\",{value:!0}),t);var c=x((k,h)=>{h.exports=_jsx_runtime});var _={};y(_,{default:()=>q});var a=d(c());var n=d(c());function u(t){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",blockquote:\"blockquote\",em:\"em\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion\",children:\"Accordion\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"An accordion is a vertically stacked set of interactive headings that each contain a title, content snippet, or thumbnail representing a section of content. The headings function as controls that enable users to reveal or hide their associated sections of content. Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[\"Source: \",(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"Accordion Pattern\"})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion\",children:\"Accordion\"}),\", we built a functional accordion component that can expand/collapse each section's contents. However, building good UI components goes beyond functionality and we have to ensure our components have great accessibility as well by adding the right ARIA roles, states, and properties to the DOM elements.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The ARIA Authoring Practices Guide has a \",(0,n.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"long list of guidelines for the ARIA roles, states, and properties to add to the various elements of an accordion\"}),\". We should implement the following (improvised) guidelines for this question:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The title of each accordion header is contained in a \",(0,n.jsx)(e.code,{children:\"<button>\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the accordion panel associated with an accordion header is visible, the header button element has \",(0,n.jsx)(e.code,{children:\"aria-expanded\"}),\" set to \",(0,n.jsx)(e.code,{children:\"true\"}),\". If the panel is not visible, \",(0,n.jsx)(e.code,{children:\"aria-expanded\"}),\" is set to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The accordion header button element has \",(0,n.jsx)(e.code,{children:\"aria-controls\"}),\" set to the ID of the element containing the accordion panel content.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Each element that serves as a container for panel content has role \",(0,n.jsx)(e.code,{children:\"region\"}),\" and \",(0,n.jsx)(e.code,{children:\"aria-labelledby\"}),\" with a value that refers to the button that controls display of the panel.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The skeleton code uses the solution of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/accordion\",children:\"Accordion\"}),\", but you are free to use your own solution as a starting point.\"]})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var p=I;function f(t){return(0,a.jsx)(p,{})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(f,t)})):f(t)}var q=j;return v(_);})();\n;return Component;"
}