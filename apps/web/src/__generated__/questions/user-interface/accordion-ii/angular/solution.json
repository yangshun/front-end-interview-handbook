{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/accordion-ii-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/accordion/accordion.component.css": {
      "code": ""
    },
    "/src/app/accordion/accordion.component.html": {
      "code": "<div class=\"wrapper\">\n  <div class=\"accordion\">\n    <div\n      *ngFor=\"let section of sections; let i = index\"\n      class=\"accordion-item\">\n      <button\n        [attr.aria-controls]=\"\n          getAccordionPanelId(accordionId, section.value)\n        \"\n        [attr.aria-expanded]=\"\n          openSections.has(section.value)\n        \"\n        [id]=\"\n          getAccordionHeaderId(accordionId, section.value)\n        \"\n        class=\"accordion-item-title\"\n        type=\"button\"\n        (click)=\"toggleSection(section.value)\">\n        {{ section.title }}\n        <span\n          [attr.aria-hidden]=\"true\"\n          [ngClass]=\"{\n            'accordion-icon': true,\n            'accordion-icon--rotated': isOpen(section.value)\n          }\">\n        </span>\n      </button>\n      <div\n        [attr.aria-labelledby]=\"\n          getAccordionHeaderId(accordionId, section.value)\n        \"\n        [id]=\"\n          getAccordionPanelId(accordionId, section.value)\n        \"\n        role=\"region\"\n        class=\"accordion-item-contents\"\n        [hidden]=\"!isOpen(section.value)\">\n        {{ section.contents }}\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    "/src/app/accordion/accordion.component.ts": {
      "code": "import { Component, Input } from '@angular/core';\nimport { Section } from '../app.component';\n\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2);\n}\n\n@Component({\n  selector: 'app-accordion',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.css'],\n})\nexport class AccordionComponent {\n  @Input()\n  sections!: Section[];\n\n  openSections = new Set<string>();\n\n  getAccordionHeaderId(\n    accordionId: string,\n    value: string,\n  ): string {\n    return accordionId + '-header-' + value;\n  }\n\n  getAccordionPanelId(\n    accordionId: string,\n    value: string,\n  ): string {\n    return accordionId + '-panel-' + value;\n  }\n\n  accordionId = generateId();\n\n  isOpen(value: string): boolean {\n    return this.openSections.has(value);\n  }\n\n  toggleSection(value: string): void {\n    if (this.openSections.has(value)) {\n      this.openSections.delete(value);\n    } else {\n      this.openSections.add(value);\n    }\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<app-accordion [sections]=\"sections\" />\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\nexport interface Section {\n  value: string;\n  title: string;\n  contents: string;\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  sections: Section[] = [\n    {\n      value: 'html',\n      title: 'HTML',\n      contents:\n        'The HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser.',\n    },\n    {\n      value: 'css',\n      title: 'CSS',\n      contents:\n        'Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML.',\n    },\n    {\n      value: 'javascript',\n      title: 'JavaScript',\n      contents:\n        'JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.',\n    },\n  ];\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { AccordionComponent } from './accordion/accordion.component';\n\n@NgModule({\n  declarations: [AppComponent, AccordionComponent],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n}\n\n.accordion {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.accordion-item {\n  display: flex;\n  flex-direction: column;\n  row-gap: 4px;\n  padding: 4px 0;\n}\n\n.accordion-item:not(:first-child) {\n  border-top: 1px solid #eee;\n}\n\n.accordion-item-title {\n  align-items: center;\n  border: none;\n  background: none;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 4px;\n  justify-content: space-between;\n  text-align: start;\n  display: flex;\n}\n\n.accordion-item-title:hover {\n  background-color: #eee;\n}\n\n.accordion-icon {\n  border: solid currentcolor;\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  height: 8px;\n  pointer-events: none;\n  transform: translateY(-2px) rotate(45deg);\n  width: 8px;\n}\n\n.accordion-icon--rotated {\n  transform: translateY(2px) rotate(-135deg);\n}\n\n.accordion-item-contents {\n  font-size: 14px;\n  line-height: 1.2em;\n  padding: 4px;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var I=Object.create;var d=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var M=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var r in e)d(n,r,{get:e[r],enumerable:!0})},u=(n,e,r,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of A(e))!y.call(n,a)&&a!==r&&d(n,a,{get:()=>e[a],enumerable:!(h=_(e,a))||h.enumerable});return n};var l=(n,e,r)=>(r=n!=null?I(D(n)):{},u(e||!n||!n.__esModule?d(r,\"default\",{value:n,enumerable:!0}):r,n)),O=n=>u(d({},\"__esModule\",{value:!0}),n);var s=M((k,f)=>{f.exports=_jsx_runtime});var H={};v(H,{default:()=>T});var i=l(s());var c=l(s());function g(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,c.jsxs)(e.ul,{children:[`\n`,(0,c.jsx)(e.li,{children:\"Inspect the rendered HTML to see that the right attributes were added to the DOM.\"}),`\n`,(0,c.jsxs)(e.li,{children:[\"You can go a step further by using accessibility testing tools like \",(0,c.jsx)(e.a,{href:\"https://www.deque.com/axe/\",children:\"axe\"}),\" to validate the a11y of the elements.\"]}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,c.jsx)(e,Object.assign({},n,{children:(0,c.jsx)(g,n)})):g(n)}var m=C;var o=l(s());function p(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"By using a \",(0,o.jsx)(e.code,{children:\"<button>\"}),\" for the section titles, we have enabled the basic keyboard interactions necessary to achieve sufficient accessibility for accordion components. However, there are some useful optional keyboard interactions to add, which will be covered in \",(0,o.jsx)(e.a,{href:\"/questions/user-interface/accordion-iii\",children:\"Accordion III\"}),\".\"]}),`\n`,(0,o.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\",children:\"Accordion | ARIA Authoring Practices Guide\"})}),`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://reach.tech/accordion\",children:\"Accordion | Reach UI\"})}),`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://headlessui.com/react/disclosure\",children:\"Disclosure - Headless UI\"})}),`\n`]})]})}function q(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(p,n)})):p(n)}var b=q;var t=l(s());function w(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Other than adding the right ARIA roles and states, which is straightforward, we also need to link the accordion headers with the corresponding accordion contents/panels. Hence we create two functions, \",(0,t.jsx)(e.code,{children:\"getAccordionHeaderId\"}),\" and \",(0,t.jsx)(e.code,{children:\"getAccordionPanelId\"}),\" to do this.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"getAccordionHeaderId\"}),\" generates a unique ID string to use as the value of the \",(0,t.jsx)(e.code,{children:\"id\"}),\" attribute of the header element. This ID will be used as the value of the \",(0,t.jsx)(e.code,{children:\"aria-labelledby\"}),\" attribute of the corresponding accordion panel.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"getAccordionPanelId\"}),\" generates a unique ID string to use as the value of the \",(0,t.jsx)(e.code,{children:\"id\"}),\" attribute of accordion panel. This ID will be used as the value of the \",(0,t.jsx)(e.code,{children:\"aria-controls\"}),\" attribute of the corresponding accordion header.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since there can be multiple \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" component instances on the page and we cannot guarantee that the accordion section values will be globally unique, each \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance needs to have a unique identifier. The \",(0,t.jsx)(e.code,{children:\"useId\"}),\" React hook can be used to generate unique ID for each \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance. The final ID string will be a concatenation of the \",(0,t.jsx)(e.code,{children:\"Accordion\"}),\" instance's ID, the item value, and whether it's a header or a panel.\"]})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(w,n)})):w(n)}var x=F;function j(n){let e=Object.assign({p:\"p\",a:\"a\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[\"We'll build on top of \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/accordion/angular/solution\",children:\"Accordion's solution\"}),\".\"]}),`\n`,(0,i.jsx)(x,{}),`\n`,(0,i.jsx)(m,{}),`\n`,(0,i.jsx)(b,{})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(j,n)})):j(n)}var T=X;return O(H);})();\n;return Component;"
}