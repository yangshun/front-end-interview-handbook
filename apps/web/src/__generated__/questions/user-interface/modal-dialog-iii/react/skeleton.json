{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/modal-dialog-iii-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport ModalDialog from './ModalDialog';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>\n        Show modal\n      </button>\n      <ModalDialog\n        open={open}\n        title=\"Modal Title\"\n        onClose={() => {\n          setOpen(false);\n        }}>\n        One morning, when Gregor Samsa woke from troubled\n        dreams, he found himself transformed in his bed into\n        a horrible vermin. He lay on his armour-like back,\n        and if he lifted his head a little he could see his\n        brown belly, slightly domed and divided by arches\n        into stiff sections.\n      </ModalDialog>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ModalDialog.tsx": {
      "code": "import { ComponentProps, useId } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport default function ModalDialog({\n  open = false,\n  ...props\n}: Readonly<{\n  open?: boolean;\n}> &\n  ComponentProps<typeof ModalDialogImpl>) {\n  if (!open) {\n    return null;\n  }\n\n  return <ModalDialogImpl {...props} />;\n}\n\nfunction ModalDialogImpl({\n  children,\n  title,\n  onClose,\n}: Readonly<{\n  children: React.ReactNode;\n  title: string;\n  onClose: () => void;\n}>) {\n  const titleId = useId();\n  const contentId = useId();\n\n  return createPortal(\n    <div className=\"modal-overlay\">\n      <div\n        aria-describedby={contentId}\n        aria-labelledby={titleId}\n        className=\"modal\"\n        role=\"dialog\">\n        <h1 className=\"modal-title\" id={titleId}>\n          {title}\n        </h1>\n        <div id={contentId}>{children}</div>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    document.body,\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.modal-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  inset: 0;\n  position: fixed;\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n\n  padding: 20px;\n}\n\n.modal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n\n  background-color: white;\n  padding: 24px;\n}\n\n.modal-title {\n  margin: 0;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ModalDialog.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ModalDialog.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var I=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),x=(o,e)=>{for(var n in e)a(o,n,{get:e[n],enumerable:!0})},d=(o,e,n,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of y(e))!b.call(o,i)&&i!==n&&a(o,i,{get:()=>e[i],enumerable:!(l=f(e,i))||l.enumerable});return o};var c=(o,e,n)=>(n=o!=null?p(w(o)):{},d(e||!o||!o.__esModule?a(n,\"default\",{value:o,enumerable:!0}):n,o)),q=o=>d(a({},\"__esModule\",{value:!0}),o);var r=I((_,h)=>{h.exports=_jsx_runtime});var k={};x(k,{default:()=>M});var s=c(r());var t=c(r());function u(o){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-ii\",children:\"Modal Dialog II\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-ii\",children:\"Modal Dialog II\"}),\", we built a functional modal dialog component that has the necessary \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#wai-ariaroles,states,andproperties\",children:\"WAI-ARIA roles, states, and properties\"}),\". For a completely accessible modal dialog component, we should also add the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#keyboardinteraction\",children:\"necessary keyboard interactions\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The required keyboard interactions will be done across this question and \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iv\",children:\"Modal Dialog IV\"}),\". For this question, the focus is on implementing other convenient ways to close a modal dialog.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsx)(e.p,{children:'The current modal dialog can be dismissed by clicking on the \"Close\" button within the dialog contents. However, modal dialogs should also support other convenient ways of closing the dialog:'}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Clicking outside the modal dialog component (e.g. the overlay)\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Hitting the \",(0,t.jsx)(\"kbd\",{children:\"Escape\"}),\" key\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Add support for these interactions.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The focus of this question is on adding closing dialog functionality, not the styling and structure. The solution to \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-ii\",children:\"Modal Dialog II\"}),\" has been provided here for you to build on top of. You can reuse the existing styling and structure.\"]})]})}function j(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(u,o)})):u(o)}var g=j;function m(o){return(0,s.jsx)(g,{})}function D(o={}){let{wrapper:e}=o.components||{};return e?(0,s.jsx)(e,Object.assign({},o,{children:(0,s.jsx)(m,o)})):m(o)}var M=D;return q(k);})();\n;return Component;"
}