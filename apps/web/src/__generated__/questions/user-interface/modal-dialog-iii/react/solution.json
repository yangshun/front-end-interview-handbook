{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/modal-dialog-iii-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport ModalDialog from './ModalDialog';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>\n        Show modal\n      </button>\n      <ModalDialog\n        open={open}\n        title=\"Modal Title\"\n        onClose={() => {\n          setOpen(false);\n        }}>\n        One morning, when Gregor Samsa woke from troubled\n        dreams, he found himself transformed in his bed into\n        a horrible vermin. He lay on his armour-like back,\n        and if he lifted his head a little he could see his\n        brown belly, slightly domed and divided by arches\n        into stiff sections.\n      </ModalDialog>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ModalDialog.tsx": {
      "code": "import {\n  ComponentProps,\n  RefObject,\n  useEffect,\n  useId,\n  useRef,\n} from 'react';\nimport { createPortal } from 'react-dom';\n\nexport default function ModalDialog({\n  open = false,\n  ...props\n}: Readonly<{\n  open?: boolean;\n}> &\n  ComponentProps<typeof ModalDialogImpl>) {\n  if (!open) {\n    return null;\n  }\n\n  return <ModalDialogImpl {...props} />;\n}\n\n/**\n * Invokes a function when a key is pressed.\n */\nfunction useOnKeyDown(key: string, fn: () => void) {\n  useEffect(() => {\n    function onKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        fn();\n      }\n    }\n\n    document.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  }, [fn]);\n}\n\n/**\n * Invokes a function when clicking outside an element.\n */\nfunction useOnClickOutside(\n  elRef: RefObject<HTMLDivElement>,\n  fn: () => void,\n) {\n  // Add event handling for close when clicking outside.\n  useEffect(() => {\n    function onClickOutside(\n      event: MouseEvent | TouchEvent,\n    ) {\n      // No-op if clicked element is a descendant of element's contents.\n      if (\n        event.target instanceof Node &&\n        elRef.current != null &&\n        !elRef.current?.contains(event.target)\n      ) {\n        fn();\n      }\n    }\n\n    document.addEventListener('mousedown', onClickOutside);\n    document.addEventListener('touchstart', onClickOutside);\n\n    return () => {\n      document.removeEventListener(\n        'mousedown',\n        onClickOutside,\n      );\n      document.removeEventListener(\n        'touchstart',\n        onClickOutside,\n      );\n    };\n  }, [fn]);\n}\n\nfunction ModalDialogImpl({\n  children,\n  title,\n  onClose,\n}: Readonly<{\n  children: React.ReactNode;\n  title: string;\n  onClose: () => void;\n}>) {\n  const titleId = useId();\n  const contentId = useId();\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  useOnKeyDown('Escape', onClose);\n  useOnClickOutside(dialogRef, onClose);\n\n  return createPortal(\n    <div className=\"modal-overlay\">\n      <div\n        aria-describedby={contentId}\n        aria-labelledby={titleId}\n        className=\"modal\"\n        role=\"dialog\"\n        ref={dialogRef}>\n        <h1 className=\"modal-title\" id={titleId}>\n          {title}\n        </h1>\n        <div id={contentId}>{children}</div>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    document.body,\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.modal-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  inset: 0;\n  position: fixed;\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n\n  padding: 20px;\n}\n\n.modal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n\n  background-color: white;\n  padding: 24px;\n}\n\n.modal-title {\n  margin: 0;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ModalDialog.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ModalDialog.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var _=Object.create;var h=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var T=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),A=(t,e)=>{for(var d in e)h(t,d,{get:e[d],enumerable:!0})},m=(t,e,d,u)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of O(e))!M.call(t,r)&&r!==d&&h(t,r,{get:()=>e[r],enumerable:!(u=C(e,r))||u.enumerable});return t};var s=(t,e,d)=>(d=t!=null?_(D(t)):{},m(e||!t||!t.__esModule?h(d,\"default\",{value:t,enumerable:!0}):d,t)),F=t=>m(h({},\"__esModule\",{value:!0}),t);var a=T((P,p)=>{p.exports=_jsx_runtime});var q={};A(q,{default:()=>L});var l=s(a());var n=s(a());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",h3:\"h3\",h4:\"h4\",ol:\"ol\",li:\"li\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-ii/solution\",children:\"Modal Dialog II's solution\"}),\". Since we're adding new interactions to the modal dialog component, most of the styling and structure can be reused without much modifications.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There are two new interactions to support for closing the dialog: (1) Hitting the \",(0,n.jsx)(\"kbd\",{children:\"Escape\"}),\" key, and (2) Clicking outside the dialog contents.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To close the dialog, we simply have to call the \",(0,n.jsx)(e.code,{children:\"onClose\"}),\" callback, so it's a matter of when to trigger that callback.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[\"1. Hitting the \",(0,n.jsx)(\"kbd\",{children:\"Escape\"}),\" key\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We create a generic hook called \",(0,n.jsx)(e.code,{children:\"useOnKeyDown\"}),\" that takes in a string key representing the keyboard key to respond to, and a callback to trigger when the key is pressed.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The hook adds an event listener for the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event to \",(0,n.jsx)(e.code,{children:\"document\"}),\". Within the event listener callback, check if \",(0,n.jsx)(e.code,{children:\"event.key\"}),\" corresponds to the \",(0,n.jsx)(e.code,{children:\"key\"}),\" argument, and trigger the callback argument if so.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To use the hook, call it with the following argument: \",(0,n.jsx)(e.code,{children:\"useOnKeyDown('Escape', onClose)\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"2. Clicking outside the dialog contents\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The tricky part of implementing this logic is to determine whether the click happened inside or outside the dialog contents body. Thankfully, the \",(0,n.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\",children:[(0,n.jsx)(e.code,{children:\"Node.contains()\"}),\" method\"]}),\" is a convenient method that can be used to determine if a node is a descendant of a given node, or the node itself. When a \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\" or \",(0,n.jsx)(e.code,{children:\"touchstart\"}),\" event occurs, check if the \",(0,n.jsx)(e.code,{children:\"event.target\"}),\" is a descendant of the modal dialog contents, e.g. \",(0,n.jsx)(e.code,{children:\"dialogEl.contains(event.target)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You may have tried using a \",(0,n.jsx)(e.code,{children:\"click\"}),\" event as opposed to \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\", but that does not work and the modal dialog cannot be opened. An explanation as to why can be found below.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It is necessary to obtain a reference to the modal dialog body. In React, this is achieved using the \",(0,n.jsx)(e.code,{children:\"useRef()\"}),\" hook.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This functionality can be encapsulated as a \",(0,n.jsx)(e.code,{children:\"useOnClickOutside\"}),' hook that takes in the element ref and the callback function. \"On click outside\" is in fact a common utility hook and a more robust implementation of the hook can be found on ',(0,n.jsx)(e.a,{href:\"https://usehooks-ts.com/react-hook/use-on-click-outside#hook\",children:(0,n.jsx)(e.code,{children:\"usehooks-ts\"})}),\" (despite its name, the default event is actually \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\"). To use the hook, call it with the following arguments: \",(0,n.jsx)(e.code,{children:\"useOnClickOutside(dialogRef, onClose)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Why using a \",(0,n.jsx)(e.code,{children:\"click\"}),\" event does not work\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Events bubble up the DOM and event handlers on DOM elements are fired during the bubbling phase of the event by default. When the button is clicked:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"When users click on a button, a click event is created and travels down from the document root to the element (capturing phase) that the user clicked on, in this case, the button\"}),`\n`,(0,n.jsx)(e.li,{children:\"When it reaches the button, the event bubbles back up to the document root\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"The button which has a \",(0,n.jsx)(e.code,{children:\"click\"}),\" event handler, responds to the event by mounting the dialog\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The dialog is rendered and adds \",(0,n.jsx)(e.code,{children:\"click\"}),\" event handlers on the \",(0,n.jsx)(e.code,{children:\"document\"}),\" to close the dialog when an element outside it is clicked\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"click\"}),\" event travels up to the \",(0,n.jsx)(e.code,{children:\"document\"}),\" and fires the event handler added by the dialog. The button is indeed outside the dialog, so the dialog is closed\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\" event works for clicking-outside interaction because \",(0,n.jsx)(e.code,{children:\"click\"}),\" events are fired after \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\" and \",(0,n.jsx)(e.code,{children:\"mouseup\"}),\" events have completed. The \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\" event caused by the click on the button would have completed even before the dialog is rendered.\"]}),`\n`,(0,n.jsxs)(e.h4,{children:[\"Can we still use \",(0,n.jsx)(e.code,{children:\"click\"}),\" events?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The alternative is to add a \",(0,n.jsx)(e.code,{children:\"click\"}),\" event handler that only responds during the capturing phase:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`document.addEventListener('click', onClickOutside, true); // Called during the capturing phase instead of bubbling phase\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Although it works, the \",(0,n.jsx)(e.code,{children:\"mousedown\"}),\" event is still preferred as it does not require the mouse button to be lifted before firing and provides a more snappy experience.\"]})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var f=I;var o=s(a());function b(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ol,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Click outside to close:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Open the modal dialog\"}),`\n`,(0,o.jsx)(e.li,{children:\"Click on the overlay area outside the modal content\"}),`\n`,(0,o.jsx)(e.li,{children:\"Verify that the modal closes\"}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Click inside does not close:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Open the modal dialog\"}),`\n`,(0,o.jsx)(e.li,{children:\"Click on modal content\"}),`\n`,(0,o.jsx)(e.li,{children:\"Verify that the modal does not close\"}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Escape to close:\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Open the modal dialog\"}),`\n`,(0,o.jsxs)(e.li,{children:[\"Press the \",(0,o.jsx)(\"kbd\",{children:\"Escape\"}),\" key\"]}),`\n`,(0,o.jsx)(e.li,{children:\"Verify that the modal closes\"}),`\n`]}),`\n`]}),`\n`]})]})}function W(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(b,t)})):b(t)}var k=W;var i=s(a());function w(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"We're not totally done with accessibility yet, there's still focus management to add, which will be covered in \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iv\",children:\"Modal Dialog IV\"}),\".\"]}),`\n`,(0,i.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\",children:\"Dialog (Modal) | ARIA Authoring Practices Guide\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.radix-ui.com/primitives/docs/components/dialog\",children:\"Dialog \\u2013 Radix Primitives\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://reach.tech/dialog\",children:\"Dialog | Reach UI\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://headlessui.com/react/dialog\",children:\"Dialog - Headless UI\"})}),`\n`]})]})}function X(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(w,t)})):w(t)}var v=X;var c=s(a());function y(t){let e=Object.assign({h2:\"h2\",p:\"p\"},t.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{children:\"Follow up\"}),`\n`,(0,c.jsx)(e.p,{children:\"A possible problematic scenario is having multiple dialogs open at once / stacked because the open dialog's contents allow opening of another dialog.\"}),`\n`,(0,c.jsxs)(e.p,{children:[\"A limitation of our current implementation is surfaced \\u2013 since most of the event listeners are added on the global level, all the open dialogs might respond to a \",(0,c.jsx)(\"kbd\",{children:\"Escape\"}),\" event and close at the same time, when the expected behavior is that only the topmost dialog closes.\"]}),`\n`,(0,c.jsx)(e.p,{children:\"Fixing this will require code to track the stack of open dialogs and only close the topmost dialog. However, implementing this is non-trivial and usually beyond the scope of interviews. That said, mentioning this scenario to the interviewer will probably give you brownie points!\"})]})}function E(t={}){let{wrapper:e}=t.components||{};return e?(0,c.jsx)(e,Object.assign({},t,{children:(0,c.jsx)(y,t)})):y(t)}var x=E;function j(t){return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(f,{}),`\n`,(0,l.jsx)(k,{}),`\n`,(0,l.jsx)(v,{}),`\n`,(0,l.jsx)(x,{})]})}function R(t={}){let{wrapper:e}=t.components||{};return e?(0,l.jsx)(e,Object.assign({},t,{children:(0,l.jsx)(j,t)})):j(t)}var L=R;return F(q);})();\n;return Component;"
}