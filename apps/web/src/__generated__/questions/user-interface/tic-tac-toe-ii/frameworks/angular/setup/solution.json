{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/app/app.component.ts\",\n    \"/src/app/app.component.html\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/app/app.component.ts\",\n  \"environment\": \"angular-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/tic-tac-toe-ii-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.html": {
      "code": "<app-tic-tac-toe [n]=\"5\" [m]=\"4\" />\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { TicTacToeComponent } from './tic-tac-toe.component';\nimport { StatusMessagePipe } from './status-message.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TicTacToeComponent,\n    StatusMessagePipe,\n  ],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/status-message.pipe.ts": {
      "code": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Cell } from './tic-tac-toe.component';\n\n@Pipe({\n  name: 'statusMessage',\n})\nexport class StatusMessagePipe implements PipeTransform {\n  transform(\n    board: Cell[],\n    xIsPlaying: boolean,\n    winner: string | null,\n  ): string {\n    if (winner) return `Player ${winner} wins!`;\n    if (!board.includes(null)) return `It's a draw!`;\n    return `Player ${xIsPlaying ? 'X' : 'O'} turn`;\n  }\n}\n"
    },
    "/src/app/tic-tac-toe.component.html": {
      "code": "<div class=\"app\">\n  <div aria-live=\"polite\">\n    {{ board | statusMessage: xIsPlaying : winner }}\n  </div>\n  <div\n    class=\"board\"\n    [style.grid-template-columns]=\"\n      'repeat(' + n + ', 1fr)'\n    \">\n    <button\n      *ngFor=\"let cell of board; let i = index\"\n      class=\"cell\"\n      [disabled]=\"cell !== null || winner !== null\"\n      (click)=\"onCellClick(i)\">\n      <span aria-hidden=\"true\">{{ cell }}</span>\n    </button>\n  </div>\n  <button (click)=\"clickReset()\">Reset</button>\n</div>\n"
    },
    "/src/app/tic-tac-toe.component.ts": {
      "code": "import { Component, Input, OnInit } from '@angular/core';\n\nexport type Cell = string | null;\n\n@Component({\n  selector: 'app-tic-tac-toe',\n  templateUrl: './tic-tac-toe.component.html',\n})\nexport class TicTacToeComponent implements OnInit {\n  @Input()\n  n!: number;\n\n  @Input()\n  m!: number;\n\n  board: Cell[] = [];\n  xIsPlaying = true;\n  winner: string | null = null;\n\n  ngOnInit() {\n    this.resetGame();\n  }\n\n  resetGame() {\n    this.board = Array(this.n * this.n).fill(null);\n    this.xIsPlaying = true;\n    this.winner = null;\n  }\n\n  clickReset() {\n    if (this.winner == null) {\n      const confirm = window.confirm(\n        'Are you sure you want to reset the game?',\n      );\n      if (!confirm) {\n        return;\n      }\n    }\n    this.resetGame();\n  }\n\n  onCellClick(index: number) {\n    if (this.board[index] || this.winner) return;\n    const turn = this.xIsPlaying ? 'X' : 'O';\n    this.board[index] = turn;\n    this.winner = this.determineWinner(index);\n    this.xIsPlaying = !this.xIsPlaying;\n  }\n\n  determineWinner(index: number): string | null {\n    const row = Math.floor(index / this.n);\n    const col = index % this.n;\n\n    // Get row\n    const rowLine = [];\n    for (let i = 0; i < this.n; i++) {\n      rowLine.push(row * this.n + i);\n    }\n\n    // Get column\n    const colLine = [];\n    for (let i = 0; i < this.n; i++) {\n      colLine.push(i * this.n + col);\n    }\n\n    const leftToRightDiagonalLine =\n      this.getLeftToRightDiagonal(index, this.n);\n    const rightToLeftDiagonalLine =\n      this.getRightToLeftDiagonal(index, this.n);\n\n    const lines = [\n      rowLine,\n      colLine,\n      leftToRightDiagonalLine,\n      rightToLeftDiagonalLine,\n    ];\n\n    for (const line of lines) {\n      let currentWinner = null;\n      let currentCountInARow = 0;\n      for (const i of line) {\n        if (this.board[i] == null) {\n          currentWinner = null;\n          currentCountInARow = 0;\n          continue;\n        }\n        if (this.board[i] === currentWinner) {\n          currentCountInARow++;\n        } else {\n          currentWinner = this.board[i];\n          currentCountInARow = 1;\n        }\n        if (currentCountInARow >= this.m) {\n          return currentWinner;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getLeftToRightDiagonal(i: number, n: number) {\n    const row = Math.floor(i / n);\n    const col = i % n;\n\n    const stepsToStart = Math.min(col, row);\n    const startRow = row - stepsToStart;\n    const startCol = col - stepsToStart;\n    const line = [];\n\n    for (let i = 0; i < n; i++) {\n      const currentRow = startRow + i;\n      const currentCol = startCol + i;\n      if (currentRow >= n || currentCol >= n) {\n        break;\n      }\n      line.push(currentRow * n + currentCol);\n    }\n\n    return line;\n  }\n\n  getRightToLeftDiagonal(i: number, n: number) {\n    const row = Math.floor(i / n);\n    const col = i % n;\n\n    const stepsToStart = Math.min(n - col - 1, row);\n    const startRow = row - stepsToStart;\n    const startCol = col + stepsToStart;\n    const line = [];\n\n    for (let i = 0; i < n; i++) {\n      const currentRow = startRow + i;\n      const currentCol = startCol - i;\n      if (currentRow >= n || currentCol < 0) {\n        break;\n      }\n      line.push(currentRow * n + currentCol);\n    }\n\n    return line;\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root />\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { enableProdMode } from '@angular/core';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.app {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 400px;\n  margin: 0 auto;\n  row-gap: 16px;\n}\n\n.board {\n  display: grid;\n  width: 100%;\n}\n\n.cell {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  color: #000;\n  font-size: min(48px, 10vw);\n  font-weight: bold;\n  vertical-align: middle;\n  aspect-ratio: 1 / 1;\n}\n\n.cell:not(:disabled) {\n  cursor: pointer;\n}\n\n.cell:not(:disabled):hover {\n  background-color: #fafafa;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  }
}