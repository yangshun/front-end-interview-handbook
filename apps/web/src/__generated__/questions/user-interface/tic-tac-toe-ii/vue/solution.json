{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/tic-tac-toe-ii-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport Board from './Board.vue';\n</script>\n\n<template>\n  <Board :n=\"5\" :m=\"4\" />\n</template>\n"
    },
    "/src/Board.vue": {
      "code": "<script setup>\nimport { computed, ref, watch } from 'vue';\nimport Cell from './Cell.vue';\n\n// Determine if there's a winner for the board.\n\nfunction determineWinner(board, i, n, m) {\n  const row = Math.floor(i / n);\n  const col = i % n;\n\n  // Get row\n  const rowLine = [];\n  for (let i = 0; i < n; i++) {\n    rowLine.push(row * n + i);\n  }\n\n  // Get column\n  const colLine = [];\n  for (let i = 0; i < n; i++) {\n    colLine.push(i * n + col);\n  }\n\n  const leftToRightDiagonalLine = getLeftToRightDiagonal(\n    i,\n    n,\n  );\n  const rightToLeftDiagonalLine = getRightToLeftDiagonal(\n    i,\n    n,\n  );\n\n  const lines = [\n    rowLine,\n    colLine,\n    leftToRightDiagonalLine,\n    rightToLeftDiagonalLine,\n  ];\n\n  for (const line of lines) {\n    let currentWinner = null;\n    let currentCountInARow = 0;\n    for (const i of line) {\n      if (board[i] == null) {\n        currentWinner = null;\n        currentCountInARow = 0;\n        continue;\n      }\n      if (board[i] === currentWinner) {\n        currentCountInARow++;\n      } else {\n        currentWinner = board[i];\n        currentCountInARow = 1;\n      }\n      if (currentCountInARow >= m) {\n        return currentWinner;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getLeftToRightDiagonal(i, n) {\n  const row = Math.floor(i / n);\n  const col = i % n;\n\n  const stepsToStart = Math.min(col, row);\n  const startRow = row - stepsToStart;\n  const startCol = col - stepsToStart;\n  const line = [];\n\n  for (let i = 0; i < n; i++) {\n    const currentRow = startRow + i;\n    const currentCol = startCol + i;\n    if (currentRow >= n || currentCol >= n) {\n      break;\n    }\n    line.push(currentRow * n + currentCol);\n  }\n\n  return line;\n}\n\nfunction getRightToLeftDiagonal(i, n) {\n  const row = Math.floor(i / n);\n  const col = i % n;\n\n  const stepsToStart = Math.min(n - col - 1, row);\n  const startRow = row - stepsToStart;\n  const startCol = col + stepsToStart;\n  const line = [];\n\n  for (let i = 0; i < n; i++) {\n    const currentRow = startRow + i;\n    const currentCol = startCol - i;\n    if (currentRow >= n || currentCol < 0) {\n      break;\n    }\n    line.push(currentRow * n + currentCol);\n  }\n\n  return line;\n}\n\nconst props = defineProps({\n  n: Number,\n  m: Number,\n});\n\nconst board = ref(Array(props.n * props.n).fill(null));\nconst xIsPlaying = ref(true);\nconst winner = ref(null);\n\nconst statusMessage = computed(() => {\n  if (winner.value != null) {\n    return `Player ${winner.value} wins!`;\n  }\n\n  // All cells have been filled up.\n  if (!board.value.includes(null)) {\n    return `It's a draw!`;\n  }\n\n  return `Player ${xIsPlaying.value ? 'X' : 'O'} turn`;\n});\n\nfunction reset() {\n  if (winner.value == null) {\n    // Confirm whether to reset the game.\n    const confirm = window.confirm(\n      'Are you sure you want to reset the game?',\n    );\n    if (!confirm) {\n      return;\n    }\n  }\n\n  board.value = Array(props.n * props.n).fill(null);\n  xIsPlaying.value = true;\n  winner.value = null;\n}\n\nwatch([() => props.m, () => props.n], ([m, n]) => {\n  if (m > n) {\n    throw Error('Invalid props. `m` must be <= `n`.');\n  }\n\n  reset();\n});\n</script>\n\n<template>\n  <div class=\"app\">\n    <div aria-live=\"polite\">{{ statusMessage }}</div>\n    <div\n      class=\"board\"\n      :style=\"{\n        'grid-template-columns': `repeat(${n}, 1fr)`,\n      }\">\n      <Cell\n        v-for=\"(_, index) in n * n\"\n        :key=\"index\"\n        :index=\"index\"\n        :mark=\"board[index]\"\n        :turn=\"xIsPlaying ? 'X' : 'O'\"\n        @on-click=\"\n          board[index] = xIsPlaying ? 'X' : 'O';\n          xIsPlaying = !xIsPlaying;\n\n          winner = determineWinner(board, index, n, m);\n        \"\n        :disabled=\"\n          board[index] != null || winner != null\n        \" />\n    </div>\n    <button @click=\"reset\">Reset</button>\n  </div>\n</template>\n\n<style>\n.app {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 320px;\n  margin: 0 auto;\n  row-gap: 16px;\n}\n\n.board {\n  display: grid;\n  width: 100%;\n}\n</style>\n"
    },
    "/src/Cell.vue": {
      "code": "<script setup>\nconst props = defineProps({\n  index: Number,\n  mark: String,\n  disabled: Boolean,\n  turn: String,\n});\n</script>\n\n<template>\n  <button\n    :aria-label=\"\n      props.mark == null\n        ? `Mark cell ${props.index} as ${props.turn}`\n        : undefined\n    \"\n    class=\"cell\"\n    :disabled=\"props.disabled\"\n    @click=\"$emit('on-click')\">\n    <span aria-hidden>{{ mark }}</span>\n  </button>\n</template>\n\n<style>\n.cell {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  color: #000;\n  font-size: min(48px, 10vw);\n  font-weight: bold;\n  vertical-align: middle;\n  aspect-ratio: 1 / 1;\n}\n\n.cell:not(:disabled) {\n  cursor: pointer;\n}\n\n.cell:not(:disabled):hover {\n  background-color: #fafafa;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/Board.vue",
      "/src/Cell.vue"
    ],
    "activeFile": "/src/Board.vue",
    "environment": "vue-cli"
  },
  "writeup": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var k=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),v=(i,e)=>{for(var r in e)a(i,r,{get:e[r],enumerable:!0})},h=(i,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!w.call(i,l)&&l!==r&&a(i,l,{get:()=>e[l],enumerable:!(s=y(e,l))||s.enumerable});return i};var o=(i,e,r)=>(r=i!=null?g(b(i)):{},h(e||!i||!i.__esModule?a(r,\"default\",{value:i,enumerable:!0}):r,i)),x=i=>h(a({},\"__esModule\",{value:!0}),i);var c=k((X,d)=>{d.exports=_jsx_runtime});var _={};v(_,{default:()=>j});var n=o(c());var t=o(c());function u(i){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Initial Board State\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game board is displayed correctly with N x N empty cells.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message indicates it's player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Marking Cells\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Click on an empty cell.\"}),`\n`,(0,t.jsx)(e.li,{children:'Verify that the cell is marked with an \"X\" and the turn switches to player O.'}),`\n`,(0,t.jsx)(e.li,{children:\"Click on another empty cell.\"}),`\n`,(0,t.jsx)(e.li,{children:'Verify that the second cell is marked with an \"O\" and the turn switches back to player X.'}),`\n`,(0,t.jsx)(e.li,{children:\"Repeat this process for a few more cells to ensure the marks are placed correctly and the turn alternates between players.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Winning Conditions\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Create a winning line for player X or player O by marking M cells in a row, column, or diagonal.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message displays the winning player's message correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that no further marks can be made after the game is won.\"}),`\n`,(0,t.jsx)(e.li,{children:'Click on the \"Reset\" button.'}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the board is cleared and the game restarts with player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Draw Condition\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Fill all the cells on the board without creating a winning line.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message displays a draw message correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that no further marks can be made after the draw.\"}),`\n`,(0,t.jsx)(e.li,{children:'Click on the \"Reset\" button.'}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the board is cleared, and the game restarts with player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Accessibility\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Use a screen reader to navigate and interact with the game.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message, cell markings, and buttons are announced correctly by the screen reader.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game can be played and reset using only keyboard navigation.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Responsive Design\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Test the game on different screen sizes, such as desktop, tablet, and mobile devices.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game board and cells adjust correctly to different screen sizes.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that the game remains playable and visually appealing on smaller screens.\"}),`\n`]}),`\n`]}),`\n`]})]})}function C(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var m=C;function f(i){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",code:\"code\",ol:\"ol\",li:\"li\",ul:\"ul\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tic-tac-toe/vue/solution\",children:\"Tic-tac-toe's Vue solution\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The standard tic-tac-toe game uses N = 3 and M = 3. In general it is a good practice to parameterize the app/components you're building, however the general version of tic-tac-toe takes significantly longer to implement. If you are sure you don't need to build a general version, then it's recommended to stick with the \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tic-tac-toe/vue/solution\",children:\"basic Tic-tac-toe implementation\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the dimensions of the board is not fixed and can only be determined at runtime, we have to use inline styles to generate the required \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" property value.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"The core state of the game in the Vue implementation consists of:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"board\"}),\": A single-dimensional array of length \",(0,n.jsx)(e.code,{children:\"n * n\"}),\" that represents the tic-tac-toe board.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"xIsPlaying\"}),\": A boolean variable indicating if it's the X player's turn.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"winner\"}),\": A variable to track the current winner, if any.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Strictly speaking, the \",(0,n.jsx)(e.code,{children:\"winner\"}),\" should be derived and determined by processing the \",(0,n.jsx)(e.code,{children:\"board\"}),\", which is the approach taken by the 3 x 3 version. However, for N x N boards where N and M can be very large, we determine the winner only after every turn based on the cell that the user has pressed, which is a more efficient approach as compared to determining by processing through the entire board.\"]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"determineWinner\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In the 3 x 3 version, we call this function for every render. But for an N x N board, we'll call this function after every turn as a winner can only emerge after a turn.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"determineWinner\"}),\" function takes four parameters: \",(0,n.jsx)(e.code,{children:\"board\"}),\" (the current state of the game board), \",(0,n.jsx)(e.code,{children:\"i\"}),\" (the index of the last marked cell), \",(0,n.jsx)(e.code,{children:\"n\"}),\" (the size of the board), and \",(0,n.jsx)(e.code,{children:\"m\"}),\" (the number of consecutive marks required to win).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It firstly generates four arrays representing the winning \",(0,n.jsx)(e.code,{children:\"lines\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rowLine\"}),\": Contains the indices of all the cells in the same row as the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"colLine\"}),\": Contains the indices of all the cells in the same column as the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"leftToRightDiagonalLine\"}),\": Contains the indices of all the cells in the left-to-right diagonal that includes the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rightToLeftDiagonalLine\"}),\": Contains the indices of all the cells in the right-to-left diagonal that includes the last marked cell.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For each line in \",(0,n.jsx)(e.code,{children:\"lines\"}),\", it then counts if there are \",(0,n.jsx)(e.code,{children:\"m\"}),\" consecutive cells with the same mark and returns the mark if there is, otherwise it returns \",(0,n.jsx)(e.code,{children:\"null\"}),\", indicating there's no winner for the board yet.\"]}),`\n`,(0,n.jsx)(m,{})]})}function V(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(f,i)})):f(i)}var j=V;return x(_);})();\n;return Component;"
}