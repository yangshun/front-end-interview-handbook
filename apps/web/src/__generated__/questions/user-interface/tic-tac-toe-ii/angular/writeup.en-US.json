{
  "skeleton": "var Component=(()=>{var g=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},l=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of w(e))!y.call(t,a)&&a!==i&&r(t,a,{get:()=>e[a],enumerable:!(s=f(e,a))||s.enumerable});return t};var h=(t,e,i)=>(i=t!=null?g(x(t)):{},l(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),j=t=>l(r({},\"__esModule\",{value:!0}),t);var c=b((v,d)=>{d.exports=_jsx_runtime});var T={};k(T,{default:()=>N});var o=h(c());var n=h(c());function m(t){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",blockquote:\"blockquote\",em:\"em\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tic-tac-toe\",children:\"Tic-tac-toe\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Tic-tac-toe is a game for two players who take turns making space in a three-by-three grid with X or O. The player who succeeds in playing three of their marks in a horizontal, vertical, or diagonal row is the winner.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[\"Source: \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Tic-tac-toe\",children:\"Wikipedia\"})]})}),`\n`,(0,n.jsx)(e.p,{children:\"Traditionally, tic-tac-toe uses a 3 x 3 grid. In this problem, build an advanced version of a tic-tac-toe game that has N x N cells on the board and needs M marks in a horizontal, vertical, or diagonal row to win.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following diagram shows an example game where N = 5 and M = 4.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/tic-tac-toe-ii/tic-tac-toe-ii-example.png\",alt:\"N x N Tic-tac-toe Example\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Players can take turns to place an X or a O on an N x N board.\"}),`\n`,(0,n.jsx)(e.li,{children:\"A player wins if M of their marks are in a horizontal, vertical, or diagonal row.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Display the current game status at the top: whose turn it is, winner (if any), or draw.\"}),`\n`,(0,n.jsx)(e.li,{children:'Add a \"Reset\" button to allow the game to be restarted at any time.'}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you aren't familiar with the game, try out \",(0,n.jsx)(e.a,{href:\"https://www.google.com/search?q=tic-tac-toe\",children:\"playing tic-tac-toe on Google\"}),\".\"]})]})}function q(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var u=q;function p(t){return(0,o.jsx)(u,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(p,t)})):p(t)}var N=M;return j(T);})();\n;return Component;",
  "solution": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var v=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),k=(i,e)=>{for(var r in e)a(i,r,{get:e[r],enumerable:!0})},d=(i,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of y(e))!b.call(i,l)&&l!==r&&a(i,l,{get:()=>e[l],enumerable:!(o=f(e,l))||o.enumerable});return i};var s=(i,e,r)=>(r=i!=null?g(w(i)):{},d(e||!i||!i.__esModule?a(r,\"default\",{value:i,enumerable:!0}):r,i)),x=i=>d(a({},\"__esModule\",{value:!0}),i);var c=v((_,h)=>{h.exports=_jsx_runtime});var V={};k(V,{default:()=>I});var n=s(c());var t=s(c());function u(i){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Initial Board State\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game board is displayed correctly with N x N empty cells.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message indicates it's player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Marking Cells\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Click on an empty cell.\"}),`\n`,(0,t.jsx)(e.li,{children:'Verify that the cell is marked with an \"X\" and the turn switches to player O.'}),`\n`,(0,t.jsx)(e.li,{children:\"Click on another empty cell.\"}),`\n`,(0,t.jsx)(e.li,{children:'Verify that the second cell is marked with an \"O\" and the turn switches back to player X.'}),`\n`,(0,t.jsx)(e.li,{children:\"Repeat this process for a few more cells to ensure the marks are placed correctly and the turn alternates between players.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Winning Conditions\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Create a winning line for player X or player O by marking M cells in a row, column, or diagonal.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message displays the winning player's message correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that no further marks can be made after the game is won.\"}),`\n`,(0,t.jsx)(e.li,{children:'Click on the \"Reset\" button.'}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the board is cleared and the game restarts with player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Draw Condition\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Fill all the cells on the board without creating a winning line.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message displays a draw message correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that no further marks can be made after the draw.\"}),`\n`,(0,t.jsx)(e.li,{children:'Click on the \"Reset\" button.'}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the board is cleared, and the game restarts with player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Accessibility\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Use a screen reader to navigate and interact with the game.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message, cell markings, and buttons are announced correctly by the screen reader.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game can be played and reset using only keyboard navigation.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Responsive Design\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Test the game on different screen sizes, such as desktop, tablet, and mobile devices.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game board and cells adjust correctly to different screen sizes.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that the game remains playable and visually appealing on smaller screens.\"}),`\n`]}),`\n`]}),`\n`]})]})}function C(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var m=C;function p(i){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\",h3:\"h3\",pre:\"pre\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tic-tac-toe/angular/solution\",children:\"Tic-tac-toe's Angular solution\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The standard tic-tac-toe game uses n = 3 and m = 3. In general it is a good practice to parameterize the app/components you're building, however the general version of tic-tac-toe takes significantly longer to implement.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once we initialize the component and enter the \",(0,n.jsx)(e.code,{children:\"ngOnInit\"}),\" hook, we will reset the game. This involves setting all properties to their initial values and configuring the game board based on \",(0,n.jsx)(e.code,{children:\"@Input\"}),\" values\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We call \",(0,n.jsx)(e.code,{children:\"determineWinner\"}),\" after every turn as a winner can only emerge after a turn.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"determineWinner\"}),\" method needs to handle four core values: \",(0,n.jsx)(e.code,{children:\"board\"}),\" (the current state of the game board), \",(0,n.jsx)(e.code,{children:\"index\"}),\" (passed index of the last marked cell), \",(0,n.jsx)(e.code,{children:\"n\"}),\" (the size of the board), and \",(0,n.jsx)(e.code,{children:\"m\"}),\" (the number of consecutive marks required to win).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It firstly generates four arrays representing the winning \",(0,n.jsx)(e.code,{children:\"lines\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rowLine\"}),\": Contains the indices of all the cells in the same row as the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"colLine\"}),\": Contains the indices of all the cells in the same column as the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"leftToRightDiagonalLine\"}),\": Contains the indices of all the cells in the left-to-right diagonal that includes the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rightToLeftDiagonalLine\"}),\": Contains the indices of all the cells in the right-to-left diagonal that includes the last marked cell.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For each line in \",(0,n.jsx)(e.code,{children:\"lines\"}),\", it then counts if there are \",(0,n.jsx)(e.code,{children:\"m\"}),\" consecutive cells with the same mark and returns the mark if there is, otherwise it returns \",(0,n.jsx)(e.code,{children:\"null\"}),\", indicating there's no winner for the board yet.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Based on \",(0,n.jsx)(e.code,{children:\"board\"}),\", \",(0,n.jsx)(e.code,{children:\"xIsPlaying\"}),\" and \",(0,n.jsx)(e.code,{children:\"winner\"}),\" fields we can determine who is the winner or turn order by using \",(0,n.jsx)(e.code,{children:\"statusMessage\"}),\" pipe.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In our state we have \",(0,n.jsx)(e.code,{children:\"board\"}),\", \",(0,n.jsx)(e.code,{children:\"xIsPlaying\"}),\" and \",(0,n.jsx)(e.code,{children:\"winner\"}),\" (and of course \",(0,n.jsx)(e.code,{children:\"n\"}),\" and \",(0,n.jsx)(e.code,{children:\"m\"}),\" but those values are not supposed to be changed).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Other than the two core pieces of state as per 3 x 3 Tic-tac-toe, we now include a new \",(0,n.jsx)(e.code,{children:\"winner\"}),\" state to track the state of the winning mark of the board. Strictly speaking, the \",(0,n.jsx)(e.code,{children:\"winner\"}),\" is derived state and can be determined by processing the \",(0,n.jsx)(e.code,{children:\"board\"}),\", which is the approach taken by the 3 x 3 version. However, for N x N boards where N and M can be very large, we determine the winner only after every turn and store it in state, which is a more efficient approach as compared to determining on every render.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the dimensions of the board is not fixed and can only be determined at runtime, we have to use inline styles to generate the required \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" property value.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Models\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Type for board cell to prevent typing \",(0,n.jsx)(e.code,{children:\"board: (string | null)[];\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`type Cell = string | null;\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You might create service for maintaining the state. Inject the service in smart component and crete dumb components that only display and interact with the UI and all events from dumb components are passed to the smart one.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,n.jsx)(e.code,{children:\"readonly\"}),\", \",(0,n.jsx)(e.code,{children:\"private\"}),\", \",(0,n.jsx)(e.code,{children:\"public\"}),\" and \",(0,n.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(m,{})]})}function j(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(p,i)})):p(i)}var I=j;return x(V);})();\n;return Component;"
}