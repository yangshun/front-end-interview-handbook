{
  "author": null,
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/tic-tac-toe-ii-react-solution\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useCallback, useState, useEffect } from 'react';\n\nexport default function App() {\n  return <TicTacToe n={5} m={4} />;\n}\n\nfunction Cell({ index, disabled, mark, turn, onClick }) {\n  return (\n    <button\n      aria-label={\n        mark == null\n          ? `Mark cell ${index} as ${turn}`\n          : undefined\n      }\n      className=\"cell\"\n      disabled={disabled}\n      onClick={onClick}>\n      <span aria-hidden={true}>{mark}</span>\n    </button>\n  );\n}\n\nfunction TicTacToe({ n, m }) {\n  const [board, setBoard] = useState(\n    Array(n * n).fill(null),\n  );\n  const [xIsPlaying, setIsXPlaying] = useState(true);\n  const [winner, setWinner] = useState(null);\n\n  const onReset = useCallback(() => {\n    setBoard(Array(n * n).fill(null));\n    setIsXPlaying(true);\n    setWinner(null);\n  }, [n]);\n\n  useEffect(() => {\n    onReset();\n  }, [n, m, onReset]);\n\n  if (m > n) {\n    throw Error('Invalid props. `m` must be <= `n`.');\n  }\n\n  function getStatusMessage() {\n    if (winner != null) {\n      return `Player ${winner} wins!`;\n    }\n\n    // All cells have been filled up.\n    if (!board.includes(null)) {\n      return `It's a draw!`;\n    }\n\n    return `Player ${xIsPlaying ? 'X' : 'O'} turn`;\n  }\n\n  return (\n    <div className=\"app\">\n      <div aria-live=\"polite\">{getStatusMessage()}</div>\n      <div\n        className=\"board\"\n        style={{\n          gridTemplateColumns: `repeat(${n}, 1fr)`,\n        }}>\n        {Array(n * n)\n          .fill(null)\n          .map((_, index) => index)\n          .map((cellIndex) => {\n            const turn = xIsPlaying ? 'X' : 'O';\n            return (\n              <Cell\n                key={cellIndex}\n                disabled={\n                  board[cellIndex] != null || winner != null\n                }\n                index={cellIndex}\n                mark={board[cellIndex]}\n                turn={turn}\n                onClick={() => {\n                  const newBoard = board.slice();\n                  newBoard[cellIndex] = turn;\n                  setBoard(newBoard);\n                  setIsXPlaying(!xIsPlaying);\n                  setWinner(\n                    determineWinner(\n                      newBoard,\n                      cellIndex,\n                      n,\n                      m,\n                    ),\n                  );\n                }}\n              />\n            );\n          })}\n      </div>\n      <button\n        onClick={() => {\n          if (winner == null) {\n            // Confirm whether to reset the game.\n            const confirm = window.confirm(\n              'Are you sure you want to reset the game?',\n            );\n            if (!confirm) {\n              return;\n            }\n          }\n\n          onReset();\n        }}>\n        Reset\n      </button>\n    </div>\n  );\n}\n\nfunction determineWinner(board, i, n, m) {\n  const row = Math.floor(i / n);\n  const col = i % n;\n\n  // Get row\n  const rowLine = [];\n  for (let i = 0; i < n; i++) {\n    rowLine.push(row * n + i);\n  }\n\n  // Get column\n  const colLine = [];\n  for (let i = 0; i < n; i++) {\n    colLine.push(i * n + col);\n  }\n\n  const leftToRightDiagonalLine = getLeftToRightDiagonal(\n    i,\n    n,\n  );\n  const rightToLeftDiagonalLine = getRightToLeftDiagonal(\n    i,\n    n,\n  );\n\n  const lines = [\n    rowLine,\n    colLine,\n    leftToRightDiagonalLine,\n    rightToLeftDiagonalLine,\n  ];\n\n  for (const line of lines) {\n    let currentWinner = null;\n    let currentCountInARow = 0;\n    for (const i of line) {\n      if (board[i] == null) {\n        currentWinner = null;\n        currentCountInARow = 0;\n        continue;\n      }\n      if (board[i] === currentWinner) {\n        currentCountInARow++;\n      } else {\n        currentWinner = board[i];\n        currentCountInARow = 1;\n      }\n      if (currentCountInARow >= m) {\n        return currentWinner;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getLeftToRightDiagonal(i, n) {\n  const row = Math.floor(i / n);\n  const col = i % n;\n\n  const stepsToStart = Math.min(col, row);\n  const startRow = row - stepsToStart;\n  const startCol = col - stepsToStart;\n  const line = [];\n\n  for (let i = 0; i < n; i++) {\n    const currentRow = startRow + i;\n    const currentCol = startCol + i;\n    if (currentRow >= n || currentCol >= n) {\n      break;\n    }\n    line.push(currentRow * n + currentCol);\n  }\n\n  return line;\n}\n\nfunction getRightToLeftDiagonal(i, n) {\n  const row = Math.floor(i / n);\n  const col = i % n;\n\n  const stepsToStart = Math.min(n - col - 1, row);\n  const startRow = row - stepsToStart;\n  const startCol = col + stepsToStart;\n  const line = [];\n\n  for (let i = 0; i < n; i++) {\n    const currentRow = startRow + i;\n    const currentCol = startCol - i;\n    if (currentRow >= n || currentCol < 0) {\n      break;\n    }\n    line.push(currentRow * n + currentCol);\n  }\n\n  return line;\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.app {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 400px;\n  margin: 0 auto;\n  row-gap: 16px;\n}\n\n.board {\n  display: grid;\n  width: 100%;\n}\n\n.cell {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  color: #000;\n  font-size: min(48px, 10vw);\n  font-weight: bold;\n  vertical-align: middle;\n  aspect-ratio: 1 / 1;\n}\n\n.cell:not(:disabled) {\n  cursor: pointer;\n}\n\n.cell:not(:disabled):hover {\n  background-color: #fafafa;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var g=Object.create;var l=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var k=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),x=(i,e)=>{for(var r in e)l(i,r,{get:e[r],enumerable:!0})},o=(i,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!b.call(i,a)&&a!==r&&l(i,a,{get:()=>e[a],enumerable:!(s=y(e,a))||s.enumerable});return i};var h=(i,e,r)=>(r=i!=null?g(w(i)):{},o(e||!i||!i.__esModule?l(r,\"default\",{value:i,enumerable:!0}):r,i)),v=i=>o(l({},\"__esModule\",{value:!0}),i);var c=k((M,d)=>{d.exports=_jsx_runtime});var _={};x(_,{default:()=>V});var n=h(c());var t=h(c());function u(i){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Initial Board State\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game board is displayed correctly with N x N empty cells.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message indicates it's player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Marking Cells\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Click on an empty cell.\"}),`\n`,(0,t.jsx)(e.li,{children:'Verify that the cell is marked with an \"X\" and the turn switches to player O.'}),`\n`,(0,t.jsx)(e.li,{children:\"Click on another empty cell.\"}),`\n`,(0,t.jsx)(e.li,{children:'Verify that the second cell is marked with an \"O\" and the turn switches back to player X.'}),`\n`,(0,t.jsx)(e.li,{children:\"Repeat this process for a few more cells to ensure the marks are placed correctly and the turn alternates between players.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Winning Conditions\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Create a winning line for player X or player O by marking M cells in a row, column, or diagonal.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message displays the winning player's message correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that no further marks can be made after the game is won.\"}),`\n`,(0,t.jsx)(e.li,{children:'Click on the \"Reset\" button.'}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the board is cleared and the game restarts with player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Draw Condition\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Fill all the cells on the board without creating a winning line.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message displays a draw message correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that no further marks can be made after the draw.\"}),`\n`,(0,t.jsx)(e.li,{children:'Click on the \"Reset\" button.'}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the board is cleared, and the game restarts with player X's turn.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Accessibility\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Use a screen reader to navigate and interact with the game.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the status message, cell markings, and buttons are announced correctly by the screen reader.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game can be played and reset using only keyboard navigation.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Responsive Design\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Test the game on different screen sizes, such as desktop, tablet, and mobile devices.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that the game board and cells adjust correctly to different screen sizes.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that the game remains playable and visually appealing on smaller screens.\"}),`\n`]}),`\n`]}),`\n`]})]})}function C(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var m=C;function f(i){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",code:\"code\",ul:\"ul\",li:\"li\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tic-tac-toe/react/solution\",children:\"Tic-tac-toe's React solution\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The standard tic-tac-toe game uses N = 3 and M = 3. In general it is a good practice to parameterize the app/components you're building, however the general version of tic-tac-toe takes significantly longer to implement. If you are sure you don't need to build a general version, then it's recommended to stick with the \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/tic-tac-toe/solution\",children:\"basic Tic-tac-toe implementation\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the dimensions of the board is not fixed and can only be determined at runtime, we have to use inline styles to generate the required \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" property value.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Other than the two core pieces of state as per 3 x 3 Tic-tac-toe, we now include a new \",(0,n.jsx)(e.code,{children:\"winner\"}),\" state to track the state of the winning mark of the board. Strictly speaking, the \",(0,n.jsx)(e.code,{children:\"winner\"}),\" is derived state and can be determined by processing the \",(0,n.jsx)(e.code,{children:\"board\"}),\", which is the approach taken by the 3 x 3 version. However, for N x N boards where N and M can be very large, we determine the winner only after every turn and store it in state, which is a more efficient approach as compared to determining on every render.\"]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"determineWinner\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In the 3 x 3 version, we call this function for every render. But for an N x N board, we'll call this function after every turn as a winner can only emerge after a turn.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"determineWinner\"}),\" function takes four parameters: \",(0,n.jsx)(e.code,{children:\"board\"}),\" (the current state of the game board), \",(0,n.jsx)(e.code,{children:\"i\"}),\" (the index of the last marked cell), \",(0,n.jsx)(e.code,{children:\"n\"}),\" (the size of the board), and \",(0,n.jsx)(e.code,{children:\"m\"}),\" (the number of consecutive marks required to win).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It firstly generates four arrays representing the winning \",(0,n.jsx)(e.code,{children:\"lines\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rowLine\"}),\": Contains the indices of all the cells in the same row as the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"colLine\"}),\": Contains the indices of all the cells in the same column as the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"leftToRightDiagonalLine\"}),\": Contains the indices of all the cells in the left-to-right diagonal that includes the last marked cell.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rightToLeftDiagonalLine\"}),\": Contains the indices of all the cells in the right-to-left diagonal that includes the last marked cell.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For each line in \",(0,n.jsx)(e.code,{children:\"lines\"}),\", it then counts if there are \",(0,n.jsx)(e.code,{children:\"m\"}),\" consecutive cells with the same mark and returns the mark if there is, otherwise it returns \",(0,n.jsx)(e.code,{children:\"null\"}),\", indicating there's no winner for the board yet.\"]}),`\n`,(0,n.jsx)(m,{})]})}function j(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(f,i)})):f(i)}var V=j;return v(_);})();\n;return Component;"
}