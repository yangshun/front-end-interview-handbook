{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/progress-bars-ii-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "export default function App() {\n  return (\n    <div>\n      <button>Add</button>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),_=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of b(e))!y.call(r,n)&&n!==t&&i(r,n,{get:()=>e[n],enumerable:!(l=f(e,n))||l.enumerable});return r};var p=(r,e,t)=>(t=r!=null?m(x(r)):{},c(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),q=r=>c(i({},\"__esModule\",{value:!0}),r);var o=j((C,u)=>{u.exports=_jsx_runtime});var k={};_(k,{default:()=>M});var a=p(o());var s=p(o());function d(r){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",img:\"img\"},r.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,s.jsx)(e.a,{href:\"/questions/user-interface/progress-bars\",children:\"Progress Bars\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,s.jsx)(e.p,{children:'Build an app where clicking the \"Add\" button adds progress bars to the page. The progress bars fill up in series, aka the second bar only starts filling up after the first bar is completely filled.'}),`\n`,(0,s.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:'Clicking on the \"Add\" button adds a progress bar to the page.'}),`\n`,(0,s.jsx)(e.li,{children:\"The progress bars fill up gradually in sequence, one at a time. i.e. the second progress bar will only starts filling up after the first progress bar is completely filled up.\"}),`\n`,(0,s.jsx)(e.li,{children:\"Each bar takes approximately 2000ms to completely fill up.\"}),`\n`]}),`\n`,(0,s.jsx)(e.h2,{children:\"Example\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:\"/img/questions/progress-bars-ii/progress-bars-example.png\",alt:\"Progress Bars Example\"})})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,s.jsx)(e,Object.assign({},r,{children:(0,s.jsx)(d,r)})):d(r)}var g=w;function h(r){return(0,a.jsx)(g,{})}function D(r={}){let{wrapper:e}=r.components||{};return e?(0,a.jsx)(e,Object.assign({},r,{children:(0,a.jsx)(h,r)})):h(r)}var M=D;return q(k);})();\n;return Component;"
}