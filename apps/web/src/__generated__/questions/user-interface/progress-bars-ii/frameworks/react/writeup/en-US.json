{
  "skeleton": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var j=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),_=(r,e)=>{for(var s in e)i(r,s,{get:e[s],enumerable:!0})},c=(r,e,s,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of b(e))!y.call(r,n)&&n!==s&&i(r,n,{get:()=>e[n],enumerable:!(l=f(e,n))||l.enumerable});return r};var p=(r,e,s)=>(s=r!=null?m(x(r)):{},c(e||!r||!r.__esModule?i(s,\"default\",{value:r,enumerable:!0}):s,r)),q=r=>c(i({},\"__esModule\",{value:!0}),r);var o=j((w,u)=>{u.exports=_jsx_runtime});var D={};_(D,{default:()=>C});var a=p(o());var t=p(o());function d(r){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",img:\"img\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/progress-bars\",children:\"Progress Bars\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsx)(e.p,{children:'Build an app where clicking the \"Add\" button adds progress bars to the page. The progress bars fill up in series, aka the second bar only starts filling up after the first bar is completely filled.'}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:'Clicking on the \"Add\" button adds a progress bar to the page.'}),`\n`,(0,t.jsx)(e.li,{children:\"The progress bars fill up gradually in sequence, one at a time. i.e. the second progress bar will only starts filling up after the first progress bar is completely filled up.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Each bar takes approximately 2000ms to completely fill up.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Example\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/img/questions/progress-bars-ii/progress-bars-example.png\",alt:\"Progress Bars Example\"})})]})}function M(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(d,r)})):d(r)}var h=M;function g(r){return(0,a.jsx)(h,{})}function B(r={}){let{wrapper:e}=r.components||{};return e?(0,a.jsx)(e,Object.assign({},r,{children:(0,a.jsx)(g,r)})):g(r)}var C=B;return q(D);})();\n;return Component;",
  "solution": "var Component=(()=>{var f=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!x.call(t,o)&&o!==i&&s(t,o,{get:()=>e[o],enumerable:!(l=g(e,o))||l.enumerable});return t};var d=(t,e,i)=>(i=t!=null?f(w(t)):{},c(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),_=t=>c(s({},\"__esModule\",{value:!0}),t);var a=j((M,h)=>{h.exports=_jsx_runtime});var T={};y(T,{default:()=>F});var n=d(a());var r=d(a());function p(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:['Hitting \"Add\" appends a new empty progress bar to the bottom of the list',`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"The first bar starts filling up as soon as it appears.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Can add multiple progress bars, which fill up gradually one after another.\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"If all existing bars are filled up, a newly added bar starts filling up immediately.\"}),`\n`]}),`\n`]}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(p,t)})):p(t)}var u=C;function m(t){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",h3:\"h3\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This solution builds on top of the solution for \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/progress-bars\",children:\"Progress Bars\"}),\", so make sure to check that question's solution first.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The question can be split into two parts: (1) State, (2) Orchestration of Transitions.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"On top of the number of bars that we need, we'll need to know how many of the current bars have been filled up and which bars can start to fill up. We introduce a new numeric variable state called \",(0,n.jsx)(e.code,{children:\"numFilledUpBars\"}),\" to track the number of bars that have been filled up. Any bar that has an index that's greater than \",(0,n.jsx)(e.code,{children:\"numFilledUpBars\"}),\" should not start filling up yet. To know when to increment \",(0,n.jsx)(e.code,{children:\"numFilledUpBars\"}),\", we'll add an \",(0,n.jsx)(e.code,{children:\"onCompleted\"}),\" prop to \",(0,n.jsx)(e.code,{children:\"ProgressBar\"}),\" that fires when a progress bar is full.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Orchestration of Transitions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Using the \",(0,n.jsx)(e.code,{children:\"numFilledUpBars\"}),\" state, we'll determine an \",(0,n.jsx)(e.code,{children:\"isEmpty\"}),\" value to be passed to the \",(0,n.jsx)(e.code,{children:\"ProgressBar\"}),\" as a prop. \",(0,n.jsx)(e.code,{children:\"ProgressBar\"}),\"s that have \",(0,n.jsx)(e.code,{children:\"isEmpty={true}\"}),\" should not be animating yet.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can use the \",(0,n.jsx)(e.code,{children:\"onTransitionEnd\"}),\" prop on React DOM elements to detect when a CSS transition is complete, and firing \",(0,n.jsx)(e.code,{children:\"onCompleted\"}),\" prop. Within the main \",(0,n.jsx)(e.code,{children:\"App\"}),\", the \",(0,n.jsx)(e.code,{children:\"numFilledUpBars\"}),\" will be incremented whenever an \",(0,n.jsx)(e.code,{children:\"onCompleted\"}),\" callback is triggered.\"]}),`\n`,(0,n.jsx)(u,{})]})}function B(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var F=B;return _(T);})();\n;return Component;"
}