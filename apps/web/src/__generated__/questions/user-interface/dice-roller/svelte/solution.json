{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/dice-roller-svelte-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import Dice from './Dice.svelte';\n\n  const NUMBER_OF_FACES = 6;\n  const MIN_NUMBER_OF_DICE = 1;\n  const MAX_NUMBER_OF_DICE = 12;\n\n  function getRandomRollDice(numberOfDice) {\n    return Array.from({ length: numberOfDice }, () =>\n      Math.floor(Math.random() * NUMBER_OF_FACES) + 1\n    );\n  }\n\n  let rolledDice = [];\n</script>\n\n<div class=\"wrapper\">\n  <!-- To prevent a page reload. -->\n  <form\n    on:submit|preventDefault={(event) => {\n      const data = new FormData(event.target);\n      // Convert the input value to a number.\n      const numberOfDice = +data.get('dice-count');\n      rolledDice = getRandomRollDice(numberOfDice);\n    }}\n    class=\"dice-form\">\n    <div>\n      <label for=\"dice-input\">Number of dice</label>\n      <input\n        id=\"dice-input\"\n        name=\"dice-count\"\n        required\n        type=\"number\"\n        min={MIN_NUMBER_OF_DICE}\n        max={MAX_NUMBER_OF_DICE} />\n    </div>\n    <button type=\"submit\">Roll</button>\n  </form>\n\n  {#if rolledDice.length > 0}\n    <div class=\"dice-list\" role=\"status\" aria-live=\"polite\">\n      {#each rolledDice as value, index (index)}\n        <Dice {value} />\n      {/each}\n\n      <!-- Announced by screen readers.-->\n      <div class=\"sr-only\">\n        Roll results: {rolledDice.join(', ')}\n      </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .wrapper {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    gap: 48px;\n    padding-top: 16px;\n  }\n\n  .dice-form {\n    display: flex;\n    align-items: end;\n    gap: 16px;\n  }\n\n  .dice-form label {\n    display: block;\n    font-size: 12px;\n    margin-bottom: 8px;\n  }\n\n  .dice-form input {\n    width: 100%;\n  }\n\n  .dice-list {\n    background-color: #eaeaea;\n    border-radius: 24px;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 16px;\n    flex-wrap: wrap;\n    padding: 16px;\n  }\n\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    border: 0;\n  }\n</style>\n"
    },
    "/src/Dice.svelte": {
      "code": "<script>\n  const DICE_FACE_DOT_POSITIONS = {\n    1: ['dot--center'],\n    2: ['dot--top-right', 'dot--bottom-left'],\n    3: [\n      'dot--top-right',\n      'dot--center',\n      'dot--bottom-left',\n    ],\n    4: [\n      'dot--top-left',\n      'dot--top-right',\n      'dot--bottom-left',\n      'dot--bottom-right',\n    ],\n    5: [\n      'dot--top-left',\n      'dot--top-right',\n      'dot--center',\n      'dot--bottom-left',\n      'dot--bottom-right',\n    ],\n    6: [\n      'dot--top-left',\n      'dot--top-right',\n      'dot--center-left',\n      'dot--center-right',\n      'dot--bottom-left',\n      'dot--bottom-right',\n    ],\n  };\n\n  export let value;\n</script>\n\n<div class=\"dice\">\n  <div class=\"dots\">\n    {#each DICE_FACE_DOT_POSITIONS[value] as dotPosition (dotPosition)}\n      <div class={`dot ${dotPosition}`} />\n    {/each}\n  </div>\n</div>\n\n<style>\n  .dice {\n    --dice-size: 64px;\n\n    width: var(--dice-size);\n    height: var(--dice-size);\n\n    background-color: #fff;\n    box-sizing: border-box;\n    border: 1px solid #000;\n    border-radius: 8px;\n    padding: 8px;\n  }\n\n  .dots {\n    position: relative;\n    height: 100%;\n  }\n\n  .dot {\n    --dot-size: 12px;\n\n    position: absolute;\n    width: var(--dot-size);\n    height: var(--dot-size);\n    background-color: #000;\n    border-radius: 100%;\n  }\n\n  .dot--center {\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .dot--top-left {\n    top: 0;\n    left: 0;\n  }\n\n  .dot--top-right {\n    top: 0;\n    right: 0;\n  }\n\n  .dot--bottom-left {\n    bottom: 0;\n    left: 0;\n  }\n\n  .dot--bottom-right {\n    bottom: 0;\n    right: 0;\n  }\n\n  .dot--center-left {\n    top: 50%;\n    transform: translateY(-50%);\n    left: 0;\n  }\n\n  .dot--center-right {\n    top: 50%;\n    transform: translateY(-50%);\n    right: 0;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var y=Object.create;var d=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var C=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),T=(n,e)=>{for(var l in e)d(n,l,{get:e[l],enumerable:!0})},u=(n,e,l,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of _(e))!D.call(n,c)&&c!==l&&d(n,c,{get:()=>e[c],enumerable:!(h=j(e,c))||h.enumerable});return n};var s=(n,e,l)=>(l=n!=null?y(M(n)):{},u(e||!n||!n.__esModule?d(l,\"default\",{value:n,enumerable:!0}):l,n)),F=n=>u(d({},\"__esModule\",{value:!0}),n);var a=C((S,m)=>{m.exports=_jsx_runtime});var A={};T(A,{default:()=>k});var o=s(a());var t=s(a());function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",ol:\"ol\",li:\"li\",h3:\"h3\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"The solution can be broken down into a few parts:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Collecting form data.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Generating dice values.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Displaying the dice values.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsx)(e.p,{children:\"The only state value we need for this dice roller is the values of the rolled dice, which can be represented as an array of values that range from 1 to 6.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Collecting form data\"}),`\n`,(0,t.jsx)(e.p,{children:\"Since the transfer of data from the form is one-directional, a basic HTML form will suffice.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"By using \",(0,t.jsx)(e.code,{children:'<input type=\"number\" required=\"true\" min=\"1\" max=\"12\" />'}),\", we ensure only integer values can be entered and leverage HTML validation so that the minimum value of the fields is 1 and maximum is 12. Empty fields are also prevented via the \",(0,t.jsx)(e.code,{children:\"required\"}),\" attribute.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Generating dice values\"}),`\n`,(0,t.jsx)(e.p,{children:\"With the number of dice obtained from the form, we can write a function to generate the required values.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To generate a value from 1 to 6, we can use \",(0,t.jsx)(e.code,{children:\"Math.floor(Math.random() * 6) + 1,\"}),\". This randomization will be repeated for each dice.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Displaying the dice values\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Observe that there are 7 different positions the dots can take on a 6-sided dice. By using \",(0,t.jsx)(e.code,{children:\"position: absolute\"}),\" and the appropriate \",(0,t.jsx)(e.code,{children:\"top\"}),\"/\",(0,t.jsx)(e.code,{children:\"left\"}),\"/\",(0,t.jsx)(e.code,{children:\"right\"}),\"/\",(0,t.jsx)(e.code,{children:\"bottom\"}),\" set to 0, the corner dots can be displayed correctly. The dots on the center row will require an additional negative translation transform to make them perfectly center.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Each dot is independent of the others and multiple dots can be combined to display the desired visual result for a dice value.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Lastly, we create an object that maps the dice value to the dot configuration classes. Value of 1 will require the center dot only, a value of 2 will require the top right and bottom left dots, etc.\"})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(f,n)})):f(n)}var p=L;var i=s(a());function g(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Number of dice form\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Invalid values (empty, negative, decimals, bigger than 12) are not allowed.\"}),`\n`,(0,i.jsx)(e.li,{children:'Pressing the \"Roll\" button calls the random generator function with the correct value.'}),`\n`,(0,i.jsxs)(e.li,{children:[\"Form can be submitted by hitting \",(0,i.jsx)(\"kbd\",{children:\"Enter\"}),\" while in the \",(0,i.jsx)(e.code,{children:\"<input>\"}),\" field.\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Dice generation\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Generated values are between 1 to 6 inclusive. Ensure that it is not possible to generate 0.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The correct number of values are generated.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Display\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Each row should contain up to 3 dice.\"}),`\n`,(0,i.jsx)(e.li,{children:\"If there are more than 3 dice, the other dice are wrapped to the next row(s).\"}),`\n`,(0,i.jsx)(e.li,{children:\"Dot positioning on each dice is correct for each side.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Accessibility\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Dice rolls results are announced to screen readers.\"}),`\n`]}),`\n`]}),`\n`]})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(g,n)})):g(n)}var b=O;var r=s(a());function w(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Add \",(0,r.jsx)(e.code,{children:\"<label>\"}),\"s for the \",(0,r.jsx)(e.code,{children:\"<input>\"}),\"s and link them together using \",(0,r.jsx)(e.code,{children:'<label for=\"...\">'}),\" and \",(0,r.jsx)(e.code,{children:'<input id=\"...\">'}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Use \",(0,r.jsx)(e.code,{children:'role=\"status\"'}),\" and \",(0,r.jsx)(e.code,{children:'aria-live=\"polite\"'}),\" on the HTML element displaying the dice. A hidden element is also rendered within so that screen readers will announce the result when a new dice roll is performed.\"]}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(w,n)})):w(n)}var v=X;function x(n){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(b,{}),`\n`,(0,o.jsx)(v,{})]})}function q(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(x,n)})):x(n)}var k=q;return F(A);})();\n;return Component;"
}