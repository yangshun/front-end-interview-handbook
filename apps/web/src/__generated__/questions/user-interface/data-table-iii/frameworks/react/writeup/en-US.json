{
  "skeleton": "var Component=(()=>{var b=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),D=(n,e)=>{for(var a in e)i(n,a,{get:e[a],enumerable:!0})},l=(n,e,a,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!T.call(n,o)&&o!==a&&i(n,o,{get:()=>e[o],enumerable:!(c=g(e,o))||c.enumerable});return n};var d=(n,e,a)=>(a=n!=null?b(y(n)):{},l(e||!n||!n.__esModule?i(a,\"default\",{value:n,enumerable:!0}):a,n)),j=n=>l(i({},\"__esModule\",{value:!0}),n);var s=x((M,h)=>{h.exports=_jsx_runtime});var k={};D(k,{default:()=>_});var r=d(s());var t=d(s());function u(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",code:\"code\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is a follow up to the \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/data-table-ii\",children:\"Data Table II\"}),\" question, you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/data-table-ii\",children:\"Data Table II\"}),\", we built a users data table that displays users in a paginated format and allows for sorting rows by specific columns in both ascending and descending order.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"However, the \",(0,t.jsx)(e.code,{children:\"DataTable\"}),\" component is tightly coupled to the user data it is meant to be rendered and cannot be used for other types of data.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Generalize the component to take in the data and any necessary configuration so that the \",(0,t.jsx)(e.code,{children:\"DataTable\"}),\" component can render any kinds of data.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(e.code,{children:\"DataTable\"}),\" component should not contain any logic that is specific to users.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Modify the \",(0,t.jsx)(e.code,{children:\"DataTable\"}),\" component to take in any props/attributes necessary to be generalized.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"The appearance and functionality of the end result should remain \\u2013 it should look the same and still allow for pagination and sorting.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"To assist in your testing, another data set (\",(0,t.jsx)(e.code,{children:\"src/data/houses.json\"}),\") is being provided for you to test your generalized component with.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Hint\"}),\": Have a look at \",(0,t.jsx)(e.a,{href:\"https://tanstack.com/table/\",children:\"TanStack Table\"}),\" to get a sense of the configuration approach and available options for production-ready data table libraries.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The skeleton code uses the solution of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/data-table-ii\",children:\"Data Table II\"}),\", but you are free to use your own solution as a starting point.\"]})]})}function w(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var p=w;function f(n){return(0,r.jsx)(p,{})}function I(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(f,n)})):f(n)}var _=I;return j(k);})();\n;return Component;",
  "solution": "var Component=(()=>{var w=Object.create;var c=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var i in e)c(t,i,{get:e[i],enumerable:!0})},h=(t,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of y(e))!v.call(t,r)&&r!==i&&c(t,r,{get:()=>e[r],enumerable:!(d=x(e,r))||d.enumerable});return t};var l=(t,e,i)=>(i=t!=null?w(j(t)):{},h(e||!t||!t.__esModule?c(i,\"default\",{value:t,enumerable:!0}):i,t)),D=t=>h(c({},\"__esModule\",{value:!0}),t);var s=_((q,u)=>{u.exports=_jsx_runtime});var U={};T(U,{default:()=>C});var o=l(s());var n=l(s());function f(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/data-table-ii/solution\",children:\"Data Table II's solution\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"While a refactoring question will probably not be asked verbatim during interviews, there is a lot of learning value from this exercise.\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can also build your data tables in a similar fashion from the start so that it can be easily extended for the new requirements.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Decoupling the component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Notice that the header columns have already been declared as an array. We can use that as a base. Let's look at which parts of the \",(0,n.jsx)(e.code,{children:\"DataTable\"}),\" are still coupled to user data:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"sortUsers\"}),\" function\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"paginateUsers\"}),\" function\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Rendering table cells\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"An important concept to be aware of in order to refactor is first-class functions \\u2013 the idea of writing functions as variables to be passed around and called from elsewhere. This enables data-specific logic to live outside of the \",(0,n.jsx)(e.code,{children:\"DataTable\"}),\" component.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"sortUsers\"}),\" function\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"sortUsers\"}),\" function is extremely coupled to the user data. However, upon a closer look, notice that the branches in the function correspond to each column and the only unique thing about each column is the comparator function.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can define a comparator function for each column and have the \",(0,n.jsx)(e.code,{children:\"sortData\"}),\" function (renamed from \",(0,n.jsx)(e.code,{children:\"sortUsers\"}),\") call into the column's comparator function. The comparator function returns a number that is used to determine the relative position of two items in the data array. Each column can define custom sorting logic within it, be it comparing numbers or strings.\"]}),`\n`,(0,n.jsxs)(e.h3,{children:[(0,n.jsx)(e.code,{children:\"paginateUsers\"}),\" function\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This function is not coupled to user data at all. It does not care about the shape of the data, only the total size and the page size. Generalizing this function is straightforward.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering table cells\"}),`\n`,(0,n.jsx)(e.p,{children:\"At the current stage, rendering each row's data is straightforward \\u2013 just textual/numerical data that needs no special formatting. However, in future there could be other types of data like images, or special formatting requirements.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Like the comparator function, a \",(0,n.jsx)(e.code,{children:\"renderCell()\"}),\" first-class function can be defined for each column, that determines how to render the cell data for that column.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Extracting the data and columns and configuration\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that we have managed to generalize the necessary portions of \",(0,n.jsx)(e.code,{children:\"DataTable\"}),\", we can move the data and columns out of the component and pass them in as props.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"If the users data contains a new field, we simply have to add in a new item into the columns configuration to enable displaying within the table and sorting by that column.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To demonstrate the flexibility of the \",(0,n.jsx)(e.code,{children:\"DataTable\"}),\" component, we have also used it to render houses data.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Follow up\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we have a generalized data table that supports paginating and sorting, take a moment to consider how the following features can be implemented:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Filtering on each column/field\"}),`\n`,(0,n.jsx)(e.li,{children:\"Fetching sorted, paginated, and filtered data from a remote API\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Have a look at \",(0,n.jsx)(e.a,{href:\"https://tanstack.com/table/\",children:\"TanStack Table\"}),\" to get a sense of what features goes into production-ready data table libraries and how complex data tables can be.\"]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var m=k;var a=l(s());function p(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Ensure that all the existing features still work as usual.\"}),`\n`,(0,a.jsx)(e.li,{children:\"Test with housing data and check that the table can be rendered, pagination and sorting functionality works correctly.\"}),`\n`]})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(p,t)})):p(t)}var g=F;function b(t){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(m,{}),`\n`,(0,o.jsx)(g,{})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(b,t)})):b(t)}var C=M;return D(U);})();\n;return Component;"
}