{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.vue\"],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/birth-year-histogram-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { computed, onMounted, ref } from 'vue';\nconst COUNT = 200;\nconst MIN = 1950;\nconst MAX = 2019;\nconst BUCKET_SIZE = 10;\nconst Y_AXIS_SCALE = 10;\n\n// Extract out the fetching of numbers.\nasync function fetchYearsData() {\n  const response = await fetch(\n    `https://www.random.org/integers/?num=${COUNT}&min=${MIN}&max=${MAX}&col=1&base=10&format=plain&rnd=new`,\n  );\n\n  const numbersString = await response.text();\n  return (\n    numbersString\n      .split('\\n')\n      .filter(Boolean)\n      // Converts strings into numbers.\n      .map((number) => +number)\n  );\n}\n\n// Group array of years into decade buckets.\nfunction groupIntoBuckets(years) {\n  const frequency = {};\n\n  years.forEach((year) => {\n    const bucket =\n      Math.floor(year / BUCKET_SIZE) * BUCKET_SIZE;\n    frequency[bucket] ||= 0; // Initialize to 0 if undefined or falsy\n    frequency[bucket]++;\n  });\n\n  return frequency;\n}\n\nconst bucketFrequency = ref({});\n\nasync function fetchData() {\n  const yearsData = await fetchYearsData();\n  bucketFrequency.value = groupIntoBuckets(yearsData);\n}\n\nonMounted(() => {\n  fetchData();\n});\n\nconst maxBucketFrequency = computed(() =>\n  Math.max(0, ...Object.values(bucketFrequency.value)),\n);\n\nconst maxYAxisValue = computed(() =>\n  Math.min(\n    Math.ceil(maxBucketFrequency.value / Y_AXIS_SCALE) *\n      Y_AXIS_SCALE,\n    COUNT,\n  ),\n);\n\nconst bucketLabels = Array.from({\n  length: Math.ceil((MAX - MIN) / BUCKET_SIZE),\n}).map((_, index) => MIN + index * BUCKET_SIZE);\n</script>\n\n<template>\n  <div class=\"wrapper\">\n    <div class=\"chart\">\n      <div class=\"chart__y-axis\">\n        <div class=\"chart__y-axis__items\">\n          <div\n            v-for=\"value in maxYAxisValue / Y_AXIS_SCALE\"\n            :key=\"value\"\n            class=\"chart__y-axis__item\">\n            {{ value * Y_AXIS_SCALE }}\n          </div>\n        </div>\n        <div class=\"chart__y-axis__zero\">0</div>\n      </div>\n      <div class=\"chart__main\">\n        <div class=\"chart__main__bars\">\n          <div\n            v-for=\"bucket in bucketLabels\"\n            :key=\"bucket\"\n            class=\"chart__main__bars__item\"\n            :style=\"{\n              height: `${\n                ((bucketFrequency[bucket] ?? 0) /\n                  maxYAxisValue) *\n                100\n              }%`,\n            }\" />\n        </div>\n        <div class=\"chart__x-axis\">\n          <div\n            v-for=\"bucket in bucketLabels\"\n            :key=\"bucket\"\n            class=\"chart__x-axis__item\">\n            {{ bucket }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <button @click=\"fetchData\">Refresh</button>\n  </div>\n</template>\n\n<style>\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  padding: 16px 0;\n}\n\n.chart {\n  --chart-width: 100%;\n  --chart-height: 300px;\n  --axis-color: #000;\n  --bar-color: rebeccapurple;\n  --bars-gap: 16px;\n\n  display: flex;\n  max-width: 600px;\n  width: var(--chart-width);\n  height: var(--chart-height);\n}\n\n.chart__y-axis {\n  width: 40px;\n  display: flex;\n  flex-direction: column;\n}\n\n.chart__y-axis__items {\n  display: flex;\n  flex-direction: column-reverse;\n  height: 100%;\n  border-right: 1px solid var(--axis-color);\n  margin-bottom: 8px;\n  align-items: center;\n}\n\n.chart__y-axis__item {\n  flex-grow: 1;\n  transform: translateY(-8px);\n}\n\n.chart__y-axis__zero {\n  text-align: center;\n  transform: translateY(-16px);\n}\n\n.chart__main {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.chart__main__bars {\n  display: flex;\n  flex-grow: 1;\n  align-items: flex-end;\n  border-bottom: 1px solid var(--axis-color);\n  gap: var(--bars-gap);\n  padding: 0 var(--bars-gap);\n}\n\n.chart__main__bars__item {\n  background-color: var(--bar-color);\n  flex-grow: 1;\n}\n\n.chart__x-axis {\n  display: flex;\n  gap: var(--bars-gap);\n  justify-content: space-around;\n  padding: 0 var(--bars-gap);\n}\n\n.chart__x-axis__item {\n  flex-grow: 1;\n  flex-basis: 0%;\n  text-align: center;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n  margin: 0;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}