{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/birthyear-histogram-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useState } from 'react';\n\nconst COUNT = 200;\nconst MIN = 1950;\nconst MAX = 2019;\nconst BUCKET_SIZE = 10;\nconst Y_AXIS_SCALE = 10;\n\n// Extract out the fetching of numbers.\nasync function fetchYearsData() {\n  const response = await fetch(\n    `https://www.random.org/integers/?num=${COUNT}&min=${MIN}&max=${MAX}&col=1&base=10&format=plain&rnd=new`,\n  );\n\n  const numbersString = await response.text();\n  return (\n    numbersString\n      .split('\\n')\n      .filter(Boolean)\n      // Converts strings into numbers.\n      .map((number) => +number)\n  );\n}\n\n// Group array of years into decade buckets.\nfunction groupIntoBuckets(years) {\n  const frequency = {};\n\n  years.forEach((year) => {\n    const bucket =\n      Math.floor(year / BUCKET_SIZE) * BUCKET_SIZE;\n    frequency[bucket] ||= 0; // Initialize to 0 if undefined or falsy\n    frequency[bucket]++;\n  });\n\n  return frequency;\n}\n\nexport default function App() {\n  // Object of year bucket to number of data points in that bucket.\n  const [bucketFrequency, setBucketFrequency] = useState(\n    {},\n  );\n\n  async function fetchData() {\n    const yearsData = await fetchYearsData();\n    const frequency = groupIntoBuckets(yearsData);\n\n    setBucketFrequency(frequency);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const maxBucketFrequency = Math.max(\n    0,\n    ...Object.values(bucketFrequency),\n  );\n  const maxYAxisValue = Math.min(\n    Math.ceil(maxBucketFrequency / Y_AXIS_SCALE) *\n      Y_AXIS_SCALE,\n    COUNT,\n  );\n\n  const bucketLabels = Array.from({\n    length: Math.ceil((MAX - MIN) / BUCKET_SIZE),\n  }).map((_, index) => MIN + index * BUCKET_SIZE);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"chart\">\n        <div className=\"chart__y-axis\">\n          <div className=\"chart__y-axis__items\">\n            {Array.from({\n              length: maxYAxisValue / Y_AXIS_SCALE,\n            }).map((_, index) => (\n              <div\n                key={index}\n                className=\"chart__y-axis__item\">\n                {(index + 1) * Y_AXIS_SCALE}\n              </div>\n            ))}\n          </div>\n          <div className=\"chart__y-axis__zero\">0</div>\n        </div>\n        <div className=\"chart__main\">\n          <div className=\"chart__main__bars\">\n            {bucketLabels.map((bucket) => (\n              <div\n                key={bucket}\n                className=\"chart__main__bars__item\"\n                style={{\n                  height: `${\n                    ((bucketFrequency[bucket] ?? 0) /\n                      maxYAxisValue) *\n                    100\n                  }%`,\n                }}\n              />\n            ))}\n          </div>\n          <div className=\"chart__x-axis\">\n            {bucketLabels.map((bucket) => (\n              <div\n                className=\"chart__x-axis__item\"\n                key={bucket}>\n                {bucket}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <button onClick={fetchData}>Refresh</button>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n  margin: 0;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  padding: 16px 0;\n}\n\n.chart {\n  --chart-width: 100%;\n  --chart-height: 300px;\n  --axis-color: #000;\n  --bar-color: rebeccapurple;\n  --bars-gap: 16px;\n\n  display: flex;\n  max-width: 600px;\n  width: var(--chart-width);\n  height: var(--chart-height);\n}\n\n.chart__y-axis {\n  width: 40px;\n  display: flex;\n  flex-direction: column;\n}\n\n.chart__y-axis__items {\n  display: flex;\n  flex-direction: column-reverse;\n  height: 100%;\n  border-right: 1px solid var(--axis-color);\n  margin-bottom: 8px;\n  align-items: center;\n}\n\n.chart__y-axis__item {\n  flex-grow: 1;\n  transform: translateY(-8px);\n}\n\n.chart__y-axis__zero {\n  text-align: center;\n  transform: translateY(-16px);\n}\n\n.chart__main {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.chart__main__bars {\n  display: flex;\n  flex-grow: 1;\n  align-items: flex-end;\n  border-bottom: 1px solid var(--axis-color);\n  gap: var(--bars-gap);\n  padding: 0 var(--bars-gap);\n}\n\n.chart__main__bars__item {\n  background-color: var(--bar-color);\n  flex-grow: 1;\n}\n\n.chart__x-axis {\n  display: flex;\n  gap: var(--bars-gap);\n  justify-content: space-around;\n  padding: 0 var(--bars-gap);\n}\n\n.chart__x-axis__item {\n  flex-grow: 1;\n  flex-basis: 0%;\n  text-align: center;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}