{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/birth-year-histogram-svelte-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import { onMount } from 'svelte';\n  const COUNT = 200;\n  const MIN = 1950;\n  const MAX = 2019;\n  const BUCKET_SIZE = 10;\n  const Y_AXIS_SCALE = 10;\n\n  // Extract out the fetching of numbers.\n  async function fetchYearsData() {\n    const response = await fetch(\n      `https://www.random.org/integers/?num=${COUNT}&min=${MIN}&max=${MAX}&col=1&base=10&format=plain&rnd=new`,\n    );\n\n    const numbersString = await response.text();\n    return (\n      numbersString\n        .split('\\n')\n        .filter(Boolean)\n        // Converts strings into numbers.\n        .map((number) => +number)\n    );\n  }\n\n  // Group array of years into decade buckets.\n  function groupIntoBuckets(years) {\n    const frequency = {};\n\n    years.forEach((year) => {\n      const bucket =\n        Math.floor(year / BUCKET_SIZE) * BUCKET_SIZE;\n      frequency[bucket] ||= 0; // Initialize to 0 if undefined or falsy\n      frequency[bucket]++;\n    });\n\n    return frequency;\n  }\n\n  let bucketFrequency = {};\n\n  async function fetchData() {\n    const yearsData = await fetchYearsData();\n    bucketFrequency = groupIntoBuckets(yearsData);\n  }\n\n  onMount(() => {\n    fetchData();\n  });\n\n  $: maxBucketFrequency = Math.max(\n    0,\n    ...Object.values(bucketFrequency),\n  );\n\n  $: maxYAxisValue = Math.min(\n    Math.ceil(maxBucketFrequency / Y_AXIS_SCALE) *\n      Y_AXIS_SCALE,\n    COUNT,\n  );\n\n  const bucketLabels = Array.from({\n    length: Math.ceil((MAX - MIN) / BUCKET_SIZE),\n  }).map((_, index) => MIN + index * BUCKET_SIZE);\n</script>\n\n<div class=\"wrapper\">\n  <div class=\"chart\">\n    <div class=\"chart__y-axis\">\n      <div class=\"chart__y-axis__items\">\n        {#each { length: maxYAxisValue / Y_AXIS_SCALE } as _, index (index)}\n          <div key={index} class=\"chart__y-axis__item\">\n            {(index + 1) * Y_AXIS_SCALE}\n          </div>\n        {/each}\n      </div>\n      <div class=\"chart__y-axis__zero\">0</div>\n    </div>\n\n    <div class=\"chart__main\">\n      <div class=\"chart__main__bars\">\n        {#each bucketLabels as bucket (bucket)}\n          <div\n            class=\"chart__main__bars__item\"\n            style:height={`${\n              ((bucketFrequency[bucket] ?? 0) /\n                maxYAxisValue) *\n              100\n            }%`} />\n        {/each}\n      </div>\n\n      <div class=\"chart__x-axis\">\n        {#each bucketLabels as bucket (bucket)}\n          <div class=\"chart__x-axis__item\">\n            {bucket}\n          </div>\n        {/each}\n      </div>\n    </div>\n  </div>\n\n  <button on:click={fetchData}>Refresh</button>\n</div>\n\n<style>\n  .wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 16px;\n    padding: 16px 0;\n  }\n\n  .chart {\n    --chart-width: 100%;\n    --chart-height: 300px;\n    --axis-color: #000;\n    --bar-color: rebeccapurple;\n    --bars-gap: 16px;\n\n    display: flex;\n    max-width: 600px;\n    width: var(--chart-width);\n    height: var(--chart-height);\n  }\n\n  .chart__y-axis {\n    width: 40px;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .chart__y-axis__items {\n    display: flex;\n    flex-direction: column-reverse;\n    height: 100%;\n    border-right: 1px solid var(--axis-color);\n    margin-bottom: 8px;\n    align-items: center;\n  }\n\n  .chart__y-axis__item {\n    flex-grow: 1;\n    transform: translateY(-8px);\n  }\n\n  .chart__y-axis__zero {\n    text-align: center;\n    transform: translateY(-16px);\n  }\n\n  .chart__main {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .chart__main__bars {\n    display: flex;\n    flex-grow: 1;\n    align-items: flex-end;\n    border-bottom: 1px solid var(--axis-color);\n    gap: var(--bars-gap);\n    padding: 0 var(--bars-gap);\n  }\n\n  .chart__main__bars__item {\n    background-color: var(--bar-color);\n    flex-grow: 1;\n  }\n\n  .chart__x-axis {\n    display: flex;\n    gap: var(--bars-gap);\n    justify-content: space-around;\n    padding: 0 var(--bars-gap);\n  }\n\n  .chart__x-axis__item {\n    flex-grow: 1;\n    flex-basis: 0%;\n    text-align: center;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n  margin: 0;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var o=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},d=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of w(e))!j.call(t,s)&&s!==r&&o(t,s,{get:()=>e[s],enumerable:!(c=y(e,s))||c.enumerable});return t};var l=(t,e,r)=>(r=t!=null?x(v(t)):{},d(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),D=t=>d(o({},\"__esModule\",{value:!0}),t);var h=_((q,u)=>{u.exports=_jsx_runtime});var X={};T(X,{default:()=>C});var i=l(h());var n=l(h());function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",ol:\"ol\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\",ul:\"ul\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"With most data fetching and display problems, the solution can be broken down into:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Fetching data.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Processing the data, if necessary.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Displaying the data.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Fetching data\"}),`\n`,(0,n.jsx)(e.p,{children:\"The API end point returns a list of years in a text format:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`1996\n1966\n1973\n1975\n1985\n2006\n2004\n...\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"It's returned as a single string, so we need to split the data up into an array and turn them into numbers.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Processing the data\"}),`\n`,(0,n.jsx)(e.p,{children:\"The requirement is to show a histogram of birth years grouped by decades. Now that we have a list of numbers, we need to do some processing with them to turn a year value into it's corresponding bucket. E.g. 1955 -> 1950, 1967 -> 1960.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This can be done via:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Dividing by 10, removing the decimal place with \",(0,n.jsx)(e.code,{children:\"Math.floor()\"}),\", and multiplying by 10 again.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Modulo by 10 and remove the result.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Both approaches will correctly calculate the decade for a year.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is done for every year value and we can use an object to tally the count for each decade bucket.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Displaying the data\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is possibly the trickiest part of this problem as we have to draw bars that are proportionate to the value it's supposed to represent. The bucket with the biggest value will be the tallest bar.\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can divide the histogram into three rectangles:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Y-axis: This renders the count for each bucket. Since there are 200 data points spread across 7 decades, there's an average of 30+ points for each bucket, and a scale of 10 points would give enough details to be useful. The maximum y-axis value is the maximum bucket count value rounded up to the nearest 10.\"}),`\n`,(0,n.jsx)(e.li,{children:\"X-axis: This renders the decade labels, spaced apart.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Data series: This renders the vertical bars, spaced apart. We also need to draw the left and bottom borders for the lines on the y-axis and x-axis respectively. The vertical bars are sized using a percentage height of the maximum y-axis value.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Note that the space between the x-axis and data series should be consistent so that the labels of the x-axis are directly aligned with the data bars.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Race conditions\"}),`\n`,(0,n.jsx)(e.p,{children:\"As with all data fetching questions, take care of handling race conditions and handle errors if the request fails.\"})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var m=M;var a=l(h());function b(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Data should be fetched from an endpoint\"}),`\n`,(0,a.jsxs)(e.li,{children:[\"Data should be displayed in a histogram\",`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Axes should be labeled with the correct numbers\"}),`\n`,(0,a.jsx)(e.li,{children:\"Bars should be rendered correctly\"}),`\n`]}),`\n`]}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(b,t)})):b(t)}var g=k;function f(t){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(m,{}),`\n`,(0,i.jsx)(g,{})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var C=F;return D(X);})();\n;return Component;"
}