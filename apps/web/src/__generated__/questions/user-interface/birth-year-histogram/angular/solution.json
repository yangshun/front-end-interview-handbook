{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/birth-year-histogram-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"wrapper\">\n  <div\n    class=\"chart\"\n    *ngIf=\"bucketFrequency$ | async as data\">\n    <div class=\"chart__y-axis\">\n      <div class=\"chart__y-axis__items\">\n        <div\n          *ngFor=\"\n            let yValue of data.maxYAxisValue | yAxisValues\n          \"\n          class=\"chart__y-axis__item\">\n          {{ yValue }}\n        </div>\n      </div>\n      <div class=\"chart__y-axis__zero\">0</div>\n    </div>\n    <div class=\"chart__main\">\n      <div class=\"chart__main__bars\">\n        <div\n          *ngFor=\"let bucket of bucketLabels\"\n          class=\"chart__main__bars__item\"\n          [style.height]=\"\n            (data.frequency[bucket]\n              | barHeight: data.maxYAxisValue) + '%'\n          \"></div>\n      </div>\n      <div class=\"chart__x-axis\">\n        <div\n          *ngFor=\"let bucket of bucketLabels\"\n          class=\"chart__x-axis__item\">\n          {{ bucket }}\n        </div>\n      </div>\n    </div>\n  </div>\n  <button (click)=\"refreshData()\">Refresh</button>\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  OnInit,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { DataService } from './data.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Observable, ReplaySubject } from 'rxjs';\n\nconst Y_AXIS_SCALE: number = 10;\n\nexport interface YearBucket {\n  [bucket: number]: number;\n}\n\nexport interface ChartData {\n  frequency: YearBucket;\n  maxYAxisValue: number;\n}\n\n@Pipe({\n  name: 'yAxisValues',\n})\nexport class YAxisValuesPipe implements PipeTransform {\n  transform(maxYAxisValue: number): number[] {\n    return Array.from(\n      { length: maxYAxisValue / Y_AXIS_SCALE + 1 },\n      (_, i) => i * Y_AXIS_SCALE,\n    );\n  }\n}\n\n@Pipe({\n  name: 'barHeight',\n})\nexport class BarHeightPipe implements PipeTransform {\n  transform(count: number, maxYAxisValue: number): number {\n    return (count / maxYAxisValue) * 100;\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  private readonly BUCKET_SIZE = 10;\n  private readonly COUNT = 200;\n  private readonly dataService = inject(DataService);\n\n  readonly buttonClickEvent$ = new ReplaySubject(1);\n\n  bucketLabels: number[] = Array.from({\n    length: Math.ceil((2019 - 1950) / this.BUCKET_SIZE),\n  }).map((_, index) => 1950 + index * this.BUCKET_SIZE);\n\n  bucketFrequency$!: Observable<ChartData>;\n\n  ngOnInit() {\n    this.refreshData();\n    this.bucketFrequency$ = this.buttonClickEvent$.pipe(\n      switchMap(() => this.dataService.fetchYearsData()),\n      map((yearsData: number[]) =>\n        this.groupIntoBuckets(yearsData),\n      ),\n      map((frequency: YearBucket) => {\n        const maxBucketFrequency: number = Math.max(\n          0,\n          ...Object.values(frequency),\n        );\n        const maxYAxisValue: number = Math.min(\n          Math.ceil(maxBucketFrequency / Y_AXIS_SCALE) *\n            Y_AXIS_SCALE,\n          this.COUNT,\n        );\n        return { frequency, maxYAxisValue };\n      }),\n    );\n  }\n\n  refreshData() {\n    this.buttonClickEvent$.next(true);\n  }\n\n  private groupIntoBuckets(years: number[]): YearBucket {\n    const frequency: YearBucket = {};\n    years.forEach((year) => {\n      const bucket: number =\n        Math.floor(year / this.BUCKET_SIZE) *\n        this.BUCKET_SIZE;\n      frequency[bucket] = (frequency[bucket] || 0) + 1;\n    });\n    return frequency;\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport {\n  AppComponent,\n  BarHeightPipe,\n  YAxisValuesPipe,\n} from './app.component';\nimport { DataService } from './data.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    YAxisValuesPipe,\n    BarHeightPipe,\n  ],\n  imports: [BrowserModule, FormsModule, HttpClientModule],\n  providers: [DataService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/data.service.ts": {
      "code": "import { inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { first, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class DataService {\n  private readonly apiUrl =\n    'https://www.random.org/integers/';\n  private readonly COUNT = 200;\n  private readonly MIN = 1950;\n  private readonly MAX = 2019;\n\n  private readonly http = inject(HttpClient);\n\n  fetchYearsData(): Observable<number[]> {\n    return this.http\n      .get(\n        `${this.apiUrl}?num=${this.COUNT}&min=${this.MIN}&max=${this.MAX}&col=1&base=10&format=plain&rnd=new`,\n        { responseType: 'text' },\n      )\n      .pipe(\n        first(),\n        map((response: string) =>\n          response.split('\\n').filter(Boolean).map(Number),\n        ),\n      );\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n  margin: 0;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  padding: 16px 0;\n}\n\n.chart {\n  --chart-width: 100%;\n  --chart-height: 300px;\n  --axis-color: #000;\n  --bar-color: rebeccapurple;\n  --bars-gap: 16px;\n\n  display: flex;\n  max-width: 600px;\n  width: var(--chart-width);\n  height: var(--chart-height);\n}\n\n.chart__y-axis {\n  width: 40px;\n  display: flex;\n  flex-direction: column;\n}\n\n.chart__y-axis__items {\n  display: flex;\n  flex-direction: column-reverse;\n  height: 100%;\n  border-right: 1px solid var(--axis-color);\n  margin-bottom: 8px;\n  align-items: center;\n}\n\n.chart__y-axis__item {\n  flex-grow: 1;\n  transform: translateY(-8px);\n}\n\n.chart__y-axis__zero {\n  text-align: center;\n  transform: translateY(-16px);\n}\n\n.chart__main {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.chart__main__bars {\n  display: flex;\n  flex-grow: 1;\n  align-items: flex-end;\n  border-bottom: 1px solid var(--axis-color);\n  gap: var(--bars-gap);\n  padding: 0 var(--bars-gap);\n}\n\n.chart__main__bars__item {\n  background-color: var(--bar-color);\n  flex-grow: 1;\n}\n\n.chart__x-axis {\n  display: flex;\n  gap: var(--bars-gap);\n  justify-content: space-around;\n  padding: 0 var(--bars-gap);\n}\n\n.chart__x-axis__item {\n  flex-grow: 1;\n  flex-basis: 0%;\n  text-align: center;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var o=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},d=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of w(e))!j.call(t,s)&&s!==r&&o(t,s,{get:()=>e[s],enumerable:!(c=y(e,s))||c.enumerable});return t};var l=(t,e,r)=>(r=t!=null?x(v(t)):{},d(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),D=t=>d(o({},\"__esModule\",{value:!0}),t);var h=_((q,u)=>{u.exports=_jsx_runtime});var X={};T(X,{default:()=>C});var i=l(h());var n=l(h());function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",ol:\"ol\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\",ul:\"ul\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"With most data fetching and display problems, the solution can be broken down into:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Fetching data.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Processing the data, if necessary.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Displaying the data.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Fetching data\"}),`\n`,(0,n.jsx)(e.p,{children:\"The API end point returns a list of years in a text format:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`1996\n1966\n1973\n1975\n1985\n2006\n2004\n...\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"It's returned as a single string, so we need to split the data up into an array and turn them into numbers.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Processing the data\"}),`\n`,(0,n.jsx)(e.p,{children:\"The requirement is to show a histogram of birth years grouped by decades. Now that we have a list of numbers, we need to do some processing with them to turn a year value into it's corresponding bucket. E.g. 1955 -> 1950, 1967 -> 1960.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This can be done via:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Dividing by 10, removing the decimal place with \",(0,n.jsx)(e.code,{children:\"Math.floor()\"}),\", and multiplying by 10 again.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Modulo by 10 and remove the result.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Both approaches will correctly calculate the decade for a year.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is done for every year value and we can use an object to tally the count for each decade bucket.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Displaying the data\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is possibly the trickiest part of this problem as we have to draw bars that are proportionate to the value it's supposed to represent. The bucket with the biggest value will be the tallest bar.\"}),`\n`,(0,n.jsx)(e.p,{children:\"We can divide the histogram into three rectangles:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Y-axis: This renders the count for each bucket. Since there are 200 data points spread across 7 decades, there's an average of 30+ points for each bucket, and a scale of 10 points would give enough details to be useful. The maximum y-axis value is the maximum bucket count value rounded up to the nearest 10.\"}),`\n`,(0,n.jsx)(e.li,{children:\"X-axis: This renders the decade labels, spaced apart.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Data series: This renders the vertical bars, spaced apart. We also need to draw the left and bottom borders for the lines on the y-axis and x-axis respectively. The vertical bars are sized using a percentage height of the maximum y-axis value.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Note that the space between the x-axis and data series should be consistent so that the labels of the x-axis are directly aligned with the data bars.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Race conditions\"}),`\n`,(0,n.jsx)(e.p,{children:\"As with all data fetching questions, take care of handling race conditions and handle errors if the request fails.\"})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var m=M;var a=l(h());function b(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Data should be fetched from an endpoint\"}),`\n`,(0,a.jsxs)(e.li,{children:[\"Data should be displayed in a histogram\",`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"Axes should be labeled with the correct numbers\"}),`\n`,(0,a.jsx)(e.li,{children:\"Bars should be rendered correctly\"}),`\n`]}),`\n`]}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(b,t)})):b(t)}var g=k;function f(t){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(m,{}),`\n`,(0,i.jsx)(g,{})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var C=F;return D(X);})();\n;return Component;"
}