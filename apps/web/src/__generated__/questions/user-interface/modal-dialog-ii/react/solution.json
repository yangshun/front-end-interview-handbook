{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/modal-dialog-ii-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport ModalDialog from './ModalDialog';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>\n        Show modal\n      </button>\n      <ModalDialog\n        open={open}\n        title=\"Modal Title\"\n        onClose={() => {\n          setOpen(false);\n        }}>\n        One morning, when Gregor Samsa woke from troubled\n        dreams, he found himself transformed in his bed into\n        a horrible vermin. He lay on his armour-like back,\n        and if he lifted his head a little he could see his\n        brown belly, slightly domed and divided by arches\n        into stiff sections.\n      </ModalDialog>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ModalDialog.tsx": {
      "code": "import { ComponentProps, useId } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport default function ModalDialog({\n  open = false,\n  ...props\n}: Readonly<{\n  open?: boolean;\n}> &\n  ComponentProps<typeof ModalDialogImpl>) {\n  if (!open) {\n    return null;\n  }\n\n  return <ModalDialogImpl {...props} />;\n}\n\nfunction ModalDialogImpl({\n  children,\n  title,\n  onClose,\n}: Readonly<{\n  children: React.ReactNode;\n  title: string;\n  onClose: () => void;\n}>) {\n  const titleId = useId();\n  const contentId = useId();\n\n  return createPortal(\n    <div className=\"modal-overlay\">\n      <div\n        aria-describedby={contentId}\n        aria-labelledby={titleId}\n        className=\"modal\"\n        role=\"dialog\">\n        <h1 className=\"modal-title\" id={titleId}>\n          {title}\n        </h1>\n        <div id={contentId}>{children}</div>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    document.body,\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.modal-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  inset: 0;\n  position: fixed;\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n\n  padding: 20px;\n}\n\n.modal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n\n  background-color: white;\n  padding: 24px;\n}\n\n.modal-title {\n  margin: 0;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ModalDialog.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ModalDialog.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var y=Object.create;var d=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var M=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var r in e)d(n,r,{get:e[r],enumerable:!0})},u=(n,e,r,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of _(e))!D.call(n,s)&&s!==r&&d(n,s,{get:()=>e[s],enumerable:!(h=I(e,s))||h.enumerable});return n};var c=(n,e,r)=>(r=n!=null?y(v(n)):{},u(e||!n||!n.__esModule?d(r,\"default\",{value:n,enumerable:!0}):r,n)),A=n=>u(d({},\"__esModule\",{value:!0}),n);var l=M((W,m)=>{m.exports=_jsx_runtime});var R={};k(R,{default:()=>X});var a=c(l());var t=c(l());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",pre:\"pre\",h3:\"h3\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We'll build on top of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog/solution\",children:\"Modal Dialog's solution\"}),\". Other than adding the right ARIA roles and states, which is straightforward, we also need to link the title and content elements.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Linking the title and content to the modal dialog element is done via the \",(0,t.jsx)(e.code,{children:\"aria-labelledby\"}),\" attribute and \",(0,t.jsx)(e.code,{children:\"aria-describedby\"}),\" attribute respectively, by using the \",(0,t.jsx)(e.code,{children:\"id\"}),\" values of the title and content as the \",(0,t.jsx)(e.code,{children:\"aria-\"}),\" values.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since there can be multiple modal dialog component instances on the page and \",(0,t.jsx)(e.code,{children:\"id\"}),\"s are meant to be unique within the page, we cannot hardcode values for these attributes.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can expose props for these \",(0,t.jsx)(e.code,{children:\"id\"}),\" values and let it be the user's job to ensure that the values are unique. However, these \",(0,t.jsx)(e.code,{children:\"id\"}),\" values are rarely used beyond fulfilling a11y requirements and it is not meaningful work for users. We should generate the IDs for users if possible.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"We can generate two IDs \\u2013 one for the title and another for the content, and use them as such in the markup:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<div aria-labelledby={titleId} aria-describedby={contentId}>\n  <h1 id={titleId}>...</h1>\n  <div id={contentId}>...</div>\n</div>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In frameworks like React, the \",(0,t.jsx)(e.code,{children:\"useId\"}),\" hook can be used to generate IDs that will be unique per modal dialog instance.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Splitting the component\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since hooks cannot be called conditionally and there's no need to call the \",(0,t.jsx)(e.code,{children:\"useId\"}),\" hook when the modal dialog is not open, the component can be split into two with the bulk of the component within \",(0,t.jsx)(e.code,{children:\"ModalDialogImpl\"}),\" so that the \",(0,t.jsx)(e.code,{children:\"useId\"}),\" hooks are not called unnecessarily.\"]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var p=C;var o=c(l());function f(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Inspect the rendered HTML to see that the right attributes were added to the DOM.\"}),`\n`,(0,o.jsxs)(e.li,{children:[\"You can go a step further by using accessibility testing tools like \",(0,o.jsx)(e.a,{href:\"https://www.deque.com/axe/\",children:\"axe\"}),\" to validate the a11y of the elements.\"]}),`\n`]})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(f,n)})):f(n)}var b=O;var i=c(l());function w(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"We're not totally done with accessibility yet, there's still other behavior to add, such as keyboard support and focus management which will be covered in \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii\",children:\"Modal Dialog III\"}),\" and \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iv\",children:\"Modal Dialog IV\"}),\" respectively.\"]}),`\n`,(0,i.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\",children:\"Dialog (Modal) | ARIA Authoring Practices Guide\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.radix-ui.com/primitives/docs/components/dialog\",children:\"Dialog \\u2013 Radix Primitives\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://reach.tech/dialog\",children:\"Dialog | Reach UI\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://headlessui.com/react/dialog\",children:\"Dialog - Headless UI\"})}),`\n`]})]})}function q(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(w,n)})):w(n)}var x=q;function j(n){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(p,{}),`\n`,(0,a.jsx)(b,{}),`\n`,(0,a.jsx)(x,{})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(j,n)})):j(n)}var X=F;return A(R);})();\n;return Component;"
}