{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/modal-dialog-ii-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport ModalDialog from './ModalDialog';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>\n        Show modal\n      </button>\n      <ModalDialog\n        open={open}\n        title=\"Modal Title\"\n        onClose={() => {\n          setOpen(false);\n        }}>\n        One morning, when Gregor Samsa woke from troubled\n        dreams, he found himself transformed in his bed into\n        a horrible vermin. He lay on his armour-like back,\n        and if he lifted his head a little he could see his\n        brown belly, slightly domed and divided by arches\n        into stiff sections.\n      </ModalDialog>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ModalDialog.tsx": {
      "code": "import { createPortal } from 'react-dom';\n\nexport default function ModalDialog({\n  children,\n  open = false,\n  title,\n  onClose,\n}: Readonly<{\n  children: React.ReactNode;\n  open?: boolean;\n  title: string;\n  onClose: () => void;\n}>) {\n  if (!open) {\n    return null;\n  }\n\n  return createPortal(\n    <div className=\"modal-overlay\">\n      <div className=\"modal\">\n        <h1 className=\"modal-title\">{title}</h1>\n        <div>{children}</div>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    document.body,\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.modal-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  inset: 0;\n  position: fixed;\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n\n  padding: 20px;\n}\n\n.modal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n\n  background-color: white;\n  padding: 24px;\n}\n\n.modal-title {\n  margin: 0;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"esnext\"],\n    \"jsx\": \"react-jsx\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ModalDialog.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ModalDialog.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var A=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},d=(n,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of w(e))!y.call(n,o)&&o!==i&&a(n,o,{get:()=>e[o],enumerable:!(s=f(e,o))||s.enumerable});return n};var c=(n,e,i)=>(i=n!=null?p(b(n)):{},d(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),I=n=>d(a({},\"__esModule\",{value:!0}),n);var r=A((k,h)=>{h.exports=_jsx_runtime});var D={};v(D,{default:()=>q});var l=c(r());var t=c(r());function u(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",blockquote:\"blockquote\",em:\"em\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog\",children:\"Modal Dialog\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"A dialog is a window overlaid on either the primary window or another dialog window. Windows under a modal dialog are inert. That is, users cannot interact with content outside an active dialog window. Inert content outside an active dialog is typically visually obscured or dimmed so it is difficult to discern, and in some implementations, attempts to interact with the inert content cause the dialog to close.\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.em,{children:[\"Source: \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\",children:\"Dialog (Modal) Pattern | ARIA Authoring Practices Guide\"})]})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog\",children:\"Modal Dialog\"}),\", we built a functional modal dialog component that can be opened and closed with customizable title and contents.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"However, building good UI components goes beyond functionality and we have to ensure our components have great accessibility as well by adding the necessary ARIA roles, states, and properties to the DOM elements along with the keyboard interactions and focus management.\"}),`\n`,(0,t.jsx)(e.p,{children:\"In this question, we will focus on implementing the necessary ARIA roles, states, and properties.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The ARIA Authoring Practices Guide has a \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\",children:\"long list of guidelines for the ARIA roles, states, and properties to add to the various elements of a modal dialog component\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Implement the following guidelines for this question:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The element that serves as the dialog container has a role of \",(0,t.jsx)(e.code,{children:\"dialog\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"All elements required to operate the dialog are descendants of the element that has role \",(0,t.jsx)(e.code,{children:\"dialog\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The dialog container element has \",(0,t.jsx)(e.code,{children:\"aria-modal\"}),\" set to \",(0,t.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The dialog has value set for the \",(0,t.jsx)(e.code,{children:\"aria-labelledby\"}),\" property that refers to a visible dialog title.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(e.code,{children:\"aria-describedby\"}),\" property is set on the element with the dialog role to indicate which element or elements in the dialog contain content that describes the primary purpose or message of the dialog.\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": It is advisable to omit specifying \",(0,t.jsx)(e.code,{children:\"aria-describedby\"}),\" if the dialog content includes semantic structures, such as lists, tables, or multiple paragraphs, that need to be perceived in order to easily understand the content, i.e., if the content would be difficult to understand when announced as a single unbroken string. However, we will still implement this attribute for the sake of practice.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The skeleton code uses the solution of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog\",children:\"Modal Dialog\"}),\", but you are free to use your own solution as a starting point.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsxs)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\",children:[(0,t.jsx)(e.code,{children:\"<dialog>\"}),\" HTML element\"]}),\" is available but for the sake of practice, implement a modal dialog without using that element.\"]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var m=x;function g(n){return(0,l.jsx)(m,{})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(g,n)})):g(n)}var q=M;return I(D);})();\n;return Component;"
}