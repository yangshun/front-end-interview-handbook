{
  "author": "tanhauhau",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/contact-form-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import submitForm from './submitForm';\n</script>\n\n<form\n  on:submit={submitForm}\n  action=\"https://questions.greatfrontend.com/api/questions/contact-form\"\n  method=\"post\">\n  <div>\n    <label for=\"name-input\">Name</label>\n    <input id=\"name-input\" name=\"name\" type=\"text\" />\n  </div>\n  <div>\n    <label for=\"email-input\">Email</label>\n    <input id=\"email-input\" name=\"email\" type=\"email\" />\n  </div>\n  <div>\n    <label for=\"message-input\">Message</label>\n    <textarea id=\"message-input\" name=\"message\" />\n  </div>\n  <div>\n    <button>Send</button>\n  </div>\n</form>\n\n<style>\n  form {\n    display: flex;\n    flex-direction: column;\n    row-gap: 12px;\n  }\n\n  label {\n    font-size: 12px;\n  }\n\n  input,\n  textarea {\n    display: block;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    },
    "/src/submitForm.js": {
      "code": "const SUBMIT_URL =\n  'https://questions.greatfrontend.com/api/questions/contact-form';\n\nexport default async function submitForm(event) {\n  event.preventDefault();\n  const form = event.target;\n\n  try {\n    if (form.action !== SUBMIT_URL) {\n      alert('Incorrect form action value');\n      return;\n    }\n\n    if (form.method.toLowerCase() !== 'post') {\n      alert('Incorrect form method value');\n      return;\n    }\n\n    const formData = new FormData(form);\n    const response = await fetch(SUBMIT_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: formData.get('name'),\n        email: formData.get('email'),\n        message: formData.get('message'),\n      }),\n    });\n\n    const text = await response.text();\n    alert(text);\n  } catch (_) {\n    alert('Error submitting form!');\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/submitForm.js"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var y=Object.create;var d=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),C=(n,e)=>{for(var l in e)d(n,l,{get:e[l],enumerable:!0})},u=(n,e,l,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of v(e))!M.call(n,s)&&s!==l&&d(n,s,{get:()=>e[s],enumerable:!(h=_(e,s))||h.enumerable});return n};var a=(n,e,l)=>(l=n!=null?y(F(n)):{},u(e||!n||!n.__esModule?d(l,\"default\",{value:n,enumerable:!0}):l,n)),D=n=>u(d({},\"__esModule\",{value:!0}),n);var c=k((P,m)=>{m.exports=_jsx_runtime});var S={};C(S,{default:()=>O});var r=a(c());var i=a(c());function f(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ol:\"ol\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,i.jsx)(e.p,{children:\"This is a basic question which evaluates your knowledge of the web platform. Forms and form submissions can entirely be built without any JavaScript! As a Front End Engineer, it's important to know what the platform provides and not resort to JavaScript for everything.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first thing we need to do is to wrap the fields in a \",(0,i.jsx)(e.code,{children:\"<form>\"}),\", which is already given in the template. To tell the \",(0,i.jsx)(e.code,{children:\"<form>\"}),\" which URL to submit the data to, we use the \",(0,i.jsx)(e.code,{children:\"action\"}),\" attribute with the API URL as the value. The API URL is expecting a HTTP POST request, hence we also use \",(0,i.jsx)(e.code,{children:'method=\"post\"'}),\" on the \",(0,i.jsx)(e.code,{children:\"<form>\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Form fields with the \",(0,i.jsx)(e.code,{children:\"name\"}),\" attribute will have the attribute value become the key in the form data. Hence we can add \",(0,i.jsx)(e.code,{children:'name=\"name\"'}),\", \",(0,i.jsx)(e.code,{children:'name=\"email\"'}),\", \",(0,i.jsx)(e.code,{children:'name=\"message\"'}),\" to the various form fields. Do also add \",(0,i.jsx)(e.code,{children:\"<label>\"}),\"s to label your \",(0,i.jsx)(e.code,{children:\"<input>\"}),\"s.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Lastly, submit buttons can be implemented in two ways:\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:'<button type=\"submit\">'}),\": By default, \",(0,i.jsx)(e.code,{children:\"<button>\"}),\"s have \",(0,i.jsx)(e.code,{children:'type=\"submit\"'}),\" as default and when used in \",(0,i.jsx)(e.code,{children:\"<form>\"}),\"s, will trigger a form submission.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:'<input type=\"submit\">'}),\": The element will be rendered as a button and clicking the \",(0,i.jsx)(e.code,{children:\"<input>\"}),\" will trigger a form submission.\"]}),`\n`]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(f,n)})):f(n)}var p=T;var o=a(c());function b(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Fields\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"All the fields can be updated.\"}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[\"Submission\",`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Clicking on the submit button triggers form submission.\"}),`\n`,(0,o.jsxs)(e.li,{children:[\"Hitting enter on the fields triggers form submissions if form is valid (except for \",(0,o.jsx)(e.code,{children:\"<textarea>\"}),\" which will add a new line)\"]}),`\n`,(0,o.jsx)(e.li,{children:\"Success alert is seen if all fields are filled during submission.\"}),`\n`]}),`\n`]}),`\n`]})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(b,n)})):b(n)}var g=L;var t=a(c());function w(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",p:\"p\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Link \",(0,t.jsx)(e.code,{children:\"<label>\"}),\"s to \",(0,t.jsx)(e.code,{children:\"<input>\"}),\" so that clicking on the \",(0,t.jsx)(e.code,{children:\"<label>\"}),\" will focus on the corresponding \",(0,t.jsx)(e.code,{children:\"<input>\"}),\".\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Use \",(0,t.jsx)(e.code,{children:'<label for=\"some-id\">'}),\" and \",(0,t.jsx)(e.code,{children:'<input id=\"some-id\">'}),\" to define the relation between \",(0,t.jsx)(e.code,{children:\"<label>\"}),\" and \",(0,t.jsx)(e.code,{children:\"<input>\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Avoid nesting \",(0,t.jsx)(e.code,{children:\"<input>\"}),\" inside of \",(0,t.jsx)(e.code,{children:\"<label>\"}),\" because some assistive technologies (e.g. Dragon NaturallySpeaking) do not support it.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Follow up\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now that you are familiar with form submission, try out a follow up question, \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/signup-form\",children:\"Signup Form\"}),\", where you will be asked to make an AJAX-based form request and client-side validation.\"]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(w,n)})):w(n)}var x=X;function j(n){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(p,{}),`\n`,(0,r.jsx)(g,{}),`\n`,(0,r.jsx)(x,{})]})}function A(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(j,n)})):j(n)}var O=A;return D(S);})();\n;return Component;"
}