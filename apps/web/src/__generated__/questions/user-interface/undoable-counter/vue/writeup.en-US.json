{
  "skeleton": "var Component=(()=>{var b=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var j=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),_=(e,n)=>{for(var o in n)r(e,o,{get:n[o],enumerable:!0})},l=(e,n,o,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of x(n))!y.call(e,i)&&i!==o&&r(e,i,{get:()=>n[i],enumerable:!(s=f(n,i))||s.enumerable});return e};var d=(e,n,o)=>(o=e!=null?b(g(e)):{},l(n||!e||!e.__esModule?r(o,\"default\",{value:e,enumerable:!0}):o,e)),C=e=>l(r({},\"__esModule\",{value:!0}),e);var c=j((v,u)=>{u.exports=_jsx_runtime});var q={};_(q,{default:()=>T});var a=d(c());var t=d(c());function h(e){let n=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\",a:\"a\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:\"Build a counter with a history of the changes and ability to undo/redo actions.\"}),`\n`,(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:\"/img/questions/undoable-counter/undoable-counter-example.png\",alt:\"Undoable Counter Example\"})}),`\n`,(0,t.jsx)(n.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsx)(n.li,{children:\"The counter starts at 0.\"}),`\n`,(0,t.jsxs)(n.li,{children:['There buttons \"/2\", \"-1\", \"+1\", \"x2\" apply the respective operations to the current count.',`\n`,(0,t.jsxs)(n.ul,{children:[`\n`,(0,t.jsx)(n.li,{children:\"A row is added to the history table, showing the operation, count before the operation, count after.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(n.li,{children:'The \"Undo\" button undoes the last action and updates the count.'}),`\n`,(0,t.jsx)(n.li,{children:'The \"Redo\" button applies the last undo-ed action, if any.'}),`\n`,(0,t.jsx)(n.li,{children:\"Clicking on the modification buttons should clear any undo-ed actions and they cannot be redo-ed.\"}),`\n`,(0,t.jsx)(n.li,{children:'The \"Reset\" button resets the counter to 0 and clears all history.'}),`\n`]}),`\n`,(0,t.jsx)(n.h2,{children:\"Source\"}),`\n`,(0,t.jsxs)(n.p,{children:[\"This question is adapted from \",(0,t.jsx)(n.a,{href:\"https://frontendeval.com/questions/undoable-counter?tab=question\",children:\"FrontendEval's Undoable Counter\"}),\".\"]})]})}function w(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(h,e)})):h(e)}var p=w;function m(e){return(0,a.jsx)(p,{})}function M(e={}){let{wrapper:n}=e.components||{};return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(m,e)})):m(e)}var T=M;return C(q);})();\n;return Component;",
  "solution": "var Component=(()=>{var b=Object.create;var h=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),x=(o,e)=>{for(var r in e)h(o,r,{get:e[r],enumerable:!0})},s=(o,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of v(e))!g.call(o,i)&&i!==r&&h(o,i,{get:()=>e[i],enumerable:!(l=y(e,i))||l.enumerable});return o};var d=(o,e,r)=>(r=o!=null?b(T(o)):{},s(e||!o||!o.__esModule?h(r,\"default\",{value:o,enumerable:!0}):r,o)),w=o=>s(h({},\"__esModule\",{value:!0}),o);var c=j((R,u)=>{u.exports=_jsx_runtime});var k={};x(k,{default:()=>C});var t=d(c());var n=d(c());function p(o){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Verify that the counter starts at 0.\"}),`\n`,(0,n.jsxs)(e.li,{children:['Click the \"/2\", \"-1\", \"+1\", \"x2\" buttons multiple times. Observe that:',`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The counter should update with the correct value after performing the operation.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The history table should have a row added to the top showing the operation, count before the operation and the count after.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:['Click the \"Undo\" button multiple times. Observe that:',`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'The counter should update with the correct \"old\" value.'}),`\n`,(0,n.jsx)(e.li,{children:\"The top row is removed from the history table.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:['Click the \"Redo\" button multiple times. Observe that:',`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'The counter should update with the correct \"new\" value.'}),`\n`,(0,n.jsx)(e.li,{children:\"The history table should have the redo-ed row added back to it.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:['Click the \"Reset\" button. Observe that:',`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'The \"Undo\" and \"Redo\" buttons should be disabled.'}),`\n`,(0,n.jsx)(e.li,{children:\"The history table should have nothing in it.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The counter should reset to 0.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:['Click the \"/2\", \"-1\", \"+1\", \"x2\" buttons after undoing some actions.',`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The undo-ed actions can no longer do redo-ed.\"}),`\n`,(0,n.jsx)(e.li,{children:'The \"Redo\" button should be disabled.'}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"a11y\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Use Tab to cycle through the buttons.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Be able to use both Spacebar and Enter to interact with the page.\"}),`\n`]}),`\n`]}),`\n`]})]})}function O(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(p,o)})):p(o)}var m=O;var a=d(c());function f(o){let e=Object.assign({h2:\"h2\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\",p:\"p\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"counter\"}),\": The current value for the counter.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"history\"}),\": An array that contains the history of actions. The list of actions are in reverse chronological order.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"undoHistory\"}),\": An array that contains the history of actions have have been undo-ed. The list of actions are in reverse chronological order.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"performOperation\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"performOperation\"}),\" function is used to apply an operation to a counter value. It takes two parameters: \",(0,t.jsx)(e.code,{children:\"counter\"}),\" and \",(0,t.jsx)(e.code,{children:\"operationLabel\"}),\". \",(0,t.jsx)(e.code,{children:\"counter\"}),\" is the current value of the counter, and \",(0,t.jsx)(e.code,{children:\"operationLabel\"}),\" is a string that specifies which operation to perform.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"OPERATIONS\"}),\" object is a dictionary that maps operation labels to objects that describe the operation. Each operation object has a type property that specifies the type of operation (increment, decrement, multiply, or divide) and a number property that specifies the operand for the operation.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"performOperation\"}),\" function looks up the operation object for the specified operation label from the \",(0,t.jsx)(e.code,{children:\"OPERATIONS\"}),\" object. For example, if operationLabel is \",(0,t.jsx)(e.code,{children:\"'+1'\"}),\", performOperation will look up the object \",(0,t.jsx)(e.code,{children:\"{ type: 'increment', number: 1 }\"}),\" from the \",(0,t.jsx)(e.code,{children:\"OPERATIONS\"}),\" object and add 1 to the counter.\"]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"undo\"})}),`\n`,(0,t.jsx)(e.p,{children:'This function that is called when the \"Undo\" button is clicked. It is responsible for undoing the last performed operation and updating the counter and the history accordingly.'}),`\n`,(0,t.jsxs)(e.p,{children:[\"More specifically, \",(0,t.jsx)(e.code,{children:\"undo\"}),\" removes the first item from the history array, and sets the counter value to the old counter value of the removed item. The removed item is then added to the undoHistory array, which stores the list of undone operations.\"]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"redo\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This function is used to redo the last action that was undone by the onUndo function.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"When \",(0,t.jsx)(e.code,{children:\"redo\"}),\" is called, it retrieves the most recently undone action from the undoHistory state and sets the counter to the \",(0,t.jsx)(e.code,{children:\"newCounter\"}),\" value of that action. It then removes the undone action from the undoHistory state and adds it back to the history state, effectively reapplying the action.\"]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"reset\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This function resets everything back to the initial state.\"}),`\n`,(0,t.jsx)(m,{})]})}function _(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(f,o)})):f(o)}var C=_;return w(k);})();\n;return Component;"
}