{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.tsx\",\n    \"/src/ModalDialog.tsx\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/ModalDialog.tsx\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/modal-dialog-iv-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\nimport ModalDialog from './ModalDialog';\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>\n        Show modal\n      </button>\n      <ModalDialog\n        open={open}\n        title=\"Feedback\"\n        onClose={() => {\n          setOpen(false);\n        }}>\n        <div className=\"contents\">\n          <div>\n            Provide your feedback, we will get back in 3-5\n            business days.\n          </div>\n          <input placeholder=\"john@gmail.com\" />\n          <textarea\n            placeholder=\"Your message here\"\n            rows={5}></textarea>\n          <button type=\"button\">Submit</button>\n        </div>\n      </ModalDialog>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ModalDialog.tsx": {
      "code": "import {\n  ComponentProps,\n  RefObject,\n  useEffect,\n  useId,\n  useRef,\n} from 'react';\nimport { createPortal } from 'react-dom';\n\nexport default function ModalDialog({\n  open = false,\n  ...props\n}: Readonly<{\n  open?: boolean;\n}> &\n  ComponentProps<typeof ModalDialogImpl>) {\n  if (!open) {\n    return null;\n  }\n\n  return <ModalDialogImpl {...props} />;\n}\n\n/**\n * Invokes a function when a key is pressed.\n */\nfunction useOnKeyDown(\n  key: string,\n  fn: (event: KeyboardEvent) => void,\n) {\n  useEffect(() => {\n    function onKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        fn(event);\n      }\n    }\n\n    document.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  }, [fn]);\n}\n\n/**\n * Invokes a function when clicking outside an element.\n */\nfunction useOnClickOutside(\n  elRef: RefObject<HTMLDivElement>,\n  fn: () => void,\n) {\n  // Add event handling for close when clicking outside.\n  useEffect(() => {\n    function onClickOutside(\n      event: MouseEvent | TouchEvent,\n    ) {\n      // No-op if clicked element is a descendant of element's contents.\n      if (\n        event.target instanceof Node &&\n        elRef.current != null &&\n        !elRef.current?.contains(event.target)\n      ) {\n        fn();\n      }\n    }\n\n    document.addEventListener('mousedown', onClickOutside);\n    document.addEventListener('touchstart', onClickOutside);\n\n    return () => {\n      document.removeEventListener(\n        'mousedown',\n        onClickOutside,\n      );\n      document.removeEventListener(\n        'touchstart',\n        onClickOutside,\n      );\n    };\n  }, [fn]);\n}\n\nfunction getTabbableElements(\n  elRef: RefObject<HTMLDivElement>,\n) {\n  if (elRef.current == null) {\n    return [];\n  }\n\n  return elRef.current.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n  );\n}\n\n/**\n * Focus on the first tabbable element on mount.\n */\nfunction useFocusOnFirstTabbableElement(\n  elRef: RefObject<HTMLDivElement>,\n) {\n  useEffect(() => {\n    const tabbableElements = getTabbableElements(elRef);\n    const firstElement = tabbableElements[0];\n    if (firstElement instanceof HTMLElement) {\n      firstElement.focus();\n    }\n  }, []);\n}\n\n/**\n * Trap focus within an element.\n */\nfunction useFocusTrap(elRef: RefObject<HTMLDivElement>) {\n  function trapFocus(event: KeyboardEvent) {\n    if (elRef.current == null) {\n      return;\n    }\n\n    const tabbableElements = getTabbableElements(elRef);\n    const firstElement = tabbableElements[0];\n    const lastElement =\n      tabbableElements[tabbableElements.length - 1];\n\n    if (event.shiftKey) {\n      // Shift + Tab event\n      if (\n        document.activeElement === firstElement &&\n        lastElement instanceof HTMLElement\n      ) {\n        event.preventDefault();\n        lastElement.focus();\n      }\n    } else {\n      // Tab event\n      if (\n        document.activeElement === lastElement &&\n        firstElement instanceof HTMLElement\n      ) {\n        event.preventDefault();\n        firstElement.focus();\n      }\n    }\n  }\n\n  useOnKeyDown('Tab', trapFocus);\n}\n\n/**\n * Retain reference to trigger element and focus that element when closed.\n */\nfunction useReturnFocusToTrigger() {\n  const triggerElRef = useRef<Element | null>(null);\n\n  useEffect(() => {\n    // Save a reference to the focused element when mounted.\n    triggerElRef.current = document.activeElement;\n\n    return () => {\n      if (triggerElRef.current instanceof HTMLElement) {\n        // Focuses on element when unmounted.\n        triggerElRef.current.focus();\n      }\n    };\n  }, []);\n}\n\nfunction ModalDialogImpl({\n  children,\n  title,\n  onClose,\n}: Readonly<{\n  children: React.ReactNode;\n  title: string;\n  onClose: () => void;\n}>) {\n  const titleId = useId();\n  const contentId = useId();\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  // Closing-related hooks.\n  useOnKeyDown('Escape', onClose);\n  useOnClickOutside(dialogRef, onClose);\n\n  // Focus-related hooks.\n  useReturnFocusToTrigger(); // Has to be called before useFocusOnFirstTabbableElement otherwise the focus is lost.\n  useFocusOnFirstTabbableElement(dialogRef);\n  useFocusTrap(dialogRef);\n\n  return createPortal(\n    <div className=\"modal-overlay\">\n      <div\n        aria-describedby={contentId}\n        aria-labelledby={titleId}\n        className=\"modal\"\n        role=\"dialog\"\n        ref={dialogRef}>\n        <h1 className=\"modal-title\" id={titleId}>\n          {title}\n        </h1>\n        <div id={contentId}>{children}</div>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>,\n    document.body,\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\ninput,\ntextarea {\n  display: block;\n  font-family: sans-serif;\n  padding: 8px;\n}\n\n*:focus {\n  outline: 2px solid red;\n  outline-offset: 1px;\n}\n\n.modal-overlay {\n  background-color: rgba(0, 0, 0, 0.7);\n  inset: 0;\n  position: fixed;\n\n  align-items: center;\n  display: flex;\n  justify-content: center;\n\n  padding: 20px;\n}\n\n.modal {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n\n  background-color: white;\n  padding: 24px;\n}\n\n.modal-title {\n  margin: 0;\n}\n\n.contents {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ModalDialog.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ModalDialog.tsx",
    "environment": "create-react-app"
  }
}