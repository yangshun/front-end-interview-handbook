{
  "skeleton": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),A=(n,e)=>{for(var o in e)a(n,o,{get:e[o],enumerable:!0})},d=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!w.call(n,i)&&i!==o&&a(n,i,{get:()=>e[i],enumerable:!(s=b(e,i))||s.enumerable});return n};var c=(n,e,o)=>(o=n!=null?f(I(n)):{},d(e||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),x=n=>d(a({},\"__esModule\",{value:!0}),n);var l=y((j,h)=>{h.exports=_jsx_runtime});var M={};A(M,{default:()=>q});var r=c(l());var t=c(l());function u(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note:\"}),\" This is an advanced version of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii\",children:\"Modal Dialog III\"}),\", you should complete that question first before attempting this question.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-ii\",children:\"Modal Dialog II\"}),\" and \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii\",children:\"Modal Dialog III\"}),\", we built a functional modal dialog component that has the necessary \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#wai-ariaroles,states,andproperties\",children:\"WAI-ARIA roles, states, and properties\"}),\" and the necessary interactions to close the dialog respectively.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For a completely accessible modal dialog component, we should also add the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#keyboardinteraction\",children:\"remaining keyboard interactions\"}),\" related to focus management.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Implement the following \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#keyboardinteraction\",children:\"keyboard interactions for dialogs\"}),\":\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),': the term \"tabbable element\" refers to any element with a ',(0,t.jsx)(e.code,{children:\"tabindex\"}),\" value of zero or greater.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Focus placements when dialog is opened/closed:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"When a dialog opens, focus moves to the first element inside the dialog\"}),`\n`,(0,t.jsx)(e.li,{children:\"When a dialog closes, focus returns to the element that invoked the dialog\"}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Note\"}),\": There are some nuances regarding which elements to focus on, which you can read on the \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#keyboardinteraction\",children:\"ARIA Authoring Practices Guide\"}),\" but can be ignored for this question\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Focus trapping:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(\"kbd\",{children:\"Tab\"}),\" key moves focus to the next tabbable element inside the dialog. If focus is on the last tabbable element inside the dialog, moves focus to the first tabbable element inside the dialog\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,t.jsx)(\"kbd\",{children:\"Tab\"}),\" keys moves focus to the previous tabbable element inside the dialog. If focus is on the first tabbable element inside the dialog, moves focus to the last tabbable element inside the dialog\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another required keyboard interaction is \",(0,t.jsx)(\"kbd\",{children:\"Escape\"}),\" to close the dialog but this has already been implemented in \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii\",children:\"Modal Dialog III\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The focus of this question is on adding the focus management functionality, not the styling and structure. The solution to \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii\",children:\"Modal Dialog III\"}),\" has been provided here for you to build on top of. You can reuse the existing styling and structure.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The contents of the dialog has been modified to include more focusable/tabbable elements to facilitate testing of the focus trapping behavior. A 2px red ring has been added to focused elements to make it more obvious which element is in focus.\"})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var g=k;function m(n){return(0,r.jsx)(g,{})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(m,n)})):m(n)}var q=v;return x(M);})();\n;return Component;",
  "solution": "var Component=(()=>{var T=Object.create;var d=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var A=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),I=(t,e)=>{for(var r in e)d(t,r,{get:e[r],enumerable:!0})},u=(t,e,r,m)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let h of D(e))!M.call(t,h)&&h!==r&&d(t,h,{get:()=>e[h],enumerable:!(m=_(e,h))||m.enumerable});return t};var c=(t,e,r)=>(r=t!=null?T(F(t)):{},u(e||!t||!t.__esModule?d(r,\"default\",{value:t,enumerable:!0}):r,t)),C=t=>u(d({},\"__esModule\",{value:!0}),t);var s=A((L,b)=>{b.exports=_jsx_runtime});var S={};I(S,{default:()=>q});var a=c(s());var n=c(s());function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ol:\"ol\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\",ul:\"ul\",strong:\"strong\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/modal-dialog-iii/solution\",children:\"Modal Dialog III's solution\"}),\". Like in Modal Dialog III, only interactions need to be added; the styling and structure can remain the same.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The following behaviors need to be implemented:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Upon dialog open, focus on the first tabbable element\"}),`\n`,(0,n.jsx)(e.li,{children:\"Focus trapping \\u2013 the focus is trapped within the dialog and cannot escape the dialog\"}),`\n`,(0,n.jsx)(e.li,{children:\"Upon dialog close, focus returns to the element that invoked the dialog\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"1. Upon dialog open, focus on the first tabbable element\"}),`\n`,(0,n.jsx)(e.p,{children:\"This functionality is quite straightforward to implement. Upon mounting of the component, query all the elements and focus on the first tabbable element. The tabbable elements within the dialog can be selected with the following selector:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`dialogEl.querySelectorAll(\n  'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is implemented as the \",(0,n.jsx)(e.code,{children:\"useFocusOnFirstTabbableElement\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"2. Focus trapping\"}),`\n`,(0,n.jsx)(e.p,{children:\"Focus trapping is a technique used to control and manage keyboard focus within a specific area or component of a webpage or application (e.g. modal dialogs, dropdown menus).\"}),`\n`,(0,n.jsx)(e.p,{children:\"Practically, the following behavior is implemented:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"When focus reaches the last element, \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" moves focus to the first tabbable element\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"When focus is on the first element, \",(0,n.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" moves focus to the last tabbable element\"]}),`\n`,(0,n.jsx)(e.li,{children:\"All interactive elements within the trapped area remain focusable\"}),`\n`,(0,n.jsx)(e.li,{children:\"Elements outside the trapped area are temporarily made unfocusable\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Tabbing between the non-boundary elements can remain as per normal. Only the first and last elements need special handling. We need to hijack the tabbing events on these boundary elements and programmatically focus on the required elements instead of allowing the browser to decide (which relies on DOM order).\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can add a \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event listener to the dialog and filter for \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" event presses. In the callback:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"If the currently focused element (via \",(0,n.jsx)(e.code,{children:\"document.activeElement\"}),\") is the last tabbable element and the \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" key is pressed, focus on the first tabbable element instead.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If the currently focused element (via \",(0,n.jsx)(e.code,{children:\"document.activeElement\"}),\") is the first tabbable element and the \",(0,n.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" keys are pressed (by checking the \",(0,n.jsx)(e.code,{children:\"event.shiftKey\"}),\" property), focus on the last tabbable element instead.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To find all the tabbable elements, the same selector as per part 1 can be used. Note that it is advisable to find all the tabbable elements on-demand, during the \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" key event, rather than at the start when the dialog is mounted and retaining a reference to the list. This is because the contents of the dialog can be modified anytime; the list of tabbable elements on mount might not be the same as when the user actually tabs through them.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Before changing the focus programmatically, remember to call \",(0,n.jsx)(e.code,{children:\"event.preventDefault()\"}),\", otherwise the browser will proceed with the default behavior \\u2013 focus on the next element determined by the DOM order.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is implemented as the \",(0,n.jsx)(e.code,{children:\"useFocusTrap\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"3. Upon dialog close, focus returns to the element that invoked the dialog\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The currently focused element on the page can be obtained using \",(0,n.jsx)(e.code,{children:\"document.activeElement\"}),\". When the dialog is mounted, save a reference to that element (if it exists). On unmounting, programmatically focus on that element.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is implemented as the \",(0,n.jsx)(e.code,{children:\"useReturnFocusToTrigger\"}),\" hook. An important thing to note is that this hook has to be \",(0,n.jsxs)(e.strong,{children:[\"called before \",(0,n.jsx)(e.code,{children:\"useFocusOnFirstTabbableElement\"})]}),\", otherwise the focus would have been set on the first tabbable element, even before the hook gets a chance to save the reference to the focus trigger.\"]})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var g=O;var i=c(s());function f(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Dialog opening\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Verify that focus moves to the first focusable element in the dialog when it opens\"}),`\n`,(0,i.jsx)(e.li,{children:\"Ensure that focus is trapped within the dialog\"}),`\n`,(0,i.jsx)(e.li,{children:\"Check that elements outside the dialog are not focusable\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Focus order\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Confirm that \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" key moves focus through elements in a logical order\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Verify that \",(0,i.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" reverses the focus order\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Ensure that all interactive elements within the dialog are focusable\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Focus trapping\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that focus wraps from the last to the first element when tabbing\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Verify that focus wraps from the first to the last element when using \",(0,i.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,i.jsx)(\"kbd\",{children:\"Tab\"})]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Dialog closing\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Confirm that pressing \",(0,i.jsx)(\"kbd\",{children:\"Esc\"}),\" key closes the dialog\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Verify that clicking outside the dialog closes it\"}),`\n`,(0,i.jsx)(e.li,{children:\"Ensure that focus returns to the element that opened the dialog\"}),`\n`]}),`\n`]}),`\n`]})]})}function E(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var w=E;var o=c(s());function y(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Congratulations, we have implement almost everything on \",(0,o.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\",children:\"Dialog (Modal) | ARIA Authoring Practices Guide\"}),\". Do read the page, there are some nuances related to the usage of \",(0,o.jsx)(e.code,{children:\"aria-describedby\"}),\" attribute and automatic focus placements.\"]}),`\n`,(0,o.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/\",children:\"Dialog (Modal) | ARIA Authoring Practices Guide\"})}),`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://www.radix-ui.com/primitives/docs/components/dialog\",children:\"Dialog \\u2013 Radix Primitives\"})}),`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://reach.tech/dialog\",children:\"Dialog | Reach UI\"})}),`\n`,(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:\"https://headlessui.com/react/dialog\",children:\"Dialog - Headless UI\"})}),`\n`]})]})}function X(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(y,t)})):y(t)}var v=X;var l=c(s());function x(t){let e=Object.assign({h2:\"h2\",p:\"p\"},t.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{children:\"Follow up\"}),`\n`,(0,l.jsx)(e.p,{children:\"A possible problematic scenario is having multiple dialogs open at once / stacked because the open dialog's contents allow opening of another dialog.\"}),`\n`,(0,l.jsxs)(e.p,{children:[\"A limitation of our current implementation is surfaced \\u2013 since most of the event listeners are added on the global level, all the open dialogs might respond to a \",(0,l.jsx)(\"kbd\",{children:\"Escape\"}),\" event and close at the same time, when the expected behavior is that only the topmost dialog closes.\"]}),`\n`,(0,l.jsx)(e.p,{children:\"Fixing this will require code to track the stack of open dialogs and only close the topmost dialog. However, implementing this is non-trivial and usually beyond the scope of interviews. That said, mentioning this scenario to the interviewer will probably give you brownie points!\"})]})}function R(t={}){let{wrapper:e}=t.components||{};return e?(0,l.jsx)(e,Object.assign({},t,{children:(0,l.jsx)(x,t)})):x(t)}var k=R;function j(t){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(g,{}),`\n`,(0,a.jsx)(w,{}),`\n`,(0,a.jsx)(v,{}),`\n`,(0,a.jsx)(k,{})]})}function W(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(j,t)})):j(t)}var q=W;return C(S);})();\n;return Component;"
}