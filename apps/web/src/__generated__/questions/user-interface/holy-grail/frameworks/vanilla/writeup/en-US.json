{
  "skeleton": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var _=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var l in e)i(n,l,{get:e[l],enumerable:!0})},c=(n,e,l,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!j.call(n,o)&&o!==l&&i(n,o,{get:()=>e[o],enumerable:!(a=f(e,o))||a.enumerable});return n};var s=(n,e,l)=>(l=n!=null?p(y(n)):{},c(e||!n||!n.__esModule?i(l,\"default\",{value:n,enumerable:!0}):l,n)),C=n=>c(i({},\"__esModule\",{value:!0}),n);var h=_((D,u)=>{u.exports=_jsx_runtime});var S={};w(S,{default:()=>H});var r=s(h());var t=s(h());function d(n){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"The Holy Grail layout is a famous CSS page layout that has traditionally been hard to implement. It consists of a header, footer, and three columns. The left column contains navigation items, the middle column contains the page contents, and the right column contains ads.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/img/questions/holy-grail/holy-grail-example.png\",alt:\"Holy Grail layout example\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Implement the Holy Grail layout using just CSS. You shouldn't need to change the HTML too much.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Header\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Stretches horizontally across the whole page.\"}),`\n`,(0,t.jsx)(e.li,{children:\"60px tall.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Columns\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Both the left and right columns have a fixed width of 100px.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The center column is fluid-width.\"}),`\n`,(0,t.jsx)(e.li,{children:\"All the columns should have the same height, regardless of which column is the tallest.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Footer\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Stretches horizontally across the whole page.\"}),`\n`,(0,t.jsx)(e.li,{children:\"100px tall.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The footer should be at the bottom of the page even if there is not enough content to fill up the viewport height.\"}),`\n`]}),`\n`]}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var m=M;function g(n){return(0,r.jsx)(m,{})}function b(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(g,n)})):g(n)}var H=b;return C(S);})();\n;return Component;",
  "solution": "var Component=(()=>{var y=Object.create;var d=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var F=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),C=(n,e)=>{for(var s in e)d(n,s,{get:e[s],enumerable:!0})},u=(n,e,s,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of v(e))!M.call(n,r)&&r!==s&&d(n,r,{get:()=>e[r],enumerable:!(h=_(e,r))||h.enumerable});return n};var c=(n,e,s)=>(s=n!=null?y(T(n)):{},u(e||!n||!n.__esModule?d(s,\"default\",{value:n,enumerable:!0}):s,n)),k=n=>u(d({},\"__esModule\",{value:!0}),n);var l=F((I,m)=>{m.exports=_jsx_runtime});var S={};C(S,{default:()=>G});var a=c(l());var o=c(l());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"There are multiple ways to implement the Holy Grail layout. It'd be good practice to try out a Grid-based approach as well as it might become the de facto solution in future.\"}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(p,n)})):p(n)}var f=D;var i=c(l());function x(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test variable width: the navigation and sidebar columns should be fixed width and the middle column is fluid and fills up any remaining space.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test variable height: the header and footer rows should be fixed width and the footer should always be at the bottom of the window.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Test lots of content within \",(0,i.jsx)(e.code,{children:\"main\"}),\". It should not cause the \",(0,i.jsx)(e.code,{children:\"nav\"}),\" and \",(0,i.jsx)(e.code,{children:\"aside\"}),\" to shrink.\"]}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(x,n)})):x(n)}var g=X;var t=c(l());function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"The most widely-supported solution is a Flexbox-based one. It has great browser support and is easiest to understand. A Grid-based approach is also getting popular these days but isn't as well-supported as Flexbox.\"}),`\n`,(0,t.jsx)(e.p,{children:\"There are a few main parts to achieving the specifications using flexbox. Let's dive into each.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Sticky footer\"}),`\n`,(0,t.jsx)(e.p,{children:\"The Holy Grail layout problem also encompasses another classic problem: making a footer stick to the bottom of the screen when there is not enough content to fill up the page.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This can be solved by adding \",(0,t.jsx)(e.code,{children:\"min-height: 100vh\"}),\" to the container of the page's contents. Since the direct children will be laid out in a vertical fashion, we add \",(0,t.jsx)(e.code,{children:\"display: flex\"}),\" and \",(0,t.jsx)(e.code,{children:\"flex-direction: column\"}),\" to that element as well.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The header and footers are fixed heights and the columns are variable height and is meant to fill up any remaining space. To achieve this, \",(0,t.jsx)(e.code,{children:\"flex-grow: 1\"}),\" is added to the \",(0,t.jsx)(e.code,{children:\"<div>\"}),\" wrapping the columns.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Columns\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The requirement to make all the columns equal-height is also trivially solved with Flexbox. By adding \",(0,t.jsx)(e.code,{children:\"display: flex\"}),\" to the \",(0,t.jsx)(e.code,{children:\"div\"}),\" wrapper of the columns, this requirement is met.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Like before, the flexible-width \",(0,t.jsx)(e.code,{children:\"<main>\"}),\" content section can be achieved using \",(0,t.jsx)(e.code,{children:\"flex-grow: 1\"}),\" and it will fill up any horizontal space available.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"flex-shrink: 0\"}),\" has to be added to \",(0,t.jsx)(e.code,{children:\"<nav>\"}),\" and \",(0,t.jsx)(e.code,{children:\"<aside>\"}),\" so that they don't shrink when the content in \",(0,t.jsx)(e.code,{children:\"<main>\"}),\" is too wide.\"]})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(b,n)})):b(n)}var w=O;function j(n){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(w,{}),`\n`,(0,a.jsx)(g,{}),`\n`,(0,a.jsx)(f,{})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(j,n)})):j(n)}var G=L;return k(S);})();\n;return Component;"
}