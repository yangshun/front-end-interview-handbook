{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/like-button-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"button-container\">\n  <button\n    [ngClass]=\"{\n      'like-button': true,\n      'like-button--liked': liked,\n      'like-button--default': !liked\n    }\"\n    [disabled]=\"isPending\"\n    (click)=\"likeUnlikeAction()\">\n    <svg\n      *ngIf=\"isPending\"\n      class=\"spinner-icon\"\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 38 38\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke=\"currentColor\">\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n          <circle\n            strokeOpacity=\".5\"\n            cx=\"18\"\n            cy=\"18\"\n            r=\"18\" />\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n            <animateTransform\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 18 18\"\n              to=\"360 18 18\"\n              dur=\"1s\"\n              repeatCount=\"indefinite\" />\n          </path>\n        </g>\n      </g>\n    </svg>\n    <svg\n      *ngIf=\"!isPending\"\n      class=\"heart-icon\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n      width=\"16\"\n      height=\"16\">\n      <g>\n        <path\n          d=\"M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z\"></path>\n      </g>\n    </svg>\n    {{ liked ? 'Liked' : 'Like' }}\n  </button>\n  <div *ngIf=\"errorMessage\" class=\"error-message\">\n    {{ errorMessage }}\n  </div>\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component, inject } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n} from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  liked = false;\n  isPending = false;\n  errorMessage: string | null = null;\n\n  http = inject(HttpClient);\n\n  likeUnlikeAction() {\n    this.isPending = true;\n    this.errorMessage = null;\n    this.http\n      .post(\n        'https://questions.greatfrontend.com/api/questions/like-button',\n        {\n          action: this.liked ? 'unlike' : 'like',\n        },\n      )\n      .subscribe({\n        next: () => {\n          this.isPending = false;\n          this.liked = !this.liked;\n        },\n        error: (error: HttpErrorResponse) => {\n          this.isPending = false;\n          this.errorMessage = error.error.message;\n        },\n      });\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, FormsModule, HttpClientModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "/* You can add global styles to this file, and also import other style files */\nbody {\n  font-family: sans-serif;\n}\n\n.error-message {\n  font-size: 12px;\n  margin-top: 8px;\n}\n\n.like-button {\n  --default-color: #888;\n  --active-color: red;\n\n  align-items: center;\n  border-style: solid;\n  border-radius: 32px;\n  border-width: 2px;\n  display: flex;\n  cursor: pointer;\n  font-weight: bold;\n  gap: 8px;\n  height: 32px;\n  padding: 4px 8px;\n}\n\n.like-button--default {\n  background-color: #fff;\n  border-color: var(--default-color);\n  color: var(--default-color);\n}\n\n.like-button:hover {\n  border-color: var(--active-color);\n  color: var(--active-color);\n}\n\n.like-button--liked,\n.like-button--liked:hover {\n  background-color: var(--active-color);\n  border-color: var(--active-color);\n  color: #fff;\n}\n\n.like-button-icon {\n  display: flex;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var s in e)l(t,s,{get:e[s],enumerable:!0})},d=(t,e,s,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of y(e))!x.call(t,o)&&o!==s&&l(t,o,{get:()=>e[o],enumerable:!(h=v(e,o))||h.enumerable});return t};var a=(t,e,s)=>(s=t!=null?w(k(t)):{},d(e||!t||!t.__esModule?l(s,\"default\",{value:t,enumerable:!0}):s,t)),q=t=>d(l({},\"__esModule\",{value:!0}),t);var c=j((P,u)=>{u.exports=_jsx_runtime});var T={};_(T,{default:()=>M});var n=a(c());var i=a(c());function g(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:['\"Default\" state',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:'Hovering the button should show the \"Hovered\" state.'}),`\n`,(0,i.jsxs)(e.li,{children:[\"Clicking on the button should show a loading spinner.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:'If the request succeeds, the button should transition into the \"Liked\" state.'}),`\n`,(0,i.jsx)(e.li,{children:'If the request fails, the button should go back to the \"Default\" state and an error message is shown below the button.'}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Liked\" state',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Hovering the button in this state is undefined behavior. It's fine to not show any difference when hovering.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Clicking on the button should show a loading spinner.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:'If the request succeeds, the button should transition into the \"Default\" state.'}),`\n`,(0,i.jsx)(e.li,{children:'If the request fails, the button should go back to the \"Liked\" state and an error message is shown below the button.'}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`]})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(g,t)})):g(t)}var f=I;var r=a(c());function p(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Some users might have the habit of double clicking on UI elements. By disabling the button after the first click, we avoid running into the situation where multiple requests are pending at the same time which is probably unintended and can lead to confusing outcomes.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(p,t)})):p(t)}var m=C;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The focus of this question is in the handling of the various states when there's a pending request.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"With every click, we run the \",(0,n.jsx)(e.code,{children:\"likeUnlikeAction\"}),\", which changes our state: it sets \",(0,n.jsx)(e.code,{children:\"pending\"}),\" value to \",(0,n.jsx)(e.code,{children:\"true\"}),\", indicating that it is waiting for a response from the subsequent HTTP request. We use the \",(0,n.jsx)(e.code,{children:\"HttpClient\"}),\" service with the provided url to establish a new value for our button (either \",(0,n.jsx)(e.code,{children:\"unlike\"}),\" or \",(0,n.jsx)(e.code,{children:\"like\"}),\") and we include this in the second argument as payload. By subscribing to this call, we will receive either a response or an error. If we receive a response, we change our \",(0,n.jsx)(e.code,{children:\"isPending\"}),\" state to \",(0,n.jsx)(e.code,{children:\"false\"}),\" because the call is finished and we no longer need to display a pending animation. We also set our \",(0,n.jsx)(e.code,{children:\"liked\"}),\" value to the opposite because in request response we have only 'success response'. If we encounter an error, we set \",(0,n.jsx)(e.code,{children:\"isPending\"}),\" to false and assign an error message from the error response.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"We'll need a few state variables:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"liked\"}),\": Tracks whether the button is in the default state or the liked state. Since there are only two states, we can use a boolean type to represent it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"isPending\"}),\": Determines if there's a pending background request.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"errorMessage\"}),\": Error message obtained from the back end when the API request fails.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"The rendering code is pretty straightforward since there isn't much dependency among the state variables when rendering the UI. No Typescript models (interface) required.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You might create services for HTTP requests and another service for maintaining the state.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,n.jsx)(e.code,{children:\"readonly\"}),\", \",(0,n.jsx)(e.code,{children:\"private\"}),\", \",(0,n.jsx)(e.code,{children:\"public\"}),\" and \",(0,n.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(m,{})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var M=D;return q(T);})();\n;return Component;"
}