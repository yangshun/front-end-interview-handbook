{
  "skeleton": "var Component=(()=>{var f=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!x.call(t,o)&&o!==i&&r(t,o,{get:()=>e[o],enumerable:!(h=m(e,o))||h.enumerable});return t};var d=(t,e,i)=>(i=t!=null?f(k(t)):{},a(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),j=t=>a(r({},\"__esModule\",{value:!0}),t);var c=w((I,l)=>{l.exports=_jsx_runtime});var L={};T(L,{default:()=>q});var s=d(c());var n=d(c());function u(t){let e=Object.assign({p:\"p\",img:\"img\",code:\"code\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Create a Like button which appearance changes based on the following states:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/like-button/like-button-states.png\",alt:\"Like Button States\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The heart and spinner icons are provided for your convenience. The focus of this question is on the handling of the various states, not so much on being pixel perfect. As for colors, you can use \",(0,n.jsx)(e.code,{children:\"#f00\"}),\" for the red and \",(0,n.jsx)(e.code,{children:\"#888\"}),\" for the gray.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the button's default state, when it is clicked, it goes into the loading state and a request is made to the provided back end API which has a 50% chance of succeeding/failing.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Success response\"}),': If the request was successful, the button changes to the \"Liked\" state.']}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Failure response\"}),': Otherwise it returns to the \"Default\"/\"Hovered\" state depending on whether the cursor is still over the button. The error message from the back end API should be shown below the button.']}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:'If the user clicks on a button in the \"Liked\" state, the reverse happens.'}),`\n`,(0,n.jsx)(e.h2,{children:\"Submission API\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"URL: \",(0,n.jsx)(e.code,{children:\"https://questions.greatfrontend.com/api/questions/like-button\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"HTTP Method: \",(0,n.jsx)(e.code,{children:\"POST\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Content Type: \",(0,n.jsx)(e.code,{children:\"json\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following fields are accepted in the \",(0,n.jsx)(e.strong,{children:\"request body\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"action\"}),\": A string of either \",(0,n.jsx)(e.code,{children:\"'like'\"}),\" or \",(0,n.jsx)(e.code,{children:\"'unlike'\"}),\" depending on the desired action.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Response\"}),`\n`,(0,n.jsx)(e.p,{children:\"The API has a 50% chance of succeeding (HTTP 200) or failing (HTTP 500) so as to make it easy for you to test the request failure cases. It returns a JSON payload of the following shape depending on the outcome.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Success\"}),\": \",(0,n.jsx)(e.code,{children:\"{ message: 'Success!' }\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Failure\"}),\": \",(0,n.jsx)(e.code,{children:\"{ message: 'Unknown error during attempted {{action}}. Please try again later.!' }\"})]}),`\n`]})]})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var g=y;function p(t){return(0,s.jsx)(g,{})}function P(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(p,t)})):p(t)}var q=P;return j(L);})();\n;return Component;",
  "solution": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var s in e)l(t,s,{get:e[s],enumerable:!0})},d=(t,e,s,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of y(e))!x.call(t,o)&&o!==s&&l(t,o,{get:()=>e[o],enumerable:!(h=v(e,o))||h.enumerable});return t};var a=(t,e,s)=>(s=t!=null?w(k(t)):{},d(e||!t||!t.__esModule?l(s,\"default\",{value:t,enumerable:!0}):s,t)),q=t=>d(l({},\"__esModule\",{value:!0}),t);var c=j((P,u)=>{u.exports=_jsx_runtime});var T={};_(T,{default:()=>M});var n=a(c());var i=a(c());function g(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:['\"Default\" state',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:'Hovering the button should show the \"Hovered\" state.'}),`\n`,(0,i.jsxs)(e.li,{children:[\"Clicking on the button should show a loading spinner.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:'If the request succeeds, the button should transition into the \"Liked\" state.'}),`\n`,(0,i.jsx)(e.li,{children:'If the request fails, the button should go back to the \"Default\" state and an error message is shown below the button.'}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Liked\" state',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Hovering the button in this state is undefined behavior. It's fine to not show any difference when hovering.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Clicking on the button should show a loading spinner.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:'If the request succeeds, the button should transition into the \"Default\" state.'}),`\n`,(0,i.jsx)(e.li,{children:'If the request fails, the button should go back to the \"Liked\" state and an error message is shown below the button.'}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`]})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(g,t)})):g(t)}var f=I;var r=a(c());function p(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Some users might have the habit of double clicking on UI elements. By disabling the button after the first click, we avoid running into the situation where multiple requests are pending at the same time which is probably unintended and can lead to confusing outcomes.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(p,t)})):p(t)}var m=C;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The focus of this question is in the handling of the various states when there's a pending request.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"With every click, we run the \",(0,n.jsx)(e.code,{children:\"likeUnlikeAction\"}),\", which changes our state: it sets \",(0,n.jsx)(e.code,{children:\"pending\"}),\" value to \",(0,n.jsx)(e.code,{children:\"true\"}),\", indicating that it is waiting for a response from the subsequent HTTP request. We use the \",(0,n.jsx)(e.code,{children:\"HttpClient\"}),\" service with the provided url to establish a new value for our button (either \",(0,n.jsx)(e.code,{children:\"unlike\"}),\" or \",(0,n.jsx)(e.code,{children:\"like\"}),\") and we include this in the second argument as payload. By subscribing to this call, we will receive either a response or an error. If we receive a response, we change our \",(0,n.jsx)(e.code,{children:\"isPending\"}),\" state to \",(0,n.jsx)(e.code,{children:\"false\"}),\" because the call is finished and we no longer need to display a pending animation. We also set our \",(0,n.jsx)(e.code,{children:\"liked\"}),\" value to the opposite because in request response we have only 'success response'. If we encounter an error, we set \",(0,n.jsx)(e.code,{children:\"isPending\"}),\" to false and assign an error message from the error response.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"We'll need a few state variables:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"liked\"}),\": Tracks whether the button is in the default state or the liked state. Since there are only two states, we can use a boolean type to represent it.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"isPending\"}),\": Determines if there's a pending background request.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"errorMessage\"}),\": Error message obtained from the back end when the API request fails.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"The rendering code is pretty straightforward since there isn't much dependency among the state variables when rendering the UI. No Typescript models (interface) required.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You might create services for HTTP requests and another service for maintaining the state.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,n.jsx)(e.code,{children:\"readonly\"}),\", \",(0,n.jsx)(e.code,{children:\"private\"}),\", \",(0,n.jsx)(e.code,{children:\"public\"}),\" and \",(0,n.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(m,{})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var M=D;return q(T);})();\n;return Component;"
}