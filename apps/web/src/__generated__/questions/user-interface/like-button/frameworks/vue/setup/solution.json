{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.vue\",\n    \"/src/HeartIcon.vue\",\n    \"/src/SpinnerIcon.vue\"\n  ],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/like-button-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { ref } from 'vue';\nimport HeartIcon from './HeartIcon.vue';\nimport SpinnerIcon from './SpinnerIcon.vue';\n\n// Determines if the button is in the default/liked state.\nconst liked = ref(false);\n// Whether there's a pending background API request.\nconst isPending = ref(false);\n// Error message to be shown if the API request failed.\nconst errorMessage = ref(null);\n\nasync function likeUnlikeAction() {\n  try {\n    isPending.value = true;\n    errorMessage.value = null;\n\n    const response = await fetch(\n      'https://questions.greatfrontend.com/api/questions/like-button',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          action: liked.value ? 'unlike' : 'like',\n        }),\n      },\n    );\n\n    if (!response.ok) {\n      const res = await response.json();\n      errorMessage.value = res.message;\n      return;\n    }\n\n    liked.value = !liked.value;\n  } finally {\n    isPending.value = false;\n  }\n}\n</script>\n\n<template>\n  <div class=\"button-container\">\n    <button\n      :class=\"[\n        'like-button',\n        liked\n          ? 'like-button--liked'\n          : 'like-button--default',\n      ]\"\n      :disabled=\"isPending\"\n      @click=\"likeUnlikeAction\">\n      <SpinnerIcon v-if=\"isPending\" />\n      <HeartIcon v-else />\n      {{ liked ? 'Liked' : 'Like' }}\n    </button>\n\n    <div v-if=\"errorMessage\" class=\"error-message\">\n      {{ errorMessage }}\n    </div>\n  </div>\n</template>\n\n<style>\n.error-message {\n  font-size: 12px;\n  margin-top: 8px;\n}\n\n.like-button {\n  --default-color: #888;\n  --active-color: red;\n\n  align-items: center;\n  border-style: solid;\n  border-radius: 32px;\n  border-width: 2px;\n  display: flex;\n  cursor: pointer;\n  font-weight: bold;\n  gap: 8px;\n  height: 32px;\n  padding: 4px 8px;\n}\n\n.like-button--default {\n  background-color: #fff;\n  border-color: var(--default-color);\n  color: var(--default-color);\n}\n\n.like-button:hover {\n  border-color: var(--active-color);\n  color: var(--active-color);\n}\n\n.like-button--liked,\n.like-button--liked:hover {\n  background-color: var(--active-color);\n  border-color: var(--active-color);\n  color: #fff;\n}\n</style>\n"
    },
    "/src/HeartIcon.vue": {
      "code": "<template>\n  <svg\n    fill=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n    width=\"16\"\n    height=\"16\">\n    <g>\n      <path\n        d=\"M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z\" />\n    </g>\n  </svg>\n</template>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/SpinnerIcon.vue": {
      "code": "<template>\n  <svg\n    :width=\"16\"\n    :height=\"16\"\n    viewBox=\"0 0 38 38\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    stroke=\"currentColor\">\n    <g fill=\"none\" fillRule=\"evenodd\">\n      <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n        <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n        <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"rotate\"\n            from=\"0 18 18\"\n            to=\"360 18 18\"\n            dur=\"1s\"\n            repeatCount=\"indefinite\" />\n        </path>\n      </g>\n    </g>\n  </svg>\n</template>\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/HeartIcon.vue",
      "/src/SpinnerIcon.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}