{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.js\",\n    \"/src/styles.css\",\n    \"/src/icons.js\"\n  ],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/like-button-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useState } from 'react';\nimport { HeartIcon, SpinnerIcon } from './icons';\n\nfunction classNames(...args) {\n  return args.filter(Boolean).join(' ');\n}\n\nexport default function App() {\n  // Determines if the button is in the default/liked state.\n  const [liked, setLiked] = useState(false);\n  // Whether there's a pending background API request.\n  const [isPending, setIsPending] = useState(false);\n  // Error message to be shown if the API request failed.\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  async function likeUnlikeAction() {\n    try {\n      setIsPending(true);\n      setErrorMessage(null);\n\n      const response = await fetch(\n        'https://questions.greatfrontend.com/api/questions/like-button',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            action: liked ? 'unlike' : 'like',\n          }),\n        },\n      );\n\n      if (!response.ok) {\n        const res = await response.json();\n        setErrorMessage(res.message);\n        return;\n      }\n\n      setLiked(!liked);\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  return (\n    <div className=\"button-container\">\n      <button\n        className={classNames(\n          'like-button',\n          liked\n            ? 'like-button--liked'\n            : 'like-button--default',\n        )}\n        disabled={isPending}\n        onClick={() => {\n          likeUnlikeAction();\n        }}>\n        {isPending ? <SpinnerIcon /> : <HeartIcon />}\n        {liked ? 'Liked' : 'Like'}\n      </button>\n      {errorMessage && (\n        <div className=\"error-message\">{errorMessage}</div>\n      )}\n    </div>\n  );\n}\n"
    },
    "/src/icons.js": {
      "code": "export function SpinnerIcon({ className }) {\n  return (\n    <svg\n      className={className}\n      width={16}\n      height={16}\n      viewBox=\"0 0 38 38\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke=\"currentColor\">\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n          <circle\n            strokeOpacity=\".5\"\n            cx=\"18\"\n            cy=\"18\"\n            r=\"18\"\n          />\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n            <animateTransform\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 18 18\"\n              to=\"360 18 18\"\n              dur=\"1s\"\n              repeatCount=\"indefinite\"\n            />\n          </path>\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nexport function HeartIcon({ className }) {\n  return (\n    <svg\n      className={className}\n      fill=\"currentColor\"\n      viewBox=\"0 0 24 24\"\n      width=\"16\"\n      height=\"16\">\n      <g>\n        <path d=\"M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z\"></path>\n      </g>\n    </svg>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.error-message {\n  font-size: 12px;\n  margin-top: 8px;\n}\n\n.like-button {\n  --default-color: #888;\n  --active-color: red;\n\n  align-items: center;\n  border-style: solid;\n  border-radius: 32px;\n  border-width: 2px;\n  display: flex;\n  cursor: pointer;\n  font-weight: bold;\n  gap: 8px;\n  height: 32px;\n  padding: 4px 8px;\n}\n\n.like-button--default {\n  background-color: #fff;\n  border-color: var(--default-color);\n  color: var(--default-color);\n}\n\n.like-button:hover {\n  border-color: var(--active-color);\n  color: var(--active-color);\n}\n\n.like-button--liked,\n.like-button--liked:hover {\n  background-color: var(--active-color);\n  border-color: var(--active-color);\n  color: #fff;\n}\n\n.like-button-icon {\n  display: flex;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css",
      "/src/icons.js"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}