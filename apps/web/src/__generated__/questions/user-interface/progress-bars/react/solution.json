{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/progress-bars-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useState } from 'react';\n\nfunction ProgressBar() {\n  const [startTransition, setStartTransition] =\n    useState(false);\n\n  // Start transition after first render and never\n  // apply this effect ever again.\n  useEffect(() => {\n    if (startTransition) {\n      return;\n    }\n\n    setStartTransition(true);\n  });\n\n  return (\n    <div className=\"bar\">\n      <div\n        className={[\n          'bar-contents',\n          startTransition && 'bar-contents--filled',\n        ]\n          .filter(Boolean)\n          .join(' ')}\n      />\n    </div>\n  );\n}\n\nexport default function App() {\n  const [bars, setBars] = useState(0);\n\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <button\n          onClick={() => {\n            setBars(bars + 1);\n          }}>\n          Add\n        </button>\n      </div>\n      <div className=\"bars\">\n        {Array(bars)\n          .fill(null)\n          .map((_, index) => (\n            <ProgressBar key={index} />\n          ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.bars {\n  display: flex;\n  flex-direction: column;\n  row-gap: 8px;\n}\n\n.bar {\n  background-color: #ccc;\n  height: 8px;\n}\n\n.bar-contents {\n  background-color: green;\n  height: 100%;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition-duration: 2000ms;\n  transition-property: transform;\n  transition-timing-function: linear;\n}\n\n.bar-contents--filled {\n  transform: scaleX(1);\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),S=(e,n)=>{for(var a in n)s(e,a,{get:n[a],enumerable:!0})},c=(e,n,a,h)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of b(n))!x.call(e,o)&&o!==a&&s(e,o,{get:()=>n[o],enumerable:!(h=g(n,o))||h.enumerable});return e};var l=(e,n,a)=>(a=e!=null?p(w(e)):{},c(n||!e||!e.__esModule?s(a,\"default\",{value:e,enumerable:!0}):a,e)),_=e=>c(s({},\"__esModule\",{value:!0}),e);var i=j((A,d)=>{d.exports=_jsx_runtime});var M={};S(M,{default:()=>C});var t=l(i());var r=l(i());function m(e){let n=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(n.ul,{children:[`\n`,(0,r.jsx)(n.li,{children:'Hitting \"Add\" appends a new empty progress bar to the bottom of the list which starts filling up as soon as it appears.'}),`\n`,(0,r.jsx)(n.li,{children:\"Can add multiple progress bars, which fill up independently.\"}),`\n`]})]})}function y(e={}){let{wrapper:n}=e.components||{};return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(m,e)})):m(e)}var u=y;function f(e){let n=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",a:\"a\",code:\"code\",pre:\"pre\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(n.p,{children:\"The solution can be split into three parts: (1) State, (2) Styling, and (3) Animation.\"}),`\n`,(0,t.jsx)(n.h3,{children:\"State\"}),`\n`,(0,t.jsx)(n.p,{children:'Since the progress bars do not interaction with each other and the animation uses a \"fire and forget\" model, we only need a single numerical value as state, which is the number of bars onscreen. Hitting the \"Add\" button increases the number of bars to be rendered.'}),`\n`,(0,t.jsx)(n.h3,{children:\"Styling\"}),`\n`,(0,t.jsxs)(n.p,{children:[\"Have a look at the \",(0,t.jsx)(n.a,{href:\"/questions/user-interface/progress-bar\",children:\"Progress Bar\"}),\" question for how to style a progress bar given a value out of 100. However, we'll use CSS \",(0,t.jsx)(n.code,{children:\"transform\"}),\"s instead of changing the \",(0,t.jsx)(n.code,{children:\"width\"}),\" as CSS transforms run on the GPU which results in better performance for animations.\"]}),`\n`,(0,t.jsx)(n.h3,{children:\"Animation\"}),`\n`,(0,t.jsxs)(n.p,{children:[`As mentioned above, each progress bar's animation uses a \"fire and forget\" model, meaning they are non-interruptible and do not interact with each other. CSS transitions work very well for animating the bars from 0 to 100 and there's no need to resort to JavaScript. Note that we have to use `,(0,t.jsx)(n.code,{children:\"transform-origin: left\"}),' so that the bar is \"anchored\" on the left and expands rightwards. Without that, the transition will appear to expand outwards from the center.']}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-css\",children:`.bar-contents {\n  background-color: green;\n  height: 100%;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition-duration: 2000ms;\n  transition-property: transform;\n  transition-timing-function: linear;\n}\n\n.bar-contents--filled {\n  transform: scaleX(1);\n}\n`})}),`\n`,(0,t.jsx)(u,{})]})}function v(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(f,e)})):f(e)}var C=v;return _(M);})();\n;return Component;"
}