{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/file-explorer-react-skeleton\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import FileExplorer from './FileExplorer';\n\nexport default function App() {\n  const data = [\n    {\n      id: 1,\n      name: 'README.md',\n    },\n    {\n      id: 2,\n      name: 'Documents',\n      children: [\n        {\n          id: 3,\n          name: 'Word.doc',\n        },\n        {\n          id: 4,\n          name: 'Powerpoint.ppt',\n        },\n      ],\n    },\n    {\n      id: 5,\n      name: 'Downloads',\n      children: [\n        {\n          id: 6,\n          name: 'unnamed.txt',\n        },\n        {\n          id: 7,\n          name: 'Misc',\n          children: [\n            {\n              id: 8,\n              name: 'foo.txt',\n            },\n            {\n              id: 9,\n              name: 'bar.txt',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return <FileExplorer data={data} />;\n}\n"
    },
    "/src/FileExplorer.js": {
      "code": "import { useState } from 'react';\n\nexport default function FileExplorer({ data }) {\n  const [message, setMessage] = useState('Hello world');\n\n  return (\n    <div>\n      <h1>{message}</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/FileExplorer.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var j=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),D=(i,e)=>{for(var t in e)a(i,t,{get:e[t],enumerable:!0})},c=(i,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of y(e))!b.call(i,r)&&r!==t&&a(i,r,{get:()=>e[r],enumerable:!(s=x(e,r))||s.enumerable});return i};var d=(i,e,t)=>(t=i!=null?f(g(i)):{},c(e||!i||!i.__esModule?a(t,\"default\",{value:i,enumerable:!0}):t,i)),w=i=>c(a({},\"__esModule\",{value:!0}),i);var o=j((v,h)=>{h.exports=_jsx_runtime});var k={};D(k,{default:()=>M});var l=d(o());var n=d(o());function p(i){let e=Object.assign({p:\"p\",ol:\"ol\",li:\"li\",h2:\"h2\",ul:\"ul\",pre:\"pre\",code:\"code\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Given an array of file objects, build a component that displays them in a hierarchical tree format.\"}),`\n`,(0,n.jsx)(e.p,{children:\"There are two types of objects \\u2013 files and directories:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Files are essentially leaf nodes of the tree, they do not have children.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Directories can contain other objects \\u2013 either files or directories.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"You may assume that the IDs and names within the same directory are unique.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The names of the directories/files should be displayed.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Directories\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Contents of the directory should be displayed in a manner that indicates it belongs within the directory. The recommended approach is to indent the contents to the right.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Directories can be expanded and collapsed. Clicking on a directory should toggle its expanded/collapsed state.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Directories should appear before files. All the items should be sorted alphabetically within their respective categories.\"}),`\n`,(0,n.jsx)(e.li,{children:\"You may style the expand/collapse functionality in a way you prefer as long as it is clear that the item is a directory and whether it is in the expanded or collapsed state.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Directories can be empty.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Files\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Files are not expandable and cannot be interacted with.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"The focus of the exercise is on the functionality and not the styling.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Data format\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`interface FileObject {\n  id: number;\n  name: string;\n  children?: FileObject[];\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Example data:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const fileData = [\n  {\n    id: 1,\n    name: 'README.md',\n  },\n  {\n    id: 2,\n    name: 'Documents',\n    children: [\n      {\n        id: 3,\n        name: 'Word.doc',\n      },\n      {\n        id: 4,\n        name: 'Powerpoint.ppt',\n      },\n    ],\n  },\n];\n`})})]})}function _(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(p,i)})):p(i)}var m=_;function u(i){return(0,l.jsx)(m,{})}function F(i={}){let{wrapper:e}=i.components||{};return e?(0,l.jsx)(e,Object.assign({},i,{children:(0,l.jsx)(u,i)})):u(i)}var M=F;return w(k);})();\n;return Component;"
}