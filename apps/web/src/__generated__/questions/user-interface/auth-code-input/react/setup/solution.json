{
  "author": "utpal-d4l",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/App.tsx\",\n    \"/src/AuthCodeInput.tsx\",\n    \"/src/InputDigit.tsx\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/AuthCodeInput.tsx\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/auth-code-input-react-solution\",\n  \"author\": \"utpal-d4l\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import { useState } from 'react';\n\nimport AuthCodeInput from './AuthCodeInput';\n\nfunction App() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  function onSubmit(code: string) {\n    setIsSubmitting(true);\n    fetch(\n      'https://questions.greatfrontend.com/api/questions/auth-code-input',\n      {\n        method: 'POST',\n        body: JSON.stringify({ otp: code }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      },\n    )\n      .then((res) => res.text())\n      .then((res) => alert(res))\n      .catch(() =>\n        alert(\n          'Something went wrong. Please try again later.',\n        ),\n      )\n      .finally(() => setIsSubmitting(false));\n  }\n\n  return (\n    <AuthCodeInput\n      length={6}\n      onSubmit={onSubmit}\n      isDisabled={isSubmitting}\n    />\n  );\n}\n\nexport default App;\n"
    },
    "/src/AuthCodeInput.tsx": {
      "code": "import { useState } from 'react';\nimport InputDigit from './InputDigit';\n\nconst singleNumRegex = /^\\d$/;\nconst numRegex = /^\\d+$/;\n\nexport default function AuthCodeInput({\n  length,\n  isDisabled = false,\n  onSubmit,\n}: Readonly<{\n  length: number;\n  isDisabled: boolean;\n  onSubmit: (code: string) => void;\n}>) {\n  const [code, setCode] = useState(Array(length).fill(''));\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  function clampIndex(index: number) {\n    if (index <= 0) {\n      return 0;\n    }\n\n    if (index >= length) {\n      return length - 1;\n    }\n\n    return index;\n  }\n\n  function onFocus(index: number) {\n    setFocusedIndex(index);\n  }\n\n  function onKeyDown(\n    event: React.KeyboardEvent<HTMLInputElement>,\n    index: number,\n  ) {\n    switch (event.key) {\n      case 'ArrowLeft':\n        setFocusedIndex(clampIndex(focusedIndex - 1));\n        break;\n      case 'ArrowRight':\n        setFocusedIndex(clampIndex(focusedIndex + 1));\n        break;\n      case 'Backspace':\n        if (code[index]) {\n          setCode(\n            code.map((codeDigit, idx) =>\n              index === idx ? '' : codeDigit,\n            ),\n          );\n        } else if (index - 1 >= 0) {\n          setCode(\n            code.map((codeDigit, idx) =>\n              index - 1 === idx ? '' : codeDigit,\n            ),\n          );\n          setFocusedIndex(clampIndex(index - 1));\n        }\n        break;\n      default: {\n        const value = event.key;\n        if (!singleNumRegex.test(value)) {\n          return;\n        }\n\n        setCode(\n          code.map((codeDigit, idx) =>\n            index === idx ? String(value) : codeDigit,\n          ),\n        );\n        setFocusedIndex(clampIndex(focusedIndex + 1));\n        break;\n      }\n    }\n  }\n\n  function onPaste(\n    event: React.ClipboardEvent<HTMLInputElement>,\n  ) {\n    event.preventDefault();\n    const pastedCode = event.clipboardData.getData('text');\n\n    if (!numRegex.test(pastedCode)) {\n      return;\n    }\n\n    setCode(\n      code.map(\n        (codeDigit, idx) => pastedCode[idx] ?? codeDigit,\n      ),\n    );\n    setFocusedIndex(clampIndex(pastedCode.length));\n  }\n\n  function onReset() {\n    setCode(Array(length).fill(''));\n    setFocusedIndex(0);\n  }\n\n  const isSubmitEnabled = code.every((codeDigit) =>\n    Boolean(codeDigit),\n  );\n  const isResetEnabled = code.some((codeDigit) =>\n    Boolean(codeDigit),\n  );\n\n  return (\n    <div className=\"wrapper\">\n      <form\n        className=\"container\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          onSubmit(code.join(''));\n        }}>\n        <div className=\"flex-container\">\n          {code.map((codeDigit, index) => (\n            <InputDigit\n              key={index}\n              value={codeDigit}\n              isFocused={focusedIndex === index}\n              disabled={isDisabled}\n              onFocus={() => onFocus(index)}\n              onKeyDown={(event) => onKeyDown(event, index)}\n              onPaste={onPaste}\n            />\n          ))}\n        </div>\n        <div className=\"flex-container\">\n          <button\n            type=\"reset\"\n            className=\"button button--secondary\"\n            disabled={!isResetEnabled || isDisabled}\n            onClick={onReset}>\n            Reset\n          </button>\n          <button\n            type=\"submit\"\n            className=\"button button--primary\"\n            disabled={!isSubmitEnabled || isDisabled}>\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/InputDigit.tsx": {
      "code": "import {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n} from 'react';\n\nexport default function InputDigit({\n  value,\n  isFocused,\n  ...props\n}: Readonly<{\n  value: number;\n  isFocused: boolean;\n}> &\n  Omit<InputHTMLAttributes<HTMLInputElement>, 'checked'>) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isFocused) {\n      inputRef.current?.focus();\n    }\n  }, [isFocused]);\n\n  return (\n    <input\n      ref={inputRef}\n      type=\"text\"\n      className=\"input-box\"\n      maxLength={1}\n      inputMode=\"numeric\"\n      autoComplete=\"one-time-code\"\n      value={value}\n      {...props}\n    />\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "* {\n  box-sizing: border-box;\n  margin: 0;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  height: 100vh;\n  width: 100vw;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.input-box {\n  --size: 3rem;\n  height: var(--size);\n  width: var(--size);\n  text-align: center;\n  border: none;\n  outline: none;\n  background: #eee;\n  font-weight: 600;\n  font-size: 1.5rem;\n}\n\n.input-box::selection {\n  background-color: #000;\n  color: #fff;\n}\n\n.input-box:focus {\n  color: #000;\n  outline: 2px solid #000;\n}\n\n.input-box:disabled {\n  cursor: not-allowed;\n}\n\n.button {\n  border: 2px solid black;\n  outline: none;\n  padding: 0.5rem 1.5rem;\n  font-size: 1rem;\n  cursor: pointer;\n}\n\n.button:focus {\n  outline: 2px solid #000;\n  outline-offset: 1px;\n}\n\n.button:disabled {\n  opacity: 0.25;\n  cursor: not-allowed;\n  transition: all 0.3s linear;\n}\n\n.button--primary {\n  background-color: #000;\n  color: #fff;\n}\n\n.button--secondary {\n  background-color: transparent;\n  color: black;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/AuthCodeInput.tsx",
      "/src/InputDigit.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/AuthCodeInput.tsx",
    "environment": "create-react-app"
  }
}