{
  "skeleton": "var Component=(()=>{var f=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),T=(n,e)=>{for(var i in e)l(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!w.call(n,o)&&o!==i&&l(n,o,{get:()=>e[o],enumerable:!(d=g(e,o))||d.enumerable});return n};var a=(n,e,i)=>(i=n!=null?f(b(n)):{},s(e||!n||!n.__esModule?l(i,\"default\",{value:n,enumerable:!0}):i,n)),j=n=>s(l({},\"__esModule\",{value:!0}),n);var c=y((D,h)=>{h.exports=_jsx_runtime});var P={};T(P,{default:()=>v});var r=a(c());var t=a(c());function u(n){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",a:\"a\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"Build an auth code input component that allows users to enter a 6-digit authorization code and submit it.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/img/questions/auth-code-input/auth-code-input-example.png\",alt:\"Auth code input example\"})}),`\n`,(0,t.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Entering input\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Each input field should only allow one digit between 0 to 9.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Entering a valid input will move focus to the next input except when it is the last input.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Hitting \",(0,t.jsx)(\"kbd\",{children:\"Backspace\"}),\" will:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Clear the current field if is not empty.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Move focus to the previous field if the current field is empty.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.li,{children:\"Pasting should clear all fields and replace the fields with the pasted content.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Buttons\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:'\"Submit\" button submits the OTP. It is disabled until all the input fields are filled.'}),`\n`,(0,t.jsx)(e.li,{children:'\"Reset\" button clears all the fields. It is disabled if all the input fields are empty.'}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Submitting the form should make a \",(0,t.jsx)(e.code,{children:\"POST\"}),\" request to \",(0,t.jsx)(e.code,{children:\"https://questions.greatfrontend.com/api/questions/auth-code-input\"}),\" with a body of \",(0,t.jsx)(e.code,{children:\"{ otp: '6_DIGIT_OTP' }\"}),\".\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"HTTP 204 is returned if the OTP is \",(0,t.jsx)(e.code,{children:\"'123456'\"}),\" (the API is hardcoded to only accept this value).\"]}),`\n`,(0,t.jsx)(e.li,{children:\"HTTP 403 is returned otherwise.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Display a success/failure message depending on the response (you can use \",(0,t.jsx)(e.code,{children:\"alert()\"}),\").\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"These are just the common 2FA basic behaviors, there are more edge cases to consider and we shan't list them all as it is a good practice for you to think through them on your own.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here's a \",(0,t.jsx)(e.a,{href:\"https://github.com/drac94/react-auth-code-input\",children:\"decent auth code input example\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Source\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This question is adapted from \",(0,t.jsx)(e.a,{href:\"https://frontendeval.com/questions/code-input\",children:\"FrontendEval's Two-factor Code Input question\"}),\".\"]})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(u,n)})):u(n)}var p=_;function m(n){return(0,r.jsx)(p,{})}function q(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(m,n)})):m(n)}var v=q;return j(P);})();\n;return Component;",
  "solution": "var Component=(()=>{var v=Object.create;var d=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var T=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var o in e)d(t,o,{get:e[o],enumerable:!0})},c=(t,e,o,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of w(e))!x.call(t,s)&&s!==o&&d(t,s,{get:()=>e[s],enumerable:!(a=y(e,s))||a.enumerable});return t};var h=(t,e,o)=>(o=t!=null?v(k(t)):{},c(e||!t||!t.__esModule?d(o,\"default\",{value:t,enumerable:!0}):o,t)),_=t=>c(d({},\"__esModule\",{value:!0}),t);var r=T((F,u)=>{u.exports=_jsx_runtime});var M={};j(M,{default:()=>D});var n=h(r());var i=h(r());function p(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Entering input\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Upon initial load, the first input is focused\"}),`\n`,(0,i.jsx)(e.li,{children:\"Entering a valid input should fill the input field and move the focus to the next input field\"}),`\n`,(0,i.jsx)(e.li,{children:\"Invalid input should not be allowed in input field\"}),`\n`,(0,i.jsx)(e.li,{children:\"No interaction should be allowed when a network request is in progress\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Deleting input\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Pressing \",(0,i.jsx)(\"kbd\",{children:\"Backspace\"}),\" should delete the current input (if filled) or move to previous input field and delete any input present from previous input field\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Navigating input fields\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Pressing \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" / \",(0,i.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" and left/right arrow buttons should move the focus to left/right based on the pressed key\"]}),`\n`,(0,i.jsx)(e.li,{children:\"After navigation, the input fields should be able to be replaced with a new number without any additional keystrokes\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Pasting input\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Pasting a code should paste the code if the pasted code is valid input\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Reset\" button',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Should be disabled if no input is present\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on it should erase all input fields and focus on the first input\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Submit\" button',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Submit should be enabled only when all input field are filled with valid input\"}),`\n`]}),`\n`]}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(p,t)})):p(t)}var f=C;var l=h(r());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,l.jsxs)(e.p,{children:[\"Use of semantic HTML elements like \",(0,l.jsx)(e.code,{children:\"<form>\"}),\", \",(0,l.jsx)(e.code,{children:\"<input>\"}),\", \",(0,l.jsx)(e.code,{children:\"<button>\"}),\", etc. will automatically provide with some accessibility.\"]}),`\n`,(0,l.jsxs)(e.ul,{children:[`\n`,(0,l.jsxs)(e.li,{children:[(0,l.jsx)(\"kbd\",{children:\"Tab\"}),\" will move the focus to the next field\"]}),`\n`,(0,l.jsxs)(e.li,{children:[(0,l.jsx)(\"kbd\",{children:\"Shift\"}),\" + \",(0,l.jsx)(\"kbd\",{children:\"Tab\"}),` will move the focus to the\nprevious field`]}),`\n`]}),`\n`,(0,l.jsxs)(e.p,{children:[\"Note: Other key presses are handled via \",(0,l.jsx)(e.code,{children:\"onKeyDown\"}),\" function.\"]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,l.jsx)(e,Object.assign({},t,{children:(0,l.jsx)(g,t)})):g(t)}var b=S;function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h3:\"h3\",strong:\"strong\",ol:\"ol\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The complexity of an auth code input component lies in the user experience, the custom input handling, and focus management:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Instead of a single \",(0,n.jsx)(e.code,{children:\"<input>\"}),\", the code is split across N \",(0,n.jsx)(e.code,{children:\"<input>\"}),\" fields\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Focus management is extremely hard to get right for an auth code input component:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Entering values\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Users should be able to type in the values without using any arrow keys\"}),`\n`,(0,n.jsx)(e.li,{children:\"The focus should shift automatically after an input field is filled\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Erasing values\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Users should to be able to erase all the input fields just by using the \",(0,n.jsx)(\"kbd\",{children:\"Backspace\"}),\" key\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Hitting the \",(0,n.jsx)(\"kbd\",{children:\"Backspace\"}),\" key should erase the current value. It should also focus on the previous value if the current input field is empty\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Traversing between fields\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Traversal of input fields should be possible using just the usual arrow keys and \",(0,n.jsx)(\"kbd\",{children:\"Tab\"}),\" key\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"When users is focused on an input field, they expect to be able to type the new value \\u2013 any existing values should be replaced and focus should move to the next field\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"There aren't too many state variables necessary as the complexity lies in focus management.\"}),`\n`,(0,n.jsx)(e.p,{children:'Naturally, we will need state to store the code. Strictly speaking, uncontrolled inputs can be used but keeping the input values within state will enable us to enable/disable the \"Reset\" and \"Submit\" button appropriately.'}),`\n`,(0,n.jsxs)(e.p,{children:[\"It will be necessary to have finegrain control over which input field is focused, thus a \",(0,n.jsx)(e.code,{children:\"focusedIndex\"}),\" state value will be helpful.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Thus, two state values are present:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"code\"}),\": This state stores the auth code entered by the user as a string.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"focusedIndex\"}),\": This state stores the index of the currently focused input field.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Input handling\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In React, a behavior of the \",(0,n.jsx)(e.code,{children:\"onChange\"}),\" prop on \",(0,n.jsx)(e.code,{children:\"<input>\"}),\" that people might not pay attention to is that it is \",(0,n.jsx)(e.strong,{children:\"only fired when the value of an input changes\"}),\". For the input fields in this component, we want to respond to keypress events even if the user enters the same value within the field, as we want to move to the next input field if a valid number was entered.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since we also need to handle other keyboard events like left/right arrows (move to previous/next fields), backspace (erase current value and move to next field), we can add a listener for the \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" event that handles these special keys as well as the number keys. This is one of the rare instances where you respond to input without using the \",(0,n.jsx)(e.code,{children:\"onChange\"}),\" callback. This allows us to ignore whatever is in the input field, replace with a new value, and focus on the next field.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To handle the following keys:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Left Arrow\"}),\": Shifts the focus to the left of the currently focused input field.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Right Arrow\"}),\": Shifts the focus to the right of the currently focused input field.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Backspace\"}),\": If the currently focused input field is filled, delete it. Otherwise, shift the focus to the previous input field and delete any character present from the previous input field.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Others\"}),\": Check if the newly-entered value is valid. If so, update \",(0,n.jsx)(e.code,{children:\"code\"}),\" and shift the focus to the next input field.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Convenient way of deleting and replacing of values\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Normally, when focusing on input fields, a cursor is created within the field to allow modification of the value. However for auth code inputs, each input field only allows a single digit, and it's not meaningful to render the cursor at all if the input field is already filled. It would be more useful to let the user delete the field or replace existing value with a single keystroke \\u2013 via the \",(0,n.jsx)(\"kbd\",{children:\"Backspace\"}),\" key or a new number key respectively. By listening to \",(0,n.jsx)(e.code,{children:\"keydown\"}),\" events, we can respond appropriately as explained in the previous section. This is harder to achieve using the \",(0,n.jsx)(e.code,{children:\"onChange\"}),\" callback.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Pasting values\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Often, rather than entering the numbers manually, users will copy out the auth code from an email or a message to be pasted in. Hence we also support pasting of auth codes. This is done by adding a \",(0,n.jsx)(e.code,{children:\"paste\"}),\" event listener to the \",(0,n.jsx)(e.code,{children:\"<input>\"}),\"s and using \",(0,n.jsx)(e.code,{children:\"event.clipboardData.getData('text')\"}),\" to get the clipboard value. Validation should be done on the clipboard value to ensure the pasted values is valid, and if so, fills the input fields accordingly.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The current implementation replaces the values from the start, regardless of which input field received the paste event. Hence it is not possible to complete the code a partially-filled component by pasting the rest of the code.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This behavior might not be the most ideal, but is acceptable given that:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"When the auth code is copied, it is usually the entire code.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Usually, the auth code is pasted when focus is on the first input field.\"}),`\n`]}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(b,{})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var D=I;return _(M);})();\n;return Component;"
}