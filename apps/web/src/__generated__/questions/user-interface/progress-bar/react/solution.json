{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/progress-bar-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import ProgressBar from './ProgressBar';\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <ProgressBar value={0} />\n      <ProgressBar value={25} />\n      <ProgressBar value={50} />\n      <ProgressBar value={75} />\n      <ProgressBar value={100} />\n      <ProgressBar value={2} />\n      <ProgressBar value={-10} />\n      <ProgressBar value={120} />\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/ProgressBar.js": {
      "code": "const MIN = 0;\nconst MAX = 100;\n\nexport default function ProgressBar({ value }) {\n  // Handle invalid values and convert them to be within [0, 100].\n  const clampedValue = Math.min(Math.max(value, MIN), MAX);\n\n  return (\n    <div className=\"progress\">\n      <div\n        className=\"progress-bar\"\n        style={{ width: `${clampedValue}%` }}\n        role=\"progressbar\"\n        aria-valuenow={clampedValue}\n        aria-valuemin={MIN}\n        aria-valuemax={MAX}>\n        {clampedValue}%\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.progress {\n  background-color: rgb(233, 236, 239);\n  border: 1px solid #c5c5c5;\n  border-radius: 8px;\n  height: 20px;\n  overflow: hidden;\n}\n\n.progress-bar {\n  background-color: #0d6efd;\n  color: #fff;\n  height: 100%;\n  overflow: hidden;\n  text-align: center;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/ProgressBar.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/ProgressBar.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var a=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),F=(n,e)=>{for(var s in e)a(n,s,{get:e[s],enumerable:!0})},h=(n,e,s,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of y(e))!v.call(n,c)&&c!==s&&a(n,c,{get:()=>e[c],enumerable:!(d=j(e,c))||d.enumerable});return n};var l=(n,e,s)=>(s=n!=null?x(_(n)):{},h(e||!n||!n.__esModule?a(s,\"default\",{value:n,enumerable:!0}):s,n)),M=n=>h(a({},\"__esModule\",{value:!0}),n);var i=w((N,u)=>{u.exports=_jsx_runtime});var S={};F(S,{default:()=>X});var o=l(i());var r=l(i());function m(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Valid values: 25, 50, 75.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Boundary values: 0, 100.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Invalid values: -10, 120.\"}),`\n`,(0,r.jsx)(e.li,{children:\"For small values, the percentage labels are rendered appropriately.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Filled bar does not exceed rounded corners.\"}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(m,n)})):m(n)}var p=C;var t=l(i());function g(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"overflow: hidden\"}),\" has to be added to \",(0,t.jsx)(e.code,{children:\".progress-bar\"}),\" because of the rounded corners, so that the filled progress doesn't stick out of the rounded corners.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Progress values outside the range of [0, 100] should be handled well; they should not cause layout issues.\"}),`\n`,(0,t.jsx)(e.li,{children:\"For small values, there might not be enough space to display the percentage label. We can either not show anything or truncate the display.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"We can use CSS transforms (e.g. \",(0,t.jsx)(e.code,{children:\"scale\"}),\") as opposed to changing the \",(0,t.jsx)(e.code,{children:\"width\"}),\" property, which is better for performance if there's a need for animation.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'role=\"progressbar\"'}),\" and \",(0,t.jsx)(e.code,{children:\"aria\"}),\" values are added to the component for a11y reasons, so that screen readers can accurately depict the component.\"]}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var f=D;function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Filling the bar proportionately to the progress (a number between 0-100, inclusive) can be accomplished using the \",(0,o.jsx)(e.code,{children:\"style\"}),\" attribute on React elements. Since the value is dynamic, we cannot possibly write classes for it beforehand and we have to use inline styles.\"]}),`\n`,(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(f,{})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(b,n)})):b(n)}var X=O;return M(S);})();\n;return Component;"
}