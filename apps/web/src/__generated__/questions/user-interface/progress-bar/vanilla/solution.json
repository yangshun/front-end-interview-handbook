{
  "author": "yangshun",
  "files": {
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div id=\"progress-0\" class=\"progress\"></div>\n      <div id=\"progress-25\" class=\"progress\"></div>\n      <div id=\"progress-50\" class=\"progress\"></div>\n      <div id=\"progress-75\" class=\"progress\"></div>\n      <div id=\"progress-100\" class=\"progress\"></div>\n      <div id=\"progress-2\" class=\"progress\"></div>\n      <div id=\"progress--10\" class=\"progress\"></div>\n      <div id=\"progress-120\" class=\"progress\"></div>\n      <hr />\n      <label>\n        <div>Control progress</div>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          value=\"50\"\n          id=\"slider\" />\n      </label>\n      <div id=\"progress-slider\" class=\"progress\"></div>\n    </div>\n\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/progress-bar-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  function progressBar($rootElement, initialValue) {\n    const MIN = 0;\n    const MAX = 100;\n    $rootElement.classList.add('progress');\n\n    const $progressBarEl = document.createElement('div');\n    $progressBarEl.className = 'progress-bar';\n    // Set attributes for a11y.\n    $progressBarEl.setAttribute('role', 'progressbar');\n    $progressBarEl.setAttribute('aria-valuemin', MIN);\n    $progressBarEl.setAttribute('aria-valuemax', MAX);\n\n    function setValue(value) {\n      // Handle invalid values and convert them to be within [0, 100].\n      const clampedValue = Math.min(\n        Math.max(value, MIN),\n        MAX,\n      );\n\n      $progressBarEl.style.width = `${clampedValue}%`;\n      $progressBarEl.textContent = `${clampedValue}%`;\n      $progressBarEl.setAttribute(\n        'aria-valuenow',\n        clampedValue,\n      );\n    }\n\n    $rootElement.appendChild($progressBarEl);\n    setValue(initialValue);\n\n    return {\n      setValue,\n    };\n  }\n\n  // Initialize some examples.\n  progressBar(document.querySelector('#progress-0'), 0);\n  progressBar(document.querySelector('#progress-25'), 25);\n  progressBar(document.querySelector('#progress-50'), 50);\n  progressBar(document.querySelector('#progress-75'), 75);\n  progressBar(document.querySelector('#progress-100'), 100);\n  progressBar(document.querySelector('#progress-2'), 2);\n  progressBar(document.querySelector('#progress--10'), -10);\n  progressBar(document.querySelector('#progress-120'), 120);\n\n  // Initialize the slider example which controls the progress of\n  // the progress bar below.\n  const progressSlider = progressBar(\n    document.querySelector('#progress-slider'),\n    50,\n  );\n\n  document\n    .querySelector('#slider')\n    .addEventListener('change', (event) => {\n      progressSlider.setValue(event.target.value);\n    });\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n.progress {\n  background-color: rgb(233, 236, 239);\n  border: 1px solid #c5c5c5;\n  border-radius: 8px;\n  height: 20px;\n  overflow: hidden;\n}\n\n.progress-bar {\n  background-color: #0d6efd;\n  color: #fff;\n  height: 100%;\n  overflow: hidden;\n  text-align: center;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var i=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),M=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},h=(n,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of j(e))!_.call(n,a)&&a!==o&&i(n,a,{get:()=>e[a],enumerable:!(d=y(e,a))||d.enumerable});return n};var l=(n,e,o)=>(o=n!=null?x(w(n)):{},h(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),F=n=>h(i({},\"__esModule\",{value:!0}),n);var c=v((L,u)=>{u.exports=_jsx_runtime});var S={};M(S,{default:()=>X});var s=l(c());var r=l(c());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Valid values: 25, 50, 75.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Boundary values: 0, 100.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Invalid values: -10, 120.\"}),`\n`,(0,r.jsx)(e.li,{children:\"For small values, the percentage labels are rendered appropriately.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Filled bar does not exceed rounded corners.\"}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(p,n)})):p(n)}var m=C;var t=l(c());function g(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"overflow: hidden\"}),\" has to be added to \",(0,t.jsx)(e.code,{children:\".progress-bar\"}),\" because of the rounded corners, so that the filled progress doesn't stick out of the rounded corners.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Progress values outside the range of [0, 100] should be handled well; they should not cause layout issues.\"}),`\n`,(0,t.jsx)(e.li,{children:\"For small values, there might not be enough space to display the percentage label. We can either not show anything or truncate the display.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"We can use CSS transforms (e.g. \",(0,t.jsx)(e.code,{children:\"scale\"}),\") as opposed to changing the \",(0,t.jsx)(e.code,{children:\"width\"}),\" property, which is better for performance if there's a need for animation.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:'role=\"progressbar\"'}),\" and \",(0,t.jsx)(e.code,{children:\"aria\"}),\" values are added to the component for a11y reasons, so that screen readers can accurately depict the component.\"]}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var f=D;function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,s.jsx)(e.p,{children:\"Create a function to turn a DOM element into a progress bar. We then construct the necessary inner DOM elements and set the appropriate styling and add a label within to indicate the progress percentage.\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"Filling the bar proportionately to the progress (a number between 0-100, inclusive) can be accomplished using the \",(0,s.jsx)(e.code,{children:\"Element.style.width\"}),\" property . Since the value is dynamic, we cannot possibly write classes for it beforehand and we have to use inline styles.\"]}),`\n`,(0,s.jsx)(e.p,{children:\"It's a good practice to expose a method to change the progress percentage in case as it is common for the progress changes with time. Its usage is shown with the progress slider at the bottom.\"}),`\n`,(0,s.jsx)(m,{}),`\n`,(0,s.jsx)(f,{})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(b,n)})):b(n)}var X=O;return F(S);})();\n;return Component;"
}