{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/generate-table-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ".app {\n  align-items: center;\n  display: flex;\n  font-size: 12px;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n"
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"app\">\n  <app-form (onFormSubmit)=\"formSubmit($event)\" />\n  <app-table *ngIf=\"formState\" [data]=\"formState\" />\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import {\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { FormState } from './models';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent {\n  formState!: FormState;\n\n  formSubmit(formState: FormState): void {\n    this.formState = formState;\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { TableComponent } from './components/table/table.component';\nimport { FormComponent } from './components/form/form.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TableComponent,\n    FormComponent,\n  ],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/components/form/form.component.css": {
      "code": ""
    },
    "/src/app/components/form/form.component.html": {
      "code": "<form\n  id=\"form\"\n  (submit)=\"submitForm($event)\"\n  ngNativeValidate>\n  <div>\n    <label for=\"rows\">Rows</label>\n    <input\n      id=\"rows\"\n      name=\"rows\"\n      type=\"number\"\n      min=\"1\"\n      required />\n  </div>\n  <div>\n    <label for=\"columns\">Columns</label>\n    <input\n      id=\"columns\"\n      name=\"columns\"\n      type=\"number\"\n      min=\"1\"\n      required />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>\n"
    },
    "/src/app/components/form/form.component.ts": {
      "code": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { FormState } from '../../models';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormComponent {\n  @Output()\n  readonly onFormSubmit = new EventEmitter<FormState>();\n\n  submitForm(event: any): void {\n    event.preventDefault();\n    const data = new FormData(event.target);\n    const rows = Number(data.get('rows'));\n    const columns = Number(data.get('columns'));\n    if (rows && columns) {\n      this.onFormSubmit.emit({ rows, cols: columns });\n    }\n  }\n}\n"
    },
    "/src/app/components/table/table.component.css": {
      "code": ""
    },
    "/src/app/components/table/table.component.html": {
      "code": "<table *ngIf=\"tableData\">\n  <tbody>\n    <tr\n      *ngFor=\"let row of tableData; trackBy: trackByIndex\">\n      <td *ngFor=\"let col of row; trackBy: trackByIndex\">\n        {{ col }}\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
    },
    "/src/app/components/table/table.component.ts": {
      "code": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n} from '@angular/core';\nimport { TableData } from '../../models';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  tableData!: number[][];\n\n  @Input()\n  set data(tableData: TableData) {\n    this.tableData = [];\n    for (let row = 0; row < tableData.rows; row++) {\n      const rowData: number[] = [];\n\n      for (let col = 0; col < tableData.cols; col++) {\n        const cellValue =\n          col % 2 === 0\n            ? tableData.rows * col + (row + 1)\n            : tableData.rows * (col + 1) - row;\n        rowData.push(cellValue);\n      }\n\n      this.tableData.push(rowData);\n    }\n  }\n\n  trackByIndex(index: number, item: any): number {\n    return index;\n  }\n}\n"
    },
    "/src/app/models/form-state.model.ts": {
      "code": "export interface FormState {\n  rows: number;\n  cols: number;\n}\n"
    },
    "/src/app/models/index.ts": {
      "code": "export * from './form-state.model';\nexport * from './table-data.model';\n"
    },
    "/src/app/models/table-data.model.ts": {
      "code": "import { FormState } from './form-state.model';\n\nexport interface TableData extends FormState {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\nlabel + input {\n  margin-left: 8px;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ntable td {\n  border: 1px solid #000;\n  padding: 8px;\n  text-align: center;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var v=Object.create;var c=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var M=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),F=(n,e)=>{for(var l in e)c(n,l,{get:e[l],enumerable:!0})},u=(n,e,l,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of y(e))!D.call(n,a)&&a!==l&&c(n,a,{get:()=>e[a],enumerable:!(d=_(e,a))||d.enumerable});return n};var h=(n,e,l)=>(l=n!=null?v(C(n)):{},u(e||!n||!n.__esModule?c(l,\"default\",{value:n,enumerable:!0}):l,n)),O=n=>u(c({},\"__esModule\",{value:!0}),n);var s=M((R,m)=>{m.exports=_jsx_runtime});var k={};F(k,{default:()=>E});var o=h(s());var t=h(s());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"There are two parts to this question: (1) accepting user input and (2) generating the table.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Accepting user input\"}),`\n`,(0,t.jsxs)(e.p,{children:['Since the table should be created only when the \"Submit\" button is pressed, the updates are one-way. A simple ',(0,t.jsx)(e.code,{children:\"<form>\"}),\" where the input values are stored entirely within the DOM is sufficient. It's also possible to track the input values with state or data binding (depending on UI framework), but we will need more state values, which is unnecessary.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"By using \",(0,t.jsx)(e.code,{children:'<input type=\"number\" min={1}>'}),\", we ensure only numbers can be entered and leverage HTML validation so that the minimum value of the fields is 1. That way we don't have to write our own validation.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can listen for the form's \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent\",children:(0,t.jsx)(e.code,{children:\"SubmitEvent\"})}),\", obtain the \",(0,t.jsx)(e.code,{children:\"FormData\"}),\" from the \",(0,t.jsx)(e.code,{children:\"SubmitEvent\"}),\", and extract the rows and columns value from the \",(0,t.jsx)(e.code,{children:\"FormData\"}),\". Remember to do a \",(0,t.jsx)(e.code,{children:\"event.preventDefault()\"}),\" within the submit callback otherwise the form submission will result in a page reload.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Generating the table\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Generating the table is pretty straightforward. Note that \",(0,t.jsx)(e.code,{children:\"<tr>\"}),\" should be within a \",(0,t.jsx)(e.code,{children:\"<tbody>\"}),\" and not directly within the \",(0,t.jsx)(e.code,{children:\"<table>\"}),\". The trickier part of table generation is the numbers within each table cell, which involves using a mathematical formula. The number sequence for each column depends on whether the column is an even or odd one, and they be defined using the following formula:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Even: \",(0,t.jsx)(e.code,{children:\"rows * col + (row + 1)\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Odd: \",(0,t.jsx)(e.code,{children:\"rows * (col + 1) - row\"})]}),`\n`]})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var p=S;var i=h(s());function b(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Valid values generate table with numbers in the right sequence.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Rows: 1, Columns: 1\"}),`\n`,(0,i.jsx)(e.li,{children:\"Rows: 4, Columns: 5\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Invalid values should not generate table.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Rows: 1, Columns: Empty\"}),`\n`,(0,i.jsx)(e.li,{children:\"Rows: Empty, Columns: 1\"}),`\n`]}),`\n`]}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(b,n)})):b(n)}var f=X;var r=h(s());function w(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Add \",(0,r.jsx)(e.code,{children:\"<label>\"}),\"s for the \",(0,r.jsx)(e.code,{children:\"<input>\"}),\"s and link them together using \",(0,r.jsx)(e.code,{children:'<label for=\"...\">'}),\" and \",(0,r.jsx)(e.code,{children:'<input id=\"...\">'}),\".\"]}),`\n`]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(w,n)})):w(n)}var x=T;function j(n){let e=Object.assign({h3:\"h3\",p:\"p\",img:\"img\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(e.h3,{children:\"Components Diagram\"}),`\n`,(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:\"/img/questions/generate-table/diagram.png\",alt:\"Component Diagram\"})}),`\n`,(0,o.jsx)(f,{}),`\n`,(0,o.jsx)(x,{})]})}function A(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(j,n)})):j(n)}var E=A;return O(k);})();\n;return Component;"
}