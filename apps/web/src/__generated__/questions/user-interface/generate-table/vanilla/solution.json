{
  "author": "yangshun",
  "files": {
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div class=\"app\">\n      <form id=\"form\">\n        <div>\n          <label htmlFor=\"rows\">Rows</label>\n          <input\n            id=\"rows\"\n            name=\"rows\"\n            type=\"number\"\n            min=\"1\" />\n        </div>\n        <div>\n          <label htmlFor=\"columns\">Columns</label>\n          <input\n            id=\"columns\"\n            name=\"columns\"\n            type=\"number\"\n            min=\"1\" />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n      <div id=\"table-container\"></div>\n    </div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/generate-table-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  const $formEl = document.querySelector('#form');\n  const $tableContainerEl = document.querySelector(\n    '#table-container',\n  );\n\n  function renderTable(rows, columns) {\n    // It's safe to use innerHTML here since we control\n    // the rendered contents (not user input).\n    $tableContainerEl.innerHTML = `<table>\n      <tbody>\n        ${Array.from({ length: rows }, () => 0)\n          .map(\n            (_, row) =>\n              `<tr>\n              ${Array.from({ length: columns }, () => 0)\n                .map(\n                  (_, col) =>\n                    `<td>\n                    ${\n                      col % 2 === 0\n                        ? rows * col + (row + 1)\n                        : rows * (col + 1) - row\n                    }\n                  </td>`,\n                )\n                .join('')}\n            </tr>`,\n          )\n          .join('')}\n      </tbody>\n    </table>`;\n  }\n\n  $formEl.addEventListener('submit', (event) => {\n    // To prevent a page reload.\n    event.preventDefault();\n\n    // Obtain data from the form.\n    const data = new FormData(event.target);\n    const rows = data.get('rows');\n    const columns = data.get('columns');\n    renderTable(rows, columns);\n  });\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.app {\n  align-items: center;\n  display: flex;\n  font-size: 12px;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\nlabel + input {\n  margin-left: 8px;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ntable td {\n  border: 1px solid #000;\n  padding: 8px;\n  text-align: center;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  },
  "writeup": "var Component=(()=>{var v=Object.create;var a=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var D=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),F=(n,e)=>{for(var l in e)a(n,l,{get:e[l],enumerable:!0})},u=(n,e,l,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of y(e))!C.call(n,s)&&s!==l&&a(n,s,{get:()=>e[s],enumerable:!(d=_(e,s))||d.enumerable});return n};var h=(n,e,l)=>(l=n!=null?v(M(n)):{},u(e||!n||!n.__esModule?a(l,\"default\",{value:n,enumerable:!0}):l,n)),O=n=>u(a({},\"__esModule\",{value:!0}),n);var c=D((R,m)=>{m.exports=_jsx_runtime});var k={};F(k,{default:()=>E});var o=h(c());var t=h(c());function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",code:\"code\",a:\"a\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"There are two parts to this question: (1) accepting user input and (2) generating the table.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Accepting user input\"}),`\n`,(0,t.jsxs)(e.p,{children:['Since the table should be created only when the \"Submit\" button is pressed, the updates are one-way. A simple ',(0,t.jsx)(e.code,{children:\"<form>\"}),\" where the input values are stored entirely within the DOM is sufficient. It's also possible to track the input values with state or data binding (depending on UI framework), but we will need more state values, which is unnecessary.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"By using \",(0,t.jsx)(e.code,{children:'<input type=\"number\" min={1}>'}),\", we ensure only numbers can be entered and leverage HTML validation so that the minimum value of the fields is 1. That way we don't have to write our own validation.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can listen for the form's \",(0,t.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent\",children:(0,t.jsx)(e.code,{children:\"SubmitEvent\"})}),\", obtain the \",(0,t.jsx)(e.code,{children:\"FormData\"}),\" from the \",(0,t.jsx)(e.code,{children:\"SubmitEvent\"}),\", and extract the rows and columns value from the \",(0,t.jsx)(e.code,{children:\"FormData\"}),\". Remember to do a \",(0,t.jsx)(e.code,{children:\"event.preventDefault()\"}),\" within the submit callback otherwise the form submission will result in a page reload.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Generating the table\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Generating the table is pretty straightforward. Note that \",(0,t.jsx)(e.code,{children:\"<tr>\"}),\" should be within a \",(0,t.jsx)(e.code,{children:\"<tbody>\"}),\" and not directly within the \",(0,t.jsx)(e.code,{children:\"<table>\"}),\". The trickier part of table generation is the numbers within each table cell, which involves using a mathematical formula. The number sequence for each column depends on whether the column is an even or odd one, and they be defined using the following formula:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Even: \",(0,t.jsx)(e.code,{children:\"rows * col + (row + 1)\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Odd: \",(0,t.jsx)(e.code,{children:\"rows * (col + 1) - row\"})]}),`\n`]})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(b,n)})):b(n)}var f=S;var i=h(c());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Valid values generate table with numbers in the right sequence.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Rows: 1, Columns: 1\"}),`\n`,(0,i.jsx)(e.li,{children:\"Rows: 4, Columns: 5\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Invalid values should not generate table.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Rows: 1, Columns: Empty\"}),`\n`,(0,i.jsx)(e.li,{children:\"Rows: Empty, Columns: 1\"}),`\n`]}),`\n`]}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(p,n)})):p(n)}var w=X;var r=h(c());function g(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Add \",(0,r.jsx)(e.code,{children:\"<label>\"}),\"s for the \",(0,r.jsx)(e.code,{children:\"<input>\"}),\"s and link them together using \",(0,r.jsx)(e.code,{children:'<label for=\"...\">'}),\" and \",(0,r.jsx)(e.code,{children:'<input id=\"...\">'}),\".\"]}),`\n`]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(g,n)})):g(n)}var x=T;function j(n){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(f,{}),`\n`,(0,o.jsx)(w,{}),`\n`,(0,o.jsx)(x,{})]})}function A(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(j,n)})):j(n)}var E=A;return O(k);})();\n;return Component;"
}