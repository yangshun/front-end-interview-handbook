{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/grid-lights-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"wrapper\">\n  <div\n    class=\"grid\"\n    [ngStyle]=\"{\n      gridTemplateColumns:\n        'repeat(' + config[0].length + ', 1fr)'\n    }\">\n    <ng-container\n      *ngFor=\"\n        let value of flattenedConfig;\n        let index = index\n      \">\n      <button\n        *ngIf=\"value\"\n        [attr.aria-label]=\"'Cell ' + index\"\n        type=\"button\"\n        class=\"cell\"\n        [ngClass]=\"{\n          'cell--activated': order.includes(index)\n        }\"\n        (click)=\"handleClick(index)\"\n        [disabled]=\"\n          order.includes(index) || isDeactivating\n        \"></button>\n      <span *ngIf=\"!value\"></span>\n    </ng-container>\n  </div>\n  <pre>order array: {{ order.join(', ') }}</pre>\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  config = [\n    [1, 1, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n  ];\n\n  flattenedConfig = this.config.flat();\n\n  order: number[] = [];\n  isDeactivating = false;\n\n  handleClick(index: number) {\n    const newOrder = [...this.order, index];\n    this.order = newOrder;\n\n    if (\n      newOrder.length ===\n      this.flattenedConfig.filter(Boolean).length\n    ) {\n      this.deactivateCells();\n    }\n  }\n\n  deactivateCells() {\n    this.isDeactivating = true;\n    const timer = setInterval(() => {\n      const newOrder = this.order.slice();\n      newOrder.pop();\n\n      if (newOrder.length === 0) {\n        clearInterval(timer);\n        this.isDeactivating = false;\n      }\n\n      this.order = newOrder;\n    }, 300);\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.grid {\n  --spacing: 20px;\n  display: grid;\n  max-width: 300px;\n  width: 100%;\n  padding: var(--spacing);\n  gap: var(--spacing);\n  border: 1px solid #000;\n}\n\n.cell {\n  background-color: transparent;\n  border: 1px solid #000;\n  height: 0;\n  /* Make height and width equal */\n  padding-bottom: 100%;\n}\n\n.cell--activated {\n  background-color: green;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var d=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),S=(t,e)=>{for(var a in e)d(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of y(e))!k.call(t,c)&&c!==a&&d(t,c,{get:()=>e[c],enumerable:!(h=v(e,c))||h.enumerable});return t};var o=(t,e,a)=>(a=t!=null?w(x(t)):{},s(e||!t||!t.__esModule?d(a,\"default\",{value:t,enumerable:!0}):a,t)),_=t=>s(d({},\"__esModule\",{value:!0}),t);var l=j((A,u)=>{u.exports=_jsx_runtime});var O={};S(O,{default:()=>M});var n=o(l());var i=o(l());function g(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Click on a cell, it should turn green.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Clicking on cells that are already green should not have any effect.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.li,{children:\"After clicking all 8 cells, the cells should be deactivated in reverse.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(g,t)})):g(t)}var m=C;var r=o(l());function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,r.jsx)(e.p,{children:\"While a11y is not the focus of this question, there are some things we can do to improve both the a11y and user experience of this app.\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Use \",(0,r.jsx)(e.code,{children:\"<button>\"}),\"s to render the grid cells so that they are focusable via \",(0,r.jsx)(\"kbd\",{children:\"Tab\"}),\" and activated via \",(0,r.jsx)(\"kbd\",{children:\"Space\"}),\" and \",(0,r.jsx)(\"kbd\",{children:\"Enter\"}),\". With this, we can activate the grid entirely using the keyboard.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"All buttons should have labels, so we add \",(0,r.jsx)(e.code,{children:\"aria-label\"}),\" with the index to describe the cell. The label can be further improved by calling out the column and row numbers instead.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"It also helps to \",(0,r.jsx)(e.code,{children:\"disable\"}),\" the button for activated cells and while deactivating, so that the cells can no longer be focused or respond to clicks.\"]}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(p,t)})):p(t)}var f=D;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",a:\"a\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The question can be split into two parts: (1) Rendering, (2) State, and (3) Deactivation.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since we're required to render a 3x3 grid of cells, CSS Grid is literally the best tool for the job. We can definitely use other approaches but CSS Grid is a forward-looking technology we should master. If you're unfamiliar with CSS Grids, \",(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden\"}),\" is an interactive game for you to learn about it.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The following CSS will render a 3x3 grid with 20px of padding and spacing between the cells.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.grid {\n  --spacing: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding: var(--spacing);\n  gap: var(--spacing);\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To create cells that are perfect squares, we can set the height of the cells to be 0 and make one of the vertical paddings 100% (\",(0,n.jsx)(e.code,{children:\"padding-bottom: 100%\"}),\"), which sets the total height of the cell to be the same as the width.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Remember that we have an odd requirement of the middle cell to be omitted? We can create a declarative and flexible rendering approach where we define a 2D array of 1s and 0s (\",(0,n.jsx)(e.code,{children:\"config\"}),\") and the grid will be rendered according to the configuration. Because of this, we have to define the \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" as an inline style that uses the \",(0,n.jsx)(e.code,{children:\"config\"}),\"'s number of columns when rendering the CSS grid.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Activating/deactivating the cells can be done by adding a new class for the activated state which adds \",(0,n.jsx)(e.code,{children:\"background-color: green\"}),\" and toggling that class.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Only one state is needed, \",(0,n.jsx)(e.code,{children:\"order\"}),\", which is the order that the cells were clicked. Assuming we flatten the 2D \",(0,n.jsx)(e.code,{children:\"config\"}),\" array into a single dimension, each cell will correspond to an index. We can store this list of indices in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array, adding to it when a cell is clicked.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Whether the cell is lit up can be determined by whether the cell's index exists in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Deactivation\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Deactivation happens when all the cells have been activated. We know this has happened by comparing the number of items in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array vs the number of 1s in the \",(0,n.jsx)(e.code,{children:\"config\"}),\"; when they are the same, we can start deactivating the cells.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can use \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" with a duration of 300ms and remove the last value of the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array by using \",(0,n.jsx)(e.code,{children:\"order.pop()\"}),\" each time the interval callback is invoked. Note that we need to use the callback form of \",(0,n.jsx)(e.code,{children:\"setOrder\"}),\", which receives the updated \",(0,n.jsx)(e.code,{children:\"order\"}),\" value as the parameter. This is necessary because the \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" callback's closure will be referencing a stale version of \",(0,n.jsx)(e.code,{children:\"order\"}),\" and the callback form of \",(0,n.jsx)(e.code,{children:\"setOrder\"}),\" will provide us with the most updated \",(0,n.jsx)(e.code,{children:\"order\"}),\" value.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When managing state in a modern front-end framework, it is considered best practice to avoid direct mutation of data. Therefore, we make a copy of the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array first before calling \",(0,n.jsx)(e.code,{children:\"pop()\"}),\" on it to remove the last item.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array is empty, we can clear the interval timer.\"]}),`\n`,(0,n.jsx)(m,{}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden - A game for learning CSS grid\"})}),`\n`]})]})}function W(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var M=W;return _(O);})();\n;return Component;"
}