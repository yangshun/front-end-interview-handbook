{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/grid-lights-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useState } from 'react';\n\n// Make it easy to visualize the board.\n// Customize the board rendering just by changing\n// this 2D array. Note that all rows have to\n// contain the same number of elements in order\n// for the grid to render properly.\nconst config = [\n  [1, 1, 1],\n  [1, 0, 1],\n  [1, 1, 1],\n];\n\nfunction Cell({ filled, label, onClick, isDisabled }) {\n  // Use <button> so that can use the keyboard to move between\n  // cells with Tab and activate them with Enter/Space.\n  return (\n    <button\n      aria-label={label}\n      type=\"button\"\n      className={['cell', filled && 'cell--activated']\n        .filter(Boolean)\n        .join(' ')}\n      onClick={onClick}\n      // disabled prevents cells from responding to clicks.\n      disabled={isDisabled}\n    />\n  );\n}\n\nexport default function App() {\n  const [order, setOrder] = useState([]);\n  const [isDeactivating, setIsDeactivating] =\n    useState(false);\n\n  // If necessary, disable clicking during deactivation is playing.\n  function deactivateCells() {\n    setIsDeactivating(true);\n    const timer = setInterval(() => {\n      // Use the callback version of setOrder to ensure\n      // we are reading the most updated order value.\n      setOrder((origOrder) => {\n        // Make a clone to avoid mutation of the orders array.\n        const newOrder = origOrder.slice();\n        newOrder.pop();\n\n        if (newOrder.length === 0) {\n          clearInterval(timer);\n          setIsDeactivating(false);\n        }\n\n        return newOrder;\n      });\n    }, 300);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div\n        className=\"grid\"\n        style={{\n          gridTemplateColumns: `repeat(${config[0].length}, 1fr)`,\n        }}>\n        {config.flat(1).map((value, index) =>\n          value ? (\n            <Cell\n              key={index}\n              label={`Cell ${index}`}\n              // Lookup efficiency can be improved by using\n              // a separate set/dict but that's overkill given\n              // the low number of cells.\n              filled={order.includes(index)}\n              isDisabled={\n                order.includes(index) || isDeactivating\n              }\n              onClick={() => {\n                // Make a clone to avoid mutation of the orders array.\n                const newOrder = [...order, index];\n                setOrder(newOrder);\n\n                // All the cells have been activated, we can proceed\n                // to deactivate them one by one.\n                if (\n                  newOrder.length ===\n                  config.flat(1).filter(Boolean).length\n                ) {\n                  deactivateCells();\n                }\n              }}\n            />\n          ) : (\n            <span key={index} />\n          ),\n        )}\n      </div>\n      {/* Helper to show the state */}\n      <pre>order array: {order.join(', ')}</pre>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.grid {\n  --spacing: 20px;\n  display: grid;\n  max-width: 300px;\n  width: 100%;\n  padding: var(--spacing);\n  gap: var(--spacing);\n  border: 1px solid #000;\n}\n\n.cell {\n  background-color: transparent;\n  border: 1px solid #000;\n  height: 0;\n  /* Make height and width equal */\n  padding-bottom: 100%;\n}\n\n.cell--activated {\n  background-color: green;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}