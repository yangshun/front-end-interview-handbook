{
  "skeleton": "var Component=(()=>{var x=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var w=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),_=(e,t)=>{for(var i in t)a(e,i,{get:t[i],enumerable:!0})},l=(e,t,i,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of f(t))!v.call(e,r)&&r!==i&&a(e,r,{get:()=>t[r],enumerable:!(s=p(t,r))||s.enumerable});return e};var h=(e,t,i)=>(i=e!=null?x(j(e)):{},l(t||!e||!e.__esModule?a(i,\"default\",{value:e,enumerable:!0}):i,e)),b=e=>l(a({},\"__esModule\",{value:!0}),e);var c=w((X,d)=>{d.exports=_jsx_runtime});var C={};_(C,{default:()=>D});var o=h(c());var n=h(c());function g(e){let t=Object.assign({p:\"p\",img:\"img\"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:\"Build a 3x3 grid of light cells (omitting the center cell) where you can click on the cells to activate them, turning them green. When all the cells have been activated, they will be deactivated one by one in the reverse order they were activated with a 300ms interval in between.\"}),`\n`,(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:\"/img/questions/grid-lights/grid-lights-example.png\",alt:\"Grid Lights Example\"})})]})}function y(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(g,e)})):g(e)}var m=y;function u(e){return(0,o.jsx)(m,{})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(u,e)})):u(e)}var D=M;return b(C);})();\n;return Component;",
  "solution": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var S=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var a in e)l(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of y(e))!j.call(t,c)&&c!==a&&l(t,c,{get:()=>e[c],enumerable:!(h=v(e,c))||h.enumerable});return t};var o=(t,e,a)=>(a=t!=null?w(x(t)):{},s(e||!t||!t.__esModule?l(a,\"default\",{value:t,enumerable:!0}):a,t)),k=t=>s(l({},\"__esModule\",{value:!0}),t);var d=S((O,g)=>{g.exports=_jsx_runtime});var A={};_(A,{default:()=>W});var n=o(d());var r=o(d());function u(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Click on a cell, it should turn green.\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Clicking on cells that are already green should not have any effect.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.li,{children:\"After clicking all 8 cells, the cells should be deactivated in reverse.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var p=C;var i=o(d());function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsx)(e.p,{children:\"While a11y is not the focus of this question, there are some things we can do to improve both the a11y and user experience of this app.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(e.code,{children:\"<button>\"}),\"s to render the grid cells so that they are focusable via \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" and activated via \",(0,i.jsx)(\"kbd\",{children:\"Space\"}),\" and \",(0,i.jsx)(\"kbd\",{children:\"Enter\"}),\". With this, we can activate the grid entirely using the keyboard.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"All buttons should have labels, so we add \",(0,i.jsx)(e.code,{children:\"aria-label\"}),\" with the index to describe the cell. The label can be further improved by calling out the column and row numbers instead.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"It also helps to \",(0,i.jsx)(e.code,{children:\"disable\"}),\" the button for activated cells and while deactivating, so that the cells can no longer be focused or respond to clicks.\"]}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(m,t)})):m(t)}var f=D;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",a:\"a\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The question can be split into two parts: (1) Rendering, (2) State, and (3) Deactivation.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since we're required to render a 3x3 grid of cells, CSS Grid is literally the best tool for the job. We can definitely use other approaches but CSS Grid is a forward-looking technology we should master. If you're unfamiliar with CSS Grids, \",(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden\"}),\" is an interactive game for you to learn about it.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The following CSS will render a 3x3 grid with 20px of padding and spacing between the cells.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.grid {\n  --spacing: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding: var(--spacing);\n  gap: var(--spacing);\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To create cells that are perfect squares, we can set the height of the cells to be 0 and make one of the vertical paddings 100% (\",(0,n.jsx)(e.code,{children:\"padding-bottom: 100%\"}),\"), which sets the total height of the cell to be the same as the width.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Remember that we have an odd requirement of the middle cell to be omitted? We can create a declarative and flexible rendering approach where we define a 2D array of 1s and 0s (\",(0,n.jsx)(e.code,{children:\"config\"}),\") and the grid will be rendered according to the configuration. Because of this, we have to define the \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" as an inline style that uses the \",(0,n.jsx)(e.code,{children:\"config\"}),\"'s number of columns when rendering the CSS grid.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Activating/deactivating the cells can be done by adding a new class for the activated state which adds \",(0,n.jsx)(e.code,{children:\"background-color: green\"}),\" and toggling that class.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Only one state is needed, \",(0,n.jsx)(e.code,{children:\"order\"}),\", which is the order that the cells were clicked. Assuming we flatten the 2D \",(0,n.jsx)(e.code,{children:\"config\"}),\" array into a single dimension, each cell will correspond to an index. We can store this list of indices in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array, adding to it when a cell is clicked.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Whether the cell is lit up can be determined by whether the cell's index exists in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Deactivation\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Deactivation happens when all the cells have been activated. We know this has happened by comparing the number of items in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array vs the number of 1s in the \",(0,n.jsx)(e.code,{children:\"config\"}),\"; when they are the same, we can start deactivating the cells.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can use \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" with a duration of 300ms and remove the last value of the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array by using \",(0,n.jsx)(e.code,{children:\"order.pop()\"}),\" each time the interval callback is invoked. When the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array is empty, we can clear the interval timer.\"]}),`\n`,(0,n.jsx)(p,{}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden - A game for learning CSS grid\"})}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var W=M;return k(A);})();\n;return Component;"
}