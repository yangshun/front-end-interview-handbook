{
  "author": "tanhauhau",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.svelte\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.svelte\",\n  \"environment\": \"svelte\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/grid-lights-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import './styles.css';\n\n  // Make it easy to visualize the board.\n  // Customize the board rendering just by changing\n  // this 2D array. Note that all rows have to\n  // contain the same number of elements in order\n  // for the grid to render properly.\n  const config = [\n    [1, 1, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n  ];\n\n  let order = [];\n  let isDeactivating = false;\n\n  // If necessary, disable clicking during deactivation is playing.\n  function deactivateCells() {\n    isDeactivating = true;\n    const timer = setInterval(() => {\n      // Remove the last item.\n      order = order.slice(0, -1);\n\n      if (order.length === 0) {\n        clearInterval(timer);\n        isDeactivating = false;\n      }\n    }, 300);\n  }\n</script>\n\n<div class=\"wrapper\">\n  <div\n    class=\"grid\"\n    style:grid-template-columns=\"repeat({config[0].length},\n    1fr)\">\n    {#each config.flat(1) as value, index}\n      {#if value}\n        <button\n          aria-label=\"Cell {index}\"\n          type=\"button\"\n          class=\"cell\"\n          class:cell--activated={/*\n           Lookup efficiency can be improved by using\n           a separate set/dict but that's overkill given\n           the low number of cells.\n          */\n          order.includes(index)}\n          on:click={() => {\n            // Add index to order array.\n            order = [...order, index];\n\n            // All the cells have been activated, we can proceed\n            // to deactivate them one by one.\n            if (\n              order.length ===\n              config.flat(1).filter(Boolean).length\n            ) {\n              deactivateCells();\n            }\n          }}\n          disabled={/* disabled prevents cells from responding to clicks. */\n          order.includes(index) || isDeactivating} />\n      {:else}\n        <span />\n      {/if}\n    {/each}\n  </div>\n  <!-- Helper to show the state -->\n  <pre>order array: {order.join(', ')}</pre>\n</div>\n\n<style>\n  .wrapper {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    justify-content: center;\n  }\n\n  .grid {\n    --spacing: 20px;\n    display: grid;\n    max-width: 300px;\n    width: 100%;\n    padding: var(--spacing);\n    gap: var(--spacing);\n    border: 1px solid #000;\n  }\n\n  .cell {\n    background-color: transparent;\n    border: 1px solid #000;\n    height: 0;\n    /* Make height and width equal */\n    padding-bottom: 100%;\n  }\n\n  .cell--activated {\n    background-color: green;\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  }
}