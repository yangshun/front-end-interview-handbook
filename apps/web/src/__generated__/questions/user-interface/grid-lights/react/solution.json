{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/grid-lights-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useState } from 'react';\n\n// Make it easy to visualize the board.\n// Customize the board rendering just by changing\n// this 2D array. Note that all rows have to\n// contain the same number of elements in order\n// for the grid to render properly.\nconst config = [\n  [1, 1, 1],\n  [1, 0, 1],\n  [1, 1, 1],\n];\n\nfunction Cell({ filled, label, onClick, isDisabled }) {\n  // Use <button> so that can use the keyboard to move between\n  // cells with Tab and activate them with Enter/Space.\n  return (\n    <button\n      aria-label={label}\n      type=\"button\"\n      className={['cell', filled && 'cell--activated']\n        .filter(Boolean)\n        .join(' ')}\n      onClick={onClick}\n      // disabled prevents cells from responding to clicks.\n      disabled={isDisabled}\n    />\n  );\n}\n\nexport default function App() {\n  const [order, setOrder] = useState([]);\n  const [isDeactivating, setIsDeactivating] =\n    useState(false);\n\n  // If necessary, disable clicking during deactivation is playing.\n  function deactivateCells() {\n    setIsDeactivating(true);\n    const timer = setInterval(() => {\n      // Use the callback version of setOrder to ensure\n      // we are reading the most updated order value.\n      setOrder((origOrder) => {\n        // Make a clone to avoid mutation of the orders array.\n        const newOrder = origOrder.slice();\n        newOrder.pop();\n\n        if (newOrder.length === 0) {\n          clearInterval(timer);\n          setIsDeactivating(false);\n        }\n\n        return newOrder;\n      });\n    }, 300);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div\n        className=\"grid\"\n        style={{\n          gridTemplateColumns: `repeat(${config[0].length}, 1fr)`,\n        }}>\n        {config.flat(1).map((value, index) =>\n          value ? (\n            <Cell\n              key={index}\n              label={`Cell ${index}`}\n              // Lookup efficiency can be improved by using\n              // a separate set/dict but that's overkill given\n              // the low number of cells.\n              filled={order.includes(index)}\n              isDisabled={\n                order.includes(index) || isDeactivating\n              }\n              onClick={() => {\n                // Make a clone to avoid mutation of the orders array.\n                const newOrder = [...order, index];\n                setOrder(newOrder);\n\n                // All the cells have been activated, we can proceed\n                // to deactivate them one by one.\n                if (\n                  newOrder.length ===\n                  config.flat(1).filter(Boolean).length\n                ) {\n                  deactivateCells();\n                }\n              }}\n            />\n          ) : (\n            <span key={index} />\n          ),\n        )}\n      </div>\n      {/* Helper to show the state */}\n      <pre>order array: {order.join(', ')}</pre>\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.grid {\n  --spacing: 20px;\n  display: grid;\n  max-width: 300px;\n  width: 100%;\n  padding: var(--spacing);\n  gap: var(--spacing);\n  border: 1px solid #000;\n}\n\n.cell {\n  background-color: transparent;\n  border: 1px solid #000;\n  height: 0;\n  /* Make height and width equal */\n  padding-bottom: 100%;\n}\n\n.cell--activated {\n  background-color: green;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),S=(t,e)=>{for(var a in e)l(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of y(e))!j.call(t,c)&&c!==a&&l(t,c,{get:()=>e[c],enumerable:!(h=v(e,c))||h.enumerable});return t};var o=(t,e,a)=>(a=t!=null?w(x(t)):{},s(e||!t||!t.__esModule?l(a,\"default\",{value:t,enumerable:!0}):a,t)),_=t=>s(l({},\"__esModule\",{value:!0}),t);var d=k((A,u)=>{u.exports=_jsx_runtime});var W={};S(W,{default:()=>O});var n=o(d());var r=o(d());function g(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Click on a cell, it should turn green.\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Clicking on cells that are already green should not have any effect.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.li,{children:\"After clicking all 8 cells, the cells should be deactivated in reverse.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(g,t)})):g(t)}var p=C;var i=o(d());function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsx)(e.p,{children:\"While a11y is not the focus of this question, there are some things we can do to improve both the a11y and user experience of this app.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(e.code,{children:\"<button>\"}),\"s to render the grid cells so that they are focusable via \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" and activated via \",(0,i.jsx)(\"kbd\",{children:\"Space\"}),\" and \",(0,i.jsx)(\"kbd\",{children:\"Enter\"}),\". With this, we can activate the grid entirely using the keyboard.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"All buttons should have labels, so we add \",(0,i.jsx)(e.code,{children:\"aria-label\"}),\" with the index to describe the cell. The label can be further improved by calling out the column and row numbers instead.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"It also helps to \",(0,i.jsx)(e.code,{children:\"disable\"}),\" the button for activated cells and while deactivating, so that the cells can no longer be focused or respond to clicks.\"]}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(m,t)})):m(t)}var f=D;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",a:\"a\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The question can be split into two parts: (1) Rendering, (2) State, and (3) Deactivation.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since we're required to render a 3x3 grid of cells, CSS Grid is literally the best tool for the job. We can definitely use other approaches but CSS Grid is a forward-looking technology we should master. If you're unfamiliar with CSS Grids, \",(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden\"}),\" is an interactive game for you to learn about it.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The following CSS will render a 3x3 grid with 20px of padding and spacing between the cells.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.grid {\n  --spacing: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding: var(--spacing);\n  gap: var(--spacing);\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To create cells that are perfect squares, we can set the height of the cells to be 0 and make one of the vertical paddings 100% (\",(0,n.jsx)(e.code,{children:\"padding-bottom: 100%\"}),\"), which sets the total height of the cell to be the same as the width.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Remember that we have an odd requirement of the middle cell to be omitted? We can create a declarative and flexible rendering approach where we define a 2D array of 1s and 0s (\",(0,n.jsx)(e.code,{children:\"config\"}),\") and the grid will be rendered according to the configuration. Because of this, we have to define the \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" as an inline style that uses the \",(0,n.jsx)(e.code,{children:\"config\"}),\"'s number of columns when rendering the CSS grid.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Activating/deactivating the cells can be done by adding a new class for the activated state which adds \",(0,n.jsx)(e.code,{children:\"background-color: green\"}),\" and toggling that class.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Only one state is needed, \",(0,n.jsx)(e.code,{children:\"order\"}),\", which is the order that the cells were clicked. Assuming we flatten the 2D \",(0,n.jsx)(e.code,{children:\"config\"}),\" array into a single dimension, each cell will correspond to an index. We can store this list of indices in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array, adding to it when a cell is clicked.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Whether the cell is lit up can be determined by whether the cell's index exists in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Deactivation\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Deactivation happens when all the cells have been activated. We know this has happened by comparing the number of items in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array vs the number of 1s in the \",(0,n.jsx)(e.code,{children:\"config\"}),\"; when they are the same, we can start deactivating the cells.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can use \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" with a duration of 300ms and remove the last value of the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array by using \",(0,n.jsx)(e.code,{children:\"order.pop()\"}),\" each time the interval callback is invoked. Note that we need to use the callback form of \",(0,n.jsx)(e.code,{children:\"setOrder\"}),\", which receives the updated \",(0,n.jsx)(e.code,{children:\"order\"}),\" value as the parameter. This is necessary because the \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" callback's closure will be referencing a stale version of \",(0,n.jsx)(e.code,{children:\"order\"}),\" and the callback form of \",(0,n.jsx)(e.code,{children:\"setOrder\"}),\" will provide us with the most updated \",(0,n.jsx)(e.code,{children:\"order\"}),\" value.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In idiomatic React, we avoid mutation as much as possible, so we make a copy of the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array first before calling \",(0,n.jsx)(e.code,{children:\"pop()\"}),\" on it to remove the last item.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array is empty, we can clear the interval timer.\"]}),`\n`,(0,n.jsx)(p,{}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden - A game for learning CSS grid\"})}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var O=M;return _(W);})();\n;return Component;"
}