{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/grid-lights-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { ref } from 'vue';\nimport Cell from './Cell.vue';\n\n// Make it easy to visualize the board.\n// Customize the board rendering just by changing\n// this 2D array. Note that all rows have to\n// contain the same number of elements in order\n// for the grid to render properly.\nconst config = [\n  [1, 1, 1],\n  [1, 0, 1],\n  [1, 1, 1],\n];\n\nconst order = ref([]);\nconst isDeactivating = ref(false);\n\n// If necessary, disable clicking during deactivation is playing.\nfunction deactivateCells() {\n  isDeactivating.value = true;\n  const timer = setInterval(() => {\n    order.value.pop();\n\n    if (order.value.length === 0) {\n      clearInterval(timer);\n      isDeactivating.value = false;\n    }\n  }, 300);\n}\n\nfunction onCellClick(index) {\n  order.value.push(index);\n\n  // All the cells have been activated, we can proceed\n  // to deactivate them one by one.\n  if (\n    order.value.length ===\n    config.flat(1).filter(Boolean).length\n  ) {\n    deactivateCells();\n  }\n}\n</script>\n\n<template>\n  <div class=\"wrapper\">\n    <div\n      class=\"grid\"\n      :style=\"{\n        gridTemplateColumns: `repeat(${config[0].length}, 1fr)`,\n      }\">\n      <template\n        v-for=\"(value, index) in config.flat(1)\"\n        :key=\"index\">\n        <Cell\n          v-if=\"value\"\n          :key=\"index\"\n          :label=\"`Cell ${index}`\"\n          :filled=\"order.includes(index)\"\n          :isDisabled=\"\n            order.includes(index) || isDeactivating\n          \"\n          @cell-click=\"onCellClick(index)\" />\n        <span v-else />\n      </template>\n    </div>\n\n    <!-- Helper to show the state -->\n    <pre>order array: {{ order.join(', ') }}</pre>\n  </div>\n</template>\n\n<style>\n.wrapper {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n}\n\n.grid {\n  --spacing: 20px;\n  display: grid;\n  max-width: 300px;\n  width: 100%;\n  padding: var(--spacing);\n  gap: var(--spacing);\n  border: 1px solid #000;\n}\n</style>\n"
    },
    "/src/Cell.vue": {
      "code": "<script setup>\nconst props = defineProps({\n  filled: Boolean,\n  label: String,\n  isDisabled: Boolean,\n});\n</script>\n\n<template>\n  <button\n    :aria-label=\"props.label\"\n    type=\"button\"\n    :class=\"['cell', filled && 'cell--activated']\"\n    @click=\"$emit('cell-click')\"\n    :disabled=\"props.isDisabled\" />\n</template>\n\n<style>\n.cell {\n  background-color: transparent;\n  border: 1px solid #000;\n  height: 0;\n  /* Make height and width equal */\n  padding-bottom: 100%;\n}\n\n.cell--activated {\n  background-color: green;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/Cell.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var l=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var S=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var a in e)l(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of y(e))!j.call(t,c)&&c!==a&&l(t,c,{get:()=>e[c],enumerable:!(h=v(e,c))||h.enumerable});return t};var o=(t,e,a)=>(a=t!=null?w(x(t)):{},s(e||!t||!t.__esModule?l(a,\"default\",{value:t,enumerable:!0}):a,t)),k=t=>s(l({},\"__esModule\",{value:!0}),t);var d=S((O,g)=>{g.exports=_jsx_runtime});var A={};_(A,{default:()=>W});var n=o(d());var r=o(d());function u(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"Click on a cell, it should turn green.\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Clicking on cells that are already green should not have any effect.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.li,{children:\"After clicking all 8 cells, the cells should be deactivated in reverse.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var p=C;var i=o(d());function m(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsx)(e.p,{children:\"While a11y is not the focus of this question, there are some things we can do to improve both the a11y and user experience of this app.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Use \",(0,i.jsx)(e.code,{children:\"<button>\"}),\"s to render the grid cells so that they are focusable via \",(0,i.jsx)(\"kbd\",{children:\"Tab\"}),\" and activated via \",(0,i.jsx)(\"kbd\",{children:\"Space\"}),\" and \",(0,i.jsx)(\"kbd\",{children:\"Enter\"}),\". With this, we can activate the grid entirely using the keyboard.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"All buttons should have labels, so we add \",(0,i.jsx)(e.code,{children:\"aria-label\"}),\" with the index to describe the cell. The label can be further improved by calling out the column and row numbers instead.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"It also helps to \",(0,i.jsx)(e.code,{children:\"disable\"}),\" the button for activated cells and while deactivating, so that the cells can no longer be focused or respond to clicks.\"]}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(m,t)})):m(t)}var f=D;function b(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",a:\"a\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The question can be split into two parts: (1) Rendering, (2) State, and (3) Deactivation.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since we're required to render a 3x3 grid of cells, CSS Grid is literally the best tool for the job. We can definitely use other approaches but CSS Grid is a forward-looking technology we should master. If you're unfamiliar with CSS Grids, \",(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden\"}),\" is an interactive game for you to learn about it.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The following CSS will render a 3x3 grid with 20px of padding and spacing between the cells.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.grid {\n  --spacing: 20px;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding: var(--spacing);\n  gap: var(--spacing);\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To create cells that are perfect squares, we can set the height of the cells to be 0 and make one of the vertical paddings 100% (\",(0,n.jsx)(e.code,{children:\"padding-bottom: 100%\"}),\"), which sets the total height of the cell to be the same as the width.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Remember that we have an odd requirement of the middle cell to be omitted? We can create a declarative and flexible rendering approach where we define a 2D array of 1s and 0s (\",(0,n.jsx)(e.code,{children:\"config\"}),\") and the grid will be rendered according to the configuration. Because of this, we have to define the \",(0,n.jsx)(e.code,{children:\"grid-template-columns\"}),\" as an inline style that uses the \",(0,n.jsx)(e.code,{children:\"config\"}),\"'s number of columns when rendering the CSS grid.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Activating/deactivating the cells can be done by adding a new class for the activated state which adds \",(0,n.jsx)(e.code,{children:\"background-color: green\"}),\" and toggling that class.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Only one state is needed, \",(0,n.jsx)(e.code,{children:\"order\"}),\", which is the order that the cells were clicked. Assuming we flatten the 2D \",(0,n.jsx)(e.code,{children:\"config\"}),\" array into a single dimension, each cell will correspond to an index. We can store this list of indices in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array, adding to it when a cell is clicked.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Whether the cell is lit up can be determined by whether the cell's index exists in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Deactivation\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Deactivation happens when all the cells have been activated. We know this has happened by comparing the number of items in the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array vs the number of 1s in the \",(0,n.jsx)(e.code,{children:\"config\"}),\"; when they are the same, we can start deactivating the cells.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We can use \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" with a duration of 300ms and remove the last value of the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array by using \",(0,n.jsx)(e.code,{children:\"order.pop()\"}),\" each time the interval callback is invoked.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When the \",(0,n.jsx)(e.code,{children:\"order\"}),\" array is empty, we can clear the interval timer.\"]}),`\n`,(0,n.jsx)(p,{}),`\n`,(0,n.jsx)(f,{}),`\n`,(0,n.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://cssgridgarden.com/\",children:\"Grid Garden - A game for learning CSS grid\"})}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(b,t)})):b(t)}var W=M;return k(A);})();\n;return Component;"
}