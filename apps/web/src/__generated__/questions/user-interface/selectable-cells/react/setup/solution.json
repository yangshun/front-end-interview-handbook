{
  "author": "TODO",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/selectable-cells-react-solution\",\n  \"author\": \"TODO\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useRef, useState } from 'react';\n\nconst ROWS = 10;\nconst COLS = 10;\n\nfunction isOverlapping(rectA, rectB) {\n  return (\n    rectA.left < rectB.right &&\n    rectA.right > rectB.left &&\n    rectA.bottom > rectB.top &&\n    rectA.top < rectB.bottom\n  );\n}\n\nfunction drawSelectionBox(\n  cursor,\n  dragOrigin,\n  selectionBoxEl,\n) {\n  // Update selection box position.\n  selectionBoxEl.style.left =\n    Math.min(cursor.x, dragOrigin.x) + 'px';\n  selectionBoxEl.style.top =\n    Math.min(cursor.y, dragOrigin.y) + 'px';\n\n  const width = Math.abs(cursor.x - dragOrigin.x);\n  const height = Math.abs(cursor.y - dragOrigin.y);\n\n  // Update selection box size.\n  selectionBoxEl.style.width = `${width}px`;\n  selectionBoxEl.style.height = `${height}px`;\n}\n\nfunction findSelectedCells(gridEl, selectionBoxEl) {\n  const selectedCells = new Set();\n\n  const cells = gridEl.querySelectorAll('.grid__cell');\n\n  // Check if each cell overlaps with selection box.\n  for (let i = 0; i < cells.length; i++) {\n    if (\n      isOverlapping(\n        selectionBoxEl.getBoundingClientRect(),\n        cells[i].getBoundingClientRect(),\n      )\n    ) {\n      selectedCells.add(i);\n    }\n  }\n\n  return selectedCells;\n}\n\nexport default function App() {\n  const dragAreaRef = useRef();\n  const selectionBoxRef = useRef();\n\n  const [dragOrigin, setDragOrigin] = useState(null);\n  const [selectedCells, setSelectedCells] = useState(\n    new Set(),\n  );\n\n  useEffect(() => {\n    function onMouseDown(event) {\n      // Reset selected cells.\n      setSelectedCells(new Set());\n\n      // Use mouse coordinates relative to the entire page\n      // as the contents can be larger than the viewport.\n      const { pageX: x, pageY: y } = event;\n\n      // Store the drag origin so that they can be referenced\n      // during in the `mousemove` event.\n      setDragOrigin({ x, y });\n      // Start showing the selection box.\n      selectionBoxRef.current.style.display = 'inherit';\n    }\n\n    window.addEventListener('mousedown', onMouseDown);\n\n    return () => {\n      window.removeEventListener('mousedown', onMouseDown);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (dragOrigin == null) {\n      return;\n    }\n\n    function onMouseMove(event) {\n      const selectionBoxEl = selectionBoxRef.current;\n      drawSelectionBox(\n        {\n          x: event.pageX,\n          y: event.pageY,\n        },\n        dragOrigin,\n        selectionBoxEl,\n      );\n\n      const newSelectedCells = findSelectedCells(\n        dragAreaRef.current,\n        selectionBoxEl,\n      );\n      setSelectedCells(newSelectedCells);\n    }\n\n    window.addEventListener('mousemove', onMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n    };\n  }, [dragOrigin]);\n\n  useEffect(() => {\n    if (dragOrigin == null) {\n      return;\n    }\n\n    function onMouseUp() {\n      setDragOrigin(null);\n      // Reset selection box style.\n      selectionBoxRef.current.style = '';\n    }\n\n    window.addEventListener('mouseup', onMouseUp);\n\n    return () => {\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [dragOrigin]);\n\n  return (\n    <>\n      <div ref={dragAreaRef} className=\"draggable-area\">\n        <div ref={selectionBoxRef} className=\"select-box\" />\n        <div\n          className=\"grid\"\n          style={{\n            gridTemplateColumns: `repeat(${COLS}, 1fr)`,\n            gridTemplateRows: `repeat(${ROWS}, 1fr)`,\n          }}>\n          {Array.from(\n            { length: ROWS * COLS },\n            (_, index) => (\n              <div\n                className={[\n                  'grid__cell',\n                  selectedCells.has(index) &&\n                    'grid__cell--selected',\n                ]\n                  .filter(Boolean)\n                  .join(' ')}\n                key={index}\n              />\n            ),\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n  margin: 0;\n}\n\n.draggable-area {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n\n.select-box {\n  border: 1px dashed #000;\n  display: none;\n  position: absolute;\n}\n\n.grid {\n  --size: 400px;\n\n  width: var(--size);\n  height: var(--size);\n  flex-shrink: 0;\n  display: grid;\n  border: 1px solid #000;\n}\n\n.grid__cell {\n  border: 1px solid #000;\n}\n\n.grid__cell--selected {\n  background: #d6d5fe;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}