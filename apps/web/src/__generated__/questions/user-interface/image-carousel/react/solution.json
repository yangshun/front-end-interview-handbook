{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/image-carousel-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import ImageCarousel from './ImageCarousel';\n\nconst images = [\n  {\n    src: 'https://picsum.photos/id/600/600/400',\n    alt: 'Forest',\n  },\n  {\n    src: 'https://picsum.photos/id/100/600/400',\n    alt: 'Beach',\n  },\n  {\n    src: 'https://picsum.photos/id/200/600/400',\n    alt: 'Yak',\n  },\n  {\n    src: 'https://picsum.photos/id/300/600/400',\n    alt: 'Hay',\n  },\n  {\n    src: 'https://picsum.photos/id/400/600/400',\n    alt: 'Plants',\n  },\n  {\n    src: 'https://picsum.photos/id/500/600/400',\n    alt: 'Building',\n  },\n];\n\nexport default function App() {\n  return (\n    <div className=\"wrapper\">\n      <ImageCarousel images={images} />\n    </div>\n  );\n}\n"
    },
    "/src/ImageCarousel.tsx": {
      "code": "import { useState } from 'react';\n\nfunction clsx(...classnames: Array<any>) {\n  return classnames.filter(Boolean).join(' ');\n}\n\nexport default function ImageCarousel({\n  images,\n}: Readonly<{\n  images: ReadonlyArray<{ src: string; alt: string }>;\n}>) {\n  const [currIndex, setCurrIndex] = useState(0);\n  const currImage = images[currIndex];\n\n  return (\n    <div className=\"image-carousel\">\n      <img\n        alt={currImage.alt}\n        src={currImage.src}\n        key={currImage.src}\n        className=\"image-carousel__image\"\n      />\n      <button\n        aria-label=\"Previous image\"\n        className=\"image-carousel__button image-carousel__button--prev\"\n        onClick={() => {\n          const nextIndex =\n            (currIndex - 1 + images.length) % images.length;\n          setCurrIndex(nextIndex);\n        }}>\n        &#10094;\n      </button>\n      <div className=\"image-carousel__pages\">\n        {images.map(({ alt, src }, index) => (\n          <button\n            className={clsx(\n              'image-carousel__pages__button',\n              index === currIndex &&\n                'image-carousel__pages__button--active',\n            )}\n            aria-label={`Navigate to ${alt}`}\n            key={src}\n            onClick={() => {\n              setCurrIndex(index);\n            }}\n          />\n        ))}\n      </div>\n      <button\n        aria-label=\"Next image\"\n        className=\"image-carousel__button image-carousel__button--next\"\n        onClick={() => {\n          const nextIndex = (currIndex + 1) % images.length;\n          setCurrIndex(nextIndex);\n        }}>\n        &#10095;\n      </button>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "* {\n  box-sizing: border-box;\n  margin: 0;\n}\n\nbody {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  height: 100vh;\n  width: 100vw;\n}\n\n.image-carousel {\n  background-color: #000;\n  height: 400px;\n  overflow: hidden;\n  width: min(600px, 100vw);\n  position: relative;\n}\n\n.image-carousel__image {\n  object-fit: contain;\n  position: absolute;\n  inset: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.image-carousel__button {\n  --size: 40px;\n  height: var(--size);\n  width: var(--size);\n\n  background-color: #0008;\n  border-radius: 100%;\n  border: none;\n  color: #fff;\n  cursor: pointer;\n\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.image-carousel__button:hover {\n  background-color: #000b;\n}\n\n.image-carousel__button--prev {\n  left: 16px;\n}\n\n.image-carousel__button--next {\n  right: 16px;\n}\n\n.image-carousel__pages {\n  background-color: #0008;\n  border-radius: 12px;\n  display: inline-flex;\n  gap: 8px;\n  padding: 8px;\n\n  position: absolute;\n  bottom: 24px;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.image-carousel__pages__button {\n  --size: 8px;\n  height: var(--size);\n  width: var(--size);\n\n  border: none;\n  border-radius: 100%;\n  background-color: #666;\n  cursor: pointer;\n  display: inline-block;\n  flex-shrink: 0;\n  padding: 0;\n  transition: background-color 0.3s ease-in-out;\n}\n\n.image-carousel__pages__button:hover {\n  background-color: #ccc;\n}\n\n.image-carousel__pages__button--active {\n  background-color: #fff;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/ImageCarousel.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/ImageCarousel.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var c=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var D=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),M=(t,e)=>{for(var l in e)c(t,l,{get:e[l],enumerable:!0})},u=(t,e,l,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of _(e))!T.call(t,a)&&a!==l&&c(t,a,{get:()=>e[a],enumerable:!(d=j(e,a))||d.enumerable});return t};var s=(t,e,l)=>(l=t!=null?w(C(t)):{},u(e||!t||!t.__esModule?c(l,\"default\",{value:t,enumerable:!0}):l,t)),S=t=>u(c({},\"__esModule\",{value:!0}),t);var h=D((L,m)=>{m.exports=_jsx_runtime});var z={};M(z,{default:()=>I});var o=s(h());var n=s(h());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",ol:\"ol\",li:\"li\",strong:\"strong\",h3:\"h3\",h4:\"h4\",code:\"code\",a:\"a\",ul:\"ul\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"The solution can be broken down into two parts:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Rendering\"}),\": Layout and positioning of buttons\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"State management\"}),\": State design and state changes\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"The image carousel layout consists of 3 parts:\"}),`\n`,(0,n.jsx)(e.h4,{children:\"1. Image carousel container\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The root of the image carousel will be the element responsible for the overall dimensions and containing the displayed image and button elements. Since the height is fixed, we can set \",(0,n.jsx)(e.code,{children:\"height: 400px\"}),\" on the root element. However, the width is fluid and on screens smaller than 600px, it should shrink to fit within the screen. For this behavior, we can use the CSS \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/min\",children:(0,n.jsx)(e.code,{children:\"min\"})}),\" function (e.g. \",(0,n.jsx)(e.code,{children:\"min(600px, 100vw)\"}),\").\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"2. Displayed image\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The image can be rendered using normal \",(0,n.jsx)(e.code,{children:\"<img>\"}),\" tags and \",(0,n.jsx)(e.code,{children:\"object-fit: contain\"}),\", which resizes the image to fit the available space of 600px x 400px while maintaining the innate aspect ratio of the image.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"3. Navigation buttons\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The various buttons are positioned at fixed locations within the image carousel. This is achieved through adding \",(0,n.jsx)(e.code,{children:\"position: relative\"}),\" on the root element of the image carousel and \",(0,n.jsx)(e.code,{children:\"position: absolute\"}),\" to the button elements.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To vertically center the prev/next buttons, use a combination of \",(0,n.jsx)(e.code,{children:\"top: 50%; transform: translateY(-50%)\"}),\". \",(0,n.jsx)(e.code,{children:\"top: 50%\"}),\" positions the element to have a vertical offset of 50% of the container element, and \",(0,n.jsx)(e.code,{children:\"translateY(-50%)\"}),\" will shift the element up by half of the element's height. The pages buttons are horizontally-centered and can be done in a similar fashion.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"The minimal state needed for an image carousel is the current image index. Only one state value is needed.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"State changes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Next button\"}),\": Increment the \",(0,n.jsx)(e.code,{children:\"currIndex\"}),\" by one.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prev button\"}),\": Decrement the \",(0,n.jsx)(e.code,{children:\"currIndex\"}),\" by one.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Page button\"}),\": Directly set the \",(0,n.jsx)(e.code,{children:\"currIndex\"}),\" to the page number.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To enable the cycling behavior, we need to make sure that the \",(0,n.jsx)(e.code,{children:\"currIndex\"}),\" is always between \",(0,n.jsx)(e.code,{children:\"0\"}),\" and \",(0,n.jsx)(e.code,{children:\"images.length - 1\"}),\". We can achieve this by adding \",(0,n.jsx)(e.code,{children:\"images.length\"}),\" to any value, and using the modulo operator (\",(0,n.jsx)(e.code,{children:\"%\"}),\").\"]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var p=k;var i=s(h());function b(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Functionality:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Verify that the carousel displays the first image from the provided array upon initial load.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Prev/next buttons\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Clicking the right button moves to the next image.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking the left button moves to the previous image.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Page buttons\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Clicking on the page button displays the respective image.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Cycling behavior:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Clicking the right button on the last image should display the first image.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking the left button on the first image should display the last image\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.li,{children:\"Ensure all images in the array are accessible through navigation\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Display and sizing:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Verify the carousel is centered on the screen\"}),`\n`,(0,i.jsx)(e.li,{children:\"Check that the maximum size of the carousel is 600px by 400px\"}),`\n`,(0,i.jsx)(e.li,{children:\"Ensure images are fully visible within the carousel\"}),`\n`,(0,i.jsx)(e.li,{children:\"Confirm that images maintain their aspect ratio when resized\"}),`\n`,(0,i.jsx)(e.li,{children:\"Verify that empty parts of the carousel are filled with black\"}),`\n`]}),`\n`]}),`\n`]})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(b,t)})):b(t)}var f=F;var r=s(h());function x(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",strong:\"strong\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[\"All images should have \",(0,r.jsx)(e.code,{children:\"alt\"}),\" text that describes the image to support accessibility. It will be read out loud by screen readers and is also used by search engines.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[\"Add appropriate \",(0,r.jsx)(e.code,{children:\"aria-label\"}),\"s to the buttons since the buttons do not have visible labels.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"[Not implemented]\"}),\": Add a screen-reader-only element with the \",(0,r.jsx)(e.code,{children:'aria-live=\"polite\"'}),\" attribute and \",(0,r.jsx)(e.code,{children:\"alt\"}),\" text of the new image as contents. This instructs screen readers to announce that a new image is displayed.\"]}),`\n`]})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(x,t)})):x(t)}var y=O;function v(t){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(f,{}),`\n`,(0,o.jsx)(y,{})]})}function X(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(v,t)})):v(t)}var I=X;return S(z);})();\n;return Component;"
}