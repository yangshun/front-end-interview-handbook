{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/job-board-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useRef, useState } from 'react';\n\nimport JobPosting from './JobPosting';\n\nconst PAGE_SIZE = 6;\n\nexport default function App() {\n  const [fetchingJobDetails, setFetchingJobDetails] =\n    useState(false);\n  const [page, setPage] = useState(0);\n  const [jobIds, setJobIds] = useState(null);\n  const [jobs, setJobs] = useState([]);\n  const isMounted = useRef(true);\n\n  useEffect(() => {\n    isMounted.current = true;\n    // Indicate that the component is unmounted, so\n    // that requests that complete after the component\n    // is unmounted don't cause a \"setState on an unmounted\n    // component error\".\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    fetchJobs(page);\n  }, [page]);\n\n  async function fetchJobIds(currPage) {\n    let jobs = jobIds;\n    if (!jobs) {\n      const res = await fetch(\n        'https://hacker-news.firebaseio.com/v0/jobstories.json',\n      );\n      jobs = await res.json();\n\n      // No-op if component is unmounted.\n      if (!isMounted.current) {\n        return;\n      }\n\n      setJobIds(jobs);\n    }\n\n    const start = currPage * PAGE_SIZE;\n    const end = start + PAGE_SIZE;\n    return jobs.slice(start, end);\n  }\n\n  async function fetchJobs(currPage) {\n    const jobIdsForPage = await fetchJobIds(currPage);\n\n    setFetchingJobDetails(true);\n    const jobsForPage = await Promise.all(\n      jobIdsForPage.map((jobId) =>\n        fetch(\n          `https://hacker-news.firebaseio.com/v0/item/${jobId}.json`,\n        ).then((res) => res.json()),\n      ),\n    );\n\n    // No-op if component is unmounted.\n    if (!isMounted.current) {\n      return;\n    }\n\n    setFetchingJobDetails(false);\n    // useEffect (and hence `fetchJobs`) runs twice on component mount\n    // during development in Strict Mode.\n    //\n    // But since the value of `jobs` within the closure is the same,\n    // the resulting combined jobs will be the same, assuming the results\n    // for the API stays the same between requests.\n    const combinedJobs = [...jobs, ...jobsForPage];\n    setJobs(combinedJobs);\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Hacker News Jobs Board</h1>\n      {jobIds == null ? (\n        <p className=\"loading\">Loading...</p>\n      ) : (\n        <div>\n          <div className=\"jobs\" role=\"list\">\n            {jobs.map((job) => (\n              <JobPosting key={job.id} {...job} />\n            ))}\n          </div>\n          {jobs.length > 0 &&\n            page * PAGE_SIZE + PAGE_SIZE <\n              jobIds.length && (\n              <button\n                className=\"load-more-button\"\n                disabled={fetchingJobDetails}\n                onClick={() => setPage(page + 1)}>\n                {fetchingJobDetails\n                  ? 'Loading...'\n                  : 'Load more jobs'}\n              </button>\n            )}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/JobPosting.js": {
      "code": "export default function JobPosting({\n  url,\n  by,\n  time,\n  title,\n}) {\n  return (\n    <div className=\"post\" role=\"listitem\">\n      <h2 className=\"post__title\">\n        {url ? (\n          <a href={url} target=\"_blank\" rel=\"noopener\">\n            {title}\n          </a>\n        ) : (\n          title\n        )}\n      </h2>\n      <p className=\"post__metadata\">\n        By {by} &middot;{' '}\n        {new Date(time * 1000).toLocaleString()}\n      </p>\n    </div>\n  );\n}\n"
    },
    "/src/styles.css": {
      "code": "* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  background-color: #f6f6ef;\n  color: #000;\n  font-family: sans-serif;\n  font-size: 16px;\n  padding: 16px;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n.app {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.title {\n  font-size: 24px;\n  font-weight: bold;\n  color: #ff6600;\n  margin-bottom: 24px;\n}\n\n.jobs {\n  display: grid;\n  row-gap: 16px;\n}\n\n.post {\n  background-color: #fff;\n  border: 1px solid #dcdcdc;\n  border-radius: 4px;\n  padding: 16px;\n  display: grid;\n  row-gap: 8px;\n}\n\n.post__title {\n  font-size: 16px;\n  font-weight: bold;\n  margin-top: 0;\n}\n\n.post__metadata {\n  font-size: 14px;\n  color: #444;\n}\n\n.loading {\n  color: #4d4d4d;\n  font-weight: bold;\n  font-size: 18px;\n}\n\n.load-more-button {\n  background-color: #ff6600;\n  border: none;\n  border-radius: 4px;\n  color: #fff;\n  margin-top: 20px;\n  padding: 8px 12px;\n}\n\n.load-more-button:not(:disabled) {\n  cursor: pointer;\n}\n\n.load-more-button:hover {\n  background-color: #e65c00;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}