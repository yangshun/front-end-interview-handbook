{
  "author": "coalinga8",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/job-board-vue-solution\",\n  \"author\": \"coalinga8\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { ref, watch } from 'vue';\nimport JobPosting from './JobPosting.vue';\n\nconst PAGE_SIZE = 6;\n\nconst fetchingJobDetails = ref(false);\nconst jobIds = ref(null);\nconst jobs = ref([]);\nconst page = ref(0);\n\nwatch(\n  page,\n  (currPage) => {\n    fetchJobs(currPage);\n  },\n  {\n    immediate: true,\n  },\n);\n\nasync function fetchJobIds(currPage) {\n  if (!jobIds.value) {\n    const res = await fetch(\n      'https://hacker-news.firebaseio.com/v0/jobstories.json',\n    );\n    jobIds.value = await res.json();\n  }\n\n  const start = currPage * PAGE_SIZE;\n  const end = start + PAGE_SIZE;\n  return jobIds.value.slice(start, end);\n}\n\nasync function fetchJobs(currPage) {\n  const jobIdsForPage = await fetchJobIds(currPage);\n\n  fetchingJobDetails.value = true;\n  const jobsForPage = await Promise.all(\n    jobIdsForPage.map((jobId) =>\n      fetch(\n        `https://hacker-news.firebaseio.com/v0/item/${jobId}.json`,\n      ).then((res) => res.json()),\n    ),\n  );\n  jobs.value.push(...jobsForPage);\n\n  fetchingJobDetails.value = false;\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <h1 class=\"title\">Hacker News Jobs Board</h1>\n    <p class=\"loading\" v-if=\"jobIds == null\">Loading...</p>\n    <div v-else>\n      <div class=\"jobs\" role=\"list\">\n        <JobPosting\n          v-for=\"job in jobs\"\n          :key=\"job.id\"\n          v-bind=\"job\" />\n      </div>\n\n      <button\n        class=\"load-more-button\"\n        :disabled=\"fetchingJobDetails\"\n        @click=\"page++\"\n        v-if=\"\n          jobs.length > 0 &&\n          page * PAGE_SIZE + PAGE_SIZE < jobIds.length\n        \">\n        {{\n          fetchingJobDetails\n            ? 'Loading...'\n            : 'Load more jobs'\n        }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<style>\n.app {\n  max-width: 600px;\n  margin: 0 auto;\n}\n\n.title {\n  font-size: 24px;\n  font-weight: bold;\n  color: #ff6600;\n  margin-bottom: 24px;\n}\n\n.jobs {\n  display: grid;\n  row-gap: 16px;\n}\n\n.loading {\n  color: #4d4d4d;\n  font-weight: bold;\n  font-size: 18px;\n}\n\n.load-more-button {\n  background-color: #ff6600;\n  border: none;\n  border-radius: 4px;\n  color: #fff;\n  margin-top: 20px;\n  padding: 8px 12px;\n}\n\n.load-more-button:not(:disabled) {\n  cursor: pointer;\n}\n\n.load-more-button:hover {\n  background-color: #e65c00;\n}\n</style>\n"
    },
    "/src/JobPosting.vue": {
      "code": "<script setup>\nconst props = defineProps({\n  url: String,\n  title: String,\n  by: String,\n  time: Number,\n});\n</script>\n\n<template>\n  <div class=\"post\" role=\"listitem\">\n    <h2 class=\"post__title\">\n      <a\n        v-if=\"props.url\"\n        :href=\"props.url\"\n        target=\"_blank\"\n        rel=\"noopener\">\n        {{ props.title }}\n      </a>\n      <span v-if=\"!props.url\">{{ props.title }}</span>\n    </h2>\n    <p class=\"post__metadata\">\n      By {{ props.by }} &middot;{{ ' ' }}\n      {{ new Date(time * 1000).toLocaleString() }}\n    </p>\n  </div>\n</template>\n\n<style>\n.post {\n  background-color: #fff;\n  border: 1px solid #dcdcdc;\n  border-radius: 4px;\n  padding: 16px;\n  display: grid;\n  row-gap: 8px;\n}\n\n.post__title {\n  font-size: 16px;\n  font-weight: bold;\n  margin-top: 0;\n}\n\n.post__metadata {\n  font-size: 14px;\n  color: #444;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  background-color: #f6f6ef;\n  color: #000;\n  font-family: sans-serif;\n  font-size: 16px;\n  padding: 16px;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/JobPosting.vue",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  },
  "writeup": "var Component=(()=>{var j=Object.create;var r=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var a in e)r(n,a,{get:e[a],enumerable:!0})},l=(n,e,a,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of w(e))!v.call(n,s)&&s!==a&&r(n,s,{get:()=>e[s],enumerable:!(d=y(e,s))||d.enumerable});return n};var c=(n,e,a)=>(a=n!=null?j(I(n)):{},l(e||!n||!n.__esModule?r(a,\"default\",{value:n,enumerable:!0}):a,n)),D=n=>l(r({},\"__esModule\",{value:!0}),n);var h=k((J,u)=>{u.exports=_jsx_runtime});var C={};x(C,{default:()=>P});var t=c(h());var i=c(h());function b(n){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsx)(e.li,{children:'Initial Loading: Verify that when the page loads, the message \"Loading...\" is displayed until the job IDs are fetched from the Hacker News API.'}),`\n`,(0,i.jsx)(e.li,{children:\"Job Postings: Once the job IDs are fetched, check that the job postings are rendered correctly. Verify that the job title, poster, and timestamp are displayed accurately for each job posting.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Click on a job title and ensure that it opens the correct URL in a new tab or window if there's a \",(0,i.jsx)(e.code,{children:\"url\"}),\" field in the job details.\"]}),`\n`,(0,i.jsx)(e.li,{children:'Pagination: Click the \"Load more\" button and verify that additional job postings are fetched and displayed. Repeat this step multiple times to ensure that pagination works correctly.'}),`\n`,(0,i.jsx)(e.li,{children:'Button State: Check that the \"Load more\" button is disabled while job details are being fetched to prevent multiple requests. Verify that the button becomes enabled again once the fetching process is complete.'}),`\n`,(0,i.jsx)(e.li,{children:'Keyboard Navigation: Use only the keyboard to navigate through the job postings and interact with the \"Load more\" button. Ensure that all interactive elements are accessible and usable without requiring a mouse.'}),`\n`]})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(b,n)})):b(n)}var g=T;var o=c(h());function f(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Note that we aren't handling any API failure cases here. It'd be good for you to handle them!\"}),`\n`]})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(f,n)})):f(n)}var p=_;function m(n){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",code:\"code\",h4:\"h4\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"This code uses the Composition API.\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Reactive State\"}),`\n`,(0,t.jsx)(e.p,{children:\"The code utilizes several reactive states to manage the application's behavior and data flow:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"fetchingJobDetails\"}),': This state variable keeps track of whether job details are currently being fetched from the API. It is used to disable the \"Load more\" button and provide feedback to the user during the fetching process.']}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"jobIds\"}),\": This state variable stores an array of job IDs retrieved from the Hacker News API. It is initially set to \",(0,t.jsx)(e.code,{children:\"null\"}),\" and later populated with data from the API. It allows for pagination and fetching job details based on the IDs.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"jobs\"}),\": This state variable maintains an array of job objects containing details like job title, author, time, and URL. It is initially \",(0,t.jsx)(e.code,{children:\"null\"}),\" and is updated when fetching job details from the API.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"page\"}),': This state variable keeps track of the current page number, determining which set of job IDs and details to fetch. It is incremented when the user clicks on the \"Load more\" button.']}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsx)(e.p,{children:\"Some notable aspects of the rendering code include:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The use of CSS Grid for the list of posts: The job postings are displayed in a grid layout using the \",(0,t.jsx)(e.code,{children:\"display: grid\"}),\" CSS property. This is a convenient way to allow consistent spacing between job postings.\"]}),`\n`,(0,t.jsx)(e.li,{children:'Styling of the \"Load more\" button: The \"Load more\" button is styled with a specific background color, border, and padding to make it visually prominent. The button also changes color on hover to provide visual feedback to the user.'}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Fetching Data\"}),`\n`,(0,t.jsx)(e.h4,{children:(0,t.jsx)(e.code,{children:\"fetchJobIds\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This asynchronous method is responsible for fetching the current page's list of job IDs from the Hacker News API and is called with the current page number as an argument.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since the API only has a single endpoint to fetch all the top job listings, we only need to fetch the list once and save it as \",(0,t.jsx)(e.code,{children:\"jobIds\"}),\" in state by making a \",(0,t.jsx)(e.code,{children:\"GET\"}),\" request to the API endpoint. Once the job IDs are retrieved, it slices the array based on the current page and returns the relevant subset of job IDs. Subsequent calls to this function will just be slicing the array without fetching the data again.\"]}),`\n`,(0,t.jsx)(e.h4,{children:(0,t.jsx)(e.code,{children:\"fetchJobs\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This asynchronous method fetches the job details based on the job IDs obtained from the \",(0,t.jsx)(e.code,{children:\"fetchJobIds\"}),\" method. It is called with the current page number as an argument. Inside the method, it calls \",(0,t.jsx)(e.code,{children:\"fetchJobIds(currPage)\"}),\" to get the job IDs for the current page then sets the \",(0,t.jsx)(e.code,{children:\"fetchingJobDetails\"}),\" state variable to \",(0,t.jsx)(e.code,{children:\"true\"}),\" to indicate that job details are being fetched. Using \",(0,t.jsx)(e.code,{children:\"Promise.all\"}),\", it makes multiple GET requests to the Hacker News API to fetch the details of each job, using the current page's job IDs. Once the job details are obtained, it updates the \",(0,t.jsx)(e.code,{children:\"jobs\"}),\" state variable by appending the newly-fetched jobs to the existing ones. Finally, it sets \",(0,t.jsx)(e.code,{children:\"fetchingJobDetails\"}),\" back to false to indicate that the fetching process is complete.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"watch\"}),\" Reactivity API is responsible for triggering the \",(0,t.jsx)(e.code,{children:\"fetchJobs\"}),\" method whenever the \",(0,t.jsx)(e.code,{children:\"page\"}),' changes. It ensures that when the page number is updated (e.g., when the user clicks the \"Load more\" button), the ',(0,t.jsx)(e.code,{children:\"fetchJobs\"}),\" method is called to fetch the corresponding job details for the new page. It's recommended to use \",(0,t.jsx)(e.code,{children:\"watch\"}),\" to sync the jobs details data with the current page instead of triggering \",(0,t.jsx)(e.code,{children:\"fetchJobs\"}),' on clicking the \"Load more\" button because it can easily extend to additional sources of pagination, such as infinite scrolling, additional pagination buttons, etc.']}),`\n`,(0,t.jsx)(g,{}),`\n`,(0,t.jsx)(p,{})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)}var P=L;return D(C);})();\n;return Component;"
}