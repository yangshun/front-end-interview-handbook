{
  "skeleton": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},h=(t,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of j(e))!w.call(t,i)&&i!==o&&r(t,i,{get:()=>e[i],enumerable:!(l=f(e,i))||l.enumerable});return t};var c=(t,e,o)=>(o=t!=null?u(g(t)):{},h(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),k=t=>h(r({},\"__esModule\",{value:!0}),t);var a=y((M,d)=>{d.exports=_jsx_runtime});var _={};x(_,{default:()=>C});var s=c(a());var n=c(a());function p(t){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\",h3:\"h3\",a:\"a\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Build a job board that displays the latest job postings fetched from the Hacker News API, with each posting displaying the job title, poster, and date posted.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/job-board/job-board-example.png\",alt:\"Job board example\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The page should show 6 jobs on initial load with a button to load more postings.\"}),`\n`,(0,n.jsx)(e.li,{children:`Clicking on the \"Load more\" button will load the next page of 6 postings. The button does not appear if there aren't any more postings to load.`}),`\n`,(0,n.jsxs)(e.li,{children:[\"If there's a \",(0,n.jsx)(e.code,{children:\"url\"}),\" field returned for the job details, make the job title a link that opens the job details page in a new window when clicked.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"The timestamp can be formatted in any way you like.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"API\"}),`\n`,(0,n.jsx)(e.p,{children:\"Hacker News has a public API to fetch jobs by Y Combinator companies. There's no single API that fetches a list of jobs together with the data, so you will have to make separate requests to fetch the necessary data and combine them to be displayed.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Job Stories\"}),`\n`,(0,n.jsx)(e.p,{children:\"Fetches a list of job posting IDs.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"URL: \",(0,n.jsx)(e.a,{href:\"https://hacker-news.firebaseio.com/v0/jobstories.json\",children:\"https://hacker-news.firebaseio.com/v0/jobstories.json\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"HTTP Method: \",(0,n.jsx)(e.code,{children:\"GET\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Content Type: \",(0,n.jsx)(e.code,{children:\"json\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Sample response:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`[35908337, 35904973, 35900922, 35893439, 35890114, 35880345, ...]\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Job Details\"}),`\n`,(0,n.jsx)(e.p,{children:\"Fetches job posting details given its ID.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"URL: \",(0,n.jsx)(e.code,{children:\"https://hacker-news.firebaseio.com/v0/item/{id}.json\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"HTTP Method: \",(0,n.jsx)(e.code,{children:\"GET\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Content Type: \",(0,n.jsx)(e.code,{children:\"json\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Sample response for \",(0,n.jsx)(e.a,{href:\"https://hacker-news.firebaseio.com/v0/item/35908337.json\",children:\"https://hacker-news.firebaseio.com/v0/item/35908337.json\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\n  \"by\": \"jamilbk\",\n  \"id\": 35908337,\n  \"score\": 1,\n  \"time\": 1683838872,\n  \"title\": \"Firezone (YC W22) is hiring Elixir and Rust engineers\",\n  \"type\": \"job\",\n  \"url\": \"https://www.ycombinator.com/companies/firezone/jobs\"\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The focus of this question is on functionality and not on styling, but feel free to beautify the page.\"}),`\n`,(0,n.jsx)(e.li,{children:\"To improve the user experience and avoid overfetching, you may want to limit the number of job details fetched to the number of jobs visible on the page.\"}),`\n`]})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var m=T;function b(t){return(0,s.jsx)(m,{})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(b,t)})):b(t)}var C=v;return k(_);})();\n;return Component;",
  "solution": "var Component=(()=>{var j=Object.create;var c=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var a in e)c(n,a,{get:e[a],enumerable:!0})},l=(n,e,a,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let h of y(e))!I.call(n,h)&&h!==a&&c(n,h,{get:()=>e[h],enumerable:!(d=w(e,h))||d.enumerable});return n};var s=(n,e,a)=>(a=n!=null?j(v(n)):{},l(e||!n||!n.__esModule?c(a,\"default\",{value:n,enumerable:!0}):a,n)),_=n=>l(c({},\"__esModule\",{value:!0}),n);var r=k((M,u)=>{u.exports=_jsx_runtime});var A={};x(A,{default:()=>T});var t=s(r());var i=s(r());function g(n){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",code:\"code\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsx)(e.li,{children:'Initial Loading: Verify that when the page loads, the message \"Loading...\" is displayed until the job IDs are fetched from the Hacker News API.'}),`\n`,(0,i.jsx)(e.li,{children:\"Job Postings: Once the job IDs are fetched, check that the job postings are rendered correctly. Verify that the job title, poster, and timestamp are displayed accurately for each job posting.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Click on a job title and ensure that it opens the correct URL in a new tab or window if there's a \",(0,i.jsx)(e.code,{children:\"url\"}),\" field in the job details.\"]}),`\n`,(0,i.jsx)(e.li,{children:'Pagination: Click the \"Load more\" button and verify that additional job postings are fetched and displayed. Repeat this step multiple times to ensure that pagination works correctly.'}),`\n`,(0,i.jsx)(e.li,{children:'Button State: Check that the \"Load more\" button is disabled while job details are being fetched to prevent multiple requests. Verify that the button becomes enabled again once the fetching process is complete.'}),`\n`,(0,i.jsx)(e.li,{children:'Keyboard Navigation: Use only the keyboard to navigate through the job postings and interact with the \"Load more\" button. Ensure that all interactive elements are accessible and usable without requiring a mouse.'}),`\n`]})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(g,n)})):g(n)}var b=C;var o=s(r());function f(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Note that we aren't handling any API failure cases here. It'd be good for you to handle them!\"}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(f,n)})):f(n)}var p=D;function m(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h4:\"h4\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Variables\"}),`\n`,(0,t.jsx)(e.p,{children:\"The Svelte code introduces the following variables to manage the application's behavior and data flow:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"PAGE_SIZE\"}),\": A constant that defines the number of jobs to be displayed on each page.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"pageCount\"}),\": This variable maintains the number of pages the user has navigated through, which determines the set of job details to be fetched.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"jobIdsCache\"}),\": It acts as a cache to store the array of job IDs from the Hacker News API. This avoids fetching the same data multiple times and impr oves the application's performance.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Fetching Data\"}),`\n`,(0,t.jsx)(e.h4,{children:(0,t.jsx)(e.code,{children:\"fetchJobIds\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This asynchronous function retrieves a list of job IDs from the Hacker News API based on the current page (\",(0,t.jsx)(e.code,{children:\"currPage\"}),\"). If the \",(0,t.jsx)(e.code,{children:\"jobIdsCache\"}),\" is empty (i.e., data hasn't been fetched before), the function fetches the job IDs from the API and then updates the \",(0,t.jsx)(e.code,{children:\"jobIdsCache\"}),\" with the fetched data. After this, the function calculates the start and end indices for the current page based on the \",(0,t.jsx)(e.code,{children:\"PAGE_SIZE\"}),\" and slices the array to return the relevant set of job IDs.\"]}),`\n`,(0,t.jsx)(e.h4,{children:(0,t.jsx)(e.code,{children:\"fetchJobs\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another asynchronous function, \",(0,t.jsx)(e.code,{children:\"fetchJobs\"}),\", is tasked with fetching the details for each job based on the job IDs obtained from \",(0,t.jsx)(e.code,{children:\"fetchJobIds\"}),\". It first fetches the job IDs for the current page and then, using \",(0,t.jsx)(e.code,{children:\"Promise.all\"}),\", it initiates multiple requests to the Hacker News API to get the details for each job. Once all the promises are resolved, it returns an array of job details which are then rendered on the page.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsx)(e.p,{children:\"Some notable aspects of the rendering code include:\"}),`\n`,(0,t.jsxs)(e.h4,{children:[(0,t.jsx)(e.code,{children:\"{#each}\"}),\" Block:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"The \",(0,t.jsx)(e.code,{children:\"{#each}\"}),\" block is used to iterate over a range defined by the \",(0,t.jsx)(e.code,{children:\"pageCount\"}),\". For each page, it fetches and renders the job postings corresponding to that page. This is achieved by the line \",(0,t.jsx)(e.code,{children:\"{#each { length: pageCount } as _, page}\"}),\". Here, the \",(0,t.jsx)(e.code,{children:\"_\"}),\" is a placeholder (which we aren't using), and \",(0,t.jsx)(e.code,{children:\"page\"}),\" gives us the current page number.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Inside this block, another block \",(0,t.jsx)(e.code,{children:\"{#await fetchJobs(page)}\"}),\" is used. The \",(0,t.jsx)(e.code,{children:\"{#await}\"}),\" block in Svelte is a special construct designed to handle promises. It shows the \",(0,t.jsx)(e.code,{children:\"loading\"}),\" message while the promise (in this case, fetching job details) is unresolved. Once the promise is resolved, the \",(0,t.jsx)(e.code,{children:\"{:then jobs}\"}),\" block is executed, rendering the list of jobs for the current page using the \",(0,t.jsx)(e.code,{children:\"JobPosting\"}),\" component.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{children:'\"Load More\" Button:'}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Within the \",(0,t.jsx)(e.code,{children:\"{#each}\"}),\" block, after listing the jobs for the current page, there's a conditional \",(0,t.jsx)(e.code,{children:\"{#if}\"}),' block that checks whether the \"Load more jobs\" button should be displayed. This condition evaluates to true if the current page is the last loaded page and the number of jobs fetched for that page equals ',(0,t.jsx)(e.code,{children:\"PAGE_SIZE\"}),\" (indicating there might be more jobs to load). This is achieved by the condition \",(0,t.jsx)(e.code,{children:\"{#if page === pageCount - 1 && jobs.length === PAGE_SIZE}\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:['The \"Load more jobs\" button, when clicked, increments the ',(0,t.jsx)(e.code,{children:\"pageCount\"}),\", effectively adding another page to our \",(0,t.jsx)(e.code,{children:\"{#each}\"}),\" block and triggering the fetching and rendering of the next set of job postings. This is a neat trick to implement pagination without having to deal with complex state management. The button's behavior is governed by the line \",(0,t.jsx)(e.code,{children:\"on:click={() => pageCount++}\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"By utilizing the above constructs, the Svelte application achieves an efficient paginated rendering of job postings, seamlessly integrating data fetching with user interactions.\"}),`\n`,(0,t.jsx)(b,{}),`\n`,(0,t.jsx)(p,{})]})}function P(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(m,n)})):m(n)}var T=P;return _(A);})();\n;return Component;"
}