{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/index.html\",\n    \"/src/index.js\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/index.html\",\n  \"environment\": \"parcel\"\n}\n"
    },
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div id=\"clock\" />\n    </div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/analog-clock-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  const FULL_ROTATION_DEGREES = 360;\n\n  function padTwoDigit(number) {\n    return number >= 10 ? String(number) : `0${number}`;\n  }\n\n  function hand({ height = 1, width = 1, angle }) {\n    const $hand = document.createElement('div');\n    $hand.classList.add('clock-hand');\n    $hand.setAttribute('aria-hidden', true);\n    $hand.style.transform = `rotate(${angle}deg) scaleY(${height}) scaleX(${width})`;\n    return $hand;\n  }\n\n  function render($rootEl, date, size) {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n\n    const secondsPercentage = seconds / 60;\n    // To have second-level precision in the minute hand angle.\n    const minutesPercentage =\n      (minutes + secondsPercentage) / 60;\n    // To have minute-level precision in the hour hand angle.\n    const hoursPercentage =\n      ((hours % 12) + minutesPercentage) / 12;\n\n    const hourAngle =\n      hoursPercentage * FULL_ROTATION_DEGREES;\n    const minutesAngle =\n      minutesPercentage * FULL_ROTATION_DEGREES;\n    const secondsAngle =\n      secondsPercentage * FULL_ROTATION_DEGREES;\n\n    const dateTimeDisplay = `${padTwoDigit(\n      date.getHours(),\n    )}:${padTwoDigit(minutes)}:${padTwoDigit(seconds)}`;\n\n    const $timeEl = document.createElement('time');\n    $timeEl.classList.add('clock');\n    $timeEl.dateTime = dateTimeDisplay;\n    $timeEl.setAttribute('style', `--size: ${size}px`);\n\n    $timeEl.append(\n      hand({ angle: hourAngle, height: 0.5, width: 3 }),\n      hand({ angle: minutesAngle, height: 0.9, width: 2 }),\n      hand({ angle: secondsAngle, height: 0.8 }),\n    );\n\n    $rootEl.innerHTML = '';\n    $rootEl.appendChild($timeEl);\n  }\n\n  function clock($rootEl, size) {\n    const timer = window.setInterval(() => {\n      render($rootEl, new Date(), size);\n    }, 100);\n\n    // The beforeunload event is fired before the tab/window is closed.\n    // Clear the interval when the tab/window is about to be closed.\n    window.addEventListener('beforeunload', () => {\n      window.clearInterval(timer);\n    });\n\n    render($rootEl, new Date(), size);\n  }\n\n  clock(document.getElementById('clock'), 200);\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.clock {\n  display: block;\n  flex-shrink: 0;\n  position: relative;\n  width: var(--size);\n  height: var(--size);\n  border-radius: 100%;\n  border: 2px solid #ccc;\n  transform: rotate(180deg);\n}\n\n.clock-hand {\n  background-color: #ccc;\n  position: absolute;\n  width: 1px;\n  height: calc(var(--size) / 2);\n  left: calc(var(--size) / 2);\n  top: calc(var(--size) / 2);\n  transform-origin: top center;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  }
}