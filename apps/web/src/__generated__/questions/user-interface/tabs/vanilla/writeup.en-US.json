{
  "skeleton": "var Component=(()=>{var f=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},l=(t,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!y.call(t,o)&&o!==i&&a(t,o,{get:()=>e[o],enumerable:!(c=g(e,o))||c.enumerable});return t};var d=(t,e,i)=>(i=t!=null?f(x(t)):{},l(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),_=t=>l(a({},\"__esModule\",{value:!0}),t);var r=j((T,h)=>{h.exports=_jsx_runtime});var D={};v(D,{default:()=>C});var s=d(r());var n=d(r());function u(t){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Build a tabs component that displays one panel of content at a time depending on the active tab element. Some HTML is provided for you as example contents.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Clicking on a tab makes it the active tab. Add a visual indication (e.g. using blue text color) for the active tab to differentiate it from the non-active tabs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"At all times, only one panel's contents should be displayed \\u2014 the one corresponding to the active tab's.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The focus of this question is on functionality, not the styling. There's no need to write any custom CSS except for highlighting the active tab.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"You may modify the markup (e.g. adding \",(0,n.jsx)(e.code,{children:\"id\"}),\"s, data attributes, replacing some tags, etc) and use client-side rendering instead.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"You may want to think about ways to improve the user experience of the application and implement them (you get bonus credit for doing that during interviews).\"}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var m=M;function p(t){return(0,s.jsx)(m,{})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(p,t)})):p(t)}var C=w;return _(D);})();\n;return Component;",
  "solution": "var Component=(()=>{var w=Object.create;var c=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),A=(n,e)=>{for(var s in e)c(n,s,{get:e[s],enumerable:!0})},d=(n,e,s,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of v(e))!j.call(n,l)&&l!==s&&c(n,l,{get:()=>e[l],enumerable:!(r=T(e,l))||r.enumerable});return n};var o=(n,e,s)=>(s=n!=null?w(y(n)):{},d(e||!n||!n.__esModule?c(s,\"default\",{value:n,enumerable:!0}):s,n)),I=n=>d(c({},\"__esModule\",{value:!0}),n);var h=x((C,u)=>{u.exports=_jsx_runtime});var R={};A(R,{default:()=>O});var t=o(h());var a=o(h());function p(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,a.jsxs)(e.ul,{children:[`\n`,(0,a.jsx)(e.li,{children:\"All the provided items should be displayed.\"}),`\n`,(0,a.jsx)(e.li,{children:\"The default active item should be reflected correctly.\"}),`\n`,(0,a.jsx)(e.li,{children:\"Selecting the tab items updates the tabpanel's contents with the active tabs's panel details.\"}),`\n`,(0,a.jsx)(e.li,{children:\"Test that you are able to initialize multiple instances of the component, each with independent states.\"}),`\n`]})]})}function _(n={}){let{wrapper:e}=n.components||{};return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(p,n)})):p(n)}var m=_;var i=o(h());function b(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Accessibility is an important factor for making good Tabs components. The \",(0,i.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/\",children:\"ARIA Authoring Practices Guide for Tabs\"}),\" has a long list of guidelines for the ARIA roles, states, and properties to add to the various elements of a Tab. \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/tabs-ii\",children:\"Tabs II\"}),\" and \",(0,i.jsx)(e.a,{href:\"/questions/user-interface/tabs-iii\",children:\"Tabs III\"}),\" will focus on improving the accessibility of Tabs component.\"]}),`\n`,(0,i.jsx)(e.h2,{children:\"Resources\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/tabs/\",children:\"Tabs Patterns | ARIA Authoring Practices Guide\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.radix-ui.com/primitives/docs/components/tabs\",children:\"Tabs \\u2013 Radix Primitives\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/Tabs.html\",children:\"Tabs \\u2013 React Aria\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://headlessui.com/react/tabs\",children:\"Tabs - Headless UI\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://ariakit.org/components/tab\",children:\"Tab \\u2013 Ariakit\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://reach.tech/tabs\",children:\"Tabs | Reach UI\"})}),`\n`]})]})}function M(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(b,n)})):b(n)}var f=M;function g(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsx)(e.h3,{children:\"Config / API Design\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Part of the complexity of building a component is designing the API for it. The \",(0,t.jsx)(e.code,{children:\"tabs\"}),\" function accepts a root element, \",(0,t.jsx)(e.code,{children:\"$rootEl\"}),\", where the tabs components will be inserted. The second parameter of the \",(0,t.jsx)(e.code,{children:\"tabs\"}),\" function is an object used to store the configuration options. At the bare minimum, we will need the following options:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"items\"}),\": A list of item objects. Each item is an object with the fields:\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"value\"}),\": A unique identifier for the tab item.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"label\"}),\": The text label to show in the tab item.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"panel\"}),\": The contents to show in the tab panel when the item is active.\"]}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"defaultValue\"}),\": The default tab item/panel to show. In case the \",(0,t.jsx)(e.code,{children:\"defaultValue\"}),\" is not provided, we'll use the first item as the value. This is assuming that \",(0,t.jsx)(e.code,{children:\"items\"}),\" is non-empty.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"tabs\"}),\" function maintains the selected tab value in the \",(0,t.jsx)(e.code,{children:\"state\"}),\" object, and it uses the \",(0,t.jsx)(e.code,{children:\"DOM\"}),\" object to store references to the tab bar and tab panel elements.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We only need one state value in the component, which is the currently selected tab item. The initial value of this state will either come from the \",(0,t.jsx)(e.code,{children:\"defaultValue\"}),\" option or the value of the first item.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"tabs\"}),\" function calls the \",(0,t.jsx)(e.code,{children:\"init\"}),\", \",(0,t.jsx)(e.code,{children:\"update\"}),\", and \",(0,t.jsx)(e.code,{children:\"attachEvents\"}),\" functions to set up the tabs widget, update its initial state, and attach the necessary event listeners.\"]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"init\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This function sets up the DOM elements that remain throughout the lifecycle of the component, aka they will never be destroyed. In the Tabs component, the tabs list and the tab panel are always present. This function sets up the root element and creates the tab bar and tab panel elements.\"}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"attachEvents\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Only a single event listener is necessary in this component, which is the \",(0,t.jsx)(e.code,{children:\"click\"}),\" event, to be added to the tablist. We make use of Event Delegation so that only a single event listener has to be added and will work for any of its child contents. This technique is useful given that we'll repeatedly destroy and recreate the DOM nodes for the tabs. If we added separate event listeners to each tab, we'd have to keep adding the event listener each time the tabs are recreated.\"]}),`\n`,(0,t.jsx)(e.h3,{children:(0,t.jsx)(e.code,{children:\"update\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This function updates the tablist and tab panel elements to reflect the current selected tab value. The tablist is always changing depending on the selected value, hence it will be easier to destroy all the tabs and render them again depending on the updated state. We will also have to update the contents of the panel with the selected tab's details.\"}),`\n`,(0,t.jsx)(m,{}),`\n`,(0,t.jsx)(f,{})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var O=D;return I(R);})();\n;return Component;"
}