{
  "author": "yangshun",
  "files": {
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"star-rating\"></div>\n    <div id=\"star-rating-2\"></div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/star-rating-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  function starRating(\n    $rootElement,\n    { max = 5, value = 0 },\n  ) {\n    const STAR_ICON_CLASS = 'star-icon';\n    const STAR_ICON_FILLED_CLASS = 'star-icon-filled';\n    const STAR_TEMPLATE = `<svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"${STAR_ICON_CLASS}\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    stroke-width=\"2\">\n    <path\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n    </svg>`;\n\n    let currentValue = value;\n\n    function initialize() {\n      const html = Array.from(\n        { length: max },\n        () => STAR_TEMPLATE,\n      ).join('');\n      // Using .innerHTML is safe here since it's non-user content.\n      $rootElement.innerHTML = html;\n\n      $rootElement.addEventListener('click', (event) => {\n        const $starEl = event.target.closest(\n          `.${STAR_ICON_CLASS}`,\n        );\n        if ($starEl == null) {\n          return;\n        }\n\n        const value =\n          [...$rootElement.children].indexOf($starEl) + 1;\n        setValue(value);\n      });\n\n      $rootElement.addEventListener(\n        'mouseover',\n        (event) => {\n          const $starEl = event.target.closest(\n            `.${STAR_ICON_CLASS}`,\n          );\n          if ($starEl == null) {\n            return;\n          }\n\n          const value =\n            [...$rootElement.children].indexOf($starEl) + 1;\n          highlightStars(value);\n        },\n      );\n\n      $rootElement.addEventListener('mouseout', () => {\n        setValue(currentValue);\n      });\n    }\n\n    function setValue(value) {\n      currentValue = value;\n      highlightStars(currentValue);\n    }\n\n    function highlightStars(index) {\n      for (\n        let i = 0;\n        i < $rootElement.children.length;\n        i++\n      ) {\n        if (i < index) {\n          $rootElement.children[i].classList.add(\n            STAR_ICON_FILLED_CLASS,\n          );\n        } else {\n          $rootElement.children[i].classList.remove(\n            STAR_ICON_FILLED_CLASS,\n          );\n        }\n      }\n    }\n\n    initialize(max);\n    setValue(currentValue);\n\n    return {\n      // Expose a setValue function so that users can imperatively\n      // change the value of the widget in the case of external\n      // events. Not strictly necessary but helpful if the need arises.\n      setValue,\n    };\n  }\n\n  starRating(document.getElementById('star-rating'), {\n    max: 5,\n    value: 3,\n  });\n  starRating(document.getElementById('star-rating-2'), {\n    max: 10,\n    value: 5,\n  });\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.star-icon {\n  --icon-size: 32px;\n\n  cursor: pointer;\n  height: var(--icon-size);\n  width: var(--icon-size);\n}\n\n.star-icon-filled {\n  fill: yellow;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  },
  "writeup": "var Component=(()=>{var x=Object.create;var c=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of b(e))!_.call(t,s)&&s!==o&&c(t,s,{get:()=>e[s],enumerable:!(h=w(e,s))||h.enumerable});return t};var a=(t,e,o)=>(o=t!=null?x(j(t)):{},l(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),M=t=>l(c({},\"__esModule\",{value:!0}),t);var d=y((R,u)=>{u.exports=_jsx_runtime});var F={};k(F,{default:()=>T});var n=a(d());var r=a(d());function m(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Click on each star and move the cursor away, see that the highlighted state is correct.\"}),`\n`,(0,r.jsxs)(e.li,{children:[\"Hover over each star, see that every star under the cursor and to its left are highlighted.\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Remove cursor over widget, see that the highlighted state is back to before the hovering.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.li,{children:\"Render multiple components, ensure that each can maintain its own state and interacting with a widget does not affect other onscreen components.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var g=C;var i=a(d());function f(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,i.jsx)(e.p,{children:\"The Star Rating widget can be improved in the following ways:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Allow the value to be part of a form submit event data by embedding an \",(0,i.jsx)(e.code,{children:\"<input>\"}),\".\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Add keyboard support for better a11y.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Add RTL (right-to-left) support.\"}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var v=D;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We first construct the DOM to render the number of stars and a \",(0,n.jsx)(e.code,{children:\"highlightStars\"}),\" function which highlights all the stars smaller than the passed in \",(0,n.jsx)(e.code,{children:\"index\"}),\" (0-based).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We also need to variable \",(0,n.jsx)(e.code,{children:\"currentValue\"}),\" to track the latest value which determines the highlighted state unhovered. This is needed because we need to revert to that state when the cursor is not hovering over any stars.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Then we add a few event listeners to the root component of the widget:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"click\"}),\": Using event delegation, we only have to add one click event handler per widget. We can determine the index of the currently clicked star using \",(0,n.jsx)(e.code,{children:\"event.target.closest\"}),\" and add/remove the \",(0,n.jsx)(e.code,{children:\"star-icon-filled\"}),\" class from the stars depending on the index of the clicked star.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"mouseover\"}),\": Using event delegation, we only have to add one mouseover event handler per widget. We can determine the index of the currently hovered star using \",(0,n.jsx)(e.code,{children:\"event.target.closest\"}),\" and add/remove the \",(0,n.jsx)(e.code,{children:\"star-icon-filled\"}),\" class from the stars depending on the index of the clicked star. This takes priority over the currently filled stars.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"mouseout\"}),\": Reset the filled state to before the \",(0,n.jsx)(e.code,{children:\"mouseover\"}),\" event. Event delegation is not needed here because there's no specific star involved.\"]}),`\n`]}),`\n`,(0,n.jsx)(v,{}),`\n`,(0,n.jsx)(g,{})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var T=O;return M(F);})();\n;return Component;"
}