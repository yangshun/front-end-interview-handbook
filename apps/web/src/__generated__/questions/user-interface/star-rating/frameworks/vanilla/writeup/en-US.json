{
  "skeleton": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of x(e))!b.call(t,i)&&i!==r&&s(t,i,{get:()=>e[i],enumerable:!(l=g(e,i))||l.enumerable});return t};var h=(t,e,r)=>(r=t!=null?p(w(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),_=t=>c(s({},\"__esModule\",{value:!0}),t);var o=j((k,d)=>{d.exports=_jsx_runtime});var D={};v(D,{default:()=>C});var a=h(o());var n=h(o());function u(t){let e=Object.assign({p:\"p\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Create a star rating widget that allows users to select a rating value.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The widget accepts two parameters: the maximum number of stars and the number of currently filled stars.\"}),`\n`,(0,n.jsx)(e.li,{children:\"When a star is clicked, it is filled along with all the stars to its left.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Hovering over a star fills that star and all stars to its left.\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The stars which need to be filled during hover take priority over existing filled state.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If the cursor leaves the widget and no new selection is made, the appropriate stars revert to the filled state before the hovering.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Make the star rating widget reusable such that multiple instances can be rendered within the same page.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The star icons, both empty and filled, are provided to you as SVGs.\"})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(u,t)})):u(t)}var f=M;function m(t){return(0,a.jsx)(f,{})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return _(D);})();\n;return Component;",
  "solution": "var Component=(()=>{var x=Object.create;var c=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of b(e))!_.call(t,s)&&s!==o&&c(t,s,{get:()=>e[s],enumerable:!(h=w(e,s))||h.enumerable});return t};var a=(t,e,o)=>(o=t!=null?x(j(t)):{},l(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),M=t=>l(c({},\"__esModule\",{value:!0}),t);var d=y((R,u)=>{u.exports=_jsx_runtime});var F={};k(F,{default:()=>T});var n=a(d());var r=a(d());function m(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Click on each star and move the cursor away, see that the highlighted state is correct.\"}),`\n`,(0,r.jsxs)(e.li,{children:[\"Hover over each star, see that every star under the cursor and to its left are highlighted.\",`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Remove cursor over widget, see that the highlighted state is back to before the hovering.\"}),`\n`]}),`\n`]}),`\n`,(0,r.jsx)(e.li,{children:\"Render multiple components, ensure that each can maintain its own state and interacting with a widget does not affect other onscreen components.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var g=C;var i=a(d());function f(t){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,i.jsx)(e.p,{children:\"The Star Rating widget can be improved in the following ways:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Allow the value to be part of a form submit event data by embedding an \",(0,i.jsx)(e.code,{children:\"<input>\"}),\".\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Add keyboard support for better a11y.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Add RTL (right-to-left) support.\"}),`\n`]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var v=D;function p(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We first construct the DOM to render the number of stars and a \",(0,n.jsx)(e.code,{children:\"highlightStars\"}),\" function which highlights all the stars smaller than the passed in \",(0,n.jsx)(e.code,{children:\"index\"}),\" (0-based).\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We also need to variable \",(0,n.jsx)(e.code,{children:\"currentValue\"}),\" to track the latest value which determines the highlighted state unhovered. This is needed because we need to revert to that state when the cursor is not hovering over any stars.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Then we add a few event listeners to the root component of the widget:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"click\"}),\": Using event delegation, we only have to add one click event handler per widget. We can determine the index of the currently clicked star using \",(0,n.jsx)(e.code,{children:\"event.target.closest\"}),\" and add/remove the \",(0,n.jsx)(e.code,{children:\"star-icon-filled\"}),\" class from the stars depending on the index of the clicked star.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"mouseover\"}),\": Using event delegation, we only have to add one mouseover event handler per widget. We can determine the index of the currently hovered star using \",(0,n.jsx)(e.code,{children:\"event.target.closest\"}),\" and add/remove the \",(0,n.jsx)(e.code,{children:\"star-icon-filled\"}),\" class from the stars depending on the index of the clicked star. This takes priority over the currently filled stars.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"mouseout\"}),\": Reset the filled state to before the \",(0,n.jsx)(e.code,{children:\"mouseover\"}),\" event. Event delegation is not needed here because there's no specific star involved.\"]}),`\n`]}),`\n`,(0,n.jsx)(v,{}),`\n`,(0,n.jsx)(g,{})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var T=O;return M(F);})();\n;return Component;"
}