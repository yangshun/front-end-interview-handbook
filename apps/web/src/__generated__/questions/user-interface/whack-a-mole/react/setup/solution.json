{
  "author": "utpal-d4l",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.js\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.js\",\n  \"environment\": \"create-react-app\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/whack-a-mole-react-solution\",\n  \"author\": \"utpal-d4l\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useRef, useState } from 'react';\n\n// Fisher-Yates shuffle.\nfunction shuffle(array) {\n  for (let i = 0; i < array.length; i++) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction generateMolePositions(molesAtOnce, totalCount) {\n  // Generate an array containing values [0, totalCount].\n  const indices = Array.from({ length: totalCount }).map(\n    (_, index) => index,\n  );\n  shuffle(indices);\n  // Take the first `totalCount` items\n  // from the shuffled array.\n  const shuffledIndices = indices.slice(0, molesAtOnce);\n\n  return new Set(shuffledIndices);\n}\n\nfunction WhackAMole({\n  rows = 3,\n  cols = 3,\n  roundDuration = 30,\n  molesAtOnce = 1,\n  molesAppearingInterval = 1500,\n}) {\n  const totalCount = rows * cols;\n\n  // Set of indices for currently visible moles.\n  const [visible, setVisible] = useState(new Set());\n  // Current player score.\n  const [score, setScore] = useState(null);\n  // Whether the game is in progress.\n  const [running, setRunning] = useState(false);\n  // Time left for the current round.\n  const [timeLeft, setTimeLeft] = useState(roundDuration);\n  const countdownTimerId = useRef(null);\n\n  useEffect(() => {\n    let timerId;\n\n    if (running) {\n      // Generate moles at fixed intervals.\n      timerId = setInterval(() => {\n        setVisible(\n          generateMolePositions(molesAtOnce, totalCount),\n        );\n      }, molesAppearingInterval);\n    }\n\n    return () => {\n      clearInterval(timerId);\n      setVisible(new Set());\n    };\n  }, [\n    running,\n    molesAtOnce,\n    molesAppearingInterval,\n    totalCount,\n  ]);\n\n  function startGame() {\n    // Reset variables to default values.\n    setRunning(true);\n    setTimeLeft(roundDuration);\n    setScore(0);\n\n    // Interval to decrement the timer to 0.\n    countdownTimerId.current = setInterval(() => {\n      setTimeLeft((currTimeLeft) => {\n        if (currTimeLeft <= 0) {\n          clearInterval(countdownTimerId.current);\n          setRunning(false);\n          return 0;\n        }\n\n        return currTimeLeft - 1;\n      });\n    }, 1000);\n  }\n\n  useEffect(() => {\n    return () => {\n      // Clear countdown timer on unmount if it's running.\n      clearInterval(countdownTimerId.current);\n    };\n  }, []);\n\n  function whackMole(index) {\n    // Whacking on an empty cell, no-op.\n    if (!visible.has(index)) {\n      return;\n    }\n\n    const newVisible = new Set(visible);\n    newVisible.delete(index);\n    setVisible(newVisible);\n    setScore((score ?? 0) + 1);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        {score == null ? (\n          <button\n            className=\"start-button\"\n            type=\"button\"\n            onClick={startGame}>\n            Start Game\n          </button>\n        ) : (\n          <div className=\"round-information\">\n            <p>Score: {score}</p>\n            {!running && (\n              <button\n                className=\"start-button\"\n                type=\"button\"\n                onClick={startGame}>\n                Play again\n              </button>\n            )}\n            <p>Time Left: {timeLeft}</p>\n          </div>\n        )}\n      </div>\n      <div\n        className=\"grid\"\n        style={{\n          gridTemplateColumns: `repeat(${rows}, 1fr)`,\n          gridTemplateRows: `repeat(${cols}, 1fr)`,\n        }}>\n        {Array(totalCount)\n          .fill(null)\n          .map((_, index) => {\n            return (\n              <button\n                className=\"grid__cell\"\n                key={index}\n                onClick={() => whackMole(index)}>\n                <img\n                  src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-head.png\"\n                  alt=\"Mole head\"\n                  className={[\n                    'grid__cell-contents',\n                    'mole-head',\n                    visible.has(index) &&\n                      'mole-head--visible',\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                />\n                <img\n                  src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-hill.png\"\n                  alt=\"Mole hill\"\n                  className=\"grid__cell-contents mole-hill\"\n                />\n              </button>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <WhackAMole\n      rows={3}\n      cols={3}\n      roundDuration={15}\n      molesAtOnce={2}\n      molesAppearingInterval={1500}\n    />\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  --background-color: salmon;\n\n  background-color: var(--background-color);\n  font-family: sans-serif;\n  padding: 2rem;\n}\n\n.app {\n  box-sizing: border-box;\n  padding-block: 16px;\n  margin: 0 auto;\n  max-width: 480px;\n}\n\n.header {\n  display: flex;\n  height: 30px;\n  align-items: center;\n  padding: 1rem 0;\n  justify-content: center;\n}\n\n.round-information {\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  justify-content: space-between;\n  font-weight: bold;\n}\n\n.start-button {\n  background-color: #fff;\n  border: none;\n  border-radius: 4px;\n  color: #000;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 0.5rem 1rem;\n}\n\n.grid {\n  aspect-ratio: 1 / 1;\n  display: grid;\n  justify-content: center;\n}\n\n.grid__cell {\n  border: none;\n  background-color: var(--background-color);\n  position: relative;\n  overflow: hidden;\n}\n\n.grid__cell-contents {\n  --width: 0;\n  --height: 0;\n  object-fit: contain;\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: var(--width);\n  height: var(--height);\n  user-select: none;\n}\n\n.mole-hill {\n  --width: 100%;\n  --height: 30%;\n  transform: translate(-50%, 10px);\n}\n\n.mole-head {\n  --width: 100%;\n  --height: 70%;\n\n  transform: translate(-50%, 100%);\n  transition: transform 0.1s ease-in;\n  cursor: pointer;\n}\n\n.mole-head--visible {\n  transform: translate(-50%, 0%);\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  }
}