{
  "author": "tanhauhau",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.svelte\", \"/src/styles.css\"],\n  \"activeFile\": \"/src/App.svelte\",\n  \"environment\": \"svelte\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/whack-a-mole-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import { onDestroy } from 'svelte';\n\n  export let rows = 3;\n  export let cols = 3;\n  export let roundDuration = 30;\n  export let molesAtOnce = 1;\n  export let molesAppearingInterval = 1500;\n\n  $: totalCount = rows * cols;\n\n  // Set of indices for currently visible moles.\n  let visible = new Set();\n  // Current player score.\n  let score = null;\n  // Whether the game is in progress.\n  let running = false;\n  // Time left for the current round.\n  let timeLeft = roundDuration;\n  let countdownTimerId = null;\n  let moleTimerId = null;\n\n  function startGame() {\n    // Reset variables to default values.\n    running = true;\n    timeLeft = roundDuration;\n    score = 0;\n    visible = new Set();\n\n    // Interval to decrement the timer to 0.\n    countdownTimerId = setInterval(() => {\n      if (timeLeft <= 0) {\n        clearInterval(countdownTimerId);\n        stopGame();\n        running = false;\n        timeLeft = 0;\n      } else {\n        timeLeft--;\n      }\n    }, 1000);\n\n    // Interval to generate moles.\n    moleTimerId = setInterval(() => {\n      visible = generateMolePositions(\n        molesAtOnce,\n        totalCount,\n      );\n    }, molesAppearingInterval);\n  }\n\n  function stopGame() {\n    clearInterval(moleTimerId);\n    visible = new Set();\n  }\n\n  onDestroy(() => {\n    // Clear timers on unmount if it's running.\n    clearInterval(countdownTimerId);\n    stopGame();\n  });\n\n  function whackMole(index) {\n    // Whacking on an empty cell, no-op.\n    if (!visible.has(index)) {\n      return;\n    }\n\n    visible.delete(index);\n    visible = visible;\n    score++;\n  }\n\n  // Fisher-Yates shuffle.\n  function shuffle(array) {\n    for (let i = 0; i < array.length; i++) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  function generateMolePositions(molesAtOnce, totalCount) {\n    // Generate an array containing values [0, totalCount].\n    const indices = Array.from({ length: totalCount }).map(\n      (_, index) => index,\n    );\n    shuffle(indices);\n    // Take the first `totalCount` items\n    // from the shuffled array.\n    const shuffledIndices = indices.slice(0, molesAtOnce);\n\n    return new Set(shuffledIndices);\n  }\n</script>\n\n<div class=\"app\">\n  <div class=\"header\">\n    {#if score == null}\n      <button\n        class=\"start-button\"\n        type=\"button\"\n        on:click={startGame}>\n        Start Game\n      </button>\n    {:else}\n      <div class=\"round-information\">\n        <p>Score: {score}</p>\n        {#if !running}\n          <button\n            class=\"start-button\"\n            type=\"button\"\n            on:click={startGame}>\n            Play again\n          </button>\n        {/if}\n        <p>Time Left: {timeLeft}</p>\n      </div>\n    {/if}\n  </div>\n  <div\n    class=\"grid\"\n    style:grid-template-columns={`repeat(${cols}, 1fr)`}\n    style:grid-template-rows={`repeat(${rows}, 1fr)`}>\n    {#each { length: totalCount } as _, index}\n      <button\n        class=\"grid__cell\"\n        on:click={() => whackMole(index)}>\n        <img\n          src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-head.png\"\n          alt=\"Mole head\"\n          class=\"grid__cell-contents mole-head\"\n          class:mole-head--visible={visible.has(index)} />\n        <img\n          src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-hill.png\"\n          alt=\"Mole hill\"\n          class=\"grid__cell-contents mole-hill\" />\n      </button>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .app {\n    box-sizing: border-box;\n    padding-block: 16px;\n    margin: 0 auto;\n    max-width: 480px;\n  }\n\n  .header {\n    display: flex;\n    height: 30px;\n    align-items: center;\n    padding: 1rem 0;\n    justify-content: center;\n  }\n\n  .round-information {\n    align-items: center;\n    display: flex;\n    flex-grow: 1;\n    justify-content: space-between;\n    font-weight: bold;\n  }\n\n  .start-button {\n    background-color: #fff;\n    border: none;\n    border-radius: 4px;\n    color: #000;\n    cursor: pointer;\n    font-weight: bold;\n    padding: 0.5rem 1rem;\n  }\n\n  .grid {\n    aspect-ratio: 1 / 1;\n    display: grid;\n    justify-content: center;\n  }\n\n  .grid__cell {\n    border: none;\n    background-color: var(--background-color);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .grid__cell-contents {\n    --width: 0;\n    --height: 0;\n    object-fit: contain;\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: var(--width);\n    height: var(--height);\n    user-select: none;\n  }\n\n  .mole-hill {\n    --width: 100%;\n    --height: 30%;\n    transform: translate(-50%, 10px);\n  }\n\n  .mole-head {\n    --width: 100%;\n    --height: 70%;\n\n    transform: translate(-50%, 100%);\n    transition: transform 0.1s ease-in;\n    cursor: pointer;\n  }\n\n  .mole-head--visible {\n    transform: translate(-50%, 0%);\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/styles.css": {
      "code": "* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  --background-color: salmon;\n\n  background-color: var(--background-color);\n  font-family: sans-serif;\n  padding: 2rem;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.svelte",
    "environment": "svelte"
  }
}