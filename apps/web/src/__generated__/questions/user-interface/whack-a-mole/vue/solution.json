{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/whack-a-mole-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { computed, onUnmounted, ref } from 'vue';\nconst props = defineProps({\n  rows: {\n    type: Number,\n    default: 3,\n  },\n  cols: {\n    type: Number,\n    default: 3,\n  },\n  roundDuration: {\n    type: Number,\n    default: 30,\n  },\n  molesAtOnce: {\n    type: Number,\n    default: 1,\n  },\n  molesAppearingInterval: {\n    type: Number,\n    default: 1500,\n  },\n});\n\nconst totalCount = computed(() => props.rows * props.cols);\n\nconst visible = ref(new Set());\nconst score = ref(null);\nconst running = ref(false);\nconst timeLeft = ref(0);\nlet countdownTimerId = null;\nlet moleTimerId = null;\n\nfunction startGame() {\n  // Reset variables to default values.\n  running.value = true;\n  timeLeft.value = props.roundDuration;\n  score.value = 0;\n  visible.value.clear();\n\n  // Interval to decrement the timer to 0.\n  countdownTimerId = setInterval(() => {\n    if (timeLeft.value <= 0) {\n      clearInterval(countdownTimerId);\n      stopGame();\n      running.value = false;\n      timeLeft.value = 0;\n    } else {\n      timeLeft.value--;\n    }\n  }, 1000);\n\n  // Interval to generate moles.\n  moleTimerId = setInterval(() => {\n    visible.value = generateMolePositions(\n      props.molesAtOnce,\n      totalCount.value,\n    );\n  }, props.molesAppearingInterval);\n}\n\nfunction stopGame() {\n  clearInterval(moleTimerId);\n  visible.value.clear();\n}\n\nonUnmounted(() => {\n  // Clear timers on unmount if it's running.\n  clearInterval(countdownTimerId);\n  stopGame();\n});\n\nfunction whackMole(index) {\n  // Whacking on an empty cell, no-op.\n  if (!visible.value.has(index)) {\n    return;\n  }\n\n  visible.value.delete(index);\n  score.value++;\n}\n\n// Fisher-Yates shuffle.\nfunction shuffle(array) {\n  for (let i = 0; i < array.length; i++) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction generateMolePositions(molesAtOnce, totalCount) {\n  // Generate an array containing values [0, totalCount].\n  const indices = Array.from({ length: totalCount }).map(\n    (_, index) => index,\n  );\n  shuffle(indices);\n  // Take the first `totalCount` items\n  // from the shuffled array.\n  const shuffledIndices = indices.slice(0, molesAtOnce);\n\n  return new Set(shuffledIndices);\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <div class=\"header\">\n      <button\n        v-if=\"score == null\"\n        class=\"start-button\"\n        type=\"button\"\n        @click=\"startGame\">\n        Start Game\n      </button>\n      <div v-else class=\"round-information\">\n        <p>Score: {{ score }}</p>\n        <button\n          v-if=\"!running\"\n          class=\"start-button\"\n          type=\"button\"\n          @click=\"startGame\">\n          Play again\n        </button>\n        <p>Time Left: {{ timeLeft }}</p>\n      </div>\n    </div>\n\n    <div\n      class=\"grid\"\n      :style=\"{\n        'grid-template-columns': `repeat(${props.cols}, 1fr)`,\n        'grid-template-rows': `repeat(${props.rows}, 1fr)`,\n      }\">\n      <button\n        v-for=\"(_, index) in totalCount\"\n        :key=\"index\"\n        class=\"grid__cell\"\n        @click=\"whackMole(index)\">\n        <img\n          src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-head.png\"\n          alt=\"Mole head\"\n          :class=\"[\n            'grid__cell-contents mole-head',\n            visible.has(index) && 'mole-head--visible',\n          ]\" />\n\n        <img\n          src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-hill.png\"\n          alt=\"Mole hill\"\n          class=\"grid__cell-contents mole-hill\" />\n      </button>\n    </div>\n  </div>\n</template>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  --background-color: salmon;\n\n  background-color: var(--background-color);\n  font-family: sans-serif;\n  padding: 2rem;\n}\n\n.app {\n  box-sizing: border-box;\n  padding-block: 16px;\n  margin: 0 auto;\n  max-width: 480px;\n}\n\n.header {\n  display: flex;\n  height: 30px;\n  align-items: center;\n  padding: 1rem 0;\n  justify-content: center;\n}\n\n.round-information {\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  justify-content: space-between;\n  font-weight: bold;\n}\n\n.start-button {\n  background-color: #fff;\n  border: none;\n  border-radius: 4px;\n  color: #000;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 0.5rem 1rem;\n}\n\n.grid {\n  aspect-ratio: 1 / 1;\n  display: grid;\n  justify-content: center;\n}\n\n.grid__cell {\n  border: none;\n  background-color: var(--background-color);\n  position: relative;\n  overflow: hidden;\n}\n\n.grid__cell-contents {\n  --width: 0;\n  --height: 0;\n  object-fit: contain;\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: var(--width);\n  height: var(--height);\n  user-select: none;\n}\n\n.mole-hill {\n  --width: 100%;\n  --height: 30%;\n  transform: translate(-50%, 10px);\n}\n\n.mole-head {\n  --width: 100%;\n  --height: 70%;\n\n  transform: translate(-50%, 100%);\n  transition: transform 0.1s ease-in;\n  cursor: pointer;\n}\n\n.mole-head--visible {\n  transform: translate(-50%, 0%);\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  },
  "writeup": "var Component=(()=>{var b=Object.create;var c=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var j=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),T=(i,e)=>{for(var l in e)c(i,l,{get:e[l],enumerable:!0})},d=(i,e,l,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of v(e))!k.call(i,o)&&o!==l&&c(i,o,{get:()=>e[o],enumerable:!(h=w(e,o))||h.enumerable});return i};var a=(i,e,l)=>(l=i!=null?b(x(i)):{},d(e||!i||!i.__esModule?c(l,\"default\",{value:i,enumerable:!0}):l,i)),M=i=>d(c({},\"__esModule\",{value:!0}),i);var s=j((I,m)=>{m.exports=_jsx_runtime});var D={};T(D,{default:()=>O});var n=a(s());var t=a(s());function u(i){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\",code:\"code\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Game Start\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:'Verify that the round starts when the \"Start\" button is clicked.'}),`\n`,(0,t.jsx)(e.li,{children:\"Check that the timer starts counting down from the specified time limit.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that moles start appearing randomly in the holes.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Whacking Moles\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Test that \",(0,t.jsx)(e.code,{children:\"molesAtOnce\"}),\" moles appear every \",(0,t.jsx)(e.code,{children:\"molesAppearingInterval\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Click on a visible mole and verify that the mole disappears.\"}),`\n`,(0,t.jsx)(e.li,{children:'Confirm that the score increases by one when a mole is successfully \"whacked\".'}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that clicking a hole that is not visible does not affect the score.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Game End\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that the round ends when the timer reaches zero.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Check that the moles stop appearing once the game ends.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that the final score is displayed correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:'Test that the \"Play Again\" button shows up after the game ends and clicking on it starts a new round.'}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Game Logic\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that moles appear and disappear randomly from different holes.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Test the time limit functionality by setting different time limits and verifying that the game ends accordingly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that hitting a mole adds one to the score and missing a mole does not affect the score.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Edge Cases\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Test the game behavior when unexpected input or invalid actions occur, such as clicking rapidly on multiple holes.\"}),`\n`]}),`\n`]}),`\n`]})]})}function _(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var g=_;var r=a(s());function p(i){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},i.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"Timers created by \",(0,r.jsx)(e.code,{children:\"setInterval\"}),\" and \",(0,r.jsx)(e.code,{children:\"setTimeout\"}),\" are not precise. If the main thread is busy, the callback's execution can be delayed. However, these approaches are likely sufficient for the purpose of the interview. You can score brownie points for mentioning this.\"]})]})}function C(i={}){let{wrapper:e}=i.components||{};return e?(0,r.jsx)(e,Object.assign({},i,{children:(0,r.jsx)(p,i)})):p(i)}var f=C;function y(i){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h4:\"h4\",ol:\"ol\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Props\"}),`\n`,(0,n.jsx)(e.p,{children:\"Our game retains its customizability, offering the following inputs:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rows\"}),\": Number of rows.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"cols\"}),\": Number of columns.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"roundDuration\"}),\": The length of each game round.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\": The number of moles that can pop up simultaneously.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"molesAppearingInterval\"}),\": The duration for which a mole remains visible.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"State Management\"}),`\n`,(0,n.jsx)(e.p,{children:\"To maintain the game state, Svelte relies on reactive declarations and simple variables:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"visible\"}),\": A set denoting which holes have moles currently.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"score\"}),\": Tracks the player's score.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"running\"}),\": A flag indicating if the game is ongoing.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"timeLeft\"}),\": Countdown for the current game round.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Game Logic\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Starting the Game\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"startGame\"}),\" initializes the game. It sets up two main timers:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"countdownTimerId\"}),\": Decreases \",(0,n.jsx)(e.code,{children:\"timeLeft\"}),\" every second, and stops the game once it reaches zero.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"moleTimerId\"}),\": Generates new mole positions at regular intervals using \",(0,n.jsx)(e.code,{children:\"generateMolePositions\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"stopGame\"}),\" complements \",(0,n.jsx)(e.code,{children:\"startGame\"}),\", ensuring that the mole generation timer stops when the game ends.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Cleaning Up\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"With the \",(0,n.jsx)(e.code,{children:\"onUnmounted\"}),\" lifecycle hook, we ensure that any lingering timers are cleared when the component is unmmounted, preventing unintended side effects.\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"Whacking a Mole\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"whackMole\"}),' checks if the mole (cell) clicked by the player actually contains a mole. If so, the mole is \"whacked\", removed from the ',(0,n.jsx)(e.code,{children:\"visible\"}),\" set, and the player's score is incremented.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"Thanks to Vue's reactive nature, updating the game's visual state is straightforward:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The game grid remains designed using CSS grid, enabling a flexible 2D layout using a linear DOM element list.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"With the help of Vue's \",(0,n.jsx)(e.code,{children:\"v-if\"}),' directive, we conditionally render the \"Start Game\" button or the score and \"Play Again\" button based on the game state.']}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"v-for\"}),\" direct dynamically creates the game grid buttons. It also conditionally applies the \",(0,n.jsx)(e.code,{children:\"mole-head--visible\"}),\" class, which determines if a mole is displayed, based on whether the \",(0,n.jsx)(e.code,{children:\"visible\"}),\" set contains a particular cell's index.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Generating Mole Positions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Mole positions are determined randomly using the \",(0,n.jsx)(e.code,{children:\"generateMolePositions\"}),\" function, which employs the Fisher-Yates shuffle algorithm. This function creates an array of potential positions, shuffles them, and picks the first \",(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\" positions as the ones where moles will appear.\"]}),`\n`,(0,n.jsx)(g,{}),`\n`,(0,n.jsx)(f,{})]})}function G(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(y,i)})):y(i)}var O=G;return M(D);})();\n;return Component;"
}