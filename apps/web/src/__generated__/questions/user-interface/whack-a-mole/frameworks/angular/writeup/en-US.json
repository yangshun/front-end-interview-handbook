{
  "skeleton": "var Component=(()=>{var f=Object.create;var l=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=>{for(var o in e)l(t,o,{get:e[o],enumerable:!0})},h=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!w.call(t,a)&&a!==o&&l(t,a,{get:()=>e[a],enumerable:!(s=g(e,a))||s.enumerable});return t};var c=(t,e,o)=>(o=t!=null?f(y(t)):{},h(e||!t||!t.__esModule?l(o,\"default\",{value:t,enumerable:!0}):o,t)),k=t=>h(l({},\"__esModule\",{value:!0}),t);var i=j((X,m)=>{m.exports=_jsx_runtime});var T={};_(T,{default:()=>D});var r=c(i());var n=c(i());function p(t){let e=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Build a popular arcade game where players attempt to hit moles as they pop up from holes in a board.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/img/questions/whack-a-mole/whack-a-mole-example.png\",alt:\"whack-a-mole Example\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The game should have a grid of 9 holes.\"}),`\n`,(0,n.jsx)(e.li,{children:\"When the game starts, a mole will pop up randomly from one of the holes.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The player must click on the mole to whack it. When the player whacks the mole, they will get a point.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If the player does not whack the mole within 1.5 seconds, the mole will disappear.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The next mole randomly appears from one of the holes and the process repeats.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The player has 15 seconds to hit as many moles as possible.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The game ends when the timer runs out, the score is displayed and the player has the option to play again.\"}),`\n`]})]})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(p,t)})):p(t)}var d=M;function u(t){return(0,r.jsx)(d,{})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var D=b;return k(T);})();\n;return Component;",
  "solution": "var Component=(()=>{var f=Object.create;var c=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var x=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),I=(i,e)=>{for(var r in e)c(i,r,{get:e[r],enumerable:!0})},h=(i,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!v.call(i,o)&&o!==r&&c(i,o,{get:()=>e[o],enumerable:!(d=y(e,o))||d.enumerable});return i};var a=(i,e,r)=>(r=i!=null?f(w(i)):{},h(e||!i||!i.__esModule?c(r,\"default\",{value:i,enumerable:!0}):r,i)),j=i=>h(c({},\"__esModule\",{value:!0}),i);var l=x((M,m)=>{m.exports=_jsx_runtime});var _={};I(_,{default:()=>C});var n=a(l());var t=a(l());function u(i){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\",code:\"code\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Game Start\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:'Verify that the round starts when the \"Start\" button is clicked.'}),`\n`,(0,t.jsx)(e.li,{children:\"Check that the timer starts counting down from the specified time limit.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that moles start appearing randomly in the holes.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Whacking Moles\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Test that \",(0,t.jsx)(e.code,{children:\"molesAtOnce\"}),\" moles appear every \",(0,t.jsx)(e.code,{children:\"molesAppearingInterval\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Click on a visible mole and verify that the mole disappears.\"}),`\n`,(0,t.jsx)(e.li,{children:'Confirm that the score increases by one when a mole is successfully \"whacked\".'}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that clicking a hole that is not visible does not affect the score.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Game End\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that the round ends when the timer reaches zero.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Check that the moles stop appearing once the game ends.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Ensure that the final score is displayed correctly.\"}),`\n`,(0,t.jsx)(e.li,{children:'Test that the \"Play Again\" button shows up after the game ends and clicking on it starts a new round.'}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Game Logic\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Verify that moles appear and disappear randomly from different holes.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Test the time limit functionality by setting different time limits and verifying that the game ends accordingly.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Verify that hitting a mole adds one to the score and missing a mole does not affect the score.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Edge Cases\",`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Test the game behavior when unexpected input or invalid actions occur, such as clicking rapidly on multiple holes.\"}),`\n`]}),`\n`]}),`\n`]})]})}function k(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(u,i)})):u(i)}var p=k;var s=a(l());function g(i){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",h3:\"h3\",h4:\"h4\",pre:\"pre\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.code,{children:\"AppComponent\"}),\" we will create our game with given params and manage whole logic. \",(0,n.jsx)(e.code,{children:\"WhackAMoleComponent\"}),\" will be dumb component only for displaying UI and reacting on events.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In order to make game customizable, we can introduce following props:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"rows\"}),\": Number of rows.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"cols\"}),\": Number of columns.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"roundDuration\"}),\": How long the round lasts.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\": How many moles appear at once. In arcades, there could be multiple moles appearing at the same time for increased difficulty levels.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"molesAppearingInterval\"}),\": How long the moles show up for.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:(0,n.jsx)(e.code,{children:\"WhackAMoleComponent\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Every \",(0,n.jsx)(e.code,{children:\"molesAppearingInterval\"}),\", regardless of how many moles are visible on the page, we should generate positions for the next set of \",(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\" moles. We can can randomly generate indices \",(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\" times, but when \",(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\" > 1, there's a slim chance that that the generated indices are repeated and you need to randomly generate again.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"An elegant way to generate unique indices is to create an array of indices, shuffling the array, and taking the first \",(0,n.jsx)(e.code,{children:\"molesAtOnce\"}),\" values. It requires O(N) space but this approach is arguably simpler to understand and implement correctly.\"]}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"startGame\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function is called at the start of a new round and a countdown timer is started. It starts an interval timer that runs every second, decrementing the \",(0,n.jsx)(e.code,{children:\"currTimeLeft\"}),\" by 1 every second until \",(0,n.jsx)(e.code,{children:\"currTimeLeft\"}),\" reaches 0.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note that the timer should also be cleared upon unmounting, hence we can assign the timerId to a \",(0,n.jsx)(e.code,{children:\"countdownTimerId\"}),\" ref and clear it when the component unmounts. Otherwise the timer could be still running and attempting to update component state even when the component is no longer on-screen.\"]}),`\n`,(0,n.jsx)(e.h4,{children:(0,n.jsx)(e.code,{children:\"whackMole\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function removes indices from the \",(0,n.jsx)(e.code,{children:\"visible\"}),\" set when the correct cells are clicked, if they are present in the set, and increments the score by 1.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"CSS grid is used to render the cells in a 2-dimensional format. It's a great choice because you can render the cells as a single list of DOM elements but with the right CSS grid settings, they can be displayed in a \",(0,n.jsx)(e.code,{children:\"rows\"}),\" x \",(0,n.jsx)(e.code,{children:\"cols\"}),\" layout.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Models\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-typescript\",children:`export interface GameConfig {\n  rows: number;\n  cols: number;\n  roundDuration: number;\n  molesAtOnce: number;\n  molesAppearingInterval: number;\n  totalCount: number;\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You might create service for maintaining the state. Inject the service in smart component and crete dumb components that only display and interact with the UI and all events from dumb components are passed to the smart one.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,n.jsx)(e.code,{children:\"readonly\"}),\", \",(0,n.jsx)(e.code,{children:\"private\"}),\", \",(0,n.jsx)(e.code,{children:\"public\"}),\" and \",(0,n.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(p,{})]})}function A(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(g,i)})):g(i)}var C=A;return j(_);})();\n;return Component;"
}