{
  "author": "willnguyen1312",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\"/src/App.vue\"],\n  \"activeFile\": \"/src/App.vue\",\n  \"environment\": \"vue-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/whack-a-mole-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { computed, onUnmounted, ref } from 'vue';\nconst props = defineProps({\n  rows: {\n    type: Number,\n    default: 3,\n  },\n  cols: {\n    type: Number,\n    default: 3,\n  },\n  roundDuration: {\n    type: Number,\n    default: 30,\n  },\n  molesAtOnce: {\n    type: Number,\n    default: 1,\n  },\n  molesAppearingInterval: {\n    type: Number,\n    default: 1500,\n  },\n});\n\nconst totalCount = computed(() => props.rows * props.cols);\n\nconst visible = ref(new Set());\nconst score = ref(null);\nconst running = ref(false);\nconst timeLeft = ref(0);\nlet countdownTimerId = null;\nlet moleTimerId = null;\n\nfunction startGame() {\n  // Reset variables to default values.\n  running.value = true;\n  timeLeft.value = props.roundDuration;\n  score.value = 0;\n  visible.value.clear();\n\n  // Interval to decrement the timer to 0.\n  countdownTimerId = setInterval(() => {\n    if (timeLeft.value <= 0) {\n      clearInterval(countdownTimerId);\n      stopGame();\n      running.value = false;\n      timeLeft.value = 0;\n    } else {\n      timeLeft.value--;\n    }\n  }, 1000);\n\n  // Interval to generate moles.\n  moleTimerId = setInterval(() => {\n    visible.value = generateMolePositions(\n      props.molesAtOnce,\n      totalCount.value,\n    );\n  }, props.molesAppearingInterval);\n}\n\nfunction stopGame() {\n  clearInterval(moleTimerId);\n  visible.value.clear();\n}\n\nonUnmounted(() => {\n  // Clear timers on unmount if it's running.\n  clearInterval(countdownTimerId);\n  stopGame();\n});\n\nfunction whackMole(index) {\n  // Whacking on an empty cell, no-op.\n  if (!visible.value.has(index)) {\n    return;\n  }\n\n  visible.value.delete(index);\n  score.value++;\n}\n\n// Fisher-Yates shuffle.\nfunction shuffle(array) {\n  for (let i = 0; i < array.length; i++) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction generateMolePositions(molesAtOnce, totalCount) {\n  // Generate an array containing values [0, totalCount].\n  const indices = Array.from({ length: totalCount }).map(\n    (_, index) => index,\n  );\n  shuffle(indices);\n  // Take the first `totalCount` items\n  // from the shuffled array.\n  const shuffledIndices = indices.slice(0, molesAtOnce);\n\n  return new Set(shuffledIndices);\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <div class=\"header\">\n      <button\n        v-if=\"score == null\"\n        class=\"start-button\"\n        type=\"button\"\n        @click=\"startGame\">\n        Start Game\n      </button>\n      <div v-else class=\"round-information\">\n        <p>Score: {{ score }}</p>\n        <button\n          v-if=\"!running\"\n          class=\"start-button\"\n          type=\"button\"\n          @click=\"startGame\">\n          Play again\n        </button>\n        <p>Time Left: {{ timeLeft }}</p>\n      </div>\n    </div>\n\n    <div\n      class=\"grid\"\n      :style=\"{\n        'grid-template-columns': `repeat(${props.cols}, 1fr)`,\n        'grid-template-rows': `repeat(${props.rows}, 1fr)`,\n      }\">\n      <button\n        v-for=\"(_, index) in totalCount\"\n        :key=\"index\"\n        class=\"grid__cell\"\n        @click=\"whackMole(index)\">\n        <img\n          src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-head.png\"\n          alt=\"Mole head\"\n          :class=\"[\n            'grid__cell-contents mole-head',\n            visible.has(index) && 'mole-head--visible',\n          ]\" />\n\n        <img\n          src=\"https://www.greatfrontend.com/img/questions/whack-a-mole/mole-hill.png\"\n          alt=\"Mole hill\"\n          class=\"grid__cell-contents mole-hill\" />\n      </button>\n    </div>\n  </div>\n</template>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  --background-color: salmon;\n\n  background-color: var(--background-color);\n  font-family: sans-serif;\n  padding: 2rem;\n}\n\n.app {\n  box-sizing: border-box;\n  padding-block: 16px;\n  margin: 0 auto;\n  max-width: 480px;\n}\n\n.header {\n  display: flex;\n  height: 30px;\n  align-items: center;\n  padding: 1rem 0;\n  justify-content: center;\n}\n\n.round-information {\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  justify-content: space-between;\n  font-weight: bold;\n}\n\n.start-button {\n  background-color: #fff;\n  border: none;\n  border-radius: 4px;\n  color: #000;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 0.5rem 1rem;\n}\n\n.grid {\n  aspect-ratio: 1 / 1;\n  display: grid;\n  justify-content: center;\n}\n\n.grid__cell {\n  border: none;\n  background-color: var(--background-color);\n  position: relative;\n  overflow: hidden;\n}\n\n.grid__cell-contents {\n  --width: 0;\n  --height: 0;\n  object-fit: contain;\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: var(--width);\n  height: var(--height);\n  user-select: none;\n}\n\n.mole-hill {\n  --width: 100%;\n  --height: 30%;\n  transform: translate(-50%, 10px);\n}\n\n.mole-head {\n  --width: 100%;\n  --height: 70%;\n\n  transform: translate(-50%, 100%);\n  transition: transform 0.1s ease-in;\n  cursor: pointer;\n}\n\n.mole-head--visible {\n  transform: translate(-50%, 0%);\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  }
}