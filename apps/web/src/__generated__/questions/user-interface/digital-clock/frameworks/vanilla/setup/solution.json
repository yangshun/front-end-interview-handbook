{
  "author": "yangshun",
  "files": {
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/index.html\",\n    \"/src/index.js\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/index.html\",\n  \"environment\": \"parcel\"\n}\n"
    },
    "/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div id=\"clock\" />\n    </div>\n    <script src=\"src/index.js\"></script>\n  </body>\n</html>\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/digital-clock-vanilla-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"parcel\": \"2.9.3\"\n  },\n  \"source\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"parcel\",\n    \"build\": \"parcel build\"\n  }\n}\n"
    },
    "/src/index.js": {
      "code": "import './styles.css';\n\n(() => {\n  const ALL_SIDES = [\n    'digit-square-border-top',\n    'digit-square-border-left',\n    'digit-square-border-right',\n    'digit-square-border-bottom',\n  ];\n\n  const NUMBER_TO_CLASSES = {\n    0: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-right',\n      ],\n      bottom: [\n        'digit-square-border-bottom',\n        'digit-square-border-left',\n        'digit-square-border-right',\n      ],\n    },\n    1: {\n      top: ['digit-square-border-right'],\n      bottom: ['digit-square-border-right'],\n    },\n    2: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-bottom',\n      ],\n    },\n    3: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n    },\n    4: {\n      top: [\n        'digit-square-border-left',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-right',\n        'digit-square-border-top',\n      ],\n    },\n    5: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n    },\n    6: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-bottom',\n      ],\n      bottom: ALL_SIDES,\n    },\n    7: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n      ],\n      bottom: ['digit-square-border-right'],\n    },\n    8: {\n      top: ALL_SIDES,\n      bottom: ALL_SIDES,\n    },\n    9: {\n      top: ALL_SIDES,\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n    },\n  };\n\n  function padTwoDigit(number) {\n    return number >= 10 ? String(number) : `0${number}`;\n  }\n\n  function separator() {\n    const $separator = document.createElement('div');\n    $separator.classList.add('separator');\n\n    const $separatorDotTop = document.createElement('div');\n    $separatorDotTop.classList.add('separator-dot');\n\n    const $separatorDotBottom =\n      document.createElement('div');\n    $separatorDotBottom.classList.add('separator-dot');\n\n    $separator.append(\n      $separatorDotTop,\n      $separatorDotBottom,\n    );\n    return $separator;\n  }\n\n  function digit(number) {\n    const { top, bottom } = NUMBER_TO_CLASSES[number];\n    const $digit = document.createElement('div');\n    const $topSquare = document.createElement('div');\n    $topSquare.classList.add(\n      'digit-square',\n      'digit-square-top',\n      ...top,\n    );\n\n    const $bottomSquare = document.createElement('div');\n    $bottomSquare.classList.add(\n      'digit-square',\n      'digit-square-bottom',\n      ...bottom,\n    );\n\n    $digit.append($topSquare, $bottomSquare);\n    return $digit;\n  }\n\n  function render($rootEl, date) {\n    let hours = date.getHours() % 12;\n    hours = hours === 0 ? 12 : hours;\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n\n    const dateTimeDisplay = `${padTwoDigit(\n      date.getHours(),\n    )}:${padTwoDigit(minutes)}:${padTwoDigit(seconds)}`;\n\n    const $timeEl = document.createElement('time');\n    $timeEl.classList.add('clock');\n    $timeEl.dateTime = dateTimeDisplay;\n\n    $timeEl.append(\n      digit(parseInt(hours / 10, 10)),\n      digit(hours % 10),\n      separator(),\n      digit(parseInt(minutes / 10, 10)),\n      digit(minutes % 10),\n      separator(),\n      digit(parseInt(seconds / 10, 10)),\n      digit(seconds % 10),\n    );\n\n    $rootEl.innerHTML = '';\n    $rootEl.appendChild($timeEl);\n  }\n\n  function clock($rootEl) {\n    const timer = window.setInterval(() => {\n      render($rootEl, new Date());\n    }, 100);\n\n    // The beforeunload event is fired before the tab/window is closed.\n    // Clear the interval when the tab/window is about to be closed.\n    window.addEventListener('beforeunload', () => {\n      window.clearInterval(timer);\n    });\n\n    render($rootEl, new Date());\n  }\n\n  clock(document.getElementById('clock'));\n})();\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.clock {\n  --segment-width: 10px;\n  --segment-size: 40px;\n  --segment-color: #fff;\n\n  background-color: #000;\n  border: 10px solid #ccc;\n  border-radius: 10px;\n  display: flex;\n  gap: 10px;\n  padding: 20px;\n}\n\n.digit-square {\n  border-style: solid;\n  border-color: transparent;\n  border-width: var(--segment-width);\n  box-sizing: border-box;\n  height: var(--segment-size);\n  width: var(--segment-size);\n}\n\n.digit-square-top {\n  border-bottom-width: calc(var(--segment-width) / 2);\n}\n\n.digit-square-bottom {\n  border-top-width: calc(var(--segment-width) / 2);\n}\n\n.digit-square-border-top {\n  border-top-color: var(--segment-color);\n}\n\n.digit-square-border-left {\n  border-left-color: var(--segment-color);\n}\n\n.digit-square-border-right {\n  border-right-color: var(--segment-color);\n}\n\n.digit-square-border-bottom {\n  border-bottom-color: var(--segment-color);\n}\n\n.separator {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n}\n\n.separator-dot {\n  background-color: var(--segment-color);\n  border-radius: var(--segment-width);\n  height: var(--segment-width);\n  width: var(--segment-width);\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/index.html",
      "/src/index.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/index.html",
    "environment": "parcel"
  }
}