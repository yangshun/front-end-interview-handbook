{
  "author": "tanhauhau",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/digital-clock-svelte-solution\",\n  \"author\": \"tanhauhau\",\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.js\",\n  \"dependencies\": {\n    \"svelte\": \"^3.58.0\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Svelte</title>\n    <link rel=\"stylesheet\" href=\"public/bundle.css\" />\n  </head>\n\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n"
    },
    "/src/App.svelte": {
      "code": "<script>\n  import Clock from './Clock.svelte';\n</script>\n\n<Clock />\n"
    },
    "/src/Clock.svelte": {
      "code": "<script>\n  import { onMount } from 'svelte';\n  import Digit from './Digit.svelte';\n  import Separator from './Separator.svelte';\n\n  let date = new Date();\n\n  onMount(() => {\n    const timer = window.setInterval(() => {\n      date = new Date();\n    }, 100);\n\n    // Clear the timer upon unmount.\n    return () => {\n      window.clearInterval(timer);\n    };\n  });\n\n  let hours;\n  $: {\n    hours = date.getHours() % 12;\n    hours = hours === 0 ? 12 : hours;\n  }\n  $: minutes = date.getMinutes();\n  $: seconds = date.getSeconds();\n\n  $: dateTimeDisplay = `${padTwoDigit(\n    date.getHours(),\n  )}:${padTwoDigit(minutes)}:${padTwoDigit(seconds)}`;\n\n  function padTwoDigit(number) {\n    return number >= 10 ? String(number) : `0${number}`;\n  }\n</script>\n\n<div>\n  <time dateTime={dateTimeDisplay}>\n    <Digit number={parseInt(hours / 10, 10)} />\n    <Digit number={hours % 10} />\n    <Separator />\n    <Digit number={parseInt(minutes / 10, 10)} />\n    <Digit number={minutes % 10} />\n    <Separator />\n    <Digit number={parseInt(seconds / 10, 10)} />\n    <Digit number={seconds % 10} />\n  </time>\n</div>\n\n<style>\n  div {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  time {\n    --segment-width: 10px;\n    --segment-size: 40px;\n    --segment-color: #fff;\n\n    background-color: #000;\n    border: 10px solid #ccc;\n    border-radius: 10px;\n    display: flex;\n    gap: 10px;\n    padding: 20px;\n  }\n</style>\n"
    },
    "/src/Digit.svelte": {
      "code": "<script>\n  export let number;\n\n  const ALL_SIDES = {\n    top: true,\n    left: true,\n    right: true,\n    bottom: true,\n  };\n\n  const NUMBER_TO_CLASSES = {\n    0: {\n      top: {\n        top: true,\n        left: true,\n        right: true,\n      },\n      bottom: {\n        bottom: true,\n        left: true,\n        right: true,\n      },\n    },\n    1: {\n      top: { right: true },\n      bottom: { right: true },\n    },\n    2: {\n      top: {\n        top: true,\n        right: true,\n        bottom: true,\n      },\n      bottom: {\n        top: true,\n        left: true,\n        bottom: true,\n      },\n    },\n    3: {\n      top: {\n        top: true,\n        right: true,\n        bottom: true,\n      },\n      bottom: {\n        top: true,\n        right: true,\n        bottom: true,\n      },\n    },\n    4: {\n      top: {\n        left: true,\n        right: true,\n        bottom: true,\n      },\n      bottom: {\n        right: true,\n        top: true,\n      },\n    },\n    5: {\n      top: {\n        top: true,\n        left: true,\n        bottom: true,\n      },\n      bottom: {\n        top: true,\n        right: true,\n        bottom: true,\n      },\n    },\n    6: {\n      top: {\n        top: true,\n        left: true,\n        bottom: true,\n      },\n      bottom: ALL_SIDES,\n    },\n    7: {\n      top: {\n        top: true,\n        right: true,\n      },\n      bottom: { right: true },\n    },\n    8: {\n      top: ALL_SIDES,\n      bottom: ALL_SIDES,\n    },\n    9: {\n      top: ALL_SIDES,\n      bottom: {\n        top: true,\n        right: true,\n        bottom: true,\n      },\n    },\n  };\n\n  $: ({ top, bottom } = NUMBER_TO_CLASSES[number]);\n</script>\n\n<div>\n  <div\n    class=\"digit-square digit-square-top\"\n    class:digit-square-border-top={top.top}\n    class:digit-square-border-left={top.left}\n    class:digit-square-border-right={top.right}\n    class:digit-square-border-bottom={top.bottom} />\n  <div\n    class=\"digit-square digit-square-bottom\"\n    class:digit-square-border-top={bottom.top}\n    class:digit-square-border-left={bottom.left}\n    class:digit-square-border-right={bottom.right}\n    class:digit-square-border-bottom={bottom.bottom} />\n</div>\n\n<style>\n  .digit-square {\n    border-style: solid;\n    border-color: transparent;\n    border-width: var(--segment-width);\n    box-sizing: border-box;\n    height: var(--segment-size);\n    width: var(--segment-size);\n  }\n\n  .digit-square-top {\n    border-bottom-width: calc(var(--segment-width) / 2);\n  }\n\n  .digit-square-bottom {\n    border-top-width: calc(var(--segment-width) / 2);\n  }\n\n  .digit-square-border-top {\n    border-top-color: var(--segment-color);\n  }\n\n  .digit-square-border-left {\n    border-left-color: var(--segment-color);\n  }\n\n  .digit-square-border-right {\n    border-right-color: var(--segment-color);\n  }\n\n  .digit-square-border-bottom {\n    border-bottom-color: var(--segment-color);\n  }\n</style>\n"
    },
    "/src/index.js": {
      "code": "import App from './App.svelte';\nimport './styles.css';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"
    },
    "/src/Separator.svelte": {
      "code": "<div class=\"separator\">\n  <div class=\"separator-dot\" />\n  <div class=\"separator-dot\" />\n</div>\n\n<style>\n  .separator {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n  }\n\n  .separator-dot {\n    background-color: var(--segment-color);\n    border-radius: var(--segment-width);\n    height: var(--segment-width);\n    width: var(--segment-width);\n  }\n</style>\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.svelte",
      "/src/Clock.svelte",
      "/src/Digit.svelte",
      "/src/Separator.svelte"
    ],
    "activeFile": "/src/Clock.svelte",
    "environment": "svelte"
  },
  "writeup": "var Component=(()=>{var y=Object.create;var a=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var j=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),T=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},l=(t,e,r,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of w(e))!k.call(t,s)&&s!==r&&a(t,s,{get:()=>e[s],enumerable:!(h=v(e,s))||h.enumerable});return t};var d=(t,e,r)=>(r=t!=null?y(x(t)):{},l(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),_=t=>l(a({},\"__esModule\",{value:!0}),t);var c=j((q,m)=>{m.exports=_jsx_runtime});var F={};T(F,{default:()=>M});var n=d(c());var o=d(c());function u(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsx)(e.li,{children:\"See that the clock updates every second.\"}),`\n`,(0,o.jsx)(e.li,{children:\"Observe the clock for at least 10 seconds to see that each digit is displayed correctly.\"}),`\n`]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var p=S;var i=d(c());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,i.jsx)(e.p,{children:\"The update frequency of the timer depends on how accurate we want the clock to be. The maximum we can set is 1000ms, however, the clock's accuracy might be off by 1000ms in the case we load the page on the last millisecond of the second. However, using too small of an interval can be quite expensive. Hence a middleground we've chosen is 100ms. The clock can only ever be off by 100ms, which is not very noticeable by humans.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The current date/time should be polled in each loop, as opposed to recording the time when the clock was first rendered and incrementing based on the interval duration of the timer because the invocations of the loop can be delayed by processes hogging the main thread and the loop may not run at every fixed interval.\"}),`\n`,(0,i.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"For a11y reasons, use a \",(0,i.jsx)(e.code,{children:\"<time>\"}),\" element with \",(0,i.jsx)(e.code,{children:\"datetime\"}),\" attribute set to the current time in 24-hour format so that screen readers can read this component. Otherwise the component will be ignored by screen readers, which is bad. Add the \",(0,i.jsx)(e.code,{children:\"aria-hidden\"}),\" attribute to the internals of \",(0,i.jsx)(e.code,{children:\"<time>\"}),\" since they are for presentation purposes and not useful to screen readers.\"]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(g,t)})):g(t)}var b=C;function f(t){let e=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h4:\"h4\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsx)(e.h3,{children:\"App Structure\"}),`\n`,(0,n.jsx)(e.p,{children:\"The application is broken down into modular components, making it easier to understand and maintain:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"App.svelte\"}),\": This is the main component that imports and renders the \",(0,n.jsx)(e.code,{children:\"Clock\"}),\" component.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Clock.svelte\"}),\": Represents the digital clock that displays the current time by hours, minutes, and seconds.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Digit.svelte\"}),\": Renders a single digit of the clock, using a unique representation for numbers from 0 to 9.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"Separator.svelte\"}),\": Renders the colon (:) separators between hours, minutes, and seconds.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Clock Component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The primary functionality of the clock exists in the \",(0,n.jsx)(e.code,{children:\"Clock.svelte\"}),\" component:\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"State Management\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"date\"}),\": Maintains the current date and time. It gets updated every 100 milliseconds to ensure the clock's time is accurate.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Reactive statements (\",(0,n.jsx)(e.code,{children:\"$: ...\"}),\"): Automatically update derived values such as \",(0,n.jsx)(e.code,{children:\"hours\"}),\", \",(0,n.jsx)(e.code,{children:\"minutes\"}),\", \",(0,n.jsx)(e.code,{children:\"seconds\"}),\", and \",(0,n.jsx)(e.code,{children:\"dateTimeDisplay\"}),\" whenever the underlying \",(0,n.jsx)(e.code,{children:\"date\"}),\" changes. This ensures the displayed time always matches the current time.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"padTwoDigit\"}),\": A utility function to format single-digit numbers by padding them with a leading zero.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Rendering\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The clock time is displayed using individual digits and separators. For each component of the time (hours, minutes, seconds), the number is split into tens and units, and each digit is rendered using the \",(0,n.jsx)(e.code,{children:\"Digit\"}),\" component. Separators are inserted between these components using the \",(0,n.jsx)(e.code,{children:\"Separator\"}),\" component.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The styling makes the clock prominent with a black background, white digits, and a gray border. Flexbox is used to align the digits and separators in a row, and they are center-aligned in the parent container.\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Lifecycles\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"onMount\"}),\": Initializes an interval timer that updates the \",(0,n.jsx)(e.code,{children:\"date\"}),\" every 100 milliseconds. This frequent update ensures the displayed time is accurate up to the second. Importantly, when the component is destroyed or removed from the DOM, the interval is cleared to avoid potential memory leaks or unnecessary operations.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Digit Component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Digit.svelte\"}),\" component is a creative representation of numbers from 0 to 9:\"]}),`\n`,(0,n.jsx)(e.h4,{children:\"State Management\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"number\"}),\": Represents the digit (from 0 to 9) that needs to be displayed.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"NUMBER_TO_CLASSES\"}),\": A mapping that defines which sides of the digit square should be visible for each number. It allows for a unique digital representation of each number.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Reactive statement (\",(0,n.jsx)(e.code,{children:\"$: ...\"}),\"): Determines the sides that should be displayed based on the provided \",(0,n.jsx)(e.code,{children:\"number\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Rendering\"}),`\n`,(0,n.jsx)(e.p,{children:\"Each digit is represented as two squares (top and bottom). Each square can display borders on its top, right, left, or bottom side, giving the appearance of a digital number. For example, the number '8' displays borders on all sides of both squares, while the number '1' only displays the right borders.\"}),`\n`,(0,n.jsx)(e.p,{children:\"CSS custom properties (variables) are used to define the size and color of the segments, allowing for easy customization.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Separator Component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Separator.svelte\"}),\" component is straightforward. It renders two dots vertically aligned, simulating the colon (:) seen in digital clocks. The size and color of the dots are controlled by the same CSS custom properties used in the \",(0,n.jsx)(e.code,{children:\"Digit\"}),\" component.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In conclusion, this Svelte application provides a clean and modular approach to rendering a digital clock. Each component has a clear responsibility, making the solution both efficient and easy to understand.\"}),`\n`,(0,n.jsx)(p,{}),`\n`,(0,n.jsx)(b,{})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var M=D;return _(F);})();\n;return Component;"
}