{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/digital-clock-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.css": {
      "code": ""
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"wrapper\">\n  <!-- Use a <time> element with \\`dateTime\\` attribute set -->\n  <!-- to the current time in 24-hour format so that -->\n  <!-- screen readers can read this component. -->\n  <time class=\"clock\" [dateTime]=\"dateTimeDisplay\">\n    <app-digit [number]=\"hours / 10 | floor\"></app-digit>\n    <app-digit [number]=\"hours % 10 | floor\"></app-digit>\n\n    <app-separator></app-separator>\n\n    <app-digit [number]=\"minutes / 10 | floor\"></app-digit>\n    <app-digit [number]=\"minutes % 10 | floor\"></app-digit>\n\n    <app-separator></app-separator>\n\n    <app-digit [number]=\"seconds / 10 | floor\"></app-digit>\n    <app-digit [number]=\"seconds % 10 | floor\"></app-digit>\n  </time>\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import {\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  hours!: number;\n  minutes!: number;\n  seconds!: number;\n  dateTimeDisplay!: string;\n  intervalId!: number;\n\n  ngOnInit() {\n    // Kick off the timer.\n    this.intervalId = window.setInterval(() => {\n      const date = new Date();\n      const hours = date.getHours();\n      this.hours = hours === 0 ? 12 : hours;\n      this.minutes = date.getMinutes();\n      this.seconds = date.getSeconds();\n      this.dateTimeDisplay = `${this.padTwoDigit(\n        date.getHours(),\n      )}:${this.padTwoDigit(\n        this.minutes,\n      )}:${this.padTwoDigit(this.seconds)}`;\n    }, 100);\n  }\n\n  // Clear the timer upon destroy.\n  ngOnDestroy() {\n    window.clearInterval(this.intervalId);\n  }\n\n  private padTwoDigit(number: number): string {\n    return number >= 10 ? String(number) : `0${number}`;\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { DigitComponent } from './digit.component';\nimport { SeparatorComponent } from './separator.component';\nimport { FloorPipe } from './floor.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SeparatorComponent,\n    DigitComponent,\n    FloorPipe,\n  ],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/digit.component.ts": {
      "code": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-digit',\n  template: `\n    <div class=\"digit\">\n      <div\n        class=\"digit-square digit-square-top\"\n        [ngClass]=\"NUMBER_TO_CLASSES[number]?.top\"></div>\n      <div\n        class=\"digit-square digit-square-bottom\"\n        [ngClass]=\"NUMBER_TO_CLASSES[number]?.bottom\"></div>\n    </div>\n  `,\n})\nexport class DigitComponent {\n  @Input()\n  number!: number;\n\n  ALL_SIDES = [\n    'digit-square-border-top',\n    'digit-square-border-left',\n    'digit-square-border-right',\n    'digit-square-border-bottom',\n  ];\n\n  NUMBER_TO_CLASSES: {\n    [key: number]: { top: string[]; bottom: string[] };\n  } = {\n    0: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-right',\n      ],\n      bottom: [\n        'digit-square-border-bottom',\n        'digit-square-border-left',\n        'digit-square-border-right',\n      ],\n    },\n    1: {\n      top: ['digit-square-border-right'],\n      bottom: ['digit-square-border-right'],\n    },\n    2: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-bottom',\n      ],\n    },\n    3: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n    },\n    4: {\n      top: [\n        'digit-square-border-left',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-right',\n        'digit-square-border-top',\n      ],\n    },\n    5: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-bottom',\n      ],\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n    },\n    6: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-left',\n        'digit-square-border-bottom',\n      ],\n      bottom: this.ALL_SIDES,\n    },\n    7: {\n      top: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n      ],\n      bottom: ['digit-square-border-right'],\n    },\n    8: {\n      top: this.ALL_SIDES,\n      bottom: this.ALL_SIDES,\n    },\n    9: {\n      top: this.ALL_SIDES,\n      bottom: [\n        'digit-square-border-top',\n        'digit-square-border-right',\n        'digit-square-border-bottom',\n      ],\n    },\n  };\n}\n"
    },
    "/src/app/floor.pipe.ts": {
      "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'floor',\n})\nexport class FloorPipe implements PipeTransform {\n  transform(value: number): number {\n    return Math.floor(value);\n  }\n}\n"
    },
    "/src/app/separator.component.ts": {
      "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-separator',\n  template: `\n    <div class=\"separator\">\n      <div class=\"separator-dot\"></div>\n      <div class=\"separator-dot\"></div>\n    </div>\n  `,\n})\nexport class SeparatorComponent {}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "/* You can add global styles to this file, and also import other style files */\nbody {\n  font-family: sans-serif;\n}\n\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.clock {\n  --segment-width: 10px;\n  --segment-size: 40px;\n  --segment-color: #fff;\n\n  background-color: #000;\n  border: 10px solid #ccc;\n  border-radius: 10px;\n  display: flex;\n  gap: 10px;\n  padding: 20px;\n}\n\n.digit-square {\n  border-style: solid;\n  border-color: transparent;\n  border-width: var(--segment-width);\n  box-sizing: border-box;\n  height: var(--segment-size);\n  width: var(--segment-size);\n}\n\n.digit-square-top {\n  border-bottom-width: calc(var(--segment-width) / 2);\n}\n\n.digit-square-bottom {\n  border-top-width: calc(var(--segment-width) / 2);\n}\n\n.digit-square-border-top {\n  border-top-color: var(--segment-color);\n}\n\n.digit-square-border-left {\n  border-left-color: var(--segment-color);\n}\n\n.digit-square-border-right {\n  border-right-color: var(--segment-color);\n}\n\n.digit-square-border-bottom {\n  border-bottom-color: var(--segment-color);\n}\n\n.separator {\n  height: 100%;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n}\n\n.separator-dot {\n  background-color: var(--segment-color);\n  border-radius: var(--segment-width);\n  height: var(--segment-width);\n  width: var(--segment-width);\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  },
  "writeup": "var Component=(()=>{var b=Object.create;var c=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),I=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of v(e))!j.call(t,s)&&s!==r&&c(t,s,{get:()=>e[s],enumerable:!(l=w(e,s))||l.enumerable});return t};var a=(t,e,r)=>(r=t!=null?b(x(t)):{},h(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),k=t=>h(c({},\"__esModule\",{value:!0}),t);var d=_((X,u)=>{u.exports=_jsx_runtime});var M={};I(M,{default:()=>T});var n=a(d());var i=a(d());function m(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"See that the clock updates every second.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Observe the clock for at least 10 seconds to see that each digit is displayed correctly.\"}),`\n`]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(m,t)})):m(t)}var p=C;var o=a(d());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},t.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,o.jsx)(e.p,{children:\"The update frequency of the timer depends on how accurate we want the clock to be. The maximum we can set is 1000ms, however, the clock's accuracy might be off by 1000ms in the case we load the page on the last millisecond of the second. However, using too small of an interval can be quite expensive. Hence a middleground we've chosen is 100ms. The clock can only ever be off by 100ms, which is not very noticeable by humans.\"}),`\n`,(0,o.jsx)(e.p,{children:\"The current date/time should be polled in each loop, as opposed to recording the time when the clock was first rendered and incrementing based on the interval duration of the timer because the invocations of the loop can be delayed by processes hogging the main thread and the loop may not run at every fixed interval.\"}),`\n`,(0,o.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For a11y reasons, use a \",(0,o.jsx)(e.code,{children:\"<time>\"}),\" element with \",(0,o.jsx)(e.code,{children:\"datetime\"}),\" attribute set to the current time in 24-hour format so that screen readers can read this component. Otherwise the component will be ignored by screen readers, which is bad. Add the \",(0,o.jsx)(e.code,{children:\"aria-hidden\"}),\" attribute to the internals of \",(0,o.jsx)(e.code,{children:\"<time>\"}),\" since they are for presentation purposes and not useful to screen readers.\"]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(g,t)})):g(t)}var f=D;function y(t){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",h3:\"h3\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.code,{children:\"ngOnInit()\"}),\" hook, we will run a timer to refresh the page and display the current time every second. To create the timer, we can use \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" to initiate the update of our state properties. Within the \",(0,n.jsx)(e.code,{children:\"setInterval\"}),\" body, we will update \",(0,n.jsx)(e.code,{children:\"hours\"}),\", \",(0,n.jsx)(e.code,{children:\"minutes\"}),\", \",(0,n.jsx)(e.code,{children:\"seconds\"}),\" and \",(0,n.jsx)(e.code,{children:\"dateTimeDisplay\"}),\" (required for \",(0,n.jsx)(e.code,{children:\"<timer>\"}),\") based on the current date. In \",(0,n.jsx)(e.code,{children:\"ngOnDestroy()\"}),\", we will terminate the interval to prevent memory leaks.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Every \",(0,n.jsx)(e.code,{children:\"DigitComponent\"}),\" displays one digit in the clock, so assuming we have time 22:04:22, we put \",(0,n.jsx)(e.code,{children:\"hours\"}),\" to the first two digits and \",(0,n.jsx)(e.code,{children:\"floor\"}),\" it with \",(0,n.jsx)(e.code,{children:\"pipe\"}),\" hours / 10 and hours % 10.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The numbers passed will be 2.1 floored to 2 and 1 which is exact hour we need to display and so on.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"DigitComponent\"}),\" is a typical dumb component, used solely for displaying UI based on a number passed by \",(0,n.jsx)(e.code,{children:\"@Input\"}),\". The responsibility of this component is to display one digit and most of the work here involves manipulating styles.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"SeparatorComponent\"}),\" is a dumb UI component designed to display two separator dots between digits.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Angular Insights\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You can adopt a more advanced, reactive-like approach using RxJS (without using subscriptions as possible). However, if you opt for subscriptions, remember about destroying them to prevent memory leaks.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"You might create service for maintaining the state. Inject the service in smart component and crete dumb components that only display and interact with the UI and all events from dumb components are passed to the smart one.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're confident with the latest Angular versions, consider using signals standalone API.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can try to focus more on keywords such as \",(0,n.jsx)(e.code,{children:\"readonly\"}),\", \",(0,n.jsx)(e.code,{children:\"private\"}),\", \",(0,n.jsx)(e.code,{children:\"public\"}),\" and \",(0,n.jsx)(e.code,{children:\"void\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"If you're creating a bigger application it would be good practice to use styles per component instead of putting all styles in one file.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(p,{}),`\n`,(0,n.jsx)(f,{})]})}function O(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(y,t)})):y(t)}var T=O;return k(M);})();\n;return Component;"
}