{
  "author": "willnguyen1312",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/transfer-list-ii-vue-solution\",\n  \"author\": \"willnguyen1312\",\n  \"version\": \"0.0.1\",\n  \"main\": \"/src/main.js\",\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"3.32.2\",\n    \"vue\": \"3.3.4\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"5.0.8\",\n    \"@vue/cli-service\": \"5.0.8\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width,initial-scale=1.0\" />\n    <title>Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- Built files will be auto injected -->\n  </body>\n</html>\n"
    },
    "/src/App.vue": {
      "code": "<script setup>\nimport { ref } from 'vue';\n\nconst DEFAULT_ITEMS_LEFT = [\n  'HTML',\n  'JavaScript',\n  'CSS',\n  'TypeScript',\n];\nconst DEFAULT_ITEMS_RIGHT = [\n  'React',\n  'Angular',\n  'Vue',\n  'Svelte',\n];\n\nconst itemsLeft = ref(generateItemsMap(DEFAULT_ITEMS_LEFT));\nconst itemsRight = ref(\n  generateItemsMap(DEFAULT_ITEMS_RIGHT),\n);\n\n// Transfer selected items from a source list to a destination list.\nfunction transferSelectedItems(itemsSrc, itemsDst) {\n  const newItemsSrc = new Map(itemsSrc);\n  const newItemsDst = new Map(itemsDst);\n\n  // Remove selected items from source list and add to the destination list.\n  itemsSrc.forEach((value, key) => {\n    if (!value) {\n      return;\n    }\n\n    newItemsDst.set(key, value);\n    newItemsSrc.delete(key);\n  });\n  return [newItemsSrc, newItemsDst];\n}\n\n// Convert the default array of items into a map with the item\n// name as a key and the value as a boolean.\nfunction generateItemsMap(items) {\n  return new Map(items.map((label) => [label, false]));\n}\n\n// Determine if the list has no selected items.\nfunction hasNoSelectedItems(items) {\n  return (\n    Array.from(items.values()).filter((val) => Boolean(val))\n      .length === 0\n  );\n}\n\n// Transfer all items from a source list to a destination list.\nfunction transferAllItems(itemsSrc, itemsDst) {\n  return [new Map(), new Map([...itemsDst, ...itemsSrc])];\n}\n\nfunction setAllItemsSelectionState(items, newState) {\n  const newItems = new Map(items);\n\n  Array.from(newItems.keys()).forEach((key) => {\n    newItems.set(key, newState);\n  });\n\n  return newItems;\n}\n</script>\n\n<template>\n  <div class=\"transfer-list\">\n    <ItemList\n      :items=\"itemsLeft\"\n      @set-all=\"\n        (newState) => {\n          itemsLeft = setAllItemsSelectionState(\n            itemsLeft,\n            newState,\n          );\n        }\n      \"\n      @add-item=\"\n        (label) => {\n          itemsLeft.set(label, false);\n        }\n      \"\n      @toggle=\"\n        (label) => {\n          itemsLeft.set(label, !itemsLeft.get(label));\n        }\n      \" />\n    <div class=\"transfer-list__actions\">\n      <button\n        aria-label=\"Transfer all items to left list\"\n        :disabled=\"itemsRight.size === 0\"\n        @click=\"\n          () => {\n            [itemsRight, itemsLeft] = transferAllItems(\n              itemsRight,\n              itemsLeft,\n            );\n          }\n        \">\n        <span aria-hidden>&lt;&lt;</span>\n      </button>\n      <button\n        aria-label=\"Transfer selected items to left list\"\n        :disabled=\"hasNoSelectedItems(itemsRight)\"\n        @click=\"\n          () => {\n            [itemsRight, itemsLeft] = transferSelectedItems(\n              itemsRight,\n              itemsLeft,\n            );\n          }\n        \">\n        <span aria-hidden>&lt;</span>\n      </button>\n      <button\n        aria-label=\"Transfer selected items to right list\"\n        :disabled=\"hasNoSelectedItems(itemsLeft)\"\n        @click=\"\n          () => {\n            [itemsLeft, itemsRight] = transferSelectedItems(\n              itemsLeft,\n              itemsRight,\n            );\n          }\n        \">\n        <span aria-hidden>&gt;</span>\n      </button>\n      <button\n        aria-label=\"Transfer all items to right list\"\n        :disabled=\"itemsLeft.size === 0\"\n        @click=\"\n          () => {\n            [itemsLeft, itemsRight] = transferAllItems(\n              itemsLeft,\n              itemsRight,\n            );\n          }\n        \">\n        <span aria-hidden>&gt;&gt;</span>\n      </button>\n    </div>\n    <ItemList\n      :items=\"itemsRight\"\n      @set-all=\"\n        (newState) => {\n          itemsRight = setAllItemsSelectionState(\n            itemsRight,\n            newState,\n          );\n        }\n      \"\n      @add-item=\"\n        (label) => {\n          itemsRight.set(label, false);\n        }\n      \"\n      @toggle=\"\n        (label) => {\n          itemsRight.set(label, !itemsRight.get(label));\n        }\n      \" />\n  </div>\n</template>\n\n<style>\n.transfer-list {\n  border: 1px solid #ccc;\n  display: flex;\n  max-width: 768px;\n  margin: 0 auto;\n}\n\n.transfer-list__actions {\n  border-color: #ccc;\n  border-width: 0 1px 0 1px;\n  border-style: solid;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  row-gap: 12px;\n}\n</style>\n"
    },
    "/src/ItemList.vue": {
      "code": "<script setup>\nimport { computed, ref } from 'vue';\nconst props = defineProps({\n  items: Map,\n});\n\n// Determine the selected state of the list.\nfunction determineListSelectionState(items) {\n  const selectedItems = countSelectedItems(items);\n  const totalItems = items.size;\n\n  // Also handles the case where the list is empty.\n  if (selectedItems === 0) {\n    return 'none';\n  }\n\n  if (selectedItems < totalItems) {\n    return 'partial';\n  }\n\n  return 'all';\n}\n\nfunction countSelectedItems(items) {\n  return Array.from(items.values()).filter((val) =>\n    Boolean(val),\n  ).length;\n}\n\nfunction getChecked(state) {\n  switch (state) {\n    case 'none':\n      return false;\n    case 'partial':\n      return false;\n    case 'all':\n      return true;\n  }\n}\n\nfunction getIndeterminate(state) {\n  switch (state) {\n    case 'none':\n      return false;\n    case 'partial':\n      return true;\n    case 'all':\n      return false;\n  }\n}\n\nconst newItem = ref('');\n\nconst listState = computed(() =>\n  determineListSelectionState(props.items),\n);\n\nconst selectedItemsCount = computed(() =>\n  countSelectedItems(props.items),\n);\n\nconst entries = computed(() => Array.from(props.items));\n</script>\n\n<template>\n  <div class=\"transfer-list__section\">\n    <!-- Prevent page reload on form submission. -->\n    <form\n      @submit.prevent=\"\n        () => {\n          // Trim value.\n          const newItemValue = newItem.trim();\n\n          // No-op if input is empty.\n          if (newItemValue === '') {\n            return;\n          }\n\n          $emit('add-item', newItem);\n          newItem = '';\n        }\n      \">\n      <input type=\"text\" v-model=\"newItem\" />\n    </form>\n\n    <hr />\n\n    <div class=\"transfer-list__section__items__item\">\n      <label>\n        <input\n          :disabled=\"items.size === 0\"\n          type=\"checkbox\"\n          :checked=\"getChecked(listState)\"\n          :indeterminate=\"getIndeterminate(listState)\"\n          @change=\"\n            () => {\n              switch (listState) {\n                case 'none':\n                case 'partial':\n                  $emit('set-all', true);\n                  break;\n                case 'all':\n                  $emit('set-all', false);\n                  break;\n              }\n            }\n          \" />\n\n        {{\n          `${selectedItemsCount} / ${items.size} Selected`\n        }}\n      </label>\n    </div>\n\n    <hr />\n    <ul class=\"transfer-list__section__items\">\n      <li v-for=\"[label, checked] in entries\">\n        <div class=\"transfer-list__section__items__item\">\n          <label>\n            <input\n              type=\"checkbox\"\n              :checked=\"checked\"\n              @click=\"$emit('toggle', label)\" />\n            {{ label }}\n          </label>\n        </div>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<style>\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\n.transfer-list__section {\n  padding: 20px;\n  flex-grow: 1;\n}\n\n.transfer-list__section__items {\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n}\n\n.transfer-list__section__items__item {\n  display: flex;\n  gap: 8px;\n}\n</style>\n"
    },
    "/src/main.js": {
      "code": "import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport './styles.css';\n\ncreateApp(App).mount('#app');\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.vue",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.vue",
    "environment": "vue-cli"
  },
  "writeup": "var Component=(()=>{var k=Object.create;var a=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var T=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var l in e)a(n,l,{get:e[l],enumerable:!0})},u=(n,e,l,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of _(e))!C.call(n,r)&&r!==l&&a(n,r,{get:()=>e[r],enumerable:!(h=y(e,r))||h.enumerable});return n};var d=(n,e,l)=>(l=n!=null?k(M(n)):{},u(e||!n||!n.__esModule?a(l,\"default\",{value:n,enumerable:!0}):l,n)),S=n=>u(a({},\"__esModule\",{value:!0}),n);var o=T((W,m)=>{m.exports=_jsx_runtime});var A={};v(A,{default:()=>O});var t=d(o());var i=d(o());function f(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Adding items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"New items can be added to their respective lists.\"}),`\n`,(0,i.jsx)(e.li,{children:\"New items are added to the bottom of the lists.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Selecting items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Items can be checked/unchecked.\"}),`\n`,(0,i.jsxs)(e.li,{children:['\"Bulk selection\" checkbox',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Shows empty/indeterminate/checked when there are no/some/all items checked respectively.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on it unselects / selects all the items depending on the selection state of the items.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Checkbox is disabled when there are no items in the list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Selection counts and total counts are reflected correctly.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transfer selected items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when no items are selected in the source list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, selected items are transferred from the source list to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`]})]})}function D(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(f,n)})):f(n)}var p=D;var s=d(o());function b(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"Use of \",(0,s.jsx)(e.code,{children:\"<form>\"}),\" submit for adding new items to the list.\"]}),`\n`,(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:'<input type=\"checkbox\">'}),\" are paired with \",(0,s.jsx)(e.code,{children:\"<label>\"}),\"s. Clicking on labels also selects/deselect the item.\"]}),`\n`,(0,s.jsxs)(e.li,{children:[\"Since the \",(0,s.jsx)(e.code,{children:\"<button>\"}),\"s do not have a visible label, use \",(0,s.jsx)(e.code,{children:\"aria-label\"}),\"s to indicate their purpose. As a result, make the button contents hidden from screen readers via \",(0,s.jsx)(e.code,{children:'aria-hidden=\"true\"'}),\".\"]}),`\n`,(0,s.jsx)(e.li,{children:\"All required functionality should be achievable just by using the keyboard.\"}),`\n`]})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(b,n)})):b(n)}var x=L;var c=d(o());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\"},n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{children:\"User Experience\"}),`\n`,(0,c.jsx)(e.p,{children:\"To ensure a good user experience, we can implement the following:\"}),`\n`,(0,c.jsxs)(e.ul,{children:[`\n`,(0,c.jsx)(e.li,{children:\"Disallow non-empty items to be added to the list.\"}),`\n`,(0,c.jsx)(e.li,{children:\"Input stays focused after an item has been added.\"}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,c.jsx)(e,Object.assign({},n,{children:(0,c.jsx)(g,n)})):g(n)}var w=X;function j(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",code:\"code\",h4:\"h4\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/transfer-list/vue/solution\",children:\"Transfer List's Vue solution\"}),\".\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The state structure remains the same and the choice of \",(0,t.jsx)(e.code,{children:\"Map\"}),\" is flexible enough to handle the new use case of adding items to the list.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsx)(e.p,{children:\"The main additions in this question are:\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Input form\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We'll wrap the \",(0,t.jsx)(e.code,{children:\"<input>\"}),\" in a \",(0,t.jsx)(e.code,{children:\"<form>\"}),\" for built-in keyboard handling, a11y, and UX.\"]}),`\n`,(0,t.jsx)(e.h4,{children:\"Bulk Selection Checkbox\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Did you know that an HTML checkbox actually has 3 states? They are checked, unchecked, and indeterminate. Indeterminate state is not commonly used and cannot be set via HTML attributes. Luckily, Vue provides a way to set the indeterminate state via the \",(0,t.jsx)(e.code,{children:\"indeterminate\"}),\" attribute in template.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can write a new function called \",(0,t.jsx)(e.code,{children:\"determineListSelectionState\"}),\" that accepts the \",(0,t.jsx)(e.code,{children:\"items\"}),\" and determine the selection state of the list, whether no items are selected, some items are selected, or all items are selected. With this selection. With this state, we can render the appropriate appearance for the bulk selection checkbox. This state is also useful for determining what happens when the bulk selection checkbox is clicked/triggered. We can create a new function called \",(0,t.jsx)(e.code,{children:\"setAllItemsSelectionState\"}),\" to return a new set of list items which are set to a specific selection state.\"]}),`\n`,(0,t.jsx)(p,{}),`\n`,(0,t.jsx)(x,{}),`\n`,(0,t.jsx)(w,{})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(j,n)})):j(n)}var O=F;return S(A);})();\n;return Component;"
}