{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/transfer-list-ii-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.js": {
      "code": "import { useEffect, useId, useRef, useState } from 'react';\n\nfunction CheckboxItem({ onChange, label, checked }) {\n  // Let React generate a unique ID for each item so as to maximize\n  // reusability of the component.\n  const id = useId();\n\n  return (\n    <div className=\"transfer-list__section__items__item\">\n      <input\n        type=\"checkbox\"\n        id={id}\n        checked={checked}\n        onChange={onChange}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  );\n}\n\nfunction BulkSelectionCheckbox({\n  disabled,\n  onChange,\n  state,\n  selectedCount,\n  totalCount,\n}) {\n  const ref = useRef();\n  const bulkSelectionId = useId();\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    switch (state) {\n      case 'none':\n        setChecked(false);\n        ref.current.indeterminate = false;\n        break;\n      case 'partial':\n        setChecked(false);\n        ref.current.indeterminate = true;\n        break;\n      case 'all':\n        setChecked(true);\n        ref.current.indeterminate = false;\n        break;\n    }\n  }, [state]);\n\n  return (\n    <div className=\"transfer-list__section__items__item\">\n      <input\n        ref={ref}\n        disabled={disabled}\n        type=\"checkbox\"\n        id={bulkSelectionId}\n        checked={checked}\n        onChange={onChange}\n      />\n      <label htmlFor={bulkSelectionId}>\n        {selectedCount} / {totalCount} Selected\n      </label>\n    </div>\n  );\n}\n\nfunction ItemList({ items, setItems }) {\n  const [newItem, setNewItem] = useState('');\n  const listState = determineListSelectionState(items);\n\n  return (\n    <div className=\"transfer-list__section\">\n      <form\n        onSubmit={(event) => {\n          // Prevent page reload on form submission.\n          event.preventDefault();\n\n          // Trim value.\n          const newItemValue = newItem.trim();\n\n          // No-op if input is empty.\n          if (newItemValue === '') {\n            return;\n          }\n\n          // Add new item to list.\n          const newItems = new Map(items);\n          newItems.set(newItem, false);\n          setItems(newItems);\n\n          setNewItem('');\n        }}>\n        <input\n          type=\"text\"\n          value={newItem}\n          onChange={(event) => {\n            setNewItem(event.target.value);\n          }}\n        />\n      </form>\n      <hr />\n      <BulkSelectionCheckbox\n        selectedCount={countSelectedItems(items)}\n        totalCount={items.size}\n        state={listState}\n        disabled={items.size === 0}\n        onChange={() => {\n          switch (listState) {\n            case 'none':\n            case 'partial':\n              setItems(\n                setAllItemsSelectionState(items, true),\n              );\n              break;\n            case 'all':\n              setItems(\n                setAllItemsSelectionState(items, false),\n              );\n              break;\n          }\n        }}\n      />\n      <hr />\n      <ul className=\"transfer-list__section__items\">\n        {Array.from(items.entries()).map(\n          ([label, checked]) => (\n            <li key={label}>\n              <CheckboxItem\n                label={label}\n                checked={checked}\n                onChange={() => {\n                  const newItems = new Map(items);\n                  newItems.set(label, !items.get(label));\n                  setItems(newItems);\n                }}\n              />\n            </li>\n          ),\n        )}\n      </ul>\n    </div>\n  );\n}\n\nconst DEFAULT_ITEMS_LEFT = [\n  'HTML',\n  'JavaScript',\n  'CSS',\n  'TypeScript',\n];\nconst DEFAULT_ITEMS_RIGHT = [\n  'React',\n  'Angular',\n  'Vue',\n  'Svelte',\n];\n\n// Convert the default array of items into a map with the item\n// name as a key and the value as a boolean.\nfunction generateItemsMap(items) {\n  return new Map(items.map((label) => [label, false]));\n}\n\nfunction countSelectedItems(items) {\n  return Array.from(items.values()).filter((val) =>\n    Boolean(val),\n  ).length;\n}\n\n// Determine the selected state of the list.\nfunction determineListSelectionState(items) {\n  const selectedItems = countSelectedItems(items);\n  const totalItems = items.size;\n\n  // Also handles the case where the list is empty.\n  if (selectedItems === 0) {\n    return 'none';\n  }\n\n  if (selectedItems < totalItems) {\n    return 'partial';\n  }\n\n  return 'all';\n}\n\n// Transfer all items from a source list to a destination list.\nfunction setAllItemsSelectionState(items, newState) {\n  const newItems = new Map(items);\n\n  Array.from(newItems.keys()).forEach((key) => {\n    newItems.set(key, newState);\n  });\n\n  return newItems;\n}\n\n// Transfer selected items from a source list to a destination list.\nfunction transferSelectedItems(\n  itemsSrc,\n  setItemsSrc,\n  itemsDst,\n  setItemsDst,\n) {\n  const newItemsSrc = new Map(itemsSrc);\n  const newItemsDst = new Map(itemsDst);\n\n  // Remove selected items from source list and add to the destination list.\n  itemsSrc.forEach((value, key) => {\n    if (!value) {\n      return;\n    }\n\n    newItemsDst.set(key, value);\n    newItemsSrc.delete(key);\n  });\n  setItemsSrc(newItemsSrc);\n  setItemsDst(newItemsDst);\n}\n\nexport default function App() {\n  const [itemsLeft, setItemsLeft] = useState(\n    generateItemsMap(DEFAULT_ITEMS_LEFT),\n  );\n  const [itemsRight, setItemsRight] = useState(\n    generateItemsMap(DEFAULT_ITEMS_RIGHT),\n  );\n\n  return (\n    <div className=\"transfer-list\">\n      <ItemList items={itemsLeft} setItems={setItemsLeft} />\n      <div className=\"transfer-list__actions\">\n        <button\n          aria-label=\"Transfer selected items to left list\"\n          disabled={\n            determineListSelectionState(itemsRight) ===\n            'none'\n          }\n          onClick={() => {\n            transferSelectedItems(\n              itemsRight,\n              setItemsRight,\n              itemsLeft,\n              setItemsLeft,\n            );\n          }}>\n          <span aria-hidden={true}>&lt;</span>\n        </button>\n        <button\n          aria-label=\"Transfer selected items to right list\"\n          disabled={\n            determineListSelectionState(itemsLeft) ===\n            'none'\n          }\n          onClick={() => {\n            transferSelectedItems(\n              itemsLeft,\n              setItemsLeft,\n              itemsRight,\n              setItemsRight,\n            );\n          }}>\n          <span aria-hidden={true}>&gt;</span>\n        </button>\n      </div>\n      <ItemList\n        items={itemsRight}\n        setItems={setItemsRight}\n      />\n    </div>\n  );\n}\n"
    },
    "/src/index.js": {
      "code": "import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\n.transfer-list {\n  border: 1px solid #ccc;\n  display: flex;\n  max-width: 768px;\n  margin: 0 auto;\n}\n\n.transfer-list__section {\n  padding: 20px;\n  overflow: hidden;\n  flex-grow: 1;\n}\n\n.transfer-list__section__items {\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n}\n\n.transfer-list__section__items__item {\n  display: flex;\n  gap: 8px;\n}\n\n.transfer-list__actions {\n  border-color: #ccc;\n  border-width: 0 1px 0 1px;\n  border-style: solid;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  row-gap: 12px;\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.js",
      "/src/styles.css"
    ],
    "activeFile": "/src/App.js",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var j=Object.create;var a=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var T=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),S=(n,e)=>{for(var l in e)a(n,l,{get:e[l],enumerable:!0})},u=(n,e,l,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!C.call(n,o)&&o!==l&&a(n,o,{get:()=>e[o],enumerable:!(h=y(e,o))||h.enumerable});return n};var d=(n,e,l)=>(l=n!=null?j(M(n)):{},u(e||!n||!n.__esModule?a(l,\"default\",{value:n,enumerable:!0}):l,n)),D=n=>u(a({},\"__esModule\",{value:!0}),n);var r=T((W,m)=>{m.exports=_jsx_runtime});var A={};S(A,{default:()=>O});var t=d(r());var i=d(r());function f(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Adding items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"New items can be added to their respective lists.\"}),`\n`,(0,i.jsx)(e.li,{children:\"New items are added to the bottom of the lists.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Selecting items\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Items can be checked/unchecked.\"}),`\n`,(0,i.jsxs)(e.li,{children:['\"Bulk selection\" checkbox',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Shows empty/indeterminate/checked when there are no/some/all items checked respectively.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Clicking on it unselects / selects all the items depending on the selection state of the items.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Checkbox is disabled when there are no items in the list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Selection counts and total counts are reflected correctly.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:['\"Transfer selected items\" buttons',`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Button is disabled when no items are selected in the source list.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Upon clicking, selected items are transferred from the source list to the bottom of the destination list.\"}),`\n`]}),`\n`]}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(f,n)})):f(n)}var p=v;var c=d(r());function b(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",code:\"code\"},n.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{children:\"Accessibility\"}),`\n`,(0,c.jsxs)(e.ul,{children:[`\n`,(0,c.jsxs)(e.li,{children:[\"Use of \",(0,c.jsx)(e.code,{children:\"<form>\"}),\" submit for adding new items to the list.\"]}),`\n`,(0,c.jsxs)(e.li,{children:[(0,c.jsx)(e.code,{children:'<input type=\"checkbox\">'}),\" are paired with \",(0,c.jsx)(e.code,{children:\"<label>\"}),\"s. Clicking on labels also selects/deselect the item.\"]}),`\n`,(0,c.jsxs)(e.li,{children:[\"Since the \",(0,c.jsx)(e.code,{children:\"<button>\"}),\"s do not have a visible label, use \",(0,c.jsx)(e.code,{children:\"aria-label\"}),\"s to indicate their purpose. As a result, make the button contents hidden from screen readers via \",(0,c.jsx)(e.code,{children:'aria-hidden=\"true\"'}),\".\"]}),`\n`,(0,c.jsx)(e.li,{children:\"All required functionality should be achievable just by using the keyboard.\"}),`\n`]})]})}function X(n={}){let{wrapper:e}=n.components||{};return e?(0,c.jsx)(e,Object.assign({},n,{children:(0,c.jsx)(b,n)})):b(n)}var x=X;var s=d(r());function g(n){let e=Object.assign({h2:\"h2\",p:\"p\",ul:\"ul\",li:\"li\"},n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{children:\"User Experience\"}),`\n`,(0,s.jsx)(e.p,{children:\"To ensure a good user experience, we can implement the following:\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Disallow non-empty items to be added to the list.\"}),`\n`,(0,s.jsx)(e.li,{children:\"Input stays focused after an item has been added.\"}),`\n`]})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(g,n)})):g(n)}var w=F;function k(n){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",code:\"code\",h4:\"h4\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The following explanation assumes you have a good understanding of \",(0,t.jsx)(e.a,{href:\"/questions/user-interface/transfer-list/react/solution\",children:\"Transfer List's React solution\"}),\".\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The state structure remains the same and the choice of \",(0,t.jsx)(e.code,{children:\"Map\"}),\" is flexible enough to handle the new use case of adding items to the list.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Rendering\"}),`\n`,(0,t.jsx)(e.p,{children:\"The main additions in this question are:\"}),`\n`,(0,t.jsx)(e.h4,{children:\"Input form\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We'll wrap the \",(0,t.jsx)(e.code,{children:\"<input>\"}),\" in a \",(0,t.jsx)(e.code,{children:\"<form>\"}),\" for built-in keyboard handling, a11y, and UX.\"]}),`\n`,(0,t.jsx)(e.h4,{children:\"Bulk Selection Checkbox\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Did you know that an HTML checkbox actually has 3 states? They are checked, unchecked, and indeterminate. Indeterminate state is not commonly used and cannot be set via HTML attributes. Hence we need to obtain a reference to the checkbox instance and do \",(0,t.jsx)(e.code,{children:\"checkboxInputElement.indeterminate = true\"}),\". This can be done in React via the \",(0,t.jsx)(e.code,{children:\"useRef\"}),\" hook.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We can write a new function called \",(0,t.jsx)(e.code,{children:\"determineListSelectionState\"}),\" that accepts the \",(0,t.jsx)(e.code,{children:\"items\"}),\" and determine the selection state of the list, whether no items are selected, some items are selected, or all items are selected. With this selection. With this state, we can render the appropriate appearance for the bulk selection checkbox. This state is also useful for determining what happens when the bulk selection checkbox is clicked/triggered. We can create a new function called \",(0,t.jsx)(e.code,{children:\"setAllItemsSelectionState\"}),\" to return a new set of list items which are set to a specific selection state.\"]}),`\n`,(0,t.jsx)(p,{}),`\n`,(0,t.jsx)(x,{}),`\n`,(0,t.jsx)(w,{})]})}function L(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(k,n)})):k(n)}var O=L;return D(A);})();\n;return Component;"
}