{
  "author": "michalgrzegorczyk-dev",
  "files": {
    "/angular.json": {
      "code": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"defaultProject\": \"greatfrontend\",\n  \"projects\": {\n    \"greatfrontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/my-app\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"greatfrontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"greatfrontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"greatfrontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.css\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": \"7ca5c4d0-e5db-4d23-9ffd-8c8c042e34e7\"\n  }\n}\n"
    },
    "/greatfrontend.json": {
      "code": "{\n  \"visibleFiles\": [\n    \"/src/app/app.component.ts\",\n    \"/src/app/app.component.html\",\n    \"/src/styles.css\"\n  ],\n  \"activeFile\": \"/src/app/app.component.ts\",\n  \"environment\": \"angular-cli\"\n}\n"
    },
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/transfer-list-ii-angular-solution\",\n  \"author\": \"michalgrzegorczyk-dev\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/common\": \"16.2.4\",\n    \"@angular/compiler\": \"16.2.4\",\n    \"@angular/core\": \"16.2.4\",\n    \"@angular/forms\": \"16.2.4\",\n    \"@angular/platform-browser\": \"16.2.4\",\n    \"@angular/platform-browser-dynamic\": \"16.2.4\",\n    \"rxjs\": \"7.8.0\",\n    \"zone.js\": \"0.13.1\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"16.2.1\",\n    \"@angular/cli\": \"16.2.1\",\n    \"@angular/compiler-cli\": \"16.2.4\",\n    \"@types/jasmine\": \"4.3.5\",\n    \"jasmine-core\": \"4.6.0\",\n    \"karma\": \"6.4.2\",\n    \"karma-chrome-launcher\": \"3.2.0\",\n    \"karma-coverage\": \"2.2.1\",\n    \"karma-jasmine\": \"5.1.0\",\n    \"karma-jasmine-html-reporter\": \"2.1.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  }\n}\n"
    },
    "/src/app/app.component.html": {
      "code": "<div class=\"transfer-list\">\n  <app-item-list\n    class=\"transfer-list__section\"\n    [items]=\"itemsLeft\"\n    (itemsChange)=\"setItemsLeft($event)\" />\n\n  <div class=\"transfer-list__actions\">\n    <button\n      aria-label=\"Transfer selected items to left list\"\n      [disabled]=\"\n        getListSelectionState(itemsRight) === 'none'\n      \"\n      (click)=\"\n        transferSelectedItems(\n          itemsRight,\n          setItemsRight,\n          itemsLeft,\n          setItemsLeft\n        )\n      \">\n      <span [attr.aria-hidden]=\"true\">&lt;</span>\n    </button>\n    <button\n      aria-label=\"Transfer selected items to right list\"\n      [disabled]=\"\n        getListSelectionState(itemsLeft) === 'none'\n      \"\n      (click)=\"\n        transferSelectedItems(\n          itemsLeft,\n          setItemsLeft,\n          itemsRight,\n          setItemsRight\n        )\n      \">\n      <span [attr.aria-hidden]=\"true\">&gt;</span>\n    </button>\n  </div>\n\n  <app-item-list\n    class=\"transfer-list__section\"\n    [items]=\"itemsRight\"\n    (itemsChange)=\"setItemsRight($event)\" />\n</div>\n"
    },
    "/src/app/app.component.ts": {
      "code": "import { Component } from '@angular/core';\n\nconst DEFAULT_ITEMS_LEFT = [\n  'HTML',\n  'JavaScript',\n  'CSS',\n  'TypeScript',\n];\nconst DEFAULT_ITEMS_RIGHT = [\n  'React',\n  'Angular',\n  'Vue',\n  'Svelte',\n];\n\nfunction generateItemsMap(\n  items: string[],\n): Map<string, boolean> {\n  const map = new Map<string, boolean>();\n  items.forEach((item) => {\n    map.set(item, false);\n  });\n  return map;\n}\n\nexport function determineListSelectionState(\n  items: Map<string, boolean>,\n): 'none' | 'partial' | 'all' {\n  const selectedCount = Array.from(items.values()).filter(\n    (value) => value,\n  ).length;\n  if (selectedCount === 0) {\n    return 'none';\n  } else if (selectedCount < items.size) {\n    return 'partial';\n  } else {\n    return 'all';\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  itemsLeft = generateItemsMap(DEFAULT_ITEMS_LEFT);\n  itemsRight = generateItemsMap(DEFAULT_ITEMS_RIGHT);\n\n  setItemsLeft = (newItems: Map<string, boolean>): void => {\n    this.itemsLeft = new Map(newItems);\n  };\n\n  setItemsRight = (\n    newItems: Map<string, boolean>,\n  ): void => {\n    this.itemsRight = new Map(newItems);\n  };\n\n  transferSelectedItems(\n    from: Map<string, boolean>,\n    setFromItems: (newItems: Map<string, boolean>) => void,\n    to: Map<string, boolean>,\n    setToItems: (newItems: Map<string, boolean>) => void,\n  ): void {\n    from.forEach((value, key) => {\n      if (value) {\n        to.set(key, value);\n        from.delete(key);\n      }\n    });\n\n    setFromItems(from);\n    setToItems(to);\n  }\n\n  getListSelectionState(\n    items: Map<string, boolean>,\n  ): string {\n    return determineListSelectionState(items);\n  }\n}\n"
    },
    "/src/app/app.module.ts": {
      "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { ItemListComponent } from './item-list.component';\nimport { BulkSelectionCheckboxComponent } from './bulk-selection-checkbox.component';\nimport { CheckboxItemComponent } from './checkbox-item.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ItemListComponent,\n    BulkSelectionCheckboxComponent,\n    CheckboxItemComponent,\n  ],\n  imports: [BrowserModule, FormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n"
    },
    "/src/app/bulk-selection-checkbox.component.html": {
      "code": "<div class=\"transfer-list__section__items__item\">\n  <input\n    #checkboxRef\n    [disabled]=\"disabled\"\n    type=\"checkbox\"\n    [id]=\"bulkSelectionId\"\n    [checked]=\"checked\"\n    (change)=\"onInputChange(checkboxRef)\" />\n  <label [for]=\"bulkSelectionId\">\n    {{ selectedCount }} / {{ totalCount }} Selected\n  </label>\n</div>\n"
    },
    "/src/app/bulk-selection-checkbox.component.ts": {
      "code": "import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-bulk-selection-checkbox',\n  templateUrl: './bulk-selection-checkbox.component.html',\n})\nexport class BulkSelectionCheckboxComponent\n  implements OnChanges\n{\n  @Input()\n  disabled!: boolean;\n\n  @Input()\n  state!: 'none' | 'partial' | 'all';\n\n  @Input()\n  selectedCount!: number;\n\n  @Input()\n  totalCount!: number;\n\n  @Output()\n  onChange = new EventEmitter<boolean>();\n\n  @ViewChild('checkboxRef', { static: false })\n  checkboxRef!: ElementRef<HTMLInputElement>;\n\n  bulkSelectionId: string = `checkbox-item-${Math.random()\n    .toString(36)\n    .substring(2, 9)}`;\n\n  checked = false;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('state' in changes) {\n      switch (this.state) {\n        case 'none':\n          this.checked = false;\n          this.setIndeterminate(false);\n          break;\n        case 'partial':\n          this.checked = false;\n          this.setIndeterminate(true);\n          break;\n        case 'all':\n          this.checked = true;\n          this.setIndeterminate(false);\n          break;\n      }\n    }\n  }\n\n  onInputChange(element: HTMLInputElement): void {\n    this.onChange.emit(element.checked);\n  }\n\n  private setIndeterminate(value: boolean): void {\n    if (this.checkboxRef) {\n      this.checkboxRef.nativeElement.indeterminate = value;\n    }\n  }\n}\n"
    },
    "/src/app/checkbox-item.component.ts": {
      "code": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-checkbox-item',\n  template: `\n    <div class=\"transfer-list__section__items__item\">\n      <input\n        type=\"checkbox\"\n        [id]=\"uniqueId\"\n        #checkboxRef\n        [checked]=\"checked\"\n        (change)=\"onInputChange(checkboxRef)\" />\n      <label [for]=\"uniqueId\">{{ label }}</label>\n    </div>\n  `,\n})\nexport class CheckboxItemComponent {\n  uniqueId: string = `checkbox-item-${Math.random()\n    .toString(36)\n    .substring(2, 9)}`;\n\n  @Input()\n  label!: string;\n\n  @Input()\n  checked!: boolean;\n\n  @Output()\n  onChange = new EventEmitter<boolean>();\n\n  onInputChange(element: HTMLInputElement) {\n    this.onChange.emit(element.checked);\n  }\n}\n"
    },
    "/src/app/item-list.component.html": {
      "code": "<form (ngSubmit)=\"onSubmit(newItemInput)\" ngNativeValidate>\n  <label id=\"newItemLabel\"></label>\n  <input\n    type=\"text\"\n    #newItemInput\n    aria-labelledby=\"newItemLabel\"\n    name=\"newItem\" />\n</form>\n\n<hr />\n\n<app-bulk-selection-checkbox\n  [selectedCount]=\"countSelectedItems(items)\"\n  [totalCount]=\"items.size\"\n  [state]=\"listState\"\n  [disabled]=\"items.size === 0\"\n  (onChange)=\"onBulkSelectionChange()\" />\n\n<hr />\n\n<ul class=\"transfer-list__section__items\">\n  <li\n    *ngFor=\"\n      let entry of items.entries();\n      trackBy: trackByFn\n    \">\n    <app-checkbox-item\n      [label]=\"entry[0]\"\n      [checked]=\"entry[1]\"\n      (onChange)=\"onCheckboxChange(entry[0])\" />\n  </li>\n</ul>\n"
    },
    "/src/app/item-list.component.ts": {
      "code": "import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { determineListSelectionState } from './app.component';\n\n@Component({\n  selector: 'app-item-list',\n  templateUrl: './item-list.component.html',\n})\nexport class ItemListComponent implements OnChanges {\n  @Input()\n  items = new Map<string, boolean>();\n\n  @Output()\n  itemsChange = new EventEmitter<Map<string, boolean>>();\n  listState!: 'none' | 'partial' | 'all';\n\n  ngOnChanges(): void {\n    this.listState = determineListSelectionState(\n      this.items,\n    );\n  }\n\n  onSubmit(newItem: HTMLInputElement): void {\n    const newItemValue = newItem.value.trim();\n    if (newItemValue === '') {\n      return;\n    }\n    const newItems = new Map(this.items);\n    newItems.set(newItemValue, false);\n    this.itemsChange.emit(newItems);\n    newItem.value = '';\n  }\n\n  onBulkSelectionChange(): void {\n    switch (this.listState) {\n      case 'none':\n      case 'partial':\n        this.itemsChange.emit(\n          this.setAllItemsSelectionState(this.items, true),\n        );\n        break;\n      case 'all':\n        this.itemsChange.emit(\n          this.setAllItemsSelectionState(this.items, false),\n        );\n        break;\n    }\n  }\n\n  onCheckboxChange(label: string): void {\n    const newItems = new Map(this.items);\n    newItems.set(label, !this.items.get(label));\n    this.itemsChange.emit(newItems);\n\n    this.listState = determineListSelectionState(\n      this.items,\n    );\n  }\n\n  countSelectedItems(items: Map<string, boolean>): number {\n    return Array.from(items.values()).filter((value) =>\n      Boolean(value),\n    ).length;\n  }\n\n  setAllItemsSelectionState(\n    items: Map<string, boolean>,\n    state: boolean,\n  ): Map<string, boolean> {\n    const newItems = new Map(items);\n    for (const key of newItems.keys()) {\n      newItems.set(key, state);\n    }\n    return newItems;\n  }\n\n  trackByFn(index: number) {\n    return index;\n  }\n}\n"
    },
    "/src/index.html": {
      "code": "<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Angular</title>\n    <base href=\"/\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <app-root></app-root>\n  </body>\n</html>\n"
    },
    "/src/main.ts": {
      "code": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nenableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\nul {\n  list-style-type: none;\n  padding-left: 0;\n}\n\n.transfer-list {\n  border: 1px solid #ccc;\n  display: flex;\n  max-width: 768px;\n  margin: 0 auto;\n}\n\n.transfer-list__section {\n  padding: 20px;\n  overflow: hidden;\n  flex-grow: 1;\n}\n\n.transfer-list__section__items {\n  display: flex;\n  flex-direction: column;\n  row-gap: 12px;\n}\n\n.transfer-list__section__items__item {\n  display: flex;\n  gap: 8px;\n}\n\n.transfer-list__actions {\n  border-color: #ccc;\n  border-width: 0 1px 0 1px;\n  border-style: solid;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  row-gap: 12px;\n}\n"
    },
    "/tsconfig.app.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/app\",\n    \"types\": []\n  },\n  \"files\": [\"src/main.ts\"],\n  \"include\": [\"src/**/*.d.ts\"]\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2020\",\n    \"module\": \"esnext\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}\n"
    },
    "/tsconfig.spec.json": {
      "code": "/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./out-tsc/spec\",\n    \"types\": [\"jasmine\"]\n  },\n  \"include\": [\"src/**/*.spec.ts\", \"src/**/*.d.ts\"]\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/app/app.component.ts",
      "/src/app/app.component.html",
      "/src/styles.css"
    ],
    "activeFile": "/src/app/app.component.ts",
    "environment": "angular-cli"
  }
}