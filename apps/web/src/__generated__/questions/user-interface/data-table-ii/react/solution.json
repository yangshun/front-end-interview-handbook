{
  "author": "yangshun",
  "files": {
    "/package.json": {
      "code": "{\n  \"name\": \"@gfe-questions/data-table-ii-react-solution\",\n  \"author\": \"yangshun\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.0\",\n    \"@types/react-dom\": \"18.2.0\",\n    \"typescript\": \"5.0.2\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\n"
    },
    "/public/index.html": {
      "code": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
    },
    "/src/App.tsx": {
      "code": "import DataTable from './DataTable';\n\nexport default function App() {\n  return (\n    <div>\n      <DataTable />\n    </div>\n  );\n}\n"
    },
    "/src/data/users.json": {
      "code": "[\n  {\n    \"id\": 1,\n    \"name\": \"Emily Chen\",\n    \"age\": 28,\n    \"occupation\": \"Software Engineer\"\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Ryan Thompson\",\n    \"age\": 32,\n    \"occupation\": \"Marketing Manager\"\n  },\n  {\n    \"id\": 3,\n    \"name\": \"Sophia Patel\",\n    \"age\": 25,\n    \"occupation\": \"Data Analyst\"\n  },\n  {\n    \"id\": 4,\n    \"name\": \"Michael Lee\",\n    \"age\": 41,\n    \"occupation\": \"CEO\"\n  },\n  {\n    \"id\": 5,\n    \"name\": \"Olivia Brown\",\n    \"age\": 29,\n    \"occupation\": \"Graphic Designer\"\n  },\n  {\n    \"id\": 6,\n    \"name\": \"Alexander Hall\",\n    \"age\": 38,\n    \"occupation\": \"Sales Representative\"\n  },\n  {\n    \"id\": 7,\n    \"name\": \"Isabella Davis\",\n    \"age\": 26,\n    \"occupation\": \"Teacher\"\n  },\n  {\n    \"id\": 8,\n    \"name\": \"Ethan White\",\n    \"age\": 35,\n    \"occupation\": \"Lawyer\"\n  },\n  {\n    \"id\": 9,\n    \"name\": \"Lily Tran\",\n    \"age\": 30,\n    \"occupation\": \"Nurse\"\n  },\n  {\n    \"id\": 10,\n    \"name\": \"Julian Sanchez\",\n    \"age\": 39,\n    \"occupation\": \"Engineer\"\n  },\n  {\n    \"id\": 11,\n    \"name\": \"Ava Martin\",\n    \"age\": 27,\n    \"occupation\": \"Journalist\"\n  },\n  {\n    \"id\": 12,\n    \"name\": \"Benjamin Walker\",\n    \"age\": 42,\n    \"occupation\": \"Doctor\"\n  },\n  {\n    \"id\": 13,\n    \"name\": \"Charlotte Brooks\",\n    \"age\": 31,\n    \"occupation\": \"HR Manager\"\n  },\n  {\n    \"id\": 14,\n    \"name\": \"Gabriel Harris\",\n    \"age\": 36,\n    \"occupation\": \"IT Consultant\"\n  },\n  {\n    \"id\": 15,\n    \"name\": \"Hannah Taylor\",\n    \"age\": 24,\n    \"occupation\": \"Student\"\n  },\n  {\n    \"id\": 16,\n    \"name\": \"Jackson Brown\",\n    \"age\": 40,\n    \"occupation\": \"Business Owner\"\n  },\n  {\n    \"id\": 17,\n    \"name\": \"Kayla Lewis\",\n    \"age\": 33,\n    \"occupation\": \"Event Planner\"\n  },\n  {\n    \"id\": 18,\n    \"name\": \"Logan Mitchell\",\n    \"age\": 37,\n    \"occupation\": \"Architect\"\n  },\n  {\n    \"id\": 19,\n    \"name\": \"Mia Garcia\",\n    \"age\": 29,\n    \"occupation\": \"Artist\"\n  },\n  {\n    \"id\": 20,\n    \"name\": \"Natalie Hall\",\n    \"age\": 34,\n    \"occupation\": \"Teacher\"\n  },\n  {\n    \"id\": 21,\n    \"name\": \"Oliver Patel\",\n    \"age\": 38,\n    \"occupation\": \"Software Developer\"\n  },\n  {\n    \"id\": 22,\n    \"name\": \"Penelope Martin\",\n    \"age\": 26,\n    \"occupation\": \"Writer\"\n  },\n  {\n    \"id\": 23,\n    \"name\": \"Quinn Lee\",\n    \"age\": 35,\n    \"occupation\": \"Entrepreneur\"\n  },\n  {\n    \"id\": 24,\n    \"name\": \"Rachel Kim\",\n    \"age\": 30,\n    \"occupation\": \"Dentist\"\n  },\n  {\n    \"id\": 25,\n    \"name\": \"Samuel Jackson\",\n    \"age\": 42,\n    \"occupation\": \"Lawyer\"\n  },\n  {\n    \"id\": 26,\n    \"name\": \"Tessa Hall\",\n    \"age\": 28,\n    \"occupation\": \"Graphic Designer\"\n  },\n  {\n    \"id\": 27,\n    \"name\": \"Uma Patel\",\n    \"age\": 39,\n    \"occupation\": \"Marketing Manager\"\n  },\n  {\n    \"id\": 28,\n    \"name\": \"Vincent Brooks\",\n    \"age\": 36,\n    \"occupation\": \"IT Consultant\"\n  },\n  {\n    \"id\": 29,\n    \"name\": \"Walter White\",\n    \"age\": 41,\n    \"occupation\": \"Engineer\"\n  },\n  {\n    \"id\": 30,\n    \"name\": \"Xavier Sanchez\",\n    \"age\": 33,\n    \"occupation\": \"Sales Representative\"\n  },\n  {\n    \"id\": 31,\n    \"name\": \"Yvonne Martin\",\n    \"age\": 29,\n    \"occupation\": \"Teacher\"\n  },\n  {\n    \"id\": 32,\n    \"name\": \"Zoe Lee\",\n    \"age\": 27,\n    \"occupation\": \"Data Analyst\"\n  },\n  {\n    \"id\": 33,\n    \"name\": \"Abigail Brown\",\n    \"age\": 34,\n    \"occupation\": \"Nurse\"\n  },\n  {\n    \"id\": 34,\n    \"name\": \"Caleb Harris\",\n    \"age\": 38,\n    \"occupation\": \"Business Owner\"\n  },\n  {\n    \"id\": 35,\n    \"name\": \"Diana Taylor\",\n    \"age\": 31,\n    \"occupation\": \"Event Planner\"\n  },\n  {\n    \"id\": 36,\n    \"name\": \"Eleanor Walker\",\n    \"age\": 40,\n    \"occupation\": \"CEO\"\n  }\n]\n"
    },
    "/src/DataTable.tsx": {
      "code": "import { useState } from 'react';\nimport users from './data/users.json';\n\ntype SortField = 'id' | 'name' | 'age' | 'occupation';\ntype SortDirection = 'asc' | 'desc';\ntype User = (typeof users)[number];\n\nconst columns = [\n  { label: 'ID', key: 'id' },\n  { label: 'Name', key: 'name' },\n  { label: 'Age', key: 'age' },\n  { label: 'Occupation', key: 'occupation' },\n] as const;\n\nfunction sortUsers(\n  usersList: Array<User>,\n  field: SortField | null,\n  direction: SortDirection,\n) {\n  const usersClone = usersList.slice();\n\n  switch (field) {\n    case 'id':\n    case 'age': {\n      return usersClone.sort((a, b) =>\n        direction === 'asc'\n          ? a[field] - b[field]\n          : b[field] - a[field],\n      );\n    }\n    case 'name':\n    case 'occupation': {\n      return usersClone.sort((a, b) =>\n        direction === 'asc'\n          ? a[field].localeCompare(b[field])\n          : b[field].localeCompare(a[field]),\n      );\n    }\n    default: {\n      return usersClone;\n    }\n  }\n}\n\nfunction paginateUsers(\n  usersList: Array<User>,\n  page: number,\n  pageSize: number,\n) {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize;\n\n  const pageUsers = usersList.slice(start, end);\n  const totalPages = Math.ceil(usersList.length / pageSize);\n  return { pageUsers, totalPages };\n}\n\nexport default function DataTable() {\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(5);\n\n  const [sortField, setSortField] =\n    useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] =\n    useState<SortDirection>('asc');\n\n  const sortedUsers = sortUsers(\n    users,\n    sortField,\n    sortDirection,\n  );\n  const { totalPages, pageUsers } = paginateUsers(\n    sortedUsers,\n    page,\n    pageSize,\n  );\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            {columns.map(({ label, key }) => (\n              <th key={key}>\n                <button\n                  onClick={() => {\n                    if (sortField !== key) {\n                      setSortField(key);\n                      setSortDirection('asc');\n                    } else {\n                      setSortDirection(\n                        sortDirection === 'asc'\n                          ? 'desc'\n                          : 'asc',\n                      );\n                    }\n                    setPage(1);\n                  }}>\n                  {label}\n                </button>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {pageUsers.map(\n            ({ id, name, age, occupation }) => (\n              <tr key={id}>\n                <td>{id}</td>\n                <td>{name}</td>\n                <td>{age}</td>\n                <td>{occupation}</td>\n              </tr>\n            ),\n          )}\n        </tbody>\n      </table>\n      <hr />\n      <div className=\"pagination\">\n        <select\n          aria-label=\"Page size\"\n          onChange={(event) => {\n            setPageSize(Number(event.target.value));\n            setPage(1);\n          }}>\n          {[5, 10, 20].map((size) => (\n            <option key={size} value={size}>\n              Show {size}\n            </option>\n          ))}\n        </select>\n        <div className=\"pages\">\n          <button\n            disabled={page === 1}\n            onClick={() => {\n              setPage(page - 1);\n            }}>\n            Prev\n          </button>\n          <span aria-label=\"Page number\">\n            Page {page} of {totalPages}\n          </span>\n          <button\n            disabled={page === totalPages}\n            onClick={() => {\n              setPage(page + 1);\n            }}>\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    },
    "/src/index.tsx": {
      "code": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n);\n"
    },
    "/src/styles.css": {
      "code": "body {\n  font-family: sans-serif;\n}\n\ntable {\n  border-collapse: collapse;\n  font-size: 14px;\n}\n\ntd,\nth {\n  padding: 4px;\n  border-bottom: 1px solid #ddd;\n  text-align: start;\n}\n\nth {\n  vertical-align: top;\n}\n\nth button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n}\n\n.pagination {\n  display: flex;\n  font-size: 14px;\n  gap: 12px;\n}\n\n.pages {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n}\n"
    },
    "/tsconfig.json": {
      "code": "{\n  \"include\": [\"./**/*\"],\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"resolveJsonModule\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"react-jsx\",\n    \"target\": \"es2020\"\n  }\n}\n"
    }
  },
  "workspace": {
    "visibleFiles": [
      "/src/App.tsx",
      "/src/DataTable.tsx",
      "/src/styles.css"
    ],
    "activeFile": "/src/DataTable.tsx",
    "environment": "create-react-app"
  },
  "writeup": "var Component=(()=>{var w=Object.create;var s=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var T=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!_.call(t,a)&&a!==r&&s(t,a,{get:()=>e[a],enumerable:!(c=y(e,a))||c.enumerable});return t};var d=(t,e,r)=>(r=t!=null?w(j(t)):{},h(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),k=t=>h(s({},\"__esModule\",{value:!0}),t);var l=T((X,u)=>{u.exports=_jsx_runtime});var D={};v(D,{default:()=>M});var o=d(l());var n=d(l());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/data-table/solution\",children:\"Data Table's solution\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"A common follow up question to a paginated data table is to add sorting features, sort the data by the available columns.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"The new data needed for a data table that allows for sorting is the column to be sorted by and the direction to sort. There are two approaches to represent this configuration:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Single value\"}),\": Encapsulated within one value (e.g. \",(0,n.jsx)(e.code,{children:\"name-asc\"}),\", \",(0,n.jsx)(e.code,{children:\"name-desc\"}),\", etc.).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Two values\"}),\": Separate out the sort field (e.g. \",(0,n.jsx)(e.code,{children:\"name\"}),\", \",(0,n.jsx)(e.code,{children:\"age\"}),\", etc.) and sort direction (\",(0,n.jsx)(e.code,{children:\"asc\"}),\" and \",(0,n.jsx)(e.code,{children:\"desc\"}),\").\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Both approaches are viable but it is probably clearer to have two separate fields.\"}),`\n`,(0,n.jsx)(e.p,{children:\"These state values are set/toggled by clicking on the table headers.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Sorting\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We implement a function \",(0,n.jsx)(e.code,{children:\"sortUsers\"}),\" that takes in the the list of users, the current sort field, and sort direction. It will return the list of users sorted by the specified field in that order.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A basic way to do the sorting is to use a switch-case statement for each possible field and implement the sorting logic within the case. Recall that there are two values types within the table \\u2013 strings for \",(0,n.jsx)(e.code,{children:\"name\"}),\" and \",(0,n.jsx)(e.code,{children:\"occupation\"}),\", and numbers of \",(0,n.jsx)(e.code,{children:\"id\"}),\" and \",(0,n.jsx)(e.code,{children:\"age\"}),\". Sorting strings has to be done via \",(0,n.jsx)(e.code,{children:\"String.prototype.toLocaleCompare()\"}),\" and should not be done using the \",(0,n.jsx)(e.code,{children:\">\"}),\" and \",(0,n.jsx)(e.code,{children:\"<\"}),\" operators.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Just like for pagination where the page number is set to 1 when the page size changes, the page size should also be reset when the sorting field or direction changes.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Integrating with pagination\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Sorting has to be done before pagination. Integration is simply sorting the users before passing the sorted user list to \",(0,n.jsx)(e.code,{children:\"paginateUsers()\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Both sorting and paginating functions will be called in the render path and the returned users \",(0,n.jsx)(e.code,{children:\"pageUsers\"}),\" is the current page of users to be rendered after taking into account sorting. The rendering code doesn't need to be changed much.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Follow up\"}),`\n`,(0,n.jsx)(e.p,{children:\"Paginating and sorting are just the initial steps of a data table. Data tables can also support:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Filtering on each column/field\"}),`\n`,(0,n.jsx)(e.li,{children:\"Fetching sorted, paginated, and filtered data from a remote API\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Consider how easy it is to add new fields:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"How many places do you need to change if a new field is to be displayed?\"}),`\n`,(0,n.jsx)(e.li,{children:\"The current component is very coupled to the fields of a user, how can you modify the component to be data agnostic?\"}),`\n`,(0,n.jsx)(e.li,{children:\"What if there are non-textual fields to be displayed?\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you have the time, have a look at \",(0,n.jsx)(e.a,{href:\"https://tanstack.com/table/\",children:\"TanStack Table\"}),\" to get a sense of what features goes into production-ready data table libraries and how complex data tables can be.\"]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var p=C;var i=d(l());function f(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Initial data sorting\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that clicking on a column header sorts the table by that column in ascending order.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test that clicking on a column header that is already sorted toggles the sorting order.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Sorting by different columns\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that sorting by various columns works correctly.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Integration with pagination\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that sorting works correctly with pagination. Clicking on the next button should show next page of results while in the current sorted order.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Changing the sort column should reset the page to the first.\"}),`\n`]}),`\n`]}),`\n`]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var m=S;function b(t){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(m,{})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(b,t)})):b(t)}var M=F;return k(D);})();\n;return Component;"
}