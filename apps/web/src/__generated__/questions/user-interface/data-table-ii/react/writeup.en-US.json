{
  "skeleton": "var Component=(()=>{var g=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var a in e)r(t,a,{get:e[a],enumerable:!0})},c=(t,e,a,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!w.call(t,o)&&o!==a&&r(t,o,{get:()=>e[o],enumerable:!(l=m(e,o))||l.enumerable});return t};var d=(t,e,a)=>(a=t!=null?g(x(t)):{},c(e||!t||!t.__esModule?r(a,\"default\",{value:t,enumerable:!0}):a,t)),D=t=>c(r({},\"__esModule\",{value:!0}),t);var i=y((X,u)=>{u.exports=_jsx_runtime});var M={};j(M,{default:()=>T});var s=d(i());var n=d(i());function h(t){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" This is a follow up to the \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/data-table\",children:\"Data Table\"}),\" question, you should complete that question first before attempting this question.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/data-table\",children:\"Data Table\"}),\", we built a users data table that displays users in a paginated format. Data tables often allow sorting rows by specific columns in both ascending and descending order.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Requirements\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Allow sorting by a specific column by clicking on the table header. The data will be sorted by the selected column in ascending order (default).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Clicking on the header of the table that is already sorted by that column will toggle the sorting order between ascending and descending.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Notes\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The skeleton code uses the solution of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/data-table\",children:\"Data Table\"}),\", but you are free to use your own solution as a starting point.\"]})]})}function _(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var f=_;function b(t){return(0,s.jsx)(f,{})}function q(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(b,t)})):b(t)}var T=q;return D(M);})();\n;return Component;",
  "solution": "var Component=(()=>{var w=Object.create;var s=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var T=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!_.call(t,a)&&a!==r&&s(t,a,{get:()=>e[a],enumerable:!(c=y(e,a))||c.enumerable});return t};var d=(t,e,r)=>(r=t!=null?w(j(t)):{},h(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),k=t=>h(s({},\"__esModule\",{value:!0}),t);var l=T((X,u)=>{u.exports=_jsx_runtime});var D={};v(D,{default:()=>M});var o=d(l());var n=d(l());function g(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll build on top of \",(0,n.jsx)(e.a,{href:\"/questions/user-interface/data-table/solution\",children:\"Data Table's solution\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"A common follow up question to a paginated data table is to add sorting features, sort the data by the available columns.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"State\"}),`\n`,(0,n.jsx)(e.p,{children:\"The new data needed for a data table that allows for sorting is the column to be sorted by and the direction to sort. There are two approaches to represent this configuration:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Single value\"}),\": Encapsulated within one value (e.g. \",(0,n.jsx)(e.code,{children:\"name-asc\"}),\", \",(0,n.jsx)(e.code,{children:\"name-desc\"}),\", etc.).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Two values\"}),\": Separate out the sort field (e.g. \",(0,n.jsx)(e.code,{children:\"name\"}),\", \",(0,n.jsx)(e.code,{children:\"age\"}),\", etc.) and sort direction (\",(0,n.jsx)(e.code,{children:\"asc\"}),\" and \",(0,n.jsx)(e.code,{children:\"desc\"}),\").\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Both approaches are viable but it is probably clearer to have two separate fields.\"}),`\n`,(0,n.jsx)(e.p,{children:\"These state values are set/toggled by clicking on the table headers.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Sorting\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We implement a function \",(0,n.jsx)(e.code,{children:\"sortUsers\"}),\" that takes in the the list of users, the current sort field, and sort direction. It will return the list of users sorted by the specified field in that order.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A basic way to do the sorting is to use a switch-case statement for each possible field and implement the sorting logic within the case. Recall that there are two values types within the table \\u2013 strings for \",(0,n.jsx)(e.code,{children:\"name\"}),\" and \",(0,n.jsx)(e.code,{children:\"occupation\"}),\", and numbers of \",(0,n.jsx)(e.code,{children:\"id\"}),\" and \",(0,n.jsx)(e.code,{children:\"age\"}),\". Sorting strings has to be done via \",(0,n.jsx)(e.code,{children:\"String.prototype.toLocaleCompare()\"}),\" and should not be done using the \",(0,n.jsx)(e.code,{children:\">\"}),\" and \",(0,n.jsx)(e.code,{children:\"<\"}),\" operators.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Just like for pagination where the page number is set to 1 when the page size changes, the page size should also be reset when the sorting field or direction changes.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Integrating with pagination\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Sorting has to be done before pagination. Integration is simply sorting the users before passing the sorted user list to \",(0,n.jsx)(e.code,{children:\"paginateUsers()\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Both sorting and paginating functions will be called in the render path and the returned users \",(0,n.jsx)(e.code,{children:\"pageUsers\"}),\" is the current page of users to be rendered after taking into account sorting. The rendering code doesn't need to be changed much.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Follow up\"}),`\n`,(0,n.jsx)(e.p,{children:\"Paginating and sorting are just the initial steps of a data table. Data tables can also support:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Filtering on each column/field\"}),`\n`,(0,n.jsx)(e.li,{children:\"Fetching sorted, paginated, and filtered data from a remote API\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Consider how easy it is to add new fields:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"How many places do you need to change if a new field is to be displayed?\"}),`\n`,(0,n.jsx)(e.li,{children:\"The current component is very coupled to the fields of a user, how can you modify the component to be data agnostic?\"}),`\n`,(0,n.jsx)(e.li,{children:\"What if there are non-textual fields to be displayed?\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you have the time, have a look at \",(0,n.jsx)(e.a,{href:\"https://tanstack.com/table/\",children:\"TanStack Table\"}),\" to get a sense of what features goes into production-ready data table libraries and how complex data tables can be.\"]})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var p=C;var i=d(l());function f(t){let e=Object.assign({h2:\"h2\",ol:\"ol\",li:\"li\",ul:\"ul\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{children:\"Test cases\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Initial data sorting\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that clicking on a column header sorts the table by that column in ascending order.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Test that clicking on a column header that is already sorted toggles the sorting order.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Sorting by different columns\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that sorting by various columns works correctly.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Integration with pagination\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Test that sorting works correctly with pagination. Clicking on the next button should show next page of results while in the current sorted order.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Changing the sort column should reset the page to the first.\"}),`\n`]}),`\n`]}),`\n`]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(f,t)})):f(t)}var m=S;function b(t){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(p,{}),`\n`,(0,o.jsx)(m,{})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(b,t)})):b(t)}var M=F;return k(D);})();\n;return Component;"
}