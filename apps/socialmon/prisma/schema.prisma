generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PostRelevancy {
  RELEVANT
  IRRELEVANT
}

enum ActivityAction {
  MADE_IRRELEVANT
  MADE_RELEVANT
  REPLIED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  replies       RedditPostReply[]
  activities    Activity[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model RedditPost {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId          String    @db.VarChar
  title           String    @db.VarChar
  content         String    @db.VarChar
  postedAt        DateTime  @db.Timestamp(6)
  permalink       String    @db.VarChar
  response        String?   @db.VarChar
  subreddit       String    @db.VarChar
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt
  keywords        String[]
  relevancy       PostRelevancy?
  activities      Activity[]
  reply           RedditPostReply?
  projectId       String    @db.Uuid()

  upvoteCount     Int       @default(0)
  commentsCount   Int       @default(0)
  statsUpdatedAt  DateTime  @default(now()) @db.Timestamptz(6)
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([postId, projectId])
  @@index([projectId])
}

model Activity {
  id        Int               @id @default(autoincrement())
  action    ActivityAction
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  postId    String            @db.Uuid
  projectId String            @db.Uuid()
  userId    String            @map("user_id")

  post      RedditPost        @relation(fields: [postId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([projectId])
}

model RedditUser {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String       @db.VarChar
  password      String       @db.VarChar
  projectId     String       @db.Uuid
  replies       RedditPostReply[]

  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([projectId, username])
  @@index([projectId])
}


model RedditPostReply {
  id                    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content               String    @db.VarChar
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  permalink             String @db.VarChar
  postId                String @db.Uuid @unique
  redditUserId          String @db.Uuid
  userId                String

  post                  RedditPost  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  redditUser            RedditUser @relation(fields: [redditUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([redditUserId])
  @@index([userId])
}

model ProjectSubredditKeywords {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  projectId  String   @db.Uuid
  keywords   String[]
  subreddits String[]

  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Project {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String    @db.VarChar
  slug                String    @unique @default(dbgenerated("SUBSTRING((gen_random_uuid())::text FROM 1 FOR 8)")) @db.Citext
  keywords            String[]
  subreddits          String[]
  redditUsers         RedditUser[]
  posts               RedditPost[]
  activities          Activity[]
  productsToAdvertise Json
  postFilteringPrompt String
  postsLastFetchedAt  DateTime?  @db.Timestamptz(6)

  subredditKeywords   ProjectSubredditKeywords[]

  @@index([slug])
}
